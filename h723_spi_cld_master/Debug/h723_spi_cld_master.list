
h723_spi_cld_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004840  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004b0c  08004b0c  00005b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b1c  08004b1c  00005b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08004b20  08004b20  00005b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000001c  24000000  08004b24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c4  2400001c  08004b40  0000601c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000e0  08004b40  000060e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c1ed  00000000  00000000  0000604a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001dc1  00000000  00000000  00012237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009f0  00000000  00000000  00013ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000773  00000000  00000000  000149e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000315b4  00000000  00000000  0001515b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e77d  00000000  00000000  0004670f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013c834  00000000  00000000  00054e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001916c0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027bc  00000000  00000000  00191704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004b  00000000  00000000  00193ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	2400001c 	.word	0x2400001c
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08004af4 	.word	0x08004af4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000020 	.word	0x24000020
 8000308:	08004af4 	.word	0x08004af4

0800030c <lcd_init>:
#include "lcd.h"
#include "string.h"
#include "stdio.h"

// Initialization function for LCD
void lcd_init(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
    HAL_Delay(50);             // Initial delay for LCD power up
 8000310:	2032      	movs	r0, #50	@ 0x32
 8000312:	f000 fcc5 	bl	8000ca0 <HAL_Delay>
    lcd_send_cmd(0x30);        // Wake up command
 8000316:	2030      	movs	r0, #48	@ 0x30
 8000318:	f000 f82f 	bl	800037a <lcd_send_cmd>
    HAL_Delay(5);
 800031c:	2005      	movs	r0, #5
 800031e:	f000 fcbf 	bl	8000ca0 <HAL_Delay>
    lcd_send_cmd(0x30);        // Wake up command
 8000322:	2030      	movs	r0, #48	@ 0x30
 8000324:	f000 f829 	bl	800037a <lcd_send_cmd>
    HAL_Delay(1);
 8000328:	2001      	movs	r0, #1
 800032a:	f000 fcb9 	bl	8000ca0 <HAL_Delay>
    lcd_send_cmd(0x30);        // Wake up command
 800032e:	2030      	movs	r0, #48	@ 0x30
 8000330:	f000 f823 	bl	800037a <lcd_send_cmd>
    HAL_Delay(10);
 8000334:	200a      	movs	r0, #10
 8000336:	f000 fcb3 	bl	8000ca0 <HAL_Delay>
    lcd_send_cmd(0x20);        // Set 4-bit mode
 800033a:	2020      	movs	r0, #32
 800033c:	f000 f81d 	bl	800037a <lcd_send_cmd>
    HAL_Delay(10);
 8000340:	200a      	movs	r0, #10
 8000342:	f000 fcad 	bl	8000ca0 <HAL_Delay>
    lcd_send_cmd(0x28);        // Function set: 4-bit mode, 2 lines, 5x8 dots
 8000346:	2028      	movs	r0, #40	@ 0x28
 8000348:	f000 f817 	bl	800037a <lcd_send_cmd>
    HAL_Delay(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f000 fca7 	bl	8000ca0 <HAL_Delay>
    lcd_send_cmd(0x0C);        // Display on, cursor off, blink off
 8000352:	200c      	movs	r0, #12
 8000354:	f000 f811 	bl	800037a <lcd_send_cmd>
    HAL_Delay(1);
 8000358:	2001      	movs	r0, #1
 800035a:	f000 fca1 	bl	8000ca0 <HAL_Delay>
    lcd_send_cmd(0x01);        // Clear display
 800035e:	2001      	movs	r0, #1
 8000360:	f000 f80b 	bl	800037a <lcd_send_cmd>
    HAL_Delay(2);
 8000364:	2002      	movs	r0, #2
 8000366:	f000 fc9b 	bl	8000ca0 <HAL_Delay>
    lcd_send_cmd(0x06);        // Entry mode set: increment cursor, no shift
 800036a:	2006      	movs	r0, #6
 800036c:	f000 f805 	bl	800037a <lcd_send_cmd>
    HAL_Delay(1);
 8000370:	2001      	movs	r0, #1
 8000372:	f000 fc95 	bl	8000ca0 <HAL_Delay>
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}

0800037a <lcd_send_cmd>:

// Send command to LCD
void lcd_send_cmd(char cmd) {
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	4603      	mov	r3, r0
 8000382:	71fb      	strb	r3, [r7, #7]
    lcd_send_to_lcd(cmd, 0);
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2100      	movs	r1, #0
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f827 	bl	80003dc <lcd_send_to_lcd>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <lcd_send_data>:

// Send data to LCD
void lcd_send_data(char data) {
 8000396:	b580      	push	{r7, lr}
 8000398:	b082      	sub	sp, #8
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	71fb      	strb	r3, [r7, #7]
    lcd_send_to_lcd(data, 1);
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2101      	movs	r1, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f819 	bl	80003dc <lcd_send_to_lcd>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <lcd_send_string>:

// Send a string to the LCD
void lcd_send_string(char *str) {
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 80003ba:	e006      	b.n	80003ca <lcd_send_string+0x18>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ffe6 	bl	8000396 <lcd_send_data>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1f4      	bne.n	80003bc <lcd_send_string+0xa>
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <lcd_send_to_lcd>:

// Low level function to send data/command to LCD
void lcd_send_to_lcd(char data, int rs) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	6039      	str	r1, [r7, #0]
 80003e6:	71fb      	strb	r3, [r7, #7]
    // Set RS pin
    HAL_GPIO_WritePin(LCD_Port, RS_Pin, rs);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	461a      	mov	r2, r3
 80003ee:	2101      	movs	r1, #1
 80003f0:	4838      	ldr	r0, [pc, #224]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 80003f2:	f001 f98f 	bl	8001714 <HAL_GPIO_WritePin>

    // Send higher nibble
    HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2102      	movs	r1, #2
 80003fa:	4836      	ldr	r0, [pc, #216]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 80003fc:	f001 f98a 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D4_Pin, (data >> 4) & 0x01);
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	091b      	lsrs	r3, r3, #4
 8000404:	b2db      	uxtb	r3, r3
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	b2db      	uxtb	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	2104      	movs	r1, #4
 8000410:	4830      	ldr	r0, [pc, #192]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 8000412:	f001 f97f 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D5_Pin, (data >> 5) & 0x01);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	095b      	lsrs	r3, r3, #5
 800041a:	b2db      	uxtb	r3, r3
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	b2db      	uxtb	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	2108      	movs	r1, #8
 8000426:	482b      	ldr	r0, [pc, #172]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 8000428:	f001 f974 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D6_Pin, (data >> 6) & 0x01);
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	099b      	lsrs	r3, r3, #6
 8000430:	b2db      	uxtb	r3, r3
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	b2db      	uxtb	r3, r3
 8000438:	461a      	mov	r2, r3
 800043a:	2110      	movs	r1, #16
 800043c:	4825      	ldr	r0, [pc, #148]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 800043e:	f001 f969 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D7_Pin, (data >> 7) & 0x01);
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	09db      	lsrs	r3, r3, #7
 8000446:	b2db      	uxtb	r3, r3
 8000448:	461a      	mov	r2, r3
 800044a:	2120      	movs	r1, #32
 800044c:	4821      	ldr	r0, [pc, #132]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 800044e:	f001 f961 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2102      	movs	r1, #2
 8000456:	481f      	ldr	r0, [pc, #124]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 8000458:	f001 f95c 	bl	8001714 <HAL_GPIO_WritePin>

    // Small delay to ensure data is properly written
   // HAL_Delay(1);

    // Send lower nibble
    HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2102      	movs	r1, #2
 8000460:	481c      	ldr	r0, [pc, #112]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 8000462:	f001 f957 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D4_Pin, data & 0x01);
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	b2db      	uxtb	r3, r3
 800046e:	461a      	mov	r2, r3
 8000470:	2104      	movs	r1, #4
 8000472:	4818      	ldr	r0, [pc, #96]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 8000474:	f001 f94e 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D5_Pin, (data >> 1) & 0x01);
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	085b      	lsrs	r3, r3, #1
 800047c:	b2db      	uxtb	r3, r3
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	b2db      	uxtb	r3, r3
 8000484:	461a      	mov	r2, r3
 8000486:	2108      	movs	r1, #8
 8000488:	4812      	ldr	r0, [pc, #72]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 800048a:	f001 f943 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D6_Pin, (data >> 2) & 0x01);
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	089b      	lsrs	r3, r3, #2
 8000492:	b2db      	uxtb	r3, r3
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	2110      	movs	r1, #16
 800049e:	480d      	ldr	r0, [pc, #52]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 80004a0:	f001 f938 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D7_Pin, (data >> 3) & 0x01);
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	08db      	lsrs	r3, r3, #3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	461a      	mov	r2, r3
 80004b2:	2120      	movs	r1, #32
 80004b4:	4807      	ldr	r0, [pc, #28]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 80004b6:	f001 f92d 	bl	8001714 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2102      	movs	r1, #2
 80004be:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <lcd_send_to_lcd+0xf8>)
 80004c0:	f001 f928 	bl	8001714 <HAL_GPIO_WritePin>

    // Small delay to ensure data is properly written
    HAL_Delay(1);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 fbeb 	bl	8000ca0 <HAL_Delay>
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	58020000 	.word	0x58020000

080004d8 <lcd_set_cursor>:

// Set cursor position on LCD
void lcd_set_cursor(uint8_t row, uint8_t col) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	460a      	mov	r2, r1
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch(row) {
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d002      	beq.n	80004f4 <lcd_set_cursor+0x1c>
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d003      	beq.n	80004fa <lcd_set_cursor+0x22>
 80004f2:	e006      	b.n	8000502 <lcd_set_cursor+0x2a>
        case 0:
            address = 0x00 + col;
 80004f4:	79bb      	ldrb	r3, [r7, #6]
 80004f6:	73fb      	strb	r3, [r7, #15]
            break;
 80004f8:	e006      	b.n	8000508 <lcd_set_cursor+0x30>
        case 1:
            address = 0x40 + col;
 80004fa:	79bb      	ldrb	r3, [r7, #6]
 80004fc:	3340      	adds	r3, #64	@ 0x40
 80004fe:	73fb      	strb	r3, [r7, #15]
            break;
 8000500:	e002      	b.n	8000508 <lcd_set_cursor+0x30>
        default:
            address = 0x00 + col;
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	73fb      	strb	r3, [r7, #15]
            break;
 8000506:	bf00      	nop
    }
    lcd_send_cmd(0x80 | address);
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800050e:	b2db      	uxtb	r3, r3
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff32 	bl	800037a <lcd_send_cmd>
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <lcd_clear>:

// Clear LCD display
void lcd_clear(void) {
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000522:	2001      	movs	r0, #1
 8000524:	f7ff ff29 	bl	800037a <lcd_send_cmd>
    HAL_Delay(2); // Clear display command needs a longer delay
 8000528:	2002      	movs	r0, #2
 800052a:	f000 fbb9 	bl	8000ca0 <HAL_Delay>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af02      	add	r7, sp, #8

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800053a:	f000 fb1f 	bl	8000b7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800053e:	f000 f85d 	bl	80005fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000542:	f000 f929 	bl	8000798 <MX_GPIO_Init>
	MX_SPI4_Init();
 8000546:	f000 f8c9 	bl	80006dc <MX_SPI4_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 800054a:	f7ff fedf 	bl	800030c <lcd_init>
	lcd_clear();
 800054e:	f7ff ffe6 	bl	800051e <lcd_clear>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_SPI_TransmitReceive(&hspi4, txData, rxData, sizeof(rxData), HAL_MAX_DELAY);
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	230a      	movs	r3, #10
 800055a:	4a23      	ldr	r2, [pc, #140]	@ (80005e8 <main+0xb4>)
 800055c:	4923      	ldr	r1, [pc, #140]	@ (80005ec <main+0xb8>)
 800055e:	4824      	ldr	r0, [pc, #144]	@ (80005f0 <main+0xbc>)
 8000560:	f003 fc5e 	bl	8003e20 <HAL_SPI_TransmitReceive>
		//HAL_Delay(2000);
		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET) // ถ้าปุ่มถูกกด
 8000564:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000568:	4822      	ldr	r0, [pc, #136]	@ (80005f4 <main+0xc0>)
 800056a:	f001 f8bb 	bl	80016e4 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d12e      	bne.n	80005d2 <main+0x9e>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // เปิด LED
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800057a:	481e      	ldr	r0, [pc, #120]	@ (80005f4 <main+0xc0>)
 800057c:	f001 f8ca 	bl	8001714 <HAL_GPIO_WritePin>
			lcd_clear();
 8000580:	f7ff ffcd 	bl	800051e <lcd_clear>
			lcd_set_cursor(0, 0);
 8000584:	2100      	movs	r1, #0
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff ffa6 	bl	80004d8 <lcd_set_cursor>
			lcd_send_string((char*)&txData);
 800058c:	4817      	ldr	r0, [pc, #92]	@ (80005ec <main+0xb8>)
 800058e:	f7ff ff10 	bl	80003b2 <lcd_send_string>

			// แปลงข้อมูลจาก rxData เป็น char และใส่ลงใน buffer
			for (int i = 0; i < sizeof(rxData); i++) {
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	e00b      	b.n	80005b0 <main+0x7c>
				buffer[i] = (char)rxData[i];
 8000598:	4a13      	ldr	r2, [pc, #76]	@ (80005e8 <main+0xb4>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	7819      	ldrb	r1, [r3, #0]
 80005a0:	4a15      	ldr	r2, [pc, #84]	@ (80005f8 <main+0xc4>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	460a      	mov	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(rxData); i++) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3301      	adds	r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b09      	cmp	r3, #9
 80005b4:	d9f0      	bls.n	8000598 <main+0x64>
			}
			buffer[sizeof(rxData)] = '\0'; // ใส่ null terminator
 80005b6:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <main+0xc4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	729a      	strb	r2, [r3, #10]
			lcd_set_cursor(1, 0);
 80005bc:	2100      	movs	r1, #0
 80005be:	2001      	movs	r0, #1
 80005c0:	f7ff ff8a 	bl	80004d8 <lcd_set_cursor>
			lcd_send_string(buffer);
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <main+0xc4>)
 80005c6:	f7ff fef4 	bl	80003b2 <lcd_send_string>
			HAL_Delay(50);
 80005ca:	2032      	movs	r0, #50	@ 0x32
 80005cc:	f000 fb68 	bl	8000ca0 <HAL_Delay>
 80005d0:	e005      	b.n	80005de <main+0xaa>
		}
		else
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // ปิด LED
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d8:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <main+0xc0>)
 80005da:	f001 f89b 	bl	8001714 <HAL_GPIO_WritePin>
		}

		HAL_Delay(100);
 80005de:	2064      	movs	r0, #100	@ 0x64
 80005e0:	f000 fb5e 	bl	8000ca0 <HAL_Delay>
		HAL_SPI_TransmitReceive(&hspi4, txData, rxData, sizeof(rxData), HAL_MAX_DELAY);
 80005e4:	e7b5      	b.n	8000552 <main+0x1e>
 80005e6:	bf00      	nop
 80005e8:	240000c0 	.word	0x240000c0
 80005ec:	24000000 	.word	0x24000000
 80005f0:	24000038 	.word	0x24000038
 80005f4:	58020c00 	.word	0x58020c00
 80005f8:	240000cc 	.word	0x240000cc

080005fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	@ 0x70
 8000600:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000606:	224c      	movs	r2, #76	@ 0x4c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fa45 	bl	8004a9a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2220      	movs	r2, #32
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fa3f 	bl	8004a9a <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800061c:	2002      	movs	r0, #2
 800061e:	f001 f893 	bl	8001748 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	4b2c      	ldr	r3, [pc, #176]	@ (80006d8 <SystemClock_Config+0xdc>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800062e:	4a2a      	ldr	r2, [pc, #168]	@ (80006d8 <SystemClock_Config+0xdc>)
 8000630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xdc>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000642:	bf00      	nop
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <SystemClock_Config+0xdc>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800064c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000650:	d1f8      	bne.n	8000644 <SystemClock_Config+0x48>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000656:	2301      	movs	r3, #1
 8000658:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 800065a:	2340      	movs	r3, #64	@ 0x40
 800065c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2300      	movs	r3, #0
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 13;
 800066a:	230d      	movs	r3, #13
 800066c:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 3;
 800066e:	2303      	movs	r3, #3
 8000670:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800067a:	230c      	movs	r3, #12
 800067c:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800067e:	2300      	movs	r3, #0
 8000680:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f895 	bl	80017bc <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xa0>
	{
		Error_Handler();
 8000698:	f000 f904 	bl	80008a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	233f      	movs	r3, #63	@ 0x3f
 800069e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2102      	movs	r1, #2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fc55 	bl	8001f70 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 80006cc:	f000 f8ea 	bl	80008a4 <Error_Handler>
	}
}
 80006d0:	bf00      	nop
 80006d2:	3770      	adds	r7, #112	@ 0x70
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	58024800 	.word	0x58024800

080006dc <MX_SPI4_Init>:
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 80006e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_SPI4_Init+0xb4>)
 80006e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000794 <MX_SPI4_Init+0xb8>)
 80006e4:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <MX_SPI4_Init+0xb4>)
 80006e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006ec:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <MX_SPI4_Init+0xb4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_SPI4_Init+0xb4>)
 80006f6:	2207      	movs	r2, #7
 80006f8:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <MX_SPI4_Init+0xb4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000708:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800070c:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000710:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000714:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000716:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800071c:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <MX_SPI4_Init+0xb4>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000724:	2200      	movs	r2, #0
 8000726:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi4.Init.CRCPolynomial = 0x0;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_SPI4_Init+0xb4>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000730:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000738:	2200      	movs	r2, #0
 800073a:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SPI4_Init+0xb4>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000744:	2200      	movs	r2, #0
 8000746:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SPI4_Init+0xb4>)
 800074a:	2200      	movs	r2, #0
 800074c:	645a      	str	r2, [r3, #68]	@ 0x44
	hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000750:	2200      	movs	r2, #0
 8000752:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000756:	2200      	movs	r2, #0
 8000758:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <MX_SPI4_Init+0xb4>)
 800075c:	2200      	movs	r2, #0
 800075e:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000762:	2200      	movs	r2, #0
 8000764:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_SPI4_Init+0xb4>)
 8000768:	2200      	movs	r2, #0
 800076a:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800076c:	4808      	ldr	r0, [pc, #32]	@ (8000790 <MX_SPI4_Init+0xb4>)
 800076e:	f003 fa33 	bl	8003bd8 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI4_Init+0xa0>
	{
		Error_Handler();
 8000778:	f000 f894 	bl	80008a4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */
	HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	2054      	movs	r0, #84	@ 0x54
 8000782:	f000 fb8c 	bl	8000e9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8000786:	2054      	movs	r0, #84	@ 0x54
 8000788:	f000 fba3 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
	/* USER CODE END SPI4_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	24000038 	.word	0x24000038
 8000794:	40013400 	.word	0x40013400

08000798 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000898 <MX_GPIO_Init+0x100>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b4:	4a38      	ldr	r2, [pc, #224]	@ (8000898 <MX_GPIO_Init+0x100>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007be:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <MX_GPIO_Init+0x100>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	f003 0310 	and.w	r3, r3, #16
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007cc:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <MX_GPIO_Init+0x100>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d2:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <MX_GPIO_Init+0x100>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000898 <MX_GPIO_Init+0x100>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <MX_GPIO_Init+0x100>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f0:	4a29      	ldr	r2, [pc, #164]	@ (8000898 <MX_GPIO_Init+0x100>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007fa:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <MX_GPIO_Init+0x100>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000808:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_GPIO_Init+0x100>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080e:	4a22      	ldr	r2, [pc, #136]	@ (8000898 <MX_GPIO_Init+0x100>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_GPIO_Init+0x100>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000826:	2200      	movs	r2, #0
 8000828:	213f      	movs	r1, #63	@ 0x3f
 800082a:	481c      	ldr	r0, [pc, #112]	@ (800089c <MX_GPIO_Init+0x104>)
 800082c:	f000 ff72 	bl	8001714 <HAL_GPIO_WritePin>
			|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000836:	481a      	ldr	r0, [pc, #104]	@ (80008a0 <MX_GPIO_Init+0x108>)
 8000838:	f000 ff6c 	bl	8001714 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800083c:	233f      	movs	r3, #63	@ 0x3f
 800083e:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_4|GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4812      	ldr	r0, [pc, #72]	@ (800089c <MX_GPIO_Init+0x104>)
 8000854:	f000 fd9e 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000858:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800085c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <MX_GPIO_Init+0x108>)
 8000872:	f000 fd8f 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pin : KEY_Pin */
	GPIO_InitStruct.Pin = KEY_Pin;
 8000876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800087a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_GPIO_Init+0x108>)
 800088c:	f000 fd82 	bl	8001394 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58024400 	.word	0x58024400
 800089c:	58020000 	.word	0x58020000
 80008a0:	58020c00 	.word	0x58020c00

080008a4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <HAL_MspInit+0x30>)
 80008b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008bc:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_MspInit+0x30>)
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_MspInit+0x30>)
 80008c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	58024400 	.word	0x58024400

080008e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0b8      	sub	sp, #224	@ 0xe0
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	22b8      	movs	r2, #184	@ 0xb8
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f004 f8c8 	bl	8004a9a <memset>
  if(hspi->Instance==SPI4)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a2a      	ldr	r2, [pc, #168]	@ (80009b8 <HAL_SPI_MspInit+0xd4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d14c      	bne.n	80009ae <HAL_SPI_MspInit+0xca>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000918:	f04f 0300 	mov.w	r3, #0
 800091c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000920:	2300      	movs	r3, #0
 8000922:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fe51 	bl	80025d0 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000934:	f7ff ffb6 	bl	80008a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <HAL_SPI_MspInit+0xd8>)
 800093a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800093e:	4a1f      	ldr	r2, [pc, #124]	@ (80009bc <HAL_SPI_MspInit+0xd8>)
 8000940:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <HAL_SPI_MspInit+0xd8>)
 800094a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800094e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <HAL_SPI_MspInit+0xd8>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <HAL_SPI_MspInit+0xd8>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <HAL_SPI_MspInit+0xd8>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000974:	2374      	movs	r3, #116	@ 0x74
 8000976:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800098c:	2305      	movs	r3, #5
 800098e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000992:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000996:	4619      	mov	r1, r3
 8000998:	4809      	ldr	r0, [pc, #36]	@ (80009c0 <HAL_SPI_MspInit+0xdc>)
 800099a:	f000 fcfb 	bl	8001394 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2054      	movs	r0, #84	@ 0x54
 80009a4:	f000 fa7b 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80009a8:	2054      	movs	r0, #84	@ 0x54
 80009aa:	f000 fa92 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 80009ae:	bf00      	nop
 80009b0:	37e0      	adds	r7, #224	@ 0xe0
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40013400 	.word	0x40013400
 80009bc:	58024400 	.word	0x58024400
 80009c0:	58021000 	.word	0x58021000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 f921 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <SPI4_IRQHandler+0x10>)
 8000a2a:	f003 fd33 	bl	8004494 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24000038 	.word	0x24000038

08000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b32      	ldr	r3, [pc, #200]	@ (8000b08 <SystemInit+0xd0>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a42:	4a31      	ldr	r2, [pc, #196]	@ (8000b08 <SystemInit+0xd0>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <SystemInit+0xd4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f003 030f 	and.w	r3, r3, #15
 8000a54:	2b06      	cmp	r3, #6
 8000a56:	d807      	bhi.n	8000a68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a58:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <SystemInit+0xd4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f023 030f 	bic.w	r3, r3, #15
 8000a60:	4a2a      	ldr	r2, [pc, #168]	@ (8000b0c <SystemInit+0xd4>)
 8000a62:	f043 0307 	orr.w	r3, r3, #7
 8000a66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a68:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <SystemInit+0xd8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a28      	ldr	r2, [pc, #160]	@ (8000b10 <SystemInit+0xd8>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a74:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <SystemInit+0xd8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a7a:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <SystemInit+0xd8>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4924      	ldr	r1, [pc, #144]	@ (8000b10 <SystemInit+0xd8>)
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <SystemInit+0xdc>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a86:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <SystemInit+0xd4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d007      	beq.n	8000aa2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a92:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <SystemInit+0xd4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f023 030f 	bic.w	r3, r3, #15
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b0c <SystemInit+0xd4>)
 8000a9c:	f043 0307 	orr.w	r3, r3, #7
 8000aa0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <SystemInit+0xd8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <SystemInit+0xd8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <SystemInit+0xd8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <SystemInit+0xd8>)
 8000ab6:	4a18      	ldr	r2, [pc, #96]	@ (8000b18 <SystemInit+0xe0>)
 8000ab8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <SystemInit+0xd8>)
 8000abc:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <SystemInit+0xe4>)
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <SystemInit+0xd8>)
 8000ac2:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <SystemInit+0xe8>)
 8000ac4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <SystemInit+0xd8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000acc:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <SystemInit+0xd8>)
 8000ace:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <SystemInit+0xe8>)
 8000ad0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <SystemInit+0xd8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <SystemInit+0xd8>)
 8000ada:	4a11      	ldr	r2, [pc, #68]	@ (8000b20 <SystemInit+0xe8>)
 8000adc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <SystemInit+0xd8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <SystemInit+0xd8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a09      	ldr	r2, [pc, #36]	@ (8000b10 <SystemInit+0xd8>)
 8000aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000aee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000af0:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <SystemInit+0xd8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <SystemInit+0xec>)
 8000af8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000afc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	52002000 	.word	0x52002000
 8000b10:	58024400 	.word	0x58024400
 8000b14:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b18:	02020200 	.word	0x02020200
 8000b1c:	01ff0000 	.word	0x01ff0000
 8000b20:	01010280 	.word	0x01010280
 8000b24:	52004000 	.word	0x52004000

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b2c:	f7ff ff84 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	@ (8000b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f003 ffa9 	bl	8004aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fceb 	bl	8000534 <main>
  bx  lr
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000b64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b68:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8000b6c:	08004b24 	.word	0x08004b24
  ldr r2, =_sbss
 8000b70:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8000b74:	240000e0 	.word	0x240000e0

08000b78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC3_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 f980 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b88:	f001 fba8 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <HAL_Init+0x68>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	f003 030f 	and.w	r3, r3, #15
 8000b98:	4913      	ldr	r1, [pc, #76]	@ (8000be8 <HAL_Init+0x6c>)
 8000b9a:	5ccb      	ldrb	r3, [r1, r3]
 8000b9c:	f003 031f 	and.w	r3, r3, #31
 8000ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <HAL_Init+0x68>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	4a0e      	ldr	r2, [pc, #56]	@ (8000be8 <HAL_Init+0x6c>)
 8000bb0:	5cd3      	ldrb	r3, [r2, r3]
 8000bb2:	f003 031f 	and.w	r3, r3, #31
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000bec <HAL_Init+0x70>)
 8000bbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <HAL_Init+0x74>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f000 f814 	bl	8000bf4 <HAL_InitTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e002      	b.n	8000bdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */

  HAL_MspInit();
 8000bd6:	f7ff fe6b 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	58024400 	.word	0x58024400
 8000be8:	08004b0c 	.word	0x08004b0c
 8000bec:	24000010 	.word	0x24000010
 8000bf0:	2400000c 	.word	0x2400000c

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_InitTick+0x60>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e021      	b.n	8000c4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <HAL_InitTick+0x64>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_InitTick+0x60>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f965 	bl	8000eee <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f92f 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	@ (8000c5c <HAL_InitTick+0x68>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	24000018 	.word	0x24000018
 8000c58:	2400000c 	.word	0x2400000c
 8000c5c:	24000014 	.word	0x24000014

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	24000018 	.word	0x24000018
 8000c84:	240000dc 	.word	0x240000dc

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	240000dc 	.word	0x240000dc

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff ffee 	bl	8000c88 <HAL_GetTick>
 8000cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb8:	d005      	beq.n	8000cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <HAL_Delay+0x44>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc6:	bf00      	nop
 8000cc8:	f7ff ffde 	bl	8000c88 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8f7      	bhi.n	8000cc8 <HAL_Delay+0x28>
  {
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	24000018 	.word	0x24000018

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <__NVIC_SetPriorityGrouping+0x40>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <__NVIC_SetPriorityGrouping+0x40>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00
 8000d2c:	05fa0000 	.word	0x05fa0000

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff40 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff90 	bl	8000ddc <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5f 	bl	8000d88 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff33 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa4 	bl	8000e44 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e237      	b.n	800138a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d004      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e22c      	b.n	800138a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a5c      	ldr	r2, [pc, #368]	@ (80010a8 <HAL_DMA_Abort_IT+0x1a0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d04a      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80010ac <HAL_DMA_Abort_IT+0x1a4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d045      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a59      	ldr	r2, [pc, #356]	@ (80010b0 <HAL_DMA_Abort_IT+0x1a8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d040      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a58      	ldr	r2, [pc, #352]	@ (80010b4 <HAL_DMA_Abort_IT+0x1ac>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d03b      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	@ (80010b8 <HAL_DMA_Abort_IT+0x1b0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d036      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a55      	ldr	r2, [pc, #340]	@ (80010bc <HAL_DMA_Abort_IT+0x1b4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d031      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a53      	ldr	r2, [pc, #332]	@ (80010c0 <HAL_DMA_Abort_IT+0x1b8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d02c      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a52      	ldr	r2, [pc, #328]	@ (80010c4 <HAL_DMA_Abort_IT+0x1bc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d027      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a50      	ldr	r2, [pc, #320]	@ (80010c8 <HAL_DMA_Abort_IT+0x1c0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d022      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a4f      	ldr	r2, [pc, #316]	@ (80010cc <HAL_DMA_Abort_IT+0x1c4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d01d      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a4d      	ldr	r2, [pc, #308]	@ (80010d0 <HAL_DMA_Abort_IT+0x1c8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d018      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a4c      	ldr	r2, [pc, #304]	@ (80010d4 <HAL_DMA_Abort_IT+0x1cc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d013      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a4a      	ldr	r2, [pc, #296]	@ (80010d8 <HAL_DMA_Abort_IT+0x1d0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00e      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a49      	ldr	r2, [pc, #292]	@ (80010dc <HAL_DMA_Abort_IT+0x1d4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d009      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a47      	ldr	r2, [pc, #284]	@ (80010e0 <HAL_DMA_Abort_IT+0x1d8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d004      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a46      	ldr	r2, [pc, #280]	@ (80010e4 <HAL_DMA_Abort_IT+0x1dc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_DMA_Abort_IT+0xcc>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <HAL_DMA_Abort_IT+0xce>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8086 	beq.w	80010e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2204      	movs	r2, #4
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80010a8 <HAL_DMA_Abort_IT+0x1a0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d04a      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80010ac <HAL_DMA_Abort_IT+0x1a4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d045      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80010b0 <HAL_DMA_Abort_IT+0x1a8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d040      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2b      	ldr	r2, [pc, #172]	@ (80010b4 <HAL_DMA_Abort_IT+0x1ac>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03b      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a29      	ldr	r2, [pc, #164]	@ (80010b8 <HAL_DMA_Abort_IT+0x1b0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d036      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a28      	ldr	r2, [pc, #160]	@ (80010bc <HAL_DMA_Abort_IT+0x1b4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d031      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a26      	ldr	r2, [pc, #152]	@ (80010c0 <HAL_DMA_Abort_IT+0x1b8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d02c      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a25      	ldr	r2, [pc, #148]	@ (80010c4 <HAL_DMA_Abort_IT+0x1bc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d027      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a23      	ldr	r2, [pc, #140]	@ (80010c8 <HAL_DMA_Abort_IT+0x1c0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d022      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a22      	ldr	r2, [pc, #136]	@ (80010cc <HAL_DMA_Abort_IT+0x1c4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d01d      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a20      	ldr	r2, [pc, #128]	@ (80010d0 <HAL_DMA_Abort_IT+0x1c8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d018      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1f      	ldr	r2, [pc, #124]	@ (80010d4 <HAL_DMA_Abort_IT+0x1cc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d013      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1d      	ldr	r2, [pc, #116]	@ (80010d8 <HAL_DMA_Abort_IT+0x1d0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00e      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <HAL_DMA_Abort_IT+0x1d4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d009      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <HAL_DMA_Abort_IT+0x1d8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d004      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <HAL_DMA_Abort_IT+0x1dc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d108      	bne.n	8001096 <HAL_DMA_Abort_IT+0x18e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e178      	b.n	8001388 <HAL_DMA_Abort_IT+0x480>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e16f      	b.n	8001388 <HAL_DMA_Abort_IT+0x480>
 80010a8:	40020010 	.word	0x40020010
 80010ac:	40020028 	.word	0x40020028
 80010b0:	40020040 	.word	0x40020040
 80010b4:	40020058 	.word	0x40020058
 80010b8:	40020070 	.word	0x40020070
 80010bc:	40020088 	.word	0x40020088
 80010c0:	400200a0 	.word	0x400200a0
 80010c4:	400200b8 	.word	0x400200b8
 80010c8:	40020410 	.word	0x40020410
 80010cc:	40020428 	.word	0x40020428
 80010d0:	40020440 	.word	0x40020440
 80010d4:	40020458 	.word	0x40020458
 80010d8:	40020470 	.word	0x40020470
 80010dc:	40020488 	.word	0x40020488
 80010e0:	400204a0 	.word	0x400204a0
 80010e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 020e 	bic.w	r2, r2, #14
 80010f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a6c      	ldr	r2, [pc, #432]	@ (80012b0 <HAL_DMA_Abort_IT+0x3a8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d04a      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6b      	ldr	r2, [pc, #428]	@ (80012b4 <HAL_DMA_Abort_IT+0x3ac>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d045      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a69      	ldr	r2, [pc, #420]	@ (80012b8 <HAL_DMA_Abort_IT+0x3b0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d040      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a68      	ldr	r2, [pc, #416]	@ (80012bc <HAL_DMA_Abort_IT+0x3b4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d03b      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a66      	ldr	r2, [pc, #408]	@ (80012c0 <HAL_DMA_Abort_IT+0x3b8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d036      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a65      	ldr	r2, [pc, #404]	@ (80012c4 <HAL_DMA_Abort_IT+0x3bc>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d031      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a63      	ldr	r2, [pc, #396]	@ (80012c8 <HAL_DMA_Abort_IT+0x3c0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02c      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a62      	ldr	r2, [pc, #392]	@ (80012cc <HAL_DMA_Abort_IT+0x3c4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d027      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a60      	ldr	r2, [pc, #384]	@ (80012d0 <HAL_DMA_Abort_IT+0x3c8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d022      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a5f      	ldr	r2, [pc, #380]	@ (80012d4 <HAL_DMA_Abort_IT+0x3cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d01d      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a5d      	ldr	r2, [pc, #372]	@ (80012d8 <HAL_DMA_Abort_IT+0x3d0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d018      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a5c      	ldr	r2, [pc, #368]	@ (80012dc <HAL_DMA_Abort_IT+0x3d4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d013      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a5a      	ldr	r2, [pc, #360]	@ (80012e0 <HAL_DMA_Abort_IT+0x3d8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00e      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a59      	ldr	r2, [pc, #356]	@ (80012e4 <HAL_DMA_Abort_IT+0x3dc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d009      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a57      	ldr	r2, [pc, #348]	@ (80012e8 <HAL_DMA_Abort_IT+0x3e0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d004      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a56      	ldr	r2, [pc, #344]	@ (80012ec <HAL_DMA_Abort_IT+0x3e4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d108      	bne.n	80011aa <HAL_DMA_Abort_IT+0x2a2>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e007      	b.n	80011ba <HAL_DMA_Abort_IT+0x2b2>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0201 	bic.w	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a3c      	ldr	r2, [pc, #240]	@ (80012b0 <HAL_DMA_Abort_IT+0x3a8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d072      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	@ (80012b4 <HAL_DMA_Abort_IT+0x3ac>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d06d      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a39      	ldr	r2, [pc, #228]	@ (80012b8 <HAL_DMA_Abort_IT+0x3b0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d068      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a37      	ldr	r2, [pc, #220]	@ (80012bc <HAL_DMA_Abort_IT+0x3b4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d063      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a36      	ldr	r2, [pc, #216]	@ (80012c0 <HAL_DMA_Abort_IT+0x3b8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d05e      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a34      	ldr	r2, [pc, #208]	@ (80012c4 <HAL_DMA_Abort_IT+0x3bc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d059      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a33      	ldr	r2, [pc, #204]	@ (80012c8 <HAL_DMA_Abort_IT+0x3c0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d054      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a31      	ldr	r2, [pc, #196]	@ (80012cc <HAL_DMA_Abort_IT+0x3c4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d04f      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a30      	ldr	r2, [pc, #192]	@ (80012d0 <HAL_DMA_Abort_IT+0x3c8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d04a      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2e      	ldr	r2, [pc, #184]	@ (80012d4 <HAL_DMA_Abort_IT+0x3cc>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d045      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2d      	ldr	r2, [pc, #180]	@ (80012d8 <HAL_DMA_Abort_IT+0x3d0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d040      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a2b      	ldr	r2, [pc, #172]	@ (80012dc <HAL_DMA_Abort_IT+0x3d4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d03b      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a2a      	ldr	r2, [pc, #168]	@ (80012e0 <HAL_DMA_Abort_IT+0x3d8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d036      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a28      	ldr	r2, [pc, #160]	@ (80012e4 <HAL_DMA_Abort_IT+0x3dc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d031      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a27      	ldr	r2, [pc, #156]	@ (80012e8 <HAL_DMA_Abort_IT+0x3e0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d02c      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a25      	ldr	r2, [pc, #148]	@ (80012ec <HAL_DMA_Abort_IT+0x3e4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d027      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a24      	ldr	r2, [pc, #144]	@ (80012f0 <HAL_DMA_Abort_IT+0x3e8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d022      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <HAL_DMA_Abort_IT+0x3ec>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01d      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a21      	ldr	r2, [pc, #132]	@ (80012f8 <HAL_DMA_Abort_IT+0x3f0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d018      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1f      	ldr	r2, [pc, #124]	@ (80012fc <HAL_DMA_Abort_IT+0x3f4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1e      	ldr	r2, [pc, #120]	@ (8001300 <HAL_DMA_Abort_IT+0x3f8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00e      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a1c      	ldr	r2, [pc, #112]	@ (8001304 <HAL_DMA_Abort_IT+0x3fc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d009      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1b      	ldr	r2, [pc, #108]	@ (8001308 <HAL_DMA_Abort_IT+0x400>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d004      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	@ (800130c <HAL_DMA_Abort_IT+0x404>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d132      	bne.n	8001310 <HAL_DMA_Abort_IT+0x408>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e031      	b.n	8001312 <HAL_DMA_Abort_IT+0x40a>
 80012ae:	bf00      	nop
 80012b0:	40020010 	.word	0x40020010
 80012b4:	40020028 	.word	0x40020028
 80012b8:	40020040 	.word	0x40020040
 80012bc:	40020058 	.word	0x40020058
 80012c0:	40020070 	.word	0x40020070
 80012c4:	40020088 	.word	0x40020088
 80012c8:	400200a0 	.word	0x400200a0
 80012cc:	400200b8 	.word	0x400200b8
 80012d0:	40020410 	.word	0x40020410
 80012d4:	40020428 	.word	0x40020428
 80012d8:	40020440 	.word	0x40020440
 80012dc:	40020458 	.word	0x40020458
 80012e0:	40020470 	.word	0x40020470
 80012e4:	40020488 	.word	0x40020488
 80012e8:	400204a0 	.word	0x400204a0
 80012ec:	400204b8 	.word	0x400204b8
 80012f0:	58025408 	.word	0x58025408
 80012f4:	5802541c 	.word	0x5802541c
 80012f8:	58025430 	.word	0x58025430
 80012fc:	58025444 	.word	0x58025444
 8001300:	58025458 	.word	0x58025458
 8001304:	5802546c 	.word	0x5802546c
 8001308:	58025480 	.word	0x58025480
 800130c:	58025494 	.word	0x58025494
 8001310:	2300      	movs	r3, #0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d028      	beq.n	8001368 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001320:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001324:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	2201      	movs	r2, #1
 8001336:	409a      	lsls	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001344:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800135c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001366:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013a2:	4b86      	ldr	r3, [pc, #536]	@ (80015bc <HAL_GPIO_Init+0x228>)
 80013a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013a6:	e18c      	b.n	80016c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 817e 	beq.w	80016bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d005      	beq.n	80013d8 <HAL_GPIO_Init+0x44>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b03      	cmp	r3, #3
 8001444:	d017      	beq.n	8001476 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d123      	bne.n	80014ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	69b9      	ldr	r1, [r7, #24]
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0203 	and.w	r2, r3, #3
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80d8 	beq.w	80016bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150c:	4b2c      	ldr	r3, [pc, #176]	@ (80015c0 <HAL_GPIO_Init+0x22c>)
 800150e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001512:	4a2b      	ldr	r2, [pc, #172]	@ (80015c0 <HAL_GPIO_Init+0x22c>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <HAL_GPIO_Init+0x22c>)
 800151e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152a:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <HAL_GPIO_Init+0x230>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <HAL_GPIO_Init+0x234>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d04a      	beq.n	80015ec <HAL_GPIO_Init+0x258>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <HAL_GPIO_Init+0x238>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d02b      	beq.n	80015b6 <HAL_GPIO_Init+0x222>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1b      	ldr	r2, [pc, #108]	@ (80015d0 <HAL_GPIO_Init+0x23c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x21e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a1a      	ldr	r2, [pc, #104]	@ (80015d4 <HAL_GPIO_Init+0x240>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x21a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <HAL_GPIO_Init+0x244>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x216>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a18      	ldr	r2, [pc, #96]	@ (80015dc <HAL_GPIO_Init+0x248>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x212>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <HAL_GPIO_Init+0x24c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x20e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <HAL_GPIO_Init+0x250>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x20a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a15      	ldr	r2, [pc, #84]	@ (80015e8 <HAL_GPIO_Init+0x254>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x206>
 8001596:	2309      	movs	r3, #9
 8001598:	e029      	b.n	80015ee <HAL_GPIO_Init+0x25a>
 800159a:	230a      	movs	r3, #10
 800159c:	e027      	b.n	80015ee <HAL_GPIO_Init+0x25a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e025      	b.n	80015ee <HAL_GPIO_Init+0x25a>
 80015a2:	2306      	movs	r3, #6
 80015a4:	e023      	b.n	80015ee <HAL_GPIO_Init+0x25a>
 80015a6:	2305      	movs	r3, #5
 80015a8:	e021      	b.n	80015ee <HAL_GPIO_Init+0x25a>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e01f      	b.n	80015ee <HAL_GPIO_Init+0x25a>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e01d      	b.n	80015ee <HAL_GPIO_Init+0x25a>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e01b      	b.n	80015ee <HAL_GPIO_Init+0x25a>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e019      	b.n	80015ee <HAL_GPIO_Init+0x25a>
 80015ba:	bf00      	nop
 80015bc:	58000080 	.word	0x58000080
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58000400 	.word	0x58000400
 80015c8:	58020000 	.word	0x58020000
 80015cc:	58020400 	.word	0x58020400
 80015d0:	58020800 	.word	0x58020800
 80015d4:	58020c00 	.word	0x58020c00
 80015d8:	58021000 	.word	0x58021000
 80015dc:	58021400 	.word	0x58021400
 80015e0:	58021800 	.word	0x58021800
 80015e4:	58021c00 	.word	0x58021c00
 80015e8:	58022400 	.word	0x58022400
 80015ec:	2300      	movs	r3, #0
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fe:	4938      	ldr	r1, [pc, #224]	@ (80016e0 <HAL_GPIO_Init+0x34c>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800163a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001660:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f ae6b 	bne.w	80013a8 <HAL_GPIO_Init+0x14>
  }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3724      	adds	r7, #36	@ 0x24
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	58000400 	.word	0x58000400

080016e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e001      	b.n	8001706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
 8001720:	4613      	mov	r3, r2
 8001722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001730:	e003      	b.n	800173a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001750:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <HAL_PWREx_ConfigSupply+0x70>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b04      	cmp	r3, #4
 800175a:	d00a      	beq.n	8001772 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800175c:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <HAL_PWREx_ConfigSupply+0x70>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	d001      	beq.n	800176e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e01f      	b.n	80017ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e01d      	b.n	80017ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_PWREx_ConfigSupply+0x70>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f023 0207 	bic.w	r2, r3, #7
 800177a:	490f      	ldr	r1, [pc, #60]	@ (80017b8 <HAL_PWREx_ConfigSupply+0x70>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4313      	orrs	r3, r2
 8001780:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001782:	f7ff fa81 	bl	8000c88 <HAL_GetTick>
 8001786:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001788:	e009      	b.n	800179e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800178a:	f7ff fa7d 	bl	8000c88 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001798:	d901      	bls.n	800179e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e007      	b.n	80017ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_PWREx_ConfigSupply+0x70>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017aa:	d1ee      	bne.n	800178a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	58024800 	.word	0x58024800

080017bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	@ 0x30
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e3c8      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8087 	beq.w	80018ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017dc:	4b88      	ldr	r3, [pc, #544]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017e6:	4b86      	ldr	r3, [pc, #536]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d007      	beq.n	8001802 <HAL_RCC_OscConfig+0x46>
 80017f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f4:	2b18      	cmp	r3, #24
 80017f6:	d110      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
 80017f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d10b      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	4b7f      	ldr	r3, [pc, #508]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d06c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x12c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d168      	bne.n	80018e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e3a2      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x76>
 8001824:	4b76      	ldr	r3, [pc, #472]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a75      	ldr	r2, [pc, #468]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e02e      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x98>
 800183a:	4b71      	ldr	r3, [pc, #452]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a70      	ldr	r2, [pc, #448]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b6e      	ldr	r3, [pc, #440]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6d      	ldr	r2, [pc, #436]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0xbc>
 800185e:	4b68      	ldr	r3, [pc, #416]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a67      	ldr	r2, [pc, #412]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b65      	ldr	r3, [pc, #404]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a64      	ldr	r2, [pc, #400]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001878:	4b61      	ldr	r3, [pc, #388]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a60      	ldr	r2, [pc, #384]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b5e      	ldr	r3, [pc, #376]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a5d      	ldr	r2, [pc, #372]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800188e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f9f6 	bl	8000c88 <HAL_GetTick>
 800189c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff f9f2 	bl	8000c88 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	@ 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e356      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018b2:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe4>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f9e2 	bl	8000c88 <HAL_GetTick>
 80018c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f9de 	bl	8000c88 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	@ 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e342      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018da:	4b49      	ldr	r3, [pc, #292]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x10c>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 808c 	beq.w	8001a10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f8:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001900:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001902:	4b3f      	ldr	r3, [pc, #252]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_RCC_OscConfig+0x162>
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	2b18      	cmp	r3, #24
 8001912:	d137      	bne.n	8001984 <HAL_RCC_OscConfig+0x1c8>
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d132      	bne.n	8001984 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191e:	4b38      	ldr	r3, [pc, #224]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x17a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e314      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001936:	4b32      	ldr	r3, [pc, #200]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0219 	bic.w	r2, r3, #25
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	492f      	ldr	r1, [pc, #188]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff f99e 	bl	8000c88 <HAL_GetTick>
 800194c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff f99a 	bl	8000c88 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e2fe      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001962:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	061b      	lsls	r3, r3, #24
 800197c:	4920      	ldr	r1, [pc, #128]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001982:	e045      	b.n	8001a10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d026      	beq.n	80019da <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800198c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 0219 	bic.w	r2, r3, #25
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4919      	ldr	r1, [pc, #100]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff f973 	bl	8000c88 <HAL_GetTick>
 80019a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff f96f 	bl	8000c88 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e2d3      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	490b      	ldr	r1, [pc, #44]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e01a      	b.n	8001a10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <HAL_RCC_OscConfig+0x244>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f94f 	bl	8000c88 <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff f94b 	bl	8000c88 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d903      	bls.n	8001a04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e2af      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
 8001a00:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a04:	4b96      	ldr	r3, [pc, #600]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d06a      	beq.n	8001af2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1c:	4b90      	ldr	r3, [pc, #576]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a26:	4b8e      	ldr	r3, [pc, #568]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d007      	beq.n	8001a42 <HAL_RCC_OscConfig+0x286>
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b18      	cmp	r3, #24
 8001a36:	d11b      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2b4>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a42:	4b87      	ldr	r3, [pc, #540]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x29e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	2b80      	cmp	r3, #128	@ 0x80
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e282      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a5a:	4b81      	ldr	r3, [pc, #516]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	497d      	ldr	r1, [pc, #500]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a6e:	e040      	b.n	8001af2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d023      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a78:	4b79      	ldr	r3, [pc, #484]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a78      	ldr	r2, [pc, #480]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff f900 	bl	8000c88 <HAL_GetTick>
 8001a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a8c:	f7ff f8fc 	bl	8000c88 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e260      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a9e:	4b70      	ldr	r3, [pc, #448]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	061b      	lsls	r3, r3, #24
 8001ab8:	4969      	ldr	r1, [pc, #420]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60cb      	str	r3, [r1, #12]
 8001abe:	e018      	b.n	8001af2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ac0:	4b67      	ldr	r3, [pc, #412]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a66      	ldr	r2, [pc, #408]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f8dc 	bl	8000c88 <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ad4:	f7ff f8d8 	bl	8000c88 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e23c      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ae6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d036      	beq.n	8001b6c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d019      	beq.n	8001b3a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b06:	4b56      	ldr	r3, [pc, #344]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b0a:	4a55      	ldr	r2, [pc, #340]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff f8b9 	bl	8000c88 <HAL_GetTick>
 8001b16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f8b5 	bl	8000c88 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e219      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x35e>
 8001b38:	e018      	b.n	8001b6c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3a:	4b49      	ldr	r3, [pc, #292]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b3e:	4a48      	ldr	r2, [pc, #288]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7ff f89f 	bl	8000c88 <HAL_GetTick>
 8001b4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7ff f89b 	bl	8000c88 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1ff      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b60:	4b3f      	ldr	r3, [pc, #252]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d036      	beq.n	8001be6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d019      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b80:	4b37      	ldr	r3, [pc, #220]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a36      	ldr	r2, [pc, #216]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001b86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f87c 	bl	8000c88 <HAL_GetTick>
 8001b90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b94:	f7ff f878 	bl	8000c88 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1dc      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x3d8>
 8001bb2:	e018      	b.n	8001be6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a29      	ldr	r2, [pc, #164]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001bba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff f862 	bl	8000c88 <HAL_GetTick>
 8001bc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc8:	f7ff f85e 	bl	8000c88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1c2      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bda:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8086 	beq.w	8001d00 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_RCC_OscConfig+0x4a8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <HAL_RCC_OscConfig+0x4a8>)
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c00:	f7ff f842 	bl	8000c88 <HAL_GetTick>
 8001c04:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c08:	f7ff f83e 	bl	8000c88 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	@ 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1a2      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_RCC_OscConfig+0x4a8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d106      	bne.n	8001c3c <HAL_RCC_OscConfig+0x480>
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c32:	4a0b      	ldr	r2, [pc, #44]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c3a:	e032      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d111      	bne.n	8001c68 <HAL_RCC_OscConfig+0x4ac>
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c48:	4a05      	ldr	r2, [pc, #20]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c54:	4a02      	ldr	r2, [pc, #8]	@ (8001c60 <HAL_RCC_OscConfig+0x4a4>)
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c5c:	e021      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e6>
 8001c5e:	bf00      	nop
 8001c60:	58024400 	.word	0x58024400
 8001c64:	58024800 	.word	0x58024800
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d10c      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4ce>
 8001c70:	4b83      	ldr	r3, [pc, #524]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c74:	4a82      	ldr	r2, [pc, #520]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c7c:	4b80      	ldr	r3, [pc, #512]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c80:	4a7f      	ldr	r2, [pc, #508]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c88:	e00b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e6>
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c96:	4b7a      	ldr	r3, [pc, #488]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9a:	4a79      	ldr	r2, [pc, #484]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d015      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7fe ffed 	bl	8000c88 <HAL_GetTick>
 8001cae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7fe ffe9 	bl	8000c88 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e14b      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cc8:	4b6d      	ldr	r3, [pc, #436]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ee      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4f6>
 8001cd4:	e014      	b.n	8001d00 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7fe ffd7 	bl	8000c88 <HAL_GetTick>
 8001cda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7fe ffd3 	bl	8000c88 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e135      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cf4:	4b62      	ldr	r3, [pc, #392]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ee      	bne.n	8001cde <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 812a 	beq.w	8001f5e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d12:	2b18      	cmp	r3, #24
 8001d14:	f000 80ba 	beq.w	8001e8c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	f040 8095 	bne.w	8001e4c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b57      	ldr	r3, [pc, #348]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a56      	ldr	r2, [pc, #344]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001d28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7fe ffab 	bl	8000c88 <HAL_GetTick>
 8001d32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7fe ffa7 	bl	8000c88 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e10b      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d48:	4b4d      	ldr	r3, [pc, #308]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	4b4a      	ldr	r3, [pc, #296]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001d56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d58:	4b4a      	ldr	r3, [pc, #296]	@ (8001e84 <HAL_RCC_OscConfig+0x6c8>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	430a      	orrs	r2, r1
 8001d68:	4945      	ldr	r1, [pc, #276]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	628b      	str	r3, [r1, #40]	@ 0x28
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	041b      	lsls	r3, r3, #16
 8001d8c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d96:	3b01      	subs	r3, #1
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001d9e:	4938      	ldr	r1, [pc, #224]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001da4:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da8:	4a35      	ldr	r2, [pc, #212]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001db0:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001db4:	4b34      	ldr	r3, [pc, #208]	@ (8001e88 <HAL_RCC_OscConfig+0x6cc>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dbc:	00d2      	lsls	r2, r2, #3
 8001dbe:	4930      	ldr	r1, [pc, #192]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	f023 020c 	bic.w	r2, r3, #12
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	492b      	ldr	r1, [pc, #172]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dda:	f023 0202 	bic.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	4927      	ldr	r1, [pc, #156]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001de8:	4b25      	ldr	r3, [pc, #148]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dec:	4a24      	ldr	r2, [pc, #144]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e00:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e04:	4a1e      	ldr	r2, [pc, #120]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b19      	ldr	r3, [pc, #100]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a18      	ldr	r2, [pc, #96]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7fe ff30 	bl	8000c88 <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe ff2c 	bl	8000c88 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e090      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x670>
 8001e4a:	e088      	b.n	8001f5e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0b      	ldr	r2, [pc, #44]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7fe ff16 	bl	8000c88 <HAL_GetTick>
 8001e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe ff12 	bl	8000c88 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e076      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e72:	4b03      	ldr	r3, [pc, #12]	@ (8001e80 <HAL_RCC_OscConfig+0x6c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x6a4>
 8001e7e:	e06e      	b.n	8001f5e <HAL_RCC_OscConfig+0x7a2>
 8001e80:	58024400 	.word	0x58024400
 8001e84:	fffffc0c 	.word	0xfffffc0c
 8001e88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e8c:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <HAL_RCC_OscConfig+0x7ac>)
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e92:	4b35      	ldr	r3, [pc, #212]	@ (8001f68 <HAL_RCC_OscConfig+0x7ac>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d031      	beq.n	8001f04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f003 0203 	and.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d12a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d122      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d11a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0a5b      	lsrs	r3, r3, #9
 8001ed2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d111      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0c1b      	lsrs	r3, r3, #16
 8001ee4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d108      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	0e1b      	lsrs	r3, r3, #24
 8001ef6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e02b      	b.n	8001f60 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f08:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <HAL_RCC_OscConfig+0x7ac>)
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d01f      	beq.n	8001f5e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f1e:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_RCC_OscConfig+0x7ac>)
 8001f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f22:	4a11      	ldr	r2, [pc, #68]	@ (8001f68 <HAL_RCC_OscConfig+0x7ac>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f2a:	f7fe fead 	bl	8000c88 <HAL_GetTick>
 8001f2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f30:	bf00      	nop
 8001f32:	f7fe fea9 	bl	8000c88 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d0f9      	beq.n	8001f32 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_RCC_OscConfig+0x7ac>)
 8001f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_RCC_OscConfig+0x7b0>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f4a:	00d2      	lsls	r2, r2, #3
 8001f4c:	4906      	ldr	r1, [pc, #24]	@ (8001f68 <HAL_RCC_OscConfig+0x7ac>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f52:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_RCC_OscConfig+0x7ac>)
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <HAL_RCC_OscConfig+0x7ac>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3730      	adds	r7, #48	@ 0x30
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	ffff0007 	.word	0xffff0007

08001f70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e19c      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b8a      	ldr	r3, [pc, #552]	@ (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b87      	ldr	r3, [pc, #540]	@ (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 020f 	bic.w	r2, r3, #15
 8001f9a:	4985      	ldr	r1, [pc, #532]	@ (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b83      	ldr	r3, [pc, #524]	@ (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e184      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d908      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fd0:	4b78      	ldr	r3, [pc, #480]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4975      	ldr	r1, [pc, #468]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	4b70      	ldr	r3, [pc, #448]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d908      	bls.n	8002010 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	496a      	ldr	r1, [pc, #424]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800200c:	4313      	orrs	r3, r2
 800200e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	4b64      	ldr	r3, [pc, #400]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002028:	429a      	cmp	r2, r3
 800202a:	d908      	bls.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800202c:	4b61      	ldr	r3, [pc, #388]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	495e      	ldr	r1, [pc, #376]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800203a:	4313      	orrs	r3, r2
 800203c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d010      	beq.n	800206c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	4b59      	ldr	r3, [pc, #356]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002056:	429a      	cmp	r2, r3
 8002058:	d908      	bls.n	800206c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800205a:	4b56      	ldr	r3, [pc, #344]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4953      	ldr	r1, [pc, #332]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002068:	4313      	orrs	r3, r2
 800206a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	4b4d      	ldr	r3, [pc, #308]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	429a      	cmp	r2, r3
 8002086:	d908      	bls.n	800209a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b4a      	ldr	r3, [pc, #296]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f023 020f 	bic.w	r2, r3, #15
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4947      	ldr	r1, [pc, #284]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002096:	4313      	orrs	r3, r2
 8002098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d055      	beq.n	8002152 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020a6:	4b43      	ldr	r3, [pc, #268]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4940      	ldr	r1, [pc, #256]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020c0:	4b3c      	ldr	r3, [pc, #240]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d121      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0f6      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020d8:	4b36      	ldr	r3, [pc, #216]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d115      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0ea      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020f0:	4b30      	ldr	r3, [pc, #192]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0de      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002100:	4b2c      	ldr	r3, [pc, #176]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0d6      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002110:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f023 0207 	bic.w	r2, r3, #7
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4925      	ldr	r1, [pc, #148]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800211e:	4313      	orrs	r3, r2
 8002120:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002122:	f7fe fdb1 	bl	8000c88 <HAL_GetTick>
 8002126:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002128:	e00a      	b.n	8002140 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212a:	f7fe fdad 	bl	8000c88 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0be      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	429a      	cmp	r2, r3
 8002150:	d1eb      	bne.n	800212a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d010      	beq.n	8002180 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	429a      	cmp	r2, r3
 800216c:	d208      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f023 020f 	bic.w	r2, r3, #15
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	490e      	ldr	r1, [pc, #56]	@ (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800217c:	4313      	orrs	r3, r2
 800217e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d214      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 020f 	bic.w	r2, r3, #15
 8002196:	4906      	ldr	r1, [pc, #24]	@ (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <HAL_RCC_ClockConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e086      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
 80021b0:	52002000 	.word	0x52002000
 80021b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	4b3f      	ldr	r3, [pc, #252]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d208      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021d4:	4b3c      	ldr	r3, [pc, #240]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	4939      	ldr	r1, [pc, #228]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d010      	beq.n	8002214 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	4b34      	ldr	r3, [pc, #208]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021fe:	429a      	cmp	r2, r3
 8002200:	d208      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002202:	4b31      	ldr	r3, [pc, #196]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	492e      	ldr	r1, [pc, #184]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002210:	4313      	orrs	r3, r2
 8002212:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d010      	beq.n	8002242 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	4b28      	ldr	r3, [pc, #160]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800222c:	429a      	cmp	r2, r3
 800222e:	d208      	bcs.n	8002242 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002230:	4b25      	ldr	r3, [pc, #148]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4922      	ldr	r1, [pc, #136]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 800223e:	4313      	orrs	r3, r2
 8002240:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800225a:	429a      	cmp	r2, r3
 800225c:	d208      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800225e:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4917      	ldr	r1, [pc, #92]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 800226c:	4313      	orrs	r3, r2
 800226e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002270:	f000 f834 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	4912      	ldr	r1, [pc, #72]	@ (80022cc <HAL_RCC_ClockConfig+0x35c>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800228e:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <HAL_RCC_ClockConfig+0x35c>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <HAL_RCC_ClockConfig+0x360>)
 80022a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022a8:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <HAL_RCC_ClockConfig+0x364>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_RCC_ClockConfig+0x368>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fc9e 	bl	8000bf4 <HAL_InitTick>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	58024400 	.word	0x58024400
 80022cc:	08004b0c 	.word	0x08004b0c
 80022d0:	24000010 	.word	0x24000010
 80022d4:	2400000c 	.word	0x2400000c
 80022d8:	24000014 	.word	0x24000014

080022dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e2:	4bb3      	ldr	r3, [pc, #716]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022ea:	2b18      	cmp	r3, #24
 80022ec:	f200 8155 	bhi.w	800259a <HAL_RCC_GetSysClockFreq+0x2be>
 80022f0:	a201      	add	r2, pc, #4	@ (adr r2, 80022f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	0800235d 	.word	0x0800235d
 80022fc:	0800259b 	.word	0x0800259b
 8002300:	0800259b 	.word	0x0800259b
 8002304:	0800259b 	.word	0x0800259b
 8002308:	0800259b 	.word	0x0800259b
 800230c:	0800259b 	.word	0x0800259b
 8002310:	0800259b 	.word	0x0800259b
 8002314:	0800259b 	.word	0x0800259b
 8002318:	08002383 	.word	0x08002383
 800231c:	0800259b 	.word	0x0800259b
 8002320:	0800259b 	.word	0x0800259b
 8002324:	0800259b 	.word	0x0800259b
 8002328:	0800259b 	.word	0x0800259b
 800232c:	0800259b 	.word	0x0800259b
 8002330:	0800259b 	.word	0x0800259b
 8002334:	0800259b 	.word	0x0800259b
 8002338:	08002389 	.word	0x08002389
 800233c:	0800259b 	.word	0x0800259b
 8002340:	0800259b 	.word	0x0800259b
 8002344:	0800259b 	.word	0x0800259b
 8002348:	0800259b 	.word	0x0800259b
 800234c:	0800259b 	.word	0x0800259b
 8002350:	0800259b 	.word	0x0800259b
 8002354:	0800259b 	.word	0x0800259b
 8002358:	0800238f 	.word	0x0800238f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800235c:	4b94      	ldr	r3, [pc, #592]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002368:	4b91      	ldr	r3, [pc, #580]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	4a90      	ldr	r2, [pc, #576]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800237a:	e111      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800237c:	4b8d      	ldr	r3, [pc, #564]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800237e:	61bb      	str	r3, [r7, #24]
      break;
 8002380:	e10e      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002382:	4b8d      	ldr	r3, [pc, #564]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002384:	61bb      	str	r3, [r7, #24]
      break;
 8002386:	e10b      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002388:	4b8c      	ldr	r3, [pc, #560]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800238a:	61bb      	str	r3, [r7, #24]
      break;
 800238c:	e108      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800238e:	4b88      	ldr	r3, [pc, #544]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002398:	4b85      	ldr	r3, [pc, #532]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023a4:	4b82      	ldr	r3, [pc, #520]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023ae:	4b80      	ldr	r3, [pc, #512]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b2:	08db      	lsrs	r3, r3, #3
 80023b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80e1 	beq.w	8002594 <HAL_RCC_GetSysClockFreq+0x2b8>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	f000 8083 	beq.w	80024e0 <HAL_RCC_GetSysClockFreq+0x204>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	f200 80a1 	bhi.w	8002524 <HAL_RCC_GetSysClockFreq+0x248>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x114>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d056      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x1c0>
 80023ee:	e099      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023f0:	4b6f      	ldr	r3, [pc, #444]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02d      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023fc:	4b6c      	ldr	r3, [pc, #432]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	4a6b      	ldr	r2, [pc, #428]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002426:	4b62      	ldr	r3, [pc, #392]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002436:	ed97 6a02 	vldr	s12, [r7, #8]
 800243a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800243e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800244a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002456:	e087      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80025c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246a:	4b51      	ldr	r3, [pc, #324]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247a:	ed97 6a02 	vldr	s12, [r7, #8]
 800247e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800248a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800248e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800249a:	e065      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80025c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ae:	4b40      	ldr	r3, [pc, #256]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024be:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024de:	e043      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80025cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80024ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024f2:	4b2f      	ldr	r3, [pc, #188]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002502:	ed97 6a02 	vldr	s12, [r7, #8]
 8002506:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800250a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800250e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002522:	e021      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80025c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002536:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002546:	ed97 6a02 	vldr	s12, [r7, #8]
 800254a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800254e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800255a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002566:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	0a5b      	lsrs	r3, r3, #9
 800256e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002572:	3301      	adds	r3, #1
 8002574:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002580:	edd7 6a07 	vldr	s13, [r7, #28]
 8002584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258c:	ee17 3a90 	vmov	r3, s15
 8002590:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002592:	e005      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
      break;
 8002598:	e002      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800259a:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800259c:	61bb      	str	r3, [r7, #24]
      break;
 800259e:	bf00      	nop
  }

  return sysclockfreq;
 80025a0:	69bb      	ldr	r3, [r7, #24]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	@ 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	58024400 	.word	0x58024400
 80025b4:	03d09000 	.word	0x03d09000
 80025b8:	003d0900 	.word	0x003d0900
 80025bc:	017d7840 	.word	0x017d7840
 80025c0:	46000000 	.word	0x46000000
 80025c4:	4c742400 	.word	0x4c742400
 80025c8:	4a742400 	.word	0x4a742400
 80025cc:	4bbebc20 	.word	0x4bbebc20

080025d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d4:	b0c6      	sub	sp, #280	@ 0x118
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025dc:	2300      	movs	r3, #0
 80025de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80025f4:	2500      	movs	r5, #0
 80025f6:	ea54 0305 	orrs.w	r3, r4, r5
 80025fa:	d049      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80025fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002602:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002606:	d02f      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002608:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800260c:	d828      	bhi.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800260e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002612:	d01a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002618:	d822      	bhi.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800261e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002622:	d007      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002624:	e01c      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002626:	4bab      	ldr	r3, [pc, #684]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262a:	4aaa      	ldr	r2, [pc, #680]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800262c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002632:	e01a      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002638:	3308      	adds	r3, #8
 800263a:	2102      	movs	r1, #2
 800263c:	4618      	mov	r0, r3
 800263e:	f001 f967 	bl	8003910 <RCCEx_PLL2_Config>
 8002642:	4603      	mov	r3, r0
 8002644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002648:	e00f      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800264a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800264e:	3328      	adds	r3, #40	@ 0x28
 8002650:	2102      	movs	r1, #2
 8002652:	4618      	mov	r0, r3
 8002654:	f001 fa0e 	bl	8003a74 <RCCEx_PLL3_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800265e:	e004      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002666:	e000      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800266a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002672:	4b98      	ldr	r3, [pc, #608]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002676:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800267a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800267e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002680:	4a94      	ldr	r2, [pc, #592]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002682:	430b      	orrs	r3, r1
 8002684:	6513      	str	r3, [r2, #80]	@ 0x50
 8002686:	e003      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800268c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800269c:	f04f 0900 	mov.w	r9, #0
 80026a0:	ea58 0309 	orrs.w	r3, r8, r9
 80026a4:	d047      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d82a      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026b0:	a201      	add	r2, pc, #4	@ (adr r2, 80026b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026cd 	.word	0x080026cd
 80026bc:	080026db 	.word	0x080026db
 80026c0:	080026f1 	.word	0x080026f1
 80026c4:	0800270f 	.word	0x0800270f
 80026c8:	0800270f 	.word	0x0800270f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026cc:	4b81      	ldr	r3, [pc, #516]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d0:	4a80      	ldr	r2, [pc, #512]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026d8:	e01a      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026de:	3308      	adds	r3, #8
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f001 f914 	bl	8003910 <RCCEx_PLL2_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026ee:	e00f      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026f4:	3328      	adds	r3, #40	@ 0x28
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 f9bb 	bl	8003a74 <RCCEx_PLL3_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002704:	e004      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800270c:	e000      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800270e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002718:	4b6e      	ldr	r3, [pc, #440]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800271a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800271c:	f023 0107 	bic.w	r1, r3, #7
 8002720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002726:	4a6b      	ldr	r2, [pc, #428]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002728:	430b      	orrs	r3, r1
 800272a:	6513      	str	r3, [r2, #80]	@ 0x50
 800272c:	e003      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002742:	f04f 0b00 	mov.w	fp, #0
 8002746:	ea5a 030b 	orrs.w	r3, sl, fp
 800274a:	d05b      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800274c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002754:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002758:	d03b      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800275a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800275e:	d834      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002760:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002764:	d037      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002766:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800276a:	d82e      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800276c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002770:	d033      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002772:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002776:	d828      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800277c:	d01a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800277e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002782:	d822      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800278c:	d007      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800278e:	e01c      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002790:	4b50      	ldr	r3, [pc, #320]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002794:	4a4f      	ldr	r2, [pc, #316]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800279c:	e01e      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800279e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027a2:	3308      	adds	r3, #8
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 f8b2 	bl	8003910 <RCCEx_PLL2_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027b2:	e013      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027b8:	3328      	adds	r3, #40	@ 0x28
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 f959 	bl	8003a74 <RCCEx_PLL3_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027c8:	e008      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80027d0:	e004      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80027da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80027e4:	4b3b      	ldr	r3, [pc, #236]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80027ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80027f4:	4a37      	ldr	r2, [pc, #220]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027f6:	430b      	orrs	r3, r1
 80027f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80027fa:	e003      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002810:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800281a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800281e:	460b      	mov	r3, r1
 8002820:	4313      	orrs	r3, r2
 8002822:	d05d      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002828:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800282c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002830:	d03b      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002832:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002836:	d834      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002838:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800283c:	d037      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800283e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002842:	d82e      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002844:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002848:	d033      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800284a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800284e:	d828      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002854:	d01a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800285a:	d822      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002864:	d007      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002866:	e01c      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002868:	4b1a      	ldr	r3, [pc, #104]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800286a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286c:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800286e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002874:	e01e      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800287a:	3308      	adds	r3, #8
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f846 	bl	8003910 <RCCEx_PLL2_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800288a:	e013      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800288c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002890:	3328      	adds	r3, #40	@ 0x28
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f001 f8ed 	bl	8003a74 <RCCEx_PLL3_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a0:	e008      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80028a8:	e004      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80028aa:	bf00      	nop
 80028ac:	e002      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80028b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80028c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028cc:	4a01      	ldr	r2, [pc, #4]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028ce:	430b      	orrs	r3, r1
 80028d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d2:	e005      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80028d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80028ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80028f6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4313      	orrs	r3, r2
 80028fe:	d03a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	2b30      	cmp	r3, #48	@ 0x30
 8002908:	d01f      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800290a:	2b30      	cmp	r3, #48	@ 0x30
 800290c:	d819      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800290e:	2b20      	cmp	r3, #32
 8002910:	d00c      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002912:	2b20      	cmp	r3, #32
 8002914:	d815      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d019      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800291a:	2b10      	cmp	r3, #16
 800291c:	d111      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291e:	4baa      	ldr	r3, [pc, #680]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002922:	4aa9      	ldr	r2, [pc, #676]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800292a:	e011      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800292c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002930:	3308      	adds	r3, #8
 8002932:	2102      	movs	r1, #2
 8002934:	4618      	mov	r0, r3
 8002936:	f000 ffeb 	bl	8003910 <RCCEx_PLL2_Config>
 800293a:	4603      	mov	r3, r0
 800293c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002940:	e006      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002948:	e002      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800294e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002958:	4b9b      	ldr	r3, [pc, #620]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800295a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002966:	4a98      	ldr	r2, [pc, #608]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002968:	430b      	orrs	r3, r1
 800296a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296c:	e003      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002972:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002982:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800298c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002990:	460b      	mov	r3, r1
 8002992:	4313      	orrs	r3, r2
 8002994:	d051      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029a0:	d035      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80029a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029a6:	d82e      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80029a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029ac:	d031      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80029ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029b2:	d828      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80029b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029b8:	d01a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80029ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029be:	d822      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029c8:	d007      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80029ca:	e01c      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029cc:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	4a7d      	ldr	r2, [pc, #500]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029d8:	e01c      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029de:	3308      	adds	r3, #8
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 ff94 	bl	8003910 <RCCEx_PLL2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029ee:	e011      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029f4:	3328      	adds	r3, #40	@ 0x28
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 f83b 	bl	8003a74 <RCCEx_PLL3_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a04:	e006      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a0c:	e002      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2a:	4a67      	ldr	r2, [pc, #412]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a30:	e003      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002a46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a50:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4313      	orrs	r3, r2
 8002a58:	d053      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a64:	d033      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002a66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a6a:	d82c      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a70:	d02f      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002a72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a76:	d826      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a7c:	d02b      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002a7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a82:	d820      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a88:	d012      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a8e:	d81a      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d022      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a98:	d115      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 ff34 	bl	8003910 <RCCEx_PLL2_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002aae:	e015      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ab4:	3328      	adds	r3, #40	@ 0x28
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 ffdb 	bl	8003a74 <RCCEx_PLL3_Config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ac4:	e00a      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002acc:	e006      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ace:	bf00      	nop
 8002ad0:	e004      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ae4:	4b38      	ldr	r3, [pc, #224]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af2:	4a35      	ldr	r2, [pc, #212]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002af8:	e003      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002afe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002b18:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	d058      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b2e:	d033      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b34:	d82c      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3a:	d02f      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b40:	d826      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b46:	d02b      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002b48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b4c:	d820      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b52:	d012      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b58:	d81a      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d022      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b62:	d115      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b68:	3308      	adds	r3, #8
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fecf 	bl	8003910 <RCCEx_PLL2_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b78:	e015      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b7e:	3328      	adds	r3, #40	@ 0x28
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 ff76 	bl	8003a74 <RCCEx_PLL3_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002b96:	e006      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b98:	bf00      	nop
 8002b9a:	e004      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b9c:	bf00      	nop
 8002b9e:	e002      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ba0:	bf00      	nop
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10e      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002bbe:	4a02      	ldr	r2, [pc, #8]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc4:	e006      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002bc6:	bf00      	nop
 8002bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002bea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	d037      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bfe:	d00e      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c04:	d816      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d018      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002c0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c0e:	d111      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c10:	4bc4      	ldr	r3, [pc, #784]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	4ac3      	ldr	r2, [pc, #780]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c1c:	e00f      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c22:	3308      	adds	r3, #8
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fe72 	bl	8003910 <RCCEx_PLL2_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c32:	e004      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c3a:	e000      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c46:	4bb7      	ldr	r3, [pc, #732]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c54:	4ab3      	ldr	r2, [pc, #716]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c56:	430b      	orrs	r3, r1
 8002c58:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c5a:	e003      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002c70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4313      	orrs	r3, r2
 8002c82:	d039      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d81c      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c94 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002cd1 	.word	0x08002cd1
 8002c98:	08002ca5 	.word	0x08002ca5
 8002c9c:	08002cb3 	.word	0x08002cb3
 8002ca0:	08002cd1 	.word	0x08002cd1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca4:	4b9f      	ldr	r3, [pc, #636]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	4a9e      	ldr	r2, [pc, #632]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cb0:	e00f      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	2102      	movs	r1, #2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fe28 	bl	8003910 <RCCEx_PLL2_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cc6:	e004      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002cce:	e000      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cda:	4b92      	ldr	r3, [pc, #584]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cde:	f023 0103 	bic.w	r1, r3, #3
 8002ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce8:	4a8e      	ldr	r2, [pc, #568]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cea:	430b      	orrs	r3, r1
 8002cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cee:	e003      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002cf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f000 8099 	beq.w	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1a:	4b83      	ldr	r3, [pc, #524]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a82      	ldr	r2, [pc, #520]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d26:	f7fd ffaf 	bl	8000c88 <HAL_GetTick>
 8002d2a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fd ffaa 	bl	8000c88 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b64      	cmp	r3, #100	@ 0x64
 8002d3e:	d903      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d46:	e005      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d48:	4b77      	ldr	r3, [pc, #476]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ed      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d173      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d5c:	4b71      	ldr	r3, [pc, #452]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d68:	4053      	eors	r3, r2
 8002d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d015      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d72:	4b6c      	ldr	r3, [pc, #432]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d7e:	4b69      	ldr	r3, [pc, #420]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	4a68      	ldr	r2, [pc, #416]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8a:	4b66      	ldr	r3, [pc, #408]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8e:	4a65      	ldr	r2, [pc, #404]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d96:	4a63      	ldr	r2, [pc, #396]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002daa:	d118      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fd ff6c 	bl	8000c88 <HAL_GetTick>
 8002db0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002db4:	e00d      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fd ff67 	bl	8000c88 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002dc0:	1ad2      	subs	r2, r2, r3
 8002dc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d903      	bls.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8002dd0:	e005      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd2:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0eb      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d129      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002df6:	d10e      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002df8:	4b4a      	ldr	r3, [pc, #296]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e08:	091a      	lsrs	r2, r3, #4
 8002e0a:	4b48      	ldr	r3, [pc, #288]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	4a45      	ldr	r2, [pc, #276]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6113      	str	r3, [r2, #16]
 8002e14:	e005      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002e16:	4b43      	ldr	r3, [pc, #268]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	4a42      	ldr	r2, [pc, #264]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e20:	6113      	str	r3, [r2, #16]
 8002e22:	4b40      	ldr	r3, [pc, #256]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e32:	4a3c      	ldr	r2, [pc, #240]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e38:	e008      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002e42:	e003      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f002 0301 	and.w	r3, r2, #1
 8002e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002e62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002e66:	460b      	mov	r3, r1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f000 808f 	beq.w	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e74:	2b28      	cmp	r3, #40	@ 0x28
 8002e76:	d871      	bhi.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002e78:	a201      	add	r2, pc, #4	@ (adr r2, 8002e80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002f65 	.word	0x08002f65
 8002e84:	08002f5d 	.word	0x08002f5d
 8002e88:	08002f5d 	.word	0x08002f5d
 8002e8c:	08002f5d 	.word	0x08002f5d
 8002e90:	08002f5d 	.word	0x08002f5d
 8002e94:	08002f5d 	.word	0x08002f5d
 8002e98:	08002f5d 	.word	0x08002f5d
 8002e9c:	08002f5d 	.word	0x08002f5d
 8002ea0:	08002f31 	.word	0x08002f31
 8002ea4:	08002f5d 	.word	0x08002f5d
 8002ea8:	08002f5d 	.word	0x08002f5d
 8002eac:	08002f5d 	.word	0x08002f5d
 8002eb0:	08002f5d 	.word	0x08002f5d
 8002eb4:	08002f5d 	.word	0x08002f5d
 8002eb8:	08002f5d 	.word	0x08002f5d
 8002ebc:	08002f5d 	.word	0x08002f5d
 8002ec0:	08002f47 	.word	0x08002f47
 8002ec4:	08002f5d 	.word	0x08002f5d
 8002ec8:	08002f5d 	.word	0x08002f5d
 8002ecc:	08002f5d 	.word	0x08002f5d
 8002ed0:	08002f5d 	.word	0x08002f5d
 8002ed4:	08002f5d 	.word	0x08002f5d
 8002ed8:	08002f5d 	.word	0x08002f5d
 8002edc:	08002f5d 	.word	0x08002f5d
 8002ee0:	08002f65 	.word	0x08002f65
 8002ee4:	08002f5d 	.word	0x08002f5d
 8002ee8:	08002f5d 	.word	0x08002f5d
 8002eec:	08002f5d 	.word	0x08002f5d
 8002ef0:	08002f5d 	.word	0x08002f5d
 8002ef4:	08002f5d 	.word	0x08002f5d
 8002ef8:	08002f5d 	.word	0x08002f5d
 8002efc:	08002f5d 	.word	0x08002f5d
 8002f00:	08002f65 	.word	0x08002f65
 8002f04:	08002f5d 	.word	0x08002f5d
 8002f08:	08002f5d 	.word	0x08002f5d
 8002f0c:	08002f5d 	.word	0x08002f5d
 8002f10:	08002f5d 	.word	0x08002f5d
 8002f14:	08002f5d 	.word	0x08002f5d
 8002f18:	08002f5d 	.word	0x08002f5d
 8002f1c:	08002f5d 	.word	0x08002f5d
 8002f20:	08002f65 	.word	0x08002f65
 8002f24:	58024400 	.word	0x58024400
 8002f28:	58024800 	.word	0x58024800
 8002f2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f34:	3308      	adds	r3, #8
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fce9 	bl	8003910 <RCCEx_PLL2_Config>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f44:	e00f      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f4a:	3328      	adds	r3, #40	@ 0x28
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fd90 	bl	8003a74 <RCCEx_PLL3_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f5a:	e004      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f62:	e000      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f6e:	4bbf      	ldr	r3, [pc, #764]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f7c:	4abb      	ldr	r2, [pc, #748]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f82:	e003      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f002 0302 	and.w	r3, r2, #2
 8002f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fa2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	d041      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d824      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fbc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08003009 	.word	0x08003009
 8002fc0:	08002fd5 	.word	0x08002fd5
 8002fc4:	08002feb 	.word	0x08002feb
 8002fc8:	08003009 	.word	0x08003009
 8002fcc:	08003009 	.word	0x08003009
 8002fd0:	08003009 	.word	0x08003009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fd8:	3308      	adds	r3, #8
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fc97 	bl	8003910 <RCCEx_PLL2_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002fe8:	e00f      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fee:	3328      	adds	r3, #40	@ 0x28
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fd3e 	bl	8003a74 <RCCEx_PLL3_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002ffe:	e004      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003006:	e000      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003012:	4b96      	ldr	r3, [pc, #600]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f023 0107 	bic.w	r1, r3, #7
 800301a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800301e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003020:	4a92      	ldr	r2, [pc, #584]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003022:	430b      	orrs	r3, r1
 8003024:	6553      	str	r3, [r2, #84]	@ 0x54
 8003026:	e003      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800302c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f002 0304 	and.w	r3, r2, #4
 800303c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003046:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800304a:	460b      	mov	r3, r1
 800304c:	4313      	orrs	r3, r2
 800304e:	d044      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003058:	2b05      	cmp	r3, #5
 800305a:	d825      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800305c:	a201      	add	r2, pc, #4	@ (adr r2, 8003064 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	080030b1 	.word	0x080030b1
 8003068:	0800307d 	.word	0x0800307d
 800306c:	08003093 	.word	0x08003093
 8003070:	080030b1 	.word	0x080030b1
 8003074:	080030b1 	.word	0x080030b1
 8003078:	080030b1 	.word	0x080030b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800307c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003080:	3308      	adds	r3, #8
 8003082:	2101      	movs	r1, #1
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fc43 	bl	8003910 <RCCEx_PLL2_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003090:	e00f      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003096:	3328      	adds	r3, #40	@ 0x28
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fcea 	bl	8003a74 <RCCEx_PLL3_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030a6:	e004      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030ae:	e000      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80030b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ba:	4b6c      	ldr	r3, [pc, #432]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	f023 0107 	bic.w	r1, r3, #7
 80030c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ca:	4a68      	ldr	r2, [pc, #416]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d0:	e003      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	f002 0320 	and.w	r3, r2, #32
 80030e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4313      	orrs	r3, r2
 80030f8:	d055      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80030fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003106:	d033      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310c:	d82c      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003112:	d02f      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003118:	d826      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800311a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800311e:	d02b      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003120:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003124:	d820      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800312a:	d012      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800312c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003130:	d81a      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d022      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800313a:	d115      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800313c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003140:	3308      	adds	r3, #8
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fbe3 	bl	8003910 <RCCEx_PLL2_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003150:	e015      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003156:	3328      	adds	r3, #40	@ 0x28
 8003158:	2102      	movs	r1, #2
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fc8a 	bl	8003a74 <RCCEx_PLL3_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003166:	e00a      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800316e:	e006      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003170:	bf00      	nop
 8003172:	e004      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003174:	bf00      	nop
 8003176:	e002      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003178:	bf00      	nop
 800317a:	e000      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800317c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800317e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003186:	4b39      	ldr	r3, [pc, #228]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800318e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003192:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003196:	4a35      	ldr	r2, [pc, #212]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003198:	430b      	orrs	r3, r1
 800319a:	6553      	str	r3, [r2, #84]	@ 0x54
 800319c:	e003      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80031b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031bc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80031c0:	460b      	mov	r3, r1
 80031c2:	4313      	orrs	r3, r2
 80031c4:	d058      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80031c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031d2:	d033      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80031d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031d8:	d82c      	bhi.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031de:	d02f      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e4:	d826      	bhi.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031ea:	d02b      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80031ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031f0:	d820      	bhi.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031f6:	d012      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80031f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031fc:	d81a      	bhi.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d022      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d115      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800320c:	3308      	adds	r3, #8
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fb7d 	bl	8003910 <RCCEx_PLL2_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800321c:	e015      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800321e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003222:	3328      	adds	r3, #40	@ 0x28
 8003224:	2102      	movs	r1, #2
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fc24 	bl	8003a74 <RCCEx_PLL3_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003232:	e00a      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800323a:	e006      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800323c:	bf00      	nop
 800323e:	e004      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003240:	bf00      	nop
 8003242:	e002      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003244:	bf00      	nop
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10e      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003252:	4b06      	ldr	r3, [pc, #24]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800325a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003262:	4a02      	ldr	r2, [pc, #8]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003264:	430b      	orrs	r3, r1
 8003266:	6593      	str	r3, [r2, #88]	@ 0x58
 8003268:	e006      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800326a:	bf00      	nop
 800326c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003274:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800328e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003292:	460b      	mov	r3, r1
 8003294:	4313      	orrs	r3, r2
 8003296:	d055      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800329c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032a4:	d033      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80032a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032aa:	d82c      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b0:	d02f      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b6:	d826      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032bc:	d02b      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80032be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032c2:	d820      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032c8:	d012      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80032ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ce:	d81a      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d022      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80032d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032d8:	d115      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032de:	3308      	adds	r3, #8
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fb14 	bl	8003910 <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80032ee:	e015      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f4:	3328      	adds	r3, #40	@ 0x28
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fbbb 	bl	8003a74 <RCCEx_PLL3_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003304:	e00a      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800330c:	e006      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800330e:	bf00      	nop
 8003310:	e004      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003312:	bf00      	nop
 8003314:	e002      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003316:	bf00      	nop
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800331a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003324:	4ba0      	ldr	r3, [pc, #640]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800332c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003330:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003334:	4a9c      	ldr	r2, [pc, #624]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003336:	430b      	orrs	r3, r1
 8003338:	6593      	str	r3, [r2, #88]	@ 0x58
 800333a:	e003      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f002 0308 	and.w	r3, r2, #8
 8003350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800335a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800335e:	460b      	mov	r3, r1
 8003360:	4313      	orrs	r3, r2
 8003362:	d01e      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800336c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003370:	d10c      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003376:	3328      	adds	r3, #40	@ 0x28
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fb7a 	bl	8003a74 <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800338c:	4b86      	ldr	r3, [pc, #536]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800338e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003390:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800339c:	4a82      	ldr	r2, [pc, #520]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800339e:	430b      	orrs	r3, r1
 80033a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f002 0310 	and.w	r3, r2, #16
 80033ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80033bc:	460b      	mov	r3, r1
 80033be:	4313      	orrs	r3, r2
 80033c0:	d01e      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80033c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ce:	d10c      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d4:	3328      	adds	r3, #40	@ 0x28
 80033d6:	2102      	movs	r1, #2
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fb4b 	bl	8003a74 <RCCEx_PLL3_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ea:	4b6f      	ldr	r3, [pc, #444]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033fa:	4a6b      	ldr	r2, [pc, #428]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800340c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800340e:	2300      	movs	r3, #0
 8003410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003412:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003416:	460b      	mov	r3, r1
 8003418:	4313      	orrs	r3, r2
 800341a:	d03e      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003428:	d022      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800342a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800342e:	d81b      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003438:	d00b      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800343a:	e015      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800343c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003440:	3308      	adds	r3, #8
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fa63 	bl	8003910 <RCCEx_PLL2_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003450:	e00f      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003456:	3328      	adds	r3, #40	@ 0x28
 8003458:	2102      	movs	r1, #2
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fb0a 	bl	8003a74 <RCCEx_PLL3_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003466:	e004      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800346e:	e000      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800347a:	4b4b      	ldr	r3, [pc, #300]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800348a:	4a47      	ldr	r2, [pc, #284]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800348c:	430b      	orrs	r3, r1
 800348e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003490:	e003      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003496:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800349a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80034a8:	2300      	movs	r3, #0
 80034aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80034ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80034b0:	460b      	mov	r3, r1
 80034b2:	4313      	orrs	r3, r2
 80034b4:	d03b      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80034b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034c2:	d01f      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80034c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034c8:	d818      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ce:	d003      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80034d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034d4:	d007      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80034d6:	e011      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d8:	4b33      	ldr	r3, [pc, #204]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034dc:	4a32      	ldr	r2, [pc, #200]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80034e4:	e00f      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ea:	3328      	adds	r3, #40	@ 0x28
 80034ec:	2101      	movs	r1, #1
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fac0 	bl	8003a74 <RCCEx_PLL3_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80034fa:	e004      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800350e:	4b26      	ldr	r3, [pc, #152]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800351a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800351e:	4a22      	ldr	r2, [pc, #136]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003520:	430b      	orrs	r3, r1
 8003522:	6553      	str	r3, [r2, #84]	@ 0x54
 8003524:	e003      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003526:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800352a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800352e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800353a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800353c:	2300      	movs	r3, #0
 800353e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003540:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d034      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800354a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800354e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003558:	d007      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800355a:	e011      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355c:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	4a11      	ldr	r2, [pc, #68]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003568:	e00e      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800356a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356e:	3308      	adds	r3, #8
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f9cc 	bl	8003910 <RCCEx_PLL2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800357e:	e003      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10d      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003594:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359e:	4a02      	ldr	r2, [pc, #8]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035a0:	430b      	orrs	r3, r1
 80035a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035a4:	e006      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80035a6:	bf00      	nop
 80035a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80035c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80035c2:	2300      	movs	r3, #0
 80035c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80035c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80035ca:	460b      	mov	r3, r1
 80035cc:	4313      	orrs	r3, r2
 80035ce:	d00c      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d4:	3328      	adds	r3, #40	@ 0x28
 80035d6:	2102      	movs	r1, #2
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fa4b 	bl	8003a74 <RCCEx_PLL3_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80035f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035f8:	2300      	movs	r3, #0
 80035fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003600:	460b      	mov	r3, r1
 8003602:	4313      	orrs	r3, r2
 8003604:	d036      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800360a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800360c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003610:	d018      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003616:	d811      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800361c:	d014      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800361e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003622:	d80b      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d011      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800362c:	d106      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362e:	4bb7      	ldr	r3, [pc, #732]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	4ab6      	ldr	r2, [pc, #728]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800363a:	e008      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003642:	e004      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003644:	bf00      	nop
 8003646:	e002      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800364c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003656:	4bad      	ldr	r3, [pc, #692]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800365e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003664:	4aa9      	ldr	r2, [pc, #676]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003666:	430b      	orrs	r3, r1
 8003668:	6553      	str	r3, [r2, #84]	@ 0x54
 800366a:	e003      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003670:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003680:	653b      	str	r3, [r7, #80]	@ 0x50
 8003682:	2300      	movs	r3, #0
 8003684:	657b      	str	r3, [r7, #84]	@ 0x54
 8003686:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800368a:	460b      	mov	r3, r1
 800368c:	4313      	orrs	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003690:	4b9e      	ldr	r3, [pc, #632]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003694:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	4a9b      	ldr	r2, [pc, #620]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80036b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b2:	2300      	movs	r3, #0
 80036b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80036ba:	460b      	mov	r3, r1
 80036bc:	4313      	orrs	r3, r2
 80036be:	d009      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036c0:	4b92      	ldr	r3, [pc, #584]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80036c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ce:	4a8f      	ldr	r2, [pc, #572]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80036e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036e2:	2300      	movs	r3, #0
 80036e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80036ea:	460b      	mov	r3, r1
 80036ec:	4313      	orrs	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036f0:	4b86      	ldr	r3, [pc, #536]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	4a85      	ldr	r2, [pc, #532]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80036fa:	6113      	str	r3, [r2, #16]
 80036fc:	4b83      	ldr	r3, [pc, #524]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036fe:	6919      	ldr	r1, [r3, #16]
 8003700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003708:	4a80      	ldr	r2, [pc, #512]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800370a:	430b      	orrs	r3, r1
 800370c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800370e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800371a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800371c:	2300      	movs	r3, #0
 800371e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003720:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003724:	460b      	mov	r3, r1
 8003726:	4313      	orrs	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800372a:	4b78      	ldr	r3, [pc, #480]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800372c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003738:	4a74      	ldr	r2, [pc, #464]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800373a:	430b      	orrs	r3, r1
 800373c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800373e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800374a:	633b      	str	r3, [r7, #48]	@ 0x30
 800374c:	2300      	movs	r3, #0
 800374e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003750:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003754:	460b      	mov	r3, r1
 8003756:	4313      	orrs	r3, r2
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800375a:	4b6c      	ldr	r3, [pc, #432]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800375c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376a:	4a68      	ldr	r2, [pc, #416]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800376c:	430b      	orrs	r3, r1
 800376e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	2100      	movs	r1, #0
 800377a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003782:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003786:	460b      	mov	r3, r1
 8003788:	4313      	orrs	r3, r2
 800378a:	d011      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800378c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003790:	3308      	adds	r3, #8
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f000 f8bb 	bl	8003910 <RCCEx_PLL2_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80037a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80037b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	2100      	movs	r1, #0
 80037ba:	6239      	str	r1, [r7, #32]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037c6:	460b      	mov	r3, r1
 80037c8:	4313      	orrs	r3, r2
 80037ca:	d011      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d0:	3308      	adds	r3, #8
 80037d2:	2101      	movs	r1, #1
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f89b 	bl	8003910 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80037e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80037f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	2100      	movs	r1, #0
 80037fa:	61b9      	str	r1, [r7, #24]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003806:	460b      	mov	r3, r1
 8003808:	4313      	orrs	r3, r2
 800380a:	d011      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800380c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003810:	3308      	adds	r3, #8
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f87b 	bl	8003910 <RCCEx_PLL2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800382c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	2100      	movs	r1, #0
 800383a:	6139      	str	r1, [r7, #16]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003846:	460b      	mov	r3, r1
 8003848:	4313      	orrs	r3, r2
 800384a:	d011      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800384c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003850:	3328      	adds	r3, #40	@ 0x28
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f90d 	bl	8003a74 <RCCEx_PLL3_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800386c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	2100      	movs	r1, #0
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003886:	460b      	mov	r3, r1
 8003888:	4313      	orrs	r3, r2
 800388a:	d011      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800388c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003890:	3328      	adds	r3, #40	@ 0x28
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f8ed 	bl	8003a74 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80038a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80038b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	2100      	movs	r1, #0
 80038ba:	6039      	str	r1, [r7, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038c6:	460b      	mov	r3, r1
 80038c8:	4313      	orrs	r3, r2
 80038ca:	d011      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d0:	3328      	adds	r3, #40	@ 0x28
 80038d2:	2102      	movs	r1, #2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 f8cd 	bl	8003a74 <RCCEx_PLL3_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80038e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80038f0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
}
 80038fe:	4618      	mov	r0, r3
 8003900:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390a:	bf00      	nop
 800390c:	58024400 	.word	0x58024400

08003910 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800391e:	4b53      	ldr	r3, [pc, #332]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b03      	cmp	r3, #3
 8003928:	d101      	bne.n	800392e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e099      	b.n	8003a62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800392e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a4e      	ldr	r2, [pc, #312]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003934:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393a:	f7fd f9a5 	bl	8000c88 <HAL_GetTick>
 800393e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003940:	e008      	b.n	8003954 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003942:	f7fd f9a1 	bl	8000c88 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e086      	b.n	8003a62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003954:	4b45      	ldr	r3, [pc, #276]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003960:	4b42      	ldr	r3, [pc, #264]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	031b      	lsls	r3, r3, #12
 800396e:	493f      	ldr	r1, [pc, #252]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	628b      	str	r3, [r1, #40]	@ 0x28
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	3b01      	subs	r3, #1
 800397a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	3b01      	subs	r3, #1
 8003984:	025b      	lsls	r3, r3, #9
 8003986:	b29b      	uxth	r3, r3
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	3b01      	subs	r3, #1
 800399e:	061b      	lsls	r3, r3, #24
 80039a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80039a4:	4931      	ldr	r1, [pc, #196]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039aa:	4b30      	ldr	r3, [pc, #192]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	492d      	ldr	r1, [pc, #180]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039bc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	f023 0220 	bic.w	r2, r3, #32
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	4928      	ldr	r1, [pc, #160]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80039ce:	4b27      	ldr	r3, [pc, #156]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d2:	4a26      	ldr	r2, [pc, #152]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039d4:	f023 0310 	bic.w	r3, r3, #16
 80039d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80039da:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039de:	4b24      	ldr	r3, [pc, #144]	@ (8003a70 <RCCEx_PLL2_Config+0x160>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	69d2      	ldr	r2, [r2, #28]
 80039e6:	00d2      	lsls	r2, r2, #3
 80039e8:	4920      	ldr	r1, [pc, #128]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80039ee:	4b1f      	ldr	r3, [pc, #124]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039f4:	f043 0310 	orr.w	r3, r3, #16
 80039f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a00:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	4a19      	ldr	r2, [pc, #100]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003a0c:	e00f      	b.n	8003a2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a14:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	4a14      	ldr	r2, [pc, #80]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003a20:	e005      	b.n	8003a2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a22:	4b12      	ldr	r3, [pc, #72]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	4a11      	ldr	r2, [pc, #68]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a0e      	ldr	r2, [pc, #56]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3a:	f7fd f925 	bl	8000c88 <HAL_GetTick>
 8003a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a40:	e008      	b.n	8003a54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003a42:	f7fd f921 	bl	8000c88 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e006      	b.n	8003a62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a54:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	58024400 	.word	0x58024400
 8003a70:	ffff0007 	.word	0xffff0007

08003a74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a82:	4b53      	ldr	r3, [pc, #332]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d101      	bne.n	8003a92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e099      	b.n	8003bc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a92:	4b4f      	ldr	r3, [pc, #316]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a4e      	ldr	r2, [pc, #312]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9e:	f7fd f8f3 	bl	8000c88 <HAL_GetTick>
 8003aa2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003aa6:	f7fd f8ef 	bl	8000c88 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e086      	b.n	8003bc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ab8:	4b45      	ldr	r3, [pc, #276]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ac4:	4b42      	ldr	r3, [pc, #264]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	051b      	lsls	r3, r3, #20
 8003ad2:	493f      	ldr	r1, [pc, #252]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	025b      	lsls	r3, r3, #9
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003b08:	4931      	ldr	r1, [pc, #196]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b0e:	4b30      	ldr	r3, [pc, #192]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	492d      	ldr	r1, [pc, #180]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b20:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	4928      	ldr	r1, [pc, #160]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b32:	4b27      	ldr	r3, [pc, #156]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	4a26      	ldr	r2, [pc, #152]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b3e:	4b24      	ldr	r3, [pc, #144]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b42:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <RCCEx_PLL3_Config+0x160>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	69d2      	ldr	r2, [r2, #28]
 8003b4a:	00d2      	lsls	r2, r2, #3
 8003b4c:	4920      	ldr	r1, [pc, #128]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b52:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b56:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b64:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	4a19      	ldr	r2, [pc, #100]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003b70:	e00f      	b.n	8003b92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d106      	bne.n	8003b86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b78:	4b15      	ldr	r3, [pc, #84]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	4a14      	ldr	r2, [pc, #80]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003b84:	e005      	b.n	8003b92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b86:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8a:	4a11      	ldr	r2, [pc, #68]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003b92:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9e:	f7fd f873 	bl	8000c88 <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ba4:	e008      	b.n	8003bb8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ba6:	f7fd f86f 	bl	8000c88 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e006      	b.n	8003bc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bb8:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	ffff0007 	.word	0xffff0007

08003bd8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e10f      	b.n	8003e0a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a87      	ldr	r2, [pc, #540]	@ (8003e14 <HAL_SPI_Init+0x23c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00f      	beq.n	8003c1a <HAL_SPI_Init+0x42>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a86      	ldr	r2, [pc, #536]	@ (8003e18 <HAL_SPI_Init+0x240>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00a      	beq.n	8003c1a <HAL_SPI_Init+0x42>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a84      	ldr	r2, [pc, #528]	@ (8003e1c <HAL_SPI_Init+0x244>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d005      	beq.n	8003c1a <HAL_SPI_Init+0x42>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	d901      	bls.n	8003c1a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0f7      	b.n	8003e0a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 ff22 	bl	8004a64 <SPI_GetPacketSize>
 8003c20:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7b      	ldr	r2, [pc, #492]	@ (8003e14 <HAL_SPI_Init+0x23c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00c      	beq.n	8003c46 <HAL_SPI_Init+0x6e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a79      	ldr	r2, [pc, #484]	@ (8003e18 <HAL_SPI_Init+0x240>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <HAL_SPI_Init+0x6e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a78      	ldr	r2, [pc, #480]	@ (8003e1c <HAL_SPI_Init+0x244>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d002      	beq.n	8003c46 <HAL_SPI_Init+0x6e>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d811      	bhi.n	8003c6a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003c4a:	4a72      	ldr	r2, [pc, #456]	@ (8003e14 <HAL_SPI_Init+0x23c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a70      	ldr	r2, [pc, #448]	@ (8003e18 <HAL_SPI_Init+0x240>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_SPI_Init+0x8c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6f      	ldr	r2, [pc, #444]	@ (8003e1c <HAL_SPI_Init+0x244>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d104      	bne.n	8003c6e <HAL_SPI_Init+0x96>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d901      	bls.n	8003c6e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e0cd      	b.n	8003e0a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc fe2e 	bl	80008e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003caa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cb4:	d119      	bne.n	8003cea <HAL_SPI_Init+0x112>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cbe:	d103      	bne.n	8003cc8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10c      	bne.n	8003cea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003cd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cd8:	d107      	bne.n	8003cea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00f      	beq.n	8003d16 <HAL_SPI_Init+0x13e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d90b      	bls.n	8003d16 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e007      	b.n	8003d26 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d38:	ea42 0103 	orr.w	r1, r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d86:	ea42 0103 	orr.w	r1, r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d113      	bne.n	8003dc6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dc4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40013000 	.word	0x40013000
 8003e18:	40003800 	.word	0x40003800
 8003e1c:	40003c00 	.word	0x40003c00

08003e20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08e      	sub	sp, #56	@ 0x38
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3320      	adds	r3, #32
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3330      	adds	r3, #48	@ 0x30
 8003e3c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e4a:	f7fc ff1d 	bl	8000c88 <HAL_GetTick>
 8003e4e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8003e54:	887b      	ldrh	r3, [r7, #2]
 8003e56:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d001      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	e310      	b.n	800448a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x5a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x5a>
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e305      	b.n	800448a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x6c>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e2fe      	b.n	800448a <HAL_SPI_TransmitReceive+0x66a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2205      	movs	r2, #5
 8003e98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	887a      	ldrh	r2, [r7, #2]
 8003eae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	887a      	ldrh	r2, [r7, #2]
 8003eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8003eea:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a70      	ldr	r2, [pc, #448]	@ (80040b4 <HAL_SPI_TransmitReceive+0x294>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0xea>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6f      	ldr	r2, [pc, #444]	@ (80040b8 <HAL_SPI_TransmitReceive+0x298>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0xea>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6d      	ldr	r2, [pc, #436]	@ (80040bc <HAL_SPI_TransmitReceive+0x29c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d102      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f0e:	e001      	b.n	8003f14 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8003f10:	2308      	movs	r3, #8
 8003f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	4b69      	ldr	r3, [pc, #420]	@ (80040c0 <HAL_SPI_TransmitReceive+0x2a0>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	8879      	ldrh	r1, [r7, #2]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f40:	d107      	bne.n	8003f52 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b0f      	cmp	r3, #15
 8003f58:	f240 80a2 	bls.w	80040a0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8003f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003f62:	e094      	b.n	800408e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d120      	bne.n	8003fb4 <HAL_SPI_TransmitReceive+0x194>
 8003f72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01d      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8003f78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003f7a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d217      	bcs.n	8003fb4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003fb2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8003fbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d065      	beq.n	800408e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d118      	bne.n	8004002 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fda:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fe0:	1d1a      	adds	r2, r3, #4
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ffe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004000:	e045      	b.n	800408e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004002:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004004:	8bfb      	ldrh	r3, [r7, #30]
 8004006:	429a      	cmp	r2, r3
 8004008:	d21d      	bcs.n	8004046 <HAL_SPI_TransmitReceive+0x226>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d018      	beq.n	8004046 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800401c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800401e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004024:	1d1a      	adds	r2, r3, #4
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004042:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004044:	e023      	b.n	800408e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004046:	f7fc fe1f 	bl	8000c88 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004052:	429a      	cmp	r2, r3
 8004054:	d803      	bhi.n	800405e <HAL_SPI_TransmitReceive+0x23e>
 8004056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d102      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x244>
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	2b00      	cmp	r3, #0
 8004062:	d114      	bne.n	800408e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fc2f 	bl	80048c8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004070:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1fd      	b.n	800448a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800408e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004090:	2b00      	cmp	r3, #0
 8004092:	f47f af67 	bne.w	8003f64 <HAL_SPI_TransmitReceive+0x144>
 8004096:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	f47f af63 	bne.w	8003f64 <HAL_SPI_TransmitReceive+0x144>
 800409e:	e1ce      	b.n	800443e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b07      	cmp	r3, #7
 80040a6:	f240 81c2 	bls.w	800442e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80040aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80040b0:	e0c9      	b.n	8004246 <HAL_SPI_TransmitReceive+0x426>
 80040b2:	bf00      	nop
 80040b4:	40013000 	.word	0x40013000
 80040b8:	40003800 	.word	0x40003800
 80040bc:	40003c00 	.word	0x40003c00
 80040c0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d11f      	bne.n	8004112 <HAL_SPI_TransmitReceive+0x2f2>
 80040d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01c      	beq.n	8004112 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80040d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80040da:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80040dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040de:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d216      	bcs.n	8004112 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f2:	1c9a      	adds	r2, r3, #2
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004110:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800411a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8092 	beq.w	8004246 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d118      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	8812      	ldrh	r2, [r2, #0]
 8004138:	b292      	uxth	r2, r2
 800413a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004140:	1c9a      	adds	r2, r3, #2
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800415e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004160:	e071      	b.n	8004246 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004162:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004164:	8bfb      	ldrh	r3, [r7, #30]
 8004166:	429a      	cmp	r2, r3
 8004168:	d228      	bcs.n	80041bc <HAL_SPI_TransmitReceive+0x39c>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d023      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	b292      	uxth	r2, r2
 800417e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004184:	1c9a      	adds	r2, r3, #2
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800418e:	6a3a      	ldr	r2, [r7, #32]
 8004190:	8812      	ldrh	r2, [r2, #0]
 8004192:	b292      	uxth	r2, r2
 8004194:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800419a:	1c9a      	adds	r2, r3, #2
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b02      	subs	r3, #2
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80041b8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80041ba:	e044      	b.n	8004246 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80041bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d11d      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x3de>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d018      	beq.n	80041fe <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041d0:	6a3a      	ldr	r2, [r7, #32]
 80041d2:	8812      	ldrh	r2, [r2, #0]
 80041d4:	b292      	uxth	r2, r2
 80041d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041dc:	1c9a      	adds	r2, r3, #2
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80041fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80041fc:	e023      	b.n	8004246 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041fe:	f7fc fd43 	bl	8000c88 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800420a:	429a      	cmp	r2, r3
 800420c:	d803      	bhi.n	8004216 <HAL_SPI_TransmitReceive+0x3f6>
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d102      	bne.n	800421c <HAL_SPI_TransmitReceive+0x3fc>
 8004216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004218:	2b00      	cmp	r3, #0
 800421a:	d114      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fb53 	bl	80048c8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004228:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e121      	b.n	800448a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004246:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004248:	2b00      	cmp	r3, #0
 800424a:	f47f af3b 	bne.w	80040c4 <HAL_SPI_TransmitReceive+0x2a4>
 800424e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f af37 	bne.w	80040c4 <HAL_SPI_TransmitReceive+0x2a4>
 8004256:	e0f2      	b.n	800443e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b02      	cmp	r3, #2
 8004264:	d121      	bne.n	80042aa <HAL_SPI_TransmitReceive+0x48a>
 8004266:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01e      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800426c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800426e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8004270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004272:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8004274:	429a      	cmp	r2, r3
 8004276:	d218      	bcs.n	80042aa <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3320      	adds	r3, #32
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80042a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80042b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80ba 	beq.w	800442e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d11b      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80042fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80042fe:	e096      	b.n	800442e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004300:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004302:	8bfb      	ldrh	r3, [r7, #30]
 8004304:	429a      	cmp	r2, r3
 8004306:	d24a      	bcs.n	800439e <HAL_SPI_TransmitReceive+0x57e>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d045      	beq.n	800439e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800433a:	7812      	ldrb	r2, [r2, #0]
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004356:	7812      	ldrb	r2, [r2, #0]
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b04      	subs	r3, #4
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800439a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800439c:	e047      	b.n	800442e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800439e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d820      	bhi.n	80043e6 <HAL_SPI_TransmitReceive+0x5c6>
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01b      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80043e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80043e4:	e023      	b.n	800442e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043e6:	f7fc fc4f 	bl	8000c88 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d803      	bhi.n	80043fe <HAL_SPI_TransmitReceive+0x5de>
 80043f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d102      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x5e4>
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d114      	bne.n	800442e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 fa5f 	bl	80048c8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004410:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e02d      	b.n	800448a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800442e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004430:	2b00      	cmp	r3, #0
 8004432:	f47f af11 	bne.w	8004258 <HAL_SPI_TransmitReceive+0x438>
 8004436:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	f47f af0d 	bne.w	8004258 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004444:	2200      	movs	r2, #0
 8004446:	2108      	movs	r1, #8
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fadd 	bl	8004a08 <SPI_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fa2f 	bl	80048c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8004488:	2300      	movs	r3, #0
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	3730      	adds	r7, #48	@ 0x30
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop

08004494 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	@ 0x28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80044c6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3330      	adds	r3, #48	@ 0x30
 80044ce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d010      	beq.n	80044fc <HAL_SPI_IRQHandler+0x68>
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044f2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f9c3 	bl	8004880 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80044fa:	e192      	b.n	8004822 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d113      	bne.n	800452e <HAL_SPI_IRQHandler+0x9a>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10e      	bne.n	800452e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
    hspi->RxISR(hspi);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	4798      	blx	r3
    handled = 1UL;
 800452a:	2301      	movs	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10f      	bne.n	8004558 <HAL_SPI_IRQHandler+0xc4>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
    handled = 1UL;
 8004554:	2301      	movs	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <HAL_SPI_IRQHandler+0xee>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
    handled = 1UL;
 800457e:	2301      	movs	r3, #1
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	f040 8147 	bne.w	8004818 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 808b 	beq.w	80046ac <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0208 	orr.w	r2, r2, #8
 80045a4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0210 	orr.w	r2, r2, #16
 80045b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0208 	bic.w	r2, r2, #8
 80045d4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d13d      	bne.n	8004660 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80045e4:	e036      	b.n	8004654 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	d90b      	bls.n	8004606 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045f8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045fe:	1d1a      	adds	r2, r3, #4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	665a      	str	r2, [r3, #100]	@ 0x64
 8004604:	e01d      	b.n	8004642 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b07      	cmp	r3, #7
 800460c:	d90b      	bls.n	8004626 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	8812      	ldrh	r2, [r2, #0]
 8004616:	b292      	uxth	r2, r2
 8004618:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800461e:	1c9a      	adds	r2, r3, #2
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	665a      	str	r2, [r3, #100]	@ 0x64
 8004624:	e00d      	b.n	8004642 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004632:	7812      	ldrb	r2, [r2, #0]
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1c2      	bne.n	80045e6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f931 	bl	80048c8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8f7 	bl	800486c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800467e:	e0d0      	b.n	8004822 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d103      	bne.n	800468e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f8e6 	bl	8004858 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800468c:	e0c6      	b.n	800481c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800468e:	7cfb      	ldrb	r3, [r7, #19]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d103      	bne.n	800469c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8d5 	bl	8004844 <HAL_SPI_RxCpltCallback>
    return;
 800469a:	e0bf      	b.n	800481c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	f040 80bc 	bne.w	800481c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8c3 	bl	8004830 <HAL_SPI_TxCpltCallback>
    return;
 80046aa:	e0b7      	b.n	800481c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80b5 	beq.w	8004822 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00f      	beq.n	80046e2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c8:	f043 0204 	orr.w	r2, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00f      	beq.n	800470c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046f2:	f043 0201 	orr.w	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800470a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00f      	beq.n	8004736 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800471c:	f043 0208 	orr.w	r2, r3, #8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004734:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00f      	beq.n	8004760 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004746:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0220 	orr.w	r2, r2, #32
 800475e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004766:	2b00      	cmp	r3, #0
 8004768:	d05a      	beq.n	8004820 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6919      	ldr	r1, [r3, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b28      	ldr	r3, [pc, #160]	@ (8004828 <HAL_SPI_IRQHandler+0x394>)
 8004786:	400b      	ands	r3, r1
 8004788:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004790:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004794:	d138      	bne.n	8004808 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80047a4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d013      	beq.n	80047d6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047b2:	4a1e      	ldr	r2, [pc, #120]	@ (800482c <HAL_SPI_IRQHandler+0x398>)
 80047b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fc fba4 	bl	8000f08 <HAL_DMA_Abort_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d020      	beq.n	8004820 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e2:	4a12      	ldr	r2, [pc, #72]	@ (800482c <HAL_SPI_IRQHandler+0x398>)
 80047e4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc fb8c 	bl	8000f08 <HAL_DMA_Abort_IT>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d014      	beq.n	8004820 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004806:	e00b      	b.n	8004820 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f82b 	bl	800486c <HAL_SPI_ErrorCallback>
    return;
 8004816:	e003      	b.n	8004820 <HAL_SPI_IRQHandler+0x38c>
    return;
 8004818:	bf00      	nop
 800481a:	e002      	b.n	8004822 <HAL_SPI_IRQHandler+0x38e>
    return;
 800481c:	bf00      	nop
 800481e:	e000      	b.n	8004822 <HAL_SPI_IRQHandler+0x38e>
    return;
 8004820:	bf00      	nop
  }
}
 8004822:	3728      	adds	r7, #40	@ 0x28
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	fffffc94 	.word	0xfffffc94
 800482c:	08004895 	.word	0x08004895

08004830 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff ffd6 	bl	800486c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0208 	orr.w	r2, r2, #8
 80048e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0210 	orr.w	r2, r2, #16
 80048f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6919      	ldr	r1, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b3c      	ldr	r3, [pc, #240]	@ (8004a04 <SPI_CloseTransfer+0x13c>)
 8004914:	400b      	ands	r3, r1
 8004916:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004926:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b04      	cmp	r3, #4
 8004932:	d014      	beq.n	800495e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00f      	beq.n	800495e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004944:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0220 	orr.w	r2, r2, #32
 800495c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b03      	cmp	r3, #3
 8004968:	d014      	beq.n	8004994 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00f      	beq.n	8004994 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800497a:	f043 0204 	orr.w	r2, r3, #4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004992:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00f      	beq.n	80049be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a4:	f043 0201 	orr.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00f      	beq.n	80049e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ce:	f043 0208 	orr.w	r2, r3, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	fffffc90 	.word	0xfffffc90

08004a08 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004a18:	e010      	b.n	8004a3c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a1a:	f7fc f935 	bl	8000c88 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d803      	bhi.n	8004a32 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d102      	bne.n	8004a38 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e00f      	b.n	8004a5c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d0df      	beq.n	8004a1a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	3307      	adds	r3, #7
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <memset>:
 8004a9a:	4402      	add	r2, r0
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d100      	bne.n	8004aa4 <memset+0xa>
 8004aa2:	4770      	bx	lr
 8004aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa8:	e7f9      	b.n	8004a9e <memset+0x4>
	...

08004aac <__libc_init_array>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	4d0d      	ldr	r5, [pc, #52]	@ (8004ae4 <__libc_init_array+0x38>)
 8004ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ae8 <__libc_init_array+0x3c>)
 8004ab2:	1b64      	subs	r4, r4, r5
 8004ab4:	10a4      	asrs	r4, r4, #2
 8004ab6:	2600      	movs	r6, #0
 8004ab8:	42a6      	cmp	r6, r4
 8004aba:	d109      	bne.n	8004ad0 <__libc_init_array+0x24>
 8004abc:	4d0b      	ldr	r5, [pc, #44]	@ (8004aec <__libc_init_array+0x40>)
 8004abe:	4c0c      	ldr	r4, [pc, #48]	@ (8004af0 <__libc_init_array+0x44>)
 8004ac0:	f000 f818 	bl	8004af4 <_init>
 8004ac4:	1b64      	subs	r4, r4, r5
 8004ac6:	10a4      	asrs	r4, r4, #2
 8004ac8:	2600      	movs	r6, #0
 8004aca:	42a6      	cmp	r6, r4
 8004acc:	d105      	bne.n	8004ada <__libc_init_array+0x2e>
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad4:	4798      	blx	r3
 8004ad6:	3601      	adds	r6, #1
 8004ad8:	e7ee      	b.n	8004ab8 <__libc_init_array+0xc>
 8004ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ade:	4798      	blx	r3
 8004ae0:	3601      	adds	r6, #1
 8004ae2:	e7f2      	b.n	8004aca <__libc_init_array+0x1e>
 8004ae4:	08004b1c 	.word	0x08004b1c
 8004ae8:	08004b1c 	.word	0x08004b1c
 8004aec:	08004b1c 	.word	0x08004b1c
 8004af0:	08004b20 	.word	0x08004b20

08004af4 <_init>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr

08004b00 <_fini>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr
