
24cxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080048a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000184  24000010  080048b0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000194  080048b0  00020194  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011021  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000023ce  00000000  00000000  0003105f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cc0  00000000  00000000  00033430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ba8  00000000  00000000  000340f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00002eff  00000000  00000000  00034c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001322c  00000000  00000000  00037b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015598f  00000000  00000000  0004adc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a0752  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000033bc  00000000  00000000  001a07a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004870 	.word	0x08004870

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004870 	.word	0x08004870

080002d8 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002ee:	4b38      	ldr	r3, [pc, #224]	; (80003d0 <MX_GPIO_Init+0xf8>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a36      	ldr	r2, [pc, #216]	; (80003d0 <MX_GPIO_Init+0xf8>)
 80002f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800030c:	4b30      	ldr	r3, [pc, #192]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a2f      	ldr	r2, [pc, #188]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000314:	f043 0310 	orr.w	r3, r3, #16
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0310 	and.w	r3, r3, #16
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a27      	ldr	r2, [pc, #156]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0302 	and.w	r3, r3, #2
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD_CS_Pin|LCS_RS_Pin, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 800034e:	4821      	ldr	r0, [pc, #132]	; (80003d4 <MX_GPIO_Init+0xfc>)
 8000350:	f001 f9d0 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035a:	481f      	ldr	r0, [pc, #124]	; (80003d8 <MX_GPIO_Init+0x100>)
 800035c:	f001 f9ca 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCS_RS_Pin;
 8000360:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8000364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800036a:	2301      	movs	r3, #1
 800036c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800036e:	2303      	movs	r3, #3
 8000370:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	4619      	mov	r1, r3
 8000378:	4816      	ldr	r0, [pc, #88]	; (80003d4 <MX_GPIO_Init+0xfc>)
 800037a:	f001 f80b 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800037e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000384:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800038a:	2301      	movs	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800038e:	f107 030c 	add.w	r3, r7, #12
 8000392:	4619      	mov	r1, r3
 8000394:	480f      	ldr	r0, [pc, #60]	; (80003d4 <MX_GPIO_Init+0xfc>)
 8000396:	f000 fffd 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 800039a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a0:	2301      	movs	r3, #1
 80003a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003a8:	2303      	movs	r3, #3
 80003aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 80003ac:	f107 030c 	add.w	r3, r7, #12
 80003b0:	4619      	mov	r1, r3
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <MX_GPIO_Init+0x100>)
 80003b4:	f000 ffee 	bl	8001394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2100      	movs	r1, #0
 80003bc:	2028      	movs	r0, #40	; 0x28
 80003be:	f000 fd6e 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003c2:	2028      	movs	r0, #40	; 0x28
 80003c4:	f000 fd85 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

}
 80003c8:	bf00      	nop
 80003ca:	3720      	adds	r7, #32
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	58024400 	.word	0x58024400
 80003d4:	58021000 	.word	0x58021000
 80003d8:	58020400 	.word	0x58020400

080003dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_I2C1_Init+0x74>)
 80003e2:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <MX_I2C1_Init+0x78>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <MX_I2C1_Init+0x74>)
 80003e8:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <MX_I2C1_Init+0x7c>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <MX_I2C1_Init+0x74>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_I2C1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_I2C1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_I2C1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_I2C1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_I2C1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000416:	480e      	ldr	r0, [pc, #56]	; (8000450 <MX_I2C1_Init+0x74>)
 8000418:	f001 f9aa 	bl	8001770 <HAL_I2C_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000422:	f000 f935 	bl	8000690 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000426:	2100      	movs	r1, #0
 8000428:	4809      	ldr	r0, [pc, #36]	; (8000450 <MX_I2C1_Init+0x74>)
 800042a:	f001 fa31 	bl	8001890 <HAL_I2CEx_ConfigAnalogFilter>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000434:	f000 f92c 	bl	8000690 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000438:	2100      	movs	r1, #0
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_I2C1_Init+0x74>)
 800043c:	f001 fa73 	bl	8001926 <HAL_I2CEx_ConfigDigitalFilter>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000446:	f000 f923 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2400002c 	.word	0x2400002c
 8000454:	40005400 	.word	0x40005400
 8000458:	00602173 	.word	0x00602173

0800045c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b0ba      	sub	sp, #232	; 0xe8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	22c0      	movs	r2, #192	; 0xc0
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f004 f9ef 	bl	8004860 <memset>
  if(i2cHandle->Instance==I2C1)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a27      	ldr	r2, [pc, #156]	; (8000524 <HAL_I2C_MspInit+0xc8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d146      	bne.n	800051a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800048c:	f04f 0208 	mov.w	r2, #8
 8000490:	f04f 0300 	mov.w	r3, #0
 8000494:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8000498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4618      	mov	r0, r3
 80004a6:	f002 fa4f 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80004b0:	f000 f8ee 	bl	8000690 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <HAL_I2C_MspInit+0xcc>)
 80004b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ba:	4a1b      	ldr	r2, [pc, #108]	; (8000528 <HAL_I2C_MspInit+0xcc>)
 80004bc:	f043 0302 	orr.w	r3, r3, #2
 80004c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <HAL_I2C_MspInit+0xcc>)
 80004c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004d2:	23c0      	movs	r3, #192	; 0xc0
 80004d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004d8:	2312      	movs	r3, #18
 80004da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004de:	2301      	movs	r3, #1
 80004e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004e4:	2303      	movs	r3, #3
 80004e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004ea:	2304      	movs	r3, #4
 80004ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80004f4:	4619      	mov	r1, r3
 80004f6:	480d      	ldr	r0, [pc, #52]	; (800052c <HAL_I2C_MspInit+0xd0>)
 80004f8:	f000 ff4c 	bl	8001394 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_I2C_MspInit+0xcc>)
 80004fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <HAL_I2C_MspInit+0xcc>)
 8000504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000508:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_I2C_MspInit+0xcc>)
 800050e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800051a:	bf00      	nop
 800051c:	37e8      	adds	r7, #232	; 0xe8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40005400 	.word	0x40005400
 8000528:	58024400 	.word	0x58024400
 800052c:	58020400 	.word	0x58020400

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fb3a 	bl	8000bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f80c 	bl	8000554 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800053c:	f000 f88a 	bl	8000654 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f7ff feca 	bl	80002d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000544:	f7ff ff4a 	bl	80003dc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000548:	f000 f8a8 	bl	800069c <MX_SPI2_Init>
  MX_SPI4_Init();
 800054c:	f000 f8fc 	bl	8000748 <MX_SPI4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x20>
	...

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b09c      	sub	sp, #112	; 0x70
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	224c      	movs	r2, #76	; 0x4c
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 f97c 	bl	8004860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2220      	movs	r2, #32
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 f976 	bl	8004860 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000574:	2002      	movs	r0, #2
 8000576:	f001 fa23 	bl	80019c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057a:	2300      	movs	r3, #0
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	4b33      	ldr	r3, [pc, #204]	; (800064c <SystemClock_Config+0xf8>)
 8000580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000582:	4a32      	ldr	r2, [pc, #200]	; (800064c <SystemClock_Config+0xf8>)
 8000584:	f023 0301 	bic.w	r3, r3, #1
 8000588:	62d3      	str	r3, [r2, #44]	; 0x2c
 800058a:	4b30      	ldr	r3, [pc, #192]	; (800064c <SystemClock_Config+0xf8>)
 800058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <SystemClock_Config+0xfc>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a2c      	ldr	r2, [pc, #176]	; (8000650 <SystemClock_Config+0xfc>)
 800059e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <SystemClock_Config+0xfc>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b0:	bf00      	nop
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemClock_Config+0xfc>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005be:	d1f8      	bne.n	80005b2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005c0:	2303      	movs	r3, #3
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ce:	2340      	movs	r3, #64	; 0x40
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005da:	2305      	movs	r3, #5
 80005dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005de:	2360      	movs	r3, #96	; 0x60
 80005e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005ee:	2308      	movs	r3, #8
 80005f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fa18 	bl	8001a34 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800060a:	f000 f841 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	233f      	movs	r3, #63	; 0x3f
 8000610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2303      	movs	r3, #3
 8000614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800061a:	2308      	movs	r3, #8
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2102      	movs	r1, #2
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fe58 	bl	80022e8 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800063e:	f000 f827 	bl	8000690 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3770      	adds	r7, #112	; 0x70
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	58000400 	.word	0x58000400
 8000650:	58024800 	.word	0x58024800

08000654 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b0b0      	sub	sp, #192	; 0xc0
 8000658:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	22c0      	movs	r2, #192	; 0xc0
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f004 f8fd 	bl	8004860 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000666:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000672:	2300      	movs	r3, #0
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	4618      	mov	r0, r3
 800067a:	f002 f965 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 f804 	bl	8000690 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	37c0      	adds	r7, #192	; 0xc0
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006a2:	4a28      	ldr	r2, [pc, #160]	; (8000744 <MX_SPI2_Init+0xa8>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_SPI2_Init+0xa4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_SPI2_Init+0xa4>)
 8000702:	2200      	movs	r2, #0
 8000704:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_SPI2_Init+0xa4>)
 8000708:	2200      	movs	r2, #0
 800070a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_SPI2_Init+0xa4>)
 800070e:	2200      	movs	r2, #0
 8000710:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_SPI2_Init+0xa4>)
 8000714:	2200      	movs	r2, #0
 8000716:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_SPI2_Init+0xa4>)
 800071a:	2200      	movs	r2, #0
 800071c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_SPI2_Init+0xa4>)
 8000720:	2200      	movs	r2, #0
 8000722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_SPI2_Init+0xa4>)
 8000726:	2200      	movs	r2, #0
 8000728:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_SPI2_Init+0xa4>)
 800072c:	f003 fc7a 	bl	8004024 <HAL_SPI_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000736:	f7ff ffab 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	24000080 	.word	0x24000080
 8000744:	40003800 	.word	0x40003800

08000748 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_SPI4_Init+0xa4>)
 800074e:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <MX_SPI4_Init+0xa8>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_SPI4_Init+0xa4>)
 8000754:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000758:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_SPI4_Init+0xa4>)
 800075c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000760:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_SPI4_Init+0xa4>)
 8000764:	2203      	movs	r2, #3
 8000766:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_SPI4_Init+0xa4>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_SPI4_Init+0xa4>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_SPI4_Init+0xa4>)
 8000776:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800077a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_SPI4_Init+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_SPI4_Init+0xa4>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_SPI4_Init+0xa4>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_SPI4_Init+0xa4>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_SPI4_Init+0xa4>)
 8000796:	2200      	movs	r2, #0
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_SPI4_Init+0xa4>)
 800079c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_SPI4_Init+0xa4>)
 80007da:	f003 fc23 	bl	8004024 <HAL_SPI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80007e4:	f7ff ff54 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	24000108 	.word	0x24000108
 80007f0:	40013400 	.word	0x40013400

080007f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b0bc      	sub	sp, #240	; 0xf0
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	22c0      	movs	r2, #192	; 0xc0
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f004 f823 	bl	8004860 <memset>
  if(spiHandle->Instance==SPI2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a55      	ldr	r2, [pc, #340]	; (8000974 <HAL_SPI_MspInit+0x180>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d14f      	bne.n	80008c4 <HAL_SPI_MspInit+0xd0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000828:	f04f 0300 	mov.w	r3, #0
 800082c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000834:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f884 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000846:	f7ff ff23 	bl	8000690 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800084a:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <HAL_SPI_MspInit+0x184>)
 800084c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000850:	4a49      	ldr	r2, [pc, #292]	; (8000978 <HAL_SPI_MspInit+0x184>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800085a:	4b47      	ldr	r3, [pc, #284]	; (8000978 <HAL_SPI_MspInit+0x184>)
 800085c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000868:	4b43      	ldr	r3, [pc, #268]	; (8000978 <HAL_SPI_MspInit+0x184>)
 800086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086e:	4a42      	ldr	r2, [pc, #264]	; (8000978 <HAL_SPI_MspInit+0x184>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000878:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <HAL_SPI_MspInit+0x184>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000886:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800088a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a0:	2305      	movs	r3, #5
 80008a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008aa:	4619      	mov	r1, r3
 80008ac:	4833      	ldr	r0, [pc, #204]	; (800097c <HAL_SPI_MspInit+0x188>)
 80008ae:	f000 fd71 	bl	8001394 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2024      	movs	r0, #36	; 0x24
 80008b8:	f000 faf1 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008bc:	2024      	movs	r0, #36	; 0x24
 80008be:	f000 fb08 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80008c2:	e053      	b.n	800096c <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI4)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a2d      	ldr	r2, [pc, #180]	; (8000980 <HAL_SPI_MspInit+0x18c>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d14e      	bne.n	800096c <HAL_SPI_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80008ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d2:	f04f 0300 	mov.w	r3, #0
 80008d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 80008da:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008de:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 f82f 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_SPI_MspInit+0x100>
      Error_Handler();
 80008f0:	f7ff fece 	bl	8000690 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_SPI_MspInit+0x184>)
 80008f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <HAL_SPI_MspInit+0x184>)
 80008fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000900:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <HAL_SPI_MspInit+0x184>)
 8000906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800090a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_SPI_MspInit+0x184>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	4a17      	ldr	r2, [pc, #92]	; (8000978 <HAL_SPI_MspInit+0x184>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_SPI_MspInit+0x184>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000930:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000934:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800094a:	2305      	movs	r3, #5
 800094c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000950:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000954:	4619      	mov	r1, r3
 8000956:	480b      	ldr	r0, [pc, #44]	; (8000984 <HAL_SPI_MspInit+0x190>)
 8000958:	f000 fd1c 	bl	8001394 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2054      	movs	r0, #84	; 0x54
 8000962:	f000 fa9c 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8000966:	2054      	movs	r0, #84	; 0x54
 8000968:	f000 fab3 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
}
 800096c:	bf00      	nop
 800096e:	37f0      	adds	r7, #240	; 0xf0
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40003800 	.word	0x40003800
 8000978:	58024400 	.word	0x58024400
 800097c:	58020400 	.word	0x58020400
 8000980:	40013400 	.word	0x40013400
 8000984:	58021000 	.word	0x58021000

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_MspInit+0x30>)
 8000990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000994:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x30>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x30>)
 80009a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	58024400 	.word	0x58024400

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f942 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <SPI2_IRQHandler+0x10>)
 8000a16:	f003 fc29 	bl	800426c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	24000080 	.word	0x24000080

08000a24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8000a28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a2c:	f000 fe7b 	bl	8001726 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <SPI4_IRQHandler+0x10>)
 8000a3a:	f003 fc17 	bl	800426c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	24000108 	.word	0x24000108

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <SystemInit+0xe4>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a36      	ldr	r2, [pc, #216]	; (8000b2c <SystemInit+0xe4>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a5c:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <SystemInit+0xe8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	2b06      	cmp	r3, #6
 8000a66:	d807      	bhi.n	8000a78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <SystemInit+0xe8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f023 030f 	bic.w	r3, r3, #15
 8000a70:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <SystemInit+0xe8>)
 8000a72:	f043 0307 	orr.w	r3, r3, #7
 8000a76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a78:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <SystemInit+0xec>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a2d      	ldr	r2, [pc, #180]	; (8000b34 <SystemInit+0xec>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <SystemInit+0xec>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <SystemInit+0xec>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4929      	ldr	r1, [pc, #164]	; (8000b34 <SystemInit+0xec>)
 8000a90:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <SystemInit+0xf0>)
 8000a92:	4013      	ands	r3, r2
 8000a94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <SystemInit+0xe8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d007      	beq.n	8000ab2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <SystemInit+0xe8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f023 030f 	bic.w	r3, r3, #15
 8000aaa:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <SystemInit+0xe8>)
 8000aac:	f043 0307 	orr.w	r3, r3, #7
 8000ab0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <SystemInit+0xec>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <SystemInit+0xec>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <SystemInit+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <SystemInit+0xec>)
 8000ac6:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <SystemInit+0xf4>)
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <SystemInit+0xec>)
 8000acc:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <SystemInit+0xf8>)
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <SystemInit+0xec>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <SystemInit+0xfc>)
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <SystemInit+0xec>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <SystemInit+0xec>)
 8000ade:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <SystemInit+0xfc>)
 8000ae0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <SystemInit+0xec>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <SystemInit+0xec>)
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <SystemInit+0xfc>)
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <SystemInit+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <SystemInit+0xec>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <SystemInit+0xec>)
 8000afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <SystemInit+0xec>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <SystemInit+0x100>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <SystemInit+0x104>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b12:	d202      	bcs.n	8000b1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <SystemInit+0x108>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <SystemInit+0x10c>)
 8000b1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	52002000 	.word	0x52002000
 8000b34:	58024400 	.word	0x58024400
 8000b38:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b3c:	02020200 	.word	0x02020200
 8000b40:	01ff0000 	.word	0x01ff0000
 8000b44:	01010280 	.word	0x01010280
 8000b48:	5c001000 	.word	0x5c001000
 8000b4c:	ffff0000 	.word	0xffff0000
 8000b50:	51008108 	.word	0x51008108
 8000b54:	52004000 	.word	0x52004000

08000b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b5c:	f7ff ff74 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	; (8000ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f003 fe47 	bl	8004818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8a:	f7ff fcd1 	bl	8000530 <main>
  bx  lr
 8000b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b98:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b9c:	080048a0 	.word	0x080048a0
  ldr r2, =_sbss
 8000ba0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ba4:	24000194 	.word	0x24000194

08000ba8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC3_IRQHandler>
	...

08000bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	f000 f968 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bb8:	f001 fd4c 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_Init+0x68>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	4913      	ldr	r1, [pc, #76]	; (8000c18 <HAL_Init+0x6c>)
 8000bca:	5ccb      	ldrb	r3, [r1, r3]
 8000bcc:	f003 031f 	and.w	r3, r3, #31
 8000bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_Init+0x68>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_Init+0x6c>)
 8000be0:	5cd3      	ldrb	r3, [r2, r3]
 8000be2:	f003 031f 	and.w	r3, r3, #31
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <HAL_Init+0x70>)
 8000bee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_Init+0x74>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f814 	bl	8000c24 <HAL_InitTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e002      	b.n	8000c0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c06:	f7ff febf 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	58024400 	.word	0x58024400
 8000c18:	08004888 	.word	0x08004888
 8000c1c:	24000004 	.word	0x24000004
 8000c20:	24000000 	.word	0x24000000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_InitTick+0x60>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e021      	b.n	8000c7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_InitTick+0x64>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_InitTick+0x60>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f94d 	bl	8000eee <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f917 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x68>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2400000c 	.word	0x2400000c
 8000c88:	24000000 	.word	0x24000000
 8000c8c:	24000008 	.word	0x24000008

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2400000c 	.word	0x2400000c
 8000cb4:	24000190 	.word	0x24000190

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	24000190 	.word	0x24000190

08000cd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetREVID+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	0c1b      	lsrs	r3, r3, #16
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	5c001000 	.word	0x5c001000

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <__NVIC_SetPriorityGrouping+0x40>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x40>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00
 8000d2c:	05fa0000 	.word	0x05fa0000

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff40 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff90 	bl	8000ddc <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5f 	bl	8000d88 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff33 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa4 	bl	8000e44 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e237      	b.n	800138a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d004      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e22c      	b.n	800138a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a5c      	ldr	r2, [pc, #368]	; (80010a8 <HAL_DMA_Abort_IT+0x1a0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d04a      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a5b      	ldr	r2, [pc, #364]	; (80010ac <HAL_DMA_Abort_IT+0x1a4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d045      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a59      	ldr	r2, [pc, #356]	; (80010b0 <HAL_DMA_Abort_IT+0x1a8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d040      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a58      	ldr	r2, [pc, #352]	; (80010b4 <HAL_DMA_Abort_IT+0x1ac>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d03b      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <HAL_DMA_Abort_IT+0x1b0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d036      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a55      	ldr	r2, [pc, #340]	; (80010bc <HAL_DMA_Abort_IT+0x1b4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d031      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a53      	ldr	r2, [pc, #332]	; (80010c0 <HAL_DMA_Abort_IT+0x1b8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d02c      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_DMA_Abort_IT+0x1bc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d027      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <HAL_DMA_Abort_IT+0x1c0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d022      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <HAL_DMA_Abort_IT+0x1c4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d01d      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a4d      	ldr	r2, [pc, #308]	; (80010d0 <HAL_DMA_Abort_IT+0x1c8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d018      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_DMA_Abort_IT+0x1cc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d013      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <HAL_DMA_Abort_IT+0x1d0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00e      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a49      	ldr	r2, [pc, #292]	; (80010dc <HAL_DMA_Abort_IT+0x1d4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d009      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a47      	ldr	r2, [pc, #284]	; (80010e0 <HAL_DMA_Abort_IT+0x1d8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d004      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xc8>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a46      	ldr	r2, [pc, #280]	; (80010e4 <HAL_DMA_Abort_IT+0x1dc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_DMA_Abort_IT+0xcc>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <HAL_DMA_Abort_IT+0xce>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8086 	beq.w	80010e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2204      	movs	r2, #4
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <HAL_DMA_Abort_IT+0x1a0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d04a      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a2e      	ldr	r2, [pc, #184]	; (80010ac <HAL_DMA_Abort_IT+0x1a4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d045      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a2c      	ldr	r2, [pc, #176]	; (80010b0 <HAL_DMA_Abort_IT+0x1a8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d040      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <HAL_DMA_Abort_IT+0x1ac>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03b      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <HAL_DMA_Abort_IT+0x1b0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d036      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a28      	ldr	r2, [pc, #160]	; (80010bc <HAL_DMA_Abort_IT+0x1b4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d031      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_DMA_Abort_IT+0x1b8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d02c      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <HAL_DMA_Abort_IT+0x1bc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d027      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <HAL_DMA_Abort_IT+0x1c0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d022      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a22      	ldr	r2, [pc, #136]	; (80010cc <HAL_DMA_Abort_IT+0x1c4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d01d      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <HAL_DMA_Abort_IT+0x1c8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d018      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <HAL_DMA_Abort_IT+0x1cc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d013      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_DMA_Abort_IT+0x1d0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00e      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_DMA_Abort_IT+0x1d4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d009      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <HAL_DMA_Abort_IT+0x1d8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d004      	beq.n	8001084 <HAL_DMA_Abort_IT+0x17c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_DMA_Abort_IT+0x1dc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d108      	bne.n	8001096 <HAL_DMA_Abort_IT+0x18e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e178      	b.n	8001388 <HAL_DMA_Abort_IT+0x480>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e16f      	b.n	8001388 <HAL_DMA_Abort_IT+0x480>
 80010a8:	40020010 	.word	0x40020010
 80010ac:	40020028 	.word	0x40020028
 80010b0:	40020040 	.word	0x40020040
 80010b4:	40020058 	.word	0x40020058
 80010b8:	40020070 	.word	0x40020070
 80010bc:	40020088 	.word	0x40020088
 80010c0:	400200a0 	.word	0x400200a0
 80010c4:	400200b8 	.word	0x400200b8
 80010c8:	40020410 	.word	0x40020410
 80010cc:	40020428 	.word	0x40020428
 80010d0:	40020440 	.word	0x40020440
 80010d4:	40020458 	.word	0x40020458
 80010d8:	40020470 	.word	0x40020470
 80010dc:	40020488 	.word	0x40020488
 80010e0:	400204a0 	.word	0x400204a0
 80010e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 020e 	bic.w	r2, r2, #14
 80010f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a6c      	ldr	r2, [pc, #432]	; (80012b0 <HAL_DMA_Abort_IT+0x3a8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d04a      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6b      	ldr	r2, [pc, #428]	; (80012b4 <HAL_DMA_Abort_IT+0x3ac>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d045      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a69      	ldr	r2, [pc, #420]	; (80012b8 <HAL_DMA_Abort_IT+0x3b0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d040      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a68      	ldr	r2, [pc, #416]	; (80012bc <HAL_DMA_Abort_IT+0x3b4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d03b      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a66      	ldr	r2, [pc, #408]	; (80012c0 <HAL_DMA_Abort_IT+0x3b8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d036      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a65      	ldr	r2, [pc, #404]	; (80012c4 <HAL_DMA_Abort_IT+0x3bc>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d031      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a63      	ldr	r2, [pc, #396]	; (80012c8 <HAL_DMA_Abort_IT+0x3c0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02c      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a62      	ldr	r2, [pc, #392]	; (80012cc <HAL_DMA_Abort_IT+0x3c4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d027      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a60      	ldr	r2, [pc, #384]	; (80012d0 <HAL_DMA_Abort_IT+0x3c8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d022      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a5f      	ldr	r2, [pc, #380]	; (80012d4 <HAL_DMA_Abort_IT+0x3cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d01d      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a5d      	ldr	r2, [pc, #372]	; (80012d8 <HAL_DMA_Abort_IT+0x3d0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d018      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a5c      	ldr	r2, [pc, #368]	; (80012dc <HAL_DMA_Abort_IT+0x3d4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d013      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <HAL_DMA_Abort_IT+0x3d8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00e      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a59      	ldr	r2, [pc, #356]	; (80012e4 <HAL_DMA_Abort_IT+0x3dc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d009      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a57      	ldr	r2, [pc, #348]	; (80012e8 <HAL_DMA_Abort_IT+0x3e0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d004      	beq.n	8001198 <HAL_DMA_Abort_IT+0x290>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a56      	ldr	r2, [pc, #344]	; (80012ec <HAL_DMA_Abort_IT+0x3e4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d108      	bne.n	80011aa <HAL_DMA_Abort_IT+0x2a2>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e007      	b.n	80011ba <HAL_DMA_Abort_IT+0x2b2>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0201 	bic.w	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <HAL_DMA_Abort_IT+0x3a8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d072      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	; (80012b4 <HAL_DMA_Abort_IT+0x3ac>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d06d      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a39      	ldr	r2, [pc, #228]	; (80012b8 <HAL_DMA_Abort_IT+0x3b0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d068      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a37      	ldr	r2, [pc, #220]	; (80012bc <HAL_DMA_Abort_IT+0x3b4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d063      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <HAL_DMA_Abort_IT+0x3b8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d05e      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <HAL_DMA_Abort_IT+0x3bc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d059      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a33      	ldr	r2, [pc, #204]	; (80012c8 <HAL_DMA_Abort_IT+0x3c0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d054      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a31      	ldr	r2, [pc, #196]	; (80012cc <HAL_DMA_Abort_IT+0x3c4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d04f      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <HAL_DMA_Abort_IT+0x3c8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d04a      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <HAL_DMA_Abort_IT+0x3cc>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d045      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2d      	ldr	r2, [pc, #180]	; (80012d8 <HAL_DMA_Abort_IT+0x3d0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d040      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a2b      	ldr	r2, [pc, #172]	; (80012dc <HAL_DMA_Abort_IT+0x3d4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d03b      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <HAL_DMA_Abort_IT+0x3d8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d036      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <HAL_DMA_Abort_IT+0x3dc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d031      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <HAL_DMA_Abort_IT+0x3e0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d02c      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a25      	ldr	r2, [pc, #148]	; (80012ec <HAL_DMA_Abort_IT+0x3e4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d027      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <HAL_DMA_Abort_IT+0x3e8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d022      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <HAL_DMA_Abort_IT+0x3ec>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01d      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <HAL_DMA_Abort_IT+0x3f0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d018      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <HAL_DMA_Abort_IT+0x3f4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <HAL_DMA_Abort_IT+0x3f8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00e      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <HAL_DMA_Abort_IT+0x3fc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d009      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <HAL_DMA_Abort_IT+0x400>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d004      	beq.n	80012aa <HAL_DMA_Abort_IT+0x3a2>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_DMA_Abort_IT+0x404>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d132      	bne.n	8001310 <HAL_DMA_Abort_IT+0x408>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e031      	b.n	8001312 <HAL_DMA_Abort_IT+0x40a>
 80012ae:	bf00      	nop
 80012b0:	40020010 	.word	0x40020010
 80012b4:	40020028 	.word	0x40020028
 80012b8:	40020040 	.word	0x40020040
 80012bc:	40020058 	.word	0x40020058
 80012c0:	40020070 	.word	0x40020070
 80012c4:	40020088 	.word	0x40020088
 80012c8:	400200a0 	.word	0x400200a0
 80012cc:	400200b8 	.word	0x400200b8
 80012d0:	40020410 	.word	0x40020410
 80012d4:	40020428 	.word	0x40020428
 80012d8:	40020440 	.word	0x40020440
 80012dc:	40020458 	.word	0x40020458
 80012e0:	40020470 	.word	0x40020470
 80012e4:	40020488 	.word	0x40020488
 80012e8:	400204a0 	.word	0x400204a0
 80012ec:	400204b8 	.word	0x400204b8
 80012f0:	58025408 	.word	0x58025408
 80012f4:	5802541c 	.word	0x5802541c
 80012f8:	58025430 	.word	0x58025430
 80012fc:	58025444 	.word	0x58025444
 8001300:	58025458 	.word	0x58025458
 8001304:	5802546c 	.word	0x5802546c
 8001308:	58025480 	.word	0x58025480
 800130c:	58025494 	.word	0x58025494
 8001310:	2300      	movs	r3, #0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d028      	beq.n	8001368 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001324:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	2201      	movs	r2, #1
 8001336:	409a      	lsls	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001344:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001366:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013a2:	4b89      	ldr	r3, [pc, #548]	; (80015c8 <HAL_GPIO_Init+0x234>)
 80013a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013a6:	e194      	b.n	80016d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8186 	beq.w	80016cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d005      	beq.n	80013d8 <HAL_GPIO_Init+0x44>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b03      	cmp	r3, #3
 8001444:	d017      	beq.n	8001476 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d123      	bne.n	80014ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	69b9      	ldr	r1, [r7, #24]
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0203 	and.w	r2, r3, #3
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80e0 	beq.w	80016cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <HAL_GPIO_Init+0x238>)
 800150e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001512:	4a2e      	ldr	r2, [pc, #184]	; (80015cc <HAL_GPIO_Init+0x238>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_GPIO_Init+0x238>)
 800151e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152a:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <HAL_GPIO_Init+0x23c>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <HAL_GPIO_Init+0x240>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d052      	beq.n	80015fc <HAL_GPIO_Init+0x268>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_GPIO_Init+0x244>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d031      	beq.n	80015c2 <HAL_GPIO_Init+0x22e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_GPIO_Init+0x248>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x22a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x24c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x226>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <HAL_GPIO_Init+0x250>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x222>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <HAL_GPIO_Init+0x254>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x21e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a1a      	ldr	r2, [pc, #104]	; (80015ec <HAL_GPIO_Init+0x258>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x21a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_GPIO_Init+0x25c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x216>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <HAL_GPIO_Init+0x260>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x212>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_GPIO_Init+0x264>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x20e>
 800159e:	2309      	movs	r3, #9
 80015a0:	e02d      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015a2:	230a      	movs	r3, #10
 80015a4:	e02b      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015a6:	2308      	movs	r3, #8
 80015a8:	e029      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e027      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015ae:	2306      	movs	r3, #6
 80015b0:	e025      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e023      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e021      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e01f      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015be:	2302      	movs	r3, #2
 80015c0:	e01d      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e01b      	b.n	80015fe <HAL_GPIO_Init+0x26a>
 80015c6:	bf00      	nop
 80015c8:	58000080 	.word	0x58000080
 80015cc:	58024400 	.word	0x58024400
 80015d0:	58000400 	.word	0x58000400
 80015d4:	58020000 	.word	0x58020000
 80015d8:	58020400 	.word	0x58020400
 80015dc:	58020800 	.word	0x58020800
 80015e0:	58020c00 	.word	0x58020c00
 80015e4:	58021000 	.word	0x58021000
 80015e8:	58021400 	.word	0x58021400
 80015ec:	58021800 	.word	0x58021800
 80015f0:	58021c00 	.word	0x58021c00
 80015f4:	58022000 	.word	0x58022000
 80015f8:	58022400 	.word	0x58022400
 80015fc:	2300      	movs	r3, #0
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	f002 0203 	and.w	r2, r2, #3
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	4093      	lsls	r3, r2
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800160e:	4938      	ldr	r1, [pc, #224]	; (80016f0 <HAL_GPIO_Init+0x35c>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3301      	adds	r3, #1
 80016d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f47f ae63 	bne.w	80013a8 <HAL_GPIO_Init+0x14>
  }
}
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
 80016e6:	3724      	adds	r7, #36	; 0x24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	58000400 	.word	0x58000400

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001710:	e003      	b.n	800171a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001734:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f804 	bl	800175a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e07f      	b.n	8001882 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe fe60 	bl	800045c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2224      	movs	r2, #36	; 0x24
 80017a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	e006      	b.n	80017f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d104      	bne.n	800180a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001808:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_I2C_Init+0x11c>)
 8001816:	430b      	orrs	r3, r1
 8001818:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001828:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69d9      	ldr	r1, [r3, #28]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	02008000 	.word	0x02008000

08001890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b20      	cmp	r3, #32
 80018a4:	d138      	bne.n	8001918 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e032      	b.n	800191a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2224      	movs	r2, #36	; 0x24
 80018c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001918:	2302      	movs	r3, #2
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b20      	cmp	r3, #32
 800193a:	d139      	bne.n	80019b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001946:	2302      	movs	r3, #2
 8001948:	e033      	b.n	80019b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2224      	movs	r2, #36	; 0x24
 8001956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001978:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e000      	b.n	80019b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019b0:	2302      	movs	r3, #2
  }
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d00a      	beq.n	80019ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e01f      	b.n	8001a26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e01d      	b.n	8001a26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	490f      	ldr	r1, [pc, #60]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019fa:	f7ff f95d 	bl	8000cb8 <HAL_GetTick>
 80019fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a00:	e009      	b.n	8001a16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a02:	f7ff f959 	bl	8000cb8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a10:	d901      	bls.n	8001a16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e007      	b.n	8001a26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a22:	d1ee      	bne.n	8001a02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	58024800 	.word	0x58024800

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f000 bc48 	b.w	80022d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 8088 	beq.w	8001b66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a56:	4b99      	ldr	r3, [pc, #612]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a60:	4b96      	ldr	r3, [pc, #600]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d007      	beq.n	8001a7c <HAL_RCC_OscConfig+0x48>
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6e:	2b18      	cmp	r3, #24
 8001a70:	d111      	bne.n	8001a96 <HAL_RCC_OscConfig+0x62>
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d10c      	bne.n	8001a96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	4b8f      	ldr	r3, [pc, #572]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d06d      	beq.n	8001b64 <HAL_RCC_OscConfig+0x130>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d169      	bne.n	8001b64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f000 bc21 	b.w	80022d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x7a>
 8001aa0:	4b86      	ldr	r3, [pc, #536]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a85      	ldr	r2, [pc, #532]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	e02e      	b.n	8001b0c <HAL_RCC_OscConfig+0xd8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x9c>
 8001ab6:	4b81      	ldr	r3, [pc, #516]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a80      	ldr	r2, [pc, #512]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b7e      	ldr	r3, [pc, #504]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7d      	ldr	r2, [pc, #500]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xd8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0xc0>
 8001ada:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a77      	ldr	r2, [pc, #476]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b75      	ldr	r3, [pc, #468]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a74      	ldr	r2, [pc, #464]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xd8>
 8001af4:	4b71      	ldr	r3, [pc, #452]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a70      	ldr	r2, [pc, #448]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b6e      	ldr	r3, [pc, #440]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6d      	ldr	r2, [pc, #436]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f8d0 	bl	8000cb8 <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f8cc 	bl	8000cb8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e3d4      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xe8>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f8bc 	bl	8000cb8 <HAL_GetTick>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f8b8 	bl	8000cb8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e3c0      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b56:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x110>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80ca 	beq.w	8001d08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b74:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b7e:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_RCC_OscConfig+0x166>
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	2b18      	cmp	r3, #24
 8001b8e:	d156      	bne.n	8001c3e <HAL_RCC_OscConfig+0x20a>
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d151      	bne.n	8001c3e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9a:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x17e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e392      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bb2:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 0219 	bic.w	r2, r3, #25
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	493f      	ldr	r1, [pc, #252]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f878 	bl	8000cb8 <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f874 	bl	8000cb8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e37c      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bea:	f7ff f871 	bl	8000cd0 <HAL_GetREVID>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d817      	bhi.n	8001c28 <HAL_RCC_OscConfig+0x1f4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d108      	bne.n	8001c12 <HAL_RCC_OscConfig+0x1de>
 8001c00:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c08:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c10:	e07a      	b.n	8001d08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	031b      	lsls	r3, r3, #12
 8001c20:	4926      	ldr	r1, [pc, #152]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c26:	e06f      	b.n	8001d08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	4921      	ldr	r1, [pc, #132]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c3c:	e064      	b.n	8001d08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d047      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0219 	bic.w	r2, r3, #25
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	491a      	ldr	r1, [pc, #104]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f82e 	bl	8000cb8 <HAL_GetTick>
 8001c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff f82a 	bl	8000cb8 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e332      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	f7ff f827 	bl	8000cd0 <HAL_GetREVID>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d819      	bhi.n	8001cc0 <HAL_RCC_OscConfig+0x28c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b40      	cmp	r3, #64	; 0x40
 8001c92:	d108      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x272>
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca2:	6053      	str	r3, [r2, #4]
 8001ca4:	e030      	b.n	8001d08 <HAL_RCC_OscConfig+0x2d4>
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	031b      	lsls	r3, r3, #12
 8001cb4:	4901      	ldr	r1, [pc, #4]	; (8001cbc <HAL_RCC_OscConfig+0x288>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e025      	b.n	8001d08 <HAL_RCC_OscConfig+0x2d4>
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	4b9a      	ldr	r3, [pc, #616]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	4997      	ldr	r1, [pc, #604]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e018      	b.n	8001d08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b95      	ldr	r3, [pc, #596]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a94      	ldr	r2, [pc, #592]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7fe ffe9 	bl	8000cb8 <HAL_GetTick>
 8001ce6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cea:	f7fe ffe5 	bl	8000cb8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e2ed      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cfc:	4b8b      	ldr	r3, [pc, #556]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80a9 	beq.w	8001e68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d16:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d20:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d007      	beq.n	8001d3c <HAL_RCC_OscConfig+0x308>
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b18      	cmp	r3, #24
 8001d30:	d13a      	bne.n	8001da8 <HAL_RCC_OscConfig+0x374>
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d135      	bne.n	8001da8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d3c:	4b7b      	ldr	r3, [pc, #492]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_OscConfig+0x320>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b80      	cmp	r3, #128	; 0x80
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e2c1      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d54:	f7fe ffbc 	bl	8000cd0 <HAL_GetREVID>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d817      	bhi.n	8001d92 <HAL_RCC_OscConfig+0x35e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d108      	bne.n	8001d7c <HAL_RCC_OscConfig+0x348>
 8001d6a:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d72:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7a:	e075      	b.n	8001e68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d7c:	4b6b      	ldr	r3, [pc, #428]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	069b      	lsls	r3, r3, #26
 8001d8a:	4968      	ldr	r1, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d90:	e06a      	b.n	8001e68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d92:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	061b      	lsls	r3, r3, #24
 8001da0:	4962      	ldr	r1, [pc, #392]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001da6:	e05f      	b.n	8001e68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d042      	beq.n	8001e36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001db0:	4b5e      	ldr	r3, [pc, #376]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ff7c 	bl	8000cb8 <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001dc4:	f7fe ff78 	bl	8000cb8 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e280      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dd6:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001de2:	f7fe ff75 	bl	8000cd0 <HAL_GetREVID>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d817      	bhi.n	8001e20 <HAL_RCC_OscConfig+0x3ec>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d108      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3d6>
 8001df8:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e00:	4a4a      	ldr	r2, [pc, #296]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e06:	6053      	str	r3, [r2, #4]
 8001e08:	e02e      	b.n	8001e68 <HAL_RCC_OscConfig+0x434>
 8001e0a:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	069b      	lsls	r3, r3, #26
 8001e18:	4944      	ldr	r1, [pc, #272]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
 8001e1e:	e023      	b.n	8001e68 <HAL_RCC_OscConfig+0x434>
 8001e20:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	493f      	ldr	r1, [pc, #252]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
 8001e34:	e018      	b.n	8001e68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7fe ff39 	bl	8000cb8 <HAL_GetTick>
 8001e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e4a:	f7fe ff35 	bl	8000cb8 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e23d      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d036      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d019      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7fe ff16 	bl	8000cb8 <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7fe ff12 	bl	8000cb8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e21a      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x45c>
 8001eae:	e018      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7fe fefc 	bl	8000cb8 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7fe fef8 	bl	8000cb8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e200      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d039      	beq.n	8001f62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f02:	f7fe fed9 	bl	8000cb8 <HAL_GetTick>
 8001f06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f0a:	f7fe fed5 	bl	8000cb8 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1dd      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x4d6>
 8001f28:	e01b      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
 8001f2a:	bf00      	nop
 8001f2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f30:	4b9b      	ldr	r3, [pc, #620]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a9a      	ldr	r2, [pc, #616]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f3c:	f7fe febc 	bl	8000cb8 <HAL_GetTick>
 8001f40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f44:	f7fe feb8 	bl	8000cb8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1c0      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f56:	4b92      	ldr	r3, [pc, #584]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8081 	beq.w	8002072 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f70:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x770>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a8b      	ldr	r2, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x770>)
 8001f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f7c:	f7fe fe9c 	bl	8000cb8 <HAL_GetTick>
 8001f80:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f84:	f7fe fe98 	bl	8000cb8 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1a0      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f96:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <HAL_RCC_OscConfig+0x770>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d106      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x584>
 8001faa:	4b7d      	ldr	r3, [pc, #500]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	4a7c      	ldr	r2, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb6:	e02d      	b.n	8002014 <HAL_RCC_OscConfig+0x5e0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x5a6>
 8001fc0:	4b77      	ldr	r3, [pc, #476]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc4:	4a76      	ldr	r2, [pc, #472]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	6713      	str	r3, [r2, #112]	; 0x70
 8001fcc:	4b74      	ldr	r3, [pc, #464]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a73      	ldr	r2, [pc, #460]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd8:	e01c      	b.n	8002014 <HAL_RCC_OscConfig+0x5e0>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x5c8>
 8001fe2:	4b6f      	ldr	r3, [pc, #444]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a6e      	ldr	r2, [pc, #440]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
 8001fee:	4b6c      	ldr	r3, [pc, #432]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a6b      	ldr	r2, [pc, #428]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0x5e0>
 8001ffc:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a67      	ldr	r2, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	4b65      	ldr	r3, [pc, #404]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a64      	ldr	r2, [pc, #400]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800200e:	f023 0304 	bic.w	r3, r3, #4
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7fe fe4c 	bl	8000cb8 <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe fe48 	bl	8000cb8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e14e      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203a:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0ee      	beq.n	8002024 <HAL_RCC_OscConfig+0x5f0>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7fe fe36 	bl	8000cb8 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800204e:	e00a      	b.n	8002066 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7fe fe32 	bl	8000cb8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e138      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002066:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ee      	bne.n	8002050 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 812d 	beq.w	80022d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800207c:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002084:	2b18      	cmp	r3, #24
 8002086:	f000 80bd 	beq.w	8002204 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	2b02      	cmp	r3, #2
 8002090:	f040 809e 	bne.w	80021d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a41      	ldr	r2, [pc, #260]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800209a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fe0a 	bl	8000cb8 <HAL_GetTick>
 80020a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7fe fe06 	bl	8000cb8 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e10e      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c6:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 80020c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ca:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <HAL_RCC_OscConfig+0x774>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	430a      	orrs	r2, r1
 80020da:	4931      	ldr	r1, [pc, #196]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	628b      	str	r3, [r1, #40]	; 0x28
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	3b01      	subs	r3, #1
 80020e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ee:	3b01      	subs	r3, #1
 80020f0:	025b      	lsls	r3, r3, #9
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	3b01      	subs	r3, #1
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	3b01      	subs	r3, #1
 800210a:	061b      	lsls	r3, r3, #24
 800210c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002110:	4923      	ldr	r1, [pc, #140]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002112:	4313      	orrs	r3, r2
 8002114:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800212e:	00d2      	lsls	r2, r2, #3
 8002130:	491b      	ldr	r1, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002132:	4313      	orrs	r3, r2
 8002134:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	f023 020c 	bic.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4917      	ldr	r1, [pc, #92]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	f023 0202 	bic.w	r2, r3, #2
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	4912      	ldr	r1, [pc, #72]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002156:	4313      	orrs	r3, r2
 8002158:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002170:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_RCC_OscConfig+0x76c>)
 8002190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7fe fd8f 	bl	8000cb8 <HAL_GetTick>
 800219a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800219c:	e011      	b.n	80021c2 <HAL_RCC_OscConfig+0x78e>
 800219e:	bf00      	nop
 80021a0:	58024400 	.word	0x58024400
 80021a4:	58024800 	.word	0x58024800
 80021a8:	fffffc0c 	.word	0xfffffc0c
 80021ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fd82 	bl	8000cb8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e08a      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c2:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x77c>
 80021ce:	e082      	b.n	80022d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d0:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a42      	ldr	r2, [pc, #264]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 80021d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fd6c 	bl	8000cb8 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fd68 	bl	8000cb8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e070      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021f6:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x7b0>
 8002202:	e068      	b.n	80022d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800220a:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b01      	cmp	r3, #1
 8002216:	d031      	beq.n	800227c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0203 	and.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d12a      	bne.n	800227c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d122      	bne.n	800227c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d11a      	bne.n	800227c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	0a5b      	lsrs	r3, r3, #9
 800224a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d111      	bne.n	800227c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d108      	bne.n	800227c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0e1b      	lsrs	r3, r3, #24
 800226e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e02b      	b.n	80022d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 8002282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002284:	08db      	lsrs	r3, r3, #3
 8002286:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800228a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	429a      	cmp	r2, r3
 8002294:	d01f      	beq.n	80022d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022a2:	f7fe fd09 	bl	8000cb8 <HAL_GetTick>
 80022a6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80022a8:	bf00      	nop
 80022aa:	f7fe fd05 	bl	8000cb8 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d0f9      	beq.n	80022aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 80022b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x8b0>)
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022c2:	00d2      	lsls	r2, r2, #3
 80022c4:	4906      	ldr	r1, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_RCC_OscConfig+0x8ac>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3730      	adds	r7, #48	; 0x30
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	58024400 	.word	0x58024400
 80022e4:	ffff0007 	.word	0xffff0007

080022e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e19c      	b.n	8002636 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b8a      	ldr	r3, [pc, #552]	; (8002528 <HAL_RCC_ClockConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d910      	bls.n	800232c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b87      	ldr	r3, [pc, #540]	; (8002528 <HAL_RCC_ClockConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 020f 	bic.w	r2, r3, #15
 8002312:	4985      	ldr	r1, [pc, #532]	; (8002528 <HAL_RCC_ClockConfig+0x240>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_RCC_ClockConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e184      	b.n	8002636 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d010      	beq.n	800235a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	4b7b      	ldr	r3, [pc, #492]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002344:	429a      	cmp	r2, r3
 8002346:	d908      	bls.n	800235a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002348:	4b78      	ldr	r3, [pc, #480]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	4975      	ldr	r1, [pc, #468]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 8002356:	4313      	orrs	r3, r2
 8002358:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d010      	beq.n	8002388 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	4b70      	ldr	r3, [pc, #448]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002372:	429a      	cmp	r2, r3
 8002374:	d908      	bls.n	8002388 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002376:	4b6d      	ldr	r3, [pc, #436]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	496a      	ldr	r1, [pc, #424]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 8002384:	4313      	orrs	r3, r2
 8002386:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	4b64      	ldr	r3, [pc, #400]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d908      	bls.n	80023b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023a4:	4b61      	ldr	r3, [pc, #388]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	495e      	ldr	r1, [pc, #376]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d010      	beq.n	80023e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d908      	bls.n	80023e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023d2:	4b56      	ldr	r3, [pc, #344]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4953      	ldr	r1, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d010      	beq.n	8002412 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d908      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f023 020f 	bic.w	r2, r3, #15
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4947      	ldr	r1, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800240e:	4313      	orrs	r3, r2
 8002410:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d055      	beq.n	80024ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800241e:	4b43      	ldr	r3, [pc, #268]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4940      	ldr	r1, [pc, #256]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800242c:	4313      	orrs	r3, r2
 800242e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002438:	4b3c      	ldr	r3, [pc, #240]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d121      	bne.n	8002488 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0f6      	b.n	8002636 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d107      	bne.n	8002460 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d115      	bne.n	8002488 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0ea      	b.n	8002636 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d107      	bne.n	8002478 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0de      	b.n	8002636 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0d6      	b.n	8002636 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f023 0207 	bic.w	r2, r3, #7
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4925      	ldr	r1, [pc, #148]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 8002496:	4313      	orrs	r3, r2
 8002498:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249a:	f7fe fc0d 	bl	8000cb8 <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a2:	f7fe fc09 	bl	8000cb8 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0be      	b.n	8002636 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d1eb      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d010      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d208      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f023 020f 	bic.w	r2, r3, #15
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x244>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_ClockConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d214      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HAL_RCC_ClockConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 020f 	bic.w	r2, r3, #15
 800250e:	4906      	ldr	r1, [pc, #24]	; (8002528 <HAL_RCC_ClockConfig+0x240>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <HAL_RCC_ClockConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e086      	b.n	8002636 <HAL_RCC_ClockConfig+0x34e>
 8002528:	52002000 	.word	0x52002000
 800252c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002548:	429a      	cmp	r2, r3
 800254a:	d208      	bcs.n	800255e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800254c:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	4939      	ldr	r1, [pc, #228]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 800255a:	4313      	orrs	r3, r2
 800255c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	4b34      	ldr	r3, [pc, #208]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002576:	429a      	cmp	r2, r3
 8002578:	d208      	bcs.n	800258c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	492e      	ldr	r1, [pc, #184]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 8002588:	4313      	orrs	r3, r2
 800258a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d208      	bcs.n	80025ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4922      	ldr	r1, [pc, #136]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d010      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d208      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4917      	ldr	r1, [pc, #92]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025e8:	f000 f834 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	4912      	ldr	r1, [pc, #72]	; (8002644 <HAL_RCC_ClockConfig+0x35c>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_RCC_ClockConfig+0x358>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <HAL_RCC_ClockConfig+0x35c>)
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_RCC_ClockConfig+0x360>)
 800261e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x364>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x368>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fafa 	bl	8000c24 <HAL_InitTick>
 8002630:	4603      	mov	r3, r0
 8002632:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	58024400 	.word	0x58024400
 8002644:	08004888 	.word	0x08004888
 8002648:	24000004 	.word	0x24000004
 800264c:	24000000 	.word	0x24000000
 8002650:	24000008 	.word	0x24000008

08002654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800265a:	4bb3      	ldr	r3, [pc, #716]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002662:	2b18      	cmp	r3, #24
 8002664:	f200 8155 	bhi.w	8002912 <HAL_RCC_GetSysClockFreq+0x2be>
 8002668:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <HAL_RCC_GetSysClockFreq+0x1c>)
 800266a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266e:	bf00      	nop
 8002670:	080026d5 	.word	0x080026d5
 8002674:	08002913 	.word	0x08002913
 8002678:	08002913 	.word	0x08002913
 800267c:	08002913 	.word	0x08002913
 8002680:	08002913 	.word	0x08002913
 8002684:	08002913 	.word	0x08002913
 8002688:	08002913 	.word	0x08002913
 800268c:	08002913 	.word	0x08002913
 8002690:	080026fb 	.word	0x080026fb
 8002694:	08002913 	.word	0x08002913
 8002698:	08002913 	.word	0x08002913
 800269c:	08002913 	.word	0x08002913
 80026a0:	08002913 	.word	0x08002913
 80026a4:	08002913 	.word	0x08002913
 80026a8:	08002913 	.word	0x08002913
 80026ac:	08002913 	.word	0x08002913
 80026b0:	08002701 	.word	0x08002701
 80026b4:	08002913 	.word	0x08002913
 80026b8:	08002913 	.word	0x08002913
 80026bc:	08002913 	.word	0x08002913
 80026c0:	08002913 	.word	0x08002913
 80026c4:	08002913 	.word	0x08002913
 80026c8:	08002913 	.word	0x08002913
 80026cc:	08002913 	.word	0x08002913
 80026d0:	08002707 	.word	0x08002707
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026d4:	4b94      	ldr	r3, [pc, #592]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026e0:	4b91      	ldr	r3, [pc, #580]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	08db      	lsrs	r3, r3, #3
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	4a90      	ldr	r2, [pc, #576]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
 80026f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026f2:	e111      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026f4:	4b8d      	ldr	r3, [pc, #564]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026f6:	61bb      	str	r3, [r7, #24]
      break;
 80026f8:	e10e      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026fa:	4b8d      	ldr	r3, [pc, #564]	; (8002930 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026fc:	61bb      	str	r3, [r7, #24]
      break;
 80026fe:	e10b      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002700:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002702:	61bb      	str	r3, [r7, #24]
      break;
 8002704:	e108      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002710:	4b85      	ldr	r3, [pc, #532]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800271a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800271c:	4b82      	ldr	r3, [pc, #520]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002726:	4b80      	ldr	r3, [pc, #512]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	08db      	lsrs	r3, r3, #3
 800272c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80e1 	beq.w	800290c <HAL_RCC_GetSysClockFreq+0x2b8>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b02      	cmp	r3, #2
 800274e:	f000 8083 	beq.w	8002858 <HAL_RCC_GetSysClockFreq+0x204>
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b02      	cmp	r3, #2
 8002756:	f200 80a1 	bhi.w	800289c <HAL_RCC_GetSysClockFreq+0x248>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x114>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d056      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002766:	e099      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002768:	4b6f      	ldr	r3, [pc, #444]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02d      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002774:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	4a6b      	ldr	r2, [pc, #428]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
 8002784:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800279e:	4b62      	ldr	r3, [pc, #392]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002938 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80027ce:	e087      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800293c <HAL_RCC_GetSysClockFreq+0x2e8>
 80027de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e2:	4b51      	ldr	r3, [pc, #324]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002938 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002812:	e065      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002940 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002836:	ed97 6a02 	vldr	s12, [r7, #8]
 800283a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002938 <HAL_RCC_GetSysClockFreq+0x2e4>
 800283e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800284a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800284e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002852:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002856:	e043      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002862:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002944 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800287a:	ed97 6a02 	vldr	s12, [r7, #8]
 800287e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002938 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800288a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800288e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800289a:	e021      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002940 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028be:	ed97 6a02 	vldr	s12, [r7, #8]
 80028c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002938 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	0a5b      	lsrs	r3, r3, #9
 80028e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ea:	3301      	adds	r3, #1
 80028ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80028fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002904:	ee17 3a90 	vmov	r3, s15
 8002908:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800290a:	e005      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
      break;
 8002910:	e002      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002914:	61bb      	str	r3, [r7, #24]
      break;
 8002916:	bf00      	nop
  }

  return sysclockfreq;
 8002918:	69bb      	ldr	r3, [r7, #24]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	; 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	58024400 	.word	0x58024400
 800292c:	03d09000 	.word	0x03d09000
 8002930:	003d0900 	.word	0x003d0900
 8002934:	017d7840 	.word	0x017d7840
 8002938:	46000000 	.word	0x46000000
 800293c:	4c742400 	.word	0x4c742400
 8002940:	4a742400 	.word	0x4a742400
 8002944:	4bbebc20 	.word	0x4bbebc20

08002948 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800294c:	b0ca      	sub	sp, #296	; 0x128
 800294e:	af00      	add	r7, sp, #0
 8002950:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800296c:	2500      	movs	r5, #0
 800296e:	ea54 0305 	orrs.w	r3, r4, r5
 8002972:	d049      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800297a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800297e:	d02f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002980:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002984:	d828      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800298a:	d01a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800298c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002990:	d822      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299a:	d007      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800299c:	e01c      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800299e:	4bb8      	ldr	r3, [pc, #736]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	4ab7      	ldr	r2, [pc, #732]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029aa:	e01a      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029b0:	3308      	adds	r3, #8
 80029b2:	2102      	movs	r1, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f9d1 	bl	8003d5c <RCCEx_PLL2_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029c0:	e00f      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029c6:	3328      	adds	r3, #40	; 0x28
 80029c8:	2102      	movs	r1, #2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fa78 	bl	8003ec0 <RCCEx_PLL3_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029d6:	e004      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029de:	e000      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80029e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029ea:	4ba5      	ldr	r3, [pc, #660]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80029f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f8:	4aa1      	ldr	r2, [pc, #644]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029fa:	430b      	orrs	r3, r1
 80029fc:	6513      	str	r3, [r2, #80]	; 0x50
 80029fe:	e003      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002a14:	f04f 0900 	mov.w	r9, #0
 8002a18:	ea58 0309 	orrs.w	r3, r8, r9
 8002a1c:	d047      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d82a      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a45 	.word	0x08002a45
 8002a34:	08002a53 	.word	0x08002a53
 8002a38:	08002a69 	.word	0x08002a69
 8002a3c:	08002a87 	.word	0x08002a87
 8002a40:	08002a87 	.word	0x08002a87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a44:	4b8e      	ldr	r3, [pc, #568]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	4a8d      	ldr	r2, [pc, #564]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a50:	e01a      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a56:	3308      	adds	r3, #8
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 f97e 	bl	8003d5c <RCCEx_PLL2_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a66:	e00f      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6c:	3328      	adds	r3, #40	; 0x28
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 fa25 	bl	8003ec0 <RCCEx_PLL3_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a7c:	e004      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a84:	e000      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a90:	4b7b      	ldr	r3, [pc, #492]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a94:	f023 0107 	bic.w	r1, r3, #7
 8002a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	4a78      	ldr	r2, [pc, #480]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6513      	str	r3, [r2, #80]	; 0x50
 8002aa4:	e003      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002aba:	f04f 0b00 	mov.w	fp, #0
 8002abe:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ac2:	d04c      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ace:	d030      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad4:	d829      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ad8:	d02d      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ada:	2bc0      	cmp	r3, #192	; 0xc0
 8002adc:	d825      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d018      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ae2:	2b80      	cmp	r3, #128	; 0x80
 8002ae4:	d821      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d007      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002aee:	e01c      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af0:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	4a62      	ldr	r2, [pc, #392]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002afc:	e01c      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b02:	3308      	adds	r3, #8
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f928 	bl	8003d5c <RCCEx_PLL2_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b12:	e011      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b18:	3328      	adds	r3, #40	; 0x28
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 f9cf 	bl	8003ec0 <RCCEx_PLL3_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b28:	e006      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b40:	4b4f      	ldr	r3, [pc, #316]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b44:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	4a4c      	ldr	r2, [pc, #304]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6513      	str	r3, [r2, #80]	; 0x50
 8002b54:	e003      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002b6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002b74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	d053      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b8a:	d035      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b90:	d82e      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b96:	d031      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002b98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b9c:	d828      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba2:	d01a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba8:	d822      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002bae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bb2:	d007      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002bb4:	e01c      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb6:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bc2:	e01c      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc8:	3308      	adds	r3, #8
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 f8c5 	bl	8003d5c <RCCEx_PLL2_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bd8:	e011      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bde:	3328      	adds	r3, #40	; 0x28
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 f96c 	bl	8003ec0 <RCCEx_PLL3_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bee:	e006      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bf6:	e002      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002bf8:	bf00      	nop
 8002bfa:	e000      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c16:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1c:	e003      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002c32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002c40:	460b      	mov	r3, r1
 8002c42:	4313      	orrs	r3, r2
 8002c44:	d056      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c52:	d038      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c58:	d831      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c5e:	d034      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002c60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c64:	d82b      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c6a:	d01d      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c70:	d825      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c7c:	e01f      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c7e:	bf00      	nop
 8002c80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c84:	4ba2      	ldr	r3, [pc, #648]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4aa1      	ldr	r2, [pc, #644]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c90:	e01c      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c96:	3308      	adds	r3, #8
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f85e 	bl	8003d5c <RCCEx_PLL2_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ca6:	e011      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cac:	3328      	adds	r3, #40	; 0x28
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 f905 	bl	8003ec0 <RCCEx_PLL3_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cbc:	e006      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cc4:	e002      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cd4:	4b8e      	ldr	r3, [pc, #568]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ce4:	4a8a      	ldr	r2, [pc, #552]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cea:	e003      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002d0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4313      	orrs	r3, r2
 8002d12:	d03a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	2b30      	cmp	r3, #48	; 0x30
 8002d1c:	d01f      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d1e:	2b30      	cmp	r3, #48	; 0x30
 8002d20:	d819      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d815      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d019      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d111      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d32:	4b77      	ldr	r3, [pc, #476]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	4a76      	ldr	r2, [pc, #472]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d3e:	e011      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d44:	3308      	adds	r3, #8
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 f807 	bl	8003d5c <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d54:	e006      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d5c:	e002      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d6c:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d80:	e003      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002d96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002da0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4313      	orrs	r3, r2
 8002da8:	d051      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db4:	d035      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dba:	d82e      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dc0:	d031      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dc6:	d828      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dcc:	d01a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	d822      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ddc:	d007      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002dde:	e01c      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de0:	4b4b      	ldr	r3, [pc, #300]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	4a4a      	ldr	r2, [pc, #296]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002dec:	e01c      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df2:	3308      	adds	r3, #8
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 ffb0 	bl	8003d5c <RCCEx_PLL2_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e02:	e011      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e08:	3328      	adds	r3, #40	; 0x28
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 f857 	bl	8003ec0 <RCCEx_PLL3_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e18:	e006      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e20:	e002      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e30:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e34:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	4a34      	ldr	r2, [pc, #208]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6513      	str	r3, [r2, #80]	; 0x50
 8002e44:	e003      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002e64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	d056      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e78:	d033      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7e:	d82c      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e84:	d02f      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002e86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e8a:	d826      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e90:	d02b      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002e92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e96:	d820      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e9c:	d012      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea2:	d81a      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d022      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d115      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 ff50 	bl	8003d5c <RCCEx_PLL2_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ec2:	e015      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec8:	3328      	adds	r3, #40	; 0x28
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fff7 	bl	8003ec0 <RCCEx_PLL3_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ee0:	e006      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ee2:	bf00      	nop
 8002ee4:	e004      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ee6:	bf00      	nop
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002eea:	bf00      	nop
 8002eec:	e000      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f06:	4a02      	ldr	r2, [pc, #8]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6513      	str	r3, [r2, #80]	; 0x50
 8002f0c:	e006      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f0e:	bf00      	nop
 8002f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	d055      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f48:	d033      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4e:	d82c      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f54:	d02f      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d826      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f60:	d02b      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f66:	d820      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6c:	d012      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f72:	d81a      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d022      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f7c:	d115      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f82:	3308      	adds	r3, #8
 8002f84:	2101      	movs	r1, #1
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fee8 	bl	8003d5c <RCCEx_PLL2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f92:	e015      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f98:	3328      	adds	r3, #40	; 0x28
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 ff8f 	bl	8003ec0 <RCCEx_PLL3_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fb0:	e006      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e004      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fc8:	4ba3      	ldr	r3, [pc, #652]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fd8:	4a9f      	ldr	r2, [pc, #636]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fde:	e003      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003002:	460b      	mov	r3, r1
 8003004:	4313      	orrs	r3, r2
 8003006:	d037      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003012:	d00e      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003018:	d816      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800301e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003022:	d111      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003024:	4b8c      	ldr	r3, [pc, #560]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	4a8b      	ldr	r2, [pc, #556]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800302a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003030:	e00f      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003036:	3308      	adds	r3, #8
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fe8e 	bl	8003d5c <RCCEx_PLL2_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003046:	e004      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800304e:	e000      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800305a:	4b7f      	ldr	r3, [pc, #508]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800305c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a7b      	ldr	r2, [pc, #492]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800306a:	430b      	orrs	r3, r1
 800306c:	6513      	str	r3, [r2, #80]	; 0x50
 800306e:	e003      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003074:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800308e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003092:	460b      	mov	r3, r1
 8003094:	4313      	orrs	r3, r2
 8003096:	d039      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800309c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d81c      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80030a2:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030e5 	.word	0x080030e5
 80030ac:	080030b9 	.word	0x080030b9
 80030b0:	080030c7 	.word	0x080030c7
 80030b4:	080030e5 	.word	0x080030e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b8:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	4a66      	ldr	r2, [pc, #408]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030c4:	e00f      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ca:	3308      	adds	r3, #8
 80030cc:	2102      	movs	r1, #2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fe44 	bl	8003d5c <RCCEx_PLL2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030da:	e004      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80030e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030ee:	4b5a      	ldr	r3, [pc, #360]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	f023 0103 	bic.w	r1, r3, #3
 80030f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fc:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030fe:	430b      	orrs	r3, r1
 8003100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003102:	e003      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800310c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003122:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003126:	460b      	mov	r3, r1
 8003128:	4313      	orrs	r3, r2
 800312a:	f000 809f 	beq.w	800326c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800312e:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800313a:	f7fd fdbd 	bl	8000cb8 <HAL_GetTick>
 800313e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003142:	e00b      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fd fdb8 	bl	8000cb8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b64      	cmp	r3, #100	; 0x64
 8003152:	d903      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800315a:	e005      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315c:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ed      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800316c:	2b00      	cmp	r3, #0
 800316e:	d179      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003170:	4b39      	ldr	r3, [pc, #228]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003172:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003178:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800317c:	4053      	eors	r3, r2
 800317e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003186:	4b34      	ldr	r3, [pc, #208]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a30      	ldr	r2, [pc, #192]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031aa:	4a2b      	ldr	r2, [pc, #172]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031be:	d118      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd fd7a 	bl	8000cb8 <HAL_GetTick>
 80031c4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c8:	e00d      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fd fd75 	bl	8000cb8 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80031da:	429a      	cmp	r2, r3
 80031dc:	d903      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80031e4:	e005      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0eb      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80031f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d129      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320a:	d10e      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003218:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800321c:	091a      	lsrs	r2, r3, #4
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003220:	4013      	ands	r3, r2
 8003222:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003224:	430b      	orrs	r3, r1
 8003226:	6113      	str	r3, [r2, #16]
 8003228:	e005      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003230:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003234:	6113      	str	r3, [r2, #16]
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003238:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800323e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003248:	430b      	orrs	r3, r1
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	e00e      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800324e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003252:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003256:	e009      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003258:	58024400 	.word	0x58024400
 800325c:	58024800 	.word	0x58024800
 8003260:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003268:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f002 0301 	and.w	r3, r2, #1
 8003278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003282:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003286:	460b      	mov	r3, r1
 8003288:	4313      	orrs	r3, r2
 800328a:	f000 8089 	beq.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003294:	2b28      	cmp	r3, #40	; 0x28
 8003296:	d86b      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	08003379 	.word	0x08003379
 80032a4:	08003371 	.word	0x08003371
 80032a8:	08003371 	.word	0x08003371
 80032ac:	08003371 	.word	0x08003371
 80032b0:	08003371 	.word	0x08003371
 80032b4:	08003371 	.word	0x08003371
 80032b8:	08003371 	.word	0x08003371
 80032bc:	08003371 	.word	0x08003371
 80032c0:	08003345 	.word	0x08003345
 80032c4:	08003371 	.word	0x08003371
 80032c8:	08003371 	.word	0x08003371
 80032cc:	08003371 	.word	0x08003371
 80032d0:	08003371 	.word	0x08003371
 80032d4:	08003371 	.word	0x08003371
 80032d8:	08003371 	.word	0x08003371
 80032dc:	08003371 	.word	0x08003371
 80032e0:	0800335b 	.word	0x0800335b
 80032e4:	08003371 	.word	0x08003371
 80032e8:	08003371 	.word	0x08003371
 80032ec:	08003371 	.word	0x08003371
 80032f0:	08003371 	.word	0x08003371
 80032f4:	08003371 	.word	0x08003371
 80032f8:	08003371 	.word	0x08003371
 80032fc:	08003371 	.word	0x08003371
 8003300:	08003379 	.word	0x08003379
 8003304:	08003371 	.word	0x08003371
 8003308:	08003371 	.word	0x08003371
 800330c:	08003371 	.word	0x08003371
 8003310:	08003371 	.word	0x08003371
 8003314:	08003371 	.word	0x08003371
 8003318:	08003371 	.word	0x08003371
 800331c:	08003371 	.word	0x08003371
 8003320:	08003379 	.word	0x08003379
 8003324:	08003371 	.word	0x08003371
 8003328:	08003371 	.word	0x08003371
 800332c:	08003371 	.word	0x08003371
 8003330:	08003371 	.word	0x08003371
 8003334:	08003371 	.word	0x08003371
 8003338:	08003371 	.word	0x08003371
 800333c:	08003371 	.word	0x08003371
 8003340:	08003379 	.word	0x08003379
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003348:	3308      	adds	r3, #8
 800334a:	2101      	movs	r1, #1
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fd05 	bl	8003d5c <RCCEx_PLL2_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003358:	e00f      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800335e:	3328      	adds	r3, #40	; 0x28
 8003360:	2101      	movs	r1, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fdac 	bl	8003ec0 <RCCEx_PLL3_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800336e:	e004      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003382:	4bbf      	ldr	r3, [pc, #764]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003390:	4abb      	ldr	r2, [pc, #748]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003392:	430b      	orrs	r3, r1
 8003394:	6553      	str	r3, [r2, #84]	; 0x54
 8003396:	e003      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800339c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f002 0302 	and.w	r3, r2, #2
 80033ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80033ba:	460b      	mov	r3, r1
 80033bc:	4313      	orrs	r3, r2
 80033be:	d041      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d824      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80033ca:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	080033e9 	.word	0x080033e9
 80033d8:	080033ff 	.word	0x080033ff
 80033dc:	0800341d 	.word	0x0800341d
 80033e0:	0800341d 	.word	0x0800341d
 80033e4:	0800341d 	.word	0x0800341d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ec:	3308      	adds	r3, #8
 80033ee:	2101      	movs	r1, #1
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fcb3 	bl	8003d5c <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033fc:	e00f      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003402:	3328      	adds	r3, #40	; 0x28
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fd5a 	bl	8003ec0 <RCCEx_PLL3_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003412:	e004      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800341c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003426:	4b96      	ldr	r3, [pc, #600]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	f023 0107 	bic.w	r1, r3, #7
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003434:	4a92      	ldr	r2, [pc, #584]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003436:	430b      	orrs	r3, r1
 8003438:	6553      	str	r3, [r2, #84]	; 0x54
 800343a:	e003      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f002 0304 	and.w	r3, r2, #4
 8003450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800345a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800345e:	460b      	mov	r3, r1
 8003460:	4313      	orrs	r3, r2
 8003462:	d044      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346c:	2b05      	cmp	r3, #5
 800346e:	d825      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003470:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	080034c5 	.word	0x080034c5
 800347c:	08003491 	.word	0x08003491
 8003480:	080034a7 	.word	0x080034a7
 8003484:	080034c5 	.word	0x080034c5
 8003488:	080034c5 	.word	0x080034c5
 800348c:	080034c5 	.word	0x080034c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003494:	3308      	adds	r3, #8
 8003496:	2101      	movs	r1, #1
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fc5f 	bl	8003d5c <RCCEx_PLL2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034a4:	e00f      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034aa:	3328      	adds	r3, #40	; 0x28
 80034ac:	2101      	movs	r1, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fd06 	bl	8003ec0 <RCCEx_PLL3_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034ba:	e004      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034c2:	e000      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80034c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ce:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	f023 0107 	bic.w	r1, r3, #7
 80034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034de:	4a68      	ldr	r2, [pc, #416]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6593      	str	r3, [r2, #88]	; 0x58
 80034e4:	e003      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f002 0320 	and.w	r3, r2, #32
 80034fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003508:	460b      	mov	r3, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	d055      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800351a:	d033      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003520:	d82c      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003526:	d02f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d826      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800352e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003532:	d02b      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003534:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003538:	d820      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800353a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800353e:	d012      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003544:	d81a      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d022      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800354a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800354e:	d115      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003554:	3308      	adds	r3, #8
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fbff 	bl	8003d5c <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003564:	e015      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356a:	3328      	adds	r3, #40	; 0x28
 800356c:	2102      	movs	r1, #2
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fca6 	bl	8003ec0 <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800357a:	e00a      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003582:	e006      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003584:	bf00      	nop
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800359a:	4b39      	ldr	r3, [pc, #228]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	4a35      	ldr	r2, [pc, #212]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6553      	str	r3, [r2, #84]	; 0x54
 80035b0:	e003      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80035c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80035d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4313      	orrs	r3, r2
 80035d8:	d058      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035e6:	d033      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80035e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035ec:	d82c      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	d02f      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f8:	d826      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035fe:	d02b      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003604:	d820      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360a:	d012      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003610:	d81a      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d022      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d115      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003620:	3308      	adds	r3, #8
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fb99 	bl	8003d5c <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003630:	e015      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003636:	3328      	adds	r3, #40	; 0x28
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fc40 	bl	8003ec0 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003646:	e00a      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800364e:	e006      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10e      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003676:	4a02      	ldr	r2, [pc, #8]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6593      	str	r3, [r2, #88]	; 0x58
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800367e:	bf00      	nop
 8003680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d055      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80036b8:	d033      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80036ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80036be:	d82c      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c4:	d02f      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80036c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ca:	d826      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036d0:	d02b      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80036d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036d6:	d820      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036dc:	d012      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80036de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036e2:	d81a      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d022      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80036e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ec:	d115      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f2:	3308      	adds	r3, #8
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fb30 	bl	8003d5c <RCCEx_PLL2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003702:	e015      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003708:	3328      	adds	r3, #40	; 0x28
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fbd7 	bl	8003ec0 <RCCEx_PLL3_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003718:	e00a      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003722:	bf00      	nop
 8003724:	e004      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800372e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003738:	4ba1      	ldr	r3, [pc, #644]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003748:	4a9d      	ldr	r2, [pc, #628]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800374a:	430b      	orrs	r3, r1
 800374c:	6593      	str	r3, [r2, #88]	; 0x58
 800374e:	e003      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f002 0308 	and.w	r3, r2, #8
 8003764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800376e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003772:	460b      	mov	r3, r1
 8003774:	4313      	orrs	r3, r2
 8003776:	d01e      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378a:	3328      	adds	r3, #40	; 0x28
 800378c:	2102      	movs	r1, #2
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fb96 	bl	8003ec0 <RCCEx_PLL3_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80037a0:	4b87      	ldr	r3, [pc, #540]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b0:	4a83      	ldr	r2, [pc, #524]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037b2:	430b      	orrs	r3, r1
 80037b4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f002 0310 	and.w	r3, r2, #16
 80037c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80037d0:	460b      	mov	r3, r1
 80037d2:	4313      	orrs	r3, r2
 80037d4:	d01e      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e2:	d10c      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e8:	3328      	adds	r3, #40	; 0x28
 80037ea:	2102      	movs	r1, #2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fb67 	bl	8003ec0 <RCCEx_PLL3_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037fe:	4b70      	ldr	r3, [pc, #448]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800380e:	4a6c      	ldr	r2, [pc, #432]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003810:	430b      	orrs	r3, r1
 8003812:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800382a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	d03e      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003838:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800383c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003840:	d022      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003846:	d81b      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d00b      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003852:	e015      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003858:	3308      	adds	r3, #8
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fa7d 	bl	8003d5c <RCCEx_PLL2_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003868:	e00f      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800386e:	3328      	adds	r3, #40	; 0x28
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fb24 	bl	8003ec0 <RCCEx_PLL3_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800387e:	e004      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10b      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003892:	4b4b      	ldr	r3, [pc, #300]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038a2:	4a47      	ldr	r2, [pc, #284]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6593      	str	r3, [r2, #88]	; 0x58
 80038a8:	e003      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80038be:	67bb      	str	r3, [r7, #120]	; 0x78
 80038c0:	2300      	movs	r3, #0
 80038c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80038c8:	460b      	mov	r3, r1
 80038ca:	4313      	orrs	r3, r2
 80038cc:	d03b      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038da:	d01f      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80038dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038e0:	d818      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80038e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e6:	d003      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80038e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ec:	d007      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80038ee:	e011      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f0:	4b33      	ldr	r3, [pc, #204]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	4a32      	ldr	r2, [pc, #200]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80038fc:	e00f      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003902:	3328      	adds	r3, #40	; 0x28
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fada 	bl	8003ec0 <RCCEx_PLL3_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003912:	e004      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800391c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003926:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6553      	str	r3, [r2, #84]	; 0x54
 800393c:	e003      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003942:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003952:	673b      	str	r3, [r7, #112]	; 0x70
 8003954:	2300      	movs	r3, #0
 8003956:	677b      	str	r3, [r7, #116]	; 0x74
 8003958:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800395c:	460b      	mov	r3, r1
 800395e:	4313      	orrs	r3, r2
 8003960:	d034      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003970:	d007      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003972:	e011      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800397a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003980:	e00e      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003986:	3308      	adds	r3, #8
 8003988:	2102      	movs	r1, #2
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f9e6 	bl	8003d5c <RCCEx_PLL2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003996:	e003      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800399e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	4a02      	ldr	r2, [pc, #8]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039bc:	e006      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80039be:	bf00      	nop
 80039c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80039d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039da:	2300      	movs	r3, #0
 80039dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80039e2:	460b      	mov	r3, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	d00c      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ec:	3328      	adds	r3, #40	; 0x28
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fa65 	bl	8003ec0 <RCCEx_PLL3_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a10:	2300      	movs	r3, #0
 8003a12:	667b      	str	r3, [r7, #100]	; 0x64
 8003a14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	d038      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2a:	d018      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a30:	d811      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a36:	d014      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3c:	d80b      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d011      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a46:	d106      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a48:	4bc3      	ldr	r3, [pc, #780]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4ac2      	ldr	r2, [pc, #776]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a54:	e008      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a70:	4bb9      	ldr	r3, [pc, #740]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a80:	4ab5      	ldr	r2, [pc, #724]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a82:	430b      	orrs	r3, r1
 8003a84:	6553      	str	r3, [r2, #84]	; 0x54
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003a9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003aac:	4baa      	ldr	r3, [pc, #680]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aba:	4aa7      	ldr	r2, [pc, #668]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003acc:	653b      	str	r3, [r7, #80]	; 0x50
 8003ace:	2300      	movs	r3, #0
 8003ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ad2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003adc:	4b9e      	ldr	r3, [pc, #632]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003aec:	4a9a      	ldr	r2, [pc, #616]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aee:	430b      	orrs	r3, r1
 8003af0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b00:	2300      	movs	r3, #0
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b0e:	4b92      	ldr	r3, [pc, #584]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b12:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1c:	4a8e      	ldr	r2, [pc, #568]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b30:	2300      	movs	r3, #0
 8003b32:	647b      	str	r3, [r7, #68]	; 0x44
 8003b34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b3e:	4b86      	ldr	r3, [pc, #536]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	4a85      	ldr	r2, [pc, #532]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b48:	6113      	str	r3, [r2, #16]
 8003b4a:	4b83      	ldr	r3, [pc, #524]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b4c:	6919      	ldr	r1, [r3, #16]
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b56:	4a80      	ldr	r2, [pc, #512]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b78:	4b77      	ldr	r3, [pc, #476]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	4a74      	ldr	r2, [pc, #464]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ba8:	4b6b      	ldr	r3, [pc, #428]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb8:	4a67      	ldr	r2, [pc, #412]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	d011      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bde:	3308      	adds	r3, #8
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f8ba 	bl	8003d5c <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	2100      	movs	r1, #0
 8003c08:	6239      	str	r1, [r7, #32]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c14:	460b      	mov	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	d011      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	3308      	adds	r3, #8
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 f89a 	bl	8003d5c <RCCEx_PLL2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	2100      	movs	r1, #0
 8003c48:	61b9      	str	r1, [r7, #24]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d011      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5e:	3308      	adds	r3, #8
 8003c60:	2102      	movs	r1, #2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f87a 	bl	8003d5c <RCCEx_PLL2_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	2100      	movs	r1, #0
 8003c88:	6139      	str	r1, [r7, #16]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d011      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9e:	3328      	adds	r3, #40	; 0x28
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f90c 	bl	8003ec0 <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	d011      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cde:	3328      	adds	r3, #40	; 0x28
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f8ec 	bl	8003ec0 <RCCEx_PLL3_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	2100      	movs	r1, #0
 8003d08:	6039      	str	r1, [r7, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d14:	460b      	mov	r3, r1
 8003d16:	4313      	orrs	r3, r2
 8003d18:	d011      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1e:	3328      	adds	r3, #40	; 0x28
 8003d20:	2102      	movs	r1, #2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f8cc 	bl	8003ec0 <RCCEx_PLL3_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003d3e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003d52:	46bd      	mov	sp, r7
 8003d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d58:	58024400 	.word	0x58024400

08003d5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d6a:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d101      	bne.n	8003d7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e099      	b.n	8003eae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d7a:	4b4f      	ldr	r3, [pc, #316]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a4e      	ldr	r2, [pc, #312]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d86:	f7fc ff97 	bl	8000cb8 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d8e:	f7fc ff93 	bl	8000cb8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e086      	b.n	8003eae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003da0:	4b45      	ldr	r3, [pc, #276]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003dac:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	493f      	ldr	r1, [pc, #252]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	628b      	str	r3, [r1, #40]	; 0x28
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	025b      	lsls	r3, r3, #9
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003df0:	4931      	ldr	r1, [pc, #196]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003df6:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	492d      	ldr	r1, [pc, #180]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e08:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f023 0220 	bic.w	r2, r3, #32
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	4928      	ldr	r1, [pc, #160]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e1a:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	f023 0310 	bic.w	r3, r3, #16
 8003e24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <RCCEx_PLL2_Config+0x160>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	69d2      	ldr	r2, [r2, #28]
 8003e32:	00d2      	lsls	r2, r2, #3
 8003e34:	4920      	ldr	r1, [pc, #128]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e3a:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e40:	f043 0310 	orr.w	r3, r3, #16
 8003e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e58:	e00f      	b.n	8003e7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d106      	bne.n	8003e6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e60:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e6c:	e005      	b.n	8003e7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	4a11      	ldr	r2, [pc, #68]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e86:	f7fc ff17 	bl	8000cb8 <HAL_GetTick>
 8003e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e8c:	e008      	b.n	8003ea0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e8e:	f7fc ff13 	bl	8000cb8 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e006      	b.n	8003eae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <RCCEx_PLL2_Config+0x15c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	58024400 	.word	0x58024400
 8003ebc:	ffff0007 	.word	0xffff0007

08003ec0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ece:	4b53      	ldr	r3, [pc, #332]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d101      	bne.n	8003ede <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e099      	b.n	8004012 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ede:	4b4f      	ldr	r3, [pc, #316]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a4e      	ldr	r2, [pc, #312]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eea:	f7fc fee5 	bl	8000cb8 <HAL_GetTick>
 8003eee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ef0:	e008      	b.n	8003f04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ef2:	f7fc fee1 	bl	8000cb8 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e086      	b.n	8004012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f04:	4b45      	ldr	r3, [pc, #276]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f0      	bne.n	8003ef2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f10:	4b42      	ldr	r3, [pc, #264]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	051b      	lsls	r3, r3, #20
 8003f1e:	493f      	ldr	r1, [pc, #252]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	628b      	str	r3, [r1, #40]	; 0x28
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	025b      	lsls	r3, r3, #9
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	061b      	lsls	r3, r3, #24
 8003f50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f54:	4931      	ldr	r1, [pc, #196]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	492d      	ldr	r1, [pc, #180]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	4928      	ldr	r1, [pc, #160]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	4a26      	ldr	r2, [pc, #152]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <RCCEx_PLL3_Config+0x160>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	69d2      	ldr	r2, [r2, #28]
 8003f96:	00d2      	lsls	r2, r2, #3
 8003f98:	4920      	ldr	r1, [pc, #128]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f9e:	4b1f      	ldr	r3, [pc, #124]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	4a1e      	ldr	r2, [pc, #120]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fbc:	e00f      	b.n	8003fde <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d106      	bne.n	8003fd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	4a14      	ldr	r2, [pc, #80]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fd0:	e005      	b.n	8003fde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	4a11      	ldr	r2, [pc, #68]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a0e      	ldr	r2, [pc, #56]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fea:	f7fc fe65 	bl	8000cb8 <HAL_GetTick>
 8003fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ff0:	e008      	b.n	8004004 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ff2:	f7fc fe61 	bl	8000cb8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e006      	b.n	8004012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <RCCEx_PLL3_Config+0x15c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004010:	7bfb      	ldrb	r3, [r7, #15]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	58024400 	.word	0x58024400
 8004020:	ffff0007 	.word	0xffff0007

08004024 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e10f      	b.n	8004256 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a87      	ldr	r2, [pc, #540]	; (8004260 <HAL_SPI_Init+0x23c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00f      	beq.n	8004066 <HAL_SPI_Init+0x42>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a86      	ldr	r2, [pc, #536]	; (8004264 <HAL_SPI_Init+0x240>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00a      	beq.n	8004066 <HAL_SPI_Init+0x42>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a84      	ldr	r2, [pc, #528]	; (8004268 <HAL_SPI_Init+0x244>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d005      	beq.n	8004066 <HAL_SPI_Init+0x42>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b0f      	cmp	r3, #15
 8004060:	d901      	bls.n	8004066 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0f7      	b.n	8004256 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fbba 	bl	80047e0 <SPI_GetPacketSize>
 800406c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a7b      	ldr	r2, [pc, #492]	; (8004260 <HAL_SPI_Init+0x23c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00c      	beq.n	8004092 <HAL_SPI_Init+0x6e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a79      	ldr	r2, [pc, #484]	; (8004264 <HAL_SPI_Init+0x240>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_SPI_Init+0x6e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a78      	ldr	r2, [pc, #480]	; (8004268 <HAL_SPI_Init+0x244>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d002      	beq.n	8004092 <HAL_SPI_Init+0x6e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b08      	cmp	r3, #8
 8004090:	d811      	bhi.n	80040b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004096:	4a72      	ldr	r2, [pc, #456]	; (8004260 <HAL_SPI_Init+0x23c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a70      	ldr	r2, [pc, #448]	; (8004264 <HAL_SPI_Init+0x240>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_SPI_Init+0x8c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6f      	ldr	r2, [pc, #444]	; (8004268 <HAL_SPI_Init+0x244>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d104      	bne.n	80040ba <HAL_SPI_Init+0x96>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d901      	bls.n	80040ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0cd      	b.n	8004256 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc fb90 	bl	80007f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80040f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004100:	d119      	bne.n	8004136 <HAL_SPI_Init+0x112>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410a:	d103      	bne.n	8004114 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10c      	bne.n	8004136 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004124:	d107      	bne.n	8004136 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004134:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00f      	beq.n	8004162 <HAL_SPI_Init+0x13e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b06      	cmp	r3, #6
 8004148:	d90b      	bls.n	8004162 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e007      	b.n	8004172 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	431a      	orrs	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	ea42 0103 	orr.w	r1, r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	ea42 0103 	orr.w	r1, r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d113      	bne.n	8004212 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004210:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40013000 	.word	0x40013000
 8004264:	40003800 	.word	0x40003800
 8004268:	40003c00 	.word	0x40003c00

0800426c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8004294:	2300      	movs	r3, #0
 8004296:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800429e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3330      	adds	r3, #48	; 0x30
 80042a6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d010      	beq.n	80042d4 <HAL_SPI_IRQHandler+0x68>
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00b      	beq.n	80042d4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ca:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f9c3 	bl	8004658 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80042d2:	e192      	b.n	80045fa <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d113      	bne.n	8004306 <HAL_SPI_IRQHandler+0x9a>
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10e      	bne.n	8004306 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
    handled = 1UL;
 8004302:	2301      	movs	r3, #1
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10f      	bne.n	8004330 <HAL_SPI_IRQHandler+0xc4>
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
    handled = 1UL;
 800432c:	2301      	movs	r3, #1
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <HAL_SPI_IRQHandler+0xee>
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
    handled = 1UL;
 8004356:	2301      	movs	r3, #1
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	2b00      	cmp	r3, #0
 800435e:	f040 8147 	bne.w	80045f0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 808b 	beq.w	8004484 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0208 	orr.w	r2, r2, #8
 800437c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0210 	orr.w	r2, r2, #16
 800438c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800439c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0208 	bic.w	r2, r2, #8
 80043ac:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d13d      	bne.n	8004438 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80043bc:	e036      	b.n	800442c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d90b      	bls.n	80043de <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043d0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d6:	1d1a      	adds	r2, r3, #4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	665a      	str	r2, [r3, #100]	; 0x64
 80043dc:	e01d      	b.n	800441a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2b07      	cmp	r3, #7
 80043e4:	d90b      	bls.n	80043fe <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	8812      	ldrh	r2, [r2, #0]
 80043ee:	b292      	uxth	r2, r2
 80043f0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	665a      	str	r2, [r3, #100]	; 0x64
 80043fc:	e00d      	b.n	800441a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440a:	7812      	ldrb	r2, [r2, #0]
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1c2      	bne.n	80043be <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f931 	bl	80046a0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f8f7 	bl	8004644 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004456:	e0d0      	b.n	80045fa <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d103      	bne.n	8004466 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f8e6 	bl	8004630 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8004464:	e0c6      	b.n	80045f4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	2b04      	cmp	r3, #4
 800446a:	d103      	bne.n	8004474 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8d5 	bl	800461c <HAL_SPI_RxCpltCallback>
    return;
 8004472:	e0bf      	b.n	80045f4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b03      	cmp	r3, #3
 8004478:	f040 80bc 	bne.w	80045f4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8c3 	bl	8004608 <HAL_SPI_TxCpltCallback>
    return;
 8004482:	e0b7      	b.n	80045f4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80b5 	beq.w	80045fa <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00f      	beq.n	80044ba <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a0:	f043 0204 	orr.w	r2, r3, #4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044b8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00f      	beq.n	80044e4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ca:	f043 0201 	orr.w	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00f      	beq.n	800450e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f4:	f043 0208 	orr.w	r2, r3, #8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699a      	ldr	r2, [r3, #24]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800450c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00f      	beq.n	8004538 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800451e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0220 	orr.w	r2, r2, #32
 8004536:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453e:	2b00      	cmp	r3, #0
 8004540:	d05a      	beq.n	80045f8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6919      	ldr	r1, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b28      	ldr	r3, [pc, #160]	; (8004600 <HAL_SPI_IRQHandler+0x394>)
 800455e:	400b      	ands	r3, r1
 8004560:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004568:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800456c:	d138      	bne.n	80045e0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800457c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d013      	beq.n	80045ae <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <HAL_SPI_IRQHandler+0x398>)
 800458c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004592:	4618      	mov	r0, r3
 8004594:	f7fc fcb8 	bl	8000f08 <HAL_DMA_Abort_IT>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d020      	beq.n	80045f8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ba:	4a12      	ldr	r2, [pc, #72]	; (8004604 <HAL_SPI_IRQHandler+0x398>)
 80045bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fc fca0 	bl	8000f08 <HAL_DMA_Abort_IT>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d014      	beq.n	80045f8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045de:	e00b      	b.n	80045f8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f82b 	bl	8004644 <HAL_SPI_ErrorCallback>
    return;
 80045ee:	e003      	b.n	80045f8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80045f0:	bf00      	nop
 80045f2:	e002      	b.n	80045fa <HAL_SPI_IRQHandler+0x38e>
    return;
 80045f4:	bf00      	nop
 80045f6:	e000      	b.n	80045fa <HAL_SPI_IRQHandler+0x38e>
    return;
 80045f8:	bf00      	nop
  }
}
 80045fa:	3728      	adds	r7, #40	; 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	fffffc94 	.word	0xfffffc94
 8004604:	0800466d 	.word	0x0800466d

08004608 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ffd6 	bl	8004644 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0210 	orr.w	r2, r2, #16
 80046ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b3c      	ldr	r3, [pc, #240]	; (80047dc <SPI_CloseTransfer+0x13c>)
 80046ec:	400b      	ands	r3, r1
 80046ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80046fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b04      	cmp	r3, #4
 800470a:	d014      	beq.n	8004736 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00f      	beq.n	8004736 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0220 	orr.w	r2, r2, #32
 8004734:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b03      	cmp	r3, #3
 8004740:	d014      	beq.n	800476c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00f      	beq.n	800476c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004752:	f043 0204 	orr.w	r2, r3, #4
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00f      	beq.n	8004796 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477c:	f043 0201 	orr.w	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004794:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00f      	beq.n	80047c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a6:	f043 0208 	orr.w	r2, r3, #8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	fffffc90 	.word	0xfffffc90

080047e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	3301      	adds	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	3307      	adds	r3, #7
 80047fe:	08db      	lsrs	r3, r3, #3
 8004800:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	fb02 f303 	mul.w	r3, r2, r3
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <__libc_init_array>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4d0d      	ldr	r5, [pc, #52]	; (8004850 <__libc_init_array+0x38>)
 800481c:	4c0d      	ldr	r4, [pc, #52]	; (8004854 <__libc_init_array+0x3c>)
 800481e:	1b64      	subs	r4, r4, r5
 8004820:	10a4      	asrs	r4, r4, #2
 8004822:	2600      	movs	r6, #0
 8004824:	42a6      	cmp	r6, r4
 8004826:	d109      	bne.n	800483c <__libc_init_array+0x24>
 8004828:	4d0b      	ldr	r5, [pc, #44]	; (8004858 <__libc_init_array+0x40>)
 800482a:	4c0c      	ldr	r4, [pc, #48]	; (800485c <__libc_init_array+0x44>)
 800482c:	f000 f820 	bl	8004870 <_init>
 8004830:	1b64      	subs	r4, r4, r5
 8004832:	10a4      	asrs	r4, r4, #2
 8004834:	2600      	movs	r6, #0
 8004836:	42a6      	cmp	r6, r4
 8004838:	d105      	bne.n	8004846 <__libc_init_array+0x2e>
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004840:	4798      	blx	r3
 8004842:	3601      	adds	r6, #1
 8004844:	e7ee      	b.n	8004824 <__libc_init_array+0xc>
 8004846:	f855 3b04 	ldr.w	r3, [r5], #4
 800484a:	4798      	blx	r3
 800484c:	3601      	adds	r6, #1
 800484e:	e7f2      	b.n	8004836 <__libc_init_array+0x1e>
 8004850:	08004898 	.word	0x08004898
 8004854:	08004898 	.word	0x08004898
 8004858:	08004898 	.word	0x08004898
 800485c:	0800489c 	.word	0x0800489c

08004860 <memset>:
 8004860:	4402      	add	r2, r0
 8004862:	4603      	mov	r3, r0
 8004864:	4293      	cmp	r3, r2
 8004866:	d100      	bne.n	800486a <memset+0xa>
 8004868:	4770      	bx	lr
 800486a:	f803 1b01 	strb.w	r1, [r3], #1
 800486e:	e7f9      	b.n	8004864 <memset+0x4>

08004870 <_init>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	bf00      	nop
 8004874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004876:	bc08      	pop	{r3}
 8004878:	469e      	mov	lr, r3
 800487a:	4770      	bx	lr

0800487c <_fini>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	bf00      	nop
 8004880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004882:	bc08      	pop	{r3}
 8004884:	469e      	mov	lr, r3
 8004886:	4770      	bx	lr
