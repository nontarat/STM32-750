
led_h723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca0  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005f6c  08005f6c  00006f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005f84  08005f84  00006f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08005f88  08005f88  00006f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08005f8c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002ec  24000010  08005f9c  00007010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240002fc  08005f9c  000072fc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d56b  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c29  00000000  00000000  000145a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000c98  00000000  00000000  000161d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000009bf  00000000  00000000  00016e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000316b0  00000000  00000000  0001782f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000fdf4  00000000  00000000  00048edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001439d8  00000000  00000000  00058cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0019c6ab  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000034e4  00000000  00000000  0019c6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000040  00000000  00000000  0019fbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005f54 	.word	0x08005f54

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08005f54 	.word	0x08005f54

0800030c <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_3);
 8000314:	2108      	movs	r1, #8
 8000316:	4805      	ldr	r0, [pc, #20]	@ (800032c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000318:	f004 fd1e 	bl	8004d58 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 800031c:	4b04      	ldr	r3, [pc, #16]	@ (8000330 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800031e:	2201      	movs	r2, #1
 8000320:	601a      	str	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2400002c 	.word	0x2400002c
 8000330:	24000110 	.word	0x24000110

08000334 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	b2d9      	uxtb	r1, r3
 8000346:	4a11      	ldr	r2, [pc, #68]	@ (800038c <Set_LED+0x58>)
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	b2d9      	uxtb	r1, r3
 8000352:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <Set_LED+0x58>)
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	460a      	mov	r2, r1
 800035c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	b2d9      	uxtb	r1, r3
 8000362:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <Set_LED+0x58>)
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4413      	add	r3, r2
 800036a:	460a      	mov	r2, r1
 800036c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	b2d9      	uxtb	r1, r3
 8000372:	4a06      	ldr	r2, [pc, #24]	@ (800038c <Set_LED+0x58>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	460a      	mov	r2, r1
 800037c:	70da      	strb	r2, [r3, #3]
}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	240000f0 	.word	0x240000f0

08000390 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	e036      	b.n	8000422 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80003b4:	4a2e      	ldr	r2, [pc, #184]	@ (8000470 <WS2812_Send+0xcc>)
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	4413      	add	r3, r2
 80003bc:	785b      	ldrb	r3, [r3, #1]
 80003be:	041a      	lsls	r2, r3, #16
 80003c0:	492b      	ldr	r1, [pc, #172]	@ (8000470 <WS2812_Send+0xcc>)
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	789b      	ldrb	r3, [r3, #2]
 80003ca:	021b      	lsls	r3, r3, #8
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4928      	ldr	r1, [pc, #160]	@ (8000470 <WS2812_Send+0xcc>)
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	440b      	add	r3, r1
 80003d6:	78db      	ldrb	r3, [r3, #3]
 80003d8:	4313      	orrs	r3, r2
 80003da:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 80003dc:	2317      	movs	r3, #23
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	e019      	b.n	8000416 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80003e2:	2201      	movs	r2, #1
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4013      	ands	r3, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d005      	beq.n	8000400 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80003f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000474 <WS2812_Send+0xd0>)
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	213c      	movs	r1, #60	@ 0x3c
 80003fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003fe:	e004      	b.n	800040a <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8000400:	4a1c      	ldr	r2, [pc, #112]	@ (8000474 <WS2812_Send+0xd0>)
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	211e      	movs	r1, #30
 8000406:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	3301      	adds	r3, #1
 800040e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3b01      	subs	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	2b00      	cmp	r3, #0
 800041a:	dae2      	bge.n	80003e2 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	3301      	adds	r3, #1
 8000420:	613b      	str	r3, [r7, #16]
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	2b07      	cmp	r3, #7
 8000426:	ddc5      	ble.n	80003b4 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000428:	2300      	movs	r3, #0
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	e00a      	b.n	8000444 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800042e:	4a11      	ldr	r2, [pc, #68]	@ (8000474 <WS2812_Send+0xd0>)
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	2100      	movs	r1, #0
 8000434:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	3301      	adds	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	3301      	adds	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	2b31      	cmp	r3, #49	@ 0x31
 8000448:	ddf1      	ble.n	800042e <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	b29b      	uxth	r3, r3
 800044e:	4a09      	ldr	r2, [pc, #36]	@ (8000474 <WS2812_Send+0xd0>)
 8000450:	2108      	movs	r1, #8
 8000452:	4809      	ldr	r0, [pc, #36]	@ (8000478 <WS2812_Send+0xd4>)
 8000454:	f004 fa4c 	bl	80048f0 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000458:	bf00      	nop
 800045a:	4b08      	ldr	r3, [pc, #32]	@ (800047c <WS2812_Send+0xd8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0fb      	beq.n	800045a <WS2812_Send+0xb6>
	datasentflag = 0;
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <WS2812_Send+0xd8>)
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
}
 8000468:	bf00      	nop
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	240000f0 	.word	0x240000f0
 8000474:	24000114 	.word	0x24000114
 8000478:	2400002c 	.word	0x2400002c
 800047c:	24000110 	.word	0x24000110

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000486:	f000 fb95 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048a:	f000 f85b 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f95f 	bl	8000750 <MX_GPIO_Init>
  MX_DMA_Init();
 8000492:	f000 f93d 	bl	8000710 <MX_DMA_Init>
  MX_TIM4_Init();
 8000496:	f000 f8c5 	bl	8000624 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Set_LED(0, 255, 0, 0);
 800049a:	2300      	movs	r3, #0
 800049c:	2200      	movs	r2, #0
 800049e:	21ff      	movs	r1, #255	@ 0xff
 80004a0:	2000      	movs	r0, #0
 80004a2:	f7ff ff47 	bl	8000334 <Set_LED>
  Set_LED(1, 0, 255, 0);
 80004a6:	2300      	movs	r3, #0
 80004a8:	22ff      	movs	r2, #255	@ 0xff
 80004aa:	2100      	movs	r1, #0
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff ff41 	bl	8000334 <Set_LED>
  Set_LED(2, 0, 0, 255);
 80004b2:	23ff      	movs	r3, #255	@ 0xff
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	2002      	movs	r0, #2
 80004ba:	f7ff ff3b 	bl	8000334 <Set_LED>
  Set_LED(3, 46, 89, 128);
 80004be:	2380      	movs	r3, #128	@ 0x80
 80004c0:	2259      	movs	r2, #89	@ 0x59
 80004c2:	212e      	movs	r1, #46	@ 0x2e
 80004c4:	2003      	movs	r0, #3
 80004c6:	f7ff ff35 	bl	8000334 <Set_LED>
  Set_LED(4, 156, 233, 100);
 80004ca:	2364      	movs	r3, #100	@ 0x64
 80004cc:	22e9      	movs	r2, #233	@ 0xe9
 80004ce:	219c      	movs	r1, #156	@ 0x9c
 80004d0:	2004      	movs	r0, #4
 80004d2:	f7ff ff2f 	bl	8000334 <Set_LED>
  Set_LED(5, 102, 0, 235);
 80004d6:	23eb      	movs	r3, #235	@ 0xeb
 80004d8:	2200      	movs	r2, #0
 80004da:	2166      	movs	r1, #102	@ 0x66
 80004dc:	2005      	movs	r0, #5
 80004de:	f7ff ff29 	bl	8000334 <Set_LED>
  Set_LED(6, 47, 38, 77);
 80004e2:	234d      	movs	r3, #77	@ 0x4d
 80004e4:	2226      	movs	r2, #38	@ 0x26
 80004e6:	212f      	movs	r1, #47	@ 0x2f
 80004e8:	2006      	movs	r0, #6
 80004ea:	f7ff ff23 	bl	8000334 <Set_LED>
  Set_LED(7, 255, 0, 0);
 80004ee:	2300      	movs	r3, #0
 80004f0:	2200      	movs	r2, #0
 80004f2:	21ff      	movs	r1, #255	@ 0xff
 80004f4:	2007      	movs	r0, #7
 80004f6:	f7ff ff1d 	bl	8000334 <Set_LED>
  //Set_Brightness(10);
  WS2812_Send();
 80004fa:	f7ff ff53 	bl	80003a4 <WS2812_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  for (int i=0; i<46; i++)
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	e00a      	b.n	800051a <main+0x9a>
	  	  {
	  		  Set_Brightness(i);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ff43 	bl	8000390 <Set_Brightness>
	  		  WS2812_Send();
 800050a:	f7ff ff4b 	bl	80003a4 <WS2812_Send>
	  		  HAL_Delay (50);
 800050e:	2032      	movs	r0, #50	@ 0x32
 8000510:	f000 fbe2 	bl	8000cd8 <HAL_Delay>
	  	  for (int i=0; i<46; i++)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3301      	adds	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b2d      	cmp	r3, #45	@ 0x2d
 800051e:	ddf1      	ble.n	8000504 <main+0x84>
	  	  }

	  	  for (int i=45; i>=0; i--)
 8000520:	232d      	movs	r3, #45	@ 0x2d
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	e00a      	b.n	800053c <main+0xbc>
	  	  {
	  		  Set_Brightness(i);
 8000526:	6838      	ldr	r0, [r7, #0]
 8000528:	f7ff ff32 	bl	8000390 <Set_Brightness>
	  		  WS2812_Send();
 800052c:	f7ff ff3a 	bl	80003a4 <WS2812_Send>
	  		  HAL_Delay (50);
 8000530:	2032      	movs	r0, #50	@ 0x32
 8000532:	f000 fbd1 	bl	8000cd8 <HAL_Delay>
	  	  for (int i=45; i>=0; i--)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	3b01      	subs	r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	daf1      	bge.n	8000526 <main+0xa6>
	  	  for (int i=0; i<46; i++)
 8000542:	e7dc      	b.n	80004fe <main+0x7e>

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b09c      	sub	sp, #112	@ 0x70
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054e:	224c      	movs	r2, #76	@ 0x4c
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 fcd2 	bl	8005efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2220      	movs	r2, #32
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f005 fccc 	bl	8005efc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000564:	2002      	movs	r0, #2
 8000566:	f003 f9c7 	bl	80038f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800056a:	2300      	movs	r3, #0
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	4b2c      	ldr	r3, [pc, #176]	@ (8000620 <SystemClock_Config+0xdc>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000576:	4a2a      	ldr	r2, [pc, #168]	@ (8000620 <SystemClock_Config+0xdc>)
 8000578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b28      	ldr	r3, [pc, #160]	@ (8000620 <SystemClock_Config+0xdc>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800058a:	bf00      	nop
 800058c:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <SystemClock_Config+0xdc>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000598:	d1f8      	bne.n	800058c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800059e:	2301      	movs	r3, #1
 80005a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80005a2:	2340      	movs	r3, #64	@ 0x40
 80005a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005aa:	2300      	movs	r3, #0
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 15;
 80005b2:	230f      	movs	r3, #15
 80005b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 3;
 80005b6:	2303      	movs	r3, #3
 80005b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005c2:	230c      	movs	r3, #12
 80005c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f9ca 	bl	800396c <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005de:	f000 f95d 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	233f      	movs	r3, #63	@ 0x3f
 80005e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2303      	movs	r3, #3
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005f2:	2340      	movs	r3, #64	@ 0x40
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005f6:	2340      	movs	r3, #64	@ 0x40
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000600:	2340      	movs	r3, #64	@ 0x40
 8000602:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f003 fd89 	bl	8004120 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000614:	f000 f942 	bl	800089c <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3770      	adds	r7, #112	@ 0x70
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	58024800 	.word	0x58024800

08000624 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	@ 0x38
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000656:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <MX_TIM4_Init+0xe4>)
 8000658:	4a2c      	ldr	r2, [pc, #176]	@ (800070c <MX_TIM4_Init+0xe8>)
 800065a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800065c:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <MX_TIM4_Init+0xe4>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <MX_TIM4_Init+0xe4>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <MX_TIM4_Init+0xe4>)
 800066a:	2263      	movs	r2, #99	@ 0x63
 800066c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <MX_TIM4_Init+0xe4>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000674:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <MX_TIM4_Init+0xe4>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800067a:	4823      	ldr	r0, [pc, #140]	@ (8000708 <MX_TIM4_Init+0xe4>)
 800067c:	f004 f880 	bl	8004780 <HAL_TIM_Base_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000686:	f000 f909 	bl	800089c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000690:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000694:	4619      	mov	r1, r3
 8000696:	481c      	ldr	r0, [pc, #112]	@ (8000708 <MX_TIM4_Init+0xe4>)
 8000698:	f004 fd6a 	bl	8005170 <HAL_TIM_ConfigClockSource>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80006a2:	f000 f8fb 	bl	800089c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006a6:	4818      	ldr	r0, [pc, #96]	@ (8000708 <MX_TIM4_Init+0xe4>)
 80006a8:	f004 f8c1 	bl	800482e <HAL_TIM_PWM_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80006b2:	f000 f8f3 	bl	800089c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	4810      	ldr	r0, [pc, #64]	@ (8000708 <MX_TIM4_Init+0xe4>)
 80006c6:	f005 fb7d 	bl	8005dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80006d0:	f000 f8e4 	bl	800089c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d4:	2360      	movs	r3, #96	@ 0x60
 80006d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2208      	movs	r2, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	4807      	ldr	r0, [pc, #28]	@ (8000708 <MX_TIM4_Init+0xe4>)
 80006ec:	f004 fc2c 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80006f6:	f000 f8d1 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006fa:	4803      	ldr	r0, [pc, #12]	@ (8000708 <MX_TIM4_Init+0xe4>)
 80006fc:	f000 f942 	bl	8000984 <HAL_TIM_MspPostInit>

}
 8000700:	bf00      	nop
 8000702:	3738      	adds	r7, #56	@ 0x38
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2400002c 	.word	0x2400002c
 800070c:	40000800 	.word	0x40000800

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_DMA_Init+0x3c>)
 8000718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800071c:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <MX_DMA_Init+0x3c>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_DMA_Init+0x3c>)
 8000728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	200c      	movs	r0, #12
 800073a:	f000 fbcc 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800073e:	200c      	movs	r0, #12
 8000740:	f000 fbe3 	bl	8000f0a <HAL_NVIC_EnableIRQ>

}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	58024400 	.word	0x58024400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	@ 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b49      	ldr	r3, [pc, #292]	@ (800088c <MX_GPIO_Init+0x13c>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076c:	4a47      	ldr	r2, [pc, #284]	@ (800088c <MX_GPIO_Init+0x13c>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000776:	4b45      	ldr	r3, [pc, #276]	@ (800088c <MX_GPIO_Init+0x13c>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000784:	4b41      	ldr	r3, [pc, #260]	@ (800088c <MX_GPIO_Init+0x13c>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078a:	4a40      	ldr	r2, [pc, #256]	@ (800088c <MX_GPIO_Init+0x13c>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000794:	4b3d      	ldr	r3, [pc, #244]	@ (800088c <MX_GPIO_Init+0x13c>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b3a      	ldr	r3, [pc, #232]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a8:	4a38      	ldr	r2, [pc, #224]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b2:	4b36      	ldr	r3, [pc, #216]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c0:	4b32      	ldr	r3, [pc, #200]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c6:	4a31      	ldr	r2, [pc, #196]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d0:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e4:	4a29      	ldr	r2, [pc, #164]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ee:	4b27      	ldr	r3, [pc, #156]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fc:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_GPIO_Init+0x13c>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000802:	4a22      	ldr	r2, [pc, #136]	@ (800088c <MX_GPIO_Init+0x13c>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_GPIO_Init+0x13c>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <MX_GPIO_Init+0x140>)
 8000822:	f003 f84f 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2102      	movs	r1, #2
 800082a:	481a      	ldr	r0, [pc, #104]	@ (8000894 <MX_GPIO_Init+0x144>)
 800082c:	f003 f84a 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4814      	ldr	r0, [pc, #80]	@ (8000898 <MX_GPIO_Init+0x148>)
 8000846:	f002 fe95 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800084a:	f244 0301 	movw	r3, #16385	@ 0x4001
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	480b      	ldr	r0, [pc, #44]	@ (8000890 <MX_GPIO_Init+0x140>)
 8000864:	f002 fe86 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000868:	2302      	movs	r3, #2
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_GPIO_Init+0x144>)
 8000880:	f002 fe78 	bl	8003574 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3730      	adds	r7, #48	@ 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58024400 	.word	0x58024400
 8000890:	58020400 	.word	0x58020400
 8000894:	58021000 	.word	0x58021000
 8000898:	58020800 	.word	0x58020800

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <HAL_MspInit+0x30>)
 80008b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008b4:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <HAL_MspInit+0x30>)
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_MspInit+0x30>)
 80008c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008c4:	f003 0302 	and.w	r3, r3, #2
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	58024400 	.word	0x58024400

080008dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a22      	ldr	r2, [pc, #136]	@ (8000974 <HAL_TIM_Base_MspInit+0x98>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d13d      	bne.n	800096a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <HAL_TIM_Base_MspInit+0x9c>)
 80008f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008f4:	4a20      	ldr	r2, [pc, #128]	@ (8000978 <HAL_TIM_Base_MspInit+0x9c>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80008fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <HAL_TIM_Base_MspInit+0x9c>)
 8000900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream1;
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_TIM_Base_MspInit+0xa4>)
 8000910:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 8000914:	221f      	movs	r2, #31
 8000916:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 800091a:	2240      	movs	r2, #64	@ 0x40
 800091c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 8000926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 800092e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000932:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 8000936:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800093a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800094e:	480b      	ldr	r0, [pc, #44]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 8000950:	f000 faf6 	bl	8000f40 <HAL_DMA_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800095a:	f7ff ff9f 	bl	800089c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a06      	ldr	r2, [pc, #24]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000964:	4a05      	ldr	r2, [pc, #20]	@ (800097c <HAL_TIM_Base_MspInit+0xa0>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40000800 	.word	0x40000800
 8000978:	58024400 	.word	0x58024400
 800097c:	24000078 	.word	0x24000078
 8000980:	40020028 	.word	0x40020028

08000984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a13      	ldr	r2, [pc, #76]	@ (80009f0 <HAL_TIM_MspPostInit+0x6c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d11f      	bne.n	80009e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <HAL_TIM_MspPostInit+0x70>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	4a11      	ldr	r2, [pc, #68]	@ (80009f4 <HAL_TIM_MspPostInit+0x70>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_TIM_MspPostInit+0x70>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009bc:	f003 0308 	and.w	r3, r3, #8
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <HAL_TIM_MspPostInit+0x74>)
 80009e2:	f002 fdc7 	bl	8003574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40000800 	.word	0x40000800
 80009f4:	58024400 	.word	0x58024400
 80009f8:	58020c00 	.word	0x58020c00

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <NMI_Handler+0x4>

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a52:	f000 f921 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <DMA1_Stream1_IRQHandler+0x10>)
 8000a62:	f001 fa75 	bl	8001f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24000078 	.word	0x24000078

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b32      	ldr	r3, [pc, #200]	@ (8000b40 <SystemInit+0xd0>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7a:	4a31      	ldr	r2, [pc, #196]	@ (8000b40 <SystemInit+0xd0>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a84:	4b2f      	ldr	r3, [pc, #188]	@ (8000b44 <SystemInit+0xd4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 030f 	and.w	r3, r3, #15
 8000a8c:	2b06      	cmp	r3, #6
 8000a8e:	d807      	bhi.n	8000aa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a90:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <SystemInit+0xd4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f023 030f 	bic.w	r3, r3, #15
 8000a98:	4a2a      	ldr	r2, [pc, #168]	@ (8000b44 <SystemInit+0xd4>)
 8000a9a:	f043 0307 	orr.w	r3, r3, #7
 8000a9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <SystemInit+0xd8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a28      	ldr	r2, [pc, #160]	@ (8000b48 <SystemInit+0xd8>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aac:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <SystemInit+0xd8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <SystemInit+0xd8>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4924      	ldr	r1, [pc, #144]	@ (8000b48 <SystemInit+0xd8>)
 8000ab8:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <SystemInit+0xdc>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <SystemInit+0xd4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <SystemInit+0xd4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f023 030f 	bic.w	r3, r3, #15
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b44 <SystemInit+0xd4>)
 8000ad4:	f043 0307 	orr.w	r3, r3, #7
 8000ad8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <SystemInit+0xd8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <SystemInit+0xd8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <SystemInit+0xd8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <SystemInit+0xd8>)
 8000aee:	4a18      	ldr	r2, [pc, #96]	@ (8000b50 <SystemInit+0xe0>)
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <SystemInit+0xd8>)
 8000af4:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <SystemInit+0xe4>)
 8000af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <SystemInit+0xd8>)
 8000afa:	4a17      	ldr	r2, [pc, #92]	@ (8000b58 <SystemInit+0xe8>)
 8000afc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <SystemInit+0xd8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <SystemInit+0xd8>)
 8000b06:	4a14      	ldr	r2, [pc, #80]	@ (8000b58 <SystemInit+0xe8>)
 8000b08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <SystemInit+0xd8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <SystemInit+0xd8>)
 8000b12:	4a11      	ldr	r2, [pc, #68]	@ (8000b58 <SystemInit+0xe8>)
 8000b14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <SystemInit+0xd8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <SystemInit+0xd8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <SystemInit+0xd8>)
 8000b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <SystemInit+0xd8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <SystemInit+0xec>)
 8000b30:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	52002000 	.word	0x52002000
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b50:	02020200 	.word	0x02020200
 8000b54:	01ff0000 	.word	0x01ff0000
 8000b58:	01010280 	.word	0x01010280
 8000b5c:	52004000 	.word	0x52004000

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b64:	f7ff ff84 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	@ (8000ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	@ (8000bac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f005 f9bd 	bl	8005f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fc75 	bl	8000480 <main>
  bx  lr
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000b9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ba0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ba4:	08005f8c 	.word	0x08005f8c
  ldr r2, =_sbss
 8000ba8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bac:	240002fc 	.word	0x240002fc

08000bb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC3_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f000 f980 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bc0:	f003 fc64 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_Init+0x68>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	f003 030f 	and.w	r3, r3, #15
 8000bd0:	4913      	ldr	r1, [pc, #76]	@ (8000c20 <HAL_Init+0x6c>)
 8000bd2:	5ccb      	ldrb	r3, [r1, r3]
 8000bd4:	f003 031f 	and.w	r3, r3, #31
 8000bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_Init+0x68>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <HAL_Init+0x6c>)
 8000be8:	5cd3      	ldrb	r3, [r2, r3]
 8000bea:	f003 031f 	and.w	r3, r3, #31
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <HAL_Init+0x70>)
 8000bf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c28 <HAL_Init+0x74>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f814 	bl	8000c2c <HAL_InitTick>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e002      	b.n	8000c14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0e:	f7ff fe4b 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	08005f6c 	.word	0x08005f6c
 8000c24:	24000004 	.word	0x24000004
 8000c28:	24000000 	.word	0x24000000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_InitTick+0x60>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e021      	b.n	8000c84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <HAL_InitTick+0x64>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <HAL_InitTick+0x60>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f965 	bl	8000f26 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f92f 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	@ (8000c94 <HAL_InitTick+0x68>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2400000c 	.word	0x2400000c
 8000c90:	24000000 	.word	0x24000000
 8000c94:	24000008 	.word	0x24000008

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2400000c 	.word	0x2400000c
 8000cbc:	240002f8 	.word	0x240002f8

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	240002f8 	.word	0x240002f8

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2400000c 	.word	0x2400000c

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x40>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x40>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00
 8000d64:	05fa0000 	.word	0x05fa0000

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	@ (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	@ (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff40 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff90 	bl	8000e14 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5f 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff33 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa4 	bl	8000e7c <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff feba 	bl	8000cc0 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e312      	b.n	800157e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a66      	ldr	r2, [pc, #408]	@ (80010f8 <HAL_DMA_Init+0x1b8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d04a      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a65      	ldr	r2, [pc, #404]	@ (80010fc <HAL_DMA_Init+0x1bc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d045      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a63      	ldr	r2, [pc, #396]	@ (8001100 <HAL_DMA_Init+0x1c0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d040      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a62      	ldr	r2, [pc, #392]	@ (8001104 <HAL_DMA_Init+0x1c4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d03b      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a60      	ldr	r2, [pc, #384]	@ (8001108 <HAL_DMA_Init+0x1c8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d036      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a5f      	ldr	r2, [pc, #380]	@ (800110c <HAL_DMA_Init+0x1cc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d031      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a5d      	ldr	r2, [pc, #372]	@ (8001110 <HAL_DMA_Init+0x1d0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d02c      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a5c      	ldr	r2, [pc, #368]	@ (8001114 <HAL_DMA_Init+0x1d4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d027      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a5a      	ldr	r2, [pc, #360]	@ (8001118 <HAL_DMA_Init+0x1d8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d022      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a59      	ldr	r2, [pc, #356]	@ (800111c <HAL_DMA_Init+0x1dc>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d01d      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <HAL_DMA_Init+0x1e0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d018      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a56      	ldr	r2, [pc, #344]	@ (8001124 <HAL_DMA_Init+0x1e4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d013      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a54      	ldr	r2, [pc, #336]	@ (8001128 <HAL_DMA_Init+0x1e8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00e      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a53      	ldr	r2, [pc, #332]	@ (800112c <HAL_DMA_Init+0x1ec>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d009      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a51      	ldr	r2, [pc, #324]	@ (8001130 <HAL_DMA_Init+0x1f0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d004      	beq.n	8000ff8 <HAL_DMA_Init+0xb8>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a50      	ldr	r2, [pc, #320]	@ (8001134 <HAL_DMA_Init+0x1f4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_DMA_Init+0xbc>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <HAL_DMA_Init+0xbe>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 813c 	beq.w	800127c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2202      	movs	r2, #2
 8001008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a37      	ldr	r2, [pc, #220]	@ (80010f8 <HAL_DMA_Init+0x1b8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d04a      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a36      	ldr	r2, [pc, #216]	@ (80010fc <HAL_DMA_Init+0x1bc>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d045      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a34      	ldr	r2, [pc, #208]	@ (8001100 <HAL_DMA_Init+0x1c0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d040      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a33      	ldr	r2, [pc, #204]	@ (8001104 <HAL_DMA_Init+0x1c4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d03b      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a31      	ldr	r2, [pc, #196]	@ (8001108 <HAL_DMA_Init+0x1c8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d036      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a30      	ldr	r2, [pc, #192]	@ (800110c <HAL_DMA_Init+0x1cc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d031      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a2e      	ldr	r2, [pc, #184]	@ (8001110 <HAL_DMA_Init+0x1d0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d02c      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a2d      	ldr	r2, [pc, #180]	@ (8001114 <HAL_DMA_Init+0x1d4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d027      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2b      	ldr	r2, [pc, #172]	@ (8001118 <HAL_DMA_Init+0x1d8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d022      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a2a      	ldr	r2, [pc, #168]	@ (800111c <HAL_DMA_Init+0x1dc>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d01d      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a28      	ldr	r2, [pc, #160]	@ (8001120 <HAL_DMA_Init+0x1e0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d018      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a27      	ldr	r2, [pc, #156]	@ (8001124 <HAL_DMA_Init+0x1e4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d013      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a25      	ldr	r2, [pc, #148]	@ (8001128 <HAL_DMA_Init+0x1e8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00e      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a24      	ldr	r2, [pc, #144]	@ (800112c <HAL_DMA_Init+0x1ec>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d009      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a22      	ldr	r2, [pc, #136]	@ (8001130 <HAL_DMA_Init+0x1f0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d004      	beq.n	80010b4 <HAL_DMA_Init+0x174>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a21      	ldr	r2, [pc, #132]	@ (8001134 <HAL_DMA_Init+0x1f4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d108      	bne.n	80010c6 <HAL_DMA_Init+0x186>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0201 	bic.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e007      	b.n	80010d6 <HAL_DMA_Init+0x196>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80010d6:	e02f      	b.n	8001138 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010d8:	f7ff fdf2 	bl	8000cc0 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d928      	bls.n	8001138 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2220      	movs	r2, #32
 80010ea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e242      	b.n	800157e <HAL_DMA_Init+0x63e>
 80010f8:	40020010 	.word	0x40020010
 80010fc:	40020028 	.word	0x40020028
 8001100:	40020040 	.word	0x40020040
 8001104:	40020058 	.word	0x40020058
 8001108:	40020070 	.word	0x40020070
 800110c:	40020088 	.word	0x40020088
 8001110:	400200a0 	.word	0x400200a0
 8001114:	400200b8 	.word	0x400200b8
 8001118:	40020410 	.word	0x40020410
 800111c:	40020428 	.word	0x40020428
 8001120:	40020440 	.word	0x40020440
 8001124:	40020458 	.word	0x40020458
 8001128:	40020470 	.word	0x40020470
 800112c:	40020488 	.word	0x40020488
 8001130:	400204a0 	.word	0x400204a0
 8001134:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1c8      	bne.n	80010d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4b83      	ldr	r3, [pc, #524]	@ (8001360 <HAL_DMA_Init+0x420>)
 8001152:	4013      	ands	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800115e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001176:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4313      	orrs	r3, r2
 8001182:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001188:	2b04      	cmp	r3, #4
 800118a:	d107      	bne.n	800119c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001194:	4313      	orrs	r3, r2
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4313      	orrs	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b28      	cmp	r3, #40	@ 0x28
 80011a2:	d903      	bls.n	80011ac <HAL_DMA_Init+0x26c>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80011aa:	d91f      	bls.n	80011ec <HAL_DMA_Init+0x2ac>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80011b2:	d903      	bls.n	80011bc <HAL_DMA_Init+0x27c>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b42      	cmp	r3, #66	@ 0x42
 80011ba:	d917      	bls.n	80011ec <HAL_DMA_Init+0x2ac>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b46      	cmp	r3, #70	@ 0x46
 80011c2:	d903      	bls.n	80011cc <HAL_DMA_Init+0x28c>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b48      	cmp	r3, #72	@ 0x48
 80011ca:	d90f      	bls.n	80011ec <HAL_DMA_Init+0x2ac>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b4e      	cmp	r3, #78	@ 0x4e
 80011d2:	d903      	bls.n	80011dc <HAL_DMA_Init+0x29c>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b52      	cmp	r3, #82	@ 0x52
 80011da:	d907      	bls.n	80011ec <HAL_DMA_Init+0x2ac>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b73      	cmp	r3, #115	@ 0x73
 80011e2:	d905      	bls.n	80011f0 <HAL_DMA_Init+0x2b0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b77      	cmp	r3, #119	@ 0x77
 80011ea:	d801      	bhi.n	80011f0 <HAL_DMA_Init+0x2b0>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_DMA_Init+0x2b2>
 80011f0:	2300      	movs	r3, #0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011fc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f023 0307 	bic.w	r3, r3, #7
 8001214:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4313      	orrs	r3, r2
 800121e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001224:	2b04      	cmp	r3, #4
 8001226:	d117      	bne.n	8001258 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4313      	orrs	r3, r2
 8001230:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00e      	beq.n	8001258 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f002 f810 	bl	8003260 <DMA_CheckFifoParam>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2240      	movs	r2, #64	@ 0x40
 800124a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e192      	b.n	800157e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f001 ff4b 	bl	80030fc <DMA_CalcBaseAndBitshift>
 8001266:	4603      	mov	r3, r0
 8001268:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	223f      	movs	r2, #63	@ 0x3f
 8001274:	409a      	lsls	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	e0c8      	b.n	800140e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a38      	ldr	r2, [pc, #224]	@ (8001364 <HAL_DMA_Init+0x424>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d022      	beq.n	80012cc <HAL_DMA_Init+0x38c>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a37      	ldr	r2, [pc, #220]	@ (8001368 <HAL_DMA_Init+0x428>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d01d      	beq.n	80012cc <HAL_DMA_Init+0x38c>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a35      	ldr	r2, [pc, #212]	@ (800136c <HAL_DMA_Init+0x42c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d018      	beq.n	80012cc <HAL_DMA_Init+0x38c>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a34      	ldr	r2, [pc, #208]	@ (8001370 <HAL_DMA_Init+0x430>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d013      	beq.n	80012cc <HAL_DMA_Init+0x38c>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a32      	ldr	r2, [pc, #200]	@ (8001374 <HAL_DMA_Init+0x434>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00e      	beq.n	80012cc <HAL_DMA_Init+0x38c>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a31      	ldr	r2, [pc, #196]	@ (8001378 <HAL_DMA_Init+0x438>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d009      	beq.n	80012cc <HAL_DMA_Init+0x38c>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a2f      	ldr	r2, [pc, #188]	@ (800137c <HAL_DMA_Init+0x43c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d004      	beq.n	80012cc <HAL_DMA_Init+0x38c>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001380 <HAL_DMA_Init+0x440>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d101      	bne.n	80012d0 <HAL_DMA_Init+0x390>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_DMA_Init+0x392>
 80012d0:	2300      	movs	r3, #0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8092 	beq.w	80013fc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a21      	ldr	r2, [pc, #132]	@ (8001364 <HAL_DMA_Init+0x424>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d021      	beq.n	8001326 <HAL_DMA_Init+0x3e6>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a20      	ldr	r2, [pc, #128]	@ (8001368 <HAL_DMA_Init+0x428>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d01c      	beq.n	8001326 <HAL_DMA_Init+0x3e6>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1e      	ldr	r2, [pc, #120]	@ (800136c <HAL_DMA_Init+0x42c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d017      	beq.n	8001326 <HAL_DMA_Init+0x3e6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <HAL_DMA_Init+0x430>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d012      	beq.n	8001326 <HAL_DMA_Init+0x3e6>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <HAL_DMA_Init+0x434>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00d      	beq.n	8001326 <HAL_DMA_Init+0x3e6>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1a      	ldr	r2, [pc, #104]	@ (8001378 <HAL_DMA_Init+0x438>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d008      	beq.n	8001326 <HAL_DMA_Init+0x3e6>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a18      	ldr	r2, [pc, #96]	@ (800137c <HAL_DMA_Init+0x43c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d003      	beq.n	8001326 <HAL_DMA_Init+0x3e6>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a17      	ldr	r2, [pc, #92]	@ (8001380 <HAL_DMA_Init+0x440>)
 8001324:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2202      	movs	r2, #2
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <HAL_DMA_Init+0x444>)
 8001342:	4013      	ands	r3, r2
 8001344:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b40      	cmp	r3, #64	@ 0x40
 800134c:	d01c      	beq.n	8001388 <HAL_DMA_Init+0x448>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b80      	cmp	r3, #128	@ 0x80
 8001354:	d102      	bne.n	800135c <HAL_DMA_Init+0x41c>
 8001356:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800135a:	e016      	b.n	800138a <HAL_DMA_Init+0x44a>
 800135c:	2300      	movs	r3, #0
 800135e:	e014      	b.n	800138a <HAL_DMA_Init+0x44a>
 8001360:	fe10803f 	.word	0xfe10803f
 8001364:	58025408 	.word	0x58025408
 8001368:	5802541c 	.word	0x5802541c
 800136c:	58025430 	.word	0x58025430
 8001370:	58025444 	.word	0x58025444
 8001374:	58025458 	.word	0x58025458
 8001378:	5802546c 	.word	0x5802546c
 800137c:	58025480 	.word	0x58025480
 8001380:	58025494 	.word	0x58025494
 8001384:	fffe000f 	.word	0xfffe000f
 8001388:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68d2      	ldr	r2, [r2, #12]
 800138e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001390:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001398:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80013a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80013a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80013b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80013b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001588 <HAL_DMA_Init+0x648>)
 80013d0:	4413      	add	r3, r2
 80013d2:	4a6e      	ldr	r2, [pc, #440]	@ (800158c <HAL_DMA_Init+0x64c>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	009a      	lsls	r2, r3, #2
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f001 fe8b 	bl	80030fc <DMA_CalcBaseAndBitshift>
 80013e6:	4603      	mov	r3, r0
 80013e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	2201      	movs	r2, #1
 80013f4:	409a      	lsls	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	e008      	b.n	800140e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2240      	movs	r2, #64	@ 0x40
 8001400:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2203      	movs	r2, #3
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0b7      	b.n	800157e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a5f      	ldr	r2, [pc, #380]	@ (8001590 <HAL_DMA_Init+0x650>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d072      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a5d      	ldr	r2, [pc, #372]	@ (8001594 <HAL_DMA_Init+0x654>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d06d      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a5c      	ldr	r2, [pc, #368]	@ (8001598 <HAL_DMA_Init+0x658>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d068      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a5a      	ldr	r2, [pc, #360]	@ (800159c <HAL_DMA_Init+0x65c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d063      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a59      	ldr	r2, [pc, #356]	@ (80015a0 <HAL_DMA_Init+0x660>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d05e      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a57      	ldr	r2, [pc, #348]	@ (80015a4 <HAL_DMA_Init+0x664>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d059      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a56      	ldr	r2, [pc, #344]	@ (80015a8 <HAL_DMA_Init+0x668>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d054      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a54      	ldr	r2, [pc, #336]	@ (80015ac <HAL_DMA_Init+0x66c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d04f      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a53      	ldr	r2, [pc, #332]	@ (80015b0 <HAL_DMA_Init+0x670>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d04a      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a51      	ldr	r2, [pc, #324]	@ (80015b4 <HAL_DMA_Init+0x674>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d045      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a50      	ldr	r2, [pc, #320]	@ (80015b8 <HAL_DMA_Init+0x678>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d040      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a4e      	ldr	r2, [pc, #312]	@ (80015bc <HAL_DMA_Init+0x67c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d03b      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a4d      	ldr	r2, [pc, #308]	@ (80015c0 <HAL_DMA_Init+0x680>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d036      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a4b      	ldr	r2, [pc, #300]	@ (80015c4 <HAL_DMA_Init+0x684>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d031      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a4a      	ldr	r2, [pc, #296]	@ (80015c8 <HAL_DMA_Init+0x688>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d02c      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a48      	ldr	r2, [pc, #288]	@ (80015cc <HAL_DMA_Init+0x68c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d027      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a47      	ldr	r2, [pc, #284]	@ (80015d0 <HAL_DMA_Init+0x690>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d022      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a45      	ldr	r2, [pc, #276]	@ (80015d4 <HAL_DMA_Init+0x694>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01d      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a44      	ldr	r2, [pc, #272]	@ (80015d8 <HAL_DMA_Init+0x698>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d018      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a42      	ldr	r2, [pc, #264]	@ (80015dc <HAL_DMA_Init+0x69c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a41      	ldr	r2, [pc, #260]	@ (80015e0 <HAL_DMA_Init+0x6a0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d00e      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a3f      	ldr	r2, [pc, #252]	@ (80015e4 <HAL_DMA_Init+0x6a4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d009      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a3e      	ldr	r2, [pc, #248]	@ (80015e8 <HAL_DMA_Init+0x6a8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d004      	beq.n	80014fe <HAL_DMA_Init+0x5be>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a3c      	ldr	r2, [pc, #240]	@ (80015ec <HAL_DMA_Init+0x6ac>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d101      	bne.n	8001502 <HAL_DMA_Init+0x5c2>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_DMA_Init+0x5c4>
 8001502:	2300      	movs	r3, #0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d032      	beq.n	800156e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f001 ff25 	bl	8003358 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b80      	cmp	r3, #128	@ 0x80
 8001514:	d102      	bne.n	800151c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001530:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d010      	beq.n	800155c <HAL_DMA_Init+0x61c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b08      	cmp	r3, #8
 8001540:	d80c      	bhi.n	800155c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f001 ffa2 	bl	800348c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	e008      	b.n	800156e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	a7fdabf8 	.word	0xa7fdabf8
 800158c:	cccccccd 	.word	0xcccccccd
 8001590:	40020010 	.word	0x40020010
 8001594:	40020028 	.word	0x40020028
 8001598:	40020040 	.word	0x40020040
 800159c:	40020058 	.word	0x40020058
 80015a0:	40020070 	.word	0x40020070
 80015a4:	40020088 	.word	0x40020088
 80015a8:	400200a0 	.word	0x400200a0
 80015ac:	400200b8 	.word	0x400200b8
 80015b0:	40020410 	.word	0x40020410
 80015b4:	40020428 	.word	0x40020428
 80015b8:	40020440 	.word	0x40020440
 80015bc:	40020458 	.word	0x40020458
 80015c0:	40020470 	.word	0x40020470
 80015c4:	40020488 	.word	0x40020488
 80015c8:	400204a0 	.word	0x400204a0
 80015cc:	400204b8 	.word	0x400204b8
 80015d0:	58025408 	.word	0x58025408
 80015d4:	5802541c 	.word	0x5802541c
 80015d8:	58025430 	.word	0x58025430
 80015dc:	58025444 	.word	0x58025444
 80015e0:	58025458 	.word	0x58025458
 80015e4:	5802546c 	.word	0x5802546c
 80015e8:	58025480 	.word	0x58025480
 80015ec:	58025494 	.word	0x58025494

080015f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e226      	b.n	8001a5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_DMA_Start_IT+0x2a>
 8001616:	2302      	movs	r3, #2
 8001618:	e21f      	b.n	8001a5a <HAL_DMA_Start_IT+0x46a>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	f040 820a 	bne.w	8001a44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a68      	ldr	r2, [pc, #416]	@ (80017e4 <HAL_DMA_Start_IT+0x1f4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d04a      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a66      	ldr	r2, [pc, #408]	@ (80017e8 <HAL_DMA_Start_IT+0x1f8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d045      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a65      	ldr	r2, [pc, #404]	@ (80017ec <HAL_DMA_Start_IT+0x1fc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d040      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a63      	ldr	r2, [pc, #396]	@ (80017f0 <HAL_DMA_Start_IT+0x200>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d03b      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a62      	ldr	r2, [pc, #392]	@ (80017f4 <HAL_DMA_Start_IT+0x204>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d036      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a60      	ldr	r2, [pc, #384]	@ (80017f8 <HAL_DMA_Start_IT+0x208>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d031      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5f      	ldr	r2, [pc, #380]	@ (80017fc <HAL_DMA_Start_IT+0x20c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d02c      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a5d      	ldr	r2, [pc, #372]	@ (8001800 <HAL_DMA_Start_IT+0x210>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d027      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a5c      	ldr	r2, [pc, #368]	@ (8001804 <HAL_DMA_Start_IT+0x214>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a5a      	ldr	r2, [pc, #360]	@ (8001808 <HAL_DMA_Start_IT+0x218>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01d      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a59      	ldr	r2, [pc, #356]	@ (800180c <HAL_DMA_Start_IT+0x21c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d018      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a57      	ldr	r2, [pc, #348]	@ (8001810 <HAL_DMA_Start_IT+0x220>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a56      	ldr	r2, [pc, #344]	@ (8001814 <HAL_DMA_Start_IT+0x224>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00e      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a54      	ldr	r2, [pc, #336]	@ (8001818 <HAL_DMA_Start_IT+0x228>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d009      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a53      	ldr	r2, [pc, #332]	@ (800181c <HAL_DMA_Start_IT+0x22c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d004      	beq.n	80016de <HAL_DMA_Start_IT+0xee>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a51      	ldr	r2, [pc, #324]	@ (8001820 <HAL_DMA_Start_IT+0x230>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d108      	bne.n	80016f0 <HAL_DMA_Start_IT+0x100>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e007      	b.n	8001700 <HAL_DMA_Start_IT+0x110>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f001 fb4c 	bl	8002da4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a34      	ldr	r2, [pc, #208]	@ (80017e4 <HAL_DMA_Start_IT+0x1f4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d04a      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a33      	ldr	r2, [pc, #204]	@ (80017e8 <HAL_DMA_Start_IT+0x1f8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d045      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a31      	ldr	r2, [pc, #196]	@ (80017ec <HAL_DMA_Start_IT+0x1fc>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d040      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a30      	ldr	r2, [pc, #192]	@ (80017f0 <HAL_DMA_Start_IT+0x200>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d03b      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2e      	ldr	r2, [pc, #184]	@ (80017f4 <HAL_DMA_Start_IT+0x204>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d036      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a2d      	ldr	r2, [pc, #180]	@ (80017f8 <HAL_DMA_Start_IT+0x208>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d031      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2b      	ldr	r2, [pc, #172]	@ (80017fc <HAL_DMA_Start_IT+0x20c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d02c      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2a      	ldr	r2, [pc, #168]	@ (8001800 <HAL_DMA_Start_IT+0x210>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d027      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a28      	ldr	r2, [pc, #160]	@ (8001804 <HAL_DMA_Start_IT+0x214>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d022      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a27      	ldr	r2, [pc, #156]	@ (8001808 <HAL_DMA_Start_IT+0x218>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d01d      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a25      	ldr	r2, [pc, #148]	@ (800180c <HAL_DMA_Start_IT+0x21c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d018      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a24      	ldr	r2, [pc, #144]	@ (8001810 <HAL_DMA_Start_IT+0x220>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d013      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <HAL_DMA_Start_IT+0x224>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00e      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a21      	ldr	r2, [pc, #132]	@ (8001818 <HAL_DMA_Start_IT+0x228>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d009      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1f      	ldr	r2, [pc, #124]	@ (800181c <HAL_DMA_Start_IT+0x22c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d004      	beq.n	80017ac <HAL_DMA_Start_IT+0x1bc>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <HAL_DMA_Start_IT+0x230>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_DMA_Start_IT+0x1c0>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_DMA_Start_IT+0x1c2>
 80017b0:	2300      	movs	r3, #0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d036      	beq.n	8001824 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 021e 	bic.w	r2, r3, #30
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0216 	orr.w	r2, r2, #22
 80017c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03e      	beq.n	8001850 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0208 	orr.w	r2, r2, #8
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e035      	b.n	8001850 <HAL_DMA_Start_IT+0x260>
 80017e4:	40020010 	.word	0x40020010
 80017e8:	40020028 	.word	0x40020028
 80017ec:	40020040 	.word	0x40020040
 80017f0:	40020058 	.word	0x40020058
 80017f4:	40020070 	.word	0x40020070
 80017f8:	40020088 	.word	0x40020088
 80017fc:	400200a0 	.word	0x400200a0
 8001800:	400200b8 	.word	0x400200b8
 8001804:	40020410 	.word	0x40020410
 8001808:	40020428 	.word	0x40020428
 800180c:	40020440 	.word	0x40020440
 8001810:	40020458 	.word	0x40020458
 8001814:	40020470 	.word	0x40020470
 8001818:	40020488 	.word	0x40020488
 800181c:	400204a0 	.word	0x400204a0
 8001820:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 020e 	bic.w	r2, r3, #14
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 020a 	orr.w	r2, r2, #10
 8001836:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0204 	orr.w	r2, r2, #4
 800184e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a83      	ldr	r2, [pc, #524]	@ (8001a64 <HAL_DMA_Start_IT+0x474>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d072      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a82      	ldr	r2, [pc, #520]	@ (8001a68 <HAL_DMA_Start_IT+0x478>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d06d      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a80      	ldr	r2, [pc, #512]	@ (8001a6c <HAL_DMA_Start_IT+0x47c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d068      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7f      	ldr	r2, [pc, #508]	@ (8001a70 <HAL_DMA_Start_IT+0x480>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d063      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a7d      	ldr	r2, [pc, #500]	@ (8001a74 <HAL_DMA_Start_IT+0x484>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d05e      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7c      	ldr	r2, [pc, #496]	@ (8001a78 <HAL_DMA_Start_IT+0x488>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d059      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a7a      	ldr	r2, [pc, #488]	@ (8001a7c <HAL_DMA_Start_IT+0x48c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d054      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a79      	ldr	r2, [pc, #484]	@ (8001a80 <HAL_DMA_Start_IT+0x490>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d04f      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a77      	ldr	r2, [pc, #476]	@ (8001a84 <HAL_DMA_Start_IT+0x494>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d04a      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a76      	ldr	r2, [pc, #472]	@ (8001a88 <HAL_DMA_Start_IT+0x498>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d045      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a74      	ldr	r2, [pc, #464]	@ (8001a8c <HAL_DMA_Start_IT+0x49c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d040      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a73      	ldr	r2, [pc, #460]	@ (8001a90 <HAL_DMA_Start_IT+0x4a0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d03b      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a71      	ldr	r2, [pc, #452]	@ (8001a94 <HAL_DMA_Start_IT+0x4a4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d036      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a70      	ldr	r2, [pc, #448]	@ (8001a98 <HAL_DMA_Start_IT+0x4a8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d031      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a9c <HAL_DMA_Start_IT+0x4ac>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d02c      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6d      	ldr	r2, [pc, #436]	@ (8001aa0 <HAL_DMA_Start_IT+0x4b0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d027      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa4 <HAL_DMA_Start_IT+0x4b4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d022      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a6a      	ldr	r2, [pc, #424]	@ (8001aa8 <HAL_DMA_Start_IT+0x4b8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d01d      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a68      	ldr	r2, [pc, #416]	@ (8001aac <HAL_DMA_Start_IT+0x4bc>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d018      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a67      	ldr	r2, [pc, #412]	@ (8001ab0 <HAL_DMA_Start_IT+0x4c0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d013      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a65      	ldr	r2, [pc, #404]	@ (8001ab4 <HAL_DMA_Start_IT+0x4c4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00e      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a64      	ldr	r2, [pc, #400]	@ (8001ab8 <HAL_DMA_Start_IT+0x4c8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d009      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a62      	ldr	r2, [pc, #392]	@ (8001abc <HAL_DMA_Start_IT+0x4cc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d004      	beq.n	8001940 <HAL_DMA_Start_IT+0x350>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a61      	ldr	r2, [pc, #388]	@ (8001ac0 <HAL_DMA_Start_IT+0x4d0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Start_IT+0x354>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_DMA_Start_IT+0x356>
 8001944:	2300      	movs	r3, #0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d01a      	beq.n	8001980 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001962:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001966:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800197a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800197e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a37      	ldr	r2, [pc, #220]	@ (8001a64 <HAL_DMA_Start_IT+0x474>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d04a      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a36      	ldr	r2, [pc, #216]	@ (8001a68 <HAL_DMA_Start_IT+0x478>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d045      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a34      	ldr	r2, [pc, #208]	@ (8001a6c <HAL_DMA_Start_IT+0x47c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d040      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a33      	ldr	r2, [pc, #204]	@ (8001a70 <HAL_DMA_Start_IT+0x480>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d03b      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a31      	ldr	r2, [pc, #196]	@ (8001a74 <HAL_DMA_Start_IT+0x484>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d036      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a30      	ldr	r2, [pc, #192]	@ (8001a78 <HAL_DMA_Start_IT+0x488>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d031      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a7c <HAL_DMA_Start_IT+0x48c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d02c      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001a80 <HAL_DMA_Start_IT+0x490>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d027      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001a84 <HAL_DMA_Start_IT+0x494>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d022      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2a      	ldr	r2, [pc, #168]	@ (8001a88 <HAL_DMA_Start_IT+0x498>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d01d      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a28      	ldr	r2, [pc, #160]	@ (8001a8c <HAL_DMA_Start_IT+0x49c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d018      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a27      	ldr	r2, [pc, #156]	@ (8001a90 <HAL_DMA_Start_IT+0x4a0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a25      	ldr	r2, [pc, #148]	@ (8001a94 <HAL_DMA_Start_IT+0x4a4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00e      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a24      	ldr	r2, [pc, #144]	@ (8001a98 <HAL_DMA_Start_IT+0x4a8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d009      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a22      	ldr	r2, [pc, #136]	@ (8001a9c <HAL_DMA_Start_IT+0x4ac>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d004      	beq.n	8001a20 <HAL_DMA_Start_IT+0x430>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a21      	ldr	r2, [pc, #132]	@ (8001aa0 <HAL_DMA_Start_IT+0x4b0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d108      	bne.n	8001a32 <HAL_DMA_Start_IT+0x442>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e012      	b.n	8001a58 <HAL_DMA_Start_IT+0x468>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0201 	orr.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e009      	b.n	8001a58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40020010 	.word	0x40020010
 8001a68:	40020028 	.word	0x40020028
 8001a6c:	40020040 	.word	0x40020040
 8001a70:	40020058 	.word	0x40020058
 8001a74:	40020070 	.word	0x40020070
 8001a78:	40020088 	.word	0x40020088
 8001a7c:	400200a0 	.word	0x400200a0
 8001a80:	400200b8 	.word	0x400200b8
 8001a84:	40020410 	.word	0x40020410
 8001a88:	40020428 	.word	0x40020428
 8001a8c:	40020440 	.word	0x40020440
 8001a90:	40020458 	.word	0x40020458
 8001a94:	40020470 	.word	0x40020470
 8001a98:	40020488 	.word	0x40020488
 8001a9c:	400204a0 	.word	0x400204a0
 8001aa0:	400204b8 	.word	0x400204b8
 8001aa4:	58025408 	.word	0x58025408
 8001aa8:	5802541c 	.word	0x5802541c
 8001aac:	58025430 	.word	0x58025430
 8001ab0:	58025444 	.word	0x58025444
 8001ab4:	58025458 	.word	0x58025458
 8001ab8:	5802546c 	.word	0x5802546c
 8001abc:	58025480 	.word	0x58025480
 8001ac0:	58025494 	.word	0x58025494

08001ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e237      	b.n	8001f46 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d004      	beq.n	8001aec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2280      	movs	r2, #128	@ 0x80
 8001ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e22c      	b.n	8001f46 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a5c      	ldr	r2, [pc, #368]	@ (8001c64 <HAL_DMA_Abort_IT+0x1a0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d04a      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a5b      	ldr	r2, [pc, #364]	@ (8001c68 <HAL_DMA_Abort_IT+0x1a4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d045      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a59      	ldr	r2, [pc, #356]	@ (8001c6c <HAL_DMA_Abort_IT+0x1a8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d040      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a58      	ldr	r2, [pc, #352]	@ (8001c70 <HAL_DMA_Abort_IT+0x1ac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d03b      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a56      	ldr	r2, [pc, #344]	@ (8001c74 <HAL_DMA_Abort_IT+0x1b0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d036      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a55      	ldr	r2, [pc, #340]	@ (8001c78 <HAL_DMA_Abort_IT+0x1b4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d031      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a53      	ldr	r2, [pc, #332]	@ (8001c7c <HAL_DMA_Abort_IT+0x1b8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02c      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a52      	ldr	r2, [pc, #328]	@ (8001c80 <HAL_DMA_Abort_IT+0x1bc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d027      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a50      	ldr	r2, [pc, #320]	@ (8001c84 <HAL_DMA_Abort_IT+0x1c0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d022      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a4f      	ldr	r2, [pc, #316]	@ (8001c88 <HAL_DMA_Abort_IT+0x1c4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d01d      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a4d      	ldr	r2, [pc, #308]	@ (8001c8c <HAL_DMA_Abort_IT+0x1c8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d018      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001c90 <HAL_DMA_Abort_IT+0x1cc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d013      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a4a      	ldr	r2, [pc, #296]	@ (8001c94 <HAL_DMA_Abort_IT+0x1d0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00e      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a49      	ldr	r2, [pc, #292]	@ (8001c98 <HAL_DMA_Abort_IT+0x1d4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d009      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a47      	ldr	r2, [pc, #284]	@ (8001c9c <HAL_DMA_Abort_IT+0x1d8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d004      	beq.n	8001b8c <HAL_DMA_Abort_IT+0xc8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a46      	ldr	r2, [pc, #280]	@ (8001ca0 <HAL_DMA_Abort_IT+0x1dc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_DMA_Abort_IT+0xcc>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_DMA_Abort_IT+0xce>
 8001b90:	2300      	movs	r3, #0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8086 	beq.w	8001ca4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8001c64 <HAL_DMA_Abort_IT+0x1a0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d04a      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2e      	ldr	r2, [pc, #184]	@ (8001c68 <HAL_DMA_Abort_IT+0x1a4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d045      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001c6c <HAL_DMA_Abort_IT+0x1a8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d040      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8001c70 <HAL_DMA_Abort_IT+0x1ac>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d03b      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a29      	ldr	r2, [pc, #164]	@ (8001c74 <HAL_DMA_Abort_IT+0x1b0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d036      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a28      	ldr	r2, [pc, #160]	@ (8001c78 <HAL_DMA_Abort_IT+0x1b4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d031      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a26      	ldr	r2, [pc, #152]	@ (8001c7c <HAL_DMA_Abort_IT+0x1b8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d02c      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a25      	ldr	r2, [pc, #148]	@ (8001c80 <HAL_DMA_Abort_IT+0x1bc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d027      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a23      	ldr	r2, [pc, #140]	@ (8001c84 <HAL_DMA_Abort_IT+0x1c0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d022      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a22      	ldr	r2, [pc, #136]	@ (8001c88 <HAL_DMA_Abort_IT+0x1c4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01d      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a20      	ldr	r2, [pc, #128]	@ (8001c8c <HAL_DMA_Abort_IT+0x1c8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d018      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1f      	ldr	r2, [pc, #124]	@ (8001c90 <HAL_DMA_Abort_IT+0x1cc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d013      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c94 <HAL_DMA_Abort_IT+0x1d0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00e      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1c      	ldr	r2, [pc, #112]	@ (8001c98 <HAL_DMA_Abort_IT+0x1d4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1a      	ldr	r2, [pc, #104]	@ (8001c9c <HAL_DMA_Abort_IT+0x1d8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x17c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a19      	ldr	r2, [pc, #100]	@ (8001ca0 <HAL_DMA_Abort_IT+0x1dc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d108      	bne.n	8001c52 <HAL_DMA_Abort_IT+0x18e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e178      	b.n	8001f44 <HAL_DMA_Abort_IT+0x480>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e16f      	b.n	8001f44 <HAL_DMA_Abort_IT+0x480>
 8001c64:	40020010 	.word	0x40020010
 8001c68:	40020028 	.word	0x40020028
 8001c6c:	40020040 	.word	0x40020040
 8001c70:	40020058 	.word	0x40020058
 8001c74:	40020070 	.word	0x40020070
 8001c78:	40020088 	.word	0x40020088
 8001c7c:	400200a0 	.word	0x400200a0
 8001c80:	400200b8 	.word	0x400200b8
 8001c84:	40020410 	.word	0x40020410
 8001c88:	40020428 	.word	0x40020428
 8001c8c:	40020440 	.word	0x40020440
 8001c90:	40020458 	.word	0x40020458
 8001c94:	40020470 	.word	0x40020470
 8001c98:	40020488 	.word	0x40020488
 8001c9c:	400204a0 	.word	0x400204a0
 8001ca0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020e 	bic.w	r2, r2, #14
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a6c      	ldr	r2, [pc, #432]	@ (8001e6c <HAL_DMA_Abort_IT+0x3a8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d04a      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6b      	ldr	r2, [pc, #428]	@ (8001e70 <HAL_DMA_Abort_IT+0x3ac>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d045      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a69      	ldr	r2, [pc, #420]	@ (8001e74 <HAL_DMA_Abort_IT+0x3b0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d040      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a68      	ldr	r2, [pc, #416]	@ (8001e78 <HAL_DMA_Abort_IT+0x3b4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d03b      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a66      	ldr	r2, [pc, #408]	@ (8001e7c <HAL_DMA_Abort_IT+0x3b8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d036      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a65      	ldr	r2, [pc, #404]	@ (8001e80 <HAL_DMA_Abort_IT+0x3bc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d031      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a63      	ldr	r2, [pc, #396]	@ (8001e84 <HAL_DMA_Abort_IT+0x3c0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02c      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a62      	ldr	r2, [pc, #392]	@ (8001e88 <HAL_DMA_Abort_IT+0x3c4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d027      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a60      	ldr	r2, [pc, #384]	@ (8001e8c <HAL_DMA_Abort_IT+0x3c8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d022      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a5f      	ldr	r2, [pc, #380]	@ (8001e90 <HAL_DMA_Abort_IT+0x3cc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d01d      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a5d      	ldr	r2, [pc, #372]	@ (8001e94 <HAL_DMA_Abort_IT+0x3d0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d018      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a5c      	ldr	r2, [pc, #368]	@ (8001e98 <HAL_DMA_Abort_IT+0x3d4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d013      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a5a      	ldr	r2, [pc, #360]	@ (8001e9c <HAL_DMA_Abort_IT+0x3d8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00e      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a59      	ldr	r2, [pc, #356]	@ (8001ea0 <HAL_DMA_Abort_IT+0x3dc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a57      	ldr	r2, [pc, #348]	@ (8001ea4 <HAL_DMA_Abort_IT+0x3e0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x290>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a56      	ldr	r2, [pc, #344]	@ (8001ea8 <HAL_DMA_Abort_IT+0x3e4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d108      	bne.n	8001d66 <HAL_DMA_Abort_IT+0x2a2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e007      	b.n	8001d76 <HAL_DMA_Abort_IT+0x2b2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e6c <HAL_DMA_Abort_IT+0x3a8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d072      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3a      	ldr	r2, [pc, #232]	@ (8001e70 <HAL_DMA_Abort_IT+0x3ac>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d06d      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a39      	ldr	r2, [pc, #228]	@ (8001e74 <HAL_DMA_Abort_IT+0x3b0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d068      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a37      	ldr	r2, [pc, #220]	@ (8001e78 <HAL_DMA_Abort_IT+0x3b4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d063      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a36      	ldr	r2, [pc, #216]	@ (8001e7c <HAL_DMA_Abort_IT+0x3b8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d05e      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a34      	ldr	r2, [pc, #208]	@ (8001e80 <HAL_DMA_Abort_IT+0x3bc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d059      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a33      	ldr	r2, [pc, #204]	@ (8001e84 <HAL_DMA_Abort_IT+0x3c0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d054      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a31      	ldr	r2, [pc, #196]	@ (8001e88 <HAL_DMA_Abort_IT+0x3c4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d04f      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a30      	ldr	r2, [pc, #192]	@ (8001e8c <HAL_DMA_Abort_IT+0x3c8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d04a      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8001e90 <HAL_DMA_Abort_IT+0x3cc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d045      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a2d      	ldr	r2, [pc, #180]	@ (8001e94 <HAL_DMA_Abort_IT+0x3d0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d040      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e98 <HAL_DMA_Abort_IT+0x3d4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d03b      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e9c <HAL_DMA_Abort_IT+0x3d8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d036      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a28      	ldr	r2, [pc, #160]	@ (8001ea0 <HAL_DMA_Abort_IT+0x3dc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d031      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a27      	ldr	r2, [pc, #156]	@ (8001ea4 <HAL_DMA_Abort_IT+0x3e0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d02c      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a25      	ldr	r2, [pc, #148]	@ (8001ea8 <HAL_DMA_Abort_IT+0x3e4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d027      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a24      	ldr	r2, [pc, #144]	@ (8001eac <HAL_DMA_Abort_IT+0x3e8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d022      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a22      	ldr	r2, [pc, #136]	@ (8001eb0 <HAL_DMA_Abort_IT+0x3ec>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d01d      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a21      	ldr	r2, [pc, #132]	@ (8001eb4 <HAL_DMA_Abort_IT+0x3f0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d018      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_DMA_Abort_IT+0x3f4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1e      	ldr	r2, [pc, #120]	@ (8001ebc <HAL_DMA_Abort_IT+0x3f8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00e      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <HAL_DMA_Abort_IT+0x3fc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d009      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <HAL_DMA_Abort_IT+0x400>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d004      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x3a2>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_DMA_Abort_IT+0x404>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d132      	bne.n	8001ecc <HAL_DMA_Abort_IT+0x408>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e031      	b.n	8001ece <HAL_DMA_Abort_IT+0x40a>
 8001e6a:	bf00      	nop
 8001e6c:	40020010 	.word	0x40020010
 8001e70:	40020028 	.word	0x40020028
 8001e74:	40020040 	.word	0x40020040
 8001e78:	40020058 	.word	0x40020058
 8001e7c:	40020070 	.word	0x40020070
 8001e80:	40020088 	.word	0x40020088
 8001e84:	400200a0 	.word	0x400200a0
 8001e88:	400200b8 	.word	0x400200b8
 8001e8c:	40020410 	.word	0x40020410
 8001e90:	40020428 	.word	0x40020428
 8001e94:	40020440 	.word	0x40020440
 8001e98:	40020458 	.word	0x40020458
 8001e9c:	40020470 	.word	0x40020470
 8001ea0:	40020488 	.word	0x40020488
 8001ea4:	400204a0 	.word	0x400204a0
 8001ea8:	400204b8 	.word	0x400204b8
 8001eac:	58025408 	.word	0x58025408
 8001eb0:	5802541c 	.word	0x5802541c
 8001eb4:	58025430 	.word	0x58025430
 8001eb8:	58025444 	.word	0x58025444
 8001ebc:	58025458 	.word	0x58025458
 8001ec0:	5802546c 	.word	0x5802546c
 8001ec4:	58025480 	.word	0x58025480
 8001ec8:	58025494 	.word	0x58025494
 8001ecc:	2300      	movs	r3, #0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d028      	beq.n	8001f24 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop

08001f50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f5c:	4b67      	ldr	r3, [pc, #412]	@ (80020fc <HAL_DMA_IRQHandler+0x1ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a67      	ldr	r2, [pc, #412]	@ (8002100 <HAL_DMA_IRQHandler+0x1b0>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0a9b      	lsrs	r3, r3, #10
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a5f      	ldr	r2, [pc, #380]	@ (8002104 <HAL_DMA_IRQHandler+0x1b4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d04a      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a5d      	ldr	r2, [pc, #372]	@ (8002108 <HAL_DMA_IRQHandler+0x1b8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d045      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800210c <HAL_DMA_IRQHandler+0x1bc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d040      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5a      	ldr	r2, [pc, #360]	@ (8002110 <HAL_DMA_IRQHandler+0x1c0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d03b      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a59      	ldr	r2, [pc, #356]	@ (8002114 <HAL_DMA_IRQHandler+0x1c4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d036      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a57      	ldr	r2, [pc, #348]	@ (8002118 <HAL_DMA_IRQHandler+0x1c8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d031      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a56      	ldr	r2, [pc, #344]	@ (800211c <HAL_DMA_IRQHandler+0x1cc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d02c      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a54      	ldr	r2, [pc, #336]	@ (8002120 <HAL_DMA_IRQHandler+0x1d0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d027      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a53      	ldr	r2, [pc, #332]	@ (8002124 <HAL_DMA_IRQHandler+0x1d4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d022      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a51      	ldr	r2, [pc, #324]	@ (8002128 <HAL_DMA_IRQHandler+0x1d8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01d      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a50      	ldr	r2, [pc, #320]	@ (800212c <HAL_DMA_IRQHandler+0x1dc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d018      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a4e      	ldr	r2, [pc, #312]	@ (8002130 <HAL_DMA_IRQHandler+0x1e0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a4d      	ldr	r2, [pc, #308]	@ (8002134 <HAL_DMA_IRQHandler+0x1e4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00e      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4b      	ldr	r2, [pc, #300]	@ (8002138 <HAL_DMA_IRQHandler+0x1e8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d009      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a4a      	ldr	r2, [pc, #296]	@ (800213c <HAL_DMA_IRQHandler+0x1ec>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d004      	beq.n	8002022 <HAL_DMA_IRQHandler+0xd2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a48      	ldr	r2, [pc, #288]	@ (8002140 <HAL_DMA_IRQHandler+0x1f0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_DMA_IRQHandler+0xd6>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_DMA_IRQHandler+0xd8>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 842b 	beq.w	8002884 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2208      	movs	r2, #8
 8002038:	409a      	lsls	r2, r3
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80a2 	beq.w	8002188 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a2e      	ldr	r2, [pc, #184]	@ (8002104 <HAL_DMA_IRQHandler+0x1b4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d04a      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a2d      	ldr	r2, [pc, #180]	@ (8002108 <HAL_DMA_IRQHandler+0x1b8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d045      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a2b      	ldr	r2, [pc, #172]	@ (800210c <HAL_DMA_IRQHandler+0x1bc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d040      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a2a      	ldr	r2, [pc, #168]	@ (8002110 <HAL_DMA_IRQHandler+0x1c0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d03b      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a28      	ldr	r2, [pc, #160]	@ (8002114 <HAL_DMA_IRQHandler+0x1c4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d036      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a27      	ldr	r2, [pc, #156]	@ (8002118 <HAL_DMA_IRQHandler+0x1c8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d031      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a25      	ldr	r2, [pc, #148]	@ (800211c <HAL_DMA_IRQHandler+0x1cc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02c      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a24      	ldr	r2, [pc, #144]	@ (8002120 <HAL_DMA_IRQHandler+0x1d0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d027      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <HAL_DMA_IRQHandler+0x1d4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d022      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a21      	ldr	r2, [pc, #132]	@ (8002128 <HAL_DMA_IRQHandler+0x1d8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d01d      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1f      	ldr	r2, [pc, #124]	@ (800212c <HAL_DMA_IRQHandler+0x1dc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d018      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002130 <HAL_DMA_IRQHandler+0x1e0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002134 <HAL_DMA_IRQHandler+0x1e4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00e      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002138 <HAL_DMA_IRQHandler+0x1e8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d009      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a19      	ldr	r2, [pc, #100]	@ (800213c <HAL_DMA_IRQHandler+0x1ec>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d004      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x194>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a18      	ldr	r2, [pc, #96]	@ (8002140 <HAL_DMA_IRQHandler+0x1f0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d12f      	bne.n	8002144 <HAL_DMA_IRQHandler+0x1f4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf14      	ite	ne
 80020f2:	2301      	movne	r3, #1
 80020f4:	2300      	moveq	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	e02e      	b.n	8002158 <HAL_DMA_IRQHandler+0x208>
 80020fa:	bf00      	nop
 80020fc:	24000000 	.word	0x24000000
 8002100:	1b4e81b5 	.word	0x1b4e81b5
 8002104:	40020010 	.word	0x40020010
 8002108:	40020028 	.word	0x40020028
 800210c:	40020040 	.word	0x40020040
 8002110:	40020058 	.word	0x40020058
 8002114:	40020070 	.word	0x40020070
 8002118:	40020088 	.word	0x40020088
 800211c:	400200a0 	.word	0x400200a0
 8002120:	400200b8 	.word	0x400200b8
 8002124:	40020410 	.word	0x40020410
 8002128:	40020428 	.word	0x40020428
 800212c:	40020440 	.word	0x40020440
 8002130:	40020458 	.word	0x40020458
 8002134:	40020470 	.word	0x40020470
 8002138:	40020488 	.word	0x40020488
 800213c:	400204a0 	.word	0x400204a0
 8002140:	400204b8 	.word	0x400204b8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0204 	bic.w	r2, r2, #4
 800216a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	2208      	movs	r2, #8
 8002176:	409a      	lsls	r2, r3
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d06e      	beq.n	800227c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a69      	ldr	r2, [pc, #420]	@ (8002348 <HAL_DMA_IRQHandler+0x3f8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04a      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a67      	ldr	r2, [pc, #412]	@ (800234c <HAL_DMA_IRQHandler+0x3fc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d045      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a66      	ldr	r2, [pc, #408]	@ (8002350 <HAL_DMA_IRQHandler+0x400>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d040      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a64      	ldr	r2, [pc, #400]	@ (8002354 <HAL_DMA_IRQHandler+0x404>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d03b      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a63      	ldr	r2, [pc, #396]	@ (8002358 <HAL_DMA_IRQHandler+0x408>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d036      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a61      	ldr	r2, [pc, #388]	@ (800235c <HAL_DMA_IRQHandler+0x40c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d031      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a60      	ldr	r2, [pc, #384]	@ (8002360 <HAL_DMA_IRQHandler+0x410>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d02c      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002364 <HAL_DMA_IRQHandler+0x414>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d027      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002368 <HAL_DMA_IRQHandler+0x418>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d022      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a5b      	ldr	r2, [pc, #364]	@ (800236c <HAL_DMA_IRQHandler+0x41c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01d      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5a      	ldr	r2, [pc, #360]	@ (8002370 <HAL_DMA_IRQHandler+0x420>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d018      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a58      	ldr	r2, [pc, #352]	@ (8002374 <HAL_DMA_IRQHandler+0x424>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a57      	ldr	r2, [pc, #348]	@ (8002378 <HAL_DMA_IRQHandler+0x428>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00e      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a55      	ldr	r2, [pc, #340]	@ (800237c <HAL_DMA_IRQHandler+0x42c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d009      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a54      	ldr	r2, [pc, #336]	@ (8002380 <HAL_DMA_IRQHandler+0x430>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d004      	beq.n	800223e <HAL_DMA_IRQHandler+0x2ee>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a52      	ldr	r2, [pc, #328]	@ (8002384 <HAL_DMA_IRQHandler+0x434>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10a      	bne.n	8002254 <HAL_DMA_IRQHandler+0x304>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e003      	b.n	800225c <HAL_DMA_IRQHandler+0x30c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	2201      	movs	r2, #1
 800226a:	409a      	lsls	r2, r3
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	f043 0202 	orr.w	r2, r3, #2
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2204      	movs	r2, #4
 8002286:	409a      	lsls	r2, r3
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 808f 	beq.w	80023b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2c      	ldr	r2, [pc, #176]	@ (8002348 <HAL_DMA_IRQHandler+0x3f8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d04a      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	@ (800234c <HAL_DMA_IRQHandler+0x3fc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d045      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a29      	ldr	r2, [pc, #164]	@ (8002350 <HAL_DMA_IRQHandler+0x400>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d040      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a27      	ldr	r2, [pc, #156]	@ (8002354 <HAL_DMA_IRQHandler+0x404>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d03b      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a26      	ldr	r2, [pc, #152]	@ (8002358 <HAL_DMA_IRQHandler+0x408>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d036      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a24      	ldr	r2, [pc, #144]	@ (800235c <HAL_DMA_IRQHandler+0x40c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d031      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a23      	ldr	r2, [pc, #140]	@ (8002360 <HAL_DMA_IRQHandler+0x410>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d02c      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a21      	ldr	r2, [pc, #132]	@ (8002364 <HAL_DMA_IRQHandler+0x414>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d027      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <HAL_DMA_IRQHandler+0x418>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d022      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1e      	ldr	r2, [pc, #120]	@ (800236c <HAL_DMA_IRQHandler+0x41c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01d      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <HAL_DMA_IRQHandler+0x420>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d018      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1b      	ldr	r2, [pc, #108]	@ (8002374 <HAL_DMA_IRQHandler+0x424>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1a      	ldr	r2, [pc, #104]	@ (8002378 <HAL_DMA_IRQHandler+0x428>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00e      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a18      	ldr	r2, [pc, #96]	@ (800237c <HAL_DMA_IRQHandler+0x42c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a17      	ldr	r2, [pc, #92]	@ (8002380 <HAL_DMA_IRQHandler+0x430>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d004      	beq.n	8002332 <HAL_DMA_IRQHandler+0x3e2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a15      	ldr	r2, [pc, #84]	@ (8002384 <HAL_DMA_IRQHandler+0x434>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d12a      	bne.n	8002388 <HAL_DMA_IRQHandler+0x438>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e023      	b.n	8002390 <HAL_DMA_IRQHandler+0x440>
 8002348:	40020010 	.word	0x40020010
 800234c:	40020028 	.word	0x40020028
 8002350:	40020040 	.word	0x40020040
 8002354:	40020058 	.word	0x40020058
 8002358:	40020070 	.word	0x40020070
 800235c:	40020088 	.word	0x40020088
 8002360:	400200a0 	.word	0x400200a0
 8002364:	400200b8 	.word	0x400200b8
 8002368:	40020410 	.word	0x40020410
 800236c:	40020428 	.word	0x40020428
 8002370:	40020440 	.word	0x40020440
 8002374:	40020458 	.word	0x40020458
 8002378:	40020470 	.word	0x40020470
 800237c:	40020488 	.word	0x40020488
 8002380:	400204a0 	.word	0x400204a0
 8002384:	400204b8 	.word	0x400204b8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2204      	movs	r2, #4
 800239e:	409a      	lsls	r2, r3
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a8:	f043 0204 	orr.w	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2210      	movs	r2, #16
 80023ba:	409a      	lsls	r2, r3
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a6 	beq.w	8002512 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a85      	ldr	r2, [pc, #532]	@ (80025e0 <HAL_DMA_IRQHandler+0x690>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d04a      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	@ (80025e4 <HAL_DMA_IRQHandler+0x694>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d045      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a82      	ldr	r2, [pc, #520]	@ (80025e8 <HAL_DMA_IRQHandler+0x698>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d040      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a80      	ldr	r2, [pc, #512]	@ (80025ec <HAL_DMA_IRQHandler+0x69c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d03b      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a7f      	ldr	r2, [pc, #508]	@ (80025f0 <HAL_DMA_IRQHandler+0x6a0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d036      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a7d      	ldr	r2, [pc, #500]	@ (80025f4 <HAL_DMA_IRQHandler+0x6a4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d031      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7c      	ldr	r2, [pc, #496]	@ (80025f8 <HAL_DMA_IRQHandler+0x6a8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d02c      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a7a      	ldr	r2, [pc, #488]	@ (80025fc <HAL_DMA_IRQHandler+0x6ac>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d027      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a79      	ldr	r2, [pc, #484]	@ (8002600 <HAL_DMA_IRQHandler+0x6b0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d022      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a77      	ldr	r2, [pc, #476]	@ (8002604 <HAL_DMA_IRQHandler+0x6b4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01d      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a76      	ldr	r2, [pc, #472]	@ (8002608 <HAL_DMA_IRQHandler+0x6b8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d018      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a74      	ldr	r2, [pc, #464]	@ (800260c <HAL_DMA_IRQHandler+0x6bc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a73      	ldr	r2, [pc, #460]	@ (8002610 <HAL_DMA_IRQHandler+0x6c0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00e      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a71      	ldr	r2, [pc, #452]	@ (8002614 <HAL_DMA_IRQHandler+0x6c4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a70      	ldr	r2, [pc, #448]	@ (8002618 <HAL_DMA_IRQHandler+0x6c8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d004      	beq.n	8002466 <HAL_DMA_IRQHandler+0x516>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6e      	ldr	r2, [pc, #440]	@ (800261c <HAL_DMA_IRQHandler+0x6cc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10a      	bne.n	800247c <HAL_DMA_IRQHandler+0x52c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	e009      	b.n	8002490 <HAL_DMA_IRQHandler+0x540>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d03e      	beq.n	8002512 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2210      	movs	r2, #16
 800249e:	409a      	lsls	r2, r3
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d018      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d108      	bne.n	80024d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d024      	beq.n	8002512 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
 80024d0:	e01f      	b.n	8002512 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01b      	beq.n	8002512 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
 80024e2:	e016      	b.n	8002512 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0208 	bic.w	r2, r2, #8
 8002500:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2220      	movs	r2, #32
 800251c:	409a      	lsls	r2, r3
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8110 	beq.w	8002748 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2c      	ldr	r2, [pc, #176]	@ (80025e0 <HAL_DMA_IRQHandler+0x690>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d04a      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2b      	ldr	r2, [pc, #172]	@ (80025e4 <HAL_DMA_IRQHandler+0x694>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d045      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a29      	ldr	r2, [pc, #164]	@ (80025e8 <HAL_DMA_IRQHandler+0x698>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d040      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a28      	ldr	r2, [pc, #160]	@ (80025ec <HAL_DMA_IRQHandler+0x69c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d03b      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a26      	ldr	r2, [pc, #152]	@ (80025f0 <HAL_DMA_IRQHandler+0x6a0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d036      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a25      	ldr	r2, [pc, #148]	@ (80025f4 <HAL_DMA_IRQHandler+0x6a4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d031      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a23      	ldr	r2, [pc, #140]	@ (80025f8 <HAL_DMA_IRQHandler+0x6a8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d02c      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a22      	ldr	r2, [pc, #136]	@ (80025fc <HAL_DMA_IRQHandler+0x6ac>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d027      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a20      	ldr	r2, [pc, #128]	@ (8002600 <HAL_DMA_IRQHandler+0x6b0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d022      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1f      	ldr	r2, [pc, #124]	@ (8002604 <HAL_DMA_IRQHandler+0x6b4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d01d      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1d      	ldr	r2, [pc, #116]	@ (8002608 <HAL_DMA_IRQHandler+0x6b8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d018      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <HAL_DMA_IRQHandler+0x6bc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d013      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002610 <HAL_DMA_IRQHandler+0x6c0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00e      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a19      	ldr	r2, [pc, #100]	@ (8002614 <HAL_DMA_IRQHandler+0x6c4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a17      	ldr	r2, [pc, #92]	@ (8002618 <HAL_DMA_IRQHandler+0x6c8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d004      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x678>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a16      	ldr	r2, [pc, #88]	@ (800261c <HAL_DMA_IRQHandler+0x6cc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d12b      	bne.n	8002620 <HAL_DMA_IRQHandler+0x6d0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	e02a      	b.n	8002634 <HAL_DMA_IRQHandler+0x6e4>
 80025de:	bf00      	nop
 80025e0:	40020010 	.word	0x40020010
 80025e4:	40020028 	.word	0x40020028
 80025e8:	40020040 	.word	0x40020040
 80025ec:	40020058 	.word	0x40020058
 80025f0:	40020070 	.word	0x40020070
 80025f4:	40020088 	.word	0x40020088
 80025f8:	400200a0 	.word	0x400200a0
 80025fc:	400200b8 	.word	0x400200b8
 8002600:	40020410 	.word	0x40020410
 8002604:	40020428 	.word	0x40020428
 8002608:	40020440 	.word	0x40020440
 800260c:	40020458 	.word	0x40020458
 8002610:	40020470 	.word	0x40020470
 8002614:	40020488 	.word	0x40020488
 8002618:	400204a0 	.word	0x400204a0
 800261c:	400204b8 	.word	0x400204b8
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8087 	beq.w	8002748 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2220      	movs	r2, #32
 8002644:	409a      	lsls	r2, r3
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b04      	cmp	r3, #4
 8002654:	d139      	bne.n	80026ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0216 	bic.w	r2, r2, #22
 8002664:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002674:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <HAL_DMA_IRQHandler+0x736>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0208 	bic.w	r2, r2, #8
 8002694:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	223f      	movs	r2, #63	@ 0x3f
 80026a0:	409a      	lsls	r2, r3
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 834a 	beq.w	8002d54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
          }
          return;
 80026c8:	e344      	b.n	8002d54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d018      	beq.n	800270a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d108      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d02c      	beq.n	8002748 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
 80026f6:	e027      	b.n	8002748 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
 8002708:	e01e      	b.n	8002748 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0210 	bic.w	r2, r2, #16
 8002726:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8306 	beq.w	8002d5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8088 	beq.w	8002870 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2204      	movs	r2, #4
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a7a      	ldr	r2, [pc, #488]	@ (8002958 <HAL_DMA_IRQHandler+0xa08>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d04a      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a79      	ldr	r2, [pc, #484]	@ (800295c <HAL_DMA_IRQHandler+0xa0c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d045      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a77      	ldr	r2, [pc, #476]	@ (8002960 <HAL_DMA_IRQHandler+0xa10>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d040      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a76      	ldr	r2, [pc, #472]	@ (8002964 <HAL_DMA_IRQHandler+0xa14>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d03b      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a74      	ldr	r2, [pc, #464]	@ (8002968 <HAL_DMA_IRQHandler+0xa18>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d036      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a73      	ldr	r2, [pc, #460]	@ (800296c <HAL_DMA_IRQHandler+0xa1c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d031      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a71      	ldr	r2, [pc, #452]	@ (8002970 <HAL_DMA_IRQHandler+0xa20>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d02c      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a70      	ldr	r2, [pc, #448]	@ (8002974 <HAL_DMA_IRQHandler+0xa24>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d027      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002978 <HAL_DMA_IRQHandler+0xa28>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d022      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6d      	ldr	r2, [pc, #436]	@ (800297c <HAL_DMA_IRQHandler+0xa2c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d01d      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002980 <HAL_DMA_IRQHandler+0xa30>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d018      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6a      	ldr	r2, [pc, #424]	@ (8002984 <HAL_DMA_IRQHandler+0xa34>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d013      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a68      	ldr	r2, [pc, #416]	@ (8002988 <HAL_DMA_IRQHandler+0xa38>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00e      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a67      	ldr	r2, [pc, #412]	@ (800298c <HAL_DMA_IRQHandler+0xa3c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a65      	ldr	r2, [pc, #404]	@ (8002990 <HAL_DMA_IRQHandler+0xa40>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_DMA_IRQHandler+0x8b8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a64      	ldr	r2, [pc, #400]	@ (8002994 <HAL_DMA_IRQHandler+0xa44>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <HAL_DMA_IRQHandler+0x8ca>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e007      	b.n	800282a <HAL_DMA_IRQHandler+0x8da>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3301      	adds	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002832:	429a      	cmp	r2, r3
 8002834:	d307      	bcc.n	8002846 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f2      	bne.n	800282a <HAL_DMA_IRQHandler+0x8da>
 8002844:	e000      	b.n	8002848 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002846:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800285e:	e003      	b.n	8002868 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8272 	beq.w	8002d5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
 8002882:	e26c      	b.n	8002d5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a43      	ldr	r2, [pc, #268]	@ (8002998 <HAL_DMA_IRQHandler+0xa48>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d022      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x984>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a42      	ldr	r2, [pc, #264]	@ (800299c <HAL_DMA_IRQHandler+0xa4c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d01d      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x984>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a40      	ldr	r2, [pc, #256]	@ (80029a0 <HAL_DMA_IRQHandler+0xa50>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d018      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x984>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a3f      	ldr	r2, [pc, #252]	@ (80029a4 <HAL_DMA_IRQHandler+0xa54>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x984>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a3d      	ldr	r2, [pc, #244]	@ (80029a8 <HAL_DMA_IRQHandler+0xa58>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00e      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x984>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a3c      	ldr	r2, [pc, #240]	@ (80029ac <HAL_DMA_IRQHandler+0xa5c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d009      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x984>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a3a      	ldr	r2, [pc, #232]	@ (80029b0 <HAL_DMA_IRQHandler+0xa60>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x984>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a39      	ldr	r2, [pc, #228]	@ (80029b4 <HAL_DMA_IRQHandler+0xa64>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d101      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x988>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_DMA_IRQHandler+0x98a>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 823f 	beq.w	8002d5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2204      	movs	r2, #4
 80028f2:	409a      	lsls	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80cd 	beq.w	8002a98 <HAL_DMA_IRQHandler+0xb48>
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80c7 	beq.w	8002a98 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2204      	movs	r2, #4
 8002914:	409a      	lsls	r2, r3
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d049      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8210 	beq.w	8002d58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002940:	e20a      	b.n	8002d58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8206 	beq.w	8002d58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002954:	e200      	b.n	8002d58 <HAL_DMA_IRQHandler+0xe08>
 8002956:	bf00      	nop
 8002958:	40020010 	.word	0x40020010
 800295c:	40020028 	.word	0x40020028
 8002960:	40020040 	.word	0x40020040
 8002964:	40020058 	.word	0x40020058
 8002968:	40020070 	.word	0x40020070
 800296c:	40020088 	.word	0x40020088
 8002970:	400200a0 	.word	0x400200a0
 8002974:	400200b8 	.word	0x400200b8
 8002978:	40020410 	.word	0x40020410
 800297c:	40020428 	.word	0x40020428
 8002980:	40020440 	.word	0x40020440
 8002984:	40020458 	.word	0x40020458
 8002988:	40020470 	.word	0x40020470
 800298c:	40020488 	.word	0x40020488
 8002990:	400204a0 	.word	0x400204a0
 8002994:	400204b8 	.word	0x400204b8
 8002998:	58025408 	.word	0x58025408
 800299c:	5802541c 	.word	0x5802541c
 80029a0:	58025430 	.word	0x58025430
 80029a4:	58025444 	.word	0x58025444
 80029a8:	58025458 	.word	0x58025458
 80029ac:	5802546c 	.word	0x5802546c
 80029b0:	58025480 	.word	0x58025480
 80029b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d160      	bne.n	8002a84 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7f      	ldr	r2, [pc, #508]	@ (8002bc4 <HAL_DMA_IRQHandler+0xc74>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d04a      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a7d      	ldr	r2, [pc, #500]	@ (8002bc8 <HAL_DMA_IRQHandler+0xc78>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d045      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7c      	ldr	r2, [pc, #496]	@ (8002bcc <HAL_DMA_IRQHandler+0xc7c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d040      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a7a      	ldr	r2, [pc, #488]	@ (8002bd0 <HAL_DMA_IRQHandler+0xc80>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d03b      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a79      	ldr	r2, [pc, #484]	@ (8002bd4 <HAL_DMA_IRQHandler+0xc84>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d036      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a77      	ldr	r2, [pc, #476]	@ (8002bd8 <HAL_DMA_IRQHandler+0xc88>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d031      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a76      	ldr	r2, [pc, #472]	@ (8002bdc <HAL_DMA_IRQHandler+0xc8c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d02c      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a74      	ldr	r2, [pc, #464]	@ (8002be0 <HAL_DMA_IRQHandler+0xc90>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d027      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a73      	ldr	r2, [pc, #460]	@ (8002be4 <HAL_DMA_IRQHandler+0xc94>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d022      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a71      	ldr	r2, [pc, #452]	@ (8002be8 <HAL_DMA_IRQHandler+0xc98>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01d      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a70      	ldr	r2, [pc, #448]	@ (8002bec <HAL_DMA_IRQHandler+0xc9c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d018      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6e      	ldr	r2, [pc, #440]	@ (8002bf0 <HAL_DMA_IRQHandler+0xca0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8002bf4 <HAL_DMA_IRQHandler+0xca4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6b      	ldr	r2, [pc, #428]	@ (8002bf8 <HAL_DMA_IRQHandler+0xca8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6a      	ldr	r2, [pc, #424]	@ (8002bfc <HAL_DMA_IRQHandler+0xcac>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xb12>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a68      	ldr	r2, [pc, #416]	@ (8002c00 <HAL_DMA_IRQHandler+0xcb0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <HAL_DMA_IRQHandler+0xb24>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0208 	bic.w	r2, r2, #8
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e007      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb34>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0204 	bic.w	r2, r2, #4
 8002a82:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8165 	beq.w	8002d58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a96:	e15f      	b.n	8002d58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80c5 	beq.w	8002c38 <HAL_DMA_IRQHandler+0xce8>
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80bf 	beq.w	8002c38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d018      	beq.n	8002b06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 813a 	beq.w	8002d5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002af0:	e134      	b.n	8002d5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8130 	beq.w	8002d5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b04:	e12a      	b.n	8002d5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f040 8089 	bne.w	8002c24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc4 <HAL_DMA_IRQHandler+0xc74>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d04a      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a29      	ldr	r2, [pc, #164]	@ (8002bc8 <HAL_DMA_IRQHandler+0xc78>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d045      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a28      	ldr	r2, [pc, #160]	@ (8002bcc <HAL_DMA_IRQHandler+0xc7c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d040      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a26      	ldr	r2, [pc, #152]	@ (8002bd0 <HAL_DMA_IRQHandler+0xc80>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d03b      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a25      	ldr	r2, [pc, #148]	@ (8002bd4 <HAL_DMA_IRQHandler+0xc84>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d036      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a23      	ldr	r2, [pc, #140]	@ (8002bd8 <HAL_DMA_IRQHandler+0xc88>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d031      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a22      	ldr	r2, [pc, #136]	@ (8002bdc <HAL_DMA_IRQHandler+0xc8c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d02c      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	@ (8002be0 <HAL_DMA_IRQHandler+0xc90>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d027      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1f      	ldr	r2, [pc, #124]	@ (8002be4 <HAL_DMA_IRQHandler+0xc94>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d022      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_DMA_IRQHandler+0xc98>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01d      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bec <HAL_DMA_IRQHandler+0xc9c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d018      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf0 <HAL_DMA_IRQHandler+0xca0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a19      	ldr	r2, [pc, #100]	@ (8002bf4 <HAL_DMA_IRQHandler+0xca4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00e      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a17      	ldr	r2, [pc, #92]	@ (8002bf8 <HAL_DMA_IRQHandler+0xca8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d009      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a16      	ldr	r2, [pc, #88]	@ (8002bfc <HAL_DMA_IRQHandler+0xcac>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xc62>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a14      	ldr	r2, [pc, #80]	@ (8002c00 <HAL_DMA_IRQHandler+0xcb0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d128      	bne.n	8002c04 <HAL_DMA_IRQHandler+0xcb4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0214 	bic.w	r2, r2, #20
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e027      	b.n	8002c14 <HAL_DMA_IRQHandler+0xcc4>
 8002bc4:	40020010 	.word	0x40020010
 8002bc8:	40020028 	.word	0x40020028
 8002bcc:	40020040 	.word	0x40020040
 8002bd0:	40020058 	.word	0x40020058
 8002bd4:	40020070 	.word	0x40020070
 8002bd8:	40020088 	.word	0x40020088
 8002bdc:	400200a0 	.word	0x400200a0
 8002be0:	400200b8 	.word	0x400200b8
 8002be4:	40020410 	.word	0x40020410
 8002be8:	40020428 	.word	0x40020428
 8002bec:	40020440 	.word	0x40020440
 8002bf0:	40020458 	.word	0x40020458
 8002bf4:	40020470 	.word	0x40020470
 8002bf8:	40020488 	.word	0x40020488
 8002bfc:	400204a0 	.word	0x400204a0
 8002c00:	400204b8 	.word	0x400204b8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 020a 	bic.w	r2, r2, #10
 8002c12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8097 	beq.w	8002d5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c36:	e091      	b.n	8002d5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2208      	movs	r2, #8
 8002c42:	409a      	lsls	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8088 	beq.w	8002d5e <HAL_DMA_IRQHandler+0xe0e>
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8082 	beq.w	8002d5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a41      	ldr	r2, [pc, #260]	@ (8002d64 <HAL_DMA_IRQHandler+0xe14>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d04a      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3f      	ldr	r2, [pc, #252]	@ (8002d68 <HAL_DMA_IRQHandler+0xe18>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d045      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a3e      	ldr	r2, [pc, #248]	@ (8002d6c <HAL_DMA_IRQHandler+0xe1c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d040      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d70 <HAL_DMA_IRQHandler+0xe20>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d03b      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a3b      	ldr	r2, [pc, #236]	@ (8002d74 <HAL_DMA_IRQHandler+0xe24>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d036      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a39      	ldr	r2, [pc, #228]	@ (8002d78 <HAL_DMA_IRQHandler+0xe28>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d031      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a38      	ldr	r2, [pc, #224]	@ (8002d7c <HAL_DMA_IRQHandler+0xe2c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d02c      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a36      	ldr	r2, [pc, #216]	@ (8002d80 <HAL_DMA_IRQHandler+0xe30>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d027      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <HAL_DMA_IRQHandler+0xe34>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d022      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a33      	ldr	r2, [pc, #204]	@ (8002d88 <HAL_DMA_IRQHandler+0xe38>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01d      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a32      	ldr	r2, [pc, #200]	@ (8002d8c <HAL_DMA_IRQHandler+0xe3c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d018      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a30      	ldr	r2, [pc, #192]	@ (8002d90 <HAL_DMA_IRQHandler+0xe40>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8002d94 <HAL_DMA_IRQHandler+0xe44>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00e      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d98 <HAL_DMA_IRQHandler+0xe48>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d009      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2c      	ldr	r2, [pc, #176]	@ (8002d9c <HAL_DMA_IRQHandler+0xe4c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d004      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xdaa>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8002da0 <HAL_DMA_IRQHandler+0xe50>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d108      	bne.n	8002d0c <HAL_DMA_IRQHandler+0xdbc>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 021c 	bic.w	r2, r2, #28
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e007      	b.n	8002d1c <HAL_DMA_IRQHandler+0xdcc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020e 	bic.w	r2, r2, #14
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2201      	movs	r2, #1
 8002d26:	409a      	lsls	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
 8002d52:	e004      	b.n	8002d5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002d54:	bf00      	nop
 8002d56:	e002      	b.n	8002d5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d58:	bf00      	nop
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002d5e:	3728      	adds	r7, #40	@ 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40020010 	.word	0x40020010
 8002d68:	40020028 	.word	0x40020028
 8002d6c:	40020040 	.word	0x40020040
 8002d70:	40020058 	.word	0x40020058
 8002d74:	40020070 	.word	0x40020070
 8002d78:	40020088 	.word	0x40020088
 8002d7c:	400200a0 	.word	0x400200a0
 8002d80:	400200b8 	.word	0x400200b8
 8002d84:	40020410 	.word	0x40020410
 8002d88:	40020428 	.word	0x40020428
 8002d8c:	40020440 	.word	0x40020440
 8002d90:	40020458 	.word	0x40020458
 8002d94:	40020470 	.word	0x40020470
 8002d98:	40020488 	.word	0x40020488
 8002d9c:	400204a0 	.word	0x400204a0
 8002da0:	400204b8 	.word	0x400204b8

08002da4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7f      	ldr	r2, [pc, #508]	@ (8002fc0 <DMA_SetConfig+0x21c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d072      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a7d      	ldr	r2, [pc, #500]	@ (8002fc4 <DMA_SetConfig+0x220>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d06d      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8002fc8 <DMA_SetConfig+0x224>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d068      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a7a      	ldr	r2, [pc, #488]	@ (8002fcc <DMA_SetConfig+0x228>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d063      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a79      	ldr	r2, [pc, #484]	@ (8002fd0 <DMA_SetConfig+0x22c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d05e      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a77      	ldr	r2, [pc, #476]	@ (8002fd4 <DMA_SetConfig+0x230>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d059      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a76      	ldr	r2, [pc, #472]	@ (8002fd8 <DMA_SetConfig+0x234>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d054      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a74      	ldr	r2, [pc, #464]	@ (8002fdc <DMA_SetConfig+0x238>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d04f      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a73      	ldr	r2, [pc, #460]	@ (8002fe0 <DMA_SetConfig+0x23c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a71      	ldr	r2, [pc, #452]	@ (8002fe4 <DMA_SetConfig+0x240>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a70      	ldr	r2, [pc, #448]	@ (8002fe8 <DMA_SetConfig+0x244>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6e      	ldr	r2, [pc, #440]	@ (8002fec <DMA_SetConfig+0x248>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ff0 <DMA_SetConfig+0x24c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a6b      	ldr	r2, [pc, #428]	@ (8002ff4 <DMA_SetConfig+0x250>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff8 <DMA_SetConfig+0x254>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a68      	ldr	r2, [pc, #416]	@ (8002ffc <DMA_SetConfig+0x258>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a67      	ldr	r2, [pc, #412]	@ (8003000 <DMA_SetConfig+0x25c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a65      	ldr	r2, [pc, #404]	@ (8003004 <DMA_SetConfig+0x260>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a64      	ldr	r2, [pc, #400]	@ (8003008 <DMA_SetConfig+0x264>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a62      	ldr	r2, [pc, #392]	@ (800300c <DMA_SetConfig+0x268>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a61      	ldr	r2, [pc, #388]	@ (8003010 <DMA_SetConfig+0x26c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a5f      	ldr	r2, [pc, #380]	@ (8003014 <DMA_SetConfig+0x270>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a5e      	ldr	r2, [pc, #376]	@ (8003018 <DMA_SetConfig+0x274>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <DMA_SetConfig+0x10a>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5c      	ldr	r2, [pc, #368]	@ (800301c <DMA_SetConfig+0x278>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <DMA_SetConfig+0x10e>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <DMA_SetConfig+0x110>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ec0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ed2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a39      	ldr	r2, [pc, #228]	@ (8002fc0 <DMA_SetConfig+0x21c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d04a      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a38      	ldr	r2, [pc, #224]	@ (8002fc4 <DMA_SetConfig+0x220>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d045      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a36      	ldr	r2, [pc, #216]	@ (8002fc8 <DMA_SetConfig+0x224>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d040      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a35      	ldr	r2, [pc, #212]	@ (8002fcc <DMA_SetConfig+0x228>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d03b      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a33      	ldr	r2, [pc, #204]	@ (8002fd0 <DMA_SetConfig+0x22c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d036      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a32      	ldr	r2, [pc, #200]	@ (8002fd4 <DMA_SetConfig+0x230>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d031      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a30      	ldr	r2, [pc, #192]	@ (8002fd8 <DMA_SetConfig+0x234>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02c      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002fdc <DMA_SetConfig+0x238>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d027      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe0 <DMA_SetConfig+0x23c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d022      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe4 <DMA_SetConfig+0x240>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d01d      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe8 <DMA_SetConfig+0x244>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d018      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a29      	ldr	r2, [pc, #164]	@ (8002fec <DMA_SetConfig+0x248>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a27      	ldr	r2, [pc, #156]	@ (8002ff0 <DMA_SetConfig+0x24c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00e      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a26      	ldr	r2, [pc, #152]	@ (8002ff4 <DMA_SetConfig+0x250>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a24      	ldr	r2, [pc, #144]	@ (8002ff8 <DMA_SetConfig+0x254>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <DMA_SetConfig+0x1d0>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a23      	ldr	r2, [pc, #140]	@ (8002ffc <DMA_SetConfig+0x258>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d101      	bne.n	8002f78 <DMA_SetConfig+0x1d4>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <DMA_SetConfig+0x1d6>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d059      	beq.n	8003032 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	223f      	movs	r2, #63	@ 0x3f
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b40      	cmp	r3, #64	@ 0x40
 8002fac:	d138      	bne.n	8003020 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002fbe:	e086      	b.n	80030ce <DMA_SetConfig+0x32a>
 8002fc0:	40020010 	.word	0x40020010
 8002fc4:	40020028 	.word	0x40020028
 8002fc8:	40020040 	.word	0x40020040
 8002fcc:	40020058 	.word	0x40020058
 8002fd0:	40020070 	.word	0x40020070
 8002fd4:	40020088 	.word	0x40020088
 8002fd8:	400200a0 	.word	0x400200a0
 8002fdc:	400200b8 	.word	0x400200b8
 8002fe0:	40020410 	.word	0x40020410
 8002fe4:	40020428 	.word	0x40020428
 8002fe8:	40020440 	.word	0x40020440
 8002fec:	40020458 	.word	0x40020458
 8002ff0:	40020470 	.word	0x40020470
 8002ff4:	40020488 	.word	0x40020488
 8002ff8:	400204a0 	.word	0x400204a0
 8002ffc:	400204b8 	.word	0x400204b8
 8003000:	58025408 	.word	0x58025408
 8003004:	5802541c 	.word	0x5802541c
 8003008:	58025430 	.word	0x58025430
 800300c:	58025444 	.word	0x58025444
 8003010:	58025458 	.word	0x58025458
 8003014:	5802546c 	.word	0x5802546c
 8003018:	58025480 	.word	0x58025480
 800301c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
}
 8003030:	e04d      	b.n	80030ce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a29      	ldr	r2, [pc, #164]	@ (80030dc <DMA_SetConfig+0x338>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <DMA_SetConfig+0x2de>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a27      	ldr	r2, [pc, #156]	@ (80030e0 <DMA_SetConfig+0x33c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01d      	beq.n	8003082 <DMA_SetConfig+0x2de>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a26      	ldr	r2, [pc, #152]	@ (80030e4 <DMA_SetConfig+0x340>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d018      	beq.n	8003082 <DMA_SetConfig+0x2de>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a24      	ldr	r2, [pc, #144]	@ (80030e8 <DMA_SetConfig+0x344>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <DMA_SetConfig+0x2de>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a23      	ldr	r2, [pc, #140]	@ (80030ec <DMA_SetConfig+0x348>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00e      	beq.n	8003082 <DMA_SetConfig+0x2de>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a21      	ldr	r2, [pc, #132]	@ (80030f0 <DMA_SetConfig+0x34c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d009      	beq.n	8003082 <DMA_SetConfig+0x2de>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a20      	ldr	r2, [pc, #128]	@ (80030f4 <DMA_SetConfig+0x350>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d004      	beq.n	8003082 <DMA_SetConfig+0x2de>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1e      	ldr	r2, [pc, #120]	@ (80030f8 <DMA_SetConfig+0x354>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d101      	bne.n	8003086 <DMA_SetConfig+0x2e2>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <DMA_SetConfig+0x2e4>
 8003086:	2300      	movs	r3, #0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2201      	movs	r2, #1
 8003096:	409a      	lsls	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d108      	bne.n	80030be <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	60da      	str	r2, [r3, #12]
}
 80030bc:	e007      	b.n	80030ce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	60da      	str	r2, [r3, #12]
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	58025408 	.word	0x58025408
 80030e0:	5802541c 	.word	0x5802541c
 80030e4:	58025430 	.word	0x58025430
 80030e8:	58025444 	.word	0x58025444
 80030ec:	58025458 	.word	0x58025458
 80030f0:	5802546c 	.word	0x5802546c
 80030f4:	58025480 	.word	0x58025480
 80030f8:	58025494 	.word	0x58025494

080030fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a42      	ldr	r2, [pc, #264]	@ (8003214 <DMA_CalcBaseAndBitshift+0x118>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d04a      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a41      	ldr	r2, [pc, #260]	@ (8003218 <DMA_CalcBaseAndBitshift+0x11c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d045      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a3f      	ldr	r2, [pc, #252]	@ (800321c <DMA_CalcBaseAndBitshift+0x120>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d040      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a3e      	ldr	r2, [pc, #248]	@ (8003220 <DMA_CalcBaseAndBitshift+0x124>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d03b      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a3c      	ldr	r2, [pc, #240]	@ (8003224 <DMA_CalcBaseAndBitshift+0x128>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d036      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a3b      	ldr	r2, [pc, #236]	@ (8003228 <DMA_CalcBaseAndBitshift+0x12c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d031      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a39      	ldr	r2, [pc, #228]	@ (800322c <DMA_CalcBaseAndBitshift+0x130>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02c      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a38      	ldr	r2, [pc, #224]	@ (8003230 <DMA_CalcBaseAndBitshift+0x134>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d027      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a36      	ldr	r2, [pc, #216]	@ (8003234 <DMA_CalcBaseAndBitshift+0x138>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d022      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a35      	ldr	r2, [pc, #212]	@ (8003238 <DMA_CalcBaseAndBitshift+0x13c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d01d      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a33      	ldr	r2, [pc, #204]	@ (800323c <DMA_CalcBaseAndBitshift+0x140>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d018      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a32      	ldr	r2, [pc, #200]	@ (8003240 <DMA_CalcBaseAndBitshift+0x144>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d013      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <DMA_CalcBaseAndBitshift+0x148>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00e      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2f      	ldr	r2, [pc, #188]	@ (8003248 <DMA_CalcBaseAndBitshift+0x14c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d009      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2d      	ldr	r2, [pc, #180]	@ (800324c <DMA_CalcBaseAndBitshift+0x150>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <DMA_CalcBaseAndBitshift+0xa8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2c      	ldr	r2, [pc, #176]	@ (8003250 <DMA_CalcBaseAndBitshift+0x154>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <DMA_CalcBaseAndBitshift+0xac>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <DMA_CalcBaseAndBitshift+0xae>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d024      	beq.n	80031f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3b10      	subs	r3, #16
 80031b6:	4a27      	ldr	r2, [pc, #156]	@ (8003254 <DMA_CalcBaseAndBitshift+0x158>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <DMA_CalcBaseAndBitshift+0x15c>)
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	461a      	mov	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d908      	bls.n	80031e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <DMA_CalcBaseAndBitshift+0x160>)
 80031de:	4013      	ands	r3, r2
 80031e0:	1d1a      	adds	r2, r3, #4
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80031e6:	e00d      	b.n	8003204 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <DMA_CalcBaseAndBitshift+0x160>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f6:	e005      	b.n	8003204 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40020010 	.word	0x40020010
 8003218:	40020028 	.word	0x40020028
 800321c:	40020040 	.word	0x40020040
 8003220:	40020058 	.word	0x40020058
 8003224:	40020070 	.word	0x40020070
 8003228:	40020088 	.word	0x40020088
 800322c:	400200a0 	.word	0x400200a0
 8003230:	400200b8 	.word	0x400200b8
 8003234:	40020410 	.word	0x40020410
 8003238:	40020428 	.word	0x40020428
 800323c:	40020440 	.word	0x40020440
 8003240:	40020458 	.word	0x40020458
 8003244:	40020470 	.word	0x40020470
 8003248:	40020488 	.word	0x40020488
 800324c:	400204a0 	.word	0x400204a0
 8003250:	400204b8 	.word	0x400204b8
 8003254:	aaaaaaab 	.word	0xaaaaaaab
 8003258:	08005f7c 	.word	0x08005f7c
 800325c:	fffffc00 	.word	0xfffffc00

08003260 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d120      	bne.n	80032b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	2b03      	cmp	r3, #3
 800327a:	d858      	bhi.n	800332e <DMA_CheckFifoParam+0xce>
 800327c:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <DMA_CheckFifoParam+0x24>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	08003295 	.word	0x08003295
 8003288:	080032a7 	.word	0x080032a7
 800328c:	08003295 	.word	0x08003295
 8003290:	0800332f 	.word	0x0800332f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d048      	beq.n	8003332 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032a4:	e045      	b.n	8003332 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032ae:	d142      	bne.n	8003336 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032b4:	e03f      	b.n	8003336 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032be:	d123      	bne.n	8003308 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d838      	bhi.n	800333a <DMA_CheckFifoParam+0xda>
 80032c8:	a201      	add	r2, pc, #4	@ (adr r2, 80032d0 <DMA_CheckFifoParam+0x70>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032e7 	.word	0x080032e7
 80032d8:	080032e1 	.word	0x080032e1
 80032dc:	080032f9 	.word	0x080032f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
        break;
 80032e4:	e030      	b.n	8003348 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d025      	beq.n	800333e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032f6:	e022      	b.n	800333e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003300:	d11f      	bne.n	8003342 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003306:	e01c      	b.n	8003342 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	2b02      	cmp	r3, #2
 800330e:	d902      	bls.n	8003316 <DMA_CheckFifoParam+0xb6>
 8003310:	2b03      	cmp	r3, #3
 8003312:	d003      	beq.n	800331c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003314:	e018      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
        break;
 800331a:	e015      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00e      	beq.n	8003346 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
    break;
 800332c:	e00b      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
        break;
 800332e:	bf00      	nop
 8003330:	e00a      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
        break;
 8003332:	bf00      	nop
 8003334:	e008      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
        break;
 8003336:	bf00      	nop
 8003338:	e006      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
        break;
 800333a:	bf00      	nop
 800333c:	e004      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
        break;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
        break;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
    break;
 8003346:	bf00      	nop
    }
  }

  return status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop

08003358 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a38      	ldr	r2, [pc, #224]	@ (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d022      	beq.n	80033b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a36      	ldr	r2, [pc, #216]	@ (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01d      	beq.n	80033b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a35      	ldr	r2, [pc, #212]	@ (8003454 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d018      	beq.n	80033b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a33      	ldr	r2, [pc, #204]	@ (8003458 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a32      	ldr	r2, [pc, #200]	@ (800345c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a30      	ldr	r2, [pc, #192]	@ (8003460 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003464 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003468 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01a      	beq.n	80033f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	3b08      	subs	r3, #8
 80033c8:	4a28      	ldr	r2, [pc, #160]	@ (800346c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4b26      	ldr	r3, [pc, #152]	@ (8003470 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a24      	ldr	r2, [pc, #144]	@ (8003474 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80033e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2201      	movs	r2, #1
 80033ee:	409a      	lsls	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80033f4:	e024      	b.n	8003440 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3b10      	subs	r3, #16
 80033fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003478 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4a1c      	ldr	r2, [pc, #112]	@ (800347c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d806      	bhi.n	800341e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4a1b      	ldr	r2, [pc, #108]	@ (8003480 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d902      	bls.n	800341e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3308      	adds	r3, #8
 800341c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4b18      	ldr	r3, [pc, #96]	@ (8003484 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	461a      	mov	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a16      	ldr	r2, [pc, #88]	@ (8003488 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003430:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	2201      	movs	r2, #1
 800343a:	409a      	lsls	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	58025408 	.word	0x58025408
 8003450:	5802541c 	.word	0x5802541c
 8003454:	58025430 	.word	0x58025430
 8003458:	58025444 	.word	0x58025444
 800345c:	58025458 	.word	0x58025458
 8003460:	5802546c 	.word	0x5802546c
 8003464:	58025480 	.word	0x58025480
 8003468:	58025494 	.word	0x58025494
 800346c:	cccccccd 	.word	0xcccccccd
 8003470:	16009600 	.word	0x16009600
 8003474:	58025880 	.word	0x58025880
 8003478:	aaaaaaab 	.word	0xaaaaaaab
 800347c:	400204b8 	.word	0x400204b8
 8003480:	4002040f 	.word	0x4002040f
 8003484:	10008200 	.word	0x10008200
 8003488:	40020880 	.word	0x40020880

0800348c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04a      	beq.n	8003538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d847      	bhi.n	8003538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a25      	ldr	r2, [pc, #148]	@ (8003544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d022      	beq.n	80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a24      	ldr	r2, [pc, #144]	@ (8003548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01d      	beq.n	80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a22      	ldr	r2, [pc, #136]	@ (800354c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d018      	beq.n	80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a21      	ldr	r2, [pc, #132]	@ (8003550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1e      	ldr	r2, [pc, #120]	@ (8003558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d009      	beq.n	80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1c      	ldr	r2, [pc, #112]	@ (800355c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80034fc:	2300      	movs	r3, #0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4b17      	ldr	r3, [pc, #92]	@ (8003564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a15      	ldr	r2, [pc, #84]	@ (8003568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003514:	671a      	str	r2, [r3, #112]	@ 0x70
 8003516:	e009      	b.n	800352c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4b14      	ldr	r3, [pc, #80]	@ (800356c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	461a      	mov	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a11      	ldr	r2, [pc, #68]	@ (8003570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800352a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3b01      	subs	r3, #1
 8003530:	2201      	movs	r2, #1
 8003532:	409a      	lsls	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	58025408 	.word	0x58025408
 8003548:	5802541c 	.word	0x5802541c
 800354c:	58025430 	.word	0x58025430
 8003550:	58025444 	.word	0x58025444
 8003554:	58025458 	.word	0x58025458
 8003558:	5802546c 	.word	0x5802546c
 800355c:	58025480 	.word	0x58025480
 8003560:	58025494 	.word	0x58025494
 8003564:	1600963f 	.word	0x1600963f
 8003568:	58025940 	.word	0x58025940
 800356c:	1000823f 	.word	0x1000823f
 8003570:	40020940 	.word	0x40020940

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	@ 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003582:	4b86      	ldr	r3, [pc, #536]	@ (800379c <HAL_GPIO_Init+0x228>)
 8003584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003586:	e18c      	b.n	80038a2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	2101      	movs	r1, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 817e 	beq.w	800389c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d005      	beq.n	80035b8 <HAL_GPIO_Init+0x44>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d130      	bne.n	800361a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ee:	2201      	movs	r2, #1
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 0201 	and.w	r2, r3, #1
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b03      	cmp	r3, #3
 8003624:	d017      	beq.n	8003656 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2203      	movs	r2, #3
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d123      	bne.n	80036aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	08da      	lsrs	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	220f      	movs	r2, #15
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	08da      	lsrs	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3208      	adds	r2, #8
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	2203      	movs	r2, #3
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0203 	and.w	r2, r3, #3
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80d8 	beq.w	800389c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ec:	4b2c      	ldr	r3, [pc, #176]	@ (80037a0 <HAL_GPIO_Init+0x22c>)
 80036ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036f2:	4a2b      	ldr	r2, [pc, #172]	@ (80037a0 <HAL_GPIO_Init+0x22c>)
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80036fc:	4b28      	ldr	r3, [pc, #160]	@ (80037a0 <HAL_GPIO_Init+0x22c>)
 80036fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800370a:	4a26      	ldr	r2, [pc, #152]	@ (80037a4 <HAL_GPIO_Init+0x230>)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	3302      	adds	r3, #2
 8003712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	220f      	movs	r2, #15
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a1d      	ldr	r2, [pc, #116]	@ (80037a8 <HAL_GPIO_Init+0x234>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d04a      	beq.n	80037cc <HAL_GPIO_Init+0x258>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <HAL_GPIO_Init+0x238>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d02b      	beq.n	8003796 <HAL_GPIO_Init+0x222>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1b      	ldr	r2, [pc, #108]	@ (80037b0 <HAL_GPIO_Init+0x23c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d025      	beq.n	8003792 <HAL_GPIO_Init+0x21e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1a      	ldr	r2, [pc, #104]	@ (80037b4 <HAL_GPIO_Init+0x240>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01f      	beq.n	800378e <HAL_GPIO_Init+0x21a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <HAL_GPIO_Init+0x244>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d019      	beq.n	800378a <HAL_GPIO_Init+0x216>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <HAL_GPIO_Init+0x248>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <HAL_GPIO_Init+0x212>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <HAL_GPIO_Init+0x24c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00d      	beq.n	8003782 <HAL_GPIO_Init+0x20e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a16      	ldr	r2, [pc, #88]	@ (80037c4 <HAL_GPIO_Init+0x250>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <HAL_GPIO_Init+0x20a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <HAL_GPIO_Init+0x254>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <HAL_GPIO_Init+0x206>
 8003776:	2309      	movs	r3, #9
 8003778:	e029      	b.n	80037ce <HAL_GPIO_Init+0x25a>
 800377a:	230a      	movs	r3, #10
 800377c:	e027      	b.n	80037ce <HAL_GPIO_Init+0x25a>
 800377e:	2307      	movs	r3, #7
 8003780:	e025      	b.n	80037ce <HAL_GPIO_Init+0x25a>
 8003782:	2306      	movs	r3, #6
 8003784:	e023      	b.n	80037ce <HAL_GPIO_Init+0x25a>
 8003786:	2305      	movs	r3, #5
 8003788:	e021      	b.n	80037ce <HAL_GPIO_Init+0x25a>
 800378a:	2304      	movs	r3, #4
 800378c:	e01f      	b.n	80037ce <HAL_GPIO_Init+0x25a>
 800378e:	2303      	movs	r3, #3
 8003790:	e01d      	b.n	80037ce <HAL_GPIO_Init+0x25a>
 8003792:	2302      	movs	r3, #2
 8003794:	e01b      	b.n	80037ce <HAL_GPIO_Init+0x25a>
 8003796:	2301      	movs	r3, #1
 8003798:	e019      	b.n	80037ce <HAL_GPIO_Init+0x25a>
 800379a:	bf00      	nop
 800379c:	58000080 	.word	0x58000080
 80037a0:	58024400 	.word	0x58024400
 80037a4:	58000400 	.word	0x58000400
 80037a8:	58020000 	.word	0x58020000
 80037ac:	58020400 	.word	0x58020400
 80037b0:	58020800 	.word	0x58020800
 80037b4:	58020c00 	.word	0x58020c00
 80037b8:	58021000 	.word	0x58021000
 80037bc:	58021400 	.word	0x58021400
 80037c0:	58021800 	.word	0x58021800
 80037c4:	58021c00 	.word	0x58021c00
 80037c8:	58022400 	.word	0x58022400
 80037cc:	2300      	movs	r3, #0
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	f002 0203 	and.w	r2, r2, #3
 80037d4:	0092      	lsls	r2, r2, #2
 80037d6:	4093      	lsls	r3, r2
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037de:	4938      	ldr	r1, [pc, #224]	@ (80038c0 <HAL_GPIO_Init+0x34c>)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	3301      	adds	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f47f ae6b 	bne.w	8003588 <HAL_GPIO_Init+0x14>
  }
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	3724      	adds	r7, #36	@ 0x24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	58000400 	.word	0x58000400

080038c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
 80038d0:	4613      	mov	r3, r2
 80038d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038d4:	787b      	ldrb	r3, [r7, #1]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038e0:	e003      	b.n	80038ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038e2:	887b      	ldrh	r3, [r7, #2]
 80038e4:	041a      	lsls	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	619a      	str	r2, [r3, #24]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003900:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <HAL_PWREx_ConfigSupply+0x70>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b04      	cmp	r3, #4
 800390a:	d00a      	beq.n	8003922 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800390c:	4b16      	ldr	r3, [pc, #88]	@ (8003968 <HAL_PWREx_ConfigSupply+0x70>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	429a      	cmp	r2, r3
 8003918:	d001      	beq.n	800391e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e01f      	b.n	800395e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e01d      	b.n	800395e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003922:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_PWREx_ConfigSupply+0x70>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f023 0207 	bic.w	r2, r3, #7
 800392a:	490f      	ldr	r1, [pc, #60]	@ (8003968 <HAL_PWREx_ConfigSupply+0x70>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4313      	orrs	r3, r2
 8003930:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003932:	f7fd f9c5 	bl	8000cc0 <HAL_GetTick>
 8003936:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003938:	e009      	b.n	800394e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800393a:	f7fd f9c1 	bl	8000cc0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003948:	d901      	bls.n	800394e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e007      	b.n	800395e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_PWREx_ConfigSupply+0x70>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800395a:	d1ee      	bne.n	800393a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	58024800 	.word	0x58024800

0800396c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	@ 0x30
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e3c8      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8087 	beq.w	8003a9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398c:	4b88      	ldr	r3, [pc, #544]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003996:	4b86      	ldr	r3, [pc, #536]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800399c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d007      	beq.n	80039b2 <HAL_RCC_OscConfig+0x46>
 80039a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a4:	2b18      	cmp	r3, #24
 80039a6:	d110      	bne.n	80039ca <HAL_RCC_OscConfig+0x5e>
 80039a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d10b      	bne.n	80039ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b2:	4b7f      	ldr	r3, [pc, #508]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d06c      	beq.n	8003a98 <HAL_RCC_OscConfig+0x12c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d168      	bne.n	8003a98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e3a2      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x76>
 80039d4:	4b76      	ldr	r3, [pc, #472]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a75      	ldr	r2, [pc, #468]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e02e      	b.n	8003a40 <HAL_RCC_OscConfig+0xd4>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x98>
 80039ea:	4b71      	ldr	r3, [pc, #452]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a70      	ldr	r2, [pc, #448]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 80039f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b6e      	ldr	r3, [pc, #440]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6d      	ldr	r2, [pc, #436]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 80039fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e01d      	b.n	8003a40 <HAL_RCC_OscConfig+0xd4>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0xbc>
 8003a0e:	4b68      	ldr	r3, [pc, #416]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a67      	ldr	r2, [pc, #412]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b65      	ldr	r3, [pc, #404]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a64      	ldr	r2, [pc, #400]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e00b      	b.n	8003a40 <HAL_RCC_OscConfig+0xd4>
 8003a28:	4b61      	ldr	r3, [pc, #388]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a60      	ldr	r2, [pc, #384]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5d      	ldr	r2, [pc, #372]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d013      	beq.n	8003a70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fd f93a 	bl	8000cc0 <HAL_GetTick>
 8003a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fd f936 	bl	8000cc0 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	@ 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e356      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a62:	4b53      	ldr	r3, [pc, #332]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0xe4>
 8003a6e:	e014      	b.n	8003a9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fd f926 	bl	8000cc0 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fd f922 	bl	8000cc0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	@ 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e342      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a8a:	4b49      	ldr	r3, [pc, #292]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x10c>
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 808c 	beq.w	8003bc0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa8:	4b41      	ldr	r3, [pc, #260]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ab0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <HAL_RCC_OscConfig+0x162>
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	2b18      	cmp	r3, #24
 8003ac2:	d137      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1c8>
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d132      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ace:	4b38      	ldr	r3, [pc, #224]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x17a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e314      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ae6:	4b32      	ldr	r3, [pc, #200]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0219 	bic.w	r2, r3, #25
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	492f      	ldr	r1, [pc, #188]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fd f8e2 	bl	8000cc0 <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b00:	f7fd f8de 	bl	8000cc0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e2fe      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b12:	4b27      	ldr	r3, [pc, #156]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	4920      	ldr	r1, [pc, #128]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b32:	e045      	b.n	8003bc0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d026      	beq.n	8003b8a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 0219 	bic.w	r2, r3, #25
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4919      	ldr	r1, [pc, #100]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fd f8b7 	bl	8000cc0 <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fd f8b3 	bl	8000cc0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e2d3      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b68:	4b11      	ldr	r3, [pc, #68]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	490b      	ldr	r1, [pc, #44]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
 8003b88:	e01a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8a:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a08      	ldr	r2, [pc, #32]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fd f893 	bl	8000cc0 <HAL_GetTick>
 8003b9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9e:	f7fd f88f 	bl	8000cc0 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d903      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e2af      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
 8003bb0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bb4:	4b96      	ldr	r3, [pc, #600]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ee      	bne.n	8003b9e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d06a      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bcc:	4b90      	ldr	r3, [pc, #576]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bd4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bd6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d007      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x286>
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b18      	cmp	r3, #24
 8003be6:	d11b      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2b4>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d116      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bf2:	4b87      	ldr	r3, [pc, #540]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x29e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	2b80      	cmp	r3, #128	@ 0x80
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e282      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c0a:	4b81      	ldr	r3, [pc, #516]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	061b      	lsls	r3, r3, #24
 8003c18:	497d      	ldr	r1, [pc, #500]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c1e:	e040      	b.n	8003ca2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d023      	beq.n	8003c70 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c28:	4b79      	ldr	r3, [pc, #484]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a78      	ldr	r2, [pc, #480]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd f844 	bl	8000cc0 <HAL_GetTick>
 8003c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c3c:	f7fd f840 	bl	8000cc0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e260      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c4e:	4b70      	ldr	r3, [pc, #448]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	061b      	lsls	r3, r3, #24
 8003c68:	4969      	ldr	r1, [pc, #420]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60cb      	str	r3, [r1, #12]
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c70:	4b67      	ldr	r3, [pc, #412]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a66      	ldr	r2, [pc, #408]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd f820 	bl	8000cc0 <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c84:	f7fd f81c 	bl	8000cc0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e23c      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c96:	4b5e      	ldr	r3, [pc, #376]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d036      	beq.n	8003d1c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d019      	beq.n	8003cea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b56      	ldr	r3, [pc, #344]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cba:	4a55      	ldr	r2, [pc, #340]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc2:	f7fc fffd 	bl	8000cc0 <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cca:	f7fc fff9 	bl	8000cc0 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e219      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cdc:	4b4c      	ldr	r3, [pc, #304]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x35e>
 8003ce8:	e018      	b.n	8003d1c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cea:	4b49      	ldr	r3, [pc, #292]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cee:	4a48      	ldr	r2, [pc, #288]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fc ffe3 	bl	8000cc0 <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fc ffdf 	bl	8000cc0 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1ff      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d10:	4b3f      	ldr	r3, [pc, #252]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f0      	bne.n	8003cfe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d036      	beq.n	8003d96 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d019      	beq.n	8003d64 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d30:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a36      	ldr	r2, [pc, #216]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003d36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d3c:	f7fc ffc0 	bl	8000cc0 <HAL_GetTick>
 8003d40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d44:	f7fc ffbc 	bl	8000cc0 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1dc      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d56:	4b2e      	ldr	r3, [pc, #184]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x3d8>
 8003d62:	e018      	b.n	8003d96 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d64:	4b2a      	ldr	r3, [pc, #168]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a29      	ldr	r2, [pc, #164]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003d6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d70:	f7fc ffa6 	bl	8000cc0 <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d78:	f7fc ffa2 	bl	8000cc0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1c2      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d8a:	4b21      	ldr	r3, [pc, #132]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8086 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003da4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x4a8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e14 <HAL_RCC_OscConfig+0x4a8>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003db0:	f7fc ff86 	bl	8000cc0 <HAL_GetTick>
 8003db4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fc ff82 	bl	8000cc0 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	@ 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e1a2      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <HAL_RCC_OscConfig+0x4a8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d106      	bne.n	8003dec <HAL_RCC_OscConfig+0x480>
 8003dde:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de2:	4a0b      	ldr	r2, [pc, #44]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dea:	e032      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d111      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4ac>
 8003df4:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	4a05      	ldr	r2, [pc, #20]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e04:	4a02      	ldr	r2, [pc, #8]	@ (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003e06:	f023 0304 	bic.w	r3, r3, #4
 8003e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0c:	e021      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e6>
 8003e0e:	bf00      	nop
 8003e10:	58024400 	.word	0x58024400
 8003e14:	58024800 	.word	0x58024800
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d10c      	bne.n	8003e3a <HAL_RCC_OscConfig+0x4ce>
 8003e20:	4b83      	ldr	r3, [pc, #524]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	4a82      	ldr	r2, [pc, #520]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2c:	4b80      	ldr	r3, [pc, #512]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	4a7f      	ldr	r2, [pc, #508]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e38:	e00b      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e6>
 8003e3a:	4b7d      	ldr	r3, [pc, #500]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a7c      	ldr	r2, [pc, #496]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e46:	4b7a      	ldr	r3, [pc, #488]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	4a79      	ldr	r2, [pc, #484]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d015      	beq.n	8003e86 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fc ff31 	bl	8000cc0 <HAL_GetTick>
 8003e5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fc ff2d 	bl	8000cc0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e14b      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e78:	4b6d      	ldr	r3, [pc, #436]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ee      	beq.n	8003e62 <HAL_RCC_OscConfig+0x4f6>
 8003e84:	e014      	b.n	8003eb0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fc ff1b 	bl	8000cc0 <HAL_GetTick>
 8003e8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fc ff17 	bl	8000cc0 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e135      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ea4:	4b62      	ldr	r3, [pc, #392]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ee      	bne.n	8003e8e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 812a 	beq.w	800410e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003eba:	4b5d      	ldr	r3, [pc, #372]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ec2:	2b18      	cmp	r3, #24
 8003ec4:	f000 80ba 	beq.w	800403c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	f040 8095 	bne.w	8003ffc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b57      	ldr	r3, [pc, #348]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a56      	ldr	r2, [pc, #344]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003ed8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fc feef 	bl	8000cc0 <HAL_GetTick>
 8003ee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fc feeb 	bl	8000cc0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e10b      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f04:	4b4a      	ldr	r3, [pc, #296]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f08:	4b4a      	ldr	r3, [pc, #296]	@ (8004034 <HAL_RCC_OscConfig+0x6c8>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f14:	0112      	lsls	r2, r2, #4
 8003f16:	430a      	orrs	r2, r1
 8003f18:	4945      	ldr	r1, [pc, #276]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	3b01      	subs	r3, #1
 8003f24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	025b      	lsls	r3, r3, #9
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	3b01      	subs	r3, #1
 8003f48:	061b      	lsls	r3, r3, #24
 8003f4a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f4e:	4938      	ldr	r1, [pc, #224]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f54:	4b36      	ldr	r3, [pc, #216]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	4a35      	ldr	r2, [pc, #212]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f60:	4b33      	ldr	r3, [pc, #204]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f64:	4b34      	ldr	r3, [pc, #208]	@ (8004038 <HAL_RCC_OscConfig+0x6cc>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f6c:	00d2      	lsls	r2, r2, #3
 8003f6e:	4930      	ldr	r1, [pc, #192]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f74:	4b2e      	ldr	r3, [pc, #184]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	f023 020c 	bic.w	r2, r3, #12
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	492b      	ldr	r1, [pc, #172]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f86:	4b2a      	ldr	r3, [pc, #168]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	f023 0202 	bic.w	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	4927      	ldr	r1, [pc, #156]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f98:	4b25      	ldr	r3, [pc, #148]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	4a24      	ldr	r2, [pc, #144]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa4:	4b22      	ldr	r3, [pc, #136]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	4a21      	ldr	r2, [pc, #132]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003fb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc8:	4b19      	ldr	r3, [pc, #100]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fc fe74 	bl	8000cc0 <HAL_GetTick>
 8003fd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fc fe70 	bl	8000cc0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e090      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fee:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x670>
 8003ffa:	e088      	b.n	800410e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0b      	ldr	r2, [pc, #44]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8004002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fc fe5a 	bl	8000cc0 <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fc fe56 	bl	8000cc0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e076      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004022:	4b03      	ldr	r3, [pc, #12]	@ (8004030 <HAL_RCC_OscConfig+0x6c4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x6a4>
 800402e:	e06e      	b.n	800410e <HAL_RCC_OscConfig+0x7a2>
 8004030:	58024400 	.word	0x58024400
 8004034:	fffffc0c 	.word	0xfffffc0c
 8004038:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800403c:	4b36      	ldr	r3, [pc, #216]	@ (8004118 <HAL_RCC_OscConfig+0x7ac>)
 800403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004040:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004042:	4b35      	ldr	r3, [pc, #212]	@ (8004118 <HAL_RCC_OscConfig+0x7ac>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	2b01      	cmp	r3, #1
 800404e:	d031      	beq.n	80040b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f003 0203 	and.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d12a      	bne.n	80040b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d122      	bne.n	80040b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d11a      	bne.n	80040b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	0a5b      	lsrs	r3, r3, #9
 8004082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d111      	bne.n	80040b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d108      	bne.n	80040b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	0e1b      	lsrs	r3, r3, #24
 80040a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e02b      	b.n	8004110 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040b8:	4b17      	ldr	r3, [pc, #92]	@ (8004118 <HAL_RCC_OscConfig+0x7ac>)
 80040ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040bc:	08db      	lsrs	r3, r3, #3
 80040be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d01f      	beq.n	800410e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_RCC_OscConfig+0x7ac>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	4a11      	ldr	r2, [pc, #68]	@ (8004118 <HAL_RCC_OscConfig+0x7ac>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040da:	f7fc fdf1 	bl	8000cc0 <HAL_GetTick>
 80040de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040e0:	bf00      	nop
 80040e2:	f7fc fded 	bl	8000cc0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d0f9      	beq.n	80040e2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004118 <HAL_RCC_OscConfig+0x7ac>)
 80040f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040f2:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <HAL_RCC_OscConfig+0x7b0>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040fa:	00d2      	lsls	r2, r2, #3
 80040fc:	4906      	ldr	r1, [pc, #24]	@ (8004118 <HAL_RCC_OscConfig+0x7ac>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004102:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <HAL_RCC_OscConfig+0x7ac>)
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	4a04      	ldr	r2, [pc, #16]	@ (8004118 <HAL_RCC_OscConfig+0x7ac>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3730      	adds	r7, #48	@ 0x30
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	58024400 	.word	0x58024400
 800411c:	ffff0007 	.word	0xffff0007

08004120 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e19c      	b.n	800446e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b8a      	ldr	r3, [pc, #552]	@ (8004360 <HAL_RCC_ClockConfig+0x240>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d910      	bls.n	8004164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b87      	ldr	r3, [pc, #540]	@ (8004360 <HAL_RCC_ClockConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 020f 	bic.w	r2, r3, #15
 800414a:	4985      	ldr	r1, [pc, #532]	@ (8004360 <HAL_RCC_ClockConfig+0x240>)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b83      	ldr	r3, [pc, #524]	@ (8004360 <HAL_RCC_ClockConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e184      	b.n	800446e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d010      	beq.n	8004192 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	4b7b      	ldr	r3, [pc, #492]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800417c:	429a      	cmp	r2, r3
 800417e:	d908      	bls.n	8004192 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004180:	4b78      	ldr	r3, [pc, #480]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	4975      	ldr	r1, [pc, #468]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 800418e:	4313      	orrs	r3, r2
 8004190:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d010      	beq.n	80041c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	4b70      	ldr	r3, [pc, #448]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d908      	bls.n	80041c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	496a      	ldr	r1, [pc, #424]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d010      	beq.n	80041ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	4b64      	ldr	r3, [pc, #400]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041d8:	429a      	cmp	r2, r3
 80041da:	d908      	bls.n	80041ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041dc:	4b61      	ldr	r3, [pc, #388]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	495e      	ldr	r1, [pc, #376]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d010      	beq.n	800421c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	4b59      	ldr	r3, [pc, #356]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004206:	429a      	cmp	r2, r3
 8004208:	d908      	bls.n	800421c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800420a:	4b56      	ldr	r3, [pc, #344]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	4953      	ldr	r1, [pc, #332]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004218:	4313      	orrs	r3, r2
 800421a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	4b4d      	ldr	r3, [pc, #308]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	429a      	cmp	r2, r3
 8004236:	d908      	bls.n	800424a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b4a      	ldr	r3, [pc, #296]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f023 020f 	bic.w	r2, r3, #15
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4947      	ldr	r1, [pc, #284]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004246:	4313      	orrs	r3, r2
 8004248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d055      	beq.n	8004302 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004256:	4b43      	ldr	r3, [pc, #268]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	4940      	ldr	r1, [pc, #256]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004264:	4313      	orrs	r3, r2
 8004266:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d107      	bne.n	8004280 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004270:	4b3c      	ldr	r3, [pc, #240]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d121      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0f6      	b.n	800446e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d107      	bne.n	8004298 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004288:	4b36      	ldr	r3, [pc, #216]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d115      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0ea      	b.n	800446e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042a0:	4b30      	ldr	r3, [pc, #192]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0de      	b.n	800446e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0d6      	b.n	800446e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042c0:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f023 0207 	bic.w	r2, r3, #7
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4925      	ldr	r1, [pc, #148]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fc fcf5 	bl	8000cc0 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042da:	f7fc fcf1 	bl	8000cc0 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e0be      	b.n	800446e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	429a      	cmp	r2, r3
 8004300:	d1eb      	bne.n	80042da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d010      	beq.n	8004330 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	4b14      	ldr	r3, [pc, #80]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	429a      	cmp	r2, r3
 800431c:	d208      	bcs.n	8004330 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800431e:	4b11      	ldr	r3, [pc, #68]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f023 020f 	bic.w	r2, r3, #15
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	490e      	ldr	r1, [pc, #56]	@ (8004364 <HAL_RCC_ClockConfig+0x244>)
 800432c:	4313      	orrs	r3, r2
 800432e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_ClockConfig+0x240>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d214      	bcs.n	8004368 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <HAL_RCC_ClockConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 020f 	bic.w	r2, r3, #15
 8004346:	4906      	ldr	r1, [pc, #24]	@ (8004360 <HAL_RCC_ClockConfig+0x240>)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <HAL_RCC_ClockConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e086      	b.n	800446e <HAL_RCC_ClockConfig+0x34e>
 8004360:	52002000 	.word	0x52002000
 8004364:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d010      	beq.n	8004396 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	4b3f      	ldr	r3, [pc, #252]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004380:	429a      	cmp	r2, r3
 8004382:	d208      	bcs.n	8004396 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004384:	4b3c      	ldr	r3, [pc, #240]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	4939      	ldr	r1, [pc, #228]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 8004392:	4313      	orrs	r3, r2
 8004394:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d010      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	4b34      	ldr	r3, [pc, #208]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d208      	bcs.n	80043c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043b2:	4b31      	ldr	r3, [pc, #196]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	492e      	ldr	r1, [pc, #184]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d010      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699a      	ldr	r2, [r3, #24]
 80043d4:	4b28      	ldr	r3, [pc, #160]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043dc:	429a      	cmp	r2, r3
 80043de:	d208      	bcs.n	80043f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043e0:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	4922      	ldr	r1, [pc, #136]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d010      	beq.n	8004420 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	4b1d      	ldr	r3, [pc, #116]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800440a:	429a      	cmp	r2, r3
 800440c:	d208      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800440e:	4b1a      	ldr	r3, [pc, #104]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4917      	ldr	r1, [pc, #92]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 800441c:	4313      	orrs	r3, r2
 800441e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004420:	f000 f834 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	4912      	ldr	r1, [pc, #72]	@ (800447c <HAL_RCC_ClockConfig+0x35c>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800443e:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <HAL_RCC_ClockConfig+0x358>)
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <HAL_RCC_ClockConfig+0x35c>)
 8004448:	5cd3      	ldrb	r3, [r2, r3]
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
 8004454:	4a0a      	ldr	r2, [pc, #40]	@ (8004480 <HAL_RCC_ClockConfig+0x360>)
 8004456:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004458:	4a0a      	ldr	r2, [pc, #40]	@ (8004484 <HAL_RCC_ClockConfig+0x364>)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_RCC_ClockConfig+0x368>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc fbe2 	bl	8000c2c <HAL_InitTick>
 8004468:	4603      	mov	r3, r0
 800446a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	58024400 	.word	0x58024400
 800447c:	08005f6c 	.word	0x08005f6c
 8004480:	24000004 	.word	0x24000004
 8004484:	24000000 	.word	0x24000000
 8004488:	24000008 	.word	0x24000008

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	@ 0x24
 8004490:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004492:	4bb3      	ldr	r3, [pc, #716]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800449a:	2b18      	cmp	r3, #24
 800449c:	f200 8155 	bhi.w	800474a <HAL_RCC_GetSysClockFreq+0x2be>
 80044a0:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	0800450d 	.word	0x0800450d
 80044ac:	0800474b 	.word	0x0800474b
 80044b0:	0800474b 	.word	0x0800474b
 80044b4:	0800474b 	.word	0x0800474b
 80044b8:	0800474b 	.word	0x0800474b
 80044bc:	0800474b 	.word	0x0800474b
 80044c0:	0800474b 	.word	0x0800474b
 80044c4:	0800474b 	.word	0x0800474b
 80044c8:	08004533 	.word	0x08004533
 80044cc:	0800474b 	.word	0x0800474b
 80044d0:	0800474b 	.word	0x0800474b
 80044d4:	0800474b 	.word	0x0800474b
 80044d8:	0800474b 	.word	0x0800474b
 80044dc:	0800474b 	.word	0x0800474b
 80044e0:	0800474b 	.word	0x0800474b
 80044e4:	0800474b 	.word	0x0800474b
 80044e8:	08004539 	.word	0x08004539
 80044ec:	0800474b 	.word	0x0800474b
 80044f0:	0800474b 	.word	0x0800474b
 80044f4:	0800474b 	.word	0x0800474b
 80044f8:	0800474b 	.word	0x0800474b
 80044fc:	0800474b 	.word	0x0800474b
 8004500:	0800474b 	.word	0x0800474b
 8004504:	0800474b 	.word	0x0800474b
 8004508:	0800453f 	.word	0x0800453f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800450c:	4b94      	ldr	r3, [pc, #592]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004518:	4b91      	ldr	r3, [pc, #580]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	08db      	lsrs	r3, r3, #3
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	4a90      	ldr	r2, [pc, #576]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
 8004528:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800452a:	e111      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800452c:	4b8d      	ldr	r3, [pc, #564]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800452e:	61bb      	str	r3, [r7, #24]
      break;
 8004530:	e10e      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004532:	4b8d      	ldr	r3, [pc, #564]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004534:	61bb      	str	r3, [r7, #24]
      break;
 8004536:	e10b      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004538:	4b8c      	ldr	r3, [pc, #560]	@ (800476c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800453a:	61bb      	str	r3, [r7, #24]
      break;
 800453c:	e108      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800453e:	4b88      	ldr	r3, [pc, #544]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004548:	4b85      	ldr	r3, [pc, #532]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004552:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004554:	4b82      	ldr	r3, [pc, #520]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800455e:	4b80      	ldr	r3, [pc, #512]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004562:	08db      	lsrs	r3, r3, #3
 8004564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80e1 	beq.w	8004744 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b02      	cmp	r3, #2
 8004586:	f000 8083 	beq.w	8004690 <HAL_RCC_GetSysClockFreq+0x204>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b02      	cmp	r3, #2
 800458e:	f200 80a1 	bhi.w	80046d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d056      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x1c0>
 800459e:	e099      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02d      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	08db      	lsrs	r3, r3, #3
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	4a6b      	ldr	r2, [pc, #428]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
 80045bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	ee07 3a90 	vmov	s15, r3
 80045c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b62      	ldr	r3, [pc, #392]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004606:	e087      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004774 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b51      	ldr	r3, [pc, #324]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a02 	vldr	s12, [r7, #8]
 800462e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800464a:	e065      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004778 <HAL_RCC_GetSysClockFreq+0x2ec>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b40      	ldr	r3, [pc, #256]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004672:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800468e:	e043      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800477c <HAL_RCC_GetSysClockFreq+0x2f0>
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046d2:	e021      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004778 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004716:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004718:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	0a5b      	lsrs	r3, r3, #9
 800471e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004722:	3301      	adds	r3, #1
 8004724:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004730:	edd7 6a07 	vldr	s13, [r7, #28]
 8004734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800473c:	ee17 3a90 	vmov	r3, s15
 8004740:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004742:	e005      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
      break;
 8004748:	e002      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800474a:	4b07      	ldr	r3, [pc, #28]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800474c:	61bb      	str	r3, [r7, #24]
      break;
 800474e:	bf00      	nop
  }

  return sysclockfreq;
 8004750:	69bb      	ldr	r3, [r7, #24]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3724      	adds	r7, #36	@ 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	03d09000 	.word	0x03d09000
 8004768:	003d0900 	.word	0x003d0900
 800476c:	007a1200 	.word	0x007a1200
 8004770:	46000000 	.word	0x46000000
 8004774:	4c742400 	.word	0x4c742400
 8004778:	4a742400 	.word	0x4a742400
 800477c:	4af42400 	.word	0x4af42400

08004780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e049      	b.n	8004826 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc f898 	bl	80008dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f000 feb4 	bl	800552c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e049      	b.n	80048d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f841 	bl	80048dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 fe5d 	bl	800552c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	bf0c      	ite	eq
 8004914:	2301      	moveq	r3, #1
 8004916:	2300      	movne	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e03c      	b.n	8004996 <HAL_TIM_PWM_Start_DMA+0xa6>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b04      	cmp	r3, #4
 8004920:	d109      	bne.n	8004936 <HAL_TIM_PWM_Start_DMA+0x46>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	e02f      	b.n	8004996 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d109      	bne.n	8004950 <HAL_TIM_PWM_Start_DMA+0x60>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	e022      	b.n	8004996 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b0c      	cmp	r3, #12
 8004954:	d109      	bne.n	800496a <HAL_TIM_PWM_Start_DMA+0x7a>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	e015      	b.n	8004996 <HAL_TIM_PWM_Start_DMA+0xa6>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b10      	cmp	r3, #16
 800496e:	d109      	bne.n	8004984 <HAL_TIM_PWM_Start_DMA+0x94>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e008      	b.n	8004996 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
 800499c:	e1ba      	b.n	8004d14 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e03c      	b.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x142>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d109      	bne.n	80049d2 <HAL_TIM_PWM_Start_DMA+0xe2>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	bf0c      	ite	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	2300      	movne	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e02f      	b.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x142>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d109      	bne.n	80049ec <HAL_TIM_PWM_Start_DMA+0xfc>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e022      	b.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x142>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d109      	bne.n	8004a06 <HAL_TIM_PWM_Start_DMA+0x116>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	e015      	b.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x142>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d109      	bne.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x130>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e008      	b.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x142>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d034      	beq.n	8004aa0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x152>
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e166      	b.n	8004d14 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start_DMA+0x166>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a54:	e026      	b.n	8004aa4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x176>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a64:	e01e      	b.n	8004aa4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start_DMA+0x186>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a74:	e016      	b.n	8004aa4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b0c      	cmp	r3, #12
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIM_PWM_Start_DMA+0x196>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a84:	e00e      	b.n	8004aa4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a94:	e006      	b.n	8004aa4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a9e:	e001      	b.n	8004aa4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e137      	b.n	8004d14 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	f200 80ae 	bhi.w	8004c08 <HAL_TIM_PWM_Start_DMA+0x318>
 8004aac:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004c09 	.word	0x08004c09
 8004abc:	08004c09 	.word	0x08004c09
 8004ac0:	08004c09 	.word	0x08004c09
 8004ac4:	08004b31 	.word	0x08004b31
 8004ac8:	08004c09 	.word	0x08004c09
 8004acc:	08004c09 	.word	0x08004c09
 8004ad0:	08004c09 	.word	0x08004c09
 8004ad4:	08004b79 	.word	0x08004b79
 8004ad8:	08004c09 	.word	0x08004c09
 8004adc:	08004c09 	.word	0x08004c09
 8004ae0:	08004c09 	.word	0x08004c09
 8004ae4:	08004bc1 	.word	0x08004bc1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	4a8b      	ldr	r2, [pc, #556]	@ (8004d1c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004aee:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	4a8a      	ldr	r2, [pc, #552]	@ (8004d20 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	4a89      	ldr	r2, [pc, #548]	@ (8004d24 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004afe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3334      	adds	r3, #52	@ 0x34
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	887b      	ldrh	r3, [r7, #2]
 8004b10:	f7fc fd6e 	bl	80015f0 <HAL_DMA_Start_IT>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0fa      	b.n	8004d14 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b2c:	60da      	str	r2, [r3, #12]
      break;
 8004b2e:	e06e      	b.n	8004c0e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	4a79      	ldr	r2, [pc, #484]	@ (8004d1c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004b36:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3c:	4a78      	ldr	r2, [pc, #480]	@ (8004d20 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004b3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	4a77      	ldr	r2, [pc, #476]	@ (8004d24 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004b46:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3338      	adds	r3, #56	@ 0x38
 8004b54:	461a      	mov	r2, r3
 8004b56:	887b      	ldrh	r3, [r7, #2]
 8004b58:	f7fc fd4a 	bl	80015f0 <HAL_DMA_Start_IT>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0d6      	b.n	8004d14 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b74:	60da      	str	r2, [r3, #12]
      break;
 8004b76:	e04a      	b.n	8004c0e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7c:	4a67      	ldr	r2, [pc, #412]	@ (8004d1c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	4a66      	ldr	r2, [pc, #408]	@ (8004d20 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004b86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8c:	4a65      	ldr	r2, [pc, #404]	@ (8004d24 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004b8e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	333c      	adds	r3, #60	@ 0x3c
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	887b      	ldrh	r3, [r7, #2]
 8004ba0:	f7fc fd26 	bl	80015f0 <HAL_DMA_Start_IT>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0b2      	b.n	8004d14 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bbc:	60da      	str	r2, [r3, #12]
      break;
 8004bbe:	e026      	b.n	8004c0e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	4a55      	ldr	r2, [pc, #340]	@ (8004d1c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bcc:	4a54      	ldr	r2, [pc, #336]	@ (8004d20 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd4:	4a53      	ldr	r2, [pc, #332]	@ (8004d24 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004bd6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3340      	adds	r3, #64	@ 0x40
 8004be4:	461a      	mov	r2, r3
 8004be6:	887b      	ldrh	r3, [r7, #2]
 8004be8:	f7fc fd02 	bl	80015f0 <HAL_DMA_Start_IT>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e08e      	b.n	8004d14 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c04:	60da      	str	r2, [r3, #12]
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d17e      	bne.n	8004d12 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f8ab 	bl	8005d78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a40      	ldr	r2, [pc, #256]	@ (8004d28 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d013      	beq.n	8004c54 <HAL_TIM_PWM_Start_DMA+0x364>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a3e      	ldr	r2, [pc, #248]	@ (8004d2c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_TIM_PWM_Start_DMA+0x364>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d30 <HAL_TIM_PWM_Start_DMA+0x440>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_TIM_PWM_Start_DMA+0x364>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3b      	ldr	r2, [pc, #236]	@ (8004d34 <HAL_TIM_PWM_Start_DMA+0x444>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIM_PWM_Start_DMA+0x364>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3a      	ldr	r2, [pc, #232]	@ (8004d38 <HAL_TIM_PWM_Start_DMA+0x448>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <HAL_TIM_PWM_Start_DMA+0x368>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_TIM_PWM_Start_DMA+0x36a>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2d      	ldr	r2, [pc, #180]	@ (8004d28 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d02c      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c80:	d027      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2d      	ldr	r2, [pc, #180]	@ (8004d3c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d022      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a2b      	ldr	r2, [pc, #172]	@ (8004d40 <HAL_TIM_PWM_Start_DMA+0x450>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01d      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004d44 <HAL_TIM_PWM_Start_DMA+0x454>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a21      	ldr	r2, [pc, #132]	@ (8004d2c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a26      	ldr	r2, [pc, #152]	@ (8004d48 <HAL_TIM_PWM_Start_DMA+0x458>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d30 <HAL_TIM_PWM_Start_DMA+0x440>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a22      	ldr	r2, [pc, #136]	@ (8004d4c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a20      	ldr	r2, [pc, #128]	@ (8004d50 <HAL_TIM_PWM_Start_DMA+0x460>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d115      	bne.n	8004cfe <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d54 <HAL_TIM_PWM_Start_DMA+0x464>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b06      	cmp	r3, #6
 8004ce2:	d015      	beq.n	8004d10 <HAL_TIM_PWM_Start_DMA+0x420>
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cea:	d011      	beq.n	8004d10 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	e008      	b.n	8004d10 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0201 	orr.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e000      	b.n	8004d12 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	0800541b 	.word	0x0800541b
 8004d20:	080054c3 	.word	0x080054c3
 8004d24:	08005389 	.word	0x08005389
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000c00 	.word	0x40000c00
 8004d48:	40001800 	.word	0x40001800
 8004d4c:	4000e000 	.word	0x4000e000
 8004d50:	4000e400 	.word	0x4000e400
 8004d54:	00010007 	.word	0x00010007

08004d58 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d855      	bhi.n	8004e18 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004da9 	.word	0x08004da9
 8004d78:	08004e19 	.word	0x08004e19
 8004d7c:	08004e19 	.word	0x08004e19
 8004d80:	08004e19 	.word	0x08004e19
 8004d84:	08004dc5 	.word	0x08004dc5
 8004d88:	08004e19 	.word	0x08004e19
 8004d8c:	08004e19 	.word	0x08004e19
 8004d90:	08004e19 	.word	0x08004e19
 8004d94:	08004de1 	.word	0x08004de1
 8004d98:	08004e19 	.word	0x08004e19
 8004d9c:	08004e19 	.word	0x08004e19
 8004da0:	08004e19 	.word	0x08004e19
 8004da4:	08004dfd 	.word	0x08004dfd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004db6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fc fe81 	bl	8001ac4 <HAL_DMA_Abort_IT>
      break;
 8004dc2:	e02c      	b.n	8004e1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fc fe73 	bl	8001ac4 <HAL_DMA_Abort_IT>
      break;
 8004dde:	e01e      	b.n	8004e1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fc fe65 	bl	8001ac4 <HAL_DMA_Abort_IT>
      break;
 8004dfa:	e010      	b.n	8004e1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fc fe57 	bl	8001ac4 <HAL_DMA_Abort_IT>
      break;
 8004e16:	e002      	b.n	8004e1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f040 8081 	bne.w	8004f28 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 ffa2 	bl	8005d78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a3e      	ldr	r2, [pc, #248]	@ (8004f34 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a3d      	ldr	r2, [pc, #244]	@ (8004f38 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f3c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3a      	ldr	r2, [pc, #232]	@ (8004f40 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a38      	ldr	r2, [pc, #224]	@ (8004f44 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <HAL_TIM_PWM_Stop_DMA+0x112>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <HAL_TIM_PWM_Stop_DMA+0x114>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d017      	beq.n	8004ea0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6a1a      	ldr	r2, [r3, #32]
 8004e76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10f      	bne.n	8004ea0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6a1a      	ldr	r2, [r3, #32]
 8004ea6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10f      	bne.n	8004ed0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0201 	bic.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <HAL_TIM_PWM_Stop_DMA+0x188>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ede:	e023      	b.n	8004f28 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d104      	bne.n	8004ef0 <HAL_TIM_PWM_Stop_DMA+0x198>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eee:	e01b      	b.n	8004f28 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d104      	bne.n	8004f00 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004efe:	e013      	b.n	8004f28 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b0c      	cmp	r3, #12
 8004f04:	d104      	bne.n	8004f10 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f0e:	e00b      	b.n	8004f28 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d104      	bne.n	8004f20 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f1e:	e003      	b.n	8004f28 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40010400 	.word	0x40010400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800

08004f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e0ff      	b.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b14      	cmp	r3, #20
 8004f72:	f200 80f0 	bhi.w	8005156 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f76:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08005157 	.word	0x08005157
 8004f84:	08005157 	.word	0x08005157
 8004f88:	08005157 	.word	0x08005157
 8004f8c:	08005011 	.word	0x08005011
 8004f90:	08005157 	.word	0x08005157
 8004f94:	08005157 	.word	0x08005157
 8004f98:	08005157 	.word	0x08005157
 8004f9c:	08005053 	.word	0x08005053
 8004fa0:	08005157 	.word	0x08005157
 8004fa4:	08005157 	.word	0x08005157
 8004fa8:	08005157 	.word	0x08005157
 8004fac:	08005093 	.word	0x08005093
 8004fb0:	08005157 	.word	0x08005157
 8004fb4:	08005157 	.word	0x08005157
 8004fb8:	08005157 	.word	0x08005157
 8004fbc:	080050d5 	.word	0x080050d5
 8004fc0:	08005157 	.word	0x08005157
 8004fc4:	08005157 	.word	0x08005157
 8004fc8:	08005157 	.word	0x08005157
 8004fcc:	08005115 	.word	0x08005115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fb5a 	bl	8005690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0208 	orr.w	r2, r2, #8
 8004fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0204 	bic.w	r2, r2, #4
 8004ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6999      	ldr	r1, [r3, #24]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	619a      	str	r2, [r3, #24]
      break;
 800500e:	e0a5      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fbca 	bl	80057b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800502a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800503a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6999      	ldr	r1, [r3, #24]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	021a      	lsls	r2, r3, #8
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	619a      	str	r2, [r3, #24]
      break;
 8005050:	e084      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fc33 	bl	80058c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0208 	orr.w	r2, r2, #8
 800506c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0204 	bic.w	r2, r2, #4
 800507c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69d9      	ldr	r1, [r3, #28]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	61da      	str	r2, [r3, #28]
      break;
 8005090:	e064      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fc9b 	bl	80059d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69d9      	ldr	r1, [r3, #28]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	021a      	lsls	r2, r3, #8
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	61da      	str	r2, [r3, #28]
      break;
 80050d2:	e043      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fce4 	bl	8005aa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0208 	orr.w	r2, r2, #8
 80050ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0204 	bic.w	r2, r2, #4
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005112:	e023      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fd28 	bl	8005b70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800512e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800513e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	021a      	lsls	r2, r3, #8
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005154:	e002      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	75fb      	strb	r3, [r7, #23]
      break;
 800515a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005164:	7dfb      	ldrb	r3, [r7, #23]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop

08005170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_TIM_ConfigClockSource+0x1c>
 8005188:	2302      	movs	r3, #2
 800518a:	e0dc      	b.n	8005346 <HAL_TIM_ConfigClockSource+0x1d6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005350 <HAL_TIM_ConfigClockSource+0x1e0>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a64      	ldr	r2, [pc, #400]	@ (8005354 <HAL_TIM_ConfigClockSource+0x1e4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	f000 80a9 	beq.w	800531a <HAL_TIM_ConfigClockSource+0x1aa>
 80051c8:	4a62      	ldr	r2, [pc, #392]	@ (8005354 <HAL_TIM_ConfigClockSource+0x1e4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	f200 80ae 	bhi.w	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 80051d0:	4a61      	ldr	r2, [pc, #388]	@ (8005358 <HAL_TIM_ConfigClockSource+0x1e8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	f000 80a1 	beq.w	800531a <HAL_TIM_ConfigClockSource+0x1aa>
 80051d8:	4a5f      	ldr	r2, [pc, #380]	@ (8005358 <HAL_TIM_ConfigClockSource+0x1e8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	f200 80a6 	bhi.w	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 80051e0:	4a5e      	ldr	r2, [pc, #376]	@ (800535c <HAL_TIM_ConfigClockSource+0x1ec>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	f000 8099 	beq.w	800531a <HAL_TIM_ConfigClockSource+0x1aa>
 80051e8:	4a5c      	ldr	r2, [pc, #368]	@ (800535c <HAL_TIM_ConfigClockSource+0x1ec>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	f200 809e 	bhi.w	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 80051f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80051f4:	f000 8091 	beq.w	800531a <HAL_TIM_ConfigClockSource+0x1aa>
 80051f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80051fc:	f200 8096 	bhi.w	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 8005200:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005204:	f000 8089 	beq.w	800531a <HAL_TIM_ConfigClockSource+0x1aa>
 8005208:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800520c:	f200 808e 	bhi.w	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 8005210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005214:	d03e      	beq.n	8005294 <HAL_TIM_ConfigClockSource+0x124>
 8005216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800521a:	f200 8087 	bhi.w	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 800521e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005222:	f000 8086 	beq.w	8005332 <HAL_TIM_ConfigClockSource+0x1c2>
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522a:	d87f      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 800522c:	2b70      	cmp	r3, #112	@ 0x70
 800522e:	d01a      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0xf6>
 8005230:	2b70      	cmp	r3, #112	@ 0x70
 8005232:	d87b      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 8005234:	2b60      	cmp	r3, #96	@ 0x60
 8005236:	d050      	beq.n	80052da <HAL_TIM_ConfigClockSource+0x16a>
 8005238:	2b60      	cmp	r3, #96	@ 0x60
 800523a:	d877      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 800523c:	2b50      	cmp	r3, #80	@ 0x50
 800523e:	d03c      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x14a>
 8005240:	2b50      	cmp	r3, #80	@ 0x50
 8005242:	d873      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 8005244:	2b40      	cmp	r3, #64	@ 0x40
 8005246:	d058      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x18a>
 8005248:	2b40      	cmp	r3, #64	@ 0x40
 800524a:	d86f      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 800524c:	2b30      	cmp	r3, #48	@ 0x30
 800524e:	d064      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x1aa>
 8005250:	2b30      	cmp	r3, #48	@ 0x30
 8005252:	d86b      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 8005254:	2b20      	cmp	r3, #32
 8005256:	d060      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x1aa>
 8005258:	2b20      	cmp	r3, #32
 800525a:	d867      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x1bc>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d05c      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x1aa>
 8005260:	2b10      	cmp	r3, #16
 8005262:	d05a      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x1aa>
 8005264:	e062      	b.n	800532c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005276:	f000 fd5f 	bl	8005d38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	609a      	str	r2, [r3, #8]
      break;
 8005292:	e04f      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052a4:	f000 fd48 	bl	8005d38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052b6:	609a      	str	r2, [r3, #8]
      break;
 80052b8:	e03c      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c6:	461a      	mov	r2, r3
 80052c8:	f000 fcb8 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2150      	movs	r1, #80	@ 0x50
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fd12 	bl	8005cfc <TIM_ITRx_SetConfig>
      break;
 80052d8:	e02c      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 fcd7 	bl	8005c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2160      	movs	r1, #96	@ 0x60
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fd02 	bl	8005cfc <TIM_ITRx_SetConfig>
      break;
 80052f8:	e01c      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005306:	461a      	mov	r2, r3
 8005308:	f000 fc98 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2140      	movs	r1, #64	@ 0x40
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fcf2 	bl	8005cfc <TIM_ITRx_SetConfig>
      break;
 8005318:	e00c      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f000 fce9 	bl	8005cfc <TIM_ITRx_SetConfig>
      break;
 800532a:	e003      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
      break;
 8005330:	e000      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	ffceff88 	.word	0xffceff88
 8005354:	00100040 	.word	0x00100040
 8005358:	00100030 	.word	0x00100030
 800535c:	00100020 	.word	0x00100020

08005360 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005394:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d107      	bne.n	80053b0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053ae:	e02a      	b.n	8005406 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d107      	bne.n	80053ca <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2202      	movs	r2, #2
 80053be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c8:	e01d      	b.n	8005406 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d107      	bne.n	80053e4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2204      	movs	r2, #4
 80053d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e2:	e010      	b.n	8005406 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d107      	bne.n	80053fe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2208      	movs	r2, #8
 80053f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053fc:	e003      	b.n	8005406 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff ffb4 	bl	8005374 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	771a      	strb	r2, [r3, #28]
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d10b      	bne.n	800544a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d136      	bne.n	80054ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005448:	e031      	b.n	80054ae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d10b      	bne.n	800546c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2202      	movs	r2, #2
 8005458:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d125      	bne.n	80054ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800546a:	e020      	b.n	80054ae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d10b      	bne.n	800548e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2204      	movs	r2, #4
 800547a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d114      	bne.n	80054ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800548c:	e00f      	b.n	80054ae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d10a      	bne.n	80054ae <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2208      	movs	r2, #8
 800549c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d103      	bne.n	80054ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7fa ff2c 	bl	800030c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	771a      	strb	r2, [r3, #28]
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d103      	bne.n	80054e2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	771a      	strb	r2, [r3, #28]
 80054e0:	e019      	b.n	8005516 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d103      	bne.n	80054f4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2202      	movs	r2, #2
 80054f0:	771a      	strb	r2, [r3, #28]
 80054f2:	e010      	b.n	8005516 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d103      	bne.n	8005506 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2204      	movs	r2, #4
 8005502:	771a      	strb	r2, [r3, #28]
 8005504:	e007      	b.n	8005516 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d102      	bne.n	8005516 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2208      	movs	r2, #8
 8005514:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff ff22 	bl	8005360 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	771a      	strb	r2, [r3, #28]
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a4a      	ldr	r2, [pc, #296]	@ (8005668 <TIM_Base_SetConfig+0x13c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800554a:	d00f      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a47      	ldr	r2, [pc, #284]	@ (800566c <TIM_Base_SetConfig+0x140>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00b      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a46      	ldr	r2, [pc, #280]	@ (8005670 <TIM_Base_SetConfig+0x144>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d007      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a45      	ldr	r2, [pc, #276]	@ (8005674 <TIM_Base_SetConfig+0x148>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a44      	ldr	r2, [pc, #272]	@ (8005678 <TIM_Base_SetConfig+0x14c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d108      	bne.n	800557e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a39      	ldr	r2, [pc, #228]	@ (8005668 <TIM_Base_SetConfig+0x13c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d027      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558c:	d023      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a36      	ldr	r2, [pc, #216]	@ (800566c <TIM_Base_SetConfig+0x140>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01f      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a35      	ldr	r2, [pc, #212]	@ (8005670 <TIM_Base_SetConfig+0x144>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01b      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a34      	ldr	r2, [pc, #208]	@ (8005674 <TIM_Base_SetConfig+0x148>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d017      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a33      	ldr	r2, [pc, #204]	@ (8005678 <TIM_Base_SetConfig+0x14c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a32      	ldr	r2, [pc, #200]	@ (800567c <TIM_Base_SetConfig+0x150>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00f      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a31      	ldr	r2, [pc, #196]	@ (8005680 <TIM_Base_SetConfig+0x154>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00b      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a30      	ldr	r2, [pc, #192]	@ (8005684 <TIM_Base_SetConfig+0x158>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d007      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005688 <TIM_Base_SetConfig+0x15c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d003      	beq.n	80055d6 <TIM_Base_SetConfig+0xaa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2e      	ldr	r2, [pc, #184]	@ (800568c <TIM_Base_SetConfig+0x160>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d108      	bne.n	80055e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a16      	ldr	r2, [pc, #88]	@ (8005668 <TIM_Base_SetConfig+0x13c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00f      	beq.n	8005634 <TIM_Base_SetConfig+0x108>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a18      	ldr	r2, [pc, #96]	@ (8005678 <TIM_Base_SetConfig+0x14c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00b      	beq.n	8005634 <TIM_Base_SetConfig+0x108>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a17      	ldr	r2, [pc, #92]	@ (800567c <TIM_Base_SetConfig+0x150>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d007      	beq.n	8005634 <TIM_Base_SetConfig+0x108>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a16      	ldr	r2, [pc, #88]	@ (8005680 <TIM_Base_SetConfig+0x154>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_Base_SetConfig+0x108>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a15      	ldr	r2, [pc, #84]	@ (8005684 <TIM_Base_SetConfig+0x158>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d103      	bne.n	800563c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d105      	bne.n	800565a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f023 0201 	bic.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]
  }
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40010000 	.word	0x40010000
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40010400 	.word	0x40010400
 800567c:	40014000 	.word	0x40014000
 8005680:	40014400 	.word	0x40014400
 8005684:	40014800 	.word	0x40014800
 8005688:	4000e000 	.word	0x4000e000
 800568c:	4000e400 	.word	0x4000e400

08005690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f023 0201 	bic.w	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4b37      	ldr	r3, [pc, #220]	@ (8005798 <TIM_OC1_SetConfig+0x108>)
 80056bc:	4013      	ands	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0303 	bic.w	r3, r3, #3
 80056c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f023 0302 	bic.w	r3, r3, #2
 80056d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a2d      	ldr	r2, [pc, #180]	@ (800579c <TIM_OC1_SetConfig+0x10c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_OC1_SetConfig+0x7c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a2c      	ldr	r2, [pc, #176]	@ (80057a0 <TIM_OC1_SetConfig+0x110>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_OC1_SetConfig+0x7c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a2b      	ldr	r2, [pc, #172]	@ (80057a4 <TIM_OC1_SetConfig+0x114>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_OC1_SetConfig+0x7c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a2a      	ldr	r2, [pc, #168]	@ (80057a8 <TIM_OC1_SetConfig+0x118>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_OC1_SetConfig+0x7c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a29      	ldr	r2, [pc, #164]	@ (80057ac <TIM_OC1_SetConfig+0x11c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0308 	bic.w	r3, r3, #8
 8005712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1c      	ldr	r2, [pc, #112]	@ (800579c <TIM_OC1_SetConfig+0x10c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00f      	beq.n	800574e <TIM_OC1_SetConfig+0xbe>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a1b      	ldr	r2, [pc, #108]	@ (80057a0 <TIM_OC1_SetConfig+0x110>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00b      	beq.n	800574e <TIM_OC1_SetConfig+0xbe>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1a      	ldr	r2, [pc, #104]	@ (80057a4 <TIM_OC1_SetConfig+0x114>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <TIM_OC1_SetConfig+0xbe>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a19      	ldr	r2, [pc, #100]	@ (80057a8 <TIM_OC1_SetConfig+0x118>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_OC1_SetConfig+0xbe>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a18      	ldr	r2, [pc, #96]	@ (80057ac <TIM_OC1_SetConfig+0x11c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d111      	bne.n	8005772 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800575c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	621a      	str	r2, [r3, #32]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	fffeff8f 	.word	0xfffeff8f
 800579c:	40010000 	.word	0x40010000
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40014400 	.word	0x40014400
 80057ac:	40014800 	.word	0x40014800

080057b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f023 0210 	bic.w	r2, r3, #16
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4b34      	ldr	r3, [pc, #208]	@ (80058ac <TIM_OC2_SetConfig+0xfc>)
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0320 	bic.w	r3, r3, #32
 80057fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a29      	ldr	r2, [pc, #164]	@ (80058b0 <TIM_OC2_SetConfig+0x100>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC2_SetConfig+0x68>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a28      	ldr	r2, [pc, #160]	@ (80058b4 <TIM_OC2_SetConfig+0x104>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10d      	bne.n	8005834 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800581e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1e      	ldr	r2, [pc, #120]	@ (80058b0 <TIM_OC2_SetConfig+0x100>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00f      	beq.n	800585c <TIM_OC2_SetConfig+0xac>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a1d      	ldr	r2, [pc, #116]	@ (80058b4 <TIM_OC2_SetConfig+0x104>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <TIM_OC2_SetConfig+0xac>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a1c      	ldr	r2, [pc, #112]	@ (80058b8 <TIM_OC2_SetConfig+0x108>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_OC2_SetConfig+0xac>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a1b      	ldr	r2, [pc, #108]	@ (80058bc <TIM_OC2_SetConfig+0x10c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_OC2_SetConfig+0xac>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a1a      	ldr	r2, [pc, #104]	@ (80058c0 <TIM_OC2_SetConfig+0x110>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d113      	bne.n	8005884 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800586a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	feff8fff 	.word	0xfeff8fff
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40010400 	.word	0x40010400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40014400 	.word	0x40014400
 80058c0:	40014800 	.word	0x40014800

080058c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4b33      	ldr	r3, [pc, #204]	@ (80059bc <TIM_OC3_SetConfig+0xf8>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800590c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a28      	ldr	r2, [pc, #160]	@ (80059c0 <TIM_OC3_SetConfig+0xfc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d003      	beq.n	800592a <TIM_OC3_SetConfig+0x66>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a27      	ldr	r2, [pc, #156]	@ (80059c4 <TIM_OC3_SetConfig+0x100>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d10d      	bne.n	8005946 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1d      	ldr	r2, [pc, #116]	@ (80059c0 <TIM_OC3_SetConfig+0xfc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00f      	beq.n	800596e <TIM_OC3_SetConfig+0xaa>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1c      	ldr	r2, [pc, #112]	@ (80059c4 <TIM_OC3_SetConfig+0x100>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_OC3_SetConfig+0xaa>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1b      	ldr	r2, [pc, #108]	@ (80059c8 <TIM_OC3_SetConfig+0x104>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_OC3_SetConfig+0xaa>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1a      	ldr	r2, [pc, #104]	@ (80059cc <TIM_OC3_SetConfig+0x108>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_OC3_SetConfig+0xaa>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a19      	ldr	r2, [pc, #100]	@ (80059d0 <TIM_OC3_SetConfig+0x10c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d113      	bne.n	8005996 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800597c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	621a      	str	r2, [r3, #32]
}
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	fffeff8f 	.word	0xfffeff8f
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800

080059d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4b24      	ldr	r3, [pc, #144]	@ (8005a90 <TIM_OC4_SetConfig+0xbc>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a19      	ldr	r2, [pc, #100]	@ (8005a94 <TIM_OC4_SetConfig+0xc0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00f      	beq.n	8005a54 <TIM_OC4_SetConfig+0x80>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a18      	ldr	r2, [pc, #96]	@ (8005a98 <TIM_OC4_SetConfig+0xc4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00b      	beq.n	8005a54 <TIM_OC4_SetConfig+0x80>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a17      	ldr	r2, [pc, #92]	@ (8005a9c <TIM_OC4_SetConfig+0xc8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d007      	beq.n	8005a54 <TIM_OC4_SetConfig+0x80>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a16      	ldr	r2, [pc, #88]	@ (8005aa0 <TIM_OC4_SetConfig+0xcc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_OC4_SetConfig+0x80>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a15      	ldr	r2, [pc, #84]	@ (8005aa4 <TIM_OC4_SetConfig+0xd0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d109      	bne.n	8005a68 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	019b      	lsls	r3, r3, #6
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	feff8fff 	.word	0xfeff8fff
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40010400 	.word	0x40010400
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800

08005aa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4b21      	ldr	r3, [pc, #132]	@ (8005b58 <TIM_OC5_SetConfig+0xb0>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005ae8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <TIM_OC5_SetConfig+0xb4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00f      	beq.n	8005b1e <TIM_OC5_SetConfig+0x76>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a17      	ldr	r2, [pc, #92]	@ (8005b60 <TIM_OC5_SetConfig+0xb8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00b      	beq.n	8005b1e <TIM_OC5_SetConfig+0x76>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a16      	ldr	r2, [pc, #88]	@ (8005b64 <TIM_OC5_SetConfig+0xbc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d007      	beq.n	8005b1e <TIM_OC5_SetConfig+0x76>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a15      	ldr	r2, [pc, #84]	@ (8005b68 <TIM_OC5_SetConfig+0xc0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d003      	beq.n	8005b1e <TIM_OC5_SetConfig+0x76>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a14      	ldr	r2, [pc, #80]	@ (8005b6c <TIM_OC5_SetConfig+0xc4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d109      	bne.n	8005b32 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	621a      	str	r2, [r3, #32]
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	fffeff8f 	.word	0xfffeff8f
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40010400 	.word	0x40010400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400
 8005b6c:	40014800 	.word	0x40014800

08005b70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4b22      	ldr	r3, [pc, #136]	@ (8005c24 <TIM_OC6_SetConfig+0xb4>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	051b      	lsls	r3, r3, #20
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a19      	ldr	r2, [pc, #100]	@ (8005c28 <TIM_OC6_SetConfig+0xb8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00f      	beq.n	8005be8 <TIM_OC6_SetConfig+0x78>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a18      	ldr	r2, [pc, #96]	@ (8005c2c <TIM_OC6_SetConfig+0xbc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <TIM_OC6_SetConfig+0x78>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	@ (8005c30 <TIM_OC6_SetConfig+0xc0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <TIM_OC6_SetConfig+0x78>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a16      	ldr	r2, [pc, #88]	@ (8005c34 <TIM_OC6_SetConfig+0xc4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC6_SetConfig+0x78>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <TIM_OC6_SetConfig+0xc8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d109      	bne.n	8005bfc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	029b      	lsls	r3, r3, #10
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	feff8fff 	.word	0xfeff8fff
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800

08005c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f023 0201 	bic.w	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 030a 	bic.w	r3, r3, #10
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b087      	sub	sp, #28
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f023 0210 	bic.w	r2, r3, #16
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	031b      	lsls	r3, r3, #12
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4b09      	ldr	r3, [pc, #36]	@ (8005d34 <TIM_ITRx_SetConfig+0x38>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f043 0307 	orr.w	r3, r3, #7
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	609a      	str	r2, [r3, #8]
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	ffcfff8f 	.word	0xffcfff8f

08005d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	609a      	str	r2, [r3, #8]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	fa01 f303 	lsl.w	r3, r1, r3
 8005db0:	431a      	orrs	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e077      	b.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a35      	ldr	r2, [pc, #212]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a34      	ldr	r2, [pc, #208]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d108      	bne.n	8005e22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a25      	ldr	r2, [pc, #148]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02c      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4e:	d027      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a22      	ldr	r2, [pc, #136]	@ (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a21      	ldr	r2, [pc, #132]	@ (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01d      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1a      	ldr	r2, [pc, #104]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005eec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a18      	ldr	r2, [pc, #96]	@ (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a17      	ldr	r2, [pc, #92]	@ (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10c      	bne.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40010400 	.word	0x40010400
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40001800 	.word	0x40001800
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	4000e000 	.word	0x4000e000
 8005ef8:	4000e400 	.word	0x4000e400

08005efc <memset>:
 8005efc:	4402      	add	r2, r0
 8005efe:	4603      	mov	r3, r0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d100      	bne.n	8005f06 <memset+0xa>
 8005f04:	4770      	bx	lr
 8005f06:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0a:	e7f9      	b.n	8005f00 <memset+0x4>

08005f0c <__libc_init_array>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f44 <__libc_init_array+0x38>)
 8005f10:	4c0d      	ldr	r4, [pc, #52]	@ (8005f48 <__libc_init_array+0x3c>)
 8005f12:	1b64      	subs	r4, r4, r5
 8005f14:	10a4      	asrs	r4, r4, #2
 8005f16:	2600      	movs	r6, #0
 8005f18:	42a6      	cmp	r6, r4
 8005f1a:	d109      	bne.n	8005f30 <__libc_init_array+0x24>
 8005f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f4c <__libc_init_array+0x40>)
 8005f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8005f50 <__libc_init_array+0x44>)
 8005f20:	f000 f818 	bl	8005f54 <_init>
 8005f24:	1b64      	subs	r4, r4, r5
 8005f26:	10a4      	asrs	r4, r4, #2
 8005f28:	2600      	movs	r6, #0
 8005f2a:	42a6      	cmp	r6, r4
 8005f2c:	d105      	bne.n	8005f3a <__libc_init_array+0x2e>
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f34:	4798      	blx	r3
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7ee      	b.n	8005f18 <__libc_init_array+0xc>
 8005f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3e:	4798      	blx	r3
 8005f40:	3601      	adds	r6, #1
 8005f42:	e7f2      	b.n	8005f2a <__libc_init_array+0x1e>
 8005f44:	08005f84 	.word	0x08005f84
 8005f48:	08005f84 	.word	0x08005f84
 8005f4c:	08005f84 	.word	0x08005f84
 8005f50:	08005f88 	.word	0x08005f88

08005f54 <_init>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr

08005f60 <_fini>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr
