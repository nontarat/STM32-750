
bldc_odrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08009078  08009078  00019078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009090  08009090  00019090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08009098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  24000010  080090a8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000160  080090a8  00020160  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001216a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002100  00000000  00000000  000321a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f78  00000000  00000000  000342a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000e90  00000000  00000000  00035220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003810c  00000000  00000000  000360b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001384d  00000000  00000000  0006e1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001707fe  00000000  00000000  00081a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f2207  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000041f4  00000000  00000000  001f2258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009060 	.word	0x08009060

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009060 	.word	0x08009060

080002d8 <map>:
/* USER CODE BEGIN 0 */
uint16_t ADC_Data=0;
int ADC_Converted = 0;

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
 80002e4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	1ad3      	subs	r3, r2, r3
 80002ec:	69b9      	ldr	r1, [r7, #24]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	3201      	adds	r2, #1
 80002f4:	fb03 f202 	mul.w	r2, r3, r2
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	1acb      	subs	r3, r1, r3
 80002fe:	3301      	adds	r3, #1
 8000300:	fb92 f2f3 	sdiv	r2, r2, r3
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	4413      	add	r3, r2
}
 8000308:	4618      	mov	r0, r3
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af02      	add	r7, sp, #8
 800031a:	6078      	str	r0, [r7, #4]
	ADC_Converted = map(ADC_Data, 0, 4095, 50, 100);
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <HAL_ADC_ConvCpltCallback+0x34>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	2364      	movs	r3, #100	; 0x64
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2332      	movs	r3, #50	; 0x32
 8000328:	f640 72ff 	movw	r2, #4095	; 0xfff
 800032c:	2100      	movs	r1, #0
 800032e:	f7ff ffd3 	bl	80002d8 <map>
 8000332:	4603      	mov	r3, r0
 8000334:	4a05      	ldr	r2, [pc, #20]	; (800034c <HAL_ADC_ConvCpltCallback+0x38>)
 8000336:	6013      	str	r3, [r2, #0]

	TIM1->CCR1 = ADC_Converted;
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <HAL_ADC_ConvCpltCallback+0x38>)
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <HAL_ADC_ConvCpltCallback+0x3c>)
 800033e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	24000154 	.word	0x24000154
 800034c:	24000158 	.word	0x24000158
 8000350:	40010000 	.word	0x40010000

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 fbe6 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f82c 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 f9b6 	bl	80006d0 <MX_GPIO_Init>
  MX_BDMA_Init();
 8000364:	f000 f994 	bl	8000690 <MX_BDMA_Init>
  MX_ADC3_Init();
 8000368:	f000 f8a2 	bl	80004b0 <MX_ADC3_Init>
  MX_TIM1_Init();
 800036c:	f000 f900 	bl	8000570 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000370:	2100      	movs	r1, #0
 8000372:	480d      	ldr	r0, [pc, #52]	; (80003a8 <main+0x54>)
 8000374:	f007 ff84 	bl	8008280 <HAL_TIM_PWM_Start>


#if Calibrate
  TIM1->CCR1 = 100;  // Set the maximum pulse (2ms)
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <main+0x58>)
 800037a:	2264      	movs	r2, #100	; 0x64
 800037c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay (2000);  // wait for 1 beep
 800037e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000382:	f000 fc63 	bl	8000c4c <HAL_Delay>
  TIM1->CCR1 = 50;   // Set the minimum Pulse (1ms)
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <main+0x58>)
 8000388:	2232      	movs	r2, #50	; 0x32
 800038a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay (1000);  // wait for 2 beeps
 800038c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000390:	f000 fc5c 	bl	8000c4c <HAL_Delay>
  TIM1->CCR1 = 0;    // reset to 0, so it can be controlled via ADC
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <main+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	635a      	str	r2, [r3, #52]	; 0x34
#endif
  HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&ADC_Data, 1);
 800039a:	2201      	movs	r2, #1
 800039c:	4904      	ldr	r1, [pc, #16]	; (80003b0 <main+0x5c>)
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <main+0x60>)
 80003a0:	f001 f824 	bl	80013ec <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x50>
 80003a6:	bf00      	nop
 80003a8:	24000108 	.word	0x24000108
 80003ac:	40010000 	.word	0x40010000
 80003b0:	24000154 	.word	0x24000154
 80003b4:	2400002c 	.word	0x2400002c

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b09c      	sub	sp, #112	; 0x70
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c2:	224c      	movs	r2, #76	; 0x4c
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f008 fe42 	bl	8009050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2220      	movs	r2, #32
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f008 fe3c 	bl	8009050 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003d8:	2002      	movs	r0, #2
 80003da:	f004 f9f1 	bl	80047c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80003de:	2300      	movs	r3, #0
 80003e0:	603b      	str	r3, [r7, #0]
 80003e2:	4b31      	ldr	r3, [pc, #196]	; (80004a8 <SystemClock_Config+0xf0>)
 80003e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e6:	4a30      	ldr	r2, [pc, #192]	; (80004a8 <SystemClock_Config+0xf0>)
 80003e8:	f023 0301 	bic.w	r3, r3, #1
 80003ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003ee:	4b2e      	ldr	r3, [pc, #184]	; (80004a8 <SystemClock_Config+0xf0>)
 80003f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	4b2c      	ldr	r3, [pc, #176]	; (80004ac <SystemClock_Config+0xf4>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000400:	4a2a      	ldr	r2, [pc, #168]	; (80004ac <SystemClock_Config+0xf4>)
 8000402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b28      	ldr	r3, [pc, #160]	; (80004ac <SystemClock_Config+0xf4>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000414:	bf00      	nop
 8000416:	4b25      	ldr	r3, [pc, #148]	; (80004ac <SystemClock_Config+0xf4>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800041e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000422:	d1f8      	bne.n	8000416 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000424:	2301      	movs	r3, #1
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000432:	2302      	movs	r3, #2
 8000434:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000436:	2305      	movs	r3, #5
 8000438:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800043a:	2360      	movs	r3, #96	; 0x60
 800043c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800043e:	2302      	movs	r3, #2
 8000440:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000442:	2302      	movs	r3, #2
 8000444:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000446:	2302      	movs	r3, #2
 8000448:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800044a:	2308      	movs	r3, #8
 800044c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800044e:	2300      	movs	r3, #0
 8000450:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800045a:	4618      	mov	r0, r3
 800045c:	f004 f9ea 	bl	8004834 <HAL_RCC_OscConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000466:	f000 f96b 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046a:	233f      	movs	r3, #63	; 0x3f
 800046c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046e:	2303      	movs	r3, #3
 8000470:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000476:	2308      	movs	r3, #8
 8000478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f004 fe2a 	bl	80050e8 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800049a:	f000 f951 	bl	8000740 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3770      	adds	r7, #112	; 0x70
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	58000400 	.word	0x58000400
 80004ac:	58024800 	.word	0x58024800

080004b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
 80004c4:	615a      	str	r2, [r3, #20]
 80004c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80004c8:	4b27      	ldr	r3, [pc, #156]	; (8000568 <MX_ADC3_Init+0xb8>)
 80004ca:	4a28      	ldr	r2, [pc, #160]	; (800056c <MX_ADC3_Init+0xbc>)
 80004cc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80004ce:	4b26      	ldr	r3, [pc, #152]	; (8000568 <MX_ADC3_Init+0xb8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004d4:	4b24      	ldr	r3, [pc, #144]	; (8000568 <MX_ADC3_Init+0xb8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004da:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MX_ADC3_Init+0xb8>)
 80004dc:	2204      	movs	r2, #4
 80004de:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <MX_ADC3_Init+0xb8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_ADC3_Init+0xb8>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80004ec:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <MX_ADC3_Init+0xb8>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_ADC3_Init+0xb8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_ADC3_Init+0xb8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_ADC3_Init+0xb8>)
 8000500:	2200      	movs	r2, #0
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_ADC3_Init+0xb8>)
 8000506:	2200      	movs	r2, #0
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_ADC3_Init+0xb8>)
 800050c:	2200      	movs	r2, #0
 800050e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_ADC3_Init+0xb8>)
 8000512:	2200      	movs	r2, #0
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_ADC3_Init+0xb8>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800051e:	4812      	ldr	r0, [pc, #72]	; (8000568 <MX_ADC3_Init+0xb8>)
 8000520:	f000 fdc2 	bl	80010a8 <HAL_ADC_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800052a:	f000 f909 	bl	8000740 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800052e:	2301      	movs	r3, #1
 8000530:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000532:	2306      	movs	r3, #6
 8000534:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000536:	2307      	movs	r3, #7
 8000538:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800053a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800053e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000540:	2304      	movs	r3, #4
 8000542:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_ADC3_Init+0xb8>)
 8000552:	f001 f823 	bl	800159c <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800055c:	f000 f8f0 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2400002c 	.word	0x2400002c
 800056c:	58026000 	.word	0x58026000

08000570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000576:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	222c      	movs	r2, #44	; 0x2c
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f008 fd57 	bl	8009050 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <MX_TIM1_Init+0x118>)
 80005a4:	4a39      	ldr	r2, [pc, #228]	; (800068c <MX_TIM1_Init+0x11c>)
 80005a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 80005a8:	4b37      	ldr	r3, [pc, #220]	; (8000688 <MX_TIM1_Init+0x118>)
 80005aa:	2277      	movs	r2, #119	; 0x77
 80005ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <MX_TIM1_Init+0x118>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80005b4:	4b34      	ldr	r3, [pc, #208]	; (8000688 <MX_TIM1_Init+0x118>)
 80005b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005bc:	4b32      	ldr	r3, [pc, #200]	; (8000688 <MX_TIM1_Init+0x118>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <MX_TIM1_Init+0x118>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c8:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <MX_TIM1_Init+0x118>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005ce:	482e      	ldr	r0, [pc, #184]	; (8000688 <MX_TIM1_Init+0x118>)
 80005d0:	f007 fdfe 	bl	80081d0 <HAL_TIM_PWM_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80005da:	f000 f8b1 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005e2:	2300      	movs	r3, #0
 80005e4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ee:	4619      	mov	r1, r3
 80005f0:	4825      	ldr	r0, [pc, #148]	; (8000688 <MX_TIM1_Init+0x118>)
 80005f2:	f008 fbfd 	bl	8008df0 <HAL_TIMEx_MasterConfigSynchronization>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 f8a0 	bl	8000740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000608:	2300      	movs	r3, #0
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000618:	2300      	movs	r3, #0
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800061c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000620:	2200      	movs	r2, #0
 8000622:	4619      	mov	r1, r3
 8000624:	4818      	ldr	r0, [pc, #96]	; (8000688 <MX_TIM1_Init+0x118>)
 8000626:	f007 ff39 	bl	800849c <HAL_TIM_PWM_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000630:	f000 f886 	bl	8000740 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800064c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4619      	mov	r1, r3
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <MX_TIM1_Init+0x118>)
 800066a:	f008 fc4f 	bl	8008f0c <HAL_TIMEx_ConfigBreakDeadTime>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000674:	f000 f864 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <MX_TIM1_Init+0x118>)
 800067a:	f000 f933 	bl	80008e4 <HAL_TIM_MspPostInit>

}
 800067e:	bf00      	nop
 8000680:	3758      	adds	r7, #88	; 0x58
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	24000108 	.word	0x24000108
 800068c:	40010000 	.word	0x40010000

08000690 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_BDMA_Init+0x3c>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <MX_BDMA_Init+0x3c>)
 800069e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_BDMA_Init+0x3c>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2081      	movs	r0, #129	; 0x81
 80006ba:	f001 fdc4 	bl	8002246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80006be:	2081      	movs	r0, #129	; 0x81
 80006c0:	f001 fddb 	bl	800227a <HAL_NVIC_EnableIRQ>

}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58024400 	.word	0x58024400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0x6c>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_GPIO_Init+0x6c>)
 80006de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_GPIO_Init+0x6c>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_GPIO_Init+0x6c>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <MX_GPIO_Init+0x6c>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_GPIO_Init+0x6c>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_GPIO_Init+0x6c>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	4a08      	ldr	r2, [pc, #32]	; (800073c <MX_GPIO_Init+0x6c>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_GPIO_Init+0x6c>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	f003 0310 	and.w	r3, r3, #16
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	58024400 	.word	0x58024400

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_MspInit+0x30>)
 8000754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x30>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x30>)
 8000764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	58024400 	.word	0x58024400

08000780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b0b4      	sub	sp, #208	; 0xd0
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	22c0      	movs	r2, #192	; 0xc0
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f008 fc5d 	bl	8009050 <memset>
  if(hadc->Instance==ADC3)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a3d      	ldr	r2, [pc, #244]	; (8000890 <HAL_ADC_MspInit+0x110>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d173      	bne.n	8000888 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007a4:	f04f 0300 	mov.w	r3, #0
 80007a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007ac:	2305      	movs	r3, #5
 80007ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 96;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 100;
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fffc 	bl	80057d4 <HAL_RCCEx_PeriphCLKConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80007e2:	f7ff ffad 	bl	8000740 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <HAL_ADC_MspInit+0x114>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a29      	ldr	r2, [pc, #164]	; (8000894 <HAL_ADC_MspInit+0x114>)
 80007ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <HAL_ADC_MspInit+0x114>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <HAL_ADC_MspInit+0x114>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080a:	4a22      	ldr	r2, [pc, #136]	; (8000894 <HAL_ADC_MspInit+0x114>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <HAL_ADC_MspInit+0x114>)
 8000816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000822:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000826:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800082a:	f000 fa3f 	bl	8000cac <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000830:	4a1a      	ldr	r2, [pc, #104]	; (800089c <HAL_ADC_MspInit+0x11c>)
 8000832:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000836:	2211      	movs	r2, #17
 8000838:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <HAL_ADC_MspInit+0x118>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800084c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000854:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000864:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800086c:	480a      	ldr	r0, [pc, #40]	; (8000898 <HAL_ADC_MspInit+0x118>)
 800086e:	f001 fd1f 	bl	80022b0 <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000878:	f7ff ff62 	bl	8000740 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a06      	ldr	r2, [pc, #24]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000880:	64da      	str	r2, [r3, #76]	; 0x4c
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <HAL_ADC_MspInit+0x118>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	37d0      	adds	r7, #208	; 0xd0
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58026000 	.word	0x58026000
 8000894:	58024400 	.word	0x58024400
 8000898:	24000090 	.word	0x24000090
 800089c:	58025408 	.word	0x58025408

080008a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <HAL_TIM_PWM_MspInit+0x3c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d10e      	bne.n	80008d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_TIM_PWM_MspInit+0x40>)
 80008b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <HAL_TIM_PWM_MspInit+0x40>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <HAL_TIM_PWM_MspInit+0x40>)
 80008c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40010000 	.word	0x40010000
 80008e0:	58024400 	.word	0x58024400

080008e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a13      	ldr	r2, [pc, #76]	; (8000950 <HAL_TIM_MspPostInit+0x6c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d11f      	bne.n	8000946 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_TIM_MspPostInit+0x70>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	4a11      	ldr	r2, [pc, #68]	; (8000954 <HAL_TIM_MspPostInit+0x70>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_TIM_MspPostInit+0x70>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000928:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <HAL_TIM_MspPostInit+0x74>)
 8000942:	f003 fd8d 	bl	8004460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010000 	.word	0x40010000
 8000954:	58024400 	.word	0x58024400
 8000958:	58021000 	.word	0x58021000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f930 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <BDMA_Channel0_IRQHandler+0x10>)
 80009b6:	f002 fa41 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	24000090 	.word	0x24000090

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c8:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <SystemInit+0xe4>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <SystemInit+0xe4>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009d8:	4b34      	ldr	r3, [pc, #208]	; (8000aac <SystemInit+0xe8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	2b06      	cmp	r3, #6
 80009e2:	d807      	bhi.n	80009f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009e4:	4b31      	ldr	r3, [pc, #196]	; (8000aac <SystemInit+0xe8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 030f 	bic.w	r3, r3, #15
 80009ec:	4a2f      	ldr	r2, [pc, #188]	; (8000aac <SystemInit+0xe8>)
 80009ee:	f043 0307 	orr.w	r3, r3, #7
 80009f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <SystemInit+0xec>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <SystemInit+0xec>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a00:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <SystemInit+0xec>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <SystemInit+0xec>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4929      	ldr	r1, [pc, #164]	; (8000ab0 <SystemInit+0xec>)
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <SystemInit+0xf0>)
 8000a0e:	4013      	ands	r3, r2
 8000a10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <SystemInit+0xe8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <SystemInit+0xe8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f023 030f 	bic.w	r3, r3, #15
 8000a26:	4a21      	ldr	r2, [pc, #132]	; (8000aac <SystemInit+0xe8>)
 8000a28:	f043 0307 	orr.w	r3, r3, #7
 8000a2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <SystemInit+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <SystemInit+0xec>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <SystemInit+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <SystemInit+0xec>)
 8000a42:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <SystemInit+0xf4>)
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <SystemInit+0xec>)
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <SystemInit+0xf8>)
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <SystemInit+0xec>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <SystemInit+0xfc>)
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <SystemInit+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <SystemInit+0xec>)
 8000a5a:	4a19      	ldr	r2, [pc, #100]	; (8000ac0 <SystemInit+0xfc>)
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <SystemInit+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <SystemInit+0xec>)
 8000a66:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <SystemInit+0xfc>)
 8000a68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <SystemInit+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <SystemInit+0xec>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <SystemInit+0xec>)
 8000a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <SystemInit+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <SystemInit+0x100>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <SystemInit+0x104>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a8e:	d202      	bcs.n	8000a96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <SystemInit+0x108>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <SystemInit+0x10c>)
 8000a98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	52002000 	.word	0x52002000
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ab8:	02020200 	.word	0x02020200
 8000abc:	01ff0000 	.word	0x01ff0000
 8000ac0:	01010280 	.word	0x01010280
 8000ac4:	5c001000 	.word	0x5c001000
 8000ac8:	ffff0000 	.word	0xffff0000
 8000acc:	51008108 	.word	0x51008108
 8000ad0:	52004000 	.word	0x52004000

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad8:	f7ff ff74 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f008 fa81 	bl	8009008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fc25 	bl	8000354 <main>
  bx  lr
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b14:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b18:	08009098 	.word	0x08009098
  ldr r2, =_sbss
 8000b1c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b20:	24000160 	.word	0x24000160

08000b24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC3_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f001 fb7e 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b34:	f004 fc8e 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_Init+0x68>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	f003 030f 	and.w	r3, r3, #15
 8000b44:	4913      	ldr	r1, [pc, #76]	; (8000b94 <HAL_Init+0x6c>)
 8000b46:	5ccb      	ldrb	r3, [r1, r3]
 8000b48:	f003 031f 	and.w	r3, r3, #31
 8000b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_Init+0x68>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_Init+0x6c>)
 8000b5c:	5cd3      	ldrb	r3, [r2, r3]
 8000b5e:	f003 031f 	and.w	r3, r3, #31
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	fa22 f303 	lsr.w	r3, r2, r3
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <HAL_Init+0x70>)
 8000b6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_Init+0x74>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f814 	bl	8000ba0 <HAL_InitTick>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e002      	b.n	8000b88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b82:	f7ff fde3 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	58024400 	.word	0x58024400
 8000b94:	08009078 	.word	0x08009078
 8000b98:	24000004 	.word	0x24000004
 8000b9c:	24000000 	.word	0x24000000

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_InitTick+0x60>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e021      	b.n	8000bf8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_InitTick+0x64>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_InitTick+0x60>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 fb63 	bl	8002296 <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f001 fb2d 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_InitTick+0x68>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2400000c 	.word	0x2400000c
 8000c04:	24000000 	.word	0x24000000
 8000c08:	24000008 	.word	0x24000008

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2400000c 	.word	0x2400000c
 8000c30:	2400015c 	.word	0x2400015c

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2400015c 	.word	0x2400015c

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2400000c 	.word	0x2400000c

08000c94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetREVID+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	0c1b      	lsrs	r3, r3, #16
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	5c001000 	.word	0x5c001000

08000cac <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	4904      	ldr	r1, [pc, #16]	; (8000cd4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	604b      	str	r3, [r1, #4]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	58000400 	.word	0x58000400

08000cd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	609a      	str	r2, [r3, #8]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3360      	adds	r3, #96	; 0x60
 8000d52:	461a      	mov	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000d74:	bf00      	nop
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	431a      	orrs	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	611a      	str	r2, [r3, #16]
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b087      	sub	sp, #28
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3360      	adds	r3, #96	; 0x60
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	601a      	str	r2, [r3, #0]
  }
}
 8000ddc:	bf00      	nop
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b087      	sub	sp, #28
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3330      	adds	r3, #48	; 0x30
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	4413      	add	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	f003 031f 	and.w	r3, r3, #31
 8000e38:	211f      	movs	r1, #31
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	401a      	ands	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	0e9b      	lsrs	r3, r3, #26
 8000e46:	f003 011f 	and.w	r1, r3, #31
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	431a      	orrs	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e5a:	bf00      	nop
 8000e5c:	371c      	adds	r7, #28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	f023 0203 	bic.w	r2, r3, #3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60da      	str	r2, [r3, #12]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3314      	adds	r3, #20
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	0e5b      	lsrs	r3, r3, #25
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	0d1b      	lsrs	r3, r3, #20
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	2107      	movs	r1, #7
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	0d1b      	lsrs	r3, r3, #20
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0318 	and.w	r3, r3, #24
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f08:	40d9      	lsrs	r1, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f12:	431a      	orrs	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	000fffff 	.word	0x000fffff

08000f2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 031f 	and.w	r3, r3, #31
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6093      	str	r3, [r2, #8]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	5fffffc0 	.word	0x5fffffc0

08000f6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f80:	d101      	bne.n	8000f86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	6fffffc0 	.word	0x6fffffc0

08000fbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fd0:	d101      	bne.n	8000fd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <LL_ADC_Enable+0x24>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	f043 0201 	orr.w	r2, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	7fffffc0 	.word	0x7fffffc0

0800100c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <LL_ADC_IsEnabled+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_ADC_IsEnabled+0x1a>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <LL_ADC_REG_StartConversion+0x24>)
 8001042:	4013      	ands	r3, r2
 8001044:	f043 0204 	orr.w	r2, r3, #4
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	7fffffc0 	.word	0x7fffffc0

0800105c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b04      	cmp	r3, #4
 800106e:	d101      	bne.n	8001074 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b08      	cmp	r3, #8
 8001094:	d101      	bne.n	800109a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e18f      	b.n	80013e2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff fb55 	bl	8000780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff3f 	bl	8000f6c <LL_ADC_IsDeepPowerDownEnabled>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff25 	bl	8000f48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff5a 	bl	8000fbc <LL_ADC_IsInternalRegulatorEnabled>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d114      	bne.n	8001138 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff3e 	bl	8000f94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001118:	4b87      	ldr	r3, [pc, #540]	; (8001338 <HAL_ADC_Init+0x290>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	099b      	lsrs	r3, r3, #6
 800111e:	4a87      	ldr	r2, [pc, #540]	; (800133c <HAL_ADC_Init+0x294>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	099b      	lsrs	r3, r3, #6
 8001126:	3301      	adds	r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800112a:	e002      	b.n	8001132 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	3b01      	subs	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f9      	bne.n	800112c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff3d 	bl	8000fbc <LL_ADC_IsInternalRegulatorEnabled>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10d      	bne.n	8001164 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114c:	f043 0210 	orr.w	r2, r3, #16
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff77 	bl	800105c <LL_ADC_REG_IsConversionOngoing>
 800116e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b00      	cmp	r3, #0
 800117a:	f040 8129 	bne.w	80013d0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f040 8125 	bne.w	80013d0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800118e:	f043 0202 	orr.w	r2, r3, #2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff36 	bl	800100c <LL_ADC_IsEnabled>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d136      	bne.n	8001214 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a65      	ldr	r2, [pc, #404]	; (8001340 <HAL_ADC_Init+0x298>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d004      	beq.n	80011ba <HAL_ADC_Init+0x112>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a63      	ldr	r2, [pc, #396]	; (8001344 <HAL_ADC_Init+0x29c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10e      	bne.n	80011d8 <HAL_ADC_Init+0x130>
 80011ba:	4861      	ldr	r0, [pc, #388]	; (8001340 <HAL_ADC_Init+0x298>)
 80011bc:	f7ff ff26 	bl	800100c <LL_ADC_IsEnabled>
 80011c0:	4604      	mov	r4, r0
 80011c2:	4860      	ldr	r0, [pc, #384]	; (8001344 <HAL_ADC_Init+0x29c>)
 80011c4:	f7ff ff22 	bl	800100c <LL_ADC_IsEnabled>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4323      	orrs	r3, r4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	e008      	b.n	80011ea <HAL_ADC_Init+0x142>
 80011d8:	485b      	ldr	r0, [pc, #364]	; (8001348 <HAL_ADC_Init+0x2a0>)
 80011da:	f7ff ff17 	bl	800100c <LL_ADC_IsEnabled>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d012      	beq.n	8001214 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a53      	ldr	r2, [pc, #332]	; (8001340 <HAL_ADC_Init+0x298>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d004      	beq.n	8001202 <HAL_ADC_Init+0x15a>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a51      	ldr	r2, [pc, #324]	; (8001344 <HAL_ADC_Init+0x29c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0x15e>
 8001202:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_ADC_Init+0x2a4>)
 8001204:	e000      	b.n	8001208 <HAL_ADC_Init+0x160>
 8001206:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_ADC_Init+0x2a8>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4619      	mov	r1, r3
 800120e:	4610      	mov	r0, r2
 8001210:	f7ff fd62 	bl	8000cd8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001214:	f7ff fd3e 	bl	8000c94 <HAL_GetREVID>
 8001218:	4603      	mov	r3, r0
 800121a:	f241 0203 	movw	r2, #4099	; 0x1003
 800121e:	4293      	cmp	r3, r2
 8001220:	d914      	bls.n	800124c <HAL_ADC_Init+0x1a4>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b10      	cmp	r3, #16
 8001228:	d110      	bne.n	800124c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7d5b      	ldrb	r3, [r3, #21]
 800122e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001234:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800123a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7f1b      	ldrb	r3, [r3, #28]
 8001240:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001242:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001244:	f043 030c 	orr.w	r3, r3, #12
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	e00d      	b.n	8001268 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7d5b      	ldrb	r3, [r3, #21]
 8001250:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001256:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800125c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7f1b      	ldrb	r3, [r3, #28]
 8001262:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7f1b      	ldrb	r3, [r3, #28]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	3b01      	subs	r3, #1
 8001276:	045b      	lsls	r3, r3, #17
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <HAL_ADC_Init+0x2ac>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	69b9      	ldr	r1, [r7, #24]
 80012aa:	430b      	orrs	r3, r1
 80012ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fed2 	bl	800105c <LL_ADC_REG_IsConversionOngoing>
 80012b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fedf 	bl	8001082 <LL_ADC_INJ_IsConversionOngoing>
 80012c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d15f      	bne.n	800138c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d15c      	bne.n	800138c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7d1b      	ldrb	r3, [r3, #20]
 80012d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_ADC_Init+0x2b0>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	69b9      	ldr	r1, [r7, #24]
 80012f0:	430b      	orrs	r3, r1
 80012f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d130      	bne.n	8001360 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_ADC_Init+0x2b4>)
 800130c:	4013      	ands	r3, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001312:	3a01      	subs	r2, #1
 8001314:	0411      	lsls	r1, r2, #16
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800131a:	4311      	orrs	r1, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001320:	4311      	orrs	r1, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001326:	430a      	orrs	r2, r1
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	e01c      	b.n	8001370 <HAL_ADC_Init+0x2c8>
 8001336:	bf00      	nop
 8001338:	24000000 	.word	0x24000000
 800133c:	053e2d63 	.word	0x053e2d63
 8001340:	40022000 	.word	0x40022000
 8001344:	40022100 	.word	0x40022100
 8001348:	58026000 	.word	0x58026000
 800134c:	40022300 	.word	0x40022300
 8001350:	58026300 	.word	0x58026300
 8001354:	fff0c003 	.word	0xfff0c003
 8001358:	ffffbffc 	.word	0xffffbffc
 800135c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fd76 	bl	8001e78 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10c      	bne.n	80013ae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f023 010f 	bic.w	r1, r3, #15
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
 80013ac:	e007      	b.n	80013be <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020f 	bic.w	r2, r2, #15
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	f023 0303 	bic.w	r3, r3, #3
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	655a      	str	r2, [r3, #84]	; 0x54
 80013ce:	e007      	b.n	80013e0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	f043 0210 	orr.w	r2, r3, #16
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd90      	pop	{r4, r7, pc}
 80013ea:	bf00      	nop

080013ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a55      	ldr	r2, [pc, #340]	; (8001554 <HAL_ADC_Start_DMA+0x168>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d004      	beq.n	800140c <HAL_ADC_Start_DMA+0x20>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a54      	ldr	r2, [pc, #336]	; (8001558 <HAL_ADC_Start_DMA+0x16c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_ADC_Start_DMA+0x24>
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_ADC_Start_DMA+0x170>)
 800140e:	e000      	b.n	8001412 <HAL_ADC_Start_DMA+0x26>
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_ADC_Start_DMA+0x174>)
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fd8a 	bl	8000f2c <LL_ADC_GetMultimode>
 8001418:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe1c 	bl	800105c <LL_ADC_REG_IsConversionOngoing>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 808c 	bne.w	8001544 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_ADC_Start_DMA+0x4e>
 8001436:	2302      	movs	r3, #2
 8001438:	e087      	b.n	800154a <HAL_ADC_Start_DMA+0x15e>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d002      	beq.n	8001454 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	2b09      	cmp	r3, #9
 8001452:	d170      	bne.n	8001536 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 fbf1 	bl	8001c3c <ADC_Enable>
 800145a:	4603      	mov	r3, r0
 800145c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d163      	bne.n	800152c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <HAL_ADC_Start_DMA+0x178>)
 800146a:	4013      	ands	r3, r2
 800146c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a37      	ldr	r2, [pc, #220]	; (8001558 <HAL_ADC_Start_DMA+0x16c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d002      	beq.n	8001484 <HAL_ADC_Start_DMA+0x98>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	e000      	b.n	8001486 <HAL_ADC_Start_DMA+0x9a>
 8001484:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_ADC_Start_DMA+0x168>)
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	4293      	cmp	r3, r2
 800148c:	d002      	beq.n	8001494 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001498:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	f023 0206 	bic.w	r2, r3, #6
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
 80014b8:	e002      	b.n	80014c0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_ADC_Start_DMA+0x17c>)
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	4a27      	ldr	r2, [pc, #156]	; (800156c <HAL_ADC_Start_DMA+0x180>)
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_ADC_Start_DMA+0x184>)
 80014d6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	221c      	movs	r2, #28
 80014de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0210 	orr.w	r2, r2, #16
 80014f6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f7ff fcaf 	bl	8000e66 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3340      	adds	r3, #64	; 0x40
 8001512:	4619      	mov	r1, r3
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f001 fa26 	bl	8002968 <HAL_DMA_Start_IT>
 800151c:	4603      	mov	r3, r0
 800151e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fd85 	bl	8001034 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800152a:	e00d      	b.n	8001548 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001534:	e008      	b.n	8001548 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001542:	e001      	b.n	8001548 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001544:	2302      	movs	r3, #2
 8001546:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001548:	7dfb      	ldrb	r3, [r7, #23]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40022000 	.word	0x40022000
 8001558:	40022100 	.word	0x40022100
 800155c:	40022300 	.word	0x40022300
 8001560:	58026300 	.word	0x58026300
 8001564:	fffff0fe 	.word	0xfffff0fe
 8001568:	08001d51 	.word	0x08001d51
 800156c:	08001e29 	.word	0x08001e29
 8001570:	08001e45 	.word	0x08001e45

08001574 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b0a1      	sub	sp, #132	; 0x84
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4a9d      	ldr	r2, [pc, #628]	; (800182c <HAL_ADC_ConfigChannel+0x290>)
 80015b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x2a>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e321      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x66e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fd42 	bl	800105c <LL_ADC_REG_IsConversionOngoing>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 8306 	bne.w	8001bec <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d108      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x62>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0e9b      	lsrs	r3, r3, #26
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2201      	movs	r2, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	e016      	b.n	800162c <HAL_ADC_ConfigChannel+0x90>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800160c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800160e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001616:	2320      	movs	r3, #32
 8001618:	e003      	b.n	8001622 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800161a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2201      	movs	r2, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	69d1      	ldr	r1, [r2, #28]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	430b      	orrs	r3, r1
 8001638:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6859      	ldr	r1, [r3, #4]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	f7ff fbe1 	bl	8000e0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fd03 	bl	800105c <LL_ADC_REG_IsConversionOngoing>
 8001656:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fd10 	bl	8001082 <LL_ADC_INJ_IsConversionOngoing>
 8001662:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 80b3 	bne.w	80017d2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800166c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 80af 	bne.w	80017d2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6819      	ldr	r1, [r3, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	461a      	mov	r2, r3
 8001682:	f7ff fc03 	bl	8000e8c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001686:	4b6a      	ldr	r3, [pc, #424]	; (8001830 <HAL_ADC_ConfigChannel+0x294>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800168e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001692:	d10b      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x110>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	e01d      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x14c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10b      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x136>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	e00a      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x14c>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d027      	beq.n	8001742 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6919      	ldr	r1, [r3, #16]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001700:	f7ff fb1e 	bl	8000d40 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6919      	ldr	r1, [r3, #16]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	7e5b      	ldrb	r3, [r3, #25]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <HAL_ADC_ConfigChannel+0x17e>
 8001714:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001718:	e000      	b.n	800171c <HAL_ADC_ConfigChannel+0x180>
 800171a:	2300      	movs	r3, #0
 800171c:	461a      	mov	r2, r3
 800171e:	f7ff fb48 	bl	8000db2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6919      	ldr	r1, [r3, #16]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	7e1b      	ldrb	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d102      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x19c>
 8001732:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001736:	e000      	b.n	800173a <HAL_ADC_ConfigChannel+0x19e>
 8001738:	2300      	movs	r3, #0
 800173a:	461a      	mov	r2, r3
 800173c:	f7ff fb20 	bl	8000d80 <LL_ADC_SetDataRightShift>
 8001740:	e047      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001748:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	069b      	lsls	r3, r3, #26
 8001752:	429a      	cmp	r2, r3
 8001754:	d107      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001764:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800176c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	069b      	lsls	r3, r3, #26
 8001776:	429a      	cmp	r2, r3
 8001778:	d107      	bne.n	800178a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001788:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001790:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	069b      	lsls	r3, r3, #26
 800179a:	429a      	cmp	r2, r3
 800179c:	d107      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017ac:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	069b      	lsls	r3, r3, #26
 80017be:	429a      	cmp	r2, r3
 80017c0:	d107      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017d0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fc18 	bl	800100c <LL_ADC_IsEnabled>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 820d 	bne.w	8001bfe <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	461a      	mov	r2, r3
 80017f2:	f7ff fb77 	bl	8000ee4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	4a0c      	ldr	r2, [pc, #48]	; (800182c <HAL_ADC_ConfigChannel+0x290>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	f040 8133 	bne.w	8001a68 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800180e:	2b00      	cmp	r3, #0
 8001810:	d110      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x298>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	0e9b      	lsrs	r3, r3, #26
 8001818:	3301      	adds	r3, #1
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2b09      	cmp	r3, #9
 8001820:	bf94      	ite	ls
 8001822:	2301      	movls	r3, #1
 8001824:	2300      	movhi	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	e01e      	b.n	8001868 <HAL_ADC_ConfigChannel+0x2cc>
 800182a:	bf00      	nop
 800182c:	47ff0000 	.word	0x47ff0000
 8001830:	5c001000 	.word	0x5c001000
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001844:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800184c:	2320      	movs	r3, #32
 800184e:	e003      	b.n	8001858 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	3301      	adds	r3, #1
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	2b09      	cmp	r3, #9
 8001860:	bf94      	ite	ls
 8001862:	2301      	movls	r3, #1
 8001864:	2300      	movhi	r3, #0
 8001866:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001868:	2b00      	cmp	r3, #0
 800186a:	d079      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001874:	2b00      	cmp	r3, #0
 8001876:	d107      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x2ec>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0e9b      	lsrs	r3, r3, #26
 800187e:	3301      	adds	r3, #1
 8001880:	069b      	lsls	r3, r3, #26
 8001882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001886:	e015      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x318>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001898:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800189a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80018a0:	2320      	movs	r3, #32
 80018a2:	e003      	b.n	80018ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80018a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	069b      	lsls	r3, r3, #26
 80018b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x338>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0e9b      	lsrs	r3, r3, #26
 80018c6:	3301      	adds	r3, #1
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	e017      	b.n	8001904 <HAL_ADC_ConfigChannel+0x368>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80018e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80018e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80018ec:	2320      	movs	r3, #32
 80018ee:	e003      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80018f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	ea42 0103 	orr.w	r1, r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_ADC_ConfigChannel+0x38e>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0e9b      	lsrs	r3, r3, #26
 800191a:	3301      	adds	r3, #1
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	051b      	lsls	r3, r3, #20
 8001928:	e018      	b.n	800195c <HAL_ADC_ConfigChannel+0x3c0>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001942:	2320      	movs	r3, #32
 8001944:	e003      	b.n	800194e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3301      	adds	r3, #1
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800195c:	430b      	orrs	r3, r1
 800195e:	e07e      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001968:	2b00      	cmp	r3, #0
 800196a:	d107      	bne.n	800197c <HAL_ADC_ConfigChannel+0x3e0>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0e9b      	lsrs	r3, r3, #26
 8001972:	3301      	adds	r3, #1
 8001974:	069b      	lsls	r3, r3, #26
 8001976:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800197a:	e015      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x40c>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001994:	2320      	movs	r3, #32
 8001996:	e003      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	3301      	adds	r3, #1
 80019a2:	069b      	lsls	r3, r3, #26
 80019a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x42c>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0e9b      	lsrs	r3, r3, #26
 80019ba:	3301      	adds	r3, #1
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2101      	movs	r1, #1
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	e017      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x45c>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	61bb      	str	r3, [r7, #24]
  return result;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80019e0:	2320      	movs	r3, #32
 80019e2:	e003      	b.n	80019ec <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	ea42 0103 	orr.w	r1, r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10d      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x488>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b1e      	subs	r3, #30
 8001a1c:	051b      	lsls	r3, r3, #20
 8001a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a22:	e01b      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x4c0>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	60fb      	str	r3, [r7, #12]
  return result;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001a3c:	2320      	movs	r3, #32
 8001a3e:	e003      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f003 021f 	and.w	r2, r3, #31
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	051b      	lsls	r3, r3, #20
 8001a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	6892      	ldr	r2, [r2, #8]
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff fa12 	bl	8000e8c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f280 80c6 	bge.w	8001bfe <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a67      	ldr	r2, [pc, #412]	; (8001c14 <HAL_ADC_ConfigChannel+0x678>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d004      	beq.n	8001a86 <HAL_ADC_ConfigChannel+0x4ea>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a65      	ldr	r2, [pc, #404]	; (8001c18 <HAL_ADC_ConfigChannel+0x67c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x4ee>
 8001a86:	4b65      	ldr	r3, [pc, #404]	; (8001c1c <HAL_ADC_ConfigChannel+0x680>)
 8001a88:	e000      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x4f0>
 8001a8a:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_ADC_ConfigChannel+0x684>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f949 	bl	8000d24 <LL_ADC_GetCommonPathInternalCh>
 8001a92:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a5e      	ldr	r2, [pc, #376]	; (8001c14 <HAL_ADC_ConfigChannel+0x678>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0x50c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a5d      	ldr	r2, [pc, #372]	; (8001c18 <HAL_ADC_ConfigChannel+0x67c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d10e      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x52a>
 8001aa8:	485a      	ldr	r0, [pc, #360]	; (8001c14 <HAL_ADC_ConfigChannel+0x678>)
 8001aaa:	f7ff faaf 	bl	800100c <LL_ADC_IsEnabled>
 8001aae:	4604      	mov	r4, r0
 8001ab0:	4859      	ldr	r0, [pc, #356]	; (8001c18 <HAL_ADC_ConfigChannel+0x67c>)
 8001ab2:	f7ff faab 	bl	800100c <LL_ADC_IsEnabled>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4323      	orrs	r3, r4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	e008      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x53c>
 8001ac6:	4857      	ldr	r0, [pc, #348]	; (8001c24 <HAL_ADC_ConfigChannel+0x688>)
 8001ac8:	f7ff faa0 	bl	800100c <LL_ADC_IsEnabled>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d07d      	beq.n	8001bd8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a51      	ldr	r2, [pc, #324]	; (8001c28 <HAL_ADC_ConfigChannel+0x68c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d130      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x5ac>
 8001ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d12b      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <HAL_ADC_ConfigChannel+0x688>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	f040 8081 	bne.w	8001bfe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <HAL_ADC_ConfigChannel+0x678>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d004      	beq.n	8001b10 <HAL_ADC_ConfigChannel+0x574>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a43      	ldr	r2, [pc, #268]	; (8001c18 <HAL_ADC_ConfigChannel+0x67c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x578>
 8001b10:	4a42      	ldr	r2, [pc, #264]	; (8001c1c <HAL_ADC_ConfigChannel+0x680>)
 8001b12:	e000      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x57a>
 8001b14:	4a42      	ldr	r2, [pc, #264]	; (8001c20 <HAL_ADC_ConfigChannel+0x684>)
 8001b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f7ff f8ed 	bl	8000cfe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b24:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_ADC_ConfigChannel+0x690>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	4a41      	ldr	r2, [pc, #260]	; (8001c30 <HAL_ADC_ConfigChannel+0x694>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	3301      	adds	r3, #1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001b38:	e002      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f9      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b46:	e05a      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_ADC_ConfigChannel+0x698>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d11e      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x5f4>
 8001b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d119      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <HAL_ADC_ConfigChannel+0x688>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d14b      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2a      	ldr	r2, [pc, #168]	; (8001c14 <HAL_ADC_ConfigChannel+0x678>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d004      	beq.n	8001b7a <HAL_ADC_ConfigChannel+0x5de>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <HAL_ADC_ConfigChannel+0x67c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x5e2>
 8001b7a:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <HAL_ADC_ConfigChannel+0x680>)
 8001b7c:	e000      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x5e4>
 8001b7e:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <HAL_ADC_ConfigChannel+0x684>)
 8001b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b86:	4619      	mov	r1, r3
 8001b88:	4610      	mov	r0, r2
 8001b8a:	f7ff f8b8 	bl	8000cfe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b8e:	e036      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_ADC_ConfigChannel+0x69c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d131      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x662>
 8001b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d12c      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_ADC_ConfigChannel+0x688>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d127      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_ADC_ConfigChannel+0x678>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_ConfigChannel+0x626>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_ADC_ConfigChannel+0x67c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x62a>
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_ADC_ConfigChannel+0x680>)
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x62c>
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_ADC_ConfigChannel+0x684>)
 8001bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	f7ff f894 	bl	8000cfe <LL_ADC_SetCommonPathInternalCh>
 8001bd6:	e012      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	f043 0220 	orr.w	r2, r3, #32
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001bea:	e008      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf0:	f043 0220 	orr.w	r2, r3, #32
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3784      	adds	r7, #132	; 0x84
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40022100 	.word	0x40022100
 8001c1c:	40022300 	.word	0x40022300
 8001c20:	58026300 	.word	0x58026300
 8001c24:	58026000 	.word	0x58026000
 8001c28:	cb840000 	.word	0xcb840000
 8001c2c:	24000000 	.word	0x24000000
 8001c30:	053e2d63 	.word	0x053e2d63
 8001c34:	c7520000 	.word	0xc7520000
 8001c38:	cfb80000 	.word	0xcfb80000

08001c3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff f9df 	bl	800100c <LL_ADC_IsEnabled>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d16e      	bne.n	8001d32 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <ADC_Enable+0x100>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00d      	beq.n	8001c7e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e05a      	b.n	8001d34 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f9ae 	bl	8000fe4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c88:	f7fe ffd4 	bl	8000c34 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <ADC_Enable+0x104>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d004      	beq.n	8001ca2 <ADC_Enable+0x66>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a29      	ldr	r2, [pc, #164]	; (8001d44 <ADC_Enable+0x108>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <ADC_Enable+0x6a>
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <ADC_Enable+0x10c>)
 8001ca4:	e000      	b.n	8001ca8 <ADC_Enable+0x6c>
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <ADC_Enable+0x110>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f93f 	bl	8000f2c <LL_ADC_GetMultimode>
 8001cae:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <ADC_Enable+0x108>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d002      	beq.n	8001cc0 <ADC_Enable+0x84>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e000      	b.n	8001cc2 <ADC_Enable+0x86>
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <ADC_Enable+0x104>)
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02c      	beq.n	8001d24 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d130      	bne.n	8001d32 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cd0:	e028      	b.n	8001d24 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f998 	bl	800100c <LL_ADC_IsEnabled>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f97c 	bl	8000fe4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cec:	f7fe ffa2 	bl	8000c34 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d914      	bls.n	8001d24 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d00d      	beq.n	8001d24 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0c:	f043 0210 	orr.w	r2, r3, #16
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e007      	b.n	8001d34 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d1cf      	bne.n	8001cd2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	8000003f 	.word	0x8000003f
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40022100 	.word	0x40022100
 8001d48:	40022300 	.word	0x40022300
 8001d4c:	58026300 	.word	0x58026300

08001d50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d14b      	bne.n	8001e02 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d021      	beq.n	8001dc8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f82d 	bl	8000de8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d032      	beq.n	8001dfa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d12b      	bne.n	8001dfa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d11f      	bne.n	8001dfa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
 8001dc6:	e018      	b.n	8001dfa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d111      	bne.n	8001dfa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7fe fa8a 	bl	8000314 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e00:	e00e      	b.n	8001e20 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fbba 	bl	8001588 <HAL_ADC_ErrorCallback>
}
 8001e14:	e004      	b.n	8001e20 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fb9c 	bl	8001574 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f043 0204 	orr.w	r2, r3, #4
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff fb8c 	bl	8001588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a7a      	ldr	r2, [pc, #488]	; (8002070 <ADC_ConfigureBoostMode+0x1f8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d004      	beq.n	8001e94 <ADC_ConfigureBoostMode+0x1c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a79      	ldr	r2, [pc, #484]	; (8002074 <ADC_ConfigureBoostMode+0x1fc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d109      	bne.n	8001ea8 <ADC_ConfigureBoostMode+0x30>
 8001e94:	4b78      	ldr	r3, [pc, #480]	; (8002078 <ADC_ConfigureBoostMode+0x200>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e008      	b.n	8001eba <ADC_ConfigureBoostMode+0x42>
 8001ea8:	4b74      	ldr	r3, [pc, #464]	; (800207c <ADC_ConfigureBoostMode+0x204>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01c      	beq.n	8001ef8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001ebe:	f003 fc43 	bl	8005748 <HAL_RCC_GetHCLKFreq>
 8001ec2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ecc:	d010      	beq.n	8001ef0 <ADC_ConfigureBoostMode+0x78>
 8001ece:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ed2:	d873      	bhi.n	8001fbc <ADC_ConfigureBoostMode+0x144>
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d002      	beq.n	8001ee0 <ADC_ConfigureBoostMode+0x68>
 8001eda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ede:	d16d      	bne.n	8001fbc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	60fb      	str	r3, [r7, #12]
        break;
 8001eee:	e068      	b.n	8001fc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	60fb      	str	r3, [r7, #12]
        break;
 8001ef6:	e064      	b.n	8001fc2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001ef8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	f004 fe72 	bl	8006be8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f04:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001f0e:	d051      	beq.n	8001fb4 <ADC_ConfigureBoostMode+0x13c>
 8001f10:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001f14:	d854      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
 8001f16:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001f1a:	d047      	beq.n	8001fac <ADC_ConfigureBoostMode+0x134>
 8001f1c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001f20:	d84e      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
 8001f22:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001f26:	d03d      	beq.n	8001fa4 <ADC_ConfigureBoostMode+0x12c>
 8001f28:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001f2c:	d848      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
 8001f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f32:	d033      	beq.n	8001f9c <ADC_ConfigureBoostMode+0x124>
 8001f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f38:	d842      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
 8001f3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001f3e:	d029      	beq.n	8001f94 <ADC_ConfigureBoostMode+0x11c>
 8001f40:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001f44:	d83c      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
 8001f46:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001f4a:	d01a      	beq.n	8001f82 <ADC_ConfigureBoostMode+0x10a>
 8001f4c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001f50:	d836      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
 8001f52:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001f56:	d014      	beq.n	8001f82 <ADC_ConfigureBoostMode+0x10a>
 8001f58:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001f5c:	d830      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
 8001f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f62:	d00e      	beq.n	8001f82 <ADC_ConfigureBoostMode+0x10a>
 8001f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f68:	d82a      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
 8001f6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f6e:	d008      	beq.n	8001f82 <ADC_ConfigureBoostMode+0x10a>
 8001f70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f74:	d824      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
 8001f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f7a:	d002      	beq.n	8001f82 <ADC_ConfigureBoostMode+0x10a>
 8001f7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f80:	d11e      	bne.n	8001fc0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0c9b      	lsrs	r3, r3, #18
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	60fb      	str	r3, [r7, #12]
        break;
 8001f92:	e016      	b.n	8001fc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
        break;
 8001f9a:	e012      	b.n	8001fc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	60fb      	str	r3, [r7, #12]
        break;
 8001fa2:	e00e      	b.n	8001fc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	60fb      	str	r3, [r7, #12]
        break;
 8001faa:	e00a      	b.n	8001fc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	09db      	lsrs	r3, r3, #7
 8001fb0:	60fb      	str	r3, [r7, #12]
        break;
 8001fb2:	e006      	b.n	8001fc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	60fb      	str	r3, [r7, #12]
        break;
 8001fba:	e002      	b.n	8001fc2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8001fbc:	bf00      	nop
 8001fbe:	e000      	b.n	8001fc2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8001fc0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001fc2:	f7fe fe67 	bl	8000c94 <HAL_GetREVID>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d815      	bhi.n	8001ffc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <ADC_ConfigureBoostMode+0x208>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d908      	bls.n	8001fea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001fe8:	e03e      	b.n	8002068 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff8:	609a      	str	r2, [r3, #8]
}
 8001ffa:	e035      	b.n	8002068 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <ADC_ConfigureBoostMode+0x20c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d808      	bhi.n	800201c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002018:	609a      	str	r2, [r3, #8]
}
 800201a:	e025      	b.n	8002068 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <ADC_ConfigureBoostMode+0x210>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d80a      	bhi.n	800203a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002036:	609a      	str	r2, [r3, #8]
}
 8002038:	e016      	b.n	8002068 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <ADC_ConfigureBoostMode+0x214>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d80a      	bhi.n	8002058 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002054:	609a      	str	r2, [r3, #8]
}
 8002056:	e007      	b.n	8002068 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002066:	609a      	str	r2, [r3, #8]
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40022000 	.word	0x40022000
 8002074:	40022100 	.word	0x40022100
 8002078:	40022300 	.word	0x40022300
 800207c:	58026300 	.word	0x58026300
 8002080:	01312d00 	.word	0x01312d00
 8002084:	005f5e10 	.word	0x005f5e10
 8002088:	00bebc20 	.word	0x00bebc20
 800208c:	017d7840 	.word	0x017d7840

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <__NVIC_SetPriorityGrouping+0x40>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <__NVIC_SetPriorityGrouping+0x40>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00
 80020d4:	05fa0000 	.word	0x05fa0000

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff40 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff90 	bl	8002184 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5f 	bl	8002130 <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff33 	bl	80020f4 <__NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffa4 	bl	80021ec <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7fe fcbc 	bl	8000c34 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e316      	b.n	80028f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a66      	ldr	r2, [pc, #408]	; (8002468 <HAL_DMA_Init+0x1b8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d04a      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a65      	ldr	r2, [pc, #404]	; (800246c <HAL_DMA_Init+0x1bc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d045      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a63      	ldr	r2, [pc, #396]	; (8002470 <HAL_DMA_Init+0x1c0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d040      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a62      	ldr	r2, [pc, #392]	; (8002474 <HAL_DMA_Init+0x1c4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d03b      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a60      	ldr	r2, [pc, #384]	; (8002478 <HAL_DMA_Init+0x1c8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d036      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5f      	ldr	r2, [pc, #380]	; (800247c <HAL_DMA_Init+0x1cc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d031      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a5d      	ldr	r2, [pc, #372]	; (8002480 <HAL_DMA_Init+0x1d0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d02c      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a5c      	ldr	r2, [pc, #368]	; (8002484 <HAL_DMA_Init+0x1d4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d027      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5a      	ldr	r2, [pc, #360]	; (8002488 <HAL_DMA_Init+0x1d8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d022      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a59      	ldr	r2, [pc, #356]	; (800248c <HAL_DMA_Init+0x1dc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d01d      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a57      	ldr	r2, [pc, #348]	; (8002490 <HAL_DMA_Init+0x1e0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d018      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a56      	ldr	r2, [pc, #344]	; (8002494 <HAL_DMA_Init+0x1e4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_DMA_Init+0x1e8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00e      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a53      	ldr	r2, [pc, #332]	; (800249c <HAL_DMA_Init+0x1ec>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d009      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a51      	ldr	r2, [pc, #324]	; (80024a0 <HAL_DMA_Init+0x1f0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d004      	beq.n	8002368 <HAL_DMA_Init+0xb8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a50      	ldr	r2, [pc, #320]	; (80024a4 <HAL_DMA_Init+0x1f4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_DMA_Init+0xbc>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_DMA_Init+0xbe>
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 813b 	beq.w	80025ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a37      	ldr	r2, [pc, #220]	; (8002468 <HAL_DMA_Init+0x1b8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d04a      	beq.n	8002424 <HAL_DMA_Init+0x174>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a36      	ldr	r2, [pc, #216]	; (800246c <HAL_DMA_Init+0x1bc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d045      	beq.n	8002424 <HAL_DMA_Init+0x174>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a34      	ldr	r2, [pc, #208]	; (8002470 <HAL_DMA_Init+0x1c0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d040      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a33      	ldr	r2, [pc, #204]	; (8002474 <HAL_DMA_Init+0x1c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d03b      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_DMA_Init+0x1c8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d036      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a30      	ldr	r2, [pc, #192]	; (800247c <HAL_DMA_Init+0x1cc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d031      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2e      	ldr	r2, [pc, #184]	; (8002480 <HAL_DMA_Init+0x1d0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02c      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <HAL_DMA_Init+0x1d4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d027      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2b      	ldr	r2, [pc, #172]	; (8002488 <HAL_DMA_Init+0x1d8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d022      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_DMA_Init+0x1dc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01d      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a28      	ldr	r2, [pc, #160]	; (8002490 <HAL_DMA_Init+0x1e0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d018      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a27      	ldr	r2, [pc, #156]	; (8002494 <HAL_DMA_Init+0x1e4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_DMA_Init+0x174>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a25      	ldr	r2, [pc, #148]	; (8002498 <HAL_DMA_Init+0x1e8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_DMA_Init+0x174>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a24      	ldr	r2, [pc, #144]	; (800249c <HAL_DMA_Init+0x1ec>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_DMA_Init+0x174>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <HAL_DMA_Init+0x1f0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_DMA_Init+0x174>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <HAL_DMA_Init+0x1f4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d108      	bne.n	8002436 <HAL_DMA_Init+0x186>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e007      	b.n	8002446 <HAL_DMA_Init+0x196>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002446:	e02f      	b.n	80024a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002448:	f7fe fbf4 	bl	8000c34 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b05      	cmp	r3, #5
 8002454:	d928      	bls.n	80024a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2203      	movs	r2, #3
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e246      	b.n	80028f6 <HAL_DMA_Init+0x646>
 8002468:	40020010 	.word	0x40020010
 800246c:	40020028 	.word	0x40020028
 8002470:	40020040 	.word	0x40020040
 8002474:	40020058 	.word	0x40020058
 8002478:	40020070 	.word	0x40020070
 800247c:	40020088 	.word	0x40020088
 8002480:	400200a0 	.word	0x400200a0
 8002484:	400200b8 	.word	0x400200b8
 8002488:	40020410 	.word	0x40020410
 800248c:	40020428 	.word	0x40020428
 8002490:	40020440 	.word	0x40020440
 8002494:	40020458 	.word	0x40020458
 8002498:	40020470 	.word	0x40020470
 800249c:	40020488 	.word	0x40020488
 80024a0:	400204a0 	.word	0x400204a0
 80024a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1c8      	bne.n	8002448 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <HAL_DMA_Init+0x420>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d107      	bne.n	800250c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4313      	orrs	r3, r2
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800250c:	4b71      	ldr	r3, [pc, #452]	; (80026d4 <HAL_DMA_Init+0x424>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b71      	ldr	r3, [pc, #452]	; (80026d8 <HAL_DMA_Init+0x428>)
 8002512:	4013      	ands	r3, r2
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d328      	bcc.n	800256c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b28      	cmp	r3, #40	; 0x28
 8002520:	d903      	bls.n	800252a <HAL_DMA_Init+0x27a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b2e      	cmp	r3, #46	; 0x2e
 8002528:	d917      	bls.n	800255a <HAL_DMA_Init+0x2aa>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b3e      	cmp	r3, #62	; 0x3e
 8002530:	d903      	bls.n	800253a <HAL_DMA_Init+0x28a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b42      	cmp	r3, #66	; 0x42
 8002538:	d90f      	bls.n	800255a <HAL_DMA_Init+0x2aa>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b46      	cmp	r3, #70	; 0x46
 8002540:	d903      	bls.n	800254a <HAL_DMA_Init+0x29a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b48      	cmp	r3, #72	; 0x48
 8002548:	d907      	bls.n	800255a <HAL_DMA_Init+0x2aa>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b4e      	cmp	r3, #78	; 0x4e
 8002550:	d905      	bls.n	800255e <HAL_DMA_Init+0x2ae>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b52      	cmp	r3, #82	; 0x52
 8002558:	d801      	bhi.n	800255e <HAL_DMA_Init+0x2ae>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_DMA_Init+0x2b0>
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f023 0307 	bic.w	r3, r3, #7
 8002582:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	2b04      	cmp	r3, #4
 8002594:	d117      	bne.n	80025c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00e      	beq.n	80025c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f001 fdcf 	bl	800414c <DMA_CheckFifoParam>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e197      	b.n	80028f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f001 fd0a 	bl	8003fe8 <DMA_CalcBaseAndBitshift>
 80025d4:	4603      	mov	r3, r0
 80025d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	223f      	movs	r2, #63	; 0x3f
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	e0cd      	b.n	8002786 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a3b      	ldr	r2, [pc, #236]	; (80026dc <HAL_DMA_Init+0x42c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <HAL_DMA_Init+0x38a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a39      	ldr	r2, [pc, #228]	; (80026e0 <HAL_DMA_Init+0x430>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01d      	beq.n	800263a <HAL_DMA_Init+0x38a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_DMA_Init+0x434>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d018      	beq.n	800263a <HAL_DMA_Init+0x38a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a36      	ldr	r2, [pc, #216]	; (80026e8 <HAL_DMA_Init+0x438>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_DMA_Init+0x38a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a35      	ldr	r2, [pc, #212]	; (80026ec <HAL_DMA_Init+0x43c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00e      	beq.n	800263a <HAL_DMA_Init+0x38a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a33      	ldr	r2, [pc, #204]	; (80026f0 <HAL_DMA_Init+0x440>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d009      	beq.n	800263a <HAL_DMA_Init+0x38a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a32      	ldr	r2, [pc, #200]	; (80026f4 <HAL_DMA_Init+0x444>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d004      	beq.n	800263a <HAL_DMA_Init+0x38a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a30      	ldr	r2, [pc, #192]	; (80026f8 <HAL_DMA_Init+0x448>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_DMA_Init+0x38e>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_DMA_Init+0x390>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8097 	beq.w	8002774 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a24      	ldr	r2, [pc, #144]	; (80026dc <HAL_DMA_Init+0x42c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d021      	beq.n	8002694 <HAL_DMA_Init+0x3e4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_DMA_Init+0x430>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01c      	beq.n	8002694 <HAL_DMA_Init+0x3e4>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a21      	ldr	r2, [pc, #132]	; (80026e4 <HAL_DMA_Init+0x434>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d017      	beq.n	8002694 <HAL_DMA_Init+0x3e4>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_DMA_Init+0x438>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d012      	beq.n	8002694 <HAL_DMA_Init+0x3e4>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <HAL_DMA_Init+0x43c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00d      	beq.n	8002694 <HAL_DMA_Init+0x3e4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_DMA_Init+0x440>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d008      	beq.n	8002694 <HAL_DMA_Init+0x3e4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <HAL_DMA_Init+0x444>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <HAL_DMA_Init+0x3e4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_DMA_Init+0x448>)
 8002692:	4293      	cmp	r3, r2
 8002694:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_DMA_Init+0x44c>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d020      	beq.n	8002700 <HAL_DMA_Init+0x450>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b80      	cmp	r3, #128	; 0x80
 80026c4:	d102      	bne.n	80026cc <HAL_DMA_Init+0x41c>
 80026c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026ca:	e01a      	b.n	8002702 <HAL_DMA_Init+0x452>
 80026cc:	2300      	movs	r3, #0
 80026ce:	e018      	b.n	8002702 <HAL_DMA_Init+0x452>
 80026d0:	fe10803f 	.word	0xfe10803f
 80026d4:	5c001000 	.word	0x5c001000
 80026d8:	ffff0000 	.word	0xffff0000
 80026dc:	58025408 	.word	0x58025408
 80026e0:	5802541c 	.word	0x5802541c
 80026e4:	58025430 	.word	0x58025430
 80026e8:	58025444 	.word	0x58025444
 80026ec:	58025458 	.word	0x58025458
 80026f0:	5802546c 	.word	0x5802546c
 80026f4:	58025480 	.word	0x58025480
 80026f8:	58025494 	.word	0x58025494
 80026fc:	fffe000f 	.word	0xfffe000f
 8002700:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002708:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002710:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002730:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b6e      	ldr	r3, [pc, #440]	; (8002900 <HAL_DMA_Init+0x650>)
 8002748:	4413      	add	r3, r2
 800274a:	4a6e      	ldr	r2, [pc, #440]	; (8002904 <HAL_DMA_Init+0x654>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	009a      	lsls	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f001 fc45 	bl	8003fe8 <DMA_CalcBaseAndBitshift>
 800275e:	4603      	mov	r3, r0
 8002760:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2201      	movs	r2, #1
 800276c:	409a      	lsls	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	e008      	b.n	8002786 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2203      	movs	r2, #3
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0b7      	b.n	80028f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5f      	ldr	r2, [pc, #380]	; (8002908 <HAL_DMA_Init+0x658>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d072      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5d      	ldr	r2, [pc, #372]	; (800290c <HAL_DMA_Init+0x65c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d06d      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5c      	ldr	r2, [pc, #368]	; (8002910 <HAL_DMA_Init+0x660>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d068      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a5a      	ldr	r2, [pc, #360]	; (8002914 <HAL_DMA_Init+0x664>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d063      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a59      	ldr	r2, [pc, #356]	; (8002918 <HAL_DMA_Init+0x668>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d05e      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a57      	ldr	r2, [pc, #348]	; (800291c <HAL_DMA_Init+0x66c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d059      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a56      	ldr	r2, [pc, #344]	; (8002920 <HAL_DMA_Init+0x670>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d054      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a54      	ldr	r2, [pc, #336]	; (8002924 <HAL_DMA_Init+0x674>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04f      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a53      	ldr	r2, [pc, #332]	; (8002928 <HAL_DMA_Init+0x678>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d04a      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a51      	ldr	r2, [pc, #324]	; (800292c <HAL_DMA_Init+0x67c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d045      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a50      	ldr	r2, [pc, #320]	; (8002930 <HAL_DMA_Init+0x680>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d040      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4e      	ldr	r2, [pc, #312]	; (8002934 <HAL_DMA_Init+0x684>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d03b      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4d      	ldr	r2, [pc, #308]	; (8002938 <HAL_DMA_Init+0x688>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d036      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a4b      	ldr	r2, [pc, #300]	; (800293c <HAL_DMA_Init+0x68c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d031      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a4a      	ldr	r2, [pc, #296]	; (8002940 <HAL_DMA_Init+0x690>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d02c      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a48      	ldr	r2, [pc, #288]	; (8002944 <HAL_DMA_Init+0x694>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d027      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a47      	ldr	r2, [pc, #284]	; (8002948 <HAL_DMA_Init+0x698>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a45      	ldr	r2, [pc, #276]	; (800294c <HAL_DMA_Init+0x69c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01d      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a44      	ldr	r2, [pc, #272]	; (8002950 <HAL_DMA_Init+0x6a0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d018      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a42      	ldr	r2, [pc, #264]	; (8002954 <HAL_DMA_Init+0x6a4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a41      	ldr	r2, [pc, #260]	; (8002958 <HAL_DMA_Init+0x6a8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00e      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3f      	ldr	r2, [pc, #252]	; (800295c <HAL_DMA_Init+0x6ac>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d009      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3e      	ldr	r2, [pc, #248]	; (8002960 <HAL_DMA_Init+0x6b0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_DMA_Init+0x5c6>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3c      	ldr	r2, [pc, #240]	; (8002964 <HAL_DMA_Init+0x6b4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_DMA_Init+0x5ca>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_DMA_Init+0x5cc>
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d032      	beq.n	80028e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f001 fcdf 	bl	8004244 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d102      	bne.n	8002894 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <HAL_DMA_Init+0x624>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d80c      	bhi.n	80028d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f001 fd5c 	bl	8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e008      	b.n	80028e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	a7fdabf8 	.word	0xa7fdabf8
 8002904:	cccccccd 	.word	0xcccccccd
 8002908:	40020010 	.word	0x40020010
 800290c:	40020028 	.word	0x40020028
 8002910:	40020040 	.word	0x40020040
 8002914:	40020058 	.word	0x40020058
 8002918:	40020070 	.word	0x40020070
 800291c:	40020088 	.word	0x40020088
 8002920:	400200a0 	.word	0x400200a0
 8002924:	400200b8 	.word	0x400200b8
 8002928:	40020410 	.word	0x40020410
 800292c:	40020428 	.word	0x40020428
 8002930:	40020440 	.word	0x40020440
 8002934:	40020458 	.word	0x40020458
 8002938:	40020470 	.word	0x40020470
 800293c:	40020488 	.word	0x40020488
 8002940:	400204a0 	.word	0x400204a0
 8002944:	400204b8 	.word	0x400204b8
 8002948:	58025408 	.word	0x58025408
 800294c:	5802541c 	.word	0x5802541c
 8002950:	58025430 	.word	0x58025430
 8002954:	58025444 	.word	0x58025444
 8002958:	58025458 	.word	0x58025458
 800295c:	5802546c 	.word	0x5802546c
 8002960:	58025480 	.word	0x58025480
 8002964:	58025494 	.word	0x58025494

08002968 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e226      	b.n	8002dd2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Start_IT+0x2a>
 800298e:	2302      	movs	r3, #2
 8002990:	e21f      	b.n	8002dd2 <HAL_DMA_Start_IT+0x46a>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	f040 820a 	bne.w	8002dbc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a68      	ldr	r2, [pc, #416]	; (8002b5c <HAL_DMA_Start_IT+0x1f4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04a      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a66      	ldr	r2, [pc, #408]	; (8002b60 <HAL_DMA_Start_IT+0x1f8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d045      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_DMA_Start_IT+0x1fc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d040      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a63      	ldr	r2, [pc, #396]	; (8002b68 <HAL_DMA_Start_IT+0x200>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d03b      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a62      	ldr	r2, [pc, #392]	; (8002b6c <HAL_DMA_Start_IT+0x204>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d036      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a60      	ldr	r2, [pc, #384]	; (8002b70 <HAL_DMA_Start_IT+0x208>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a5f      	ldr	r2, [pc, #380]	; (8002b74 <HAL_DMA_Start_IT+0x20c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_DMA_Start_IT+0x210>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_DMA_Start_IT+0x214>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5a      	ldr	r2, [pc, #360]	; (8002b80 <HAL_DMA_Start_IT+0x218>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a59      	ldr	r2, [pc, #356]	; (8002b84 <HAL_DMA_Start_IT+0x21c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a57      	ldr	r2, [pc, #348]	; (8002b88 <HAL_DMA_Start_IT+0x220>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <HAL_DMA_Start_IT+0x224>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <HAL_DMA_Start_IT+0x228>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a53      	ldr	r2, [pc, #332]	; (8002b94 <HAL_DMA_Start_IT+0x22c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Start_IT+0xee>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a51      	ldr	r2, [pc, #324]	; (8002b98 <HAL_DMA_Start_IT+0x230>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <HAL_DMA_Start_IT+0x100>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e007      	b.n	8002a78 <HAL_DMA_Start_IT+0x110>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f001 f906 	bl	8003c90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a34      	ldr	r2, [pc, #208]	; (8002b5c <HAL_DMA_Start_IT+0x1f4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d04a      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a33      	ldr	r2, [pc, #204]	; (8002b60 <HAL_DMA_Start_IT+0x1f8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d045      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <HAL_DMA_Start_IT+0x1fc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d040      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a30      	ldr	r2, [pc, #192]	; (8002b68 <HAL_DMA_Start_IT+0x200>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d03b      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2e      	ldr	r2, [pc, #184]	; (8002b6c <HAL_DMA_Start_IT+0x204>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d036      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <HAL_DMA_Start_IT+0x208>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d031      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2b      	ldr	r2, [pc, #172]	; (8002b74 <HAL_DMA_Start_IT+0x20c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d02c      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <HAL_DMA_Start_IT+0x210>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d027      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <HAL_DMA_Start_IT+0x214>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d022      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a27      	ldr	r2, [pc, #156]	; (8002b80 <HAL_DMA_Start_IT+0x218>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d01d      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <HAL_DMA_Start_IT+0x21c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d018      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <HAL_DMA_Start_IT+0x220>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_DMA_Start_IT+0x224>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00e      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <HAL_DMA_Start_IT+0x228>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d009      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <HAL_DMA_Start_IT+0x22c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <HAL_DMA_Start_IT+0x1bc>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <HAL_DMA_Start_IT+0x230>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_DMA_Start_IT+0x1c0>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_DMA_Start_IT+0x1c2>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d036      	beq.n	8002b9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 021e 	bic.w	r2, r3, #30
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0216 	orr.w	r2, r2, #22
 8002b40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d03e      	beq.n	8002bc8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0208 	orr.w	r2, r2, #8
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e035      	b.n	8002bc8 <HAL_DMA_Start_IT+0x260>
 8002b5c:	40020010 	.word	0x40020010
 8002b60:	40020028 	.word	0x40020028
 8002b64:	40020040 	.word	0x40020040
 8002b68:	40020058 	.word	0x40020058
 8002b6c:	40020070 	.word	0x40020070
 8002b70:	40020088 	.word	0x40020088
 8002b74:	400200a0 	.word	0x400200a0
 8002b78:	400200b8 	.word	0x400200b8
 8002b7c:	40020410 	.word	0x40020410
 8002b80:	40020428 	.word	0x40020428
 8002b84:	40020440 	.word	0x40020440
 8002b88:	40020458 	.word	0x40020458
 8002b8c:	40020470 	.word	0x40020470
 8002b90:	40020488 	.word	0x40020488
 8002b94:	400204a0 	.word	0x400204a0
 8002b98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 020e 	bic.w	r2, r3, #14
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 020a 	orr.w	r2, r2, #10
 8002bae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0204 	orr.w	r2, r2, #4
 8002bc6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <HAL_DMA_Start_IT+0x474>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d072      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a82      	ldr	r2, [pc, #520]	; (8002de0 <HAL_DMA_Start_IT+0x478>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d06d      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_DMA_Start_IT+0x47c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d068      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7f      	ldr	r2, [pc, #508]	; (8002de8 <HAL_DMA_Start_IT+0x480>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d063      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a7d      	ldr	r2, [pc, #500]	; (8002dec <HAL_DMA_Start_IT+0x484>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d05e      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7c      	ldr	r2, [pc, #496]	; (8002df0 <HAL_DMA_Start_IT+0x488>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d059      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7a      	ldr	r2, [pc, #488]	; (8002df4 <HAL_DMA_Start_IT+0x48c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d054      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a79      	ldr	r2, [pc, #484]	; (8002df8 <HAL_DMA_Start_IT+0x490>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d04f      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a77      	ldr	r2, [pc, #476]	; (8002dfc <HAL_DMA_Start_IT+0x494>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d04a      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a76      	ldr	r2, [pc, #472]	; (8002e00 <HAL_DMA_Start_IT+0x498>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d045      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a74      	ldr	r2, [pc, #464]	; (8002e04 <HAL_DMA_Start_IT+0x49c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d040      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a73      	ldr	r2, [pc, #460]	; (8002e08 <HAL_DMA_Start_IT+0x4a0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d03b      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a71      	ldr	r2, [pc, #452]	; (8002e0c <HAL_DMA_Start_IT+0x4a4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d036      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a70      	ldr	r2, [pc, #448]	; (8002e10 <HAL_DMA_Start_IT+0x4a8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d031      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_DMA_Start_IT+0x4ac>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02c      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6d      	ldr	r2, [pc, #436]	; (8002e18 <HAL_DMA_Start_IT+0x4b0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d027      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6b      	ldr	r2, [pc, #428]	; (8002e1c <HAL_DMA_Start_IT+0x4b4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d022      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6a      	ldr	r2, [pc, #424]	; (8002e20 <HAL_DMA_Start_IT+0x4b8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d01d      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a68      	ldr	r2, [pc, #416]	; (8002e24 <HAL_DMA_Start_IT+0x4bc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d018      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a67      	ldr	r2, [pc, #412]	; (8002e28 <HAL_DMA_Start_IT+0x4c0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d013      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a65      	ldr	r2, [pc, #404]	; (8002e2c <HAL_DMA_Start_IT+0x4c4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00e      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a64      	ldr	r2, [pc, #400]	; (8002e30 <HAL_DMA_Start_IT+0x4c8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a62      	ldr	r2, [pc, #392]	; (8002e34 <HAL_DMA_Start_IT+0x4cc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x350>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a61      	ldr	r2, [pc, #388]	; (8002e38 <HAL_DMA_Start_IT+0x4d0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_DMA_Start_IT+0x354>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_DMA_Start_IT+0x356>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cde:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <HAL_DMA_Start_IT+0x474>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d04a      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a36      	ldr	r2, [pc, #216]	; (8002de0 <HAL_DMA_Start_IT+0x478>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d045      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <HAL_DMA_Start_IT+0x47c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d040      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a33      	ldr	r2, [pc, #204]	; (8002de8 <HAL_DMA_Start_IT+0x480>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d03b      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a31      	ldr	r2, [pc, #196]	; (8002dec <HAL_DMA_Start_IT+0x484>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d036      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a30      	ldr	r2, [pc, #192]	; (8002df0 <HAL_DMA_Start_IT+0x488>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d031      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2e      	ldr	r2, [pc, #184]	; (8002df4 <HAL_DMA_Start_IT+0x48c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2d      	ldr	r2, [pc, #180]	; (8002df8 <HAL_DMA_Start_IT+0x490>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d027      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <HAL_DMA_Start_IT+0x494>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d022      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_DMA_Start_IT+0x498>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01d      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <HAL_DMA_Start_IT+0x49c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d018      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <HAL_DMA_Start_IT+0x4a0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a25      	ldr	r2, [pc, #148]	; (8002e0c <HAL_DMA_Start_IT+0x4a4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00e      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <HAL_DMA_Start_IT+0x4a8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <HAL_DMA_Start_IT+0x4ac>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_Start_IT+0x430>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <HAL_DMA_Start_IT+0x4b0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d108      	bne.n	8002daa <HAL_DMA_Start_IT+0x442>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e012      	b.n	8002dd0 <HAL_DMA_Start_IT+0x468>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e009      	b.n	8002dd0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40020010 	.word	0x40020010
 8002de0:	40020028 	.word	0x40020028
 8002de4:	40020040 	.word	0x40020040
 8002de8:	40020058 	.word	0x40020058
 8002dec:	40020070 	.word	0x40020070
 8002df0:	40020088 	.word	0x40020088
 8002df4:	400200a0 	.word	0x400200a0
 8002df8:	400200b8 	.word	0x400200b8
 8002dfc:	40020410 	.word	0x40020410
 8002e00:	40020428 	.word	0x40020428
 8002e04:	40020440 	.word	0x40020440
 8002e08:	40020458 	.word	0x40020458
 8002e0c:	40020470 	.word	0x40020470
 8002e10:	40020488 	.word	0x40020488
 8002e14:	400204a0 	.word	0x400204a0
 8002e18:	400204b8 	.word	0x400204b8
 8002e1c:	58025408 	.word	0x58025408
 8002e20:	5802541c 	.word	0x5802541c
 8002e24:	58025430 	.word	0x58025430
 8002e28:	58025444 	.word	0x58025444
 8002e2c:	58025458 	.word	0x58025458
 8002e30:	5802546c 	.word	0x5802546c
 8002e34:	58025480 	.word	0x58025480
 8002e38:	58025494 	.word	0x58025494

08002e3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e48:	4b67      	ldr	r3, [pc, #412]	; (8002fe8 <HAL_DMA_IRQHandler+0x1ac>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a67      	ldr	r2, [pc, #412]	; (8002fec <HAL_DMA_IRQHandler+0x1b0>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0a9b      	lsrs	r3, r3, #10
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a5f      	ldr	r2, [pc, #380]	; (8002ff0 <HAL_DMA_IRQHandler+0x1b4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d04a      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a5d      	ldr	r2, [pc, #372]	; (8002ff4 <HAL_DMA_IRQHandler+0x1b8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d045      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5c      	ldr	r2, [pc, #368]	; (8002ff8 <HAL_DMA_IRQHandler+0x1bc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d040      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a5a      	ldr	r2, [pc, #360]	; (8002ffc <HAL_DMA_IRQHandler+0x1c0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d03b      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a59      	ldr	r2, [pc, #356]	; (8003000 <HAL_DMA_IRQHandler+0x1c4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d036      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a57      	ldr	r2, [pc, #348]	; (8003004 <HAL_DMA_IRQHandler+0x1c8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d031      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a56      	ldr	r2, [pc, #344]	; (8003008 <HAL_DMA_IRQHandler+0x1cc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d02c      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a54      	ldr	r2, [pc, #336]	; (800300c <HAL_DMA_IRQHandler+0x1d0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d027      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a53      	ldr	r2, [pc, #332]	; (8003010 <HAL_DMA_IRQHandler+0x1d4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a51      	ldr	r2, [pc, #324]	; (8003014 <HAL_DMA_IRQHandler+0x1d8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_DMA_IRQHandler+0x1dc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a4e      	ldr	r2, [pc, #312]	; (800301c <HAL_DMA_IRQHandler+0x1e0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a4d      	ldr	r2, [pc, #308]	; (8003020 <HAL_DMA_IRQHandler+0x1e4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a4b      	ldr	r2, [pc, #300]	; (8003024 <HAL_DMA_IRQHandler+0x1e8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a4a      	ldr	r2, [pc, #296]	; (8003028 <HAL_DMA_IRQHandler+0x1ec>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xd2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a48      	ldr	r2, [pc, #288]	; (800302c <HAL_DMA_IRQHandler+0x1f0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_DMA_IRQHandler+0xd6>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_DMA_IRQHandler+0xd8>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 842b 	beq.w	8003770 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2208      	movs	r2, #8
 8002f24:	409a      	lsls	r2, r3
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80a2 	beq.w	8003074 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a2e      	ldr	r2, [pc, #184]	; (8002ff0 <HAL_DMA_IRQHandler+0x1b4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d04a      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a2d      	ldr	r2, [pc, #180]	; (8002ff4 <HAL_DMA_IRQHandler+0x1b8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d045      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <HAL_DMA_IRQHandler+0x1bc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d040      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <HAL_DMA_IRQHandler+0x1c0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d03b      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a28      	ldr	r2, [pc, #160]	; (8003000 <HAL_DMA_IRQHandler+0x1c4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d036      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a27      	ldr	r2, [pc, #156]	; (8003004 <HAL_DMA_IRQHandler+0x1c8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d031      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a25      	ldr	r2, [pc, #148]	; (8003008 <HAL_DMA_IRQHandler+0x1cc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d02c      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a24      	ldr	r2, [pc, #144]	; (800300c <HAL_DMA_IRQHandler+0x1d0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d027      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a22      	ldr	r2, [pc, #136]	; (8003010 <HAL_DMA_IRQHandler+0x1d4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d022      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	; (8003014 <HAL_DMA_IRQHandler+0x1d8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d01d      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <HAL_DMA_IRQHandler+0x1dc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d018      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_DMA_IRQHandler+0x1e0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_DMA_IRQHandler+0x1e4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00e      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1b      	ldr	r2, [pc, #108]	; (8003024 <HAL_DMA_IRQHandler+0x1e8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a19      	ldr	r2, [pc, #100]	; (8003028 <HAL_DMA_IRQHandler+0x1ec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x194>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_DMA_IRQHandler+0x1f0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d12f      	bne.n	8003030 <HAL_DMA_IRQHandler+0x1f4>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	e02e      	b.n	8003044 <HAL_DMA_IRQHandler+0x208>
 8002fe6:	bf00      	nop
 8002fe8:	24000000 	.word	0x24000000
 8002fec:	1b4e81b5 	.word	0x1b4e81b5
 8002ff0:	40020010 	.word	0x40020010
 8002ff4:	40020028 	.word	0x40020028
 8002ff8:	40020040 	.word	0x40020040
 8002ffc:	40020058 	.word	0x40020058
 8003000:	40020070 	.word	0x40020070
 8003004:	40020088 	.word	0x40020088
 8003008:	400200a0 	.word	0x400200a0
 800300c:	400200b8 	.word	0x400200b8
 8003010:	40020410 	.word	0x40020410
 8003014:	40020428 	.word	0x40020428
 8003018:	40020440 	.word	0x40020440
 800301c:	40020458 	.word	0x40020458
 8003020:	40020470 	.word	0x40020470
 8003024:	40020488 	.word	0x40020488
 8003028:	400204a0 	.word	0x400204a0
 800302c:	400204b8 	.word	0x400204b8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0204 	bic.w	r2, r2, #4
 8003056:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	2208      	movs	r2, #8
 8003062:	409a      	lsls	r2, r3
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d06e      	beq.n	8003168 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a69      	ldr	r2, [pc, #420]	; (8003234 <HAL_DMA_IRQHandler+0x3f8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d04a      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a67      	ldr	r2, [pc, #412]	; (8003238 <HAL_DMA_IRQHandler+0x3fc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d045      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a66      	ldr	r2, [pc, #408]	; (800323c <HAL_DMA_IRQHandler+0x400>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d040      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a64      	ldr	r2, [pc, #400]	; (8003240 <HAL_DMA_IRQHandler+0x404>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d03b      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a63      	ldr	r2, [pc, #396]	; (8003244 <HAL_DMA_IRQHandler+0x408>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d036      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a61      	ldr	r2, [pc, #388]	; (8003248 <HAL_DMA_IRQHandler+0x40c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d031      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a60      	ldr	r2, [pc, #384]	; (800324c <HAL_DMA_IRQHandler+0x410>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d02c      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a5e      	ldr	r2, [pc, #376]	; (8003250 <HAL_DMA_IRQHandler+0x414>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d027      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5d      	ldr	r2, [pc, #372]	; (8003254 <HAL_DMA_IRQHandler+0x418>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d022      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a5b      	ldr	r2, [pc, #364]	; (8003258 <HAL_DMA_IRQHandler+0x41c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01d      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5a      	ldr	r2, [pc, #360]	; (800325c <HAL_DMA_IRQHandler+0x420>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d018      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_DMA_IRQHandler+0x424>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a57      	ldr	r2, [pc, #348]	; (8003264 <HAL_DMA_IRQHandler+0x428>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00e      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a55      	ldr	r2, [pc, #340]	; (8003268 <HAL_DMA_IRQHandler+0x42c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d009      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a54      	ldr	r2, [pc, #336]	; (800326c <HAL_DMA_IRQHandler+0x430>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d004      	beq.n	800312a <HAL_DMA_IRQHandler+0x2ee>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_DMA_IRQHandler+0x434>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10a      	bne.n	8003140 <HAL_DMA_IRQHandler+0x304>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e003      	b.n	8003148 <HAL_DMA_IRQHandler+0x30c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2201      	movs	r2, #1
 8003156:	409a      	lsls	r2, r3
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f043 0202 	orr.w	r2, r3, #2
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	2204      	movs	r2, #4
 8003172:	409a      	lsls	r2, r3
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 808f 	beq.w	800329c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <HAL_DMA_IRQHandler+0x3f8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d04a      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2a      	ldr	r2, [pc, #168]	; (8003238 <HAL_DMA_IRQHandler+0x3fc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d045      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a29      	ldr	r2, [pc, #164]	; (800323c <HAL_DMA_IRQHandler+0x400>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d040      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_DMA_IRQHandler+0x404>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d03b      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a26      	ldr	r2, [pc, #152]	; (8003244 <HAL_DMA_IRQHandler+0x408>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d036      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a24      	ldr	r2, [pc, #144]	; (8003248 <HAL_DMA_IRQHandler+0x40c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a23      	ldr	r2, [pc, #140]	; (800324c <HAL_DMA_IRQHandler+0x410>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d02c      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a21      	ldr	r2, [pc, #132]	; (8003250 <HAL_DMA_IRQHandler+0x414>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d027      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a20      	ldr	r2, [pc, #128]	; (8003254 <HAL_DMA_IRQHandler+0x418>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_DMA_IRQHandler+0x41c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01d      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1d      	ldr	r2, [pc, #116]	; (800325c <HAL_DMA_IRQHandler+0x420>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d018      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1b      	ldr	r2, [pc, #108]	; (8003260 <HAL_DMA_IRQHandler+0x424>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1a      	ldr	r2, [pc, #104]	; (8003264 <HAL_DMA_IRQHandler+0x428>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a18      	ldr	r2, [pc, #96]	; (8003268 <HAL_DMA_IRQHandler+0x42c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a17      	ldr	r2, [pc, #92]	; (800326c <HAL_DMA_IRQHandler+0x430>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_DMA_IRQHandler+0x3e2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <HAL_DMA_IRQHandler+0x434>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d12a      	bne.n	8003274 <HAL_DMA_IRQHandler+0x438>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e023      	b.n	800327c <HAL_DMA_IRQHandler+0x440>
 8003234:	40020010 	.word	0x40020010
 8003238:	40020028 	.word	0x40020028
 800323c:	40020040 	.word	0x40020040
 8003240:	40020058 	.word	0x40020058
 8003244:	40020070 	.word	0x40020070
 8003248:	40020088 	.word	0x40020088
 800324c:	400200a0 	.word	0x400200a0
 8003250:	400200b8 	.word	0x400200b8
 8003254:	40020410 	.word	0x40020410
 8003258:	40020428 	.word	0x40020428
 800325c:	40020440 	.word	0x40020440
 8003260:	40020458 	.word	0x40020458
 8003264:	40020470 	.word	0x40020470
 8003268:	40020488 	.word	0x40020488
 800326c:	400204a0 	.word	0x400204a0
 8003270:	400204b8 	.word	0x400204b8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00d      	beq.n	800329c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2204      	movs	r2, #4
 800328a:	409a      	lsls	r2, r3
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f043 0204 	orr.w	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	2210      	movs	r2, #16
 80032a6:	409a      	lsls	r2, r3
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a6 	beq.w	80033fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a85      	ldr	r2, [pc, #532]	; (80034cc <HAL_DMA_IRQHandler+0x690>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d04a      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a83      	ldr	r2, [pc, #524]	; (80034d0 <HAL_DMA_IRQHandler+0x694>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d045      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a82      	ldr	r2, [pc, #520]	; (80034d4 <HAL_DMA_IRQHandler+0x698>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d040      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a80      	ldr	r2, [pc, #512]	; (80034d8 <HAL_DMA_IRQHandler+0x69c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d03b      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7f      	ldr	r2, [pc, #508]	; (80034dc <HAL_DMA_IRQHandler+0x6a0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d036      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7d      	ldr	r2, [pc, #500]	; (80034e0 <HAL_DMA_IRQHandler+0x6a4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d031      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7c      	ldr	r2, [pc, #496]	; (80034e4 <HAL_DMA_IRQHandler+0x6a8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d02c      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a7a      	ldr	r2, [pc, #488]	; (80034e8 <HAL_DMA_IRQHandler+0x6ac>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d027      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a79      	ldr	r2, [pc, #484]	; (80034ec <HAL_DMA_IRQHandler+0x6b0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d022      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a77      	ldr	r2, [pc, #476]	; (80034f0 <HAL_DMA_IRQHandler+0x6b4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01d      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a76      	ldr	r2, [pc, #472]	; (80034f4 <HAL_DMA_IRQHandler+0x6b8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d018      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a74      	ldr	r2, [pc, #464]	; (80034f8 <HAL_DMA_IRQHandler+0x6bc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a73      	ldr	r2, [pc, #460]	; (80034fc <HAL_DMA_IRQHandler+0x6c0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00e      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a71      	ldr	r2, [pc, #452]	; (8003500 <HAL_DMA_IRQHandler+0x6c4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d009      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a70      	ldr	r2, [pc, #448]	; (8003504 <HAL_DMA_IRQHandler+0x6c8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_DMA_IRQHandler+0x516>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6e      	ldr	r2, [pc, #440]	; (8003508 <HAL_DMA_IRQHandler+0x6cc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10a      	bne.n	8003368 <HAL_DMA_IRQHandler+0x52c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e009      	b.n	800337c <HAL_DMA_IRQHandler+0x540>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d03e      	beq.n	80033fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2210      	movs	r2, #16
 800338a:	409a      	lsls	r2, r3
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d018      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d108      	bne.n	80033be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d024      	beq.n	80033fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
 80033bc:	e01f      	b.n	80033fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01b      	beq.n	80033fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	4798      	blx	r3
 80033ce:	e016      	b.n	80033fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0208 	bic.w	r2, r2, #8
 80033ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2220      	movs	r2, #32
 8003408:	409a      	lsls	r2, r3
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8110 	beq.w	8003634 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <HAL_DMA_IRQHandler+0x690>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d04a      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <HAL_DMA_IRQHandler+0x694>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d045      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <HAL_DMA_IRQHandler+0x698>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d040      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <HAL_DMA_IRQHandler+0x69c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d03b      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a26      	ldr	r2, [pc, #152]	; (80034dc <HAL_DMA_IRQHandler+0x6a0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d036      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <HAL_DMA_IRQHandler+0x6a4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d031      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <HAL_DMA_IRQHandler+0x6a8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d02c      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <HAL_DMA_IRQHandler+0x6ac>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d027      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a20      	ldr	r2, [pc, #128]	; (80034ec <HAL_DMA_IRQHandler+0x6b0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d022      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <HAL_DMA_IRQHandler+0x6b4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d01d      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_DMA_IRQHandler+0x6b8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d018      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <HAL_DMA_IRQHandler+0x6bc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_DMA_IRQHandler+0x6c0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00e      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a19      	ldr	r2, [pc, #100]	; (8003500 <HAL_DMA_IRQHandler+0x6c4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_DMA_IRQHandler+0x6c8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x678>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a16      	ldr	r2, [pc, #88]	; (8003508 <HAL_DMA_IRQHandler+0x6cc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d12b      	bne.n	800350c <HAL_DMA_IRQHandler+0x6d0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	e02a      	b.n	8003520 <HAL_DMA_IRQHandler+0x6e4>
 80034ca:	bf00      	nop
 80034cc:	40020010 	.word	0x40020010
 80034d0:	40020028 	.word	0x40020028
 80034d4:	40020040 	.word	0x40020040
 80034d8:	40020058 	.word	0x40020058
 80034dc:	40020070 	.word	0x40020070
 80034e0:	40020088 	.word	0x40020088
 80034e4:	400200a0 	.word	0x400200a0
 80034e8:	400200b8 	.word	0x400200b8
 80034ec:	40020410 	.word	0x40020410
 80034f0:	40020428 	.word	0x40020428
 80034f4:	40020440 	.word	0x40020440
 80034f8:	40020458 	.word	0x40020458
 80034fc:	40020470 	.word	0x40020470
 8003500:	40020488 	.word	0x40020488
 8003504:	400204a0 	.word	0x400204a0
 8003508:	400204b8 	.word	0x400204b8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8087 	beq.w	8003634 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2220      	movs	r2, #32
 8003530:	409a      	lsls	r2, r3
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b04      	cmp	r3, #4
 8003540:	d139      	bne.n	80035b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0216 	bic.w	r2, r2, #22
 8003550:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003560:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_DMA_IRQHandler+0x736>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0208 	bic.w	r2, r2, #8
 8003580:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	223f      	movs	r2, #63	; 0x3f
 800358c:	409a      	lsls	r2, r3
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 834a 	beq.w	8003c40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
          }
          return;
 80035b4:	e344      	b.n	8003c40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d108      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d02c      	beq.n	8003634 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
 80035e2:	e027      	b.n	8003634 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
 80035f4:	e01e      	b.n	8003634 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0210 	bic.w	r2, r2, #16
 8003612:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8306 	beq.w	8003c4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8088 	beq.w	800375c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2204      	movs	r2, #4
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a7a      	ldr	r2, [pc, #488]	; (8003844 <HAL_DMA_IRQHandler+0xa08>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d04a      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a79      	ldr	r2, [pc, #484]	; (8003848 <HAL_DMA_IRQHandler+0xa0c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d045      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a77      	ldr	r2, [pc, #476]	; (800384c <HAL_DMA_IRQHandler+0xa10>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d040      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a76      	ldr	r2, [pc, #472]	; (8003850 <HAL_DMA_IRQHandler+0xa14>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d03b      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a74      	ldr	r2, [pc, #464]	; (8003854 <HAL_DMA_IRQHandler+0xa18>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d036      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a73      	ldr	r2, [pc, #460]	; (8003858 <HAL_DMA_IRQHandler+0xa1c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d031      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a71      	ldr	r2, [pc, #452]	; (800385c <HAL_DMA_IRQHandler+0xa20>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d02c      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a70      	ldr	r2, [pc, #448]	; (8003860 <HAL_DMA_IRQHandler+0xa24>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d027      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6e      	ldr	r2, [pc, #440]	; (8003864 <HAL_DMA_IRQHandler+0xa28>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d022      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6d      	ldr	r2, [pc, #436]	; (8003868 <HAL_DMA_IRQHandler+0xa2c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d01d      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6b      	ldr	r2, [pc, #428]	; (800386c <HAL_DMA_IRQHandler+0xa30>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d018      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6a      	ldr	r2, [pc, #424]	; (8003870 <HAL_DMA_IRQHandler+0xa34>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d013      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a68      	ldr	r2, [pc, #416]	; (8003874 <HAL_DMA_IRQHandler+0xa38>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00e      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a67      	ldr	r2, [pc, #412]	; (8003878 <HAL_DMA_IRQHandler+0xa3c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d009      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a65      	ldr	r2, [pc, #404]	; (800387c <HAL_DMA_IRQHandler+0xa40>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x8b8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a64      	ldr	r2, [pc, #400]	; (8003880 <HAL_DMA_IRQHandler+0xa44>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d108      	bne.n	8003706 <HAL_DMA_IRQHandler+0x8ca>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e007      	b.n	8003716 <HAL_DMA_IRQHandler+0x8da>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	429a      	cmp	r2, r3
 8003720:	d307      	bcc.n	8003732 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f2      	bne.n	8003716 <HAL_DMA_IRQHandler+0x8da>
 8003730:	e000      	b.n	8003734 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003732:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2203      	movs	r2, #3
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800374a:	e003      	b.n	8003754 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8272 	beq.w	8003c4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
 800376e:	e26c      	b.n	8003c4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a43      	ldr	r2, [pc, #268]	; (8003884 <HAL_DMA_IRQHandler+0xa48>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d022      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x984>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a42      	ldr	r2, [pc, #264]	; (8003888 <HAL_DMA_IRQHandler+0xa4c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d01d      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x984>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a40      	ldr	r2, [pc, #256]	; (800388c <HAL_DMA_IRQHandler+0xa50>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d018      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x984>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a3f      	ldr	r2, [pc, #252]	; (8003890 <HAL_DMA_IRQHandler+0xa54>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x984>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a3d      	ldr	r2, [pc, #244]	; (8003894 <HAL_DMA_IRQHandler+0xa58>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00e      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x984>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3c      	ldr	r2, [pc, #240]	; (8003898 <HAL_DMA_IRQHandler+0xa5c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d009      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x984>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a3a      	ldr	r2, [pc, #232]	; (800389c <HAL_DMA_IRQHandler+0xa60>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x984>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a39      	ldr	r2, [pc, #228]	; (80038a0 <HAL_DMA_IRQHandler+0xa64>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_DMA_IRQHandler+0x988>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_DMA_IRQHandler+0x98a>
 80037c4:	2300      	movs	r3, #0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 823f 	beq.w	8003c4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2204      	movs	r2, #4
 80037de:	409a      	lsls	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80cd 	beq.w	8003984 <HAL_DMA_IRQHandler+0xb48>
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80c7 	beq.w	8003984 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2204      	movs	r2, #4
 8003800:	409a      	lsls	r2, r3
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d049      	beq.n	80038a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8210 	beq.w	8003c44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800382c:	e20a      	b.n	8003c44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8206 	beq.w	8003c44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003840:	e200      	b.n	8003c44 <HAL_DMA_IRQHandler+0xe08>
 8003842:	bf00      	nop
 8003844:	40020010 	.word	0x40020010
 8003848:	40020028 	.word	0x40020028
 800384c:	40020040 	.word	0x40020040
 8003850:	40020058 	.word	0x40020058
 8003854:	40020070 	.word	0x40020070
 8003858:	40020088 	.word	0x40020088
 800385c:	400200a0 	.word	0x400200a0
 8003860:	400200b8 	.word	0x400200b8
 8003864:	40020410 	.word	0x40020410
 8003868:	40020428 	.word	0x40020428
 800386c:	40020440 	.word	0x40020440
 8003870:	40020458 	.word	0x40020458
 8003874:	40020470 	.word	0x40020470
 8003878:	40020488 	.word	0x40020488
 800387c:	400204a0 	.word	0x400204a0
 8003880:	400204b8 	.word	0x400204b8
 8003884:	58025408 	.word	0x58025408
 8003888:	5802541c 	.word	0x5802541c
 800388c:	58025430 	.word	0x58025430
 8003890:	58025444 	.word	0x58025444
 8003894:	58025458 	.word	0x58025458
 8003898:	5802546c 	.word	0x5802546c
 800389c:	58025480 	.word	0x58025480
 80038a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d160      	bne.n	8003970 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7f      	ldr	r2, [pc, #508]	; (8003ab0 <HAL_DMA_IRQHandler+0xc74>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d04a      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a7d      	ldr	r2, [pc, #500]	; (8003ab4 <HAL_DMA_IRQHandler+0xc78>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d045      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7c      	ldr	r2, [pc, #496]	; (8003ab8 <HAL_DMA_IRQHandler+0xc7c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d040      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a7a      	ldr	r2, [pc, #488]	; (8003abc <HAL_DMA_IRQHandler+0xc80>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d03b      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a79      	ldr	r2, [pc, #484]	; (8003ac0 <HAL_DMA_IRQHandler+0xc84>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d036      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a77      	ldr	r2, [pc, #476]	; (8003ac4 <HAL_DMA_IRQHandler+0xc88>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d031      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a76      	ldr	r2, [pc, #472]	; (8003ac8 <HAL_DMA_IRQHandler+0xc8c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d02c      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a74      	ldr	r2, [pc, #464]	; (8003acc <HAL_DMA_IRQHandler+0xc90>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d027      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a73      	ldr	r2, [pc, #460]	; (8003ad0 <HAL_DMA_IRQHandler+0xc94>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a71      	ldr	r2, [pc, #452]	; (8003ad4 <HAL_DMA_IRQHandler+0xc98>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01d      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a70      	ldr	r2, [pc, #448]	; (8003ad8 <HAL_DMA_IRQHandler+0xc9c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a6e      	ldr	r2, [pc, #440]	; (8003adc <HAL_DMA_IRQHandler+0xca0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6d      	ldr	r2, [pc, #436]	; (8003ae0 <HAL_DMA_IRQHandler+0xca4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6b      	ldr	r2, [pc, #428]	; (8003ae4 <HAL_DMA_IRQHandler+0xca8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6a      	ldr	r2, [pc, #424]	; (8003ae8 <HAL_DMA_IRQHandler+0xcac>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_DMA_IRQHandler+0xb12>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a68      	ldr	r2, [pc, #416]	; (8003aec <HAL_DMA_IRQHandler+0xcb0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <HAL_DMA_IRQHandler+0xb24>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0208 	bic.w	r2, r2, #8
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e007      	b.n	8003970 <HAL_DMA_IRQHandler+0xb34>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8165 	beq.w	8003c44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003982:	e15f      	b.n	8003c44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2202      	movs	r2, #2
 800398e:	409a      	lsls	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80c5 	beq.w	8003b24 <HAL_DMA_IRQHandler+0xce8>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80bf 	beq.w	8003b24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2202      	movs	r2, #2
 80039b0:	409a      	lsls	r2, r3
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d018      	beq.n	80039f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 813a 	beq.w	8003c48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039dc:	e134      	b.n	8003c48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8130 	beq.w	8003c48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f0:	e12a      	b.n	8003c48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 8089 	bne.w	8003b10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2b      	ldr	r2, [pc, #172]	; (8003ab0 <HAL_DMA_IRQHandler+0xc74>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d04a      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <HAL_DMA_IRQHandler+0xc78>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d045      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <HAL_DMA_IRQHandler+0xc7c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d040      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a26      	ldr	r2, [pc, #152]	; (8003abc <HAL_DMA_IRQHandler+0xc80>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d03b      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <HAL_DMA_IRQHandler+0xc84>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d036      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <HAL_DMA_IRQHandler+0xc88>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d031      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <HAL_DMA_IRQHandler+0xc8c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d02c      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a20      	ldr	r2, [pc, #128]	; (8003acc <HAL_DMA_IRQHandler+0xc90>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d027      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <HAL_DMA_IRQHandler+0xc94>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <HAL_DMA_IRQHandler+0xc98>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <HAL_DMA_IRQHandler+0xc9c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <HAL_DMA_IRQHandler+0xca0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a19      	ldr	r2, [pc, #100]	; (8003ae0 <HAL_DMA_IRQHandler+0xca4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <HAL_DMA_IRQHandler+0xca8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_DMA_IRQHandler+0xcac>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xc62>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a14      	ldr	r2, [pc, #80]	; (8003aec <HAL_DMA_IRQHandler+0xcb0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d128      	bne.n	8003af0 <HAL_DMA_IRQHandler+0xcb4>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0214 	bic.w	r2, r2, #20
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e027      	b.n	8003b00 <HAL_DMA_IRQHandler+0xcc4>
 8003ab0:	40020010 	.word	0x40020010
 8003ab4:	40020028 	.word	0x40020028
 8003ab8:	40020040 	.word	0x40020040
 8003abc:	40020058 	.word	0x40020058
 8003ac0:	40020070 	.word	0x40020070
 8003ac4:	40020088 	.word	0x40020088
 8003ac8:	400200a0 	.word	0x400200a0
 8003acc:	400200b8 	.word	0x400200b8
 8003ad0:	40020410 	.word	0x40020410
 8003ad4:	40020428 	.word	0x40020428
 8003ad8:	40020440 	.word	0x40020440
 8003adc:	40020458 	.word	0x40020458
 8003ae0:	40020470 	.word	0x40020470
 8003ae4:	40020488 	.word	0x40020488
 8003ae8:	400204a0 	.word	0x400204a0
 8003aec:	400204b8 	.word	0x400204b8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 020a 	bic.w	r2, r2, #10
 8003afe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b22:	e091      	b.n	8003c48 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8088 	beq.w	8003c4a <HAL_DMA_IRQHandler+0xe0e>
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8082 	beq.w	8003c4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a41      	ldr	r2, [pc, #260]	; (8003c50 <HAL_DMA_IRQHandler+0xe14>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d04a      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a3f      	ldr	r2, [pc, #252]	; (8003c54 <HAL_DMA_IRQHandler+0xe18>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d045      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3e      	ldr	r2, [pc, #248]	; (8003c58 <HAL_DMA_IRQHandler+0xe1c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d040      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3c      	ldr	r2, [pc, #240]	; (8003c5c <HAL_DMA_IRQHandler+0xe20>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d03b      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3b      	ldr	r2, [pc, #236]	; (8003c60 <HAL_DMA_IRQHandler+0xe24>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d036      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a39      	ldr	r2, [pc, #228]	; (8003c64 <HAL_DMA_IRQHandler+0xe28>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d031      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <HAL_DMA_IRQHandler+0xe2c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d02c      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a36      	ldr	r2, [pc, #216]	; (8003c6c <HAL_DMA_IRQHandler+0xe30>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a35      	ldr	r2, [pc, #212]	; (8003c70 <HAL_DMA_IRQHandler+0xe34>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d022      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a33      	ldr	r2, [pc, #204]	; (8003c74 <HAL_DMA_IRQHandler+0xe38>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a32      	ldr	r2, [pc, #200]	; (8003c78 <HAL_DMA_IRQHandler+0xe3c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a30      	ldr	r2, [pc, #192]	; (8003c7c <HAL_DMA_IRQHandler+0xe40>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2f      	ldr	r2, [pc, #188]	; (8003c80 <HAL_DMA_IRQHandler+0xe44>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2d      	ldr	r2, [pc, #180]	; (8003c84 <HAL_DMA_IRQHandler+0xe48>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2c      	ldr	r2, [pc, #176]	; (8003c88 <HAL_DMA_IRQHandler+0xe4c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xdaa>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2a      	ldr	r2, [pc, #168]	; (8003c8c <HAL_DMA_IRQHandler+0xe50>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d108      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0xdbc>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 021c 	bic.w	r2, r2, #28
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e007      	b.n	8003c08 <HAL_DMA_IRQHandler+0xdcc>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 020e 	bic.w	r2, r2, #14
 8003c06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2201      	movs	r2, #1
 8003c12:	409a      	lsls	r2, r3
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
 8003c3e:	e004      	b.n	8003c4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c40:	bf00      	nop
 8003c42:	e002      	b.n	8003c4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c44:	bf00      	nop
 8003c46:	e000      	b.n	8003c4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c4a:	3728      	adds	r7, #40	; 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40020010 	.word	0x40020010
 8003c54:	40020028 	.word	0x40020028
 8003c58:	40020040 	.word	0x40020040
 8003c5c:	40020058 	.word	0x40020058
 8003c60:	40020070 	.word	0x40020070
 8003c64:	40020088 	.word	0x40020088
 8003c68:	400200a0 	.word	0x400200a0
 8003c6c:	400200b8 	.word	0x400200b8
 8003c70:	40020410 	.word	0x40020410
 8003c74:	40020428 	.word	0x40020428
 8003c78:	40020440 	.word	0x40020440
 8003c7c:	40020458 	.word	0x40020458
 8003c80:	40020470 	.word	0x40020470
 8003c84:	40020488 	.word	0x40020488
 8003c88:	400204a0 	.word	0x400204a0
 8003c8c:	400204b8 	.word	0x400204b8

08003c90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a7f      	ldr	r2, [pc, #508]	; (8003eac <DMA_SetConfig+0x21c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d072      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a7d      	ldr	r2, [pc, #500]	; (8003eb0 <DMA_SetConfig+0x220>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d06d      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7c      	ldr	r2, [pc, #496]	; (8003eb4 <DMA_SetConfig+0x224>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d068      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a7a      	ldr	r2, [pc, #488]	; (8003eb8 <DMA_SetConfig+0x228>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d063      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a79      	ldr	r2, [pc, #484]	; (8003ebc <DMA_SetConfig+0x22c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d05e      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a77      	ldr	r2, [pc, #476]	; (8003ec0 <DMA_SetConfig+0x230>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d059      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a76      	ldr	r2, [pc, #472]	; (8003ec4 <DMA_SetConfig+0x234>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d054      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a74      	ldr	r2, [pc, #464]	; (8003ec8 <DMA_SetConfig+0x238>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d04f      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a73      	ldr	r2, [pc, #460]	; (8003ecc <DMA_SetConfig+0x23c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04a      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a71      	ldr	r2, [pc, #452]	; (8003ed0 <DMA_SetConfig+0x240>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d045      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a70      	ldr	r2, [pc, #448]	; (8003ed4 <DMA_SetConfig+0x244>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d040      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a6e      	ldr	r2, [pc, #440]	; (8003ed8 <DMA_SetConfig+0x248>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d03b      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a6d      	ldr	r2, [pc, #436]	; (8003edc <DMA_SetConfig+0x24c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d036      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6b      	ldr	r2, [pc, #428]	; (8003ee0 <DMA_SetConfig+0x250>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d031      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a6a      	ldr	r2, [pc, #424]	; (8003ee4 <DMA_SetConfig+0x254>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02c      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a68      	ldr	r2, [pc, #416]	; (8003ee8 <DMA_SetConfig+0x258>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d027      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a67      	ldr	r2, [pc, #412]	; (8003eec <DMA_SetConfig+0x25c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a65      	ldr	r2, [pc, #404]	; (8003ef0 <DMA_SetConfig+0x260>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01d      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a64      	ldr	r2, [pc, #400]	; (8003ef4 <DMA_SetConfig+0x264>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d018      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a62      	ldr	r2, [pc, #392]	; (8003ef8 <DMA_SetConfig+0x268>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a61      	ldr	r2, [pc, #388]	; (8003efc <DMA_SetConfig+0x26c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5f      	ldr	r2, [pc, #380]	; (8003f00 <DMA_SetConfig+0x270>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5e      	ldr	r2, [pc, #376]	; (8003f04 <DMA_SetConfig+0x274>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <DMA_SetConfig+0x10a>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5c      	ldr	r2, [pc, #368]	; (8003f08 <DMA_SetConfig+0x278>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <DMA_SetConfig+0x10e>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <DMA_SetConfig+0x110>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003dac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dbe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a39      	ldr	r2, [pc, #228]	; (8003eac <DMA_SetConfig+0x21c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d04a      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a38      	ldr	r2, [pc, #224]	; (8003eb0 <DMA_SetConfig+0x220>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d045      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a36      	ldr	r2, [pc, #216]	; (8003eb4 <DMA_SetConfig+0x224>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d040      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a35      	ldr	r2, [pc, #212]	; (8003eb8 <DMA_SetConfig+0x228>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d03b      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a33      	ldr	r2, [pc, #204]	; (8003ebc <DMA_SetConfig+0x22c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d036      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a32      	ldr	r2, [pc, #200]	; (8003ec0 <DMA_SetConfig+0x230>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d031      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a30      	ldr	r2, [pc, #192]	; (8003ec4 <DMA_SetConfig+0x234>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d02c      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <DMA_SetConfig+0x238>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d027      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2d      	ldr	r2, [pc, #180]	; (8003ecc <DMA_SetConfig+0x23c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d022      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ed0 <DMA_SetConfig+0x240>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d01d      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <DMA_SetConfig+0x244>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d018      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a29      	ldr	r2, [pc, #164]	; (8003ed8 <DMA_SetConfig+0x248>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a27      	ldr	r2, [pc, #156]	; (8003edc <DMA_SetConfig+0x24c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00e      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a26      	ldr	r2, [pc, #152]	; (8003ee0 <DMA_SetConfig+0x250>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <DMA_SetConfig+0x254>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <DMA_SetConfig+0x1d0>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <DMA_SetConfig+0x258>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d101      	bne.n	8003e64 <DMA_SetConfig+0x1d4>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <DMA_SetConfig+0x1d6>
 8003e64:	2300      	movs	r3, #0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d059      	beq.n	8003f1e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	223f      	movs	r2, #63	; 0x3f
 8003e74:	409a      	lsls	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e88:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d138      	bne.n	8003f0c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003eaa:	e086      	b.n	8003fba <DMA_SetConfig+0x32a>
 8003eac:	40020010 	.word	0x40020010
 8003eb0:	40020028 	.word	0x40020028
 8003eb4:	40020040 	.word	0x40020040
 8003eb8:	40020058 	.word	0x40020058
 8003ebc:	40020070 	.word	0x40020070
 8003ec0:	40020088 	.word	0x40020088
 8003ec4:	400200a0 	.word	0x400200a0
 8003ec8:	400200b8 	.word	0x400200b8
 8003ecc:	40020410 	.word	0x40020410
 8003ed0:	40020428 	.word	0x40020428
 8003ed4:	40020440 	.word	0x40020440
 8003ed8:	40020458 	.word	0x40020458
 8003edc:	40020470 	.word	0x40020470
 8003ee0:	40020488 	.word	0x40020488
 8003ee4:	400204a0 	.word	0x400204a0
 8003ee8:	400204b8 	.word	0x400204b8
 8003eec:	58025408 	.word	0x58025408
 8003ef0:	5802541c 	.word	0x5802541c
 8003ef4:	58025430 	.word	0x58025430
 8003ef8:	58025444 	.word	0x58025444
 8003efc:	58025458 	.word	0x58025458
 8003f00:	5802546c 	.word	0x5802546c
 8003f04:	58025480 	.word	0x58025480
 8003f08:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]
}
 8003f1c:	e04d      	b.n	8003fba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <DMA_SetConfig+0x338>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <DMA_SetConfig+0x2de>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <DMA_SetConfig+0x33c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <DMA_SetConfig+0x2de>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a26      	ldr	r2, [pc, #152]	; (8003fd0 <DMA_SetConfig+0x340>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <DMA_SetConfig+0x2de>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <DMA_SetConfig+0x344>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <DMA_SetConfig+0x2de>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <DMA_SetConfig+0x348>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <DMA_SetConfig+0x2de>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <DMA_SetConfig+0x34c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <DMA_SetConfig+0x2de>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a20      	ldr	r2, [pc, #128]	; (8003fe0 <DMA_SetConfig+0x350>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <DMA_SetConfig+0x2de>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1e      	ldr	r2, [pc, #120]	; (8003fe4 <DMA_SetConfig+0x354>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <DMA_SetConfig+0x2e2>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <DMA_SetConfig+0x2e4>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d020      	beq.n	8003fba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	2201      	movs	r2, #1
 8003f82:	409a      	lsls	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d108      	bne.n	8003faa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	60da      	str	r2, [r3, #12]
}
 8003fa8:	e007      	b.n	8003fba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	60da      	str	r2, [r3, #12]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	58025408 	.word	0x58025408
 8003fcc:	5802541c 	.word	0x5802541c
 8003fd0:	58025430 	.word	0x58025430
 8003fd4:	58025444 	.word	0x58025444
 8003fd8:	58025458 	.word	0x58025458
 8003fdc:	5802546c 	.word	0x5802546c
 8003fe0:	58025480 	.word	0x58025480
 8003fe4:	58025494 	.word	0x58025494

08003fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a42      	ldr	r2, [pc, #264]	; (8004100 <DMA_CalcBaseAndBitshift+0x118>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d04a      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a41      	ldr	r2, [pc, #260]	; (8004104 <DMA_CalcBaseAndBitshift+0x11c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d045      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a3f      	ldr	r2, [pc, #252]	; (8004108 <DMA_CalcBaseAndBitshift+0x120>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d040      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a3e      	ldr	r2, [pc, #248]	; (800410c <DMA_CalcBaseAndBitshift+0x124>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d03b      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <DMA_CalcBaseAndBitshift+0x128>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d036      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <DMA_CalcBaseAndBitshift+0x12c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d031      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a39      	ldr	r2, [pc, #228]	; (8004118 <DMA_CalcBaseAndBitshift+0x130>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d02c      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a38      	ldr	r2, [pc, #224]	; (800411c <DMA_CalcBaseAndBitshift+0x134>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d027      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a36      	ldr	r2, [pc, #216]	; (8004120 <DMA_CalcBaseAndBitshift+0x138>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a35      	ldr	r2, [pc, #212]	; (8004124 <DMA_CalcBaseAndBitshift+0x13c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d01d      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a33      	ldr	r2, [pc, #204]	; (8004128 <DMA_CalcBaseAndBitshift+0x140>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a32      	ldr	r2, [pc, #200]	; (800412c <DMA_CalcBaseAndBitshift+0x144>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a30      	ldr	r2, [pc, #192]	; (8004130 <DMA_CalcBaseAndBitshift+0x148>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2f      	ldr	r2, [pc, #188]	; (8004134 <DMA_CalcBaseAndBitshift+0x14c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2d      	ldr	r2, [pc, #180]	; (8004138 <DMA_CalcBaseAndBitshift+0x150>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2c      	ldr	r2, [pc, #176]	; (800413c <DMA_CalcBaseAndBitshift+0x154>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <DMA_CalcBaseAndBitshift+0xac>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <DMA_CalcBaseAndBitshift+0xae>
 8004094:	2300      	movs	r3, #0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d024      	beq.n	80040e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	3b10      	subs	r3, #16
 80040a2:	4a27      	ldr	r2, [pc, #156]	; (8004140 <DMA_CalcBaseAndBitshift+0x158>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	4a24      	ldr	r2, [pc, #144]	; (8004144 <DMA_CalcBaseAndBitshift+0x15c>)
 80040b4:	5cd3      	ldrb	r3, [r2, r3]
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d908      	bls.n	80040d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	4b1f      	ldr	r3, [pc, #124]	; (8004148 <DMA_CalcBaseAndBitshift+0x160>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	1d1a      	adds	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	659a      	str	r2, [r3, #88]	; 0x58
 80040d2:	e00d      	b.n	80040f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <DMA_CalcBaseAndBitshift+0x160>)
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6593      	str	r3, [r2, #88]	; 0x58
 80040e2:	e005      	b.n	80040f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40020010 	.word	0x40020010
 8004104:	40020028 	.word	0x40020028
 8004108:	40020040 	.word	0x40020040
 800410c:	40020058 	.word	0x40020058
 8004110:	40020070 	.word	0x40020070
 8004114:	40020088 	.word	0x40020088
 8004118:	400200a0 	.word	0x400200a0
 800411c:	400200b8 	.word	0x400200b8
 8004120:	40020410 	.word	0x40020410
 8004124:	40020428 	.word	0x40020428
 8004128:	40020440 	.word	0x40020440
 800412c:	40020458 	.word	0x40020458
 8004130:	40020470 	.word	0x40020470
 8004134:	40020488 	.word	0x40020488
 8004138:	400204a0 	.word	0x400204a0
 800413c:	400204b8 	.word	0x400204b8
 8004140:	aaaaaaab 	.word	0xaaaaaaab
 8004144:	08009088 	.word	0x08009088
 8004148:	fffffc00 	.word	0xfffffc00

0800414c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d120      	bne.n	80041a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	2b03      	cmp	r3, #3
 8004166:	d858      	bhi.n	800421a <DMA_CheckFifoParam+0xce>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <DMA_CheckFifoParam+0x24>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004193 	.word	0x08004193
 8004178:	08004181 	.word	0x08004181
 800417c:	0800421b 	.word	0x0800421b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d048      	beq.n	800421e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004190:	e045      	b.n	800421e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800419a:	d142      	bne.n	8004222 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041a0:	e03f      	b.n	8004222 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041aa:	d123      	bne.n	80041f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d838      	bhi.n	8004226 <DMA_CheckFifoParam+0xda>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <DMA_CheckFifoParam+0x70>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041d3 	.word	0x080041d3
 80041c4:	080041cd 	.word	0x080041cd
 80041c8:	080041e5 	.word	0x080041e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
        break;
 80041d0:	e030      	b.n	8004234 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d025      	beq.n	800422a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041e2:	e022      	b.n	800422a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ec:	d11f      	bne.n	800422e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041f2:	e01c      	b.n	800422e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d902      	bls.n	8004202 <DMA_CheckFifoParam+0xb6>
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d003      	beq.n	8004208 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004200:	e018      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
        break;
 8004206:	e015      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00e      	beq.n	8004232 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
    break;
 8004218:	e00b      	b.n	8004232 <DMA_CheckFifoParam+0xe6>
        break;
 800421a:	bf00      	nop
 800421c:	e00a      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 800421e:	bf00      	nop
 8004220:	e008      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 8004222:	bf00      	nop
 8004224:	e006      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 8004226:	bf00      	nop
 8004228:	e004      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
    break;
 8004232:	bf00      	nop
    }
  }

  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop

08004244 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a38      	ldr	r2, [pc, #224]	; (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d022      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a36      	ldr	r2, [pc, #216]	; (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01d      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a35      	ldr	r2, [pc, #212]	; (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d018      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a33      	ldr	r2, [pc, #204]	; (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a32      	ldr	r2, [pc, #200]	; (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a30      	ldr	r2, [pc, #192]	; (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a2f      	ldr	r2, [pc, #188]	; (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01a      	beq.n	80042e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	3b08      	subs	r3, #8
 80042b4:	4a28      	ldr	r2, [pc, #160]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4b26      	ldr	r3, [pc, #152]	; (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a24      	ldr	r2, [pc, #144]	; (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042e0:	e024      	b.n	800432c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	3b10      	subs	r3, #16
 80042ea:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d806      	bhi.n	800430a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d902      	bls.n	800430a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3308      	adds	r3, #8
 8004308:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	461a      	mov	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a16      	ldr	r2, [pc, #88]	; (8004374 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800431c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	2201      	movs	r2, #1
 8004326:	409a      	lsls	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	58025408 	.word	0x58025408
 800433c:	5802541c 	.word	0x5802541c
 8004340:	58025430 	.word	0x58025430
 8004344:	58025444 	.word	0x58025444
 8004348:	58025458 	.word	0x58025458
 800434c:	5802546c 	.word	0x5802546c
 8004350:	58025480 	.word	0x58025480
 8004354:	58025494 	.word	0x58025494
 8004358:	cccccccd 	.word	0xcccccccd
 800435c:	16009600 	.word	0x16009600
 8004360:	58025880 	.word	0x58025880
 8004364:	aaaaaaab 	.word	0xaaaaaaab
 8004368:	400204b8 	.word	0x400204b8
 800436c:	4002040f 	.word	0x4002040f
 8004370:	10008200 	.word	0x10008200
 8004374:	40020880 	.word	0x40020880

08004378 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d04a      	beq.n	8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d847      	bhi.n	8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a25      	ldr	r2, [pc, #148]	; (8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d022      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a24      	ldr	r2, [pc, #144]	; (8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d01d      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a22      	ldr	r2, [pc, #136]	; (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a21      	ldr	r2, [pc, #132]	; (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1b      	ldr	r2, [pc, #108]	; (800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043e8:	2300      	movs	r3, #0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004400:	671a      	str	r2, [r3, #112]	; 0x70
 8004402:	e009      	b.n	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	461a      	mov	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a11      	ldr	r2, [pc, #68]	; (800445c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004416:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3b01      	subs	r3, #1
 800441c:	2201      	movs	r2, #1
 800441e:	409a      	lsls	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	58025408 	.word	0x58025408
 8004434:	5802541c 	.word	0x5802541c
 8004438:	58025430 	.word	0x58025430
 800443c:	58025444 	.word	0x58025444
 8004440:	58025458 	.word	0x58025458
 8004444:	5802546c 	.word	0x5802546c
 8004448:	58025480 	.word	0x58025480
 800444c:	58025494 	.word	0x58025494
 8004450:	1600963f 	.word	0x1600963f
 8004454:	58025940 	.word	0x58025940
 8004458:	1000823f 	.word	0x1000823f
 800445c:	40020940 	.word	0x40020940

08004460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800446e:	4b89      	ldr	r3, [pc, #548]	; (8004694 <HAL_GPIO_Init+0x234>)
 8004470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004472:	e194      	b.n	800479e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2101      	movs	r1, #1
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8186 	beq.w	8004798 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d005      	beq.n	80044a4 <HAL_GPIO_Init+0x44>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d130      	bne.n	8004506 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044da:	2201      	movs	r2, #1
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f003 0201 	and.w	r2, r3, #1
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b03      	cmp	r3, #3
 8004510:	d017      	beq.n	8004542 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	2203      	movs	r2, #3
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d123      	bne.n	8004596 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	08da      	lsrs	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3208      	adds	r2, #8
 8004556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	220f      	movs	r2, #15
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	08da      	lsrs	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3208      	adds	r2, #8
 8004590:	69b9      	ldr	r1, [r7, #24]
 8004592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	2203      	movs	r2, #3
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4013      	ands	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 0203 	and.w	r2, r3, #3
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80e0 	beq.w	8004798 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d8:	4b2f      	ldr	r3, [pc, #188]	; (8004698 <HAL_GPIO_Init+0x238>)
 80045da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045de:	4a2e      	ldr	r2, [pc, #184]	; (8004698 <HAL_GPIO_Init+0x238>)
 80045e0:	f043 0302 	orr.w	r3, r3, #2
 80045e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045e8:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_GPIO_Init+0x238>)
 80045ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045f6:	4a29      	ldr	r2, [pc, #164]	; (800469c <HAL_GPIO_Init+0x23c>)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	3302      	adds	r3, #2
 80045fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	220f      	movs	r2, #15
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <HAL_GPIO_Init+0x240>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d052      	beq.n	80046c8 <HAL_GPIO_Init+0x268>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <HAL_GPIO_Init+0x244>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d031      	beq.n	800468e <HAL_GPIO_Init+0x22e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <HAL_GPIO_Init+0x248>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d02b      	beq.n	800468a <HAL_GPIO_Init+0x22a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_GPIO_Init+0x24c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d025      	beq.n	8004686 <HAL_GPIO_Init+0x226>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <HAL_GPIO_Init+0x250>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01f      	beq.n	8004682 <HAL_GPIO_Init+0x222>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <HAL_GPIO_Init+0x254>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d019      	beq.n	800467e <HAL_GPIO_Init+0x21e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <HAL_GPIO_Init+0x258>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_GPIO_Init+0x21a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a19      	ldr	r2, [pc, #100]	; (80046bc <HAL_GPIO_Init+0x25c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00d      	beq.n	8004676 <HAL_GPIO_Init+0x216>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_GPIO_Init+0x260>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <HAL_GPIO_Init+0x212>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <HAL_GPIO_Init+0x264>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_GPIO_Init+0x20e>
 800466a:	2309      	movs	r3, #9
 800466c:	e02d      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 800466e:	230a      	movs	r3, #10
 8004670:	e02b      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 8004672:	2308      	movs	r3, #8
 8004674:	e029      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 8004676:	2307      	movs	r3, #7
 8004678:	e027      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 800467a:	2306      	movs	r3, #6
 800467c:	e025      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 800467e:	2305      	movs	r3, #5
 8004680:	e023      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 8004682:	2304      	movs	r3, #4
 8004684:	e021      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 8004686:	2303      	movs	r3, #3
 8004688:	e01f      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 800468a:	2302      	movs	r3, #2
 800468c:	e01d      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 800468e:	2301      	movs	r3, #1
 8004690:	e01b      	b.n	80046ca <HAL_GPIO_Init+0x26a>
 8004692:	bf00      	nop
 8004694:	58000080 	.word	0x58000080
 8004698:	58024400 	.word	0x58024400
 800469c:	58000400 	.word	0x58000400
 80046a0:	58020000 	.word	0x58020000
 80046a4:	58020400 	.word	0x58020400
 80046a8:	58020800 	.word	0x58020800
 80046ac:	58020c00 	.word	0x58020c00
 80046b0:	58021000 	.word	0x58021000
 80046b4:	58021400 	.word	0x58021400
 80046b8:	58021800 	.word	0x58021800
 80046bc:	58021c00 	.word	0x58021c00
 80046c0:	58022000 	.word	0x58022000
 80046c4:	58022400 	.word	0x58022400
 80046c8:	2300      	movs	r3, #0
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	f002 0203 	and.w	r2, r2, #3
 80046d0:	0092      	lsls	r2, r2, #2
 80046d2:	4093      	lsls	r3, r2
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046da:	4938      	ldr	r1, [pc, #224]	; (80047bc <HAL_GPIO_Init+0x35c>)
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	3302      	adds	r3, #2
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800470e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800473c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	43db      	mvns	r3, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4013      	ands	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	3301      	adds	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f47f ae63 	bne.w	8004474 <HAL_GPIO_Init+0x14>
  }
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	3724      	adds	r7, #36	; 0x24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	58000400 	.word	0x58000400

080047c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <HAL_PWREx_ConfigSupply+0x70>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d00a      	beq.n	80047ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80047d4:	4b16      	ldr	r3, [pc, #88]	; (8004830 <HAL_PWREx_ConfigSupply+0x70>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e01f      	b.n	8004826 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e01d      	b.n	8004826 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <HAL_PWREx_ConfigSupply+0x70>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f023 0207 	bic.w	r2, r3, #7
 80047f2:	490f      	ldr	r1, [pc, #60]	; (8004830 <HAL_PWREx_ConfigSupply+0x70>)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80047fa:	f7fc fa1b 	bl	8000c34 <HAL_GetTick>
 80047fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004800:	e009      	b.n	8004816 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004802:	f7fc fa17 	bl	8000c34 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004810:	d901      	bls.n	8004816 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e007      	b.n	8004826 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_PWREx_ConfigSupply+0x70>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004822:	d1ee      	bne.n	8004802 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	58024800 	.word	0x58024800

08004834 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08c      	sub	sp, #48	; 0x30
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f000 bc48 	b.w	80050d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8088 	beq.w	8004966 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004856:	4b99      	ldr	r3, [pc, #612]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004860:	4b96      	ldr	r3, [pc, #600]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	2b10      	cmp	r3, #16
 800486a:	d007      	beq.n	800487c <HAL_RCC_OscConfig+0x48>
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	2b18      	cmp	r3, #24
 8004870:	d111      	bne.n	8004896 <HAL_RCC_OscConfig+0x62>
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d10c      	bne.n	8004896 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487c:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d06d      	beq.n	8004964 <HAL_RCC_OscConfig+0x130>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d169      	bne.n	8004964 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f000 bc21 	b.w	80050d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489e:	d106      	bne.n	80048ae <HAL_RCC_OscConfig+0x7a>
 80048a0:	4b86      	ldr	r3, [pc, #536]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a85      	ldr	r2, [pc, #532]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e02e      	b.n	800490c <HAL_RCC_OscConfig+0xd8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x9c>
 80048b6:	4b81      	ldr	r3, [pc, #516]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a80      	ldr	r2, [pc, #512]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b7e      	ldr	r3, [pc, #504]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a7d      	ldr	r2, [pc, #500]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e01d      	b.n	800490c <HAL_RCC_OscConfig+0xd8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0xc0>
 80048da:	4b78      	ldr	r3, [pc, #480]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a77      	ldr	r2, [pc, #476]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b75      	ldr	r3, [pc, #468]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a74      	ldr	r2, [pc, #464]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0xd8>
 80048f4:	4b71      	ldr	r3, [pc, #452]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a70      	ldr	r2, [pc, #448]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b6e      	ldr	r3, [pc, #440]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6d      	ldr	r2, [pc, #436]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800490a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fc f98e 	bl	8000c34 <HAL_GetTick>
 8004918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800491c:	f7fc f98a 	bl	8000c34 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	; 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e3d4      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800492e:	4b63      	ldr	r3, [pc, #396]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0xe8>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fc f97a 	bl	8000c34 <HAL_GetTick>
 8004940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004944:	f7fc f976 	bl	8000c34 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b64      	cmp	r3, #100	; 0x64
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e3c0      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004956:	4b59      	ldr	r3, [pc, #356]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x110>
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80ca 	beq.w	8004b08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004974:	4b51      	ldr	r3, [pc, #324]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800497c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800497e:	4b4f      	ldr	r3, [pc, #316]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_RCC_OscConfig+0x166>
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	2b18      	cmp	r3, #24
 800498e:	d156      	bne.n	8004a3e <HAL_RCC_OscConfig+0x20a>
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d151      	bne.n	8004a3e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499a:	4b48      	ldr	r3, [pc, #288]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_RCC_OscConfig+0x17e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e392      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049b2:	4b42      	ldr	r3, [pc, #264]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 0219 	bic.w	r2, r3, #25
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	493f      	ldr	r1, [pc, #252]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fc f936 	bl	8000c34 <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049cc:	f7fc f932 	bl	8000c34 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e37c      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049de:	4b37      	ldr	r3, [pc, #220]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	f7fc f953 	bl	8000c94 <HAL_GetREVID>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d817      	bhi.n	8004a28 <HAL_RCC_OscConfig+0x1f4>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d108      	bne.n	8004a12 <HAL_RCC_OscConfig+0x1de>
 8004a00:	4b2e      	ldr	r3, [pc, #184]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a08:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a0e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a10:	e07a      	b.n	8004b08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	031b      	lsls	r3, r3, #12
 8004a20:	4926      	ldr	r1, [pc, #152]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a26:	e06f      	b.n	8004b08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b24      	ldr	r3, [pc, #144]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	4921      	ldr	r1, [pc, #132]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a3c:	e064      	b.n	8004b08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d047      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 0219 	bic.w	r2, r3, #25
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	491a      	ldr	r1, [pc, #104]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fc f8ec 	bl	8000c34 <HAL_GetTick>
 8004a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a60:	f7fc f8e8 	bl	8000c34 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e332      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7e:	f7fc f909 	bl	8000c94 <HAL_GetREVID>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d819      	bhi.n	8004ac0 <HAL_RCC_OscConfig+0x28c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d108      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x272>
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a9c:	4a07      	ldr	r2, [pc, #28]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa2:	6053      	str	r3, [r2, #4]
 8004aa4:	e030      	b.n	8004b08 <HAL_RCC_OscConfig+0x2d4>
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	031b      	lsls	r3, r3, #12
 8004ab4:	4901      	ldr	r1, [pc, #4]	; (8004abc <HAL_RCC_OscConfig+0x288>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	604b      	str	r3, [r1, #4]
 8004aba:	e025      	b.n	8004b08 <HAL_RCC_OscConfig+0x2d4>
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	4b9a      	ldr	r3, [pc, #616]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	4997      	ldr	r1, [pc, #604]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
 8004ad4:	e018      	b.n	8004b08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad6:	4b95      	ldr	r3, [pc, #596]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a94      	ldr	r2, [pc, #592]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004adc:	f023 0301 	bic.w	r3, r3, #1
 8004ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae2:	f7fc f8a7 	bl	8000c34 <HAL_GetTick>
 8004ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aea:	f7fc f8a3 	bl	8000c34 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e2ed      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004afc:	4b8b      	ldr	r3, [pc, #556]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80a9 	beq.w	8004c68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b16:	4b85      	ldr	r3, [pc, #532]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b20:	4b82      	ldr	r3, [pc, #520]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d007      	beq.n	8004b3c <HAL_RCC_OscConfig+0x308>
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b18      	cmp	r3, #24
 8004b30:	d13a      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x374>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d135      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b3c:	4b7b      	ldr	r3, [pc, #492]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_RCC_OscConfig+0x320>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	2b80      	cmp	r3, #128	; 0x80
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e2c1      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b54:	f7fc f89e 	bl	8000c94 <HAL_GetREVID>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d817      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x35e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d108      	bne.n	8004b7c <HAL_RCC_OscConfig+0x348>
 8004b6a:	4b70      	ldr	r3, [pc, #448]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b72:	4a6e      	ldr	r2, [pc, #440]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004b74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b7a:	e075      	b.n	8004c68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b7c:	4b6b      	ldr	r3, [pc, #428]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	069b      	lsls	r3, r3, #26
 8004b8a:	4968      	ldr	r1, [pc, #416]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b90:	e06a      	b.n	8004c68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b92:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	061b      	lsls	r3, r3, #24
 8004ba0:	4962      	ldr	r1, [pc, #392]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ba6:	e05f      	b.n	8004c68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d042      	beq.n	8004c36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004bb0:	4b5e      	ldr	r3, [pc, #376]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a5d      	ldr	r2, [pc, #372]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fc f83a 	bl	8000c34 <HAL_GetTick>
 8004bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bc4:	f7fc f836 	bl	8000c34 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e280      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bd6:	4b55      	ldr	r3, [pc, #340]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004be2:	f7fc f857 	bl	8000c94 <HAL_GetREVID>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d817      	bhi.n	8004c20 <HAL_RCC_OscConfig+0x3ec>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d108      	bne.n	8004c0a <HAL_RCC_OscConfig+0x3d6>
 8004bf8:	4b4c      	ldr	r3, [pc, #304]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c00:	4a4a      	ldr	r2, [pc, #296]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c06:	6053      	str	r3, [r2, #4]
 8004c08:	e02e      	b.n	8004c68 <HAL_RCC_OscConfig+0x434>
 8004c0a:	4b48      	ldr	r3, [pc, #288]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	069b      	lsls	r3, r3, #26
 8004c18:	4944      	ldr	r1, [pc, #272]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	604b      	str	r3, [r1, #4]
 8004c1e:	e023      	b.n	8004c68 <HAL_RCC_OscConfig+0x434>
 8004c20:	4b42      	ldr	r3, [pc, #264]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	061b      	lsls	r3, r3, #24
 8004c2e:	493f      	ldr	r1, [pc, #252]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60cb      	str	r3, [r1, #12]
 8004c34:	e018      	b.n	8004c68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c36:	4b3d      	ldr	r3, [pc, #244]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3c      	ldr	r2, [pc, #240]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fb fff7 	bl	8000c34 <HAL_GetTick>
 8004c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c4a:	f7fb fff3 	bl	8000c34 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e23d      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c5c:	4b33      	ldr	r3, [pc, #204]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f0      	bne.n	8004c4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d036      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d019      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c80:	4a2a      	ldr	r2, [pc, #168]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fb ffd4 	bl	8000c34 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c90:	f7fb ffd0 	bl	8000c34 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e21a      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ca2:	4b22      	ldr	r3, [pc, #136]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0x45c>
 8004cae:	e018      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb0:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb4:	4a1d      	ldr	r2, [pc, #116]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fb ffba 	bl	8000c34 <HAL_GetTick>
 8004cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc4:	f7fb ffb6 	bl	8000c34 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e200      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d039      	beq.n	8004d62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01c      	beq.n	8004d30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d02:	f7fb ff97 	bl	8000c34 <HAL_GetTick>
 8004d06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d0a:	f7fb ff93 	bl	8000c34 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e1dd      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <HAL_RCC_OscConfig+0x4f8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x4d6>
 8004d28:	e01b      	b.n	8004d62 <HAL_RCC_OscConfig+0x52e>
 8004d2a:	bf00      	nop
 8004d2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d30:	4b9b      	ldr	r3, [pc, #620]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a9a      	ldr	r2, [pc, #616]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d3c:	f7fb ff7a 	bl	8000c34 <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d44:	f7fb ff76 	bl	8000c34 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e1c0      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d56:	4b92      	ldr	r3, [pc, #584]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8081 	beq.w	8004e72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d70:	4b8c      	ldr	r3, [pc, #560]	; (8004fa4 <HAL_RCC_OscConfig+0x770>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a8b      	ldr	r2, [pc, #556]	; (8004fa4 <HAL_RCC_OscConfig+0x770>)
 8004d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d7c:	f7fb ff5a 	bl	8000c34 <HAL_GetTick>
 8004d80:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d84:	f7fb ff56 	bl	8000c34 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e1a0      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d96:	4b83      	ldr	r3, [pc, #524]	; (8004fa4 <HAL_RCC_OscConfig+0x770>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d106      	bne.n	8004db8 <HAL_RCC_OscConfig+0x584>
 8004daa:	4b7d      	ldr	r3, [pc, #500]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a7c      	ldr	r2, [pc, #496]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
 8004db6:	e02d      	b.n	8004e14 <HAL_RCC_OscConfig+0x5e0>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10c      	bne.n	8004dda <HAL_RCC_OscConfig+0x5a6>
 8004dc0:	4b77      	ldr	r3, [pc, #476]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a76      	ldr	r2, [pc, #472]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	4b74      	ldr	r3, [pc, #464]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a73      	ldr	r2, [pc, #460]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004dd2:	f023 0304 	bic.w	r3, r3, #4
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd8:	e01c      	b.n	8004e14 <HAL_RCC_OscConfig+0x5e0>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5c8>
 8004de2:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	4a6e      	ldr	r2, [pc, #440]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004de8:	f043 0304 	orr.w	r3, r3, #4
 8004dec:	6713      	str	r3, [r2, #112]	; 0x70
 8004dee:	4b6c      	ldr	r3, [pc, #432]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	4a6b      	ldr	r2, [pc, #428]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfa:	e00b      	b.n	8004e14 <HAL_RCC_OscConfig+0x5e0>
 8004dfc:	4b68      	ldr	r3, [pc, #416]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a67      	ldr	r2, [pc, #412]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004e02:	f023 0301 	bic.w	r3, r3, #1
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	4b65      	ldr	r3, [pc, #404]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	4a64      	ldr	r2, [pc, #400]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004e0e:	f023 0304 	bic.w	r3, r3, #4
 8004e12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d015      	beq.n	8004e48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1c:	f7fb ff0a 	bl	8000c34 <HAL_GetTick>
 8004e20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e24:	f7fb ff06 	bl	8000c34 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e14e      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e3a:	4b59      	ldr	r3, [pc, #356]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0ee      	beq.n	8004e24 <HAL_RCC_OscConfig+0x5f0>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fb fef4 	bl	8000c34 <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fb fef0 	bl	8000c34 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e138      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e66:	4b4e      	ldr	r3, [pc, #312]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1ee      	bne.n	8004e50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 812d 	beq.w	80050d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e7c:	4b48      	ldr	r3, [pc, #288]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e84:	2b18      	cmp	r3, #24
 8004e86:	f000 80bd 	beq.w	8005004 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	f040 809e 	bne.w	8004fd0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e94:	4b42      	ldr	r3, [pc, #264]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a41      	ldr	r2, [pc, #260]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fb fec8 	bl	8000c34 <HAL_GetTick>
 8004ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7fb fec4 	bl	8000c34 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e10e      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eba:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCC_OscConfig+0x774>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ed6:	0112      	lsls	r2, r2, #4
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	4931      	ldr	r1, [pc, #196]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	628b      	str	r3, [r1, #40]	; 0x28
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	025b      	lsls	r3, r3, #9
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	3b01      	subs	r3, #1
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f10:	4923      	ldr	r1, [pc, #140]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f16:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f22:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f26:	4b21      	ldr	r3, [pc, #132]	; (8004fac <HAL_RCC_OscConfig+0x778>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f2e:	00d2      	lsls	r2, r2, #3
 8004f30:	491b      	ldr	r1, [pc, #108]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f36:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	f023 020c 	bic.w	r2, r3, #12
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	4917      	ldr	r1, [pc, #92]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f48:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	f023 0202 	bic.w	r2, r3, #2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f54:	4912      	ldr	r1, [pc, #72]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f66:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	4a0a      	ldr	r2, [pc, #40]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	4a07      	ldr	r2, [pc, #28]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <HAL_RCC_OscConfig+0x76c>)
 8004f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f96:	f7fb fe4d 	bl	8000c34 <HAL_GetTick>
 8004f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f9c:	e011      	b.n	8004fc2 <HAL_RCC_OscConfig+0x78e>
 8004f9e:	bf00      	nop
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	58024800 	.word	0x58024800
 8004fa8:	fffffc0c 	.word	0xfffffc0c
 8004fac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fb fe40 	bl	8000c34 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e08a      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fc2:	4b47      	ldr	r3, [pc, #284]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x77c>
 8004fce:	e082      	b.n	80050d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd0:	4b43      	ldr	r3, [pc, #268]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a42      	ldr	r2, [pc, #264]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 8004fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fb fe2a 	bl	8000c34 <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fb fe26 	bl	8000c34 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e070      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ff6:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x7b0>
 8005002:	e068      	b.n	80050d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005004:	4b36      	ldr	r3, [pc, #216]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800500a:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	2b01      	cmp	r3, #1
 8005016:	d031      	beq.n	800507c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f003 0203 	and.w	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005022:	429a      	cmp	r2, r3
 8005024:	d12a      	bne.n	800507c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d122      	bne.n	800507c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d11a      	bne.n	800507c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	0a5b      	lsrs	r3, r3, #9
 800504a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d111      	bne.n	800507c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d108      	bne.n	800507c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e02b      	b.n	80050d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005080:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 8005082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800508a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	429a      	cmp	r2, r3
 8005094:	d01f      	beq.n	80050d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005096:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050a2:	f7fb fdc7 	bl	8000c34 <HAL_GetTick>
 80050a6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80050a8:	bf00      	nop
 80050aa:	f7fb fdc3 	bl	8000c34 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d0f9      	beq.n	80050aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050b6:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 80050b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ba:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <HAL_RCC_OscConfig+0x8b0>)
 80050bc:	4013      	ands	r3, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050c2:	00d2      	lsls	r2, r2, #3
 80050c4:	4906      	ldr	r1, [pc, #24]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	4a04      	ldr	r2, [pc, #16]	; (80050e0 <HAL_RCC_OscConfig+0x8ac>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3730      	adds	r7, #48	; 0x30
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	58024400 	.word	0x58024400
 80050e4:	ffff0007 	.word	0xffff0007

080050e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e19c      	b.n	8005436 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050fc:	4b8a      	ldr	r3, [pc, #552]	; (8005328 <HAL_RCC_ClockConfig+0x240>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d910      	bls.n	800512c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510a:	4b87      	ldr	r3, [pc, #540]	; (8005328 <HAL_RCC_ClockConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f023 020f 	bic.w	r2, r3, #15
 8005112:	4985      	ldr	r1, [pc, #532]	; (8005328 <HAL_RCC_ClockConfig+0x240>)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	4313      	orrs	r3, r2
 8005118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511a:	4b83      	ldr	r3, [pc, #524]	; (8005328 <HAL_RCC_ClockConfig+0x240>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d001      	beq.n	800512c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e184      	b.n	8005436 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	4b7b      	ldr	r3, [pc, #492]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005144:	429a      	cmp	r2, r3
 8005146:	d908      	bls.n	800515a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005148:	4b78      	ldr	r3, [pc, #480]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	4975      	ldr	r1, [pc, #468]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 8005156:	4313      	orrs	r3, r2
 8005158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d010      	beq.n	8005188 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	4b70      	ldr	r3, [pc, #448]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005172:	429a      	cmp	r2, r3
 8005174:	d908      	bls.n	8005188 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005176:	4b6d      	ldr	r3, [pc, #436]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	496a      	ldr	r1, [pc, #424]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 8005184:	4313      	orrs	r3, r2
 8005186:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	d010      	beq.n	80051b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	4b64      	ldr	r3, [pc, #400]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d908      	bls.n	80051b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051a4:	4b61      	ldr	r3, [pc, #388]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	495e      	ldr	r1, [pc, #376]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d010      	beq.n	80051e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	4b59      	ldr	r3, [pc, #356]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d908      	bls.n	80051e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051d2:	4b56      	ldr	r3, [pc, #344]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	4953      	ldr	r1, [pc, #332]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d010      	beq.n	8005212 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	4b4d      	ldr	r3, [pc, #308]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d908      	bls.n	8005212 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005200:	4b4a      	ldr	r3, [pc, #296]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f023 020f 	bic.w	r2, r3, #15
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4947      	ldr	r1, [pc, #284]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800520e:	4313      	orrs	r3, r2
 8005210:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d055      	beq.n	80052ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800521e:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	4940      	ldr	r1, [pc, #256]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800522c:	4313      	orrs	r3, r2
 800522e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d107      	bne.n	8005248 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005238:	4b3c      	ldr	r3, [pc, #240]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d121      	bne.n	8005288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0f6      	b.n	8005436 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d107      	bne.n	8005260 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005250:	4b36      	ldr	r3, [pc, #216]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d115      	bne.n	8005288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0ea      	b.n	8005436 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d107      	bne.n	8005278 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005268:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d109      	bne.n	8005288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0de      	b.n	8005436 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005278:	4b2c      	ldr	r3, [pc, #176]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0d6      	b.n	8005436 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005288:	4b28      	ldr	r3, [pc, #160]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f023 0207 	bic.w	r2, r3, #7
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4925      	ldr	r1, [pc, #148]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 8005296:	4313      	orrs	r3, r2
 8005298:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529a:	f7fb fccb 	bl	8000c34 <HAL_GetTick>
 800529e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a0:	e00a      	b.n	80052b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a2:	f7fb fcc7 	bl	8000c34 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0be      	b.n	8005436 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b8:	4b1c      	ldr	r3, [pc, #112]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d1eb      	bne.n	80052a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d010      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	4b14      	ldr	r3, [pc, #80]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d208      	bcs.n	80052f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f023 020f 	bic.w	r2, r3, #15
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	490e      	ldr	r1, [pc, #56]	; (800532c <HAL_RCC_ClockConfig+0x244>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCC_ClockConfig+0x240>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d214      	bcs.n	8005330 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005306:	4b08      	ldr	r3, [pc, #32]	; (8005328 <HAL_RCC_ClockConfig+0x240>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 020f 	bic.w	r2, r3, #15
 800530e:	4906      	ldr	r1, [pc, #24]	; (8005328 <HAL_RCC_ClockConfig+0x240>)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	4313      	orrs	r3, r2
 8005314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005316:	4b04      	ldr	r3, [pc, #16]	; (8005328 <HAL_RCC_ClockConfig+0x240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d005      	beq.n	8005330 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e086      	b.n	8005436 <HAL_RCC_ClockConfig+0x34e>
 8005328:	52002000 	.word	0x52002000
 800532c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d010      	beq.n	800535e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005348:	429a      	cmp	r2, r3
 800534a:	d208      	bcs.n	800535e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800534c:	4b3c      	ldr	r3, [pc, #240]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	4939      	ldr	r1, [pc, #228]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 800535a:	4313      	orrs	r3, r2
 800535c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d010      	beq.n	800538c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	4b34      	ldr	r3, [pc, #208]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005376:	429a      	cmp	r2, r3
 8005378:	d208      	bcs.n	800538c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800537a:	4b31      	ldr	r3, [pc, #196]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	492e      	ldr	r1, [pc, #184]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 8005388:	4313      	orrs	r3, r2
 800538a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	4b28      	ldr	r3, [pc, #160]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d208      	bcs.n	80053ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053a8:	4b25      	ldr	r3, [pc, #148]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	4922      	ldr	r1, [pc, #136]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d208      	bcs.n	80053e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053d6:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	4917      	ldr	r1, [pc, #92]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053e8:	f000 f834 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b14      	ldr	r3, [pc, #80]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	4912      	ldr	r1, [pc, #72]	; (8005444 <HAL_RCC_ClockConfig+0x35c>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
 8005404:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005406:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <HAL_RCC_ClockConfig+0x358>)
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <HAL_RCC_ClockConfig+0x35c>)
 8005410:	5cd3      	ldrb	r3, [r2, r3]
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
 800541c:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <HAL_RCC_ClockConfig+0x360>)
 800541e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005420:	4a0a      	ldr	r2, [pc, #40]	; (800544c <HAL_RCC_ClockConfig+0x364>)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005426:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <HAL_RCC_ClockConfig+0x368>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f7fb fbb8 	bl	8000ba0 <HAL_InitTick>
 8005430:	4603      	mov	r3, r0
 8005432:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	58024400 	.word	0x58024400
 8005444:	08009078 	.word	0x08009078
 8005448:	24000004 	.word	0x24000004
 800544c:	24000000 	.word	0x24000000
 8005450:	24000008 	.word	0x24000008

08005454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800545a:	4bb3      	ldr	r3, [pc, #716]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005462:	2b18      	cmp	r3, #24
 8005464:	f200 8155 	bhi.w	8005712 <HAL_RCC_GetSysClockFreq+0x2be>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <HAL_RCC_GetSysClockFreq+0x1c>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	080054d5 	.word	0x080054d5
 8005474:	08005713 	.word	0x08005713
 8005478:	08005713 	.word	0x08005713
 800547c:	08005713 	.word	0x08005713
 8005480:	08005713 	.word	0x08005713
 8005484:	08005713 	.word	0x08005713
 8005488:	08005713 	.word	0x08005713
 800548c:	08005713 	.word	0x08005713
 8005490:	080054fb 	.word	0x080054fb
 8005494:	08005713 	.word	0x08005713
 8005498:	08005713 	.word	0x08005713
 800549c:	08005713 	.word	0x08005713
 80054a0:	08005713 	.word	0x08005713
 80054a4:	08005713 	.word	0x08005713
 80054a8:	08005713 	.word	0x08005713
 80054ac:	08005713 	.word	0x08005713
 80054b0:	08005501 	.word	0x08005501
 80054b4:	08005713 	.word	0x08005713
 80054b8:	08005713 	.word	0x08005713
 80054bc:	08005713 	.word	0x08005713
 80054c0:	08005713 	.word	0x08005713
 80054c4:	08005713 	.word	0x08005713
 80054c8:	08005713 	.word	0x08005713
 80054cc:	08005713 	.word	0x08005713
 80054d0:	08005507 	.word	0x08005507
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054d4:	4b94      	ldr	r3, [pc, #592]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054e0:	4b91      	ldr	r3, [pc, #580]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	08db      	lsrs	r3, r3, #3
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	4a90      	ldr	r2, [pc, #576]	; (800572c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
 80054f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80054f2:	e111      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054f4:	4b8d      	ldr	r3, [pc, #564]	; (800572c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054f6:	61bb      	str	r3, [r7, #24]
      break;
 80054f8:	e10e      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80054fa:	4b8d      	ldr	r3, [pc, #564]	; (8005730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054fc:	61bb      	str	r3, [r7, #24]
      break;
 80054fe:	e10b      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005500:	4b8c      	ldr	r3, [pc, #560]	; (8005734 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005502:	61bb      	str	r3, [r7, #24]
      break;
 8005504:	e108      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005506:	4b88      	ldr	r3, [pc, #544]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005510:	4b85      	ldr	r3, [pc, #532]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800551a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800551c:	4b82      	ldr	r3, [pc, #520]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005526:	4b80      	ldr	r3, [pc, #512]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	08db      	lsrs	r3, r3, #3
 800552c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80e1 	beq.w	800570c <HAL_RCC_GetSysClockFreq+0x2b8>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b02      	cmp	r3, #2
 800554e:	f000 8083 	beq.w	8005658 <HAL_RCC_GetSysClockFreq+0x204>
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b02      	cmp	r3, #2
 8005556:	f200 80a1 	bhi.w	800569c <HAL_RCC_GetSysClockFreq+0x248>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_RCC_GetSysClockFreq+0x114>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d056      	beq.n	8005614 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005566:	e099      	b.n	800569c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005568:	4b6f      	ldr	r3, [pc, #444]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d02d      	beq.n	80055d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005574:	4b6c      	ldr	r3, [pc, #432]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	4a6b      	ldr	r2, [pc, #428]	; (800572c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
 8005584:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559e:	4b62      	ldr	r3, [pc, #392]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80055b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80055ce:	e087      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800573c <HAL_RCC_GetSysClockFreq+0x2e8>
 80055de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e2:	4b51      	ldr	r3, [pc, #324]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005612:	e065      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005740 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005626:	4b40      	ldr	r3, [pc, #256]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005636:	ed97 6a02 	vldr	s12, [r7, #8]
 800563a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005738 <HAL_RCC_GetSysClockFreq+0x2e4>
 800563e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005656:	e043      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005744 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566a:	4b2f      	ldr	r3, [pc, #188]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567a:	ed97 6a02 	vldr	s12, [r7, #8]
 800567e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005738 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800568e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005696:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800569a:	e021      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005740 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80056e0:	4b11      	ldr	r3, [pc, #68]	; (8005728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	0a5b      	lsrs	r3, r3, #9
 80056e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ea:	3301      	adds	r3, #1
 80056ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005704:	ee17 3a90 	vmov	r3, s15
 8005708:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800570a:	e005      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	61bb      	str	r3, [r7, #24]
      break;
 8005710:	e002      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005714:	61bb      	str	r3, [r7, #24]
      break;
 8005716:	bf00      	nop
  }

  return sysclockfreq;
 8005718:	69bb      	ldr	r3, [r7, #24]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3724      	adds	r7, #36	; 0x24
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	58024400 	.word	0x58024400
 800572c:	03d09000 	.word	0x03d09000
 8005730:	003d0900 	.word	0x003d0900
 8005734:	017d7840 	.word	0x017d7840
 8005738:	46000000 	.word	0x46000000
 800573c:	4c742400 	.word	0x4c742400
 8005740:	4a742400 	.word	0x4a742400
 8005744:	4bbebc20 	.word	0x4bbebc20

08005748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800574e:	f7ff fe81 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8005752:	4602      	mov	r2, r0
 8005754:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_RCC_GetHCLKFreq+0x50>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	490f      	ldr	r1, [pc, #60]	; (800579c <HAL_RCC_GetHCLKFreq+0x54>)
 8005760:	5ccb      	ldrb	r3, [r1, r3]
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	fa22 f303 	lsr.w	r3, r2, r3
 800576a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <HAL_RCC_GetHCLKFreq+0x50>)
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_GetHCLKFreq+0x54>)
 8005776:	5cd3      	ldrb	r3, [r2, r3]
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	fa22 f303 	lsr.w	r3, r2, r3
 8005782:	4a07      	ldr	r2, [pc, #28]	; (80057a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005784:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005786:	4a07      	ldr	r2, [pc, #28]	; (80057a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800578c:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	58024400 	.word	0x58024400
 800579c:	08009078 	.word	0x08009078
 80057a0:	24000004 	.word	0x24000004
 80057a4:	24000000 	.word	0x24000000

080057a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057ac:	f7ff ffcc 	bl	8005748 <HAL_RCC_GetHCLKFreq>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4904      	ldr	r1, [pc, #16]	; (80057d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	58024400 	.word	0x58024400
 80057d0:	08009078 	.word	0x08009078

080057d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d8:	b0ca      	sub	sp, #296	; 0x128
 80057da:	af00      	add	r7, sp, #0
 80057dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057e6:	2300      	movs	r3, #0
 80057e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80057f8:	2500      	movs	r5, #0
 80057fa:	ea54 0305 	orrs.w	r3, r4, r5
 80057fe:	d049      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005806:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800580a:	d02f      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800580c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005810:	d828      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005816:	d01a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800581c:	d822      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005826:	d007      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005828:	e01c      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582a:	4bb8      	ldr	r3, [pc, #736]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	4ab7      	ldr	r2, [pc, #732]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005836:	e01a      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583c:	3308      	adds	r3, #8
 800583e:	2102      	movs	r1, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f002 fb61 	bl	8007f08 <RCCEx_PLL2_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800584c:	e00f      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005852:	3328      	adds	r3, #40	; 0x28
 8005854:	2102      	movs	r1, #2
 8005856:	4618      	mov	r0, r3
 8005858:	f002 fc08 	bl	800806c <RCCEx_PLL3_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005862:	e004      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800586a:	e000      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800586c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005876:	4ba5      	ldr	r3, [pc, #660]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005884:	4aa1      	ldr	r2, [pc, #644]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005886:	430b      	orrs	r3, r1
 8005888:	6513      	str	r3, [r2, #80]	; 0x50
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005890:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80058a0:	f04f 0900 	mov.w	r9, #0
 80058a4:	ea58 0309 	orrs.w	r3, r8, r9
 80058a8:	d047      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d82a      	bhi.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058d1 	.word	0x080058d1
 80058c0:	080058df 	.word	0x080058df
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	08005913 	.word	0x08005913
 80058cc:	08005913 	.word	0x08005913
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d0:	4b8e      	ldr	r3, [pc, #568]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4a8d      	ldr	r2, [pc, #564]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058dc:	e01a      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e2:	3308      	adds	r3, #8
 80058e4:	2100      	movs	r1, #0
 80058e6:	4618      	mov	r0, r3
 80058e8:	f002 fb0e 	bl	8007f08 <RCCEx_PLL2_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058f2:	e00f      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f8:	3328      	adds	r3, #40	; 0x28
 80058fa:	2100      	movs	r1, #0
 80058fc:	4618      	mov	r0, r3
 80058fe:	f002 fbb5 	bl	800806c <RCCEx_PLL3_Config>
 8005902:	4603      	mov	r3, r0
 8005904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005908:	e004      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005910:	e000      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800591c:	4b7b      	ldr	r3, [pc, #492]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	f023 0107 	bic.w	r1, r3, #7
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	4a78      	ldr	r2, [pc, #480]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592c:	430b      	orrs	r3, r1
 800592e:	6513      	str	r3, [r2, #80]	; 0x50
 8005930:	e003      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005946:	f04f 0b00 	mov.w	fp, #0
 800594a:	ea5a 030b 	orrs.w	r3, sl, fp
 800594e:	d04c      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595a:	d030      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800595c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005960:	d829      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005962:	2bc0      	cmp	r3, #192	; 0xc0
 8005964:	d02d      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005966:	2bc0      	cmp	r3, #192	; 0xc0
 8005968:	d825      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d018      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d821      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005976:	2b40      	cmp	r3, #64	; 0x40
 8005978:	d007      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800597a:	e01c      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800597c:	4b63      	ldr	r3, [pc, #396]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a62      	ldr	r2, [pc, #392]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005988:	e01c      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598e:	3308      	adds	r3, #8
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f002 fab8 	bl	8007f08 <RCCEx_PLL2_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800599e:	e011      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a4:	3328      	adds	r3, #40	; 0x28
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f002 fb5f 	bl	800806c <RCCEx_PLL3_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059b4:	e006      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059bc:	e002      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80059c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80059cc:	4b4f      	ldr	r3, [pc, #316]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059da:	4a4c      	ldr	r2, [pc, #304]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059dc:	430b      	orrs	r3, r1
 80059de:	6513      	str	r3, [r2, #80]	; 0x50
 80059e0:	e003      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80059f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d053      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a16:	d035      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a1c:	d82e      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a22:	d031      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a28:	d828      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a2e:	d01a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a34:	d822      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a3e:	d007      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005a40:	e01c      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a42:	4b32      	ldr	r3, [pc, #200]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	4a31      	ldr	r2, [pc, #196]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a4e:	e01c      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a54:	3308      	adds	r3, #8
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f002 fa55 	bl	8007f08 <RCCEx_PLL2_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a64:	e011      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6a:	3328      	adds	r3, #40	; 0x28
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 fafc 	bl	800806c <RCCEx_PLL3_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e006      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a82:	e002      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a84:	bf00      	nop
 8005a86:	e000      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10b      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a92:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a96:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005aa2:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8005aa8:	e003      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005abe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ac8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005acc:	460b      	mov	r3, r1
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	d056      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ade:	d038      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005ae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae4:	d831      	bhi.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ae6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aea:	d034      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005aec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005af0:	d82b      	bhi.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005af6:	d01d      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005afc:	d825      	bhi.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d006      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005b02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b08:	e01f      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b0a:	bf00      	nop
 8005b0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b10:	4ba2      	ldr	r3, [pc, #648]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	4aa1      	ldr	r2, [pc, #644]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b1c:	e01c      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b22:	3308      	adds	r3, #8
 8005b24:	2100      	movs	r1, #0
 8005b26:	4618      	mov	r0, r3
 8005b28:	f002 f9ee 	bl	8007f08 <RCCEx_PLL2_Config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b32:	e011      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b38:	3328      	adds	r3, #40	; 0x28
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f002 fa95 	bl	800806c <RCCEx_PLL3_Config>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b48:	e006      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b50:	e002      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b52:	bf00      	nop
 8005b54:	e000      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10b      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b60:	4b8e      	ldr	r3, [pc, #568]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b70:	4a8a      	ldr	r2, [pc, #552]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b72:	430b      	orrs	r3, r1
 8005b74:	6593      	str	r3, [r2, #88]	; 0x58
 8005b76:	e003      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	d03a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba6:	2b30      	cmp	r3, #48	; 0x30
 8005ba8:	d01f      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005baa:	2b30      	cmp	r3, #48	; 0x30
 8005bac:	d819      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d00c      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d815      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d019      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d111      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbe:	4b77      	ldr	r3, [pc, #476]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	4a76      	ldr	r2, [pc, #472]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005bca:	e011      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f002 f997 	bl	8007f08 <RCCEx_PLL2_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bf8:	4b68      	ldr	r3, [pc, #416]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c06:	4a65      	ldr	r2, [pc, #404]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c0c:	e003      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005c22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c26:	2300      	movs	r3, #0
 8005c28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d051      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c40:	d035      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c46:	d82e      	bhi.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c4c:	d031      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c52:	d828      	bhi.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c58:	d01a      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5e:	d822      	bhi.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c68:	d007      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005c6a:	e01c      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c6c:	4b4b      	ldr	r3, [pc, #300]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	4a4a      	ldr	r2, [pc, #296]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c78:	e01c      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7e:	3308      	adds	r3, #8
 8005c80:	2100      	movs	r1, #0
 8005c82:	4618      	mov	r0, r3
 8005c84:	f002 f940 	bl	8007f08 <RCCEx_PLL2_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c8e:	e011      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c94:	3328      	adds	r3, #40	; 0x28
 8005c96:	2100      	movs	r1, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f002 f9e7 	bl	800806c <RCCEx_PLL3_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ca4:	e006      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005cbc:	4b37      	ldr	r3, [pc, #220]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cca:	4a34      	ldr	r2, [pc, #208]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6513      	str	r3, [r2, #80]	; 0x50
 8005cd0:	e003      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cf0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d056      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d04:	d033      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d0a:	d82c      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d10:	d02f      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d16:	d826      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d1c:	d02b      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d22:	d820      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d28:	d012      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d2e:	d81a      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d022      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d38:	d115      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3e:	3308      	adds	r3, #8
 8005d40:	2101      	movs	r1, #1
 8005d42:	4618      	mov	r0, r3
 8005d44:	f002 f8e0 	bl	8007f08 <RCCEx_PLL2_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d4e:	e015      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d54:	3328      	adds	r3, #40	; 0x28
 8005d56:	2101      	movs	r1, #1
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f002 f987 	bl	800806c <RCCEx_PLL3_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d64:	e00a      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d6c:	e006      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e004      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10d      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d88:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d92:	4a02      	ldr	r2, [pc, #8]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d94:	430b      	orrs	r3, r1
 8005d96:	6513      	str	r3, [r2, #80]	; 0x50
 8005d98:	e006      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d9a:	bf00      	nop
 8005d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005db8:	2300      	movs	r3, #0
 8005dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dbe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	d055      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dd4:	d033      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dda:	d82c      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de0:	d02f      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d826      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005de8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dec:	d02b      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005dee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005df2:	d820      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df8:	d012      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfe:	d81a      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d022      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e08:	d115      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0e:	3308      	adds	r3, #8
 8005e10:	2101      	movs	r1, #1
 8005e12:	4618      	mov	r0, r3
 8005e14:	f002 f878 	bl	8007f08 <RCCEx_PLL2_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e1e:	e015      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e24:	3328      	adds	r3, #40	; 0x28
 8005e26:	2101      	movs	r1, #1
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f002 f91f 	bl	800806c <RCCEx_PLL3_Config>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e34:	e00a      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e3c:	e006      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e3e:	bf00      	nop
 8005e40:	e004      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e54:	4ba3      	ldr	r3, [pc, #652]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e64:	4a9f      	ldr	r2, [pc, #636]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e66:	430b      	orrs	r3, r1
 8005e68:	6593      	str	r3, [r2, #88]	; 0x58
 8005e6a:	e003      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e84:	2300      	movs	r3, #0
 8005e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4313      	orrs	r3, r2
 8005e92:	d037      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e9e:	d00e      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ea4:	d816      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d018      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eae:	d111      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb0:	4b8c      	ldr	r3, [pc, #560]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	4a8b      	ldr	r2, [pc, #556]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ebc:	e00f      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f002 f81e 	bl	8007f08 <RCCEx_PLL2_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ed2:	e004      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005eda:	e000      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ee6:	4b7f      	ldr	r3, [pc, #508]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	4a7b      	ldr	r2, [pc, #492]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	6513      	str	r3, [r2, #80]	; 0x50
 8005efa:	e003      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4313      	orrs	r3, r2
 8005f22:	d039      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d81c      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f71 	.word	0x08005f71
 8005f38:	08005f45 	.word	0x08005f45
 8005f3c:	08005f53 	.word	0x08005f53
 8005f40:	08005f71 	.word	0x08005f71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f44:	4b67      	ldr	r3, [pc, #412]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	4a66      	ldr	r2, [pc, #408]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f50:	e00f      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f56:	3308      	adds	r3, #8
 8005f58:	2102      	movs	r1, #2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 ffd4 	bl	8007f08 <RCCEx_PLL2_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f66:	e004      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f6e:	e000      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f7a:	4b5a      	ldr	r3, [pc, #360]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7e:	f023 0103 	bic.w	r1, r3, #3
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f88:	4a56      	ldr	r2, [pc, #344]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f8e:	e003      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f000 809f 	beq.w	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fba:	4b4b      	ldr	r3, [pc, #300]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a4a      	ldr	r2, [pc, #296]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fc6:	f7fa fe35 	bl	8000c34 <HAL_GetTick>
 8005fca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fce:	e00b      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd0:	f7fa fe30 	bl	8000c34 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b64      	cmp	r3, #100	; 0x64
 8005fde:	d903      	bls.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fe6:	e005      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fe8:	4b3f      	ldr	r3, [pc, #252]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0ed      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d179      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ffc:	4b39      	ldr	r3, [pc, #228]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006008:	4053      	eors	r3, r2
 800600a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600e:	2b00      	cmp	r3, #0
 8006010:	d015      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006012:	4b34      	ldr	r3, [pc, #208]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800601a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800601e:	4b31      	ldr	r3, [pc, #196]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	4a30      	ldr	r2, [pc, #192]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006028:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800602a:	4b2e      	ldr	r3, [pc, #184]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800602c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602e:	4a2d      	ldr	r2, [pc, #180]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006034:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006036:	4a2b      	ldr	r2, [pc, #172]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006038:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800603c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604a:	d118      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604c:	f7fa fdf2 	bl	8000c34 <HAL_GetTick>
 8006050:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006054:	e00d      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006056:	f7fa fded 	bl	8000c34 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006060:	1ad2      	subs	r2, r2, r3
 8006062:	f241 3388 	movw	r3, #5000	; 0x1388
 8006066:	429a      	cmp	r2, r3
 8006068:	d903      	bls.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006070:	e005      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006072:	4b1c      	ldr	r3, [pc, #112]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0eb      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800607e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006082:	2b00      	cmp	r3, #0
 8006084:	d129      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800608e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006096:	d10e      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006098:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060a8:	091a      	lsrs	r2, r3, #4
 80060aa:	4b10      	ldr	r3, [pc, #64]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	4a0d      	ldr	r2, [pc, #52]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b0:	430b      	orrs	r3, r1
 80060b2:	6113      	str	r3, [r2, #16]
 80060b4:	e005      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060c0:	6113      	str	r3, [r2, #16]
 80060c2:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d2:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6713      	str	r3, [r2, #112]	; 0x70
 80060d8:	e00e      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80060e2:	e009      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80060e4:	58024400 	.word	0x58024400
 80060e8:	58024800 	.word	0x58024800
 80060ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f002 0301 	and.w	r3, r2, #1
 8006104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006108:	2300      	movs	r3, #0
 800610a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800610e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006112:	460b      	mov	r3, r1
 8006114:	4313      	orrs	r3, r2
 8006116:	f000 8089 	beq.w	800622c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006120:	2b28      	cmp	r3, #40	; 0x28
 8006122:	d86b      	bhi.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006124:	a201      	add	r2, pc, #4	; (adr r2, 800612c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	08006205 	.word	0x08006205
 8006130:	080061fd 	.word	0x080061fd
 8006134:	080061fd 	.word	0x080061fd
 8006138:	080061fd 	.word	0x080061fd
 800613c:	080061fd 	.word	0x080061fd
 8006140:	080061fd 	.word	0x080061fd
 8006144:	080061fd 	.word	0x080061fd
 8006148:	080061fd 	.word	0x080061fd
 800614c:	080061d1 	.word	0x080061d1
 8006150:	080061fd 	.word	0x080061fd
 8006154:	080061fd 	.word	0x080061fd
 8006158:	080061fd 	.word	0x080061fd
 800615c:	080061fd 	.word	0x080061fd
 8006160:	080061fd 	.word	0x080061fd
 8006164:	080061fd 	.word	0x080061fd
 8006168:	080061fd 	.word	0x080061fd
 800616c:	080061e7 	.word	0x080061e7
 8006170:	080061fd 	.word	0x080061fd
 8006174:	080061fd 	.word	0x080061fd
 8006178:	080061fd 	.word	0x080061fd
 800617c:	080061fd 	.word	0x080061fd
 8006180:	080061fd 	.word	0x080061fd
 8006184:	080061fd 	.word	0x080061fd
 8006188:	080061fd 	.word	0x080061fd
 800618c:	08006205 	.word	0x08006205
 8006190:	080061fd 	.word	0x080061fd
 8006194:	080061fd 	.word	0x080061fd
 8006198:	080061fd 	.word	0x080061fd
 800619c:	080061fd 	.word	0x080061fd
 80061a0:	080061fd 	.word	0x080061fd
 80061a4:	080061fd 	.word	0x080061fd
 80061a8:	080061fd 	.word	0x080061fd
 80061ac:	08006205 	.word	0x08006205
 80061b0:	080061fd 	.word	0x080061fd
 80061b4:	080061fd 	.word	0x080061fd
 80061b8:	080061fd 	.word	0x080061fd
 80061bc:	080061fd 	.word	0x080061fd
 80061c0:	080061fd 	.word	0x080061fd
 80061c4:	080061fd 	.word	0x080061fd
 80061c8:	080061fd 	.word	0x080061fd
 80061cc:	08006205 	.word	0x08006205
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d4:	3308      	adds	r3, #8
 80061d6:	2101      	movs	r1, #1
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 fe95 	bl	8007f08 <RCCEx_PLL2_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061e4:	e00f      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ea:	3328      	adds	r3, #40	; 0x28
 80061ec:	2101      	movs	r1, #1
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 ff3c 	bl	800806c <RCCEx_PLL3_Config>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061fa:	e004      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006202:	e000      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800620e:	4bbf      	ldr	r3, [pc, #764]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621c:	4abb      	ldr	r2, [pc, #748]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800621e:	430b      	orrs	r3, r1
 8006220:	6553      	str	r3, [r2, #84]	; 0x54
 8006222:	e003      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f002 0302 	and.w	r3, r2, #2
 8006238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800623c:	2300      	movs	r3, #0
 800623e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006242:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006246:	460b      	mov	r3, r1
 8006248:	4313      	orrs	r3, r2
 800624a:	d041      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006252:	2b05      	cmp	r3, #5
 8006254:	d824      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006256:	a201      	add	r2, pc, #4	; (adr r2, 800625c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	080062a9 	.word	0x080062a9
 8006260:	08006275 	.word	0x08006275
 8006264:	0800628b 	.word	0x0800628b
 8006268:	080062a9 	.word	0x080062a9
 800626c:	080062a9 	.word	0x080062a9
 8006270:	080062a9 	.word	0x080062a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006278:	3308      	adds	r3, #8
 800627a:	2101      	movs	r1, #1
 800627c:	4618      	mov	r0, r3
 800627e:	f001 fe43 	bl	8007f08 <RCCEx_PLL2_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006288:	e00f      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628e:	3328      	adds	r3, #40	; 0x28
 8006290:	2101      	movs	r1, #1
 8006292:	4618      	mov	r0, r3
 8006294:	f001 feea 	bl	800806c <RCCEx_PLL3_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800629e:	e004      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062a6:	e000      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80062a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80062b2:	4b96      	ldr	r3, [pc, #600]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b6:	f023 0107 	bic.w	r1, r3, #7
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062c0:	4a92      	ldr	r2, [pc, #584]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062c2:	430b      	orrs	r3, r1
 80062c4:	6553      	str	r3, [r2, #84]	; 0x54
 80062c6:	e003      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f002 0304 	and.w	r3, r2, #4
 80062dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062e0:	2300      	movs	r3, #0
 80062e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4313      	orrs	r3, r2
 80062ee:	d044      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	d825      	bhi.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80062fc:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006351 	.word	0x08006351
 8006308:	0800631d 	.word	0x0800631d
 800630c:	08006333 	.word	0x08006333
 8006310:	08006351 	.word	0x08006351
 8006314:	08006351 	.word	0x08006351
 8006318:	08006351 	.word	0x08006351
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800631c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006320:	3308      	adds	r3, #8
 8006322:	2101      	movs	r1, #1
 8006324:	4618      	mov	r0, r3
 8006326:	f001 fdef 	bl	8007f08 <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006330:	e00f      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006336:	3328      	adds	r3, #40	; 0x28
 8006338:	2101      	movs	r1, #1
 800633a:	4618      	mov	r0, r3
 800633c:	f001 fe96 	bl	800806c <RCCEx_PLL3_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006346:	e004      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800634e:	e000      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800635a:	4b6c      	ldr	r3, [pc, #432]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635e:	f023 0107 	bic.w	r1, r3, #7
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800636a:	4a68      	ldr	r2, [pc, #416]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800636c:	430b      	orrs	r3, r1
 800636e:	6593      	str	r3, [r2, #88]	; 0x58
 8006370:	e003      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f002 0320 	and.w	r3, r2, #32
 8006386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800638a:	2300      	movs	r3, #0
 800638c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006394:	460b      	mov	r3, r1
 8006396:	4313      	orrs	r3, r2
 8006398:	d055      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063a6:	d033      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80063a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ac:	d82c      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b2:	d02f      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80063b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b8:	d826      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063be:	d02b      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80063c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063c4:	d820      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ca:	d012      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80063cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d0:	d81a      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d022      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80063d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063da:	d115      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e0:	3308      	adds	r3, #8
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fd8f 	bl	8007f08 <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063f0:	e015      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f6:	3328      	adds	r3, #40	; 0x28
 80063f8:	2102      	movs	r1, #2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fe36 	bl	800806c <RCCEx_PLL3_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006406:	e00a      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800640e:	e006      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006410:	bf00      	nop
 8006412:	e004      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006414:	bf00      	nop
 8006416:	e002      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006418:	bf00      	nop
 800641a:	e000      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800641c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006426:	4b39      	ldr	r3, [pc, #228]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	4a35      	ldr	r2, [pc, #212]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006438:	430b      	orrs	r3, r1
 800643a:	6553      	str	r3, [r2, #84]	; 0x54
 800643c:	e003      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006456:	2300      	movs	r3, #0
 8006458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800645c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006460:	460b      	mov	r3, r1
 8006462:	4313      	orrs	r3, r2
 8006464:	d058      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800646e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006472:	d033      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006474:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006478:	d82c      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647e:	d02f      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006484:	d826      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800648a:	d02b      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800648c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006490:	d820      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006496:	d012      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649c:	d81a      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d022      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80064a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a6:	d115      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ac:	3308      	adds	r3, #8
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fd29 	bl	8007f08 <RCCEx_PLL2_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064bc:	e015      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c2:	3328      	adds	r3, #40	; 0x28
 80064c4:	2102      	movs	r1, #2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 fdd0 	bl	800806c <RCCEx_PLL3_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064d2:	e00a      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064da:	e006      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064dc:	bf00      	nop
 80064de:	e004      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064e0:	bf00      	nop
 80064e2:	e002      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064e4:	bf00      	nop
 80064e6:	e000      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10e      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064f2:	4b06      	ldr	r3, [pc, #24]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006502:	4a02      	ldr	r2, [pc, #8]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6593      	str	r3, [r2, #88]	; 0x58
 8006508:	e006      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800650a:	bf00      	nop
 800650c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006514:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800652e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006532:	460b      	mov	r3, r1
 8006534:	4313      	orrs	r3, r2
 8006536:	d055      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006540:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006544:	d033      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006546:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800654a:	d82c      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800654c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006550:	d02f      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006556:	d826      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006558:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800655c:	d02b      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800655e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006562:	d820      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006568:	d012      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800656a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800656e:	d81a      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d022      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006578:	d115      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657e:	3308      	adds	r3, #8
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f001 fcc0 	bl	8007f08 <RCCEx_PLL2_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800658e:	e015      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006594:	3328      	adds	r3, #40	; 0x28
 8006596:	2102      	movs	r1, #2
 8006598:	4618      	mov	r0, r3
 800659a:	f001 fd67 	bl	800806c <RCCEx_PLL3_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065a4:	e00a      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065ac:	e006      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065ae:	bf00      	nop
 80065b0:	e004      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065b2:	bf00      	nop
 80065b4:	e002      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065b6:	bf00      	nop
 80065b8:	e000      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80065c4:	4ba1      	ldr	r3, [pc, #644]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065d4:	4a9d      	ldr	r2, [pc, #628]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065d6:	430b      	orrs	r3, r1
 80065d8:	6593      	str	r3, [r2, #88]	; 0x58
 80065da:	e003      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f002 0308 	and.w	r3, r2, #8
 80065f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065f4:	2300      	movs	r3, #0
 80065f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80065fe:	460b      	mov	r3, r1
 8006600:	4313      	orrs	r3, r2
 8006602:	d01e      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006610:	d10c      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006616:	3328      	adds	r3, #40	; 0x28
 8006618:	2102      	movs	r1, #2
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fd26 	bl	800806c <RCCEx_PLL3_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800662c:	4b87      	ldr	r3, [pc, #540]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800662e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006630:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663c:	4a83      	ldr	r2, [pc, #524]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800663e:	430b      	orrs	r3, r1
 8006640:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f002 0310 	and.w	r3, r2, #16
 800664e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006652:	2300      	movs	r3, #0
 8006654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006658:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800665c:	460b      	mov	r3, r1
 800665e:	4313      	orrs	r3, r2
 8006660:	d01e      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	d10c      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006674:	3328      	adds	r3, #40	; 0x28
 8006676:	2102      	movs	r1, #2
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fcf7 	bl	800806c <RCCEx_PLL3_Config>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800668a:	4b70      	ldr	r3, [pc, #448]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800668c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800669a:	4a6c      	ldr	r2, [pc, #432]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800669c:	430b      	orrs	r3, r1
 800669e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80066ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066b0:	2300      	movs	r3, #0
 80066b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80066ba:	460b      	mov	r3, r1
 80066bc:	4313      	orrs	r3, r2
 80066be:	d03e      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066cc:	d022      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80066ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d2:	d81b      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066dc:	d00b      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80066de:	e015      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e4:	3308      	adds	r3, #8
 80066e6:	2100      	movs	r1, #0
 80066e8:	4618      	mov	r0, r3
 80066ea:	f001 fc0d 	bl	8007f08 <RCCEx_PLL2_Config>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066f4:	e00f      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fa:	3328      	adds	r3, #40	; 0x28
 80066fc:	2102      	movs	r1, #2
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fcb4 	bl	800806c <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800670a:	e004      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006712:	e000      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10b      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800671e:	4b4b      	ldr	r3, [pc, #300]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006722:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800672e:	4a47      	ldr	r2, [pc, #284]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006730:	430b      	orrs	r3, r1
 8006732:	6593      	str	r3, [r2, #88]	; 0x58
 8006734:	e003      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800673a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800674a:	67bb      	str	r3, [r7, #120]	; 0x78
 800674c:	2300      	movs	r3, #0
 800674e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006750:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006754:	460b      	mov	r3, r1
 8006756:	4313      	orrs	r3, r2
 8006758:	d03b      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006766:	d01f      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800676c:	d818      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800676e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006772:	d003      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006778:	d007      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800677a:	e011      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677c:	4b33      	ldr	r3, [pc, #204]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	4a32      	ldr	r2, [pc, #200]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006788:	e00f      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678e:	3328      	adds	r3, #40	; 0x28
 8006790:	2101      	movs	r1, #1
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fc6a 	bl	800806c <RCCEx_PLL3_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800679e:	e004      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067a6:	e000      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80067a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10b      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067b2:	4b26      	ldr	r3, [pc, #152]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	4a22      	ldr	r2, [pc, #136]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6553      	str	r3, [r2, #84]	; 0x54
 80067c8:	e003      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80067de:	673b      	str	r3, [r7, #112]	; 0x70
 80067e0:	2300      	movs	r3, #0
 80067e2:	677b      	str	r3, [r7, #116]	; 0x74
 80067e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80067e8:	460b      	mov	r3, r1
 80067ea:	4313      	orrs	r3, r2
 80067ec:	d034      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80067ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fc:	d007      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80067fe:	e011      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006800:	4b12      	ldr	r3, [pc, #72]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	4a11      	ldr	r2, [pc, #68]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800680c:	e00e      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006812:	3308      	adds	r3, #8
 8006814:	2102      	movs	r1, #2
 8006816:	4618      	mov	r0, r3
 8006818:	f001 fb76 	bl	8007f08 <RCCEx_PLL2_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006822:	e003      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800682a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10d      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006842:	4a02      	ldr	r2, [pc, #8]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006844:	430b      	orrs	r3, r1
 8006846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006848:	e006      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800684a:	bf00      	nop
 800684c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006854:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006864:	66bb      	str	r3, [r7, #104]	; 0x68
 8006866:	2300      	movs	r3, #0
 8006868:	66fb      	str	r3, [r7, #108]	; 0x6c
 800686a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800686e:	460b      	mov	r3, r1
 8006870:	4313      	orrs	r3, r2
 8006872:	d00c      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006878:	3328      	adds	r3, #40	; 0x28
 800687a:	2102      	movs	r1, #2
 800687c:	4618      	mov	r0, r3
 800687e:	f001 fbf5 	bl	800806c <RCCEx_PLL3_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800688e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800689a:	663b      	str	r3, [r7, #96]	; 0x60
 800689c:	2300      	movs	r3, #0
 800689e:	667b      	str	r3, [r7, #100]	; 0x64
 80068a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80068a4:	460b      	mov	r3, r1
 80068a6:	4313      	orrs	r3, r2
 80068a8:	d038      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b6:	d018      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80068b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068bc:	d811      	bhi.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80068be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c2:	d014      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80068c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c8:	d80b      	bhi.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d011      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d2:	d106      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d4:	4bc3      	ldr	r3, [pc, #780]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	4ac2      	ldr	r2, [pc, #776]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80068e0:	e008      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068e8:	e004      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068ea:	bf00      	nop
 80068ec:	e002      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068ee:	bf00      	nop
 80068f0:	e000      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068fc:	4bb9      	ldr	r3, [pc, #740]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006900:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800690c:	4ab5      	ldr	r2, [pc, #724]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800690e:	430b      	orrs	r3, r1
 8006910:	6553      	str	r3, [r2, #84]	; 0x54
 8006912:	e003      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006918:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800691c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006928:	65bb      	str	r3, [r7, #88]	; 0x58
 800692a:	2300      	movs	r3, #0
 800692c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800692e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006932:	460b      	mov	r3, r1
 8006934:	4313      	orrs	r3, r2
 8006936:	d009      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006938:	4baa      	ldr	r3, [pc, #680]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006946:	4aa7      	ldr	r2, [pc, #668]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006948:	430b      	orrs	r3, r1
 800694a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006958:	653b      	str	r3, [r7, #80]	; 0x50
 800695a:	2300      	movs	r3, #0
 800695c:	657b      	str	r3, [r7, #84]	; 0x54
 800695e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006962:	460b      	mov	r3, r1
 8006964:	4313      	orrs	r3, r2
 8006966:	d00a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006968:	4b9e      	ldr	r3, [pc, #632]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006974:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006978:	4a9a      	ldr	r2, [pc, #616]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800697a:	430b      	orrs	r3, r1
 800697c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800698a:	64bb      	str	r3, [r7, #72]	; 0x48
 800698c:	2300      	movs	r3, #0
 800698e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006990:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006994:	460b      	mov	r3, r1
 8006996:	4313      	orrs	r3, r2
 8006998:	d009      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800699a:	4b92      	ldr	r3, [pc, #584]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800699c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a8:	4a8e      	ldr	r2, [pc, #568]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069aa:	430b      	orrs	r3, r1
 80069ac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80069ba:	643b      	str	r3, [r7, #64]	; 0x40
 80069bc:	2300      	movs	r3, #0
 80069be:	647b      	str	r3, [r7, #68]	; 0x44
 80069c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80069c4:	460b      	mov	r3, r1
 80069c6:	4313      	orrs	r3, r2
 80069c8:	d00e      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069ca:	4b86      	ldr	r3, [pc, #536]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	4a85      	ldr	r2, [pc, #532]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069d4:	6113      	str	r3, [r2, #16]
 80069d6:	4b83      	ldr	r3, [pc, #524]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d8:	6919      	ldr	r1, [r3, #16]
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80069e2:	4a80      	ldr	r2, [pc, #512]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80069f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80069f6:	2300      	movs	r3, #0
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80069fe:	460b      	mov	r3, r1
 8006a00:	4313      	orrs	r3, r2
 8006a02:	d009      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a04:	4b77      	ldr	r3, [pc, #476]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a08:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	4a74      	ldr	r2, [pc, #464]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a14:	430b      	orrs	r3, r1
 8006a16:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006a24:	633b      	str	r3, [r7, #48]	; 0x30
 8006a26:	2300      	movs	r3, #0
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4313      	orrs	r3, r2
 8006a32:	d00a      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a34:	4b6b      	ldr	r3, [pc, #428]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a38:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a44:	4a67      	ldr	r2, [pc, #412]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a46:	430b      	orrs	r3, r1
 8006a48:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	2100      	movs	r1, #0
 8006a54:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006a60:	460b      	mov	r3, r1
 8006a62:	4313      	orrs	r3, r2
 8006a64:	d011      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 fa4a 	bl	8007f08 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	2100      	movs	r1, #0
 8006a94:	6239      	str	r1, [r7, #32]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	d011      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aaa:	3308      	adds	r3, #8
 8006aac:	2101      	movs	r1, #1
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 fa2a 	bl	8007f08 <RCCEx_PLL2_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ac6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	61b9      	str	r1, [r7, #24]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	d011      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aea:	3308      	adds	r3, #8
 8006aec:	2102      	movs	r1, #2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 fa0a 	bl	8007f08 <RCCEx_PLL2_Config>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	2100      	movs	r1, #0
 8006b14:	6139      	str	r1, [r7, #16]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b20:	460b      	mov	r3, r1
 8006b22:	4313      	orrs	r3, r2
 8006b24:	d011      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b2a:	3328      	adds	r3, #40	; 0x28
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 fa9c 	bl	800806c <RCCEx_PLL3_Config>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	2100      	movs	r1, #0
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b60:	460b      	mov	r3, r1
 8006b62:	4313      	orrs	r3, r2
 8006b64:	d011      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6a:	3328      	adds	r3, #40	; 0x28
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 fa7c 	bl	800806c <RCCEx_PLL3_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	2100      	movs	r1, #0
 8006b94:	6039      	str	r1, [r7, #0]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	d011      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006baa:	3328      	adds	r3, #40	; 0x28
 8006bac:	2102      	movs	r1, #2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fa5c 	bl	800806c <RCCEx_PLL3_Config>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006bca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e000      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006bde:	46bd      	mov	sp, r7
 8006be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006be4:	58024400 	.word	0x58024400

08006be8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b090      	sub	sp, #64	; 0x40
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	f040 8094 	bne.w	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006c00:	4b9e      	ldr	r3, [pc, #632]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	f200 8087 	bhi.w	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006c12:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c18:	08006c2d 	.word	0x08006c2d
 8006c1c:	08006c55 	.word	0x08006c55
 8006c20:	08006c7d 	.word	0x08006c7d
 8006c24:	08006d19 	.word	0x08006d19
 8006c28:	08006ca5 	.word	0x08006ca5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c2c:	4b93      	ldr	r3, [pc, #588]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c38:	d108      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 f810 	bl	8007c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c48:	f000 bd45 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c50:	f000 bd41 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c54:	4b89      	ldr	r3, [pc, #548]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c60:	d108      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c62:	f107 0318 	add.w	r3, r7, #24
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fd54 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c70:	f000 bd31 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c78:	f000 bd2d 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c7c:	4b7f      	ldr	r3, [pc, #508]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c88:	d108      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c8a:	f107 030c 	add.w	r3, r7, #12
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fe94 	bl	80079bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c98:	f000 bd1d 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca0:	f000 bd19 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ca4:	4b75      	ldr	r3, [pc, #468]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cae:	4b73      	ldr	r3, [pc, #460]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d10c      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cc0:	4b6e      	ldr	r3, [pc, #440]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	08db      	lsrs	r3, r3, #3
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	4a6d      	ldr	r2, [pc, #436]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd2:	e01f      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cd4:	4b69      	ldr	r3, [pc, #420]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce0:	d106      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ce8:	d102      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cea:	4b66      	ldr	r3, [pc, #408]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cee:	e011      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cf0:	4b62      	ldr	r3, [pc, #392]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cfc:	d106      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d04:	d102      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d06:	4b60      	ldr	r3, [pc, #384]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d0a:	e003      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d10:	f000 bce1 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d14:	f000 bcdf 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d18:	4b5c      	ldr	r3, [pc, #368]	; (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d1c:	f000 bcdb 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d24:	f000 bcd7 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d2c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006d30:	430b      	orrs	r3, r1
 8006d32:	f040 80ad 	bne.w	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006d36:	4b51      	ldr	r3, [pc, #324]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006d3e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d46:	d056      	beq.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4e:	f200 8090 	bhi.w	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	2bc0      	cmp	r3, #192	; 0xc0
 8006d56:	f000 8088 	beq.w	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	2bc0      	cmp	r3, #192	; 0xc0
 8006d5e:	f200 8088 	bhi.w	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d032      	beq.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	f200 8081 	bhi.w	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d014      	beq.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006d7c:	e079      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d7e:	4b3f      	ldr	r3, [pc, #252]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d8a:	d108      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 ff67 	bl	8007c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d9a:	f000 bc9c 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da2:	f000 bc98 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006da6:	4b35      	ldr	r3, [pc, #212]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006db2:	d108      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006db4:	f107 0318 	add.w	r3, r7, #24
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fcab 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dc2:	f000 bc88 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dca:	f000 bc84 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dce:	4b2b      	ldr	r3, [pc, #172]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dda:	d108      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ddc:	f107 030c 	add.w	r3, r7, #12
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fdeb 	bl	80079bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dea:	f000 bc74 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df2:	f000 bc70 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006df6:	4b21      	ldr	r3, [pc, #132]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e00:	4b1e      	ldr	r3, [pc, #120]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d10c      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e12:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	4a18      	ldr	r2, [pc, #96]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e24:	e01f      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e26:	4b15      	ldr	r3, [pc, #84]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e32:	d106      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e3a:	d102      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e3c:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e40:	e011      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e42:	4b0e      	ldr	r3, [pc, #56]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e4e:	d106      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e56:	d102      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e58:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5c:	e003      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e62:	f000 bc38 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e66:	f000 bc36 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e6a:	4b08      	ldr	r3, [pc, #32]	; (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e6e:	f000 bc32 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e76:	f000 bc2e 	b.w	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e7a:	bf00      	nop
 8006e7c:	58024400 	.word	0x58024400
 8006e80:	03d09000 	.word	0x03d09000
 8006e84:	003d0900 	.word	0x003d0900
 8006e88:	017d7840 	.word	0x017d7840
 8006e8c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e94:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	f040 809c 	bne.w	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006e9e:	4b9e      	ldr	r3, [pc, #632]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006ea6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eae:	d054      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eb6:	f200 808b 	bhi.w	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ec0:	f000 8083 	beq.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006eca:	f200 8081 	bhi.w	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed4:	d02f      	beq.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006edc:	d878      	bhi.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eea:	d012      	beq.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006eec:	e070      	b.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eee:	4b8a      	ldr	r3, [pc, #552]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006efa:	d107      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 feaf 	bl	8007c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f0a:	e3e4      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f10:	e3e1      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f12:	4b81      	ldr	r3, [pc, #516]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f20:	f107 0318 	add.w	r3, r7, #24
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fbf5 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2e:	e3d2      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f34:	e3cf      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f36:	4b78      	ldr	r3, [pc, #480]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f42:	d107      	bne.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f44:	f107 030c 	add.w	r3, r7, #12
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fd37 	bl	80079bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f52:	e3c0      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f58:	e3bd      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f5a:	4b6f      	ldr	r3, [pc, #444]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f64:	4b6c      	ldr	r3, [pc, #432]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d10c      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f76:	4b68      	ldr	r3, [pc, #416]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	08db      	lsrs	r3, r3, #3
 8006f7c:	f003 0303 	and.w	r3, r3, #3
 8006f80:	4a66      	ldr	r2, [pc, #408]	; (800711c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006f82:	fa22 f303 	lsr.w	r3, r2, r3
 8006f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f88:	e01e      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f8a:	4b63      	ldr	r3, [pc, #396]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f96:	d106      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f9e:	d102      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fa0:	4b5f      	ldr	r3, [pc, #380]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa4:	e010      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fa6:	4b5c      	ldr	r3, [pc, #368]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb2:	d106      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fba:	d102      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006fbc:	4b59      	ldr	r3, [pc, #356]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fc0:	e002      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006fc6:	e386      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fc8:	e385      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fca:	4b57      	ldr	r3, [pc, #348]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fce:	e382      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fd4:	e37f      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fda:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	f040 80a7 	bne.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006fe4:	4b4c      	ldr	r3, [pc, #304]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006fec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ff4:	d055      	beq.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ffc:	f200 8096 	bhi.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007006:	f000 8084 	beq.w	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007010:	f200 808c 	bhi.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701a:	d030      	beq.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007022:	f200 8083 	bhi.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800702c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007032:	d012      	beq.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007034:	e07a      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007036:	4b38      	ldr	r3, [pc, #224]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007042:	d107      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fe0b 	bl	8007c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007052:	e340      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007058:	e33d      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800705a:	4b2f      	ldr	r3, [pc, #188]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007066:	d107      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007068:	f107 0318 	add.w	r3, r7, #24
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fb51 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007076:	e32e      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707c:	e32b      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800707e:	4b26      	ldr	r3, [pc, #152]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800708a:	d107      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800708c:	f107 030c 	add.w	r3, r7, #12
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fc93 	bl	80079bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800709a:	e31c      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070a0:	e319      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070a2:	4b1d      	ldr	r3, [pc, #116]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070ac:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d10c      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070be:	4b16      	ldr	r3, [pc, #88]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	08db      	lsrs	r3, r3, #3
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	4a14      	ldr	r2, [pc, #80]	; (800711c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80070ca:	fa22 f303 	lsr.w	r3, r2, r3
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d0:	e01e      	b.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070d2:	4b11      	ldr	r3, [pc, #68]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070de:	d106      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80070e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070e6:	d102      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070e8:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ec:	e010      	b.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070fa:	d106      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80070fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007102:	d102      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007104:	4b07      	ldr	r3, [pc, #28]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007108:	e002      	b.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800710e:	e2e2      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007110:	e2e1      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007116:	e2de      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007118:	58024400 	.word	0x58024400
 800711c:	03d09000 	.word	0x03d09000
 8007120:	003d0900 	.word	0x003d0900
 8007124:	017d7840 	.word	0x017d7840
 8007128:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007130:	e2d1      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007136:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800713a:	430b      	orrs	r3, r1
 800713c:	f040 809c 	bne.w	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007140:	4b93      	ldr	r3, [pc, #588]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007144:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007148:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007150:	d054      	beq.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007158:	f200 808b 	bhi.w	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007162:	f000 8083 	beq.w	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800716c:	f200 8081 	bhi.w	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007176:	d02f      	beq.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717e:	d878      	bhi.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718c:	d012      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800718e:	e070      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007190:	4b7f      	ldr	r3, [pc, #508]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800719c:	d107      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800719e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fd5e 	bl	8007c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ac:	e293      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b2:	e290      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071b4:	4b76      	ldr	r3, [pc, #472]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c0:	d107      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071c2:	f107 0318 	add.w	r3, r7, #24
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 faa4 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d0:	e281      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071d6:	e27e      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071d8:	4b6d      	ldr	r3, [pc, #436]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e4:	d107      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071e6:	f107 030c 	add.w	r3, r7, #12
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fbe6 	bl	80079bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f4:	e26f      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071fa:	e26c      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071fc:	4b64      	ldr	r3, [pc, #400]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007204:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007206:	4b62      	ldr	r3, [pc, #392]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b04      	cmp	r3, #4
 8007210:	d10c      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007214:	2b00      	cmp	r3, #0
 8007216:	d109      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007218:	4b5d      	ldr	r3, [pc, #372]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	4a5c      	ldr	r2, [pc, #368]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800722a:	e01e      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800722c:	4b58      	ldr	r3, [pc, #352]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007238:	d106      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800723a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007240:	d102      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007242:	4b55      	ldr	r3, [pc, #340]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007246:	e010      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007248:	4b51      	ldr	r3, [pc, #324]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007254:	d106      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725c:	d102      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800725e:	4b4f      	ldr	r3, [pc, #316]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007262:	e002      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007268:	e235      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800726a:	e234      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800726c:	4b4c      	ldr	r3, [pc, #304]	; (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800726e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007270:	e231      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007276:	e22e      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007280:	430b      	orrs	r3, r1
 8007282:	f040 808f 	bne.w	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007286:	4b42      	ldr	r3, [pc, #264]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800728e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007296:	d06b      	beq.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800729e:	d874      	bhi.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072a6:	d056      	beq.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072ae:	d86c      	bhi.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072b6:	d03b      	beq.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072be:	d864      	bhi.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072c6:	d021      	beq.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ce:	d85c      	bhi.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072dc:	d004      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80072de:	e054      	b.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80072e0:	f7fe fa62 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 80072e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072e6:	e1f6      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072e8:	4b29      	ldr	r3, [pc, #164]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072f4:	d107      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f6:	f107 0318 	add.w	r3, r7, #24
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fa0a 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007304:	e1e7      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800730a:	e1e4      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800730c:	4b20      	ldr	r3, [pc, #128]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007318:	d107      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800731a:	f107 030c 	add.w	r3, r7, #12
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fb4c 	bl	80079bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007328:	e1d5      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800732e:	e1d2      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007330:	4b17      	ldr	r3, [pc, #92]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b04      	cmp	r3, #4
 800733a:	d109      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800733c:	4b14      	ldr	r3, [pc, #80]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	08db      	lsrs	r3, r3, #3
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	4a13      	ldr	r2, [pc, #76]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
 800734c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800734e:	e1c2      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007354:	e1bf      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007356:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007362:	d102      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007364:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007368:	e1b5      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800736e:	e1b2      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007370:	4b07      	ldr	r3, [pc, #28]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800737c:	d102      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007382:	e1a8      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007388:	e1a5      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800738e:	e1a2      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007390:	58024400 	.word	0x58024400
 8007394:	03d09000 	.word	0x03d09000
 8007398:	003d0900 	.word	0x003d0900
 800739c:	017d7840 	.word	0x017d7840
 80073a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80073a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80073ac:	430b      	orrs	r3, r1
 80073ae:	d173      	bne.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80073b0:	4b9c      	ldr	r3, [pc, #624]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073c0:	d02f      	beq.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073c8:	d863      	bhi.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d6:	d012      	beq.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80073d8:	e05b      	b.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073da:	4b92      	ldr	r3, [pc, #584]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073e6:	d107      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e8:	f107 0318 	add.w	r3, r7, #24
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 f991 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073f6:	e16e      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073fc:	e16b      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073fe:	4b89      	ldr	r3, [pc, #548]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800740a:	d107      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800740c:	f107 030c 	add.w	r3, r7, #12
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fad3 	bl	80079bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800741a:	e15c      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007420:	e159      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007422:	4b80      	ldr	r3, [pc, #512]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800742a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800742c:	4b7d      	ldr	r3, [pc, #500]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b04      	cmp	r3, #4
 8007436:	d10c      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800743e:	4b79      	ldr	r3, [pc, #484]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	08db      	lsrs	r3, r3, #3
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	4a77      	ldr	r2, [pc, #476]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800744a:	fa22 f303 	lsr.w	r3, r2, r3
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007450:	e01e      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007452:	4b74      	ldr	r3, [pc, #464]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745e:	d106      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007466:	d102      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007468:	4b70      	ldr	r3, [pc, #448]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800746c:	e010      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800746e:	4b6d      	ldr	r3, [pc, #436]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800747a:	d106      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007482:	d102      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007484:	4b6a      	ldr	r3, [pc, #424]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007488:	e002      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800748e:	e122      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007490:	e121      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007496:	e11e      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800749c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80074a0:	430b      	orrs	r3, r1
 80074a2:	d133      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80074a4:	4b5f      	ldr	r3, [pc, #380]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ba:	d012      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80074bc:	e023      	b.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074be:	4b59      	ldr	r3, [pc, #356]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074ca:	d107      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fbc7 	bl	8007c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074da:	e0fc      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074e0:	e0f9      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074e2:	4b50      	ldr	r3, [pc, #320]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074ee:	d107      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074f0:	f107 0318 	add.w	r3, r7, #24
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f90d 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074fe:	e0ea      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007504:	e0e7      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800750a:	e0e4      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800750c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007510:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007514:	430b      	orrs	r3, r1
 8007516:	f040 808d 	bne.w	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800751a:	4b42      	ldr	r3, [pc, #264]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007522:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800752a:	d06b      	beq.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007532:	d874      	bhi.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753a:	d056      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007542:	d86c      	bhi.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800754a:	d03b      	beq.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007552:	d864      	bhi.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800755a:	d021      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007562:	d85c      	bhi.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007570:	d004      	beq.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007572:	e054      	b.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007574:	f000 f8b8 	bl	80076e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007578:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800757a:	e0ac      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800757c:	4b29      	ldr	r3, [pc, #164]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007588:	d107      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800758a:	f107 0318 	add.w	r3, r7, #24
 800758e:	4618      	mov	r0, r3
 8007590:	f000 f8c0 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007598:	e09d      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800759e:	e09a      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075a0:	4b20      	ldr	r3, [pc, #128]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ac:	d107      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fa02 	bl	80079bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075bc:	e08b      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075c2:	e088      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075c4:	4b17      	ldr	r3, [pc, #92]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d109      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075d0:	4b14      	ldr	r3, [pc, #80]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	4a13      	ldr	r2, [pc, #76]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
 80075e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075e2:	e078      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e8:	e075      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80075ea:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f6:	d102      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075fc:	e06b      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007602:	e068      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800760c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007610:	d102      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007612:	4b07      	ldr	r3, [pc, #28]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007616:	e05e      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800761c:	e05b      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007622:	e058      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007624:	58024400 	.word	0x58024400
 8007628:	03d09000 	.word	0x03d09000
 800762c:	003d0900 	.word	0x003d0900
 8007630:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007638:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800763c:	430b      	orrs	r3, r1
 800763e:	d148      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007640:	4b27      	ldr	r3, [pc, #156]	; (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007648:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007650:	d02a      	beq.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007658:	d838      	bhi.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	2b00      	cmp	r3, #0
 800765e:	d004      	beq.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007666:	d00d      	beq.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007668:	e030      	b.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800766a:	4b1d      	ldr	r3, [pc, #116]	; (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007676:	d102      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007678:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800767a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800767c:	e02b      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007682:	e028      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007690:	d107      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fae4 	bl	8007c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076a0:	e019      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076a6:	e016      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076a8:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076b4:	d107      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076b6:	f107 0318 	add.w	r3, r7, #24
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f82a 	bl	8007714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076c4:	e007      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ca:	e004      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076d0:	e001      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80076d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3740      	adds	r7, #64	; 0x40
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	58024400 	.word	0x58024400
 80076e4:	017d7840 	.word	0x017d7840

080076e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80076ec:	f7fe f82c 	bl	8005748 <HAL_RCC_GetHCLKFreq>
 80076f0:	4602      	mov	r2, r0
 80076f2:	4b06      	ldr	r3, [pc, #24]	; (800770c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	091b      	lsrs	r3, r3, #4
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	4904      	ldr	r1, [pc, #16]	; (8007710 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80076fe:	5ccb      	ldrb	r3, [r1, r3]
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007708:	4618      	mov	r0, r3
 800770a:	bd80      	pop	{r7, pc}
 800770c:	58024400 	.word	0x58024400
 8007710:	08009078 	.word	0x08009078

08007714 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007714:	b480      	push	{r7}
 8007716:	b089      	sub	sp, #36	; 0x24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800771c:	4ba1      	ldr	r3, [pc, #644]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	f003 0303 	and.w	r3, r3, #3
 8007724:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007726:	4b9f      	ldr	r3, [pc, #636]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	0b1b      	lsrs	r3, r3, #12
 800772c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007730:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007732:	4b9c      	ldr	r3, [pc, #624]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	091b      	lsrs	r3, r3, #4
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800773e:	4b99      	ldr	r3, [pc, #612]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007742:	08db      	lsrs	r3, r3, #3
 8007744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	fb02 f303 	mul.w	r3, r2, r3
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 8111 	beq.w	8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	2b02      	cmp	r3, #2
 8007766:	f000 8083 	beq.w	8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b02      	cmp	r3, #2
 800776e:	f200 80a1 	bhi.w	80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d056      	beq.n	800782c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800777e:	e099      	b.n	80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007780:	4b88      	ldr	r3, [pc, #544]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b00      	cmp	r3, #0
 800778a:	d02d      	beq.n	80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800778c:	4b85      	ldr	r3, [pc, #532]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	08db      	lsrs	r3, r3, #3
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	4a84      	ldr	r2, [pc, #528]	; (80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
 800779c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	4b7b      	ldr	r3, [pc, #492]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80079ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077e6:	e087      	b.n	80078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80079b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b6a      	ldr	r3, [pc, #424]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a03 	vldr	s12, [r7, #12]
 800780e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80079ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800782a:	e065      	b.n	80078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80079b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b59      	ldr	r3, [pc, #356]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007852:	eddf 5a56 	vldr	s11, [pc, #344]	; 80079ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786e:	e043      	b.n	80078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80079b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800787e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007882:	4b48      	ldr	r3, [pc, #288]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007892:	ed97 6a03 	vldr	s12, [r7, #12]
 8007896:	eddf 5a45 	vldr	s11, [pc, #276]	; 80079ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800789a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b2:	e021      	b.n	80078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80079b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c6:	4b37      	ldr	r3, [pc, #220]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80079ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80078f8:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	0a5b      	lsrs	r3, r3, #9
 80078fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800790e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007912:	edd7 6a07 	vldr	s13, [r7, #28]
 8007916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800791e:	ee17 2a90 	vmov	r2, s15
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007926:	4b1f      	ldr	r3, [pc, #124]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	0c1b      	lsrs	r3, r3, #16
 800792c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800793c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007940:	edd7 6a07 	vldr	s13, [r7, #28]
 8007944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800794c:	ee17 2a90 	vmov	r2, s15
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007954:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	0e1b      	lsrs	r3, r3, #24
 800795a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800796a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800796e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797a:	ee17 2a90 	vmov	r2, s15
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007982:	e008      	b.n	8007996 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	609a      	str	r2, [r3, #8]
}
 8007996:	bf00      	nop
 8007998:	3724      	adds	r7, #36	; 0x24
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	58024400 	.word	0x58024400
 80079a8:	03d09000 	.word	0x03d09000
 80079ac:	46000000 	.word	0x46000000
 80079b0:	4c742400 	.word	0x4c742400
 80079b4:	4a742400 	.word	0x4a742400
 80079b8:	4bbebc20 	.word	0x4bbebc20

080079bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80079bc:	b480      	push	{r7}
 80079be:	b089      	sub	sp, #36	; 0x24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079c4:	4ba1      	ldr	r3, [pc, #644]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	f003 0303 	and.w	r3, r3, #3
 80079cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80079ce:	4b9f      	ldr	r3, [pc, #636]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	0d1b      	lsrs	r3, r3, #20
 80079d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80079da:	4b9c      	ldr	r3, [pc, #624]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	0a1b      	lsrs	r3, r3, #8
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80079e6:	4b99      	ldr	r3, [pc, #612]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ea:	08db      	lsrs	r3, r3, #3
 80079ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8111 	beq.w	8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	f000 8083 	beq.w	8007b18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	f200 80a1 	bhi.w	8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d056      	beq.n	8007ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007a26:	e099      	b.n	8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a28:	4b88      	ldr	r3, [pc, #544]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d02d      	beq.n	8007a90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a34:	4b85      	ldr	r3, [pc, #532]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	08db      	lsrs	r3, r3, #3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	4a84      	ldr	r2, [pc, #528]	; (8007c50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	ee07 3a90 	vmov	s15, r3
 8007a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5e:	4b7b      	ldr	r3, [pc, #492]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a8e:	e087      	b.n	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa2:	4b6a      	ldr	r3, [pc, #424]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad2:	e065      	b.n	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ade:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae6:	4b59      	ldr	r3, [pc, #356]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007afa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b16:	e043      	b.n	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2a:	4b48      	ldr	r3, [pc, #288]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b5a:	e021      	b.n	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6e:	4b37      	ldr	r3, [pc, #220]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007ba0:	4b2a      	ldr	r3, [pc, #168]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	0a5b      	lsrs	r3, r3, #9
 8007ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc6:	ee17 2a90 	vmov	r2, s15
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007bce:	4b1f      	ldr	r3, [pc, #124]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bd8:	ee07 3a90 	vmov	s15, r3
 8007bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf4:	ee17 2a90 	vmov	r2, s15
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007bfc:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c00:	0e1b      	lsrs	r3, r3, #24
 8007c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c22:	ee17 2a90 	vmov	r2, s15
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c2a:	e008      	b.n	8007c3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	609a      	str	r2, [r3, #8]
}
 8007c3e:	bf00      	nop
 8007c40:	3724      	adds	r7, #36	; 0x24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	03d09000 	.word	0x03d09000
 8007c54:	46000000 	.word	0x46000000
 8007c58:	4c742400 	.word	0x4c742400
 8007c5c:	4a742400 	.word	0x4a742400
 8007c60:	4bbebc20 	.word	0x4bbebc20

08007c64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b089      	sub	sp, #36	; 0x24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c6c:	4ba0      	ldr	r3, [pc, #640]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	f003 0303 	and.w	r3, r3, #3
 8007c74:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007c76:	4b9e      	ldr	r3, [pc, #632]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	091b      	lsrs	r3, r3, #4
 8007c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c80:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007c82:	4b9b      	ldr	r3, [pc, #620]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007c8c:	4b98      	ldr	r3, [pc, #608]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c90:	08db      	lsrs	r3, r3, #3
 8007c92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	fb02 f303 	mul.w	r3, r2, r3
 8007c9c:	ee07 3a90 	vmov	s15, r3
 8007ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 8111 	beq.w	8007ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	f000 8083 	beq.w	8007dbe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	f200 80a1 	bhi.w	8007e02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d056      	beq.n	8007d7a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007ccc:	e099      	b.n	8007e02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cce:	4b88      	ldr	r3, [pc, #544]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02d      	beq.n	8007d36 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cda:	4b85      	ldr	r3, [pc, #532]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	08db      	lsrs	r3, r3, #3
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	4a83      	ldr	r2, [pc, #524]	; (8007ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d04:	4b7a      	ldr	r3, [pc, #488]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0c:	ee07 3a90 	vmov	s15, r3
 8007d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d18:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d30:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d34:	e087      	b.n	8007e46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	ee07 3a90 	vmov	s15, r3
 8007d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d40:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007efc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d48:	4b69      	ldr	r3, [pc, #420]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d50:	ee07 3a90 	vmov	s15, r3
 8007d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d5c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d78:	e065      	b.n	8007e46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	ee07 3a90 	vmov	s15, r3
 8007d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d84:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007f00 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8c:	4b58      	ldr	r3, [pc, #352]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d94:	ee07 3a90 	vmov	s15, r3
 8007d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007da0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007da4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dbc:	e043      	b.n	8007e46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	ee07 3a90 	vmov	s15, r3
 8007dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007f04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd0:	4b47      	ldr	r3, [pc, #284]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd8:	ee07 3a90 	vmov	s15, r3
 8007ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007de4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e00:	e021      	b.n	8007e46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	ee07 3a90 	vmov	s15, r3
 8007e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007efc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e14:	4b36      	ldr	r3, [pc, #216]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1c:	ee07 3a90 	vmov	s15, r3
 8007e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e28:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e44:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007e46:	4b2a      	ldr	r3, [pc, #168]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	0a5b      	lsrs	r3, r3, #9
 8007e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e50:	ee07 3a90 	vmov	s15, r3
 8007e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e6c:	ee17 2a90 	vmov	r2, s15
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007e74:	4b1e      	ldr	r3, [pc, #120]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	0c1b      	lsrs	r3, r3, #16
 8007e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e9a:	ee17 2a90 	vmov	r2, s15
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea6:	0e1b      	lsrs	r3, r3, #24
 8007ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eac:	ee07 3a90 	vmov	s15, r3
 8007eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec8:	ee17 2a90 	vmov	r2, s15
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	609a      	str	r2, [r3, #8]
}
 8007ee4:	bf00      	nop
 8007ee6:	3724      	adds	r7, #36	; 0x24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	03d09000 	.word	0x03d09000
 8007ef8:	46000000 	.word	0x46000000
 8007efc:	4c742400 	.word	0x4c742400
 8007f00:	4a742400 	.word	0x4a742400
 8007f04:	4bbebc20 	.word	0x4bbebc20

08007f08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f16:	4b53      	ldr	r3, [pc, #332]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d101      	bne.n	8007f26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e099      	b.n	800805a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f26:	4b4f      	ldr	r3, [pc, #316]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a4e      	ldr	r2, [pc, #312]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007f2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f32:	f7f8 fe7f 	bl	8000c34 <HAL_GetTick>
 8007f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f38:	e008      	b.n	8007f4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f3a:	f7f8 fe7b 	bl	8000c34 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e086      	b.n	800805a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f4c:	4b45      	ldr	r3, [pc, #276]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1f0      	bne.n	8007f3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f58:	4b42      	ldr	r3, [pc, #264]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	031b      	lsls	r3, r3, #12
 8007f66:	493f      	ldr	r1, [pc, #252]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	628b      	str	r3, [r1, #40]	; 0x28
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	025b      	lsls	r3, r3, #9
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	041b      	lsls	r3, r3, #16
 8007f8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	061b      	lsls	r3, r3, #24
 8007f98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f9c:	4931      	ldr	r1, [pc, #196]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007fa2:	4b30      	ldr	r3, [pc, #192]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	492d      	ldr	r1, [pc, #180]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fb4:	4b2b      	ldr	r3, [pc, #172]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	f023 0220 	bic.w	r2, r3, #32
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	4928      	ldr	r1, [pc, #160]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fc6:	4b27      	ldr	r3, [pc, #156]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	4a26      	ldr	r2, [pc, #152]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fcc:	f023 0310 	bic.w	r3, r3, #16
 8007fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fd2:	4b24      	ldr	r3, [pc, #144]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fd6:	4b24      	ldr	r3, [pc, #144]	; (8008068 <RCCEx_PLL2_Config+0x160>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	69d2      	ldr	r2, [r2, #28]
 8007fde:	00d2      	lsls	r2, r2, #3
 8007fe0:	4920      	ldr	r1, [pc, #128]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007fe6:	4b1f      	ldr	r3, [pc, #124]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	4a1e      	ldr	r2, [pc, #120]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	f043 0310 	orr.w	r3, r3, #16
 8007ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d106      	bne.n	8008006 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ff8:	4b1a      	ldr	r3, [pc, #104]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a19      	ldr	r2, [pc, #100]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8007ffe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008004:	e00f      	b.n	8008026 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d106      	bne.n	800801a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800800c:	4b15      	ldr	r3, [pc, #84]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	4a14      	ldr	r2, [pc, #80]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8008012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008018:	e005      	b.n	8008026 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	4a11      	ldr	r2, [pc, #68]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8008020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008024:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008026:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a0e      	ldr	r2, [pc, #56]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 800802c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008032:	f7f8 fdff 	bl	8000c34 <HAL_GetTick>
 8008036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008038:	e008      	b.n	800804c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800803a:	f7f8 fdfb 	bl	8000c34 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e006      	b.n	800805a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <RCCEx_PLL2_Config+0x15c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0f0      	beq.n	800803a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	58024400 	.word	0x58024400
 8008068:	ffff0007 	.word	0xffff0007

0800806c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800807a:	4b53      	ldr	r3, [pc, #332]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 800807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807e:	f003 0303 	and.w	r3, r3, #3
 8008082:	2b03      	cmp	r3, #3
 8008084:	d101      	bne.n	800808a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e099      	b.n	80081be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800808a:	4b4f      	ldr	r3, [pc, #316]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a4e      	ldr	r2, [pc, #312]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008096:	f7f8 fdcd 	bl	8000c34 <HAL_GetTick>
 800809a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800809c:	e008      	b.n	80080b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800809e:	f7f8 fdc9 	bl	8000c34 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e086      	b.n	80081be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080b0:	4b45      	ldr	r3, [pc, #276]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1f0      	bne.n	800809e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080bc:	4b42      	ldr	r3, [pc, #264]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	051b      	lsls	r3, r3, #20
 80080ca:	493f      	ldr	r1, [pc, #252]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	628b      	str	r3, [r1, #40]	; 0x28
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	3b01      	subs	r3, #1
 80080e0:	025b      	lsls	r3, r3, #9
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	431a      	orrs	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	041b      	lsls	r3, r3, #16
 80080ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	061b      	lsls	r3, r3, #24
 80080fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008100:	4931      	ldr	r1, [pc, #196]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008102:	4313      	orrs	r3, r2
 8008104:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008106:	4b30      	ldr	r3, [pc, #192]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	492d      	ldr	r1, [pc, #180]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008114:	4313      	orrs	r3, r2
 8008116:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008118:	4b2b      	ldr	r3, [pc, #172]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	4928      	ldr	r1, [pc, #160]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008126:	4313      	orrs	r3, r2
 8008128:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800812a:	4b27      	ldr	r3, [pc, #156]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	4a26      	ldr	r2, [pc, #152]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008134:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008136:	4b24      	ldr	r3, [pc, #144]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800813a:	4b24      	ldr	r3, [pc, #144]	; (80081cc <RCCEx_PLL3_Config+0x160>)
 800813c:	4013      	ands	r3, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	69d2      	ldr	r2, [r2, #28]
 8008142:	00d2      	lsls	r2, r2, #3
 8008144:	4920      	ldr	r1, [pc, #128]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008146:	4313      	orrs	r3, r2
 8008148:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800814a:	4b1f      	ldr	r3, [pc, #124]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	4a1e      	ldr	r2, [pc, #120]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d106      	bne.n	800816a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800815c:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	4a19      	ldr	r2, [pc, #100]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008162:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008166:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008168:	e00f      	b.n	800818a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d106      	bne.n	800817e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008170:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	4a14      	ldr	r2, [pc, #80]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008176:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800817a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800817c:	e005      	b.n	800818a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800817e:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	4a11      	ldr	r2, [pc, #68]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008188:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800818a:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a0e      	ldr	r2, [pc, #56]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 8008190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008196:	f7f8 fd4d 	bl	8000c34 <HAL_GetTick>
 800819a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800819c:	e008      	b.n	80081b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800819e:	f7f8 fd49 	bl	8000c34 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d901      	bls.n	80081b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e006      	b.n	80081be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081b0:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <RCCEx_PLL3_Config+0x15c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d0f0      	beq.n	800819e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	58024400 	.word	0x58024400
 80081cc:	ffff0007 	.word	0xffff0007

080081d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e049      	b.n	8008276 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d106      	bne.n	80081fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7f8 fb52 	bl	80008a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f000 fa58 	bl	80086c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <HAL_TIM_PWM_Start+0x24>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	bf14      	ite	ne
 800829c:	2301      	movne	r3, #1
 800829e:	2300      	moveq	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	e03c      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d109      	bne.n	80082be <HAL_TIM_PWM_Start+0x3e>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	bf14      	ite	ne
 80082b6:	2301      	movne	r3, #1
 80082b8:	2300      	moveq	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	e02f      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d109      	bne.n	80082d8 <HAL_TIM_PWM_Start+0x58>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e022      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b0c      	cmp	r3, #12
 80082dc:	d109      	bne.n	80082f2 <HAL_TIM_PWM_Start+0x72>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	bf14      	ite	ne
 80082ea:	2301      	movne	r3, #1
 80082ec:	2300      	moveq	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	e015      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b10      	cmp	r3, #16
 80082f6:	d109      	bne.n	800830c <HAL_TIM_PWM_Start+0x8c>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	bf14      	ite	ne
 8008304:	2301      	movne	r3, #1
 8008306:	2300      	moveq	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	e008      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	bf14      	ite	ne
 8008318:	2301      	movne	r3, #1
 800831a:	2300      	moveq	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e0a1      	b.n	800846a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <HAL_TIM_PWM_Start+0xb6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008334:	e023      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b04      	cmp	r3, #4
 800833a:	d104      	bne.n	8008346 <HAL_TIM_PWM_Start+0xc6>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008344:	e01b      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b08      	cmp	r3, #8
 800834a:	d104      	bne.n	8008356 <HAL_TIM_PWM_Start+0xd6>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008354:	e013      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b0c      	cmp	r3, #12
 800835a:	d104      	bne.n	8008366 <HAL_TIM_PWM_Start+0xe6>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008364:	e00b      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b10      	cmp	r3, #16
 800836a:	d104      	bne.n	8008376 <HAL_TIM_PWM_Start+0xf6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008374:	e003      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2201      	movs	r2, #1
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fd0c 	bl	8008da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a38      	ldr	r2, [pc, #224]	; (8008474 <HAL_TIM_PWM_Start+0x1f4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a37      	ldr	r2, [pc, #220]	; (8008478 <HAL_TIM_PWM_Start+0x1f8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00e      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a35      	ldr	r2, [pc, #212]	; (800847c <HAL_TIM_PWM_Start+0x1fc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d009      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a34      	ldr	r2, [pc, #208]	; (8008480 <HAL_TIM_PWM_Start+0x200>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d004      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a32      	ldr	r2, [pc, #200]	; (8008484 <HAL_TIM_PWM_Start+0x204>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d101      	bne.n	80083c2 <HAL_TIM_PWM_Start+0x142>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <HAL_TIM_PWM_Start+0x144>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d007      	beq.n	80083d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a25      	ldr	r2, [pc, #148]	; (8008474 <HAL_TIM_PWM_Start+0x1f4>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d022      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ea:	d01d      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a25      	ldr	r2, [pc, #148]	; (8008488 <HAL_TIM_PWM_Start+0x208>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d018      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a24      	ldr	r2, [pc, #144]	; (800848c <HAL_TIM_PWM_Start+0x20c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a22      	ldr	r2, [pc, #136]	; (8008490 <HAL_TIM_PWM_Start+0x210>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00e      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1a      	ldr	r2, [pc, #104]	; (8008478 <HAL_TIM_PWM_Start+0x1f8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d009      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1e      	ldr	r2, [pc, #120]	; (8008494 <HAL_TIM_PWM_Start+0x214>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d004      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a16      	ldr	r2, [pc, #88]	; (800847c <HAL_TIM_PWM_Start+0x1fc>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d115      	bne.n	8008454 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <HAL_TIM_PWM_Start+0x218>)
 8008430:	4013      	ands	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b06      	cmp	r3, #6
 8008438:	d015      	beq.n	8008466 <HAL_TIM_PWM_Start+0x1e6>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008440:	d011      	beq.n	8008466 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	e008      	b.n	8008466 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e000      	b.n	8008468 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008466:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	40010000 	.word	0x40010000
 8008478:	40010400 	.word	0x40010400
 800847c:	40014000 	.word	0x40014000
 8008480:	40014400 	.word	0x40014400
 8008484:	40014800 	.word	0x40014800
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800
 8008490:	40000c00 	.word	0x40000c00
 8008494:	40001800 	.word	0x40001800
 8008498:	00010007 	.word	0x00010007

0800849c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d101      	bne.n	80084ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084b6:	2302      	movs	r3, #2
 80084b8:	e0ff      	b.n	80086ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b14      	cmp	r3, #20
 80084c6:	f200 80f0 	bhi.w	80086aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80084ca:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d0:	08008525 	.word	0x08008525
 80084d4:	080086ab 	.word	0x080086ab
 80084d8:	080086ab 	.word	0x080086ab
 80084dc:	080086ab 	.word	0x080086ab
 80084e0:	08008565 	.word	0x08008565
 80084e4:	080086ab 	.word	0x080086ab
 80084e8:	080086ab 	.word	0x080086ab
 80084ec:	080086ab 	.word	0x080086ab
 80084f0:	080085a7 	.word	0x080085a7
 80084f4:	080086ab 	.word	0x080086ab
 80084f8:	080086ab 	.word	0x080086ab
 80084fc:	080086ab 	.word	0x080086ab
 8008500:	080085e7 	.word	0x080085e7
 8008504:	080086ab 	.word	0x080086ab
 8008508:	080086ab 	.word	0x080086ab
 800850c:	080086ab 	.word	0x080086ab
 8008510:	08008629 	.word	0x08008629
 8008514:	080086ab 	.word	0x080086ab
 8008518:	080086ab 	.word	0x080086ab
 800851c:	080086ab 	.word	0x080086ab
 8008520:	08008669 	.word	0x08008669
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f964 	bl	80087f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0208 	orr.w	r2, r2, #8
 800853e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0204 	bic.w	r2, r2, #4
 800854e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6999      	ldr	r1, [r3, #24]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	619a      	str	r2, [r3, #24]
      break;
 8008562:	e0a5      	b.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f9d4 	bl	8008918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699a      	ldr	r2, [r3, #24]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6999      	ldr	r1, [r3, #24]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	021a      	lsls	r2, r3, #8
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	619a      	str	r2, [r3, #24]
      break;
 80085a4:	e084      	b.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fa3d 	bl	8008a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69da      	ldr	r2, [r3, #28]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0208 	orr.w	r2, r2, #8
 80085c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69da      	ldr	r2, [r3, #28]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0204 	bic.w	r2, r2, #4
 80085d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69d9      	ldr	r1, [r3, #28]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	61da      	str	r2, [r3, #28]
      break;
 80085e4:	e064      	b.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68b9      	ldr	r1, [r7, #8]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 faa5 	bl	8008b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69d9      	ldr	r1, [r3, #28]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	021a      	lsls	r2, r3, #8
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	61da      	str	r2, [r3, #28]
      break;
 8008626:	e043      	b.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 faee 	bl	8008c10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0208 	orr.w	r2, r2, #8
 8008642:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0204 	bic.w	r2, r2, #4
 8008652:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008666:	e023      	b.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fb32 	bl	8008cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008682:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008692:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	021a      	lsls	r2, r3, #8
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086a8:	e002      	b.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	75fb      	strb	r3, [r7, #23]
      break;
 80086ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop

080086c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a40      	ldr	r2, [pc, #256]	; (80087d8 <TIM_Base_SetConfig+0x114>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e2:	d00f      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a3d      	ldr	r2, [pc, #244]	; (80087dc <TIM_Base_SetConfig+0x118>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00b      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a3c      	ldr	r2, [pc, #240]	; (80087e0 <TIM_Base_SetConfig+0x11c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a3b      	ldr	r2, [pc, #236]	; (80087e4 <TIM_Base_SetConfig+0x120>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a3a      	ldr	r2, [pc, #232]	; (80087e8 <TIM_Base_SetConfig+0x124>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d108      	bne.n	8008716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2f      	ldr	r2, [pc, #188]	; (80087d8 <TIM_Base_SetConfig+0x114>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d01f      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008724:	d01b      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a2c      	ldr	r2, [pc, #176]	; (80087dc <TIM_Base_SetConfig+0x118>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d017      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a2b      	ldr	r2, [pc, #172]	; (80087e0 <TIM_Base_SetConfig+0x11c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d013      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a2a      	ldr	r2, [pc, #168]	; (80087e4 <TIM_Base_SetConfig+0x120>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00f      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a29      	ldr	r2, [pc, #164]	; (80087e8 <TIM_Base_SetConfig+0x124>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00b      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a28      	ldr	r2, [pc, #160]	; (80087ec <TIM_Base_SetConfig+0x128>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d007      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a27      	ldr	r2, [pc, #156]	; (80087f0 <TIM_Base_SetConfig+0x12c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a26      	ldr	r2, [pc, #152]	; (80087f4 <TIM_Base_SetConfig+0x130>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d108      	bne.n	8008770 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a10      	ldr	r2, [pc, #64]	; (80087d8 <TIM_Base_SetConfig+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00f      	beq.n	80087bc <TIM_Base_SetConfig+0xf8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a12      	ldr	r2, [pc, #72]	; (80087e8 <TIM_Base_SetConfig+0x124>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00b      	beq.n	80087bc <TIM_Base_SetConfig+0xf8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a11      	ldr	r2, [pc, #68]	; (80087ec <TIM_Base_SetConfig+0x128>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d007      	beq.n	80087bc <TIM_Base_SetConfig+0xf8>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a10      	ldr	r2, [pc, #64]	; (80087f0 <TIM_Base_SetConfig+0x12c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_Base_SetConfig+0xf8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a0f      	ldr	r2, [pc, #60]	; (80087f4 <TIM_Base_SetConfig+0x130>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d103      	bne.n	80087c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	615a      	str	r2, [r3, #20]
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	40010000 	.word	0x40010000
 80087dc:	40000400 	.word	0x40000400
 80087e0:	40000800 	.word	0x40000800
 80087e4:	40000c00 	.word	0x40000c00
 80087e8:	40010400 	.word	0x40010400
 80087ec:	40014000 	.word	0x40014000
 80087f0:	40014400 	.word	0x40014400
 80087f4:	40014800 	.word	0x40014800

080087f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	f023 0201 	bic.w	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4b37      	ldr	r3, [pc, #220]	; (8008900 <TIM_OC1_SetConfig+0x108>)
 8008824:	4013      	ands	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0303 	bic.w	r3, r3, #3
 800882e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f023 0302 	bic.w	r3, r3, #2
 8008840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a2d      	ldr	r2, [pc, #180]	; (8008904 <TIM_OC1_SetConfig+0x10c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00f      	beq.n	8008874 <TIM_OC1_SetConfig+0x7c>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a2c      	ldr	r2, [pc, #176]	; (8008908 <TIM_OC1_SetConfig+0x110>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00b      	beq.n	8008874 <TIM_OC1_SetConfig+0x7c>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a2b      	ldr	r2, [pc, #172]	; (800890c <TIM_OC1_SetConfig+0x114>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d007      	beq.n	8008874 <TIM_OC1_SetConfig+0x7c>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a2a      	ldr	r2, [pc, #168]	; (8008910 <TIM_OC1_SetConfig+0x118>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d003      	beq.n	8008874 <TIM_OC1_SetConfig+0x7c>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a29      	ldr	r2, [pc, #164]	; (8008914 <TIM_OC1_SetConfig+0x11c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d10c      	bne.n	800888e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f023 0308 	bic.w	r3, r3, #8
 800887a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f023 0304 	bic.w	r3, r3, #4
 800888c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a1c      	ldr	r2, [pc, #112]	; (8008904 <TIM_OC1_SetConfig+0x10c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00f      	beq.n	80088b6 <TIM_OC1_SetConfig+0xbe>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a1b      	ldr	r2, [pc, #108]	; (8008908 <TIM_OC1_SetConfig+0x110>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00b      	beq.n	80088b6 <TIM_OC1_SetConfig+0xbe>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a1a      	ldr	r2, [pc, #104]	; (800890c <TIM_OC1_SetConfig+0x114>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d007      	beq.n	80088b6 <TIM_OC1_SetConfig+0xbe>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a19      	ldr	r2, [pc, #100]	; (8008910 <TIM_OC1_SetConfig+0x118>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d003      	beq.n	80088b6 <TIM_OC1_SetConfig+0xbe>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a18      	ldr	r2, [pc, #96]	; (8008914 <TIM_OC1_SetConfig+0x11c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d111      	bne.n	80088da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	621a      	str	r2, [r3, #32]
}
 80088f4:	bf00      	nop
 80088f6:	371c      	adds	r7, #28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	fffeff8f 	.word	0xfffeff8f
 8008904:	40010000 	.word	0x40010000
 8008908:	40010400 	.word	0x40010400
 800890c:	40014000 	.word	0x40014000
 8008910:	40014400 	.word	0x40014400
 8008914:	40014800 	.word	0x40014800

08008918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f023 0210 	bic.w	r2, r3, #16
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	4b34      	ldr	r3, [pc, #208]	; (8008a14 <TIM_OC2_SetConfig+0xfc>)
 8008944:	4013      	ands	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800894e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4313      	orrs	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f023 0320 	bic.w	r3, r3, #32
 8008962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	011b      	lsls	r3, r3, #4
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a29      	ldr	r2, [pc, #164]	; (8008a18 <TIM_OC2_SetConfig+0x100>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d003      	beq.n	8008980 <TIM_OC2_SetConfig+0x68>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a28      	ldr	r2, [pc, #160]	; (8008a1c <TIM_OC2_SetConfig+0x104>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d10d      	bne.n	800899c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	011b      	lsls	r3, r3, #4
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800899a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a1e      	ldr	r2, [pc, #120]	; (8008a18 <TIM_OC2_SetConfig+0x100>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00f      	beq.n	80089c4 <TIM_OC2_SetConfig+0xac>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a1d      	ldr	r2, [pc, #116]	; (8008a1c <TIM_OC2_SetConfig+0x104>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00b      	beq.n	80089c4 <TIM_OC2_SetConfig+0xac>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a1c      	ldr	r2, [pc, #112]	; (8008a20 <TIM_OC2_SetConfig+0x108>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d007      	beq.n	80089c4 <TIM_OC2_SetConfig+0xac>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a1b      	ldr	r2, [pc, #108]	; (8008a24 <TIM_OC2_SetConfig+0x10c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d003      	beq.n	80089c4 <TIM_OC2_SetConfig+0xac>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a1a      	ldr	r2, [pc, #104]	; (8008a28 <TIM_OC2_SetConfig+0x110>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d113      	bne.n	80089ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4313      	orrs	r3, r2
 80089de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	feff8fff 	.word	0xfeff8fff
 8008a18:	40010000 	.word	0x40010000
 8008a1c:	40010400 	.word	0x40010400
 8008a20:	40014000 	.word	0x40014000
 8008a24:	40014400 	.word	0x40014400
 8008a28:	40014800 	.word	0x40014800

08008a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4b33      	ldr	r3, [pc, #204]	; (8008b24 <TIM_OC3_SetConfig+0xf8>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0303 	bic.w	r3, r3, #3
 8008a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	021b      	lsls	r3, r3, #8
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a28      	ldr	r2, [pc, #160]	; (8008b28 <TIM_OC3_SetConfig+0xfc>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d003      	beq.n	8008a92 <TIM_OC3_SetConfig+0x66>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a27      	ldr	r2, [pc, #156]	; (8008b2c <TIM_OC3_SetConfig+0x100>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d10d      	bne.n	8008aae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	021b      	lsls	r3, r3, #8
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a1d      	ldr	r2, [pc, #116]	; (8008b28 <TIM_OC3_SetConfig+0xfc>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d00f      	beq.n	8008ad6 <TIM_OC3_SetConfig+0xaa>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a1c      	ldr	r2, [pc, #112]	; (8008b2c <TIM_OC3_SetConfig+0x100>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d00b      	beq.n	8008ad6 <TIM_OC3_SetConfig+0xaa>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1b      	ldr	r2, [pc, #108]	; (8008b30 <TIM_OC3_SetConfig+0x104>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d007      	beq.n	8008ad6 <TIM_OC3_SetConfig+0xaa>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1a      	ldr	r2, [pc, #104]	; (8008b34 <TIM_OC3_SetConfig+0x108>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d003      	beq.n	8008ad6 <TIM_OC3_SetConfig+0xaa>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a19      	ldr	r2, [pc, #100]	; (8008b38 <TIM_OC3_SetConfig+0x10c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d113      	bne.n	8008afe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	621a      	str	r2, [r3, #32]
}
 8008b18:	bf00      	nop
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	fffeff8f 	.word	0xfffeff8f
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40010400 	.word	0x40010400
 8008b30:	40014000 	.word	0x40014000
 8008b34:	40014400 	.word	0x40014400
 8008b38:	40014800 	.word	0x40014800

08008b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <TIM_OC4_SetConfig+0xbc>)
 8008b68:	4013      	ands	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	031b      	lsls	r3, r3, #12
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a19      	ldr	r2, [pc, #100]	; (8008bfc <TIM_OC4_SetConfig+0xc0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00f      	beq.n	8008bbc <TIM_OC4_SetConfig+0x80>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a18      	ldr	r2, [pc, #96]	; (8008c00 <TIM_OC4_SetConfig+0xc4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d00b      	beq.n	8008bbc <TIM_OC4_SetConfig+0x80>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a17      	ldr	r2, [pc, #92]	; (8008c04 <TIM_OC4_SetConfig+0xc8>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d007      	beq.n	8008bbc <TIM_OC4_SetConfig+0x80>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a16      	ldr	r2, [pc, #88]	; (8008c08 <TIM_OC4_SetConfig+0xcc>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d003      	beq.n	8008bbc <TIM_OC4_SetConfig+0x80>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a15      	ldr	r2, [pc, #84]	; (8008c0c <TIM_OC4_SetConfig+0xd0>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d109      	bne.n	8008bd0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	019b      	lsls	r3, r3, #6
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	feff8fff 	.word	0xfeff8fff
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40010400 	.word	0x40010400
 8008c04:	40014000 	.word	0x40014000
 8008c08:	40014400 	.word	0x40014400
 8008c0c:	40014800 	.word	0x40014800

08008c10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	4b21      	ldr	r3, [pc, #132]	; (8008cc0 <TIM_OC5_SetConfig+0xb0>)
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	041b      	lsls	r3, r3, #16
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a18      	ldr	r2, [pc, #96]	; (8008cc4 <TIM_OC5_SetConfig+0xb4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d00f      	beq.n	8008c86 <TIM_OC5_SetConfig+0x76>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <TIM_OC5_SetConfig+0xb8>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00b      	beq.n	8008c86 <TIM_OC5_SetConfig+0x76>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a16      	ldr	r2, [pc, #88]	; (8008ccc <TIM_OC5_SetConfig+0xbc>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d007      	beq.n	8008c86 <TIM_OC5_SetConfig+0x76>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a15      	ldr	r2, [pc, #84]	; (8008cd0 <TIM_OC5_SetConfig+0xc0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d003      	beq.n	8008c86 <TIM_OC5_SetConfig+0x76>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a14      	ldr	r2, [pc, #80]	; (8008cd4 <TIM_OC5_SetConfig+0xc4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d109      	bne.n	8008c9a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	021b      	lsls	r3, r3, #8
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	621a      	str	r2, [r3, #32]
}
 8008cb4:	bf00      	nop
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	fffeff8f 	.word	0xfffeff8f
 8008cc4:	40010000 	.word	0x40010000
 8008cc8:	40010400 	.word	0x40010400
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	40014400 	.word	0x40014400
 8008cd4:	40014800 	.word	0x40014800

08008cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <TIM_OC6_SetConfig+0xb4>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	051b      	lsls	r3, r3, #20
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a19      	ldr	r2, [pc, #100]	; (8008d90 <TIM_OC6_SetConfig+0xb8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00f      	beq.n	8008d50 <TIM_OC6_SetConfig+0x78>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a18      	ldr	r2, [pc, #96]	; (8008d94 <TIM_OC6_SetConfig+0xbc>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00b      	beq.n	8008d50 <TIM_OC6_SetConfig+0x78>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a17      	ldr	r2, [pc, #92]	; (8008d98 <TIM_OC6_SetConfig+0xc0>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d007      	beq.n	8008d50 <TIM_OC6_SetConfig+0x78>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a16      	ldr	r2, [pc, #88]	; (8008d9c <TIM_OC6_SetConfig+0xc4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d003      	beq.n	8008d50 <TIM_OC6_SetConfig+0x78>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a15      	ldr	r2, [pc, #84]	; (8008da0 <TIM_OC6_SetConfig+0xc8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d109      	bne.n	8008d64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	029b      	lsls	r3, r3, #10
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	feff8fff 	.word	0xfeff8fff
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40010400 	.word	0x40010400
 8008d98:	40014000 	.word	0x40014000
 8008d9c:	40014400 	.word	0x40014400
 8008da0:	40014800 	.word	0x40014800

08008da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f003 031f 	and.w	r3, r3, #31
 8008db6:	2201      	movs	r2, #1
 8008db8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a1a      	ldr	r2, [r3, #32]
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	401a      	ands	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6a1a      	ldr	r2, [r3, #32]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f003 031f 	and.w	r3, r3, #31
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	621a      	str	r2, [r3, #32]
}
 8008de2:	bf00      	nop
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d101      	bne.n	8008e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e04:	2302      	movs	r3, #2
 8008e06:	e06d      	b.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a30      	ldr	r2, [pc, #192]	; (8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d004      	beq.n	8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a2f      	ldr	r2, [pc, #188]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d108      	bne.n	8008e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d022      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7a:	d01d      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1d      	ldr	r2, [pc, #116]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d018      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1c      	ldr	r2, [pc, #112]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d013      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1a      	ldr	r2, [pc, #104]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00e      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a15      	ldr	r2, [pc, #84]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d009      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a16      	ldr	r2, [pc, #88]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a15      	ldr	r2, [pc, #84]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d10c      	bne.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40010400 	.word	0x40010400
 8008ef8:	40000400 	.word	0x40000400
 8008efc:	40000800 	.word	0x40000800
 8008f00:	40000c00 	.word	0x40000c00
 8008f04:	40001800 	.word	0x40001800
 8008f08:	40014000 	.word	0x40014000

08008f0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e065      	b.n	8008ff4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	041b      	lsls	r3, r3, #16
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a16      	ldr	r2, [pc, #88]	; (8009000 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d004      	beq.n	8008fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a14      	ldr	r2, [pc, #80]	; (8009004 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d115      	bne.n	8008fe2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	051b      	lsls	r3, r3, #20
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	40010000 	.word	0x40010000
 8009004:	40010400 	.word	0x40010400

08009008 <__libc_init_array>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4d0d      	ldr	r5, [pc, #52]	; (8009040 <__libc_init_array+0x38>)
 800900c:	4c0d      	ldr	r4, [pc, #52]	; (8009044 <__libc_init_array+0x3c>)
 800900e:	1b64      	subs	r4, r4, r5
 8009010:	10a4      	asrs	r4, r4, #2
 8009012:	2600      	movs	r6, #0
 8009014:	42a6      	cmp	r6, r4
 8009016:	d109      	bne.n	800902c <__libc_init_array+0x24>
 8009018:	4d0b      	ldr	r5, [pc, #44]	; (8009048 <__libc_init_array+0x40>)
 800901a:	4c0c      	ldr	r4, [pc, #48]	; (800904c <__libc_init_array+0x44>)
 800901c:	f000 f820 	bl	8009060 <_init>
 8009020:	1b64      	subs	r4, r4, r5
 8009022:	10a4      	asrs	r4, r4, #2
 8009024:	2600      	movs	r6, #0
 8009026:	42a6      	cmp	r6, r4
 8009028:	d105      	bne.n	8009036 <__libc_init_array+0x2e>
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009030:	4798      	blx	r3
 8009032:	3601      	adds	r6, #1
 8009034:	e7ee      	b.n	8009014 <__libc_init_array+0xc>
 8009036:	f855 3b04 	ldr.w	r3, [r5], #4
 800903a:	4798      	blx	r3
 800903c:	3601      	adds	r6, #1
 800903e:	e7f2      	b.n	8009026 <__libc_init_array+0x1e>
 8009040:	08009090 	.word	0x08009090
 8009044:	08009090 	.word	0x08009090
 8009048:	08009090 	.word	0x08009090
 800904c:	08009094 	.word	0x08009094

08009050 <memset>:
 8009050:	4402      	add	r2, r0
 8009052:	4603      	mov	r3, r0
 8009054:	4293      	cmp	r3, r2
 8009056:	d100      	bne.n	800905a <memset+0xa>
 8009058:	4770      	bx	lr
 800905a:	f803 1b01 	strb.w	r1, [r3], #1
 800905e:	e7f9      	b.n	8009054 <memset+0x4>

08009060 <_init>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr

0800906c <_fini>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	bf00      	nop
 8009070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009072:	bc08      	pop	{r3}
 8009074:	469e      	mov	lr, r3
 8009076:	4770      	bx	lr
