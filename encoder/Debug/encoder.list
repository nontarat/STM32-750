
encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002558  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800283c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  24000010  0800284c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000ec  0800284c  000200ec  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c99e  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000019ac  00000000  00000000  0002ca1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bc8  00000000  00000000  0002e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000919  00000000  00000000  0002ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031271  00000000  00000000  0002f8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d493  00000000  00000000  00060b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014299b  00000000  00000000  0006dfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003140  00000000  00000000  001b0950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000003f  00000000  00000000  001b3a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800280c 	.word	0x0800280c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800280c 	.word	0x0800280c

0800030c <HAL_TIM_IC_CaptureCallback>:
int16_t position_tim4 = 0;

int speed3 =0;
int speed4 =0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	   if (htim == &htim3) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a1a      	ldr	r2, [pc, #104]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d113      	bne.n	8000344 <HAL_TIM_IC_CaptureCallback+0x38>
	        counter_tim3 = __HAL_TIM_GET_COUNTER(htim);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000322:	4a18      	ldr	r2, [pc, #96]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000324:	6013      	str	r3, [r2, #0]
	        count_tim3 = (int16_t)counter_tim3;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	b21a      	sxth	r2, r3
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800032e:	801a      	strh	r2, [r3, #0]
	        position_tim3 = count_tim3 / 4;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000336:	2b00      	cmp	r3, #0
 8000338:	da00      	bge.n	800033c <HAL_TIM_IC_CaptureCallback+0x30>
 800033a:	3303      	adds	r3, #3
 800033c:	109b      	asrs	r3, r3, #2
 800033e:	b21a      	sxth	r2, r3
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_TIM_IC_CaptureCallback+0x80>)
 8000342:	801a      	strh	r2, [r3, #0]
	    }

	   if (htim == &htim4) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d113      	bne.n	8000374 <HAL_TIM_IC_CaptureCallback+0x68>
	        counter_tim4 = __HAL_TIM_GET_COUNTER(htim);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000352:	4a10      	ldr	r2, [pc, #64]	; (8000394 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000354:	6013      	str	r3, [r2, #0]
	        count_tim4 = (int16_t)counter_tim4;
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	b21a      	sxth	r2, r3
 800035c:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800035e:	801a      	strh	r2, [r3, #0]
	        position_tim4 = count_tim4 / 4;
 8000360:	4b0d      	ldr	r3, [pc, #52]	; (8000398 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000366:	2b00      	cmp	r3, #0
 8000368:	da00      	bge.n	800036c <HAL_TIM_IC_CaptureCallback+0x60>
 800036a:	3303      	adds	r3, #3
 800036c:	109b      	asrs	r3, r3, #2
 800036e:	b21a      	sxth	r2, r3
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000372:	801a      	strh	r2, [r3, #0]
	    }
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	2400002c 	.word	0x2400002c
 8000384:	240000c4 	.word	0x240000c4
 8000388:	240000cc 	.word	0x240000cc
 800038c:	240000d0 	.word	0x240000d0
 8000390:	24000078 	.word	0x24000078
 8000394:	240000c8 	.word	0x240000c8
 8000398:	240000ce 	.word	0x240000ce
 800039c:	240000d2 	.word	0x240000d2

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 fb56 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a8:	f000 f814 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ac:	f000 f92e 	bl	800060c <MX_GPIO_Init>
  MX_TIM4_Init();
 80003b0:	f000 f8d6 	bl	8000560 <MX_TIM4_Init>
  MX_TIM3_Init();
 80003b4:	f000 f87e 	bl	80004b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80003b8:	213c      	movs	r1, #60	; 0x3c
 80003ba:	4804      	ldr	r0, [pc, #16]	; (80003cc <main+0x2c>)
 80003bc:	f001 fe7e 	bl	80020bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80003c0:	213c      	movs	r1, #60	; 0x3c
 80003c2:	4803      	ldr	r0, [pc, #12]	; (80003d0 <main+0x30>)
 80003c4:	f001 fe7a 	bl	80020bc <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <main+0x28>
 80003ca:	bf00      	nop
 80003cc:	2400002c 	.word	0x2400002c
 80003d0:	24000078 	.word	0x24000078

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b09c      	sub	sp, #112	; 0x70
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003de:	224c      	movs	r2, #76	; 0x4c
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 f9e6 	bl	80027b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2220      	movs	r2, #32
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 f9e0 	bl	80027b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003f4:	2002      	movs	r0, #2
 80003f6:	f000 fe77 	bl	80010e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003fa:	2300      	movs	r3, #0
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <SystemClock_Config+0xdc>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000406:	4a2a      	ldr	r2, [pc, #168]	; (80004b0 <SystemClock_Config+0xdc>)
 8000408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <SystemClock_Config+0xdc>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800041a:	bf00      	nop
 800041c:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <SystemClock_Config+0xdc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000428:	d1f8      	bne.n	800041c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042a:	2302      	movs	r3, #2
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800042e:	2301      	movs	r3, #1
 8000430:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000432:	2340      	movs	r3, #64	; 0x40
 8000434:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043a:	2300      	movs	r3, #0
 800043c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800043e:	2304      	movs	r3, #4
 8000440:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 13;
 8000442:	230d      	movs	r3, #13
 8000444:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 3;
 8000446:	2303      	movs	r3, #3
 8000448:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800044a:	2302      	movs	r3, #2
 800044c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800044e:	2302      	movs	r3, #2
 8000450:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000452:	230c      	movs	r3, #12
 8000454:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000456:	2300      	movs	r3, #0
 8000458:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800045a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800045e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fe79 	bl	800115c <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000470:	f000 f914 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	233f      	movs	r3, #63	; 0x3f
 8000476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2303      	movs	r3, #3
 800047a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2102      	movs	r1, #2
 8000498:	4618      	mov	r0, r3
 800049a:	f001 fa39 	bl	8001910 <HAL_RCC_ClockConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80004a4:	f000 f8fa 	bl	800069c <Error_Handler>
  }
}
 80004a8:	bf00      	nop
 80004aa:	3770      	adds	r7, #112	; 0x70
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	58024800 	.word	0x58024800

080004b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	; 0x30
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	2224      	movs	r2, #36	; 0x24
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f002 f976 	bl	80027b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	463b      	mov	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004d2:	4b21      	ldr	r3, [pc, #132]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004d4:	4a21      	ldr	r2, [pc, #132]	; (800055c <MX_TIM3_Init+0xa8>)
 80004d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004d8:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f2:	4b19      	ldr	r3, [pc, #100]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004f8:	2303      	movs	r3, #3
 80004fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80004fc:	2302      	movs	r3, #2
 80004fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000500:	2301      	movs	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800050c:	2302      	movs	r3, #2
 800050e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000510:	2301      	movs	r3, #1
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4619      	mov	r1, r3
 8000522:	480d      	ldr	r0, [pc, #52]	; (8000558 <MX_TIM3_Init+0xa4>)
 8000524:	f001 fd24 	bl	8001f70 <HAL_TIM_Encoder_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800052e:	f000 f8b5 	bl	800069c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000532:	2300      	movs	r3, #0
 8000534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	4619      	mov	r1, r3
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <MX_TIM3_Init+0xa4>)
 8000540:	f002 f87e 	bl	8002640 <HAL_TIMEx_MasterConfigSynchronization>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800054a:	f000 f8a7 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	3730      	adds	r7, #48	; 0x30
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2400002c 	.word	0x2400002c
 800055c:	40000400 	.word	0x40000400

08000560 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2224      	movs	r2, #36	; 0x24
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 f920 	bl	80027b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <MX_TIM4_Init+0xa4>)
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <MX_TIM4_Init+0xa8>)
 8000582:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <MX_TIM4_Init+0xa4>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_TIM4_Init+0xa4>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <MX_TIM4_Init+0xa4>)
 8000592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000596:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_TIM4_Init+0xa4>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <MX_TIM4_Init+0xa4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005a4:	2303      	movs	r3, #3
 80005a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005ac:	2301      	movs	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005bc:	2301      	movs	r3, #1
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	4619      	mov	r1, r3
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <MX_TIM4_Init+0xa4>)
 80005d0:	f001 fcce 	bl	8001f70 <HAL_TIM_Encoder_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80005da:	f000 f85f 	bl	800069c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <MX_TIM4_Init+0xa4>)
 80005ec:	f002 f828 	bl	8002640 <HAL_TIMEx_MasterConfigSynchronization>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80005f6:	f000 f851 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3730      	adds	r7, #48	; 0x30
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	24000078 	.word	0x24000078
 8000608:	40000800 	.word	0x40000800

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_GPIO_Init+0x8c>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000618:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <MX_GPIO_Init+0x8c>)
 800061a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_GPIO_Init+0x8c>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0x8c>)
 8000632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <MX_GPIO_Init+0x8c>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_GPIO_Init+0x8c>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000646:	f003 0308 	and.w	r3, r3, #8
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_GPIO_Init+0x8c>)
 8000650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <MX_GPIO_Init+0x8c>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_GPIO_Init+0x8c>)
 8000660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_GPIO_Init+0x8c>)
 800066e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <MX_GPIO_Init+0x8c>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_GPIO_Init+0x8c>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	58024400 	.word	0x58024400

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_MspInit+0x30>)
 80006b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_MspInit+0x30>)
 80006b6:	f043 0302 	orr.w	r3, r3, #2
 80006ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x30>)
 80006c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	58024400 	.word	0x58024400

080006dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a3c      	ldr	r2, [pc, #240]	; (80007ec <HAL_TIM_Encoder_MspInit+0x110>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d136      	bne.n	800076c <HAL_TIM_Encoder_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006fe:	4b3c      	ldr	r3, [pc, #240]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 8000700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000704:	4a3a      	ldr	r2, [pc, #232]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800070e:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 8000710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000722:	4a33      	ldr	r2, [pc, #204]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072c:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4(NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800073a:	2330      	movs	r3, #48	; 0x30
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800074a:	2302      	movs	r3, #2
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4827      	ldr	r0, [pc, #156]	; (80007f4 <HAL_TIM_Encoder_MspInit+0x118>)
 8000756:	f000 fb1f 	bl	8000d98 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	201d      	movs	r0, #29
 8000760:	f000 fae5 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000764:	201d      	movs	r0, #29
 8000766:	f000 fafc 	bl	8000d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800076a:	e03b      	b.n	80007e4 <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM4)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d136      	bne.n	80007e4 <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 8000778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800077c:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 8000788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_TIM_Encoder_MspInit+0x114>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	480b      	ldr	r0, [pc, #44]	; (80007fc <HAL_TIM_Encoder_MspInit+0x120>)
 80007d0:	f000 fae2 	bl	8000d98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	201e      	movs	r0, #30
 80007da:	f000 faa8 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007de:	201e      	movs	r0, #30
 80007e0:	f000 fabf 	bl	8000d62 <HAL_NVIC_EnableIRQ>
}
 80007e4:	bf00      	nop
 80007e6:	3730      	adds	r7, #48	; 0x30
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40000400 	.word	0x40000400
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58020400 	.word	0x58020400
 80007f8:	40000800 	.word	0x40000800
 80007fc:	58020c00 	.word	0x58020c00

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx3++;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <SysTick_Handler+0x80>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <SysTick_Handler+0x80>)
 8000854:	6013      	str	r3, [r2, #0]

	if (indx3 == 500)
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <SysTick_Handler+0x80>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800085e:	d112      	bne.n	8000886 <SysTick_Handler+0x3e>
	{
		speed3 = ((position_tim3 - oldpos3)*2);  // speed in clicks/sec
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <SysTick_Handler+0x84>)
 8000862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000866:	461a      	mov	r2, r3
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <SysTick_Handler+0x88>)
 800086a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <SysTick_Handler+0x8c>)
 8000874:	6013      	str	r3, [r2, #0]
		oldpos3 = position_tim3;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <SysTick_Handler+0x84>)
 8000878:	f9b3 2000 	ldrsh.w	r2, [r3]
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <SysTick_Handler+0x88>)
 800087e:	801a      	strh	r2, [r3, #0]
		indx3 = 0;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <SysTick_Handler+0x80>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
	}

	indx4++;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <SysTick_Handler+0x90>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <SysTick_Handler+0x90>)
 800088e:	6013      	str	r3, [r2, #0]
	if(indx4==500)
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <SysTick_Handler+0x90>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000898:	d112      	bne.n	80008c0 <SysTick_Handler+0x78>
	{
		speed4 = ((position_tim4 - oldpos4)*2);
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <SysTick_Handler+0x94>)
 800089c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <SysTick_Handler+0x98>)
 80008a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <SysTick_Handler+0x9c>)
 80008ae:	6013      	str	r3, [r2, #0]
		oldpos4 = position_tim4;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <SysTick_Handler+0x94>)
 80008b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <SysTick_Handler+0x98>)
 80008b8:	801a      	strh	r2, [r3, #0]
		indx4 = 0;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <SysTick_Handler+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c0:	f000 f93a 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	240000e0 	.word	0x240000e0
 80008cc:	240000d0 	.word	0x240000d0
 80008d0:	240000dc 	.word	0x240000dc
 80008d4:	240000d4 	.word	0x240000d4
 80008d8:	240000e4 	.word	0x240000e4
 80008dc:	240000d2 	.word	0x240000d2
 80008e0:	240000de 	.word	0x240000de
 80008e4:	240000d8 	.word	0x240000d8

080008e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <TIM3_IRQHandler+0x10>)
 80008ee:	f001 fc93 	bl	8002218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2400002c 	.word	0x2400002c

080008fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <TIM4_IRQHandler+0x10>)
 8000902:	f001 fc89 	bl	8002218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	24000078 	.word	0x24000078

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <SystemInit+0xd0>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a31      	ldr	r2, [pc, #196]	; (80009e0 <SystemInit+0xd0>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000924:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <SystemInit+0xd4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 030f 	and.w	r3, r3, #15
 800092c:	2b06      	cmp	r3, #6
 800092e:	d807      	bhi.n	8000940 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <SystemInit+0xd4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f023 030f 	bic.w	r3, r3, #15
 8000938:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <SystemInit+0xd4>)
 800093a:	f043 0307 	orr.w	r3, r3, #7
 800093e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <SystemInit+0xd8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a28      	ldr	r2, [pc, #160]	; (80009e8 <SystemInit+0xd8>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <SystemInit+0xd8>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <SystemInit+0xd8>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4924      	ldr	r1, [pc, #144]	; (80009e8 <SystemInit+0xd8>)
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <SystemInit+0xdc>)
 800095a:	4013      	ands	r3, r2
 800095c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <SystemInit+0xd4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	2b00      	cmp	r3, #0
 8000968:	d007      	beq.n	800097a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <SystemInit+0xd4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f023 030f 	bic.w	r3, r3, #15
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <SystemInit+0xd4>)
 8000974:	f043 0307 	orr.w	r3, r3, #7
 8000978:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <SystemInit+0xd8>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <SystemInit+0xd8>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <SystemInit+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <SystemInit+0xd8>)
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <SystemInit+0xe0>)
 8000990:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <SystemInit+0xd8>)
 8000994:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <SystemInit+0xe4>)
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <SystemInit+0xd8>)
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <SystemInit+0xe8>)
 800099c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <SystemInit+0xd8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <SystemInit+0xd8>)
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <SystemInit+0xe8>)
 80009a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <SystemInit+0xd8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <SystemInit+0xd8>)
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <SystemInit+0xe8>)
 80009b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <SystemInit+0xd8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <SystemInit+0xd8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <SystemInit+0xd8>)
 80009c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <SystemInit+0xd8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <SystemInit+0xec>)
 80009d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00
 80009e4:	52002000 	.word	0x52002000
 80009e8:	58024400 	.word	0x58024400
 80009ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80009f0:	02020200 	.word	0x02020200
 80009f4:	01ff0000 	.word	0x01ff0000
 80009f8:	01010280 	.word	0x01010280
 80009fc:	52004000 	.word	0x52004000

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a04:	f7ff ff84 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f001 fec9 	bl	80027c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a32:	f7ff fcb5 	bl	80003a0 <main>
  bx  lr
 8000a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a38:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000a3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a40:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a44:	0800283c 	.word	0x0800283c
  ldr r2, =_sbss
 8000a48:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a4c:	240000ec 	.word	0x240000ec

08000a50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC3_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	f000 f95c 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a60:	f001 f90c 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8000a64:	4602      	mov	r2, r0
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_Init+0x68>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	4913      	ldr	r1, [pc, #76]	; (8000ac0 <HAL_Init+0x6c>)
 8000a72:	5ccb      	ldrb	r3, [r1, r3]
 8000a74:	f003 031f 	and.w	r3, r3, #31
 8000a78:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_Init+0x68>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_Init+0x6c>)
 8000a88:	5cd3      	ldrb	r3, [r2, r3]
 8000a8a:	f003 031f 	and.w	r3, r3, #31
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	fa22 f303 	lsr.w	r3, r2, r3
 8000a94:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <HAL_Init+0x70>)
 8000a96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_Init+0x74>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9e:	200f      	movs	r0, #15
 8000aa0:	f000 f814 	bl	8000acc <HAL_InitTick>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e002      	b.n	8000ab4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aae:	f7ff fdfb 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	58024400 	.word	0x58024400
 8000ac0:	08002824 	.word	0x08002824
 8000ac4:	24000004 	.word	0x24000004
 8000ac8:	24000000 	.word	0x24000000

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_InitTick+0x60>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d101      	bne.n	8000ae0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e021      	b.n	8000b24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_InitTick+0x64>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_InitTick+0x60>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f941 	bl	8000d7e <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f90b 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x68>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2400000c 	.word	0x2400000c
 8000b30:	24000000 	.word	0x24000000
 8000b34:	24000008 	.word	0x24000008

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2400000c 	.word	0x2400000c
 8000b5c:	240000e8 	.word	0x240000e8

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	240000e8 	.word	0x240000e8

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	05fa0000 	.word	0x05fa0000

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff40 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff90 	bl	8000c6c <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5f 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff33 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffa4 	bl	8000cd4 <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000da6:	4b86      	ldr	r3, [pc, #536]	; (8000fc0 <HAL_GPIO_Init+0x228>)
 8000da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000daa:	e18c      	b.n	80010c6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 817e 	beq.w	80010c0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d005      	beq.n	8000ddc <HAL_GPIO_Init+0x44>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d130      	bne.n	8000e3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e12:	2201      	movs	r2, #1
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	f003 0201 	and.w	r2, r3, #1
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d017      	beq.n	8000e7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d123      	bne.n	8000ece <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	69b9      	ldr	r1, [r7, #24]
 8000eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0203 	and.w	r2, r3, #3
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 80d8 	beq.w	80010c0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f10:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <HAL_GPIO_Init+0x22c>)
 8000f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f16:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <HAL_GPIO_Init+0x22c>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f20:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <HAL_GPIO_Init+0x22c>)
 8000f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2e:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <HAL_GPIO_Init+0x230>)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <HAL_GPIO_Init+0x234>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d04a      	beq.n	8000ff0 <HAL_GPIO_Init+0x258>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <HAL_GPIO_Init+0x238>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x222>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x23c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x21e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_GPIO_Init+0x240>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x21a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_GPIO_Init+0x244>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x216>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <HAL_GPIO_Init+0x248>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x212>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_GPIO_Init+0x24c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x20e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <HAL_GPIO_Init+0x250>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x20a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a15      	ldr	r2, [pc, #84]	; (8000fec <HAL_GPIO_Init+0x254>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x206>
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	e029      	b.n	8000ff2 <HAL_GPIO_Init+0x25a>
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	e027      	b.n	8000ff2 <HAL_GPIO_Init+0x25a>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e025      	b.n	8000ff2 <HAL_GPIO_Init+0x25a>
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e023      	b.n	8000ff2 <HAL_GPIO_Init+0x25a>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e021      	b.n	8000ff2 <HAL_GPIO_Init+0x25a>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e01f      	b.n	8000ff2 <HAL_GPIO_Init+0x25a>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e01d      	b.n	8000ff2 <HAL_GPIO_Init+0x25a>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e01b      	b.n	8000ff2 <HAL_GPIO_Init+0x25a>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e019      	b.n	8000ff2 <HAL_GPIO_Init+0x25a>
 8000fbe:	bf00      	nop
 8000fc0:	58000080 	.word	0x58000080
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58000400 	.word	0x58000400
 8000fcc:	58020000 	.word	0x58020000
 8000fd0:	58020400 	.word	0x58020400
 8000fd4:	58020800 	.word	0x58020800
 8000fd8:	58020c00 	.word	0x58020c00
 8000fdc:	58021000 	.word	0x58021000
 8000fe0:	58021400 	.word	0x58021400
 8000fe4:	58021800 	.word	0x58021800
 8000fe8:	58021c00 	.word	0x58021c00
 8000fec:	58022400 	.word	0x58022400
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001002:	4938      	ldr	r1, [pc, #224]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800103e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	3301      	adds	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f47f ae6b 	bne.w	8000dac <HAL_GPIO_Init+0x14>
  }
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3724      	adds	r7, #36	; 0x24
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	58000400 	.word	0x58000400

080010e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d00a      	beq.n	8001112 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	d001      	beq.n	800110e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e01f      	b.n	800114e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e01d      	b.n	800114e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f023 0207 	bic.w	r2, r3, #7
 800111a:	490f      	ldr	r1, [pc, #60]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4313      	orrs	r3, r2
 8001120:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001122:	f7ff fd1d 	bl	8000b60 <HAL_GetTick>
 8001126:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001128:	e009      	b.n	800113e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800112a:	f7ff fd19 	bl	8000b60 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001138:	d901      	bls.n	800113e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e007      	b.n	800114e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800114a:	d1ee      	bne.n	800112a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58024800 	.word	0x58024800

0800115c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e3c8      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8087 	beq.w	800128a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800117c:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001186:	4b86      	ldr	r3, [pc, #536]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	2b10      	cmp	r3, #16
 8001190:	d007      	beq.n	80011a2 <HAL_RCC_OscConfig+0x46>
 8001192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001194:	2b18      	cmp	r3, #24
 8001196:	d110      	bne.n	80011ba <HAL_RCC_OscConfig+0x5e>
 8001198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d10b      	bne.n	80011ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a2:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d06c      	beq.n	8001288 <HAL_RCC_OscConfig+0x12c>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d168      	bne.n	8001288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e3a2      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x76>
 80011c4:	4b76      	ldr	r3, [pc, #472]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a75      	ldr	r2, [pc, #468]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80011ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e02e      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x98>
 80011da:	4b71      	ldr	r3, [pc, #452]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a70      	ldr	r2, [pc, #448]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80011e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b6e      	ldr	r3, [pc, #440]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6d      	ldr	r2, [pc, #436]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80011ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0xbc>
 80011fe:	4b68      	ldr	r3, [pc, #416]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a67      	ldr	r2, [pc, #412]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b65      	ldr	r3, [pc, #404]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a64      	ldr	r2, [pc, #400]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 8001218:	4b61      	ldr	r3, [pc, #388]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a60      	ldr	r2, [pc, #384]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b5e      	ldr	r3, [pc, #376]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fc92 	bl	8000b60 <HAL_GetTick>
 800123c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fc8e 	bl	8000b60 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e356      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001252:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xe4>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fc7e 	bl	8000b60 <HAL_GetTick>
 8001264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fc7a 	bl	8000b60 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e342      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800127a:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x10c>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 808c 	beq.w	80013b0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <HAL_RCC_OscConfig+0x162>
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	2b18      	cmp	r3, #24
 80012b2:	d137      	bne.n	8001324 <HAL_RCC_OscConfig+0x1c8>
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d132      	bne.n	8001324 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x17a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e314      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012d6:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 0219 	bic.w	r2, r3, #25
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	492f      	ldr	r1, [pc, #188]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc3a 	bl	8000b60 <HAL_GetTick>
 80012ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc36 	bl	8000b60 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e2fe      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	061b      	lsls	r3, r3, #24
 800131c:	4920      	ldr	r1, [pc, #128]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001322:	e045      	b.n	80013b0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d026      	beq.n	800137a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 0219 	bic.w	r2, r3, #25
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4919      	ldr	r1, [pc, #100]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff fc0f 	bl	8000b60 <HAL_GetTick>
 8001342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fc0b 	bl	8000b60 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e2d3      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	061b      	lsls	r3, r3, #24
 8001372:	490b      	ldr	r1, [pc, #44]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	e01a      	b.n	80013b0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_RCC_OscConfig+0x244>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7ff fbeb 	bl	8000b60 <HAL_GetTick>
 800138a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fbe7 	bl	8000b60 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d903      	bls.n	80013a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e2af      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
 80013a0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013a4:	4b96      	ldr	r3, [pc, #600]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ee      	bne.n	800138e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d06a      	beq.n	8001492 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013bc:	4b90      	ldr	r3, [pc, #576]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013c4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013c6:	4b8e      	ldr	r3, [pc, #568]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d007      	beq.n	80013e2 <HAL_RCC_OscConfig+0x286>
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b18      	cmp	r3, #24
 80013d6:	d11b      	bne.n	8001410 <HAL_RCC_OscConfig+0x2b4>
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013e2:	4b87      	ldr	r3, [pc, #540]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x29e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	2b80      	cmp	r3, #128	; 0x80
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e282      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013fa:	4b81      	ldr	r3, [pc, #516]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	061b      	lsls	r3, r3, #24
 8001408:	497d      	ldr	r1, [pc, #500]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 800140a:	4313      	orrs	r3, r2
 800140c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800140e:	e040      	b.n	8001492 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d023      	beq.n	8001460 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001418:	4b79      	ldr	r3, [pc, #484]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a78      	ldr	r2, [pc, #480]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 800141e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fb9c 	bl	8000b60 <HAL_GetTick>
 8001428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800142c:	f7ff fb98 	bl	8000b60 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e260      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800143e:	4b70      	ldr	r3, [pc, #448]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800144a:	4b6d      	ldr	r3, [pc, #436]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	061b      	lsls	r3, r3, #24
 8001458:	4969      	ldr	r1, [pc, #420]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 800145a:	4313      	orrs	r3, r2
 800145c:	60cb      	str	r3, [r1, #12]
 800145e:	e018      	b.n	8001492 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001460:	4b67      	ldr	r3, [pc, #412]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a66      	ldr	r2, [pc, #408]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 8001466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800146a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fb78 	bl	8000b60 <HAL_GetTick>
 8001470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001474:	f7ff fb74 	bl	8000b60 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e23c      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001486:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d036      	beq.n	800150c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d019      	beq.n	80014da <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4b56      	ldr	r3, [pc, #344]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80014a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014aa:	4a55      	ldr	r2, [pc, #340]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fb55 	bl	8000b60 <HAL_GetTick>
 80014b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fb51 	bl	8000b60 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e219      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x35e>
 80014d8:	e018      	b.n	800150c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014da:	4b49      	ldr	r3, [pc, #292]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	4a48      	ldr	r2, [pc, #288]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb3b 	bl	8000b60 <HAL_GetTick>
 80014ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fb37 	bl	8000b60 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e1ff      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	2b00      	cmp	r3, #0
 8001516:	d036      	beq.n	8001586 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d019      	beq.n	8001554 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a36      	ldr	r2, [pc, #216]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 8001526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800152c:	f7ff fb18 	bl	8000b60 <HAL_GetTick>
 8001530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001534:	f7ff fb14 	bl	8000b60 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1dc      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001546:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x3d8>
 8001552:	e018      	b.n	8001586 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a29      	ldr	r2, [pc, #164]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 800155a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800155e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001560:	f7ff fafe 	bl	8000b60 <HAL_GetTick>
 8001564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001568:	f7ff fafa 	bl	8000b60 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1c2      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8086 	beq.w	80016a0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800159a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015a0:	f7ff fade 	bl	8000b60 <HAL_GetTick>
 80015a4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a8:	f7ff fada 	bl	8000b60 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1a2      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x480>
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	e032      	b.n	8001642 <HAL_RCC_OscConfig+0x4e6>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <HAL_RCC_OscConfig+0x4ac>
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a05      	ldr	r2, [pc, #20]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a02      	ldr	r2, [pc, #8]	; (8001600 <HAL_RCC_OscConfig+0x4a4>)
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
 80015fc:	e021      	b.n	8001642 <HAL_RCC_OscConfig+0x4e6>
 80015fe:	bf00      	nop
 8001600:	58024400 	.word	0x58024400
 8001604:	58024800 	.word	0x58024800
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b05      	cmp	r3, #5
 800160e:	d10c      	bne.n	800162a <HAL_RCC_OscConfig+0x4ce>
 8001610:	4b83      	ldr	r3, [pc, #524]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a82      	ldr	r2, [pc, #520]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
 800161c:	4b80      	ldr	r3, [pc, #512]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a7f      	ldr	r2, [pc, #508]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
 8001628:	e00b      	b.n	8001642 <HAL_RCC_OscConfig+0x4e6>
 800162a:	4b7d      	ldr	r3, [pc, #500]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	4a7c      	ldr	r2, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6713      	str	r3, [r2, #112]	; 0x70
 8001636:	4b7a      	ldr	r3, [pc, #488]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	4a79      	ldr	r2, [pc, #484]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d015      	beq.n	8001676 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff fa89 	bl	8000b60 <HAL_GetTick>
 800164e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff fa85 	bl	8000b60 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e14b      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001668:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ee      	beq.n	8001652 <HAL_RCC_OscConfig+0x4f6>
 8001674:	e014      	b.n	80016a0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fa73 	bl	8000b60 <HAL_GetTick>
 800167a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff fa6f 	bl	8000b60 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e135      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001694:	4b62      	ldr	r3, [pc, #392]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ee      	bne.n	800167e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 812a 	beq.w	80018fe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016aa:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016b2:	2b18      	cmp	r3, #24
 80016b4:	f000 80ba 	beq.w	800182c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	2b02      	cmp	r3, #2
 80016be:	f040 8095 	bne.w	80017ec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b57      	ldr	r3, [pc, #348]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a56      	ldr	r2, [pc, #344]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80016c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fa47 	bl	8000b60 <HAL_GetTick>
 80016d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fa43 	bl	8000b60 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e10b      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e8:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f0      	bne.n	80016d6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80016f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f8:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <HAL_RCC_OscConfig+0x6c8>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	430a      	orrs	r2, r1
 8001708:	4945      	ldr	r1, [pc, #276]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	628b      	str	r3, [r1, #40]	; 0x28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	3b01      	subs	r3, #1
 8001714:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	3b01      	subs	r3, #1
 800171e:	025b      	lsls	r3, r3, #9
 8001720:	b29b      	uxth	r3, r3
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001728:	3b01      	subs	r3, #1
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001736:	3b01      	subs	r3, #1
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800173e:	4938      	ldr	r1, [pc, #224]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001740:	4313      	orrs	r3, r2
 8001742:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	4a35      	ldr	r2, [pc, #212]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0x6cc>)
 8001756:	4013      	ands	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800175c:	00d2      	lsls	r2, r2, #3
 800175e:	4930      	ldr	r1, [pc, #192]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	f023 020c 	bic.w	r2, r3, #12
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	492b      	ldr	r1, [pc, #172]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001772:	4313      	orrs	r3, r2
 8001774:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	f023 0202 	bic.w	r2, r3, #2
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4927      	ldr	r1, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001784:	4313      	orrs	r3, r2
 8001786:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	4a24      	ldr	r2, [pc, #144]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	4a21      	ldr	r2, [pc, #132]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 800179a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80017a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a18      	ldr	r2, [pc, #96]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff f9cc 	bl	8000b60 <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff f9c8 	bl	8000b60 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e090      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x670>
 80017ea:	e088      	b.n	80018fe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 80017f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff f9b2 	bl	8000b60 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff f9ae 	bl	8000b60 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e076      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_RCC_OscConfig+0x6c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a4>
 800181e:	e06e      	b.n	80018fe <HAL_RCC_OscConfig+0x7a2>
 8001820:	58024400 	.word	0x58024400
 8001824:	fffffc0c 	.word	0xfffffc0c
 8001828:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <HAL_RCC_OscConfig+0x7ac>)
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <HAL_RCC_OscConfig+0x7ac>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	2b01      	cmp	r3, #1
 800183e:	d031      	beq.n	80018a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0203 	and.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d12a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d122      	bne.n	80018a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d11a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0a5b      	lsrs	r3, r3, #9
 8001872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d111      	bne.n	80018a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	0c1b      	lsrs	r3, r3, #16
 8001884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d108      	bne.n	80018a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	0e1b      	lsrs	r3, r3, #24
 8001896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e02b      	b.n	8001900 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_RCC_OscConfig+0x7ac>)
 80018aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d01f      	beq.n	80018fe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_OscConfig+0x7ac>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_RCC_OscConfig+0x7ac>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018ca:	f7ff f949 	bl	8000b60 <HAL_GetTick>
 80018ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80018d0:	bf00      	nop
 80018d2:	f7ff f945 	bl	8000b60 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	4293      	cmp	r3, r2
 80018dc:	d0f9      	beq.n	80018d2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_OscConfig+0x7ac>)
 80018e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_RCC_OscConfig+0x7b0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ea:	00d2      	lsls	r2, r2, #3
 80018ec:	4906      	ldr	r1, [pc, #24]	; (8001908 <HAL_RCC_OscConfig+0x7ac>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_OscConfig+0x7ac>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_RCC_OscConfig+0x7ac>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	58024400 	.word	0x58024400
 800190c:	ffff0007 	.word	0xffff0007

08001910 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e19c      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b8a      	ldr	r3, [pc, #552]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d910      	bls.n	8001954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b87      	ldr	r3, [pc, #540]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 020f 	bic.w	r2, r3, #15
 800193a:	4985      	ldr	r1, [pc, #532]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e184      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	4b7b      	ldr	r3, [pc, #492]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800196c:	429a      	cmp	r2, r3
 800196e:	d908      	bls.n	8001982 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001970:	4b78      	ldr	r3, [pc, #480]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4975      	ldr	r1, [pc, #468]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 800197e:	4313      	orrs	r3, r2
 8001980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d010      	beq.n	80019b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	4b70      	ldr	r3, [pc, #448]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800199a:	429a      	cmp	r2, r3
 800199c:	d908      	bls.n	80019b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800199e:	4b6d      	ldr	r3, [pc, #436]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	496a      	ldr	r1, [pc, #424]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d010      	beq.n	80019de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699a      	ldr	r2, [r3, #24]
 80019c0:	4b64      	ldr	r3, [pc, #400]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d908      	bls.n	80019de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019cc:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	495e      	ldr	r1, [pc, #376]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d010      	beq.n	8001a0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d908      	bls.n	8001a0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80019fa:	4b56      	ldr	r3, [pc, #344]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4953      	ldr	r1, [pc, #332]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d908      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f023 020f 	bic.w	r2, r3, #15
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4947      	ldr	r1, [pc, #284]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d055      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a46:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4940      	ldr	r1, [pc, #256]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a60:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d121      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0f6      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d115      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0ea      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0de      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d6      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	f023 0207 	bic.w	r2, r3, #7
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4925      	ldr	r1, [pc, #148]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac2:	f7ff f84d 	bl	8000b60 <HAL_GetTick>
 8001ac6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aca:	f7ff f849 	bl	8000b60 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0be      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d1eb      	bne.n	8001aca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d010      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d208      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f023 020f 	bic.w	r2, r3, #15
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	490e      	ldr	r1, [pc, #56]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d214      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 020f 	bic.w	r2, r3, #15
 8001b36:	4906      	ldr	r1, [pc, #24]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e086      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
 8001b50:	52002000 	.word	0x52002000
 8001b54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d010      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d208      	bcs.n	8001b86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b74:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	4939      	ldr	r1, [pc, #228]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d010      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d208      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	492e      	ldr	r1, [pc, #184]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d208      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4922      	ldr	r1, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d010      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d208      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4917      	ldr	r1, [pc, #92]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c10:	f000 f834 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	4912      	ldr	r1, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x360>)
 8001c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x364>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x368>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe ff3a 	bl	8000acc <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	08002824 	.word	0x08002824
 8001c70:	24000004 	.word	0x24000004
 8001c74:	24000000 	.word	0x24000000
 8001c78:	24000008 	.word	0x24000008

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c82:	4bb3      	ldr	r3, [pc, #716]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c8a:	2b18      	cmp	r3, #24
 8001c8c:	f200 8155 	bhi.w	8001f3a <HAL_RCC_GetSysClockFreq+0x2be>
 8001c90:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001cfd 	.word	0x08001cfd
 8001c9c:	08001f3b 	.word	0x08001f3b
 8001ca0:	08001f3b 	.word	0x08001f3b
 8001ca4:	08001f3b 	.word	0x08001f3b
 8001ca8:	08001f3b 	.word	0x08001f3b
 8001cac:	08001f3b 	.word	0x08001f3b
 8001cb0:	08001f3b 	.word	0x08001f3b
 8001cb4:	08001f3b 	.word	0x08001f3b
 8001cb8:	08001d23 	.word	0x08001d23
 8001cbc:	08001f3b 	.word	0x08001f3b
 8001cc0:	08001f3b 	.word	0x08001f3b
 8001cc4:	08001f3b 	.word	0x08001f3b
 8001cc8:	08001f3b 	.word	0x08001f3b
 8001ccc:	08001f3b 	.word	0x08001f3b
 8001cd0:	08001f3b 	.word	0x08001f3b
 8001cd4:	08001f3b 	.word	0x08001f3b
 8001cd8:	08001d29 	.word	0x08001d29
 8001cdc:	08001f3b 	.word	0x08001f3b
 8001ce0:	08001f3b 	.word	0x08001f3b
 8001ce4:	08001f3b 	.word	0x08001f3b
 8001ce8:	08001f3b 	.word	0x08001f3b
 8001cec:	08001f3b 	.word	0x08001f3b
 8001cf0:	08001f3b 	.word	0x08001f3b
 8001cf4:	08001f3b 	.word	0x08001f3b
 8001cf8:	08001d2f 	.word	0x08001d2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cfc:	4b94      	ldr	r3, [pc, #592]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d08:	4b91      	ldr	r3, [pc, #580]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	4a90      	ldr	r2, [pc, #576]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d1a:	e111      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d1c:	4b8d      	ldr	r3, [pc, #564]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d1e:	61bb      	str	r3, [r7, #24]
      break;
 8001d20:	e10e      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d22:	4b8d      	ldr	r3, [pc, #564]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d24:	61bb      	str	r3, [r7, #24]
      break;
 8001d26:	e10b      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d2a:	61bb      	str	r3, [r7, #24]
      break;
 8001d2c:	e108      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d2e:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d38:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d44:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d4e:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80e1 	beq.w	8001f34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f000 8083 	beq.w	8001e80 <HAL_RCC_GetSysClockFreq+0x204>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	f200 80a1 	bhi.w	8001ec4 <HAL_RCC_GetSysClockFreq+0x248>
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x114>
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d056      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d8e:	e099      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d90:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d02d      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d9c:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	08db      	lsrs	r3, r3, #3
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	4a6b      	ldr	r2, [pc, #428]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dc6:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001df6:	e087      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e3a:	e065      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e4e:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e7e:	e043      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ea6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ec2:	e021      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	0a5b      	lsrs	r3, r3, #9
 8001f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f12:	3301      	adds	r3, #1
 8001f14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2c:	ee17 3a90 	vmov	r3, s15
 8001f30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f32:	e005      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
      break;
 8001f38:	e002      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f3c:	61bb      	str	r3, [r7, #24]
      break;
 8001f3e:	bf00      	nop
  }

  return sysclockfreq;
 8001f40:	69bb      	ldr	r3, [r7, #24]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	58024400 	.word	0x58024400
 8001f54:	03d09000 	.word	0x03d09000
 8001f58:	003d0900 	.word	0x003d0900
 8001f5c:	017d7840 	.word	0x017d7840
 8001f60:	46000000 	.word	0x46000000
 8001f64:	4c742400 	.word	0x4c742400
 8001f68:	4a742400 	.word	0x4a742400
 8001f6c:	4bbebc20 	.word	0x4bbebc20

08001f70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e08f      	b.n	80020a4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7fe fb9f 	bl	80006dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6899      	ldr	r1, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <HAL_TIM_Encoder_Init+0x13c>)
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f000 fa71 	bl	80024a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_TIM_Encoder_Init+0x140>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_TIM_Encoder_Init+0x144>)
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_TIM_Encoder_Init+0x148>)
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	4313      	orrs	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	011a      	lsls	r2, r3, #4
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	031b      	lsls	r3, r3, #12
 8002030:	4313      	orrs	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800203e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002046:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4313      	orrs	r3, r2
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	fffebff8 	.word	0xfffebff8
 80020b0:	fffffcfc 	.word	0xfffffcfc
 80020b4:	fffff3f3 	.word	0xfffff3f3
 80020b8:	ffff0f0f 	.word	0xffff0f0f

080020bc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d110      	bne.n	800210e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80020f2:	7b7b      	ldrb	r3, [r7, #13]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d001      	beq.n	80020fc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e089      	b.n	8002210 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800210c:	e031      	b.n	8002172 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d110      	bne.n	8002136 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002114:	7bbb      	ldrb	r3, [r7, #14]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d102      	bne.n	8002120 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800211a:	7b3b      	ldrb	r3, [r7, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d001      	beq.n	8002124 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e075      	b.n	8002210 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002134:	e01d      	b.n	8002172 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002142:	7b7b      	ldrb	r3, [r7, #13]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002148:	7b3b      	ldrb	r3, [r7, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e05e      	b.n	8002210 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b04      	cmp	r3, #4
 800217c:	d010      	beq.n	80021a0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800217e:	e01f      	b.n	80021c0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fa33 	bl	80025f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0202 	orr.w	r2, r2, #2
 800219c:	60da      	str	r2, [r3, #12]
      break;
 800219e:	e02e      	b.n	80021fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	2104      	movs	r1, #4
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fa23 	bl	80025f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0204 	orr.w	r2, r2, #4
 80021bc:	60da      	str	r2, [r3, #12]
      break;
 80021be:	e01e      	b.n	80021fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2201      	movs	r2, #1
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fa13 	bl	80025f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	2104      	movs	r1, #4
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fa0c 	bl	80025f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0202 	orr.w	r2, r2, #2
 80021ea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0204 	orr.w	r2, r2, #4
 80021fa:	60da      	str	r2, [r3, #12]
      break;
 80021fc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d122      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d11b      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0202 	mvn.w	r2, #2
 8002244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe f856 	bl	800030c <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f901 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f908 	bl	800247e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b04      	cmp	r3, #4
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b04      	cmp	r3, #4
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0204 	mvn.w	r2, #4
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe f82c 	bl	800030c <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8d7 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f8de 	bl	800247e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0208 	mvn.w	r2, #8
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe f802 	bl	800030c <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8ad 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f8b4 	bl	800247e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b10      	cmp	r3, #16
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b10      	cmp	r3, #16
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0210 	mvn.w	r2, #16
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2208      	movs	r2, #8
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fd ffd8 	bl	800030c <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f883 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f88a 	bl	800247e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0201 	mvn.w	r2, #1
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f85d 	bl	8002456 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f9e2 	bl	800278c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d6:	d10e      	bne.n	80023f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b80      	cmp	r3, #128	; 0x80
 80023e4:	d107      	bne.n	80023f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f9d5 	bl	80027a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d10e      	bne.n	8002422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b40      	cmp	r3, #64	; 0x40
 8002410:	d107      	bne.n	8002422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800241a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f838 	bl	8002492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b20      	cmp	r3, #32
 800242e:	d10e      	bne.n	800244e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b20      	cmp	r3, #32
 800243c:	d107      	bne.n	800244e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f06f 0220 	mvn.w	r2, #32
 8002446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f995 	bl	8002778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a44      	ldr	r2, [pc, #272]	; (80025cc <TIM_Base_SetConfig+0x124>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d013      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c6:	d00f      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a41      	ldr	r2, [pc, #260]	; (80025d0 <TIM_Base_SetConfig+0x128>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00b      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a40      	ldr	r2, [pc, #256]	; (80025d4 <TIM_Base_SetConfig+0x12c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3f      	ldr	r2, [pc, #252]	; (80025d8 <TIM_Base_SetConfig+0x130>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3e      	ldr	r2, [pc, #248]	; (80025dc <TIM_Base_SetConfig+0x134>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d108      	bne.n	80024fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a33      	ldr	r2, [pc, #204]	; (80025cc <TIM_Base_SetConfig+0x124>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d027      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002508:	d023      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a30      	ldr	r2, [pc, #192]	; (80025d0 <TIM_Base_SetConfig+0x128>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01f      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <TIM_Base_SetConfig+0x12c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01b      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a2e      	ldr	r2, [pc, #184]	; (80025d8 <TIM_Base_SetConfig+0x130>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d017      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2d      	ldr	r2, [pc, #180]	; (80025dc <TIM_Base_SetConfig+0x134>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2c      	ldr	r2, [pc, #176]	; (80025e0 <TIM_Base_SetConfig+0x138>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00f      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <TIM_Base_SetConfig+0x13c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2a      	ldr	r2, [pc, #168]	; (80025e8 <TIM_Base_SetConfig+0x140>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a29      	ldr	r2, [pc, #164]	; (80025ec <TIM_Base_SetConfig+0x144>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0xaa>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <TIM_Base_SetConfig+0x148>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <TIM_Base_SetConfig+0x124>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00f      	beq.n	80025b0 <TIM_Base_SetConfig+0x108>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a12      	ldr	r2, [pc, #72]	; (80025dc <TIM_Base_SetConfig+0x134>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00b      	beq.n	80025b0 <TIM_Base_SetConfig+0x108>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <TIM_Base_SetConfig+0x138>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d007      	beq.n	80025b0 <TIM_Base_SetConfig+0x108>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <TIM_Base_SetConfig+0x13c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <TIM_Base_SetConfig+0x108>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <TIM_Base_SetConfig+0x140>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d103      	bne.n	80025b8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	615a      	str	r2, [r3, #20]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40000c00 	.word	0x40000c00
 80025dc:	40010400 	.word	0x40010400
 80025e0:	40014000 	.word	0x40014000
 80025e4:	40014400 	.word	0x40014400
 80025e8:	40014800 	.word	0x40014800
 80025ec:	4000e000 	.word	0x4000e000
 80025f0:	4000e400 	.word	0x4000e400

080025f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2201      	movs	r2, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a1a      	ldr	r2, [r3, #32]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	43db      	mvns	r3, r3
 8002616:	401a      	ands	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	431a      	orrs	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	621a      	str	r2, [r3, #32]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002654:	2302      	movs	r3, #2
 8002656:	e077      	b.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a35      	ldr	r2, [pc, #212]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a34      	ldr	r2, [pc, #208]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d108      	bne.n	800269e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002692:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a25      	ldr	r2, [pc, #148]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02c      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ca:	d027      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a22      	ldr	r2, [pc, #136]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d022      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a21      	ldr	r2, [pc, #132]	; (8002760 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01d      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d018      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00e      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1a      	ldr	r2, [pc, #104]	; (800276c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a17      	ldr	r2, [pc, #92]	; (8002774 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d10c      	bne.n	8002736 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002722:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	4313      	orrs	r3, r2
 800272c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40010000 	.word	0x40010000
 8002758:	40010400 	.word	0x40010400
 800275c:	40000400 	.word	0x40000400
 8002760:	40000800 	.word	0x40000800
 8002764:	40000c00 	.word	0x40000c00
 8002768:	40001800 	.word	0x40001800
 800276c:	40014000 	.word	0x40014000
 8002770:	4000e000 	.word	0x4000e000
 8002774:	4000e400 	.word	0x4000e400

08002778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <memset>:
 80027b4:	4402      	add	r2, r0
 80027b6:	4603      	mov	r3, r0
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d100      	bne.n	80027be <memset+0xa>
 80027bc:	4770      	bx	lr
 80027be:	f803 1b01 	strb.w	r1, [r3], #1
 80027c2:	e7f9      	b.n	80027b8 <memset+0x4>

080027c4 <__libc_init_array>:
 80027c4:	b570      	push	{r4, r5, r6, lr}
 80027c6:	4d0d      	ldr	r5, [pc, #52]	; (80027fc <__libc_init_array+0x38>)
 80027c8:	4c0d      	ldr	r4, [pc, #52]	; (8002800 <__libc_init_array+0x3c>)
 80027ca:	1b64      	subs	r4, r4, r5
 80027cc:	10a4      	asrs	r4, r4, #2
 80027ce:	2600      	movs	r6, #0
 80027d0:	42a6      	cmp	r6, r4
 80027d2:	d109      	bne.n	80027e8 <__libc_init_array+0x24>
 80027d4:	4d0b      	ldr	r5, [pc, #44]	; (8002804 <__libc_init_array+0x40>)
 80027d6:	4c0c      	ldr	r4, [pc, #48]	; (8002808 <__libc_init_array+0x44>)
 80027d8:	f000 f818 	bl	800280c <_init>
 80027dc:	1b64      	subs	r4, r4, r5
 80027de:	10a4      	asrs	r4, r4, #2
 80027e0:	2600      	movs	r6, #0
 80027e2:	42a6      	cmp	r6, r4
 80027e4:	d105      	bne.n	80027f2 <__libc_init_array+0x2e>
 80027e6:	bd70      	pop	{r4, r5, r6, pc}
 80027e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ec:	4798      	blx	r3
 80027ee:	3601      	adds	r6, #1
 80027f0:	e7ee      	b.n	80027d0 <__libc_init_array+0xc>
 80027f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f6:	4798      	blx	r3
 80027f8:	3601      	adds	r6, #1
 80027fa:	e7f2      	b.n	80027e2 <__libc_init_array+0x1e>
 80027fc:	08002834 	.word	0x08002834
 8002800:	08002834 	.word	0x08002834
 8002804:	08002834 	.word	0x08002834
 8002808:	08002838 	.word	0x08002838

0800280c <_init>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr

08002818 <_fini>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr
