
c011_spi_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d0  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002890  08002890  00003890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d0  080028d0  00004094  2**0
                  CONTENTS
  4 .ARM          00000000  080028d0  080028d0  00004094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028d0  080028d0  00004094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d0  080028d0  000038d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028d4  080028d4  000038d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  080028d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000190  20000094  0800296c  00004094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  0800296c  00004224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d66  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a89  00000000  00000000  0000ae22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000578  00000000  00000000  0000d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012749  00000000  00000000  0000d578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093be  00000000  00000000  0001fcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007096f  00000000  00000000  0002907f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000999ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018ac  00000000  00000000  00099a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0009b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002864 	.word	0x08002864

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	08002864 	.word	0x08002864

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <Flash_Write_Data>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint64_t *Data, uint16_t numberofword)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	1dbb      	adds	r3, r7, #6
 800022c:	801a      	strh	r2, [r3, #0]
	HAL_FLASH_Unlock();
 800022e:	f000 fc85 	bl	8000b3c <HAL_FLASH_Unlock>

	// Erase the required flash page
	// Erase_Flash(StartPageAddress);

	// Program flash with the data
	for (uint32_t i = 0; i < numberofword; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
 8000236:	e015      	b.n	8000264 <Flash_Write_Data+0x44>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress + i * 8, Data[i]) != HAL_OK)
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	00da      	lsls	r2, r3, #3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	18d1      	adds	r1, r2, r3
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	18d3      	adds	r3, r2, r3
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	2001      	movs	r0, #1
 800024e:	f000 fc27 	bl	8000aa0 <HAL_FLASH_Program>
 8000252:	1e03      	subs	r3, r0, #0
 8000254:	d003      	beq.n	800025e <Flash_Write_Data+0x3e>
		{
			// Handle the error if programming fails
			HAL_FLASH_Lock();
 8000256:	f000 fc95 	bl	8000b84 <HAL_FLASH_Lock>
			return 1;
 800025a:	2301      	movs	r3, #1
 800025c:	e00a      	b.n	8000274 <Flash_Write_Data+0x54>
	for (uint32_t i = 0; i < numberofword; i++)
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	3301      	adds	r3, #1
 8000262:	617b      	str	r3, [r7, #20]
 8000264:	1dbb      	adds	r3, r7, #6
 8000266:	881b      	ldrh	r3, [r3, #0]
 8000268:	697a      	ldr	r2, [r7, #20]
 800026a:	429a      	cmp	r2, r3
 800026c:	d3e4      	bcc.n	8000238 <Flash_Write_Data+0x18>
		}
	}

	HAL_FLASH_Lock();
 800026e:	f000 fc89 	bl	8000b84 <HAL_FLASH_Lock>
	return 0; // Success
 8000272:	2300      	movs	r3, #0
}
 8000274:	0018      	movs	r0, r3
 8000276:	46bd      	mov	sp, r7
 8000278:	b006      	add	sp, #24
 800027a:	bd80      	pop	{r7, pc}

0800027c <Flash_Read_Data>:

	HAL_FLASH_Lock();
}

void Flash_Read_Data(uint32_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	1dbb      	adds	r3, r7, #6
 8000288:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < numberofwords; i++)
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	e00e      	b.n	80002ae <Flash_Read_Data+0x32>
	{
		RxBuf[i] = *(__IO uint64_t *)(StartPageAddress + i * 8); // 8 bytes per word
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	00da      	lsls	r2, r3, #3
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	18d3      	adds	r3, r2, r3
 8000298:	697a      	ldr	r2, [r7, #20]
 800029a:	00d2      	lsls	r2, r2, #3
 800029c:	68b9      	ldr	r1, [r7, #8]
 800029e:	1889      	adds	r1, r1, r2
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	600a      	str	r2, [r1, #0]
 80002a6:	604b      	str	r3, [r1, #4]
	for (uint32_t i = 0; i < numberofwords; i++)
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	3301      	adds	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	1dbb      	adds	r3, r7, #6
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d3eb      	bcc.n	8000290 <Flash_Read_Data+0x14>
	}
}
 80002b8:	46c0      	nop			@ (mov r8, r8)
 80002ba:	46c0      	nop			@ (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	b006      	add	sp, #24
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <HAL_SPI_RxCpltCallback+0x20>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d102      	bne.n	80002dc <HAL_SPI_RxCpltCallback+0x18>
	{
		data_received_flag = 1;
 80002d6:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <HAL_SPI_RxCpltCallback+0x24>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
	}
}
 80002dc:	46c0      	nop			@ (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b002      	add	sp, #8
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40013000 	.word	0x40013000
 80002e8:	200001a0 	.word	0x200001a0

080002ec <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <HAL_SPI_TxCpltCallback+0x20>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d102      	bne.n	8000304 <HAL_SPI_TxCpltCallback+0x18>
	{
		data_send_flag = 1;
 80002fe:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <HAL_SPI_TxCpltCallback+0x24>)
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
	}
}
 8000304:	46c0      	nop			@ (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b002      	add	sp, #8
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40013000 	.word	0x40013000
 8000310:	200001a1 	.word	0x200001a1

08000314 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000318:	f000 f9ed 	bl	80006f6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800031c:	f000 f83c 	bl	8000398 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000320:	f000 f8b8 	bl	8000494 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000324:	f000 f87c 	bl	8000420 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_SPI_Receive_IT(&hspi1, (uint8_t*)rxData, DATA_SIZE*4);
 8000328:	4915      	ldr	r1, [pc, #84]	@ (8000380 <main+0x6c>)
 800032a:	4b16      	ldr	r3, [pc, #88]	@ (8000384 <main+0x70>)
 800032c:	2278      	movs	r2, #120	@ 0x78
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fbb4 	bl	8001a9c <HAL_SPI_Receive_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (data_received_flag)
 8000334:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <main+0x74>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	d011      	beq.n	8000362 <main+0x4e>
		{
			data_received_flag = 0;
 800033e:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <main+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
			Flash_Write_Data(FLASH_USER_START_ADDR, (uint64_t *)rxData, DATA_SIZE);
 8000344:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <main+0x6c>)
 8000346:	4811      	ldr	r0, [pc, #68]	@ (800038c <main+0x78>)
 8000348:	221e      	movs	r2, #30
 800034a:	0019      	movs	r1, r3
 800034c:	f7ff ff68 	bl	8000220 <Flash_Write_Data>
			Flash_Read_Data(FLASH_USER_START_ADDR, (uint64_t *)readData, DATA_SIZE);
 8000350:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <main+0x7c>)
 8000352:	480e      	ldr	r0, [pc, #56]	@ (800038c <main+0x78>)
 8000354:	221e      	movs	r2, #30
 8000356:	0019      	movs	r1, r3
 8000358:	f7ff ff90 	bl	800027c <Flash_Read_Data>
			data_send_flag = 1;
 800035c:	4b0d      	ldr	r3, [pc, #52]	@ (8000394 <main+0x80>)
 800035e:	2201      	movs	r2, #1
 8000360:	701a      	strb	r2, [r3, #0]
		}

		if (data_send_flag)
 8000362:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <main+0x80>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0e3      	beq.n	8000334 <main+0x20>
		{
			data_send_flag = 0;
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <main+0x80>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_IT(&hspi1, (uint8_t*)readData, DATA_SIZE * 4);
 8000372:	4907      	ldr	r1, [pc, #28]	@ (8000390 <main+0x7c>)
 8000374:	4b03      	ldr	r3, [pc, #12]	@ (8000384 <main+0x70>)
 8000376:	2278      	movs	r2, #120	@ 0x78
 8000378:	0018      	movs	r0, r3
 800037a:	f001 fb03 	bl	8001984 <HAL_SPI_Transmit_IT>
		if (data_received_flag)
 800037e:	e7d9      	b.n	8000334 <main+0x20>
 8000380:	200000b0 	.word	0x200000b0
 8000384:	200001a4 	.word	0x200001a4
 8000388:	200001a0 	.word	0x200001a0
 800038c:	08007800 	.word	0x08007800
 8000390:	20000128 	.word	0x20000128
 8000394:	200001a1 	.word	0x200001a1

08000398 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b08d      	sub	sp, #52	@ 0x34
 800039c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	2414      	movs	r4, #20
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	0018      	movs	r0, r3
 80003a4:	231c      	movs	r3, #28
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f002 fa2e 	bl	800280a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ae:	003b      	movs	r3, r7
 80003b0:	0018      	movs	r0, r3
 80003b2:	2314      	movs	r3, #20
 80003b4:	001a      	movs	r2, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	f002 fa27 	bl	800280a <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	2202      	movs	r2, #2
 80003c0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	2280      	movs	r2, #128	@ 0x80
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003ca:	193b      	adds	r3, r7, r4
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	2240      	movs	r2, #64	@ 0x40
 80003d4:	615a      	str	r2, [r3, #20]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fdf1 	bl	8000fc0 <HAL_RCC_OscConfig>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x4e>
	{
		Error_Handler();
 80003e2:	f000 f89b 	bl	800051c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	003b      	movs	r3, r7
 80003e8:	2207      	movs	r2, #7
 80003ea:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ec:	003b      	movs	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	003b      	movs	r3, r7
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003f8:	003b      	movs	r3, r7
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003fe:	003b      	movs	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000404:	003b      	movs	r3, r7
 8000406:	2101      	movs	r1, #1
 8000408:	0018      	movs	r0, r3
 800040a:	f000 ffbd 	bl	8001388 <HAL_RCC_ClockConfig>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8000412:	f000 f883 	bl	800051c <Error_Handler>
	}
}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b00d      	add	sp, #52	@ 0x34
 800041c:	bd90      	pop	{r4, r7, pc}
	...

08000420 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000424:	4b19      	ldr	r3, [pc, #100]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000426:	4a1a      	ldr	r2, [pc, #104]	@ (8000490 <MX_SPI1_Init+0x70>)
 8000428:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 800042a:	4b18      	ldr	r3, [pc, #96]	@ (800048c <MX_SPI1_Init+0x6c>)
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000436:	4b15      	ldr	r3, [pc, #84]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000438:	22e0      	movs	r2, #224	@ 0xe0
 800043a:	00d2      	lsls	r2, r2, #3
 800043c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800043e:	4b13      	ldr	r3, [pc, #76]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000446:	2200      	movs	r2, #0
 8000448:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800044a:	4b10      	ldr	r3, [pc, #64]	@ (800048c <MX_SPI1_Init+0x6c>)
 800044c:	2280      	movs	r2, #128	@ 0x80
 800044e:	0092      	lsls	r2, r2, #2
 8000450:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <MX_SPI1_Init+0x6c>)
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000460:	2200      	movs	r2, #0
 8000462:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000466:	2207      	movs	r2, #7
 8000468:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046a:	4b08      	ldr	r3, [pc, #32]	@ (800048c <MX_SPI1_Init+0x6c>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000472:	2200      	movs	r2, #0
 8000474:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000476:	4b05      	ldr	r3, [pc, #20]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000478:	0018      	movs	r0, r3
 800047a:	f001 f9cb 	bl	8001814 <HAL_SPI_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_SPI1_Init+0x66>
	{
		Error_Handler();
 8000482:	f000 f84b 	bl	800051c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	200001a4 	.word	0x200001a4
 8000490:	40013000 	.word	0x40013000

08000494 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b089      	sub	sp, #36	@ 0x24
 8000498:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	240c      	movs	r4, #12
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	2314      	movs	r3, #20
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f002 f9b0 	bl	800280a <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000518 <MX_GPIO_Init+0x84>)
 80004ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000518 <MX_GPIO_Init+0x84>)
 80004b0:	2104      	movs	r1, #4
 80004b2:	430a      	orrs	r2, r1
 80004b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004b6:	4b18      	ldr	r3, [pc, #96]	@ (8000518 <MX_GPIO_Init+0x84>)
 80004b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ba:	2204      	movs	r2, #4
 80004bc:	4013      	ands	r3, r2
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <MX_GPIO_Init+0x84>)
 80004c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004c6:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <MX_GPIO_Init+0x84>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ce:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <MX_GPIO_Init+0x84>)
 80004d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004d2:	2201      	movs	r2, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004da:	23a0      	movs	r3, #160	@ 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2200      	movs	r2, #0
 80004e0:	2110      	movs	r1, #16
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fd4e 	bl	8000f84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80004e8:	0021      	movs	r1, r4
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2210      	movs	r2, #16
 80004ee:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2201      	movs	r2, #1
 80004f4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2202      	movs	r2, #2
 80004fa:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000502:	187a      	adds	r2, r7, r1
 8000504:	23a0      	movs	r3, #160	@ 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0011      	movs	r1, r2
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fbd0 	bl	8000cb0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b009      	add	sp, #36	@ 0x24
 8000516:	bd90      	pop	{r4, r7, pc}
 8000518:	40021000 	.word	0x40021000

0800051c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	e7fd      	b.n	8000524 <Error_Handler+0x8>

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <HAL_MspInit+0x44>)
 8000530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <HAL_MspInit+0x44>)
 8000534:	2101      	movs	r1, #1
 8000536:	430a      	orrs	r2, r1
 8000538:	641a      	str	r2, [r3, #64]	@ 0x40
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <HAL_MspInit+0x44>)
 800053c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053e:	2201      	movs	r2, #1
 8000540:	4013      	ands	r3, r2
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <HAL_MspInit+0x44>)
 8000548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <HAL_MspInit+0x44>)
 800054c:	2180      	movs	r1, #128	@ 0x80
 800054e:	0549      	lsls	r1, r1, #21
 8000550:	430a      	orrs	r2, r1
 8000552:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <HAL_MspInit+0x44>)
 8000556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000558:	2380      	movs	r3, #128	@ 0x80
 800055a:	055b      	lsls	r3, r3, #21
 800055c:	4013      	ands	r3, r2
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b091      	sub	sp, #68	@ 0x44
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	232c      	movs	r3, #44	@ 0x2c
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	0018      	movs	r0, r3
 800057e:	2314      	movs	r3, #20
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f002 f941 	bl	800280a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000588:	2410      	movs	r4, #16
 800058a:	193b      	adds	r3, r7, r4
 800058c:	0018      	movs	r0, r3
 800058e:	231c      	movs	r3, #28
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f002 f939 	bl	800280a <memset>
  if(hspi->Instance==SPI1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a26      	ldr	r2, [pc, #152]	@ (8000638 <HAL_SPI_MspInit+0xc8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d146      	bne.n	8000630 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2204      	movs	r2, #4
 80005a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 f843 	bl	800163c <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80005ba:	f7ff ffaf 	bl	800051c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <HAL_SPI_MspInit+0xcc>)
 80005c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005c2:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <HAL_SPI_MspInit+0xcc>)
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	0149      	lsls	r1, r1, #5
 80005c8:	430a      	orrs	r2, r1
 80005ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <HAL_SPI_MspInit+0xcc>)
 80005ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005d0:	2380      	movs	r3, #128	@ 0x80
 80005d2:	015b      	lsls	r3, r3, #5
 80005d4:	4013      	ands	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b18      	ldr	r3, [pc, #96]	@ (800063c <HAL_SPI_MspInit+0xcc>)
 80005dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <HAL_SPI_MspInit+0xcc>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <HAL_SPI_MspInit+0xcc>)
 80005e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005f2:	212c      	movs	r1, #44	@ 0x2c
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	22e0      	movs	r2, #224	@ 0xe0
 80005f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2202      	movs	r2, #2
 80005fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	187a      	adds	r2, r7, r1
 8000614:	23a0      	movs	r3, #160	@ 0xa0
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fb48 	bl	8000cb0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2019      	movs	r0, #25
 8000626:	f000 f98f 	bl	8000948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800062a:	2019      	movs	r0, #25
 800062c:	f000 f9a1 	bl	8000972 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b011      	add	sp, #68	@ 0x44
 8000636:	bd90      	pop	{r4, r7, pc}
 8000638:	40013000 	.word	0x40013000
 800063c:	40021000 	.word	0x40021000

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	e7fd      	b.n	8000644 <NMI_Handler+0x4>

08000648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	e7fd      	b.n	800064c <HardFault_Handler+0x4>

08000650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000668:	f000 f8a6 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <SPI1_IRQHandler+0x14>)
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fb80 	bl	8001d80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	200001a4 	.word	0x200001a4

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <SystemInit+0x14>)
 8000692:	2280      	movs	r2, #128	@ 0x80
 8000694:	0512      	lsls	r2, r2, #20
 8000696:	609a      	str	r2, [r3, #8]
#endif
}
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a8:	f7ff fff0 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ae:	e003      	b.n	80006b8 <LoopCopyDataInit>

080006b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80006b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006b6:	3104      	adds	r1, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <LoopForever+0xa>)
  ldr r3, =_edata
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <LoopForever+0xe>)
  adds r2, r0, r1
 80006bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006c0:	d3f6      	bcc.n	80006b0 <CopyDataInit>
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <LoopForever+0x12>)
  b LoopFillZerobss
 80006c4:	e002      	b.n	80006cc <LoopFillZerobss>

080006c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  str  r3, [r2]
 80006c8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ca:	3204      	adds	r2, #4

080006cc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <LoopForever+0x16>)
  cmp r2, r3
 80006ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006d0:	d3f9      	bcc.n	80006c6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80006d2:	f002 f8a3 	bl	800281c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fe1d 	bl	8000314 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80006e0:	080028d8 	.word	0x080028d8
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006e8:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 80006ec:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 80006f0:	20000224 	.word	0x20000224

080006f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_IRQHandler>

080006f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000702:	2003      	movs	r0, #3
 8000704:	f000 f80e 	bl	8000724 <HAL_InitTick>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d003      	beq.n	8000714 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e001      	b.n	8000718 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000714:	f7ff ff08 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	230f      	movs	r3, #15
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <HAL_InitTick+0x88>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d02b      	beq.n	8000794 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <HAL_InitTick+0x8c>)
 800073e:	681c      	ldr	r4, [r3, #0]
 8000740:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <HAL_InitTick+0x88>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	0019      	movs	r1, r3
 8000746:	23fa      	movs	r3, #250	@ 0xfa
 8000748:	0098      	lsls	r0, r3, #2
 800074a:	f7ff fcdd 	bl	8000108 <__udivsi3>
 800074e:	0003      	movs	r3, r0
 8000750:	0019      	movs	r1, r3
 8000752:	0020      	movs	r0, r4
 8000754:	f7ff fcd8 	bl	8000108 <__udivsi3>
 8000758:	0003      	movs	r3, r0
 800075a:	0018      	movs	r0, r3
 800075c:	f000 f919 	bl	8000992 <HAL_SYSTICK_Config>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d112      	bne.n	800078a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d80a      	bhi.n	8000780 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	2301      	movs	r3, #1
 800076e:	425b      	negs	r3, r3
 8000770:	2200      	movs	r2, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 f8e8 	bl	8000948 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <HAL_InitTick+0x90>)
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e00d      	b.n	800079c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000780:	230f      	movs	r3, #15
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e008      	b.n	800079c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800078a:	230f      	movs	r3, #15
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	e003      	b.n	800079c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000794:	230f      	movs	r3, #15
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800079c:	230f      	movs	r3, #15
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	781b      	ldrb	r3, [r3, #0]
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b005      	add	sp, #20
 80007a8:	bd90      	pop	{r4, r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <HAL_IncTick+0x1c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	001a      	movs	r2, r3
 80007c2:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <HAL_IncTick+0x20>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	18d2      	adds	r2, r2, r3
 80007c8:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <HAL_IncTick+0x20>)
 80007ca:	601a      	str	r2, [r3, #0]
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000208 	.word	0x20000208

080007dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;
 80007e0:	4b02      	ldr	r3, [pc, #8]	@ (80007ec <HAL_GetTick+0x10>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	20000208 	.word	0x20000208

080007f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b7f      	cmp	r3, #127	@ 0x7f
 8000802:	d809      	bhi.n	8000818 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	231f      	movs	r3, #31
 800080c:	401a      	ands	r2, r3
 800080e:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <__NVIC_EnableIRQ+0x30>)
 8000810:	2101      	movs	r1, #1
 8000812:	4091      	lsls	r1, r2
 8000814:	000a      	movs	r2, r1
 8000816:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}
 8000820:	e000e100 	.word	0xe000e100

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	0002      	movs	r2, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b7f      	cmp	r3, #127	@ 0x7f
 8000838:	d828      	bhi.n	800088c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083a:	4a2f      	ldr	r2, [pc, #188]	@ (80008f8 <__NVIC_SetPriority+0xd4>)
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b25b      	sxtb	r3, r3
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	33c0      	adds	r3, #192	@ 0xc0
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	589b      	ldr	r3, [r3, r2]
 800084a:	1dfa      	adds	r2, r7, #7
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	0011      	movs	r1, r2
 8000850:	2203      	movs	r2, #3
 8000852:	400a      	ands	r2, r1
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	21ff      	movs	r1, #255	@ 0xff
 8000858:	4091      	lsls	r1, r2
 800085a:	000a      	movs	r2, r1
 800085c:	43d2      	mvns	r2, r2
 800085e:	401a      	ands	r2, r3
 8000860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	019b      	lsls	r3, r3, #6
 8000866:	22ff      	movs	r2, #255	@ 0xff
 8000868:	401a      	ands	r2, r3
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	0018      	movs	r0, r3
 8000870:	2303      	movs	r3, #3
 8000872:	4003      	ands	r3, r0
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000878:	481f      	ldr	r0, [pc, #124]	@ (80008f8 <__NVIC_SetPriority+0xd4>)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	089b      	lsrs	r3, r3, #2
 8000882:	430a      	orrs	r2, r1
 8000884:	33c0      	adds	r3, #192	@ 0xc0
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800088a:	e031      	b.n	80008f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088c:	4a1b      	ldr	r2, [pc, #108]	@ (80008fc <__NVIC_SetPriority+0xd8>)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0019      	movs	r1, r3
 8000894:	230f      	movs	r3, #15
 8000896:	400b      	ands	r3, r1
 8000898:	3b08      	subs	r3, #8
 800089a:	089b      	lsrs	r3, r3, #2
 800089c:	3306      	adds	r3, #6
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	18d3      	adds	r3, r2, r3
 80008a2:	3304      	adds	r3, #4
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	1dfa      	adds	r2, r7, #7
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	0011      	movs	r1, r2
 80008ac:	2203      	movs	r2, #3
 80008ae:	400a      	ands	r2, r1
 80008b0:	00d2      	lsls	r2, r2, #3
 80008b2:	21ff      	movs	r1, #255	@ 0xff
 80008b4:	4091      	lsls	r1, r2
 80008b6:	000a      	movs	r2, r1
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	401a      	ands	r2, r3
 80008bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	22ff      	movs	r2, #255	@ 0xff
 80008c4:	401a      	ands	r2, r3
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	0018      	movs	r0, r3
 80008cc:	2303      	movs	r3, #3
 80008ce:	4003      	ands	r3, r0
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	4809      	ldr	r0, [pc, #36]	@ (80008fc <__NVIC_SetPriority+0xd8>)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	001c      	movs	r4, r3
 80008dc:	230f      	movs	r3, #15
 80008de:	4023      	ands	r3, r4
 80008e0:	3b08      	subs	r3, #8
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	430a      	orrs	r2, r1
 80008e6:	3306      	adds	r3, #6
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	18c3      	adds	r3, r0, r3
 80008ec:	3304      	adds	r3, #4
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b003      	add	sp, #12
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	2380      	movs	r3, #128	@ 0x80
 800090e:	045b      	lsls	r3, r3, #17
 8000910:	429a      	cmp	r2, r3
 8000912:	d301      	bcc.n	8000918 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000914:	2301      	movs	r3, #1
 8000916:	e010      	b.n	800093a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000918:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <SysTick_Config+0x44>)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	3a01      	subs	r2, #1
 800091e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000920:	2301      	movs	r3, #1
 8000922:	425b      	negs	r3, r3
 8000924:	2103      	movs	r1, #3
 8000926:	0018      	movs	r0, r3
 8000928:	f7ff ff7c 	bl	8000824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <SysTick_Config+0x44>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <SysTick_Config+0x44>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	0018      	movs	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	210f      	movs	r1, #15
 8000954:	187b      	adds	r3, r7, r1
 8000956:	1c02      	adds	r2, r0, #0
 8000958:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	187b      	adds	r3, r7, r1
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b25b      	sxtb	r3, r3
 8000962:	0011      	movs	r1, r2
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ff5d 	bl	8000824 <__NVIC_SetPriority>
}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	0002      	movs	r2, r0
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b25b      	sxtb	r3, r3
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff ff33 	bl	80007f0 <__NVIC_EnableIRQ>
}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff ffaf 	bl	8000900 <SysTick_Config>
 80009a2:	0003      	movs	r3, r0
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b002      	add	sp, #8
 80009aa:	bd80      	pop	{r7, pc}

080009ac <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009b4:	230f      	movs	r3, #15
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2224      	movs	r2, #36	@ 0x24
 80009c0:	2100      	movs	r1, #0
 80009c2:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2224      	movs	r2, #36	@ 0x24
 80009c8:	5c9b      	ldrb	r3, [r3, r2]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d101      	bne.n	80009d2 <HAL_DMA_Abort_IT+0x26>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e05e      	b.n	8000a90 <HAL_DMA_Abort_IT+0xe4>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2224      	movs	r2, #36	@ 0x24
 80009d6:	2101      	movs	r1, #1
 80009d8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2225      	movs	r2, #37	@ 0x25
 80009de:	5c9b      	ldrb	r3, [r3, r2]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d007      	beq.n	80009f6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2204      	movs	r2, #4
 80009ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80009ec:	230f      	movs	r3, #15
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	e049      	b.n	8000a8a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	210e      	movs	r1, #14
 8000a02:	438a      	bics	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2101      	movs	r1, #1
 8000a12:	438a      	bics	r2, r1
 8000a14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a20:	491d      	ldr	r1, [pc, #116]	@ (8000a98 <HAL_DMA_Abort_IT+0xec>)
 8000a22:	400a      	ands	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000a26:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <HAL_DMA_Abort_IT+0xf0>)
 8000a28:	6859      	ldr	r1, [r3, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	221c      	movs	r2, #28
 8000a30:	4013      	ands	r3, r2
 8000a32:	2201      	movs	r2, #1
 8000a34:	409a      	lsls	r2, r3
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <HAL_DMA_Abort_IT+0xf0>)
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000a44:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00c      	beq.n	8000a68 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a58:	490f      	ldr	r1, [pc, #60]	@ (8000a98 <HAL_DMA_Abort_IT+0xec>)
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000a66:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2225      	movs	r2, #37	@ 0x25
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2224      	movs	r2, #36	@ 0x24
 8000a74:	2100      	movs	r1, #0
 8000a76:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	0010      	movs	r0, r2
 8000a88:	4798      	blx	r3
    }
  }
  return status;
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b004      	add	sp, #16
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	fffffeff 	.word	0xfffffeff
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_FLASH_Program>:
  *               are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000aa0:	b5b0      	push	{r4, r5, r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	603a      	str	r2, [r7, #0]
 8000aac:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000aae:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <HAL_FLASH_Program+0x94>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d101      	bne.n	8000aba <HAL_FLASH_Program+0x1a>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e038      	b.n	8000b2c <HAL_FLASH_Program+0x8c>
 8000aba:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <HAL_FLASH_Program+0x94>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <HAL_FLASH_Program+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ac6:	2517      	movs	r5, #23
 8000ac8:	197c      	adds	r4, r7, r5
 8000aca:	23fa      	movs	r3, #250	@ 0xfa
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f874 	bl	8000bbc <FLASH_WaitForLastOperation>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8000ad8:	197b      	adds	r3, r7, r5
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d11f      	bne.n	8000b20 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d106      	bne.n	8000af4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	0008      	movs	r0, r1
 8000aee:	f000 f8bf 	bl	8000c70 <FLASH_Program_DoubleWord>
 8000af2:	e005      	b.n	8000b00 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fec0 	bl	8002880 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b00:	2317      	movs	r3, #23
 8000b02:	18fc      	adds	r4, r7, r3
 8000b04:	23fa      	movs	r3, #250	@ 0xfa
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 f857 	bl	8000bbc <FLASH_WaitForLastOperation>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <HAL_FLASH_Program+0x98>)
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	43d9      	mvns	r1, r3
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <HAL_FLASH_Program+0x98>)
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <HAL_FLASH_Program+0x94>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8000b26:	2317      	movs	r3, #23
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	781b      	ldrb	r3, [r3, #0]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b006      	add	sp, #24
 8000b32:	bdb0      	pop	{r4, r5, r7, pc}
 8000b34:	2000020c 	.word	0x2000020c
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <HAL_FLASH_Unlock+0x3c>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da0c      	bge.n	8000b6a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <HAL_FLASH_Unlock+0x3c>)
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <HAL_FLASH_Unlock+0x40>)
 8000b54:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_FLASH_Unlock+0x3c>)
 8000b58:	4a09      	ldr	r2, [pc, #36]	@ (8000b80 <HAL_FLASH_Unlock+0x44>)
 8000b5a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_FLASH_Unlock+0x3c>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	da02      	bge.n	8000b6a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	40022000 	.word	0x40022000
 8000b7c:	45670123 	.word	0x45670123
 8000b80:	cdef89ab 	.word	0xcdef89ab

08000b84 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b90:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_FLASH_Lock+0x34>)
 8000b92:	695a      	ldr	r2, [r3, #20]
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_FLASH_Lock+0x34>)
 8000b96:	2180      	movs	r1, #128	@ 0x80
 8000b98:	0609      	lsls	r1, r1, #24
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_FLASH_Lock+0x34>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	da02      	bge.n	8000bac <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40022000 	.word	0x40022000

08000bbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8000bc4:	f7ff fe0a 	bl	80007dc <HAL_GetTick>
 8000bc8:	0002      	movs	r2, r0
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	189b      	adds	r3, r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 8000bd0:	e007      	b.n	8000be2 <FLASH_WaitForLastOperation+0x26>
  {
    if (HAL_GetTick() >= timeout)
 8000bd2:	f7ff fe03 	bl	80007dc <HAL_GetTick>
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d801      	bhi.n	8000be2 <FLASH_WaitForLastOperation+0x26>
    {
      return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e03b      	b.n	8000c5a <FLASH_WaitForLastOperation+0x9e>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <FLASH_WaitForLastOperation+0xa8>)
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	025b      	lsls	r3, r3, #9
 8000bea:	401a      	ands	r2, r3
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	025b      	lsls	r3, r3, #9
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d101      	bne.n	8000bf8 <FLASH_WaitForLastOperation+0x3c>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <FLASH_WaitForLastOperation+0x3e>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1e9      	bne.n	8000bd2 <FLASH_WaitForLastOperation+0x16>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <FLASH_WaitForLastOperation+0xa8>)
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <FLASH_WaitForLastOperation+0xac>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8000c08:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <FLASH_WaitForLastOperation+0xa8>)
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d004      	beq.n	8000c1e <FLASH_WaitForLastOperation+0x62>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <FLASH_WaitForLastOperation+0xb0>)
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e01d      	b.n	8000c5a <FLASH_WaitForLastOperation+0x9e>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8000c1e:	f7ff fddd 	bl	80007dc <HAL_GetTick>
 8000c22:	0002      	movs	r2, r0
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	189b      	adds	r3, r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 8000c2a:	e007      	b.n	8000c3c <FLASH_WaitForLastOperation+0x80>
  {
    if (HAL_GetTick() >= timeout)
 8000c2c:	f7ff fdd6 	bl	80007dc <HAL_GetTick>
 8000c30:	0002      	movs	r2, r0
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d801      	bhi.n	8000c3c <FLASH_WaitForLastOperation+0x80>
    {
      return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e00e      	b.n	8000c5a <FLASH_WaitForLastOperation+0x9e>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <FLASH_WaitForLastOperation+0xa8>)
 8000c3e:	691a      	ldr	r2, [r3, #16]
 8000c40:	2380      	movs	r3, #128	@ 0x80
 8000c42:	02db      	lsls	r3, r3, #11
 8000c44:	401a      	ands	r2, r3
 8000c46:	2380      	movs	r3, #128	@ 0x80
 8000c48:	02db      	lsls	r3, r3, #11
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d101      	bne.n	8000c52 <FLASH_WaitForLastOperation+0x96>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <FLASH_WaitForLastOperation+0x98>
 8000c52:	2300      	movs	r3, #0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1e9      	bne.n	8000c2c <FLASH_WaitForLastOperation+0x70>
    }
  }

  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	40022000 	.word	0x40022000
 8000c68:	0000c3fa 	.word	0x0000c3fa
 8000c6c:	2000020c 	.word	0x2000020c

08000c70 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	603a      	str	r2, [r7, #0]
 8000c7a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <FLASH_Program_DoubleWord+0x3c>)
 8000c7e:	695a      	ldr	r2, [r3, #20]
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <FLASH_Program_DoubleWord+0x3c>)
 8000c82:	2101      	movs	r1, #1
 8000c84:	430a      	orrs	r2, r1
 8000c86:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000c8e:	f3bf 8f6f 	isb	sy
}
 8000c92:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	001c      	movs	r4, r3
 8000c98:	2300      	movs	r3, #0
 8000c9a:	001d      	movs	r5, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	0022      	movs	r2, r4
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b004      	add	sp, #16
 8000caa:	bdb0      	pop	{r4, r5, r7, pc}
 8000cac:	40022000 	.word	0x40022000

08000cb0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000cbe:	e14d      	b.n	8000f5c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d100      	bne.n	8000cd8 <HAL_GPIO_Init+0x28>
 8000cd6:	e13e      	b.n	8000f56 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x38>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b12      	cmp	r3, #18
 8000ce6:	d125      	bne.n	8000d34 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	58d3      	ldr	r3, [r2, r3]
 8000cf4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	409a      	lsls	r2, r3
 8000d02:	0013      	movs	r3, r2
 8000d04:	43da      	mvns	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	220f      	movs	r2, #15
 8000d12:	401a      	ands	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	2107      	movs	r1, #7
 8000d18:	400b      	ands	r3, r1
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	08da      	lsrs	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	6979      	ldr	r1, [r7, #20]
 8000d32:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	409a      	lsls	r2, r3
 8000d42:	0013      	movs	r3, r2
 8000d44:	43da      	mvns	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2203      	movs	r2, #3
 8000d52:	401a      	ands	r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d00b      	beq.n	8000d88 <HAL_GPIO_Init+0xd8>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d007      	beq.n	8000d88 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d7c:	2b11      	cmp	r3, #17
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b12      	cmp	r3, #18
 8000d86:	d130      	bne.n	8000dea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	43da      	mvns	r2, r3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	409a      	lsls	r2, r3
 8000daa:	0013      	movs	r3, r2
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d017      	beq.n	8000e22 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	4013      	ands	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	055b      	lsls	r3, r3, #21
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <HAL_GPIO_Init+0x180>
 8000e2e:	e092      	b.n	8000f56 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e30:	4a50      	ldr	r2, [pc, #320]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3318      	adds	r3, #24
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	589b      	ldr	r3, [r3, r2]
 8000e3c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	2203      	movs	r2, #3
 8000e42:	4013      	ands	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	220f      	movs	r2, #15
 8000e48:	409a      	lsls	r2, r3
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	43da      	mvns	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	23a0      	movs	r3, #160	@ 0xa0
 8000e58:	05db      	lsls	r3, r3, #23
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d013      	beq.n	8000e86 <HAL_GPIO_Init+0x1d6>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a45      	ldr	r2, [pc, #276]	@ (8000f78 <HAL_GPIO_Init+0x2c8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00d      	beq.n	8000e82 <HAL_GPIO_Init+0x1d2>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a44      	ldr	r2, [pc, #272]	@ (8000f7c <HAL_GPIO_Init+0x2cc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x1ce>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a43      	ldr	r2, [pc, #268]	@ (8000f80 <HAL_GPIO_Init+0x2d0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d101      	bne.n	8000e7a <HAL_GPIO_Init+0x1ca>
 8000e76:	2305      	movs	r3, #5
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x1d8>
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	e004      	b.n	8000e88 <HAL_GPIO_Init+0x1d8>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e002      	b.n	8000e88 <HAL_GPIO_Init+0x1d8>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <HAL_GPIO_Init+0x1d8>
 8000e86:	2300      	movs	r3, #0
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	00d2      	lsls	r2, r2, #3
 8000e90:	4093      	lsls	r3, r2
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000e98:	4936      	ldr	r1, [pc, #216]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3318      	adds	r3, #24
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000ea6:	4a33      	ldr	r2, [pc, #204]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	58d3      	ldr	r3, [r2, r3]
 8000eac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000ecc:	4929      	ldr	r1, [pc, #164]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000ed4:	4a27      	ldr	r2, [pc, #156]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000ed6:	2384      	movs	r3, #132	@ 0x84
 8000ed8:	58d3      	ldr	r3, [r2, r3]
 8000eda:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2380      	movs	r3, #128	@ 0x80
 8000eec:	029b      	lsls	r3, r3, #10
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000efa:	491e      	ldr	r1, [pc, #120]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000efc:	2284      	movs	r2, #132	@ 0x84
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	035b      	lsls	r3, r3, #13
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43da      	mvns	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	039b      	lsls	r3, r3, #14
 8000f44:	4013      	ands	r3, r2
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	40da      	lsrs	r2, r3
 8000f64:	1e13      	subs	r3, r2, #0
 8000f66:	d000      	beq.n	8000f6a <HAL_GPIO_Init+0x2ba>
 8000f68:	e6aa      	b.n	8000cc0 <HAL_GPIO_Init+0x10>
  }
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b006      	add	sp, #24
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021800 	.word	0x40021800
 8000f78:	50000400 	.word	0x50000400
 8000f7c:	50000800 	.word	0x50000800
 8000f80:	50001400 	.word	0x50001400

08000f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	0008      	movs	r0, r1
 8000f8e:	0011      	movs	r1, r2
 8000f90:	1cbb      	adds	r3, r7, #2
 8000f92:	1c02      	adds	r2, r0, #0
 8000f94:	801a      	strh	r2, [r3, #0]
 8000f96:	1c7b      	adds	r3, r7, #1
 8000f98:	1c0a      	adds	r2, r1, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f9c:	1c7b      	adds	r3, r7, #1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa4:	1cbb      	adds	r3, r7, #2
 8000fa6:	881a      	ldrh	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fae:	1cbb      	adds	r3, r7, #2
 8000fb0:	881a      	ldrh	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e1d0      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d100      	bne.n	8000fde <HAL_RCC_OscConfig+0x1e>
 8000fdc:	e069      	b.n	80010b2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fde:	4bc8      	ldr	r3, [pc, #800]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2238      	movs	r2, #56	@ 0x38
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d105      	bne.n	8000ffa <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d15d      	bne.n	80010b2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e1bc      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	@ 0x80
 8001000:	025b      	lsls	r3, r3, #9
 8001002:	429a      	cmp	r2, r3
 8001004:	d107      	bne.n	8001016 <HAL_RCC_OscConfig+0x56>
 8001006:	4bbe      	ldr	r3, [pc, #760]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4bbd      	ldr	r3, [pc, #756]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 800100c:	2180      	movs	r1, #128	@ 0x80
 800100e:	0249      	lsls	r1, r1, #9
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e020      	b.n	8001058 <HAL_RCC_OscConfig+0x98>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	23a0      	movs	r3, #160	@ 0xa0
 800101c:	02db      	lsls	r3, r3, #11
 800101e:	429a      	cmp	r2, r3
 8001020:	d10e      	bne.n	8001040 <HAL_RCC_OscConfig+0x80>
 8001022:	4bb7      	ldr	r3, [pc, #732]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4bb6      	ldr	r3, [pc, #728]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001028:	2180      	movs	r1, #128	@ 0x80
 800102a:	02c9      	lsls	r1, r1, #11
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	4bb3      	ldr	r3, [pc, #716]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4bb2      	ldr	r3, [pc, #712]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001036:	2180      	movs	r1, #128	@ 0x80
 8001038:	0249      	lsls	r1, r1, #9
 800103a:	430a      	orrs	r2, r1
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e00b      	b.n	8001058 <HAL_RCC_OscConfig+0x98>
 8001040:	4baf      	ldr	r3, [pc, #700]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4bae      	ldr	r3, [pc, #696]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001046:	49af      	ldr	r1, [pc, #700]	@ (8001304 <HAL_RCC_OscConfig+0x344>)
 8001048:	400a      	ands	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	4bac      	ldr	r3, [pc, #688]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4bab      	ldr	r3, [pc, #684]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001052:	49ad      	ldr	r1, [pc, #692]	@ (8001308 <HAL_RCC_OscConfig+0x348>)
 8001054:	400a      	ands	r2, r1
 8001056:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d014      	beq.n	800108a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fbbc 	bl	80007dc <HAL_GetTick>
 8001064:	0003      	movs	r3, r0
 8001066:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800106a:	f7ff fbb7 	bl	80007dc <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	@ 0x64
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e17b      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800107c:	4ba0      	ldr	r3, [pc, #640]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	029b      	lsls	r3, r3, #10
 8001084:	4013      	ands	r3, r2
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0xaa>
 8001088:	e013      	b.n	80010b2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108a:	f7ff fba7 	bl	80007dc <HAL_GetTick>
 800108e:	0003      	movs	r3, r0
 8001090:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001094:	f7ff fba2 	bl	80007dc <HAL_GetTick>
 8001098:	0002      	movs	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	@ 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e166      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010a6:	4b96      	ldr	r3, [pc, #600]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	029b      	lsls	r3, r3, #10
 80010ae:	4013      	ands	r3, r2
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2202      	movs	r2, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d100      	bne.n	80010be <HAL_RCC_OscConfig+0xfe>
 80010bc:	e086      	b.n	80011cc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010be:	4b90      	ldr	r3, [pc, #576]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2238      	movs	r2, #56	@ 0x38
 80010c4:	4013      	ands	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d12f      	bne.n	800112e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e14c      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	4b89      	ldr	r3, [pc, #548]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4a8b      	ldr	r2, [pc, #556]	@ (800130c <HAL_RCC_OscConfig+0x34c>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	0019      	movs	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	021a      	lsls	r2, r3, #8
 80010ea:	4b85      	ldr	r3, [pc, #532]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80010ec:	430a      	orrs	r2, r1
 80010ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d112      	bne.n	800111c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010f6:	4b82      	ldr	r3, [pc, #520]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a85      	ldr	r2, [pc, #532]	@ (8001310 <HAL_RCC_OscConfig+0x350>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	0019      	movs	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	4b7e      	ldr	r3, [pc, #504]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800110a:	4b7d      	ldr	r3, [pc, #500]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0adb      	lsrs	r3, r3, #11
 8001110:	2207      	movs	r2, #7
 8001112:	4013      	ands	r3, r2
 8001114:	4a7f      	ldr	r2, [pc, #508]	@ (8001314 <HAL_RCC_OscConfig+0x354>)
 8001116:	40da      	lsrs	r2, r3
 8001118:	4b7f      	ldr	r3, [pc, #508]	@ (8001318 <HAL_RCC_OscConfig+0x358>)
 800111a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800111c:	4b7f      	ldr	r3, [pc, #508]	@ (800131c <HAL_RCC_OscConfig+0x35c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff faff 	bl	8000724 <HAL_InitTick>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d050      	beq.n	80011cc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e122      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d030      	beq.n	8001198 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001136:	4b72      	ldr	r3, [pc, #456]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a75      	ldr	r2, [pc, #468]	@ (8001310 <HAL_RCC_OscConfig+0x350>)
 800113c:	4013      	ands	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	4b6e      	ldr	r3, [pc, #440]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800114a:	4b6d      	ldr	r3, [pc, #436]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4b6c      	ldr	r3, [pc, #432]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001150:	2180      	movs	r1, #128	@ 0x80
 8001152:	0049      	lsls	r1, r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fb40 	bl	80007dc <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001162:	f7ff fb3b 	bl	80007dc <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e0ff      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001174:	4b62      	ldr	r3, [pc, #392]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4013      	ands	r3, r2
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b5f      	ldr	r3, [pc, #380]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a61      	ldr	r2, [pc, #388]	@ (800130c <HAL_RCC_OscConfig+0x34c>)
 8001186:	4013      	ands	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	021a      	lsls	r2, r3, #8
 8001190:	4b5b      	ldr	r3, [pc, #364]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001192:	430a      	orrs	r2, r1
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	e019      	b.n	80011cc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001198:	4b59      	ldr	r3, [pc, #356]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b58      	ldr	r3, [pc, #352]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 800119e:	4960      	ldr	r1, [pc, #384]	@ (8001320 <HAL_RCC_OscConfig+0x360>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fb1a 	bl	80007dc <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fb15 	bl	80007dc <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e0d9      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4013      	ands	r3, r2
 80011ca:	d1f0      	bne.n	80011ae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2208      	movs	r2, #8
 80011d2:	4013      	ands	r3, r2
 80011d4:	d042      	beq.n	800125c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80011d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2238      	movs	r2, #56	@ 0x38
 80011dc:	4013      	ands	r3, r2
 80011de:	2b18      	cmp	r3, #24
 80011e0:	d105      	bne.n	80011ee <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d138      	bne.n	800125c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0c2      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d019      	beq.n	800122a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011f6:	4b42      	ldr	r3, [pc, #264]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80011f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011fa:	4b41      	ldr	r3, [pc, #260]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	430a      	orrs	r2, r1
 8001200:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001202:	f7ff faeb 	bl	80007dc <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800120c:	f7ff fae6 	bl	80007dc <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e0aa      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800121e:	4b38      	ldr	r3, [pc, #224]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001222:	2202      	movs	r2, #2
 8001224:	4013      	ands	r3, r2
 8001226:	d0f1      	beq.n	800120c <HAL_RCC_OscConfig+0x24c>
 8001228:	e018      	b.n	800125c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800122a:	4b35      	ldr	r3, [pc, #212]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 800122c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800122e:	4b34      	ldr	r3, [pc, #208]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff fad1 	bl	80007dc <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001240:	f7ff facc 	bl	80007dc <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e090      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001252:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d1f1      	bne.n	8001240 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2204      	movs	r2, #4
 8001262:	4013      	ands	r3, r2
 8001264:	d100      	bne.n	8001268 <HAL_RCC_OscConfig+0x2a8>
 8001266:	e084      	b.n	8001372 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001268:	230f      	movs	r3, #15
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2238      	movs	r2, #56	@ 0x38
 8001276:	4013      	ands	r3, r2
 8001278:	2b20      	cmp	r3, #32
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d000      	beq.n	8001286 <HAL_RCC_OscConfig+0x2c6>
 8001284:	e075      	b.n	8001372 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e074      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d106      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2e0>
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001294:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001296:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 8001298:	2101      	movs	r1, #1
 800129a:	430a      	orrs	r2, r1
 800129c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800129e:	e01c      	b.n	80012da <HAL_RCC_OscConfig+0x31a>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x302>
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80012aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80012ae:	2104      	movs	r1, #4
 80012b0:	430a      	orrs	r2, r1
 80012b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80012b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012c0:	e00b      	b.n	80012da <HAL_RCC_OscConfig+0x31a>
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80012c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	438a      	bics	r2, r1
 80012cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80012d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_RCC_OscConfig+0x340>)
 80012d4:	2104      	movs	r1, #4
 80012d6:	438a      	bics	r2, r1
 80012d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d028      	beq.n	8001334 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e2:	f7ff fa7b 	bl	80007dc <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80012ea:	e01d      	b.n	8001328 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ec:	f7ff fa76 	bl	80007dc <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <HAL_RCC_OscConfig+0x364>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d915      	bls.n	8001328 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e039      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
 8001300:	40021000 	.word	0x40021000
 8001304:	fffeffff 	.word	0xfffeffff
 8001308:	fffbffff 	.word	0xfffbffff
 800130c:	ffff80ff 	.word	0xffff80ff
 8001310:	ffffc7ff 	.word	0xffffc7ff
 8001314:	02dc6c00 	.word	0x02dc6c00
 8001318:	20000000 	.word	0x20000000
 800131c:	20000004 	.word	0x20000004
 8001320:	fffffeff 	.word	0xfffffeff
 8001324:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <HAL_RCC_OscConfig+0x3bc>)
 800132a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d0dc      	beq.n	80012ec <HAL_RCC_OscConfig+0x32c>
 8001332:	e013      	b.n	800135c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fa52 	bl	80007dc <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800133c:	e009      	b.n	8001352 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff fa4d 	bl	80007dc <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <HAL_RCC_OscConfig+0x3c0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e010      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_RCC_OscConfig+0x3bc>)
 8001354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800135c:	230f      	movs	r3, #15
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d105      	bne.n	8001372 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_RCC_OscConfig+0x3bc>)
 8001368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <HAL_RCC_OscConfig+0x3bc>)
 800136c:	4905      	ldr	r1, [pc, #20]	@ (8001384 <HAL_RCC_OscConfig+0x3c4>)
 800136e:	400a      	ands	r2, r1
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b006      	add	sp, #24
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	00001388 	.word	0x00001388
 8001384:	efffffff 	.word	0xefffffff

08001388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0e9      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800139c:	4b76      	ldr	r3, [pc, #472]	@ (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2207      	movs	r2, #7
 80013a2:	4013      	ands	r3, r2
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d91e      	bls.n	80013e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b73      	ldr	r3, [pc, #460]	@ (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2207      	movs	r2, #7
 80013b0:	4393      	bics	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	4b70      	ldr	r3, [pc, #448]	@ (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013bc:	f7ff fa0e 	bl	80007dc <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013c4:	e009      	b.n	80013da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013c6:	f7ff fa09 	bl	80007dc <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	4a6a      	ldr	r2, [pc, #424]	@ (800157c <HAL_RCC_ClockConfig+0x1f4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e0ca      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013da:	4b67      	ldr	r3, [pc, #412]	@ (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2207      	movs	r2, #7
 80013e0:	4013      	ands	r3, r2
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d1ee      	bne.n	80013c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2202      	movs	r2, #2
 80013ee:	4013      	ands	r3, r2
 80013f0:	d017      	beq.n	8001422 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2204      	movs	r2, #4
 80013f8:	4013      	ands	r3, r2
 80013fa:	d008      	beq.n	800140e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013fc:	4b60      	ldr	r3, [pc, #384]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a60      	ldr	r2, [pc, #384]	@ (8001584 <HAL_RCC_ClockConfig+0x1fc>)
 8001402:	401a      	ands	r2, r3
 8001404:	4b5e      	ldr	r3, [pc, #376]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001406:	21b0      	movs	r1, #176	@ 0xb0
 8001408:	0109      	lsls	r1, r1, #4
 800140a:	430a      	orrs	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800140e:	4b5c      	ldr	r3, [pc, #368]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	4a5d      	ldr	r2, [pc, #372]	@ (8001588 <HAL_RCC_ClockConfig+0x200>)
 8001414:	4013      	ands	r3, r2
 8001416:	0019      	movs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	4b58      	ldr	r3, [pc, #352]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4013      	ands	r3, r2
 800142a:	d055      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800142c:	4b54      	ldr	r3, [pc, #336]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	221c      	movs	r2, #28
 8001432:	4393      	bics	r3, r2
 8001434:	0019      	movs	r1, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	4b51      	ldr	r3, [pc, #324]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d107      	bne.n	8001458 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001448:	4b4d      	ldr	r3, [pc, #308]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	4013      	ands	r3, r2
 8001452:	d11f      	bne.n	8001494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e08b      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001460:	4b47      	ldr	r3, [pc, #284]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4013      	ands	r3, r2
 800146a:	d113      	bne.n	8001494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e07f      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d106      	bne.n	8001486 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001478:	4b41      	ldr	r3, [pc, #260]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800147a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147c:	2202      	movs	r2, #2
 800147e:	4013      	ands	r3, r2
 8001480:	d108      	bne.n	8001494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e074      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001486:	4b3e      	ldr	r3, [pc, #248]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e06d      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001494:	4b3a      	ldr	r3, [pc, #232]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2207      	movs	r2, #7
 800149a:	4393      	bics	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 80014a4:	430a      	orrs	r2, r1
 80014a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014a8:	f7ff f998 	bl	80007dc <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f7ff f993 	bl	80007dc <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a2f      	ldr	r2, [pc, #188]	@ (800157c <HAL_RCC_ClockConfig+0x1f4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e054      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2238      	movs	r2, #56	@ 0x38
 80014cc:	401a      	ands	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1ec      	bne.n	80014b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2207      	movs	r2, #7
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d21e      	bcs.n	8001524 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2207      	movs	r2, #7
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014f8:	f7ff f970 	bl	80007dc <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001500:	e009      	b.n	8001516 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001502:	f7ff f96b 	bl	80007dc <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <HAL_RCC_ClockConfig+0x1f4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e02c      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2207      	movs	r2, #7
 800151c:	4013      	ands	r3, r2
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d1ee      	bne.n	8001502 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2204      	movs	r2, #4
 800152a:	4013      	ands	r3, r2
 800152c:	d009      	beq.n	8001542 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	4a16      	ldr	r2, [pc, #88]	@ (800158c <HAL_RCC_ClockConfig+0x204>)
 8001534:	4013      	ands	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001542:	f000 f82b 	bl	800159c <HAL_RCC_GetSysClockFreq>
 8001546:	0001      	movs	r1, r0
 8001548:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800154a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	220f      	movs	r2, #15
 8001550:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <HAL_RCC_ClockConfig+0x208>)
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001558:	221f      	movs	r2, #31
 800155a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800155c:	000a      	movs	r2, r1
 800155e:	40da      	lsrs	r2, r3
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <HAL_RCC_ClockConfig+0x20c>)
 8001562:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <HAL_RCC_ClockConfig+0x210>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff f8db 	bl	8000724 <HAL_InitTick>
 800156e:	0003      	movs	r3, r0
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b004      	add	sp, #16
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40022000 	.word	0x40022000
 800157c:	00001388 	.word	0x00001388
 8001580:	40021000 	.word	0x40021000
 8001584:	ffff84ff 	.word	0xffff84ff
 8001588:	fffff0ff 	.word	0xfffff0ff
 800158c:	ffff8fff 	.word	0xffff8fff
 8001590:	08002890 	.word	0x08002890
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80015a2:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x94>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	2207      	movs	r2, #7
 80015aa:	4013      	ands	r3, r2
 80015ac:	3301      	adds	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x94>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2238      	movs	r2, #56	@ 0x38
 80015b6:	4013      	ands	r3, r2
 80015b8:	d10f      	bne.n	80015da <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80015ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x94>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0adb      	lsrs	r3, r3, #11
 80015c0:	2207      	movs	r2, #7
 80015c2:	4013      	ands	r3, r2
 80015c4:	2201      	movs	r2, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4819      	ldr	r0, [pc, #100]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x98>)
 80015d0:	f7fe fd9a 	bl	8000108 <__udivsi3>
 80015d4:	0003      	movs	r3, r0
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e01e      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x94>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2238      	movs	r2, #56	@ 0x38
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d102      	bne.n	80015ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015e6:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e015      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80015ec:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x94>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2238      	movs	r2, #56	@ 0x38
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	d103      	bne.n	8001600 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x94>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2238      	movs	r2, #56	@ 0x38
 8001606:	4013      	ands	r3, r2
 8001608:	2b18      	cmp	r3, #24
 800160a:	d103      	bne.n	8001614 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800160c:	23fa      	movs	r3, #250	@ 0xfa
 800160e:	01db      	lsls	r3, r3, #7
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	e001      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7fe fd74 	bl	8000108 <__udivsi3>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001624:	68fb      	ldr	r3, [r7, #12]
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b004      	add	sp, #16
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	02dc6c00 	.word	0x02dc6c00
 8001638:	007a1200 	.word	0x007a1200

0800163c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001644:	2313      	movs	r3, #19
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800164c:	2312      	movs	r3, #18
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2240      	movs	r2, #64	@ 0x40
 800165a:	4013      	ands	r3, r2
 800165c:	d100      	bne.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800165e:	e079      	b.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001660:	2011      	movs	r0, #17
 8001662:	183b      	adds	r3, r7, r0
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001668:	4b63      	ldr	r3, [pc, #396]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800166a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	055b      	lsls	r3, r3, #21
 8001670:	4013      	ands	r3, r2
 8001672:	d110      	bne.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	4b60      	ldr	r3, [pc, #384]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001678:	4b5f      	ldr	r3, [pc, #380]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800167a:	2180      	movs	r1, #128	@ 0x80
 800167c:	0549      	lsls	r1, r1, #21
 800167e:	430a      	orrs	r2, r1
 8001680:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001682:	4b5d      	ldr	r3, [pc, #372]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001686:	2380      	movs	r3, #128	@ 0x80
 8001688:	055b      	lsls	r3, r3, #21
 800168a:	4013      	ands	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001690:	183b      	adds	r3, r7, r0
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001696:	4b58      	ldr	r3, [pc, #352]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001698:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800169a:	23c0      	movs	r3, #192	@ 0xc0
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4013      	ands	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d019      	beq.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d014      	beq.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80016b2:	4b51      	ldr	r3, [pc, #324]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80016b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b6:	4a51      	ldr	r2, [pc, #324]	@ (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016bc:	4b4e      	ldr	r3, [pc, #312]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80016be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016c0:	4b4d      	ldr	r3, [pc, #308]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80016c2:	2180      	movs	r1, #128	@ 0x80
 80016c4:	0249      	lsls	r1, r1, #9
 80016c6:	430a      	orrs	r2, r1
 80016c8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016ca:	4b4b      	ldr	r3, [pc, #300]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80016cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016ce:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80016d0:	494b      	ldr	r1, [pc, #300]	@ (8001800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016d2:	400a      	ands	r2, r1
 80016d4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80016d6:	4b48      	ldr	r3, [pc, #288]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2201      	movs	r2, #1
 80016e0:	4013      	ands	r3, r2
 80016e2:	d016      	beq.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff f87a 	bl	80007dc <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80016ec:	e00c      	b.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff f875 	bl	80007dc <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	4a42      	ldr	r2, [pc, #264]	@ (8001804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d904      	bls.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80016fe:	2313      	movs	r3, #19
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	2203      	movs	r2, #3
 8001704:	701a      	strb	r2, [r3, #0]
          break;
 8001706:	e004      	b.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001708:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800170a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d0ed      	beq.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001712:	2313      	movs	r3, #19
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10a      	bne.n	8001732 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800171c:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800171e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001720:	4a36      	ldr	r2, [pc, #216]	@ (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001722:	4013      	ands	r3, r2
 8001724:	0019      	movs	r1, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699a      	ldr	r2, [r3, #24]
 800172a:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800172c:	430a      	orrs	r2, r1
 800172e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001730:	e005      	b.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001732:	2312      	movs	r3, #18
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2213      	movs	r2, #19
 8001738:	18ba      	adds	r2, r7, r2
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800173e:	2311      	movs	r3, #17
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800174a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800174c:	4b2a      	ldr	r3, [pc, #168]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800174e:	492e      	ldr	r1, [pc, #184]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001750:	400a      	ands	r2, r1
 8001752:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	4013      	ands	r3, r2
 800175c:	d009      	beq.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800175e:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001762:	2203      	movs	r2, #3
 8001764:	4393      	bics	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800176e:	430a      	orrs	r2, r1
 8001770:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d009      	beq.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800177e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001780:	4a22      	ldr	r2, [pc, #136]	@ (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001782:	4013      	ands	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800178c:	430a      	orrs	r2, r1
 800178e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2220      	movs	r2, #32
 8001796:	4013      	ands	r3, r2
 8001798:	d008      	beq.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800179a:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800179c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	0899      	lsrs	r1, r3, #2
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	4b14      	ldr	r3, [pc, #80]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2204      	movs	r2, #4
 80017b2:	4013      	ands	r3, r2
 80017b4:	d009      	beq.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ba:	4a15      	ldr	r2, [pc, #84]	@ (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	4013      	ands	r3, r2
 80017d2:	d009      	beq.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	22e0      	movs	r2, #224	@ 0xe0
 80017da:	4393      	bics	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80017e8:	2312      	movs	r3, #18
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	781b      	ldrb	r3, [r3, #0]
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b006      	add	sp, #24
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	40021000 	.word	0x40021000
 80017fc:	fffffcff 	.word	0xfffffcff
 8001800:	fffeffff 	.word	0xfffeffff
 8001804:	00001388 	.word	0x00001388
 8001808:	efffffff 	.word	0xefffffff
 800180c:	ffffcfff 	.word	0xffffcfff
 8001810:	ffff3fff 	.word	0xffff3fff

08001814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0a8      	b.n	8001978 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	2382      	movs	r3, #130	@ 0x82
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	429a      	cmp	r2, r3
 8001838:	d009      	beq.n	800184e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
 8001840:	e005      	b.n	800184e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	225d      	movs	r2, #93	@ 0x5d
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	225c      	movs	r2, #92	@ 0x5c
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	0018      	movs	r0, r3
 800186c:	f7fe fe80 	bl	8000570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	225d      	movs	r2, #93	@ 0x5d
 8001874:	2102      	movs	r1, #2
 8001876:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2140      	movs	r1, #64	@ 0x40
 8001884:	438a      	bics	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	23e0      	movs	r3, #224	@ 0xe0
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	429a      	cmp	r2, r3
 8001892:	d902      	bls.n	800189a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e002      	b.n	80018a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	015b      	lsls	r3, r3, #5
 800189e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	23f0      	movs	r3, #240	@ 0xf0
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d008      	beq.n	80018be <HAL_SPI_Init+0xaa>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	23e0      	movs	r3, #224	@ 0xe0
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d002      	beq.n	80018be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	2382      	movs	r3, #130	@ 0x82
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	2384      	movs	r3, #132	@ 0x84
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	400b      	ands	r3, r1
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	2102      	movs	r1, #2
 80018da:	400b      	ands	r3, r1
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	2101      	movs	r1, #1
 80018e4:	400b      	ands	r3, r1
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6999      	ldr	r1, [r3, #24]
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	400b      	ands	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2138      	movs	r1, #56	@ 0x38
 80018fa:	400b      	ands	r3, r1
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	2180      	movs	r1, #128	@ 0x80
 8001904:	400b      	ands	r3, r1
 8001906:	431a      	orrs	r2, r3
 8001908:	0011      	movs	r1, r2
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800190e:	2380      	movs	r3, #128	@ 0x80
 8001910:	019b      	lsls	r3, r3, #6
 8001912:	401a      	ands	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	0c1b      	lsrs	r3, r3, #16
 8001922:	2204      	movs	r2, #4
 8001924:	401a      	ands	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	2110      	movs	r1, #16
 800192c:	400b      	ands	r3, r1
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001934:	2108      	movs	r1, #8
 8001936:	400b      	ands	r3, r1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	23f0      	movs	r3, #240	@ 0xf0
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	400b      	ands	r3, r1
 8001944:	431a      	orrs	r2, r3
 8001946:	0011      	movs	r1, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	401a      	ands	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4907      	ldr	r1, [pc, #28]	@ (8001980 <HAL_SPI_Init+0x16c>)
 8001964:	400a      	ands	r2, r1
 8001966:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	225d      	movs	r2, #93	@ 0x5d
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}
 8001980:	fffff7ff 	.word	0xfffff7ff

08001984 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	1dbb      	adds	r3, r7, #6
 8001990:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_SPI_Transmit_IT+0x1c>
 8001998:	1dbb      	adds	r3, r7, #6
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_SPI_Transmit_IT+0x20>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e072      	b.n	8001a8a <HAL_SPI_Transmit_IT+0x106>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	225d      	movs	r2, #93	@ 0x5d
 80019a8:	5c9b      	ldrb	r3, [r3, r2]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d001      	beq.n	80019b4 <HAL_SPI_Transmit_IT+0x30>
  {
    return HAL_BUSY;
 80019b0:	2302      	movs	r3, #2
 80019b2:	e06a      	b.n	8001a8a <HAL_SPI_Transmit_IT+0x106>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	225c      	movs	r2, #92	@ 0x5c
 80019b8:	5c9b      	ldrb	r3, [r3, r2]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_SPI_Transmit_IT+0x3e>
 80019be:	2302      	movs	r3, #2
 80019c0:	e063      	b.n	8001a8a <HAL_SPI_Transmit_IT+0x106>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	225c      	movs	r2, #92	@ 0x5c
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	225d      	movs	r2, #93	@ 0x5d
 80019ce:	2103      	movs	r1, #3
 80019d0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1dba      	adds	r2, r7, #6
 80019e2:	8812      	ldrh	r2, [r2, #0]
 80019e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1dba      	adds	r2, r7, #6
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2244      	movs	r2, #68	@ 0x44
 80019f8:	2100      	movs	r1, #0
 80019fa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2246      	movs	r2, #70	@ 0x46
 8001a00:	2100      	movs	r1, #0
 8001a02:	5299      	strh	r1, [r3, r2]
  hspi->RxISR       = NULL;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	23e0      	movs	r3, #224	@ 0xe0
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d903      	bls.n	8001a1e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4a1e      	ldr	r2, [pc, #120]	@ (8001a94 <HAL_SPI_Transmit_IT+0x110>)
 8001a1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a1c:	e002      	b.n	8001a24 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_SPI_Transmit_IT+0x114>)
 8001a22:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	2380      	movs	r3, #128	@ 0x80
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d110      	bne.n	8001a52 <HAL_SPI_Transmit_IT+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2140      	movs	r1, #64	@ 0x40
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2180      	movs	r1, #128	@ 0x80
 8001a4c:	01c9      	lsls	r1, r1, #7
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2240      	movs	r2, #64	@ 0x40
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b40      	cmp	r3, #64	@ 0x40
 8001a5e:	d007      	beq.n	8001a70 <HAL_SPI_Transmit_IT+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2140      	movs	r1, #64	@ 0x40
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	225c      	movs	r2, #92	@ 0x5c
 8001a74:	2100      	movs	r1, #0
 8001a76:	5499      	strb	r1, [r3, r2]
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	21a0      	movs	r1, #160	@ 0xa0
 8001a84:	430a      	orrs	r2, r1
 8001a86:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	080022a9 	.word	0x080022a9
 8001a98:	08002261 	.word	0x08002261

08001a9c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	1dbb      	adds	r3, r7, #6
 8001aa8:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	225d      	movs	r2, #93	@ 0x5d
 8001aae:	5c9b      	ldrb	r3, [r3, r2]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e09a      	b.n	8001bf0 <HAL_SPI_Receive_IT+0x154>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d112      	bne.n	8001ae8 <HAL_SPI_Receive_IT+0x4c>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	2382      	movs	r3, #130	@ 0x82
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d10c      	bne.n	8001ae8 <HAL_SPI_Receive_IT+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	225d      	movs	r2, #93	@ 0x5d
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001ad6:	1dbb      	adds	r3, r7, #6
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f892 	bl	8001c08 <HAL_SPI_TransmitReceive_IT>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	e083      	b.n	8001bf0 <HAL_SPI_Receive_IT+0x154>
  }


  if ((pData == NULL) || (Size == 0U))
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_SPI_Receive_IT+0x5a>
 8001aee:	1dbb      	adds	r3, r7, #6
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_SPI_Receive_IT+0x5e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07a      	b.n	8001bf0 <HAL_SPI_Receive_IT+0x154>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	225c      	movs	r2, #92	@ 0x5c
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_SPI_Receive_IT+0x6c>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e073      	b.n	8001bf0 <HAL_SPI_Receive_IT+0x154>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	225c      	movs	r2, #92	@ 0x5c
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	225d      	movs	r2, #93	@ 0x5d
 8001b14:	2104      	movs	r1, #4
 8001b16:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1dba      	adds	r2, r7, #6
 8001b28:	2144      	movs	r1, #68	@ 0x44
 8001b2a:	8812      	ldrh	r2, [r2, #0]
 8001b2c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1dba      	adds	r2, r7, #6
 8001b32:	2146      	movs	r1, #70	@ 0x46
 8001b34:	8812      	ldrh	r2, [r2, #0]
 8001b36:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	23e0      	movs	r3, #224	@ 0xe0
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d90b      	bls.n	8001b74 <HAL_SPI_Receive_IT+0xd8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4924      	ldr	r1, [pc, #144]	@ (8001bf8 <HAL_SPI_Receive_IT+0x15c>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <HAL_SPI_Receive_IT+0x160>)
 8001b70:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001b72:	e00b      	b.n	8001b8c <HAL_SPI_Receive_IT+0xf0>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2180      	movs	r1, #128	@ 0x80
 8001b80:	0149      	lsls	r1, r1, #5
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <HAL_SPI_Receive_IT+0x164>)
 8001b8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10f      	bne.n	8001bb8 <HAL_SPI_Receive_IT+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2140      	movs	r1, #64	@ 0x40
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4914      	ldr	r1, [pc, #80]	@ (8001c04 <HAL_SPI_Receive_IT+0x168>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2240      	movs	r2, #64	@ 0x40
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b40      	cmp	r3, #64	@ 0x40
 8001bc4:	d007      	beq.n	8001bd6 <HAL_SPI_Receive_IT+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2140      	movs	r1, #64	@ 0x40
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	225c      	movs	r2, #92	@ 0x5c
 8001bda:	2100      	movs	r1, #0
 8001bdc:	5499      	strb	r1, [r3, r2]
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2160      	movs	r1, #96	@ 0x60
 8001bea:	430a      	orrs	r2, r1
 8001bec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b004      	add	sp, #16
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	ffffefff 	.word	0xffffefff
 8001bfc:	08002213 	.word	0x08002213
 8001c00:	080021c1 	.word	0x080021c1
 8001c04:	ffffbfff 	.word	0xffffbfff

08001c08 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	001a      	movs	r2, r3
 8001c16:	1cbb      	adds	r3, r7, #2
 8001c18:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c1a:	2017      	movs	r0, #23
 8001c1c:	183b      	adds	r3, r7, r0
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	215d      	movs	r1, #93	@ 0x5d
 8001c22:	5c52      	ldrb	r2, [r2, r1]
 8001c24:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c2c:	0001      	movs	r1, r0
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d00e      	beq.n	8001c54 <HAL_SPI_TransmitReceive_IT+0x4c>
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	2382      	movs	r3, #130	@ 0x82
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <HAL_SPI_TransmitReceive_IT+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d103      	bne.n	8001c50 <HAL_SPI_TransmitReceive_IT+0x48>
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d001      	beq.n	8001c54 <HAL_SPI_TransmitReceive_IT+0x4c>
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
 8001c52:	e086      	b.n	8001d62 <HAL_SPI_TransmitReceive_IT+0x15a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_SPI_TransmitReceive_IT+0x60>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_SPI_TransmitReceive_IT+0x60>
 8001c60:	1cbb      	adds	r3, r7, #2
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_SPI_TransmitReceive_IT+0x64>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e07a      	b.n	8001d62 <HAL_SPI_TransmitReceive_IT+0x15a>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	225c      	movs	r2, #92	@ 0x5c
 8001c70:	5c9b      	ldrb	r3, [r3, r2]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_SPI_TransmitReceive_IT+0x72>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e073      	b.n	8001d62 <HAL_SPI_TransmitReceive_IT+0x15a>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	225c      	movs	r2, #92	@ 0x5c
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	225d      	movs	r2, #93	@ 0x5d
 8001c86:	5c9b      	ldrb	r3, [r3, r2]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d003      	beq.n	8001c96 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	225d      	movs	r2, #93	@ 0x5d
 8001c92:	2105      	movs	r1, #5
 8001c94:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1cba      	adds	r2, r7, #2
 8001ca6:	8812      	ldrh	r2, [r2, #0]
 8001ca8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1cba      	adds	r2, r7, #2
 8001cae:	8812      	ldrh	r2, [r2, #0]
 8001cb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1cba      	adds	r2, r7, #2
 8001cbc:	2144      	movs	r1, #68	@ 0x44
 8001cbe:	8812      	ldrh	r2, [r2, #0]
 8001cc0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1cba      	adds	r2, r7, #2
 8001cc6:	2146      	movs	r1, #70	@ 0x46
 8001cc8:	8812      	ldrh	r2, [r2, #0]
 8001cca:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	23e0      	movs	r3, #224	@ 0xe0
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d906      	bls.n	8001ce6 <HAL_SPI_TransmitReceive_IT+0xde>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a24      	ldr	r2, [pc, #144]	@ (8001d6c <HAL_SPI_TransmitReceive_IT+0x164>)
 8001cdc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <HAL_SPI_TransmitReceive_IT+0x168>)
 8001ce2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ce4:	e005      	b.n	8001cf2 <HAL_SPI_TransmitReceive_IT+0xea>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4a22      	ldr	r2, [pc, #136]	@ (8001d74 <HAL_SPI_TransmitReceive_IT+0x16c>)
 8001cea:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a22      	ldr	r2, [pc, #136]	@ (8001d78 <HAL_SPI_TransmitReceive_IT+0x170>)
 8001cf0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	23e0      	movs	r3, #224	@ 0xe0
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d803      	bhi.n	8001d06 <HAL_SPI_TransmitReceive_IT+0xfe>
 8001cfe:	1cbb      	adds	r3, r7, #2
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d908      	bls.n	8001d18 <HAL_SPI_TransmitReceive_IT+0x110>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	491a      	ldr	r1, [pc, #104]	@ (8001d7c <HAL_SPI_TransmitReceive_IT+0x174>)
 8001d12:	400a      	ands	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e008      	b.n	8001d2a <HAL_SPI_TransmitReceive_IT+0x122>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2180      	movs	r1, #128	@ 0x80
 8001d24:	0149      	lsls	r1, r1, #5
 8001d26:	430a      	orrs	r2, r1
 8001d28:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2240      	movs	r2, #64	@ 0x40
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b40      	cmp	r3, #64	@ 0x40
 8001d36:	d007      	beq.n	8001d48 <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2140      	movs	r1, #64	@ 0x40
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	225c      	movs	r2, #92	@ 0x5c
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	21e0      	movs	r1, #224	@ 0xe0
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b006      	add	sp, #24
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	080020f7 	.word	0x080020f7
 8001d70:	0800215f 	.word	0x0800215f
 8001d74:	08001fa1 	.word	0x08001fa1
 8001d78:	08002063 	.word	0x08002063
 8001d7c:	ffffefff 	.word	0xffffefff

08001d80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2240      	movs	r2, #64	@ 0x40
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d10d      	bne.n	8001dbc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2201      	movs	r2, #1
 8001da4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001da6:	d009      	beq.n	8001dbc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2240      	movs	r2, #64	@ 0x40
 8001dac:	4013      	ands	r3, r2
 8001dae:	d005      	beq.n	8001dbc <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	0010      	movs	r0, r2
 8001db8:	4798      	blx	r3
    return;
 8001dba:	e0c5      	b.n	8001f48 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d009      	beq.n	8001dd8 <HAL_SPI_IRQHandler+0x58>
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2280      	movs	r2, #128	@ 0x80
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d005      	beq.n	8001dd8 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	4798      	blx	r3
    return;
 8001dd6:	e0b7      	b.n	8001f48 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d109      	bne.n	8001df4 <HAL_SPI_IRQHandler+0x74>
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2240      	movs	r2, #64	@ 0x40
 8001de4:	4013      	ands	r3, r2
 8001de6:	d105      	bne.n	8001df4 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	2380      	movs	r3, #128	@ 0x80
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	d100      	bne.n	8001df4 <HAL_SPI_IRQHandler+0x74>
 8001df2:	e0a9      	b.n	8001f48 <HAL_SPI_IRQHandler+0x1c8>
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2220      	movs	r2, #32
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d100      	bne.n	8001dfe <HAL_SPI_IRQHandler+0x7e>
 8001dfc:	e0a4      	b.n	8001f48 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2240      	movs	r2, #64	@ 0x40
 8001e02:	4013      	ands	r3, r2
 8001e04:	d023      	beq.n	8001e4e <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	225d      	movs	r2, #93	@ 0x5d
 8001e0a:	5c9b      	ldrb	r3, [r3, r2]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d011      	beq.n	8001e36 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	2204      	movs	r2, #4
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	e00b      	b.n	8001e4e <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]
        return;
 8001e4c:	e07c      	b.n	8001f48 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2220      	movs	r2, #32
 8001e52:	4013      	ands	r3, r2
 8001e54:	d014      	beq.n	8001e80 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2140      	movs	r1, #64	@ 0x40
 8001e7a:	438a      	bics	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4013      	ands	r3, r2
 8001e88:	d00c      	beq.n	8001ea4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8e:	2208      	movs	r2, #8
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d04c      	beq.n	8001f46 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	21e0      	movs	r1, #224	@ 0xe0
 8001eb8:	438a      	bics	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	225d      	movs	r2, #93	@ 0x5d
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d103      	bne.n	8001ed4 <HAL_SPI_IRQHandler+0x154>
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d032      	beq.n	8001f3a <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2103      	movs	r1, #3
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d010      	beq.n	8001f0e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <HAL_SPI_IRQHandler+0x1d0>)
 8001ef2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7fe fd57 	bl	80009ac <HAL_DMA_Abort_IT>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	2240      	movs	r2, #64	@ 0x40
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <HAL_SPI_IRQHandler+0x1d0>)
 8001f1c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe fd42 	bl	80009ac <HAL_DMA_Abort_IT>
 8001f28:	1e03      	subs	r3, r0, #0
 8001f2a:	d00b      	beq.n	8001f44 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f30:	2240      	movs	r2, #64	@ 0x40
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8001f38:	e004      	b.n	8001f44 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f000 f811 	bl	8001f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001f42:	e000      	b.n	8001f46 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8001f44:	46c0      	nop			@ (mov r8, r8)
    return;
 8001f46:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b008      	add	sp, #32
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	08001f75 	.word	0x08001f75

08001f54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f6c:	46c0      	nop			@ (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2246      	movs	r2, #70	@ 0x46
 8001f86:	2100      	movs	r1, #0
 8001f88:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f7ff ffe6 	bl	8001f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001f98:	46c0      	nop			@ (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2246      	movs	r2, #70	@ 0x46
 8001fac:	5a9b      	ldrh	r3, [r3, r2]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d924      	bls.n	8001ffe <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	1c9a      	adds	r2, r3, #2
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2246      	movs	r2, #70	@ 0x46
 8001fd0:	5a9b      	ldrh	r3, [r3, r2]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b02      	subs	r3, #2
 8001fd6:	b299      	uxth	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2246      	movs	r2, #70	@ 0x46
 8001fdc:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2246      	movs	r2, #70	@ 0x46
 8001fe2:	5a9b      	ldrh	r3, [r3, r2]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d120      	bne.n	800202c <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2180      	movs	r1, #128	@ 0x80
 8001ff6:	0149      	lsls	r1, r1, #5
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	e016      	b.n	800202c <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	330c      	adds	r3, #12
 8002004:	001a      	movs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	7812      	ldrb	r2, [r2, #0]
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2246      	movs	r2, #70	@ 0x46
 800201e:	5a9b      	ldrh	r3, [r3, r2]
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b299      	uxth	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2246      	movs	r2, #70	@ 0x46
 800202a:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2246      	movs	r2, #70	@ 0x46
 8002030:	5a9b      	ldrh	r3, [r3, r2]
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d110      	bne.n	800205a <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2160      	movs	r1, #96	@ 0x60
 8002044:	438a      	bics	r2, r1
 8002046:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	0018      	movs	r0, r3
 8002056:	f000 fb1f 	bl	8002698 <SPI_CloseRxTx_ISR>
    }
  }
}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}

08002062 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d912      	bls.n	800209a <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b02      	subs	r3, #2
 8002092:	b29a      	uxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002098:	e012      	b.n	80020c0 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	330c      	adds	r3, #12
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d111      	bne.n	80020ee <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2180      	movs	r1, #128	@ 0x80
 80020d6:	438a      	bics	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2246      	movs	r2, #70	@ 0x46
 80020de:	5a9b      	ldrh	r3, [r3, r2]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 fad5 	bl	8002698 <SPI_CloseRxTx_ISR>
    }
  }
}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	b292      	uxth	r2, r2
 800210a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	1c9a      	adds	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2246      	movs	r2, #70	@ 0x46
 800211a:	5a9b      	ldrh	r3, [r3, r2]
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b299      	uxth	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2246      	movs	r2, #70	@ 0x46
 8002126:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2246      	movs	r2, #70	@ 0x46
 800212c:	5a9b      	ldrh	r3, [r3, r2]
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d110      	bne.n	8002156 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2140      	movs	r1, #64	@ 0x40
 8002140:	438a      	bics	r2, r1
 8002142:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f000 faa1 	bl	8002698 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}

0800215e <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216a:	881a      	ldrh	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002176:	1c9a      	adds	r2, r3, #2
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d111      	bne.n	80021b8 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2180      	movs	r1, #128	@ 0x80
 80021a0:	438a      	bics	r2, r1
 80021a2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2246      	movs	r2, #70	@ 0x46
 80021a8:	5a9b      	ldrh	r3, [r3, r2]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 fa70 	bl	8002698 <SPI_CloseRxTx_ISR>
    }
  }
}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}

080021c0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	001a      	movs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2246      	movs	r2, #70	@ 0x46
 80021e8:	5a9b      	ldrh	r3, [r3, r2]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b299      	uxth	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2246      	movs	r2, #70	@ 0x46
 80021f4:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2246      	movs	r2, #70	@ 0x46
 80021fa:	5a9b      	ldrh	r3, [r3, r2]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 fa8d 	bl	8002724 <SPI_CloseRx_ISR>
  }
}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}

08002212 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	b292      	uxth	r2, r2
 8002226:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	1c9a      	adds	r2, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2246      	movs	r2, #70	@ 0x46
 8002236:	5a9b      	ldrh	r3, [r3, r2]
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b299      	uxth	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2246      	movs	r2, #70	@ 0x46
 8002242:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2246      	movs	r2, #70	@ 0x46
 8002248:	5a9b      	ldrh	r3, [r3, r2]
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 fa66 	bl	8002724 <SPI_CloseRx_ISR>
  }
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	330c      	adds	r3, #12
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 fa73 	bl	8002786 <SPI_CloseTx_ISR>
  }
}
 80022a0:	46c0      	nop			@ (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b4:	881a      	ldrh	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c0:	1c9a      	adds	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 fa50 	bl	8002786 <SPI_CloseTx_ISR>
  }
}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	1dfb      	adds	r3, r7, #7
 80022fe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002300:	f7fe fa6c 	bl	80007dc <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	18d3      	adds	r3, r2, r3
 800230e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002310:	f7fe fa64 	bl	80007dc <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002318:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	015b      	lsls	r3, r3, #5
 800231e:	0d1b      	lsrs	r3, r3, #20
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	4353      	muls	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002326:	e058      	b.n	80023da <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	d055      	beq.n	80023da <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800232e:	f7fe fa55 	bl	80007dc <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	429a      	cmp	r2, r3
 800233c:	d902      	bls.n	8002344 <SPI_WaitFlagStateUntilTimeout+0x54>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d142      	bne.n	80023ca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	21e0      	movs	r1, #224	@ 0xe0
 8002350:	438a      	bics	r2, r1
 8002352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	2382      	movs	r3, #130	@ 0x82
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	429a      	cmp	r2, r3
 800235e:	d113      	bne.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	429a      	cmp	r2, r3
 800236a:	d005      	beq.n	8002378 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2140      	movs	r1, #64	@ 0x40
 8002384:	438a      	bics	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	019b      	lsls	r3, r3, #6
 8002390:	429a      	cmp	r2, r3
 8002392:	d110      	bne.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	491a      	ldr	r1, [pc, #104]	@ (8002408 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2180      	movs	r1, #128	@ 0x80
 80023b0:	0189      	lsls	r1, r1, #6
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	225d      	movs	r2, #93	@ 0x5d
 80023ba:	2101      	movs	r1, #1
 80023bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	225c      	movs	r2, #92	@ 0x5c
 80023c2:	2100      	movs	r1, #0
 80023c4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e017      	b.n	80023fa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	425a      	negs	r2, r3
 80023ea:	4153      	adcs	r3, r2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	001a      	movs	r2, r3
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d197      	bne.n	8002328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b008      	add	sp, #32
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	20000000 	.word	0x20000000
 8002408:	ffffdfff 	.word	0xffffdfff

0800240c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800241a:	2317      	movs	r3, #23
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002422:	f7fe f9db 	bl	80007dc <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	18d3      	adds	r3, r2, r3
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002432:	f7fe f9d3 	bl	80007dc <HAL_GetTick>
 8002436:	0003      	movs	r3, r0
 8002438:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	330c      	adds	r3, #12
 8002440:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002442:	4b41      	ldr	r3, [pc, #260]	@ (8002548 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	0013      	movs	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	189b      	adds	r3, r3, r2
 800244c:	00da      	lsls	r2, r3, #3
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	0d1b      	lsrs	r3, r3, #20
 8002452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002454:	4353      	muls	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002458:	e068      	b.n	800252c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	23c0      	movs	r3, #192	@ 0xc0
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	429a      	cmp	r2, r3
 8002462:	d10a      	bne.n	800247a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	2117      	movs	r1, #23
 8002472:	187b      	adds	r3, r7, r1
 8002474:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002476:	187b      	adds	r3, r7, r1
 8002478:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	d055      	beq.n	800252c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002480:	f7fe f9ac 	bl	80007dc <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248c:	429a      	cmp	r2, r3
 800248e:	d902      	bls.n	8002496 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d142      	bne.n	800251c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	21e0      	movs	r1, #224	@ 0xe0
 80024a2:	438a      	bics	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	2382      	movs	r3, #130	@ 0x82
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d113      	bne.n	80024da <SPI_WaitFifoStateUntilTimeout+0xce>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	2380      	movs	r3, #128	@ 0x80
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d005      	beq.n	80024ca <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d107      	bne.n	80024da <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2140      	movs	r1, #64	@ 0x40
 80024d6:	438a      	bics	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	019b      	lsls	r3, r3, #6
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d110      	bne.n	8002508 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4916      	ldr	r1, [pc, #88]	@ (800254c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2180      	movs	r1, #128	@ 0x80
 8002502:	0189      	lsls	r1, r1, #6
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	225d      	movs	r2, #93	@ 0x5d
 800250c:	2101      	movs	r1, #1
 800250e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	225c      	movs	r2, #92	@ 0x5c
 8002514:	2100      	movs	r1, #0
 8002516:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e010      	b.n	800253e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3b01      	subs	r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d18e      	bne.n	800245a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b00a      	add	sp, #40	@ 0x28
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	20000000 	.word	0x20000000
 800254c:	ffffdfff 	.word	0xffffdfff

08002550 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	2382      	movs	r3, #130	@ 0x82
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	429a      	cmp	r2, r3
 8002566:	d113      	bne.n	8002590 <SPI_EndRxTransaction+0x40>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	429a      	cmp	r2, r3
 8002572:	d005      	beq.n	8002580 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	429a      	cmp	r2, r3
 800257e:	d107      	bne.n	8002590 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2140      	movs	r1, #64	@ 0x40
 800258c:	438a      	bics	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	0013      	movs	r3, r2
 800259a:	2200      	movs	r2, #0
 800259c:	2180      	movs	r1, #128	@ 0x80
 800259e:	f7ff fea7 	bl	80022f0 <SPI_WaitFlagStateUntilTimeout>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d007      	beq.n	80025b6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025aa:	2220      	movs	r2, #32
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e026      	b.n	8002604 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	2382      	movs	r3, #130	@ 0x82
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	429a      	cmp	r2, r3
 80025c0:	d11f      	bne.n	8002602 <SPI_EndRxTransaction+0xb2>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d005      	beq.n	80025da <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d113      	bne.n	8002602 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	23c0      	movs	r3, #192	@ 0xc0
 80025de:	00d9      	lsls	r1, r3, #3
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	0013      	movs	r3, r2
 80025e8:	2200      	movs	r2, #0
 80025ea:	f7ff ff0f 	bl	800240c <SPI_WaitFifoStateUntilTimeout>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d007      	beq.n	8002602 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f6:	2220      	movs	r2, #32
 80025f8:	431a      	orrs	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e000      	b.n	8002604 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b004      	add	sp, #16
 800260a:	bd80      	pop	{r7, pc}

0800260c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	23c0      	movs	r3, #192	@ 0xc0
 800261c:	0159      	lsls	r1, r3, #5
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	0013      	movs	r3, r2
 8002626:	2200      	movs	r2, #0
 8002628:	f7ff fef0 	bl	800240c <SPI_WaitFifoStateUntilTimeout>
 800262c:	1e03      	subs	r3, r0, #0
 800262e:	d007      	beq.n	8002640 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002634:	2220      	movs	r2, #32
 8002636:	431a      	orrs	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e027      	b.n	8002690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	0013      	movs	r3, r2
 800264a:	2200      	movs	r2, #0
 800264c:	2180      	movs	r1, #128	@ 0x80
 800264e:	f7ff fe4f 	bl	80022f0 <SPI_WaitFlagStateUntilTimeout>
 8002652:	1e03      	subs	r3, r0, #0
 8002654:	d007      	beq.n	8002666 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265a:	2220      	movs	r2, #32
 800265c:	431a      	orrs	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e014      	b.n	8002690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	23c0      	movs	r3, #192	@ 0xc0
 800266a:	00d9      	lsls	r1, r3, #3
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	0013      	movs	r3, r2
 8002674:	2200      	movs	r2, #0
 8002676:	f7ff fec9 	bl	800240c <SPI_WaitFifoStateUntilTimeout>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d007      	beq.n	800268e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002682:	2220      	movs	r2, #32
 8002684:	431a      	orrs	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e000      	b.n	8002690 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bd80      	pop	{r7, pc}

08002698 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026a0:	f7fe f89c 	bl	80007dc <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2120      	movs	r1, #32
 80026b4:	438a      	bics	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2164      	movs	r1, #100	@ 0x64
 80026be:	0018      	movs	r0, r3
 80026c0:	f7ff ffa4 	bl	800260c <SPI_EndRxTxTransaction>
 80026c4:	1e03      	subs	r3, r0, #0
 80026c6:	d005      	beq.n	80026d4 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026cc:	2220      	movs	r2, #32
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d117      	bne.n	800270c <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	225d      	movs	r2, #93	@ 0x5d
 80026e0:	5c9b      	ldrb	r3, [r3, r2]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d108      	bne.n	80026fa <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	225d      	movs	r2, #93	@ 0x5d
 80026ec:	2101      	movs	r1, #1
 80026ee:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fd fde6 	bl	80002c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80026f8:	e010      	b.n	800271c <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	225d      	movs	r2, #93	@ 0x5d
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff fc25 	bl	8001f54 <HAL_SPI_TxRxCpltCallback>
}
 800270a:	e007      	b.n	800271c <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	225d      	movs	r2, #93	@ 0x5d
 8002710:	2101      	movs	r1, #1
 8002712:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	0018      	movs	r0, r3
 8002718:	f7ff fc24 	bl	8001f64 <HAL_SPI_ErrorCallback>
}
 800271c:	46c0      	nop			@ (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b004      	add	sp, #16
 8002722:	bd80      	pop	{r7, pc}

08002724 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2160      	movs	r1, #96	@ 0x60
 8002738:	438a      	bics	r2, r1
 800273a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800273c:	f7fe f84e 	bl	80007dc <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2164      	movs	r1, #100	@ 0x64
 8002746:	0018      	movs	r0, r3
 8002748:	f7ff ff02 	bl	8002550 <SPI_EndRxTransaction>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d005      	beq.n	800275c <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002754:	2220      	movs	r2, #32
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	225d      	movs	r2, #93	@ 0x5d
 8002760:	2101      	movs	r1, #1
 8002762:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f7fd fda8 	bl	80002c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002774:	e003      	b.n	800277e <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f7ff fbf3 	bl	8001f64 <HAL_SPI_ErrorCallback>
}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}

08002786 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800278e:	f7fe f825 	bl	80007dc <HAL_GetTick>
 8002792:	0003      	movs	r3, r0
 8002794:	60fb      	str	r3, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	21a0      	movs	r1, #160	@ 0xa0
 80027a2:	438a      	bics	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2164      	movs	r1, #100	@ 0x64
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff ff2d 	bl	800260c <SPI_EndRxTxTransaction>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d005      	beq.n	80027c2 <SPI_CloseTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ba:	2220      	movs	r2, #32
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <SPI_CloseTx_ISR+0x5a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	225d      	movs	r2, #93	@ 0x5d
 80027e4:	2101      	movs	r1, #1
 80027e6:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <SPI_CloseTx_ISR+0x74>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fbb6 	bl	8001f64 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80027f8:	e003      	b.n	8002802 <SPI_CloseTx_ISR+0x7c>
    HAL_SPI_TxCpltCallback(hspi);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fd fd75 	bl	80002ec <HAL_SPI_TxCpltCallback>
}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	b004      	add	sp, #16
 8002808:	bd80      	pop	{r7, pc}

0800280a <memset>:
 800280a:	0003      	movs	r3, r0
 800280c:	1882      	adds	r2, r0, r2
 800280e:	4293      	cmp	r3, r2
 8002810:	d100      	bne.n	8002814 <memset+0xa>
 8002812:	4770      	bx	lr
 8002814:	7019      	strb	r1, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	e7f9      	b.n	800280e <memset+0x4>
	...

0800281c <__libc_init_array>:
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	2600      	movs	r6, #0
 8002820:	4c0c      	ldr	r4, [pc, #48]	@ (8002854 <__libc_init_array+0x38>)
 8002822:	4d0d      	ldr	r5, [pc, #52]	@ (8002858 <__libc_init_array+0x3c>)
 8002824:	1b64      	subs	r4, r4, r5
 8002826:	10a4      	asrs	r4, r4, #2
 8002828:	42a6      	cmp	r6, r4
 800282a:	d109      	bne.n	8002840 <__libc_init_array+0x24>
 800282c:	2600      	movs	r6, #0
 800282e:	f000 f819 	bl	8002864 <_init>
 8002832:	4c0a      	ldr	r4, [pc, #40]	@ (800285c <__libc_init_array+0x40>)
 8002834:	4d0a      	ldr	r5, [pc, #40]	@ (8002860 <__libc_init_array+0x44>)
 8002836:	1b64      	subs	r4, r4, r5
 8002838:	10a4      	asrs	r4, r4, #2
 800283a:	42a6      	cmp	r6, r4
 800283c:	d105      	bne.n	800284a <__libc_init_array+0x2e>
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	00b3      	lsls	r3, r6, #2
 8002842:	58eb      	ldr	r3, [r5, r3]
 8002844:	4798      	blx	r3
 8002846:	3601      	adds	r6, #1
 8002848:	e7ee      	b.n	8002828 <__libc_init_array+0xc>
 800284a:	00b3      	lsls	r3, r6, #2
 800284c:	58eb      	ldr	r3, [r5, r3]
 800284e:	4798      	blx	r3
 8002850:	3601      	adds	r6, #1
 8002852:	e7f2      	b.n	800283a <__libc_init_array+0x1e>
 8002854:	080028d0 	.word	0x080028d0
 8002858:	080028d0 	.word	0x080028d0
 800285c:	080028d4 	.word	0x080028d4
 8002860:	080028d0 	.word	0x080028d0

08002864 <_init>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286a:	bc08      	pop	{r3}
 800286c:	469e      	mov	lr, r3
 800286e:	4770      	bx	lr

08002870 <_fini>:
 8002870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002876:	bc08      	pop	{r3}
 8002878:	469e      	mov	lr, r3
 800287a:	4770      	bx	lr
 800287c:	0000      	movs	r0, r0
	...

08002880 <__FLASH_Program_Fast_veneer>:
 8002880:	b401      	push	{r0}
 8002882:	4802      	ldr	r0, [pc, #8]	@ (800288c <__FLASH_Program_Fast_veneer+0xc>)
 8002884:	4684      	mov	ip, r0
 8002886:	bc01      	pop	{r0}
 8002888:	4760      	bx	ip
 800288a:	bf00      	nop
 800288c:	2000000d 	.word	0x2000000d

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00b71b00                                ....

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000000c:	b580      	push	{r7, lr}
2000000e:	b088      	sub	sp, #32
20000010:	af00      	add	r7, sp, #0
20000012:	6078      	str	r0, [r7, #4]
20000014:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000016:	231f      	movs	r3, #31
20000018:	18fb      	adds	r3, r7, r3
2000001a:	2200      	movs	r2, #0
2000001c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000022:	683b      	ldr	r3, [r7, #0]
20000024:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000026:	4b1a      	ldr	r3, [pc, #104]	@ (20000090 <FLASH_Program_Fast+0x84>)
20000028:	695a      	ldr	r2, [r3, #20]
2000002a:	4b19      	ldr	r3, [pc, #100]	@ (20000090 <FLASH_Program_Fast+0x84>)
2000002c:	2180      	movs	r1, #128	@ 0x80
2000002e:	02c9      	lsls	r1, r1, #11
20000030:	430a      	orrs	r2, r1
20000032:	615a      	str	r2, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20000034:	f3ef 8310 	mrs	r3, PRIMASK
20000038:	60fb      	str	r3, [r7, #12]
  return(result);
2000003a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000003c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000003e:	b672      	cpsid	i
}
20000040:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000042:	e00f      	b.n	20000064 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000044:	697a      	ldr	r2, [r7, #20]
20000046:	69bb      	ldr	r3, [r7, #24]
20000048:	6812      	ldr	r2, [r2, #0]
2000004a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000004c:	697b      	ldr	r3, [r7, #20]
2000004e:	3304      	adds	r3, #4
20000050:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000052:	69bb      	ldr	r3, [r7, #24]
20000054:	3304      	adds	r3, #4
20000056:	61bb      	str	r3, [r7, #24]
    index++;
20000058:	211f      	movs	r1, #31
2000005a:	187b      	adds	r3, r7, r1
2000005c:	781a      	ldrb	r2, [r3, #0]
2000005e:	187b      	adds	r3, r7, r1
20000060:	3201      	adds	r2, #1
20000062:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000064:	231f      	movs	r3, #31
20000066:	18fb      	adds	r3, r7, r3
20000068:	781b      	ldrb	r3, [r3, #0]
2000006a:	2b3f      	cmp	r3, #63	@ 0x3f
2000006c:	d9ea      	bls.n	20000044 <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000006e:	46c0      	nop			@ (mov r8, r8)
20000070:	4b07      	ldr	r3, [pc, #28]	@ (20000090 <FLASH_Program_Fast+0x84>)
20000072:	691a      	ldr	r2, [r3, #16]
20000074:	2380      	movs	r3, #128	@ 0x80
20000076:	025b      	lsls	r3, r3, #9
20000078:	4013      	ands	r3, r2
2000007a:	d1f9      	bne.n	20000070 <FLASH_Program_Fast+0x64>
2000007c:	693b      	ldr	r3, [r7, #16]
2000007e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000080:	68bb      	ldr	r3, [r7, #8]
20000082:	f383 8810 	msr	PRIMASK, r3
}
20000086:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000088:	46c0      	nop			@ (mov r8, r8)
2000008a:	46bd      	mov	sp, r7
2000008c:	b008      	add	sp, #32
2000008e:	bd80      	pop	{r7, pc}
20000090:	40022000 	.word	0x40022000
