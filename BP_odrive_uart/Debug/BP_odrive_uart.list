
BP_odrive_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bba8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800bd48  0800bd48  0001bd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1bc  0800c1bc  00020368  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1bc  0800c1bc  0001c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1c4  0800c1c4  00020368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1c4  0800c1c4  0001c1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1c8  0800c1c8  0001c1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0800c1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d0  20000368  0800c534  00020368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001838  0800c534  00021838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134fc  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a9  00000000  00000000  00033894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00036a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  000378f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194bd  00000000  00000000  00038658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135b2  00000000  00000000  00051b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a464  00000000  00000000  000650c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef52b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  000ef57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000368 	.word	0x20000368
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd30 	.word	0x0800bd30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000036c 	.word	0x2000036c
 80001dc:	0800bd30 	.word	0x0800bd30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec0:	f000 fb80 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f8c8 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f000 f95e 	bl	8001188 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ecc:	f000 f930 	bl	8001130 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000ed0:	f007 fb08 	bl	80084e4 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)==GPIO_PIN_RESET)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4851      	ldr	r0, [pc, #324]	; (800101c <main+0x160>)
 8000ed8:	f000 ff32 	bl	8001d40 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d115      	bne.n	8000f0e <main+0x52>
	  {
	  	HAL_UART_Transmit(&huart1, (uint8_t*)send_vel, strlen(send_vel), 1000);
 8000ee2:	484f      	ldr	r0, [pc, #316]	; (8001020 <main+0x164>)
 8000ee4:	f7ff f97c 	bl	80001e0 <strlen>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef0:	494b      	ldr	r1, [pc, #300]	; (8001020 <main+0x164>)
 8000ef2:	484c      	ldr	r0, [pc, #304]	; (8001024 <main+0x168>)
 8000ef4:	f002 fe77 	bl	8003be6 <HAL_UART_Transmit>
	  	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efe:	484a      	ldr	r0, [pc, #296]	; (8001028 <main+0x16c>)
 8000f00:	f000 ff36 	bl	8001d70 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 8000f04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f08:	f000 fbce 	bl	80016a8 <HAL_Delay>
 8000f0c:	e014      	b.n	8000f38 <main+0x7c>
	  }
	  else
	  {
	  	HAL_UART_Transmit(&huart1, (uint8_t*)send_stop	, strlen(send_stop)	, 1000);
 8000f0e:	4847      	ldr	r0, [pc, #284]	; (800102c <main+0x170>)
 8000f10:	f7ff f966 	bl	80001e0 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	4943      	ldr	r1, [pc, #268]	; (800102c <main+0x170>)
 8000f1e:	4841      	ldr	r0, [pc, #260]	; (8001024 <main+0x168>)
 8000f20:	f002 fe61 	bl	8003be6 <HAL_UART_Transmit>
 	  	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	483f      	ldr	r0, [pc, #252]	; (8001028 <main+0x16c>)
 8000f2c:	f000 ff20 	bl	8001d70 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f34:	f000 fbb8 	bl	80016a8 <HAL_Delay>
	  }

	  if(HAL_GPIO_ReadPin(VBUS_GPIO_Port, VBUS_Pin)==GPIO_PIN_RESET)
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4838      	ldr	r0, [pc, #224]	; (800101c <main+0x160>)
 8000f3c:	f000 ff00 	bl	8001d40 <HAL_GPIO_ReadPin>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10f      	bne.n	8000f66 <main+0xaa>
	  {
		HAL_UART_Transmit(&huart1, (uint8_t*)read_vbus, strlen(read_vbus), 100);
 8000f46:	483a      	ldr	r0, [pc, #232]	; (8001030 <main+0x174>)
 8000f48:	f7ff f94a 	bl	80001e0 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	4937      	ldr	r1, [pc, #220]	; (8001030 <main+0x174>)
 8000f54:	4833      	ldr	r0, [pc, #204]	; (8001024 <main+0x168>)
 8000f56:	f002 fe46 	bl	8003be6 <HAL_UART_Transmit>
		sprintf(counter_str, "VBUS : %s \r\n", rx_data);
 8000f5a:	4a36      	ldr	r2, [pc, #216]	; (8001034 <main+0x178>)
 8000f5c:	4936      	ldr	r1, [pc, #216]	; (8001038 <main+0x17c>)
 8000f5e:	4837      	ldr	r0, [pc, #220]	; (800103c <main+0x180>)
 8000f60:	f008 fc6c 	bl	800983c <siprintf>
 8000f64:	e00e      	b.n	8000f84 <main+0xc8>
	  }

	  else
	  {
	    HAL_UART_Transmit(&huart1, (uint8_t*) read_pos, strlen(read_pos), 100);
 8000f66:	4836      	ldr	r0, [pc, #216]	; (8001040 <main+0x184>)
 8000f68:	f7ff f93a 	bl	80001e0 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	4933      	ldr	r1, [pc, #204]	; (8001040 <main+0x184>)
 8000f74:	482b      	ldr	r0, [pc, #172]	; (8001024 <main+0x168>)
 8000f76:	f002 fe36 	bl	8003be6 <HAL_UART_Transmit>
	    sprintf(counter_str, "POS : %s \r\n", rx_data);
 8000f7a:	4a2e      	ldr	r2, [pc, #184]	; (8001034 <main+0x178>)
 8000f7c:	4931      	ldr	r1, [pc, #196]	; (8001044 <main+0x188>)
 8000f7e:	482f      	ldr	r0, [pc, #188]	; (800103c <main+0x180>)
 8000f80:	f008 fc5c 	bl	800983c <siprintf>
	  }

	  if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)==GPIO_PIN_RESET && HAL_GPIO_ReadPin(VBUS_GPIO_Port, VBUS_Pin)==GPIO_PIN_RESET)
 8000f84:	2101      	movs	r1, #1
 8000f86:	4825      	ldr	r0, [pc, #148]	; (800101c <main+0x160>)
 8000f88:	f000 feda 	bl	8001d40 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d116      	bne.n	8000fc0 <main+0x104>
 8000f92:	2102      	movs	r1, #2
 8000f94:	4821      	ldr	r0, [pc, #132]	; (800101c <main+0x160>)
 8000f96:	f000 fed3 	bl	8001d40 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10f      	bne.n	8000fc0 <main+0x104>
	  {
		HAL_UART_Transmit(&huart1, (uint8_t*) read_amp, strlen(read_amp), 100);
 8000fa0:	4829      	ldr	r0, [pc, #164]	; (8001048 <main+0x18c>)
 8000fa2:	f7ff f91d 	bl	80001e0 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	4926      	ldr	r1, [pc, #152]	; (8001048 <main+0x18c>)
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <main+0x168>)
 8000fb0:	f002 fe19 	bl	8003be6 <HAL_UART_Transmit>
		sprintf(counter_str, "Current : %s \r\n",rx_data);
 8000fb4:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <main+0x178>)
 8000fb6:	4925      	ldr	r1, [pc, #148]	; (800104c <main+0x190>)
 8000fb8:	4820      	ldr	r0, [pc, #128]	; (800103c <main+0x180>)
 8000fba:	f008 fc3f 	bl	800983c <siprintf>
 8000fbe:	e01c      	b.n	8000ffa <main+0x13e>
	  }
	  else if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)==GPIO_PIN_SET && HAL_GPIO_ReadPin(VBUS_GPIO_Port, VBUS_Pin)==GPIO_PIN_SET)
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4816      	ldr	r0, [pc, #88]	; (800101c <main+0x160>)
 8000fc4:	f000 febc 	bl	8001d40 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d115      	bne.n	8000ffa <main+0x13e>
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <main+0x160>)
 8000fd2:	f000 feb5 	bl	8001d40 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10e      	bne.n	8000ffa <main+0x13e>
	  {
		HAL_UART_Transmit(&huart1, (uint8_t*) read_power, strlen(read_power), 100);
 8000fdc:	481c      	ldr	r0, [pc, #112]	; (8001050 <main+0x194>)
 8000fde:	f7ff f8ff 	bl	80001e0 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	4919      	ldr	r1, [pc, #100]	; (8001050 <main+0x194>)
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <main+0x168>)
 8000fec:	f002 fdfb 	bl	8003be6 <HAL_UART_Transmit>
		sprintf(counter_str, "Power : %s \r\n",rx_data);
 8000ff0:	4a10      	ldr	r2, [pc, #64]	; (8001034 <main+0x178>)
 8000ff2:	4918      	ldr	r1, [pc, #96]	; (8001054 <main+0x198>)
 8000ff4:	4811      	ldr	r0, [pc, #68]	; (800103c <main+0x180>)
 8000ff6:	f008 fc21 	bl	800983c <siprintf>
	  }
	  HAL_UART_Receive(&huart1, rx_data, sizeof(rx_data),100); // Reinitialize reception
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	221e      	movs	r2, #30
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <main+0x178>)
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <main+0x168>)
 8001002:	f002 fe82 	bl	8003d0a <HAL_UART_Receive>
	  CDC_Transmit_FS((uint8_t*)counter_str, strlen(counter_str));
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <main+0x180>)
 8001008:	f7ff f8ea 	bl	80001e0 <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	b29b      	uxth	r3, r3
 8001010:	4619      	mov	r1, r3
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <main+0x180>)
 8001014:	f007 fb24 	bl	8008660 <CDC_Transmit_FS>
	  if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)==GPIO_PIN_RESET)
 8001018:	e75c      	b.n	8000ed4 <main+0x18>
 800101a:	bf00      	nop
 800101c:	40020000 	.word	0x40020000
 8001020:	20000000 	.word	0x20000000
 8001024:	20000384 	.word	0x20000384
 8001028:	40020800 	.word	0x40020800
 800102c:	2000000c 	.word	0x2000000c
 8001030:	20000018 	.word	0x20000018
 8001034:	200003c8 	.word	0x200003c8
 8001038:	0800bd48 	.word	0x0800bd48
 800103c:	200003e8 	.word	0x200003e8
 8001040:	20000028 	.word	0x20000028
 8001044:	0800bd58 	.word	0x0800bd58
 8001048:	20000048 	.word	0x20000048
 800104c:	0800bd64 	.word	0x0800bd64
 8001050:	20000074 	.word	0x20000074
 8001054:	0800bd74 	.word	0x0800bd74

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f007 ff76 	bl	8008f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <SystemClock_Config+0xd0>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a28      	ldr	r2, [pc, #160]	; (8001128 <SystemClock_Config+0xd0>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <SystemClock_Config+0xd0>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <SystemClock_Config+0xd4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <SystemClock_Config+0xd4>)
 80010a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <SystemClock_Config+0xd4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010cc:	2319      	movs	r3, #25
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010d6:	2304      	movs	r3, #4
 80010d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010da:	2307      	movs	r3, #7
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 f8da 	bl	800329c <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010ee:	f000 f8ab 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2302      	movs	r3, #2
 80010f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fb3c 	bl	800378c <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800111a:	f000 f895 	bl	8001248 <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	; 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_USART1_UART_Init+0x50>)
 8001136:	4a13      	ldr	r2, [pc, #76]	; (8001184 <MX_USART1_UART_Init+0x54>)
 8001138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART1_UART_Init+0x50>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_USART1_UART_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <MX_USART1_UART_Init+0x50>)
 800114a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART1_UART_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_USART1_UART_Init+0x50>)
 8001158:	220c      	movs	r2, #12
 800115a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART1_UART_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_USART1_UART_Init+0x50>)
 8001164:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART1_UART_Init+0x50>)
 800116c:	f002 fcee 	bl	8003b4c <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001176:	f000 f867 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000384 	.word	0x20000384
 8001184:	40011000 	.word	0x40011000

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_GPIO_Init+0xb4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a25      	ldr	r2, [pc, #148]	; (800123c <MX_GPIO_Init+0xb4>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <MX_GPIO_Init+0xb4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_GPIO_Init+0xb4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <MX_GPIO_Init+0xb4>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_GPIO_Init+0xb4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_GPIO_Init+0xb4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <MX_GPIO_Init+0xb4>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_GPIO_Init+0xb4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f8:	4811      	ldr	r0, [pc, #68]	; (8001240 <MX_GPIO_Init+0xb8>)
 80011fa:	f000 fdb9 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001208:	2302      	movs	r3, #2
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	480a      	ldr	r0, [pc, #40]	; (8001240 <MX_GPIO_Init+0xb8>)
 8001218:	f000 fc0e 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_Pin VBUS_Pin */
  GPIO_InitStruct.Pin = KEY_Pin|VBUS_Pin;
 800121c:	2303      	movs	r3, #3
 800121e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001224:	2301      	movs	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_GPIO_Init+0xbc>)
 8001230:	f000 fc02 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40020800 	.word	0x40020800
 8001244:	40020000 	.word	0x40020000

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_UART_MspInit+0x94>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d134      	bne.n	8001330 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_UART_MspInit+0x98>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_UART_MspInit+0x98>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_UART_MspInit+0x98>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0x98>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_UART_MspInit+0x98>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_UART_MspInit+0x98>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001310:	2307      	movs	r3, #7
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <HAL_UART_MspInit+0x9c>)
 800131c:	f000 fb8c 	bl	8001a38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2025      	movs	r0, #37	; 0x25
 8001326:	f000 fabe 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800132a:	2025      	movs	r0, #37	; 0x25
 800132c:	f000 fad7 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40011000 	.word	0x40011000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 f96a 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <USART1_IRQHandler+0x10>)
 800139e:	f002 fd57 	bl	8003e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000384 	.word	0x20000384

080013ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <OTG_FS_IRQHandler+0x10>)
 80013b2:	f000 fe46 	bl	8002042 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200010fc 	.word	0x200010fc

080013c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return 1;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_kill>:

int _kill(int pid, int sig)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013da:	f007 fd93 	bl	8008f04 <__errno>
 80013de:	4603      	mov	r3, r0
 80013e0:	2216      	movs	r2, #22
 80013e2:	601a      	str	r2, [r3, #0]
  return -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_exit>:

void _exit (int status)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ffe7 	bl	80013d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001402:	e7fe      	b.n	8001402 <_exit+0x12>

08001404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4601      	mov	r1, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <_read+0x12>
  }

  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e009      	b.n	8001464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf1      	blt.n	8001450 <_write+0x12>
  }
  return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_close>:

int _close(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	605a      	str	r2, [r3, #4]
  return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_isatty>:

int _isatty(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f007 fcf8 	bl	8008f04 <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20010000 	.word	0x20010000
 8001540:	00000400 	.word	0x00000400
 8001544:	20000414 	.word	0x20000414
 8001548:	20001838 	.word	0x20001838

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159a:	f7ff ffd7 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f007 fcb7 	bl	8008f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff fc8b 	bl	8000ebc <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 80015b4:	0800c1cc 	.word	0x0800c1cc
  ldr r2, =_sbss
 80015b8:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 80015bc:	20001838 	.word	0x20001838

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f94f 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	200f      	movs	r0, #15
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fe2c 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f967 	bl	80018fa <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f92f 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000009c 	.word	0x2000009c
 8001660:	200000a4 	.word	0x200000a4
 8001664:	200000a0 	.word	0x200000a0

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200000a4 	.word	0x200000a4
 800168c:	20000418 	.word	0x20000418

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000418 	.word	0x20000418

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200000a4 	.word	0x200000a4

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff3e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff31 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff feb6 	bl	8001690 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d008      	beq.n	8001944 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e052      	b.n	80019ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0216 	bic.w	r2, r2, #22
 8001952:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001962:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <HAL_DMA_Abort+0x62>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0208 	bic.w	r2, r2, #8
 8001982:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001994:	e013      	b.n	80019be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001996:	f7ff fe7b 	bl	8001690 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d90c      	bls.n	80019be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e015      	b.n	80019ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e4      	bne.n	8001996 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	223f      	movs	r2, #63	; 0x3f
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d004      	beq.n	8001a10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e00c      	b.n	8001a2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2205      	movs	r2, #5
 8001a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e159      	b.n	8001d08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8148 	bne.w	8001d02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d005      	beq.n	8001a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d130      	bne.n	8001aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0201 	and.w	r2, r3, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d017      	beq.n	8001b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80a2 	beq.w	8001d02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bda:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a49      	ldr	r2, [pc, #292]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x202>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a48      	ldr	r2, [pc, #288]	; (8001d2c <HAL_GPIO_Init+0x2f4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x1fe>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a47      	ldr	r2, [pc, #284]	; (8001d30 <HAL_GPIO_Init+0x2f8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a46      	ldr	r2, [pc, #280]	; (8001d34 <HAL_GPIO_Init+0x2fc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x1f6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a45      	ldr	r2, [pc, #276]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x1f2>
 8001c26:	2304      	movs	r3, #4
 8001c28:	e008      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f002 0203 	and.w	r2, r2, #3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4c:	4935      	ldr	r1, [pc, #212]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca8:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	f67f aea2 	bls.w	8001a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e001      	b.n	8001d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da4:	b08f      	sub	sp, #60	; 0x3c
 8001da6:	af0a      	add	r7, sp, #40	; 0x28
 8001da8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e10f      	b.n	8001fd4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f006 fd8e 	bl	80088f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 f875 	bl	8004ee2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	687e      	ldr	r6, [r7, #4]
 8001e00:	466d      	mov	r5, sp
 8001e02:	f106 0410 	add.w	r4, r6, #16
 8001e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e16:	1d33      	adds	r3, r6, #4
 8001e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f002 ff4c 	bl	8004cb8 <USB_CoreInit>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0d0      	b.n	8001fd4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 f863 	bl	8004f04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e04a      	b.n	8001eda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	333d      	adds	r3, #61	; 0x3d
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	333c      	adds	r3, #60	; 0x3c
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	b298      	uxth	r0, r3
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3344      	adds	r3, #68	; 0x44
 8001e80:	4602      	mov	r2, r0
 8001e82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	3340      	adds	r3, #64	; 0x40
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3348      	adds	r3, #72	; 0x48
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	334c      	adds	r3, #76	; 0x4c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3354      	adds	r3, #84	; 0x54
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3af      	bcc.n	8001e44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e044      	b.n	8001f74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3b5      	bcc.n	8001eea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	687e      	ldr	r6, [r7, #4]
 8001f86:	466d      	mov	r5, sp
 8001f88:	f106 0410 	add.w	r4, r6, #16
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f98:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f9c:	1d33      	adds	r3, r6, #4
 8001f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa0:	6838      	ldr	r0, [r7, #0]
 8001fa2:	f002 fffb 	bl	8004f9c <USB_DevInit>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e00d      	b.n	8001fd4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f004 f94a 	bl	8006266 <USB_DevDisconnect>

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fdc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_PCD_Start+0x1c>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e020      	b.n	800203a <HAL_PCD_Start+0x5e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	2b01      	cmp	r3, #1
 8002006:	d109      	bne.n	800201c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800200c:	2b01      	cmp	r3, #1
 800200e:	d005      	beq.n	800201c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f002 ff4d 	bl	8004ec0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f004 f8fa 	bl	8006224 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002042:	b590      	push	{r4, r7, lr}
 8002044:	b08d      	sub	sp, #52	; 0x34
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f004 f9b8 	bl	80063ce <USB_GetMode>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	f040 848a 	bne.w	800297a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f004 f91c 	bl	80062a8 <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8480 	beq.w	8002978 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f004 f909 	bl	80062a8 <USB_ReadInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d107      	bne.n	80020b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f002 0202 	and.w	r2, r2, #2
 80020ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 f8f7 	bl	80062a8 <USB_ReadInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d161      	bne.n	8002188 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0210 	bic.w	r2, r2, #16
 80020d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 020f 	and.w	r2, r3, #15
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	0c5b      	lsrs	r3, r3, #17
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d124      	bne.n	800214a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d035      	beq.n	8002178 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	6a38      	ldr	r0, [r7, #32]
 8002120:	f003 ff2e 	bl	8005f80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002130:	441a      	add	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002142:	441a      	add	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	621a      	str	r2, [r3, #32]
 8002148:	e016      	b.n	8002178 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	0c5b      	lsrs	r3, r3, #17
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	2b06      	cmp	r3, #6
 8002154:	d110      	bne.n	8002178 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800215c:	2208      	movs	r2, #8
 800215e:	4619      	mov	r1, r3
 8002160:	6a38      	ldr	r0, [r7, #32]
 8002162:	f003 ff0d 	bl	8005f80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002172:	441a      	add	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0210 	orr.w	r2, r2, #16
 8002186:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f004 f88b 	bl	80062a8 <USB_ReadInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002198:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800219c:	f040 80a7 	bne.w	80022ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 f890 	bl	80062ce <USB_ReadDevAllOutEpInterrupt>
 80021ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021b0:	e099      	b.n	80022e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 808e 	beq.w	80022da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 f8b4 	bl	8006336 <USB_ReadDevOutEPInterrupt>
 80021ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	2301      	movs	r3, #1
 80021ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fec2 	bl	8002f78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	461a      	mov	r2, r3
 800220c:	2308      	movs	r3, #8
 800220e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 ff98 	bl	8003148 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222e:	461a      	mov	r2, r3
 8002230:	2310      	movs	r3, #16
 8002232:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d030      	beq.n	80022a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	2b80      	cmp	r3, #128	; 0x80
 8002248:	d109      	bne.n	800225e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	78db      	ldrb	r3, [r3, #3]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d108      	bne.n	800228e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2200      	movs	r2, #0
 8002280:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	b2db      	uxtb	r3, r3
 8002286:	4619      	mov	r1, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f006 fc2d 	bl	8008ae8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229a:	461a      	mov	r2, r3
 800229c:	2302      	movs	r3, #2
 800229e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b6:	461a      	mov	r2, r3
 80022b8:	2320      	movs	r3, #32
 80022ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d2:	461a      	mov	r2, r3
 80022d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3301      	adds	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f47f af62 	bne.w	80021b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 ffd8 	bl	80062a8 <USB_ReadInterrupts>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002302:	f040 80db 	bne.w	80024bc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fff9 	bl	8006302 <USB_ReadDevAllInEpInterrupt>
 8002310:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002316:	e0cd      	b.n	80024b4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80c2 	beq.w	80024a8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f004 f81f 	bl	8006372 <USB_ReadDevInEPInterrupt>
 8002334:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d057      	beq.n	80023f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	2201      	movs	r2, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43db      	mvns	r3, r3
 800235a:	69f9      	ldr	r1, [r7, #28]
 800235c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002360:	4013      	ands	r3, r2
 8002362:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002370:	461a      	mov	r2, r3
 8002372:	2301      	movs	r3, #1
 8002374:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d132      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	334c      	adds	r3, #76	; 0x4c
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4403      	add	r3, r0
 800239e:	3348      	adds	r3, #72	; 0x48
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4419      	add	r1, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4403      	add	r3, r0
 80023b2:	334c      	adds	r3, #76	; 0x4c
 80023b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d113      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x3a2>
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3354      	adds	r3, #84	; 0x54
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d108      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023dc:	461a      	mov	r2, r3
 80023de:	2101      	movs	r1, #1
 80023e0:	f004 f826 	bl	8006430 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f006 fb01 	bl	80089f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002406:	461a      	mov	r2, r3
 8002408:	2308      	movs	r3, #8
 800240a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002422:	461a      	mov	r2, r3
 8002424:	2310      	movs	r3, #16
 8002426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800243e:	461a      	mov	r2, r3
 8002440:	2340      	movs	r3, #64	; 0x40
 8002442:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d023      	beq.n	8002496 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800244e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002450:	6a38      	ldr	r0, [r7, #32]
 8002452:	f002 ff07 	bl	8005264 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	3338      	adds	r3, #56	; 0x38
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	3304      	adds	r3, #4
 8002468:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	78db      	ldrb	r3, [r3, #3]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d108      	bne.n	8002484 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4619      	mov	r1, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f006 fb44 	bl	8008b0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002490:	461a      	mov	r2, r3
 8002492:	2302      	movs	r3, #2
 8002494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fcdb 	bl	8002e5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	3301      	adds	r3, #1
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f47f af2e 	bne.w	8002318 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 fef1 	bl	80062a8 <USB_ReadInterrupts>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024d0:	d122      	bne.n	8002518 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d108      	bne.n	8002502 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024f8:	2100      	movs	r1, #0
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fec2 	bl	8003284 <HAL_PCDEx_LPM_Callback>
 8002500:	e002      	b.n	8002508 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f006 fae2 	bl	8008acc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f003 fec3 	bl	80062a8 <USB_ReadInterrupts>
 8002522:	4603      	mov	r3, r0
 8002524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800252c:	d112      	bne.n	8002554 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f006 fa9e 	bl	8008a80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002552:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fea5 	bl	80062a8 <USB_ReadInterrupts>
 800255e:	4603      	mov	r3, r0
 8002560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002568:	f040 80b7 	bne.w	80026da <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2110      	movs	r1, #16
 8002586:	4618      	mov	r0, r3
 8002588:	f002 fe6c 	bl	8005264 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258c:	2300      	movs	r3, #0
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002590:	e046      	b.n	8002620 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259e:	461a      	mov	r2, r3
 80025a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	0151      	lsls	r1, r2, #5
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	440a      	add	r2, r1
 80025bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d2:	461a      	mov	r2, r3
 80025d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ea:	0151      	lsls	r1, r2, #5
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	440a      	add	r2, r1
 80025f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260a:	0151      	lsls	r1, r2, #5
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	440a      	add	r2, r1
 8002610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002614:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002618:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	3301      	adds	r3, #1
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002626:	429a      	cmp	r2, r3
 8002628:	d3b3      	bcc.n	8002592 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002638:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800263c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002656:	f043 030b 	orr.w	r3, r3, #11
 800265a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800266c:	f043 030b 	orr.w	r3, r3, #11
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	e015      	b.n	80026a0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002686:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800268a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800269a:	f043 030b 	orr.w	r3, r3, #11
 800269e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026c4:	461a      	mov	r2, r3
 80026c6:	f003 feb3 	bl	8006430 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fde2 	bl	80062a8 <USB_ReadInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ee:	d124      	bne.n	800273a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fe78 	bl	80063ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fe2d 	bl	800535e <USB_GetDevSpeed>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681c      	ldr	r4, [r3, #0]
 8002710:	f001 f9e8 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8002714:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	4620      	mov	r0, r4
 8002720:	f002 fb2c 	bl	8004d7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f006 f98c 	bl	8008a42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002738:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fdb2 	bl	80062a8 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b08      	cmp	r3, #8
 800274c:	d10a      	bne.n	8002764 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f006 f969 	bl	8008a26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f002 0208 	and.w	r2, r2, #8
 8002762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fd9d 	bl	80062a8 <USB_ReadInterrupts>
 800276e:	4603      	mov	r3, r0
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d122      	bne.n	80027be <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002784:	2301      	movs	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	e014      	b.n	80027b4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fb27 	bl	8002dfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	3301      	adds	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3e5      	bcc.n	800278a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fd70 	bl	80062a8 <USB_ReadInterrupts>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d2:	d13b      	bne.n	800284c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027d4:	2301      	movs	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	e02b      	b.n	8002832 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3340      	adds	r3, #64	; 0x40
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d115      	bne.n	800282c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002800:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002802:	2b00      	cmp	r3, #0
 8002804:	da12      	bge.n	800282c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	333f      	adds	r3, #63	; 0x3f
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002822:	b2db      	uxtb	r3, r3
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fae8 	bl	8002dfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	3301      	adds	r3, #1
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	429a      	cmp	r2, r3
 800283a:	d3ce      	bcc.n	80027da <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800284a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f003 fd29 	bl	80062a8 <USB_ReadInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002860:	d155      	bne.n	800290e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002862:	2301      	movs	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
 8002866:	e045      	b.n	80028f4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d12e      	bne.n	80028ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002890:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	da2b      	bge.n	80028ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d121      	bne.n	80028ee <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ea:	6053      	str	r3, [r2, #4]
            break;
 80028ec:	e007      	b.n	80028fe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	3301      	adds	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d3b4      	bcc.n	8002868 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800290c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f003 fcc8 	bl	80062a8 <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d10a      	bne.n	800293a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f006 f903 	bl	8008b30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f003 fcb2 	bl	80062a8 <USB_ReadInterrupts>
 8002944:	4603      	mov	r3, r0
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d115      	bne.n	800297a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f006 f8f3 	bl	8008b4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	e000      	b.n	800297a <HAL_PCD_IRQHandler+0x938>
      return;
 8002978:	bf00      	nop
    }
  }
}
 800297a:	3734      	adds	r7, #52	; 0x34
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}

08002980 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_PCD_SetAddress+0x1a>
 8002996:	2302      	movs	r3, #2
 8002998:	e013      	b.n	80029c2 <HAL_PCD_SetAddress+0x42>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fc10 	bl	80061d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	4608      	mov	r0, r1
 80029d4:	4611      	mov	r1, r2
 80029d6:	461a      	mov	r2, r3
 80029d8:	4603      	mov	r3, r0
 80029da:	70fb      	strb	r3, [r7, #3]
 80029dc:	460b      	mov	r3, r1
 80029de:	803b      	strh	r3, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da0f      	bge.n	8002a10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	f003 020f 	and.w	r2, r3, #15
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	3338      	adds	r3, #56	; 0x38
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	3304      	adds	r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	705a      	strb	r2, [r3, #1]
 8002a0e:	e00f      	b.n	8002a30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 020f 	and.w	r2, r3, #15
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	3304      	adds	r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a3c:	883a      	ldrh	r2, [r7, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	78ba      	ldrb	r2, [r7, #2]
 8002a46:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a5a:	78bb      	ldrb	r3, [r7, #2]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d102      	bne.n	8002a66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_PCD_EP_Open+0xaa>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e00e      	b.n	8002a92 <HAL_PCD_EP_Open+0xc8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fc90 	bl	80053a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002a90:	7afb      	ldrb	r3, [r7, #11]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da0f      	bge.n	8002ace <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 020f 	and.w	r2, r3, #15
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	3338      	adds	r3, #56	; 0x38
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	705a      	strb	r2, [r3, #1]
 8002acc:	e00f      	b.n	8002aee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	f003 020f 	and.w	r2, r3, #15
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_PCD_EP_Close+0x6e>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e00e      	b.n	8002b26 <HAL_PCD_EP_Close+0x8c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68f9      	ldr	r1, [r7, #12]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 fcce 	bl	80054b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2200      	movs	r2, #0
 8002b68:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6979      	ldr	r1, [r7, #20]
 8002ba2:	f002 ffad 	bl	8005b00 <USB_EP0StartXfer>
 8002ba6:	e008      	b.n	8002bba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6979      	ldr	r1, [r7, #20]
 8002bb6:	f002 fd5b 	bl	8005670 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 020f 	and.w	r2, r3, #15
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	460b      	mov	r3, r1
 8002c02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c04:	7afb      	ldrb	r3, [r7, #11]
 8002c06:	f003 020f 	and.w	r2, r3, #15
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	3338      	adds	r3, #56	; 0x38
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2201      	movs	r2, #1
 8002c32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c34:	7afb      	ldrb	r3, [r7, #11]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d102      	bne.n	8002c4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	f002 ff4b 	bl	8005b00 <USB_EP0StartXfer>
 8002c6a:	e008      	b.n	8002c7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	6979      	ldr	r1, [r7, #20]
 8002c7a:	f002 fcf9 	bl	8005670 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d901      	bls.n	8002ca6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e050      	b.n	8002d48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da0f      	bge.n	8002cce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3338      	adds	r3, #56	; 0x38
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	705a      	strb	r2, [r3, #1]
 8002ccc:	e00d      	b.n	8002cea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_PCD_EP_SetStall+0x82>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e01e      	b.n	8002d48 <HAL_PCD_EP_SetStall+0xc0>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68f9      	ldr	r1, [r7, #12]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 f989 	bl	8006030 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	b2d9      	uxtb	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f003 fb79 	bl	8006430 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 020f 	and.w	r2, r3, #15
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d901      	bls.n	8002d6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e042      	b.n	8002df4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da0f      	bge.n	8002d96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3338      	adds	r3, #56	; 0x38
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	705a      	strb	r2, [r3, #1]
 8002d94:	e00f      	b.n	8002db6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_EP_ClrStall+0x86>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e00e      	b.n	8002df4 <HAL_PCD_EP_ClrStall+0xa4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f003 f991 	bl	800610c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da0c      	bge.n	8002e2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	3338      	adds	r3, #56	; 0x38
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	3304      	adds	r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e00c      	b.n	8002e44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 ffb0 	bl	8005db0 <USB_EPStopXfer>
 8002e50:	4603      	mov	r3, r0
 8002e52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e54:	7afb      	ldrb	r3, [r7, #11]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b08a      	sub	sp, #40	; 0x28
 8002e62:	af02      	add	r7, sp, #8
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	3338      	adds	r3, #56	; 0x38
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	3304      	adds	r3, #4
 8002e84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d901      	bls.n	8002e96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06c      	b.n	8002f70 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d902      	bls.n	8002eb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3303      	adds	r3, #3
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eba:	e02b      	b.n	8002f14 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d902      	bls.n	8002ed8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3303      	adds	r3, #3
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6919      	ldr	r1, [r3, #16]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	6978      	ldr	r0, [r7, #20]
 8002ef8:	f003 f804 	bl	8005f04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	441a      	add	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	441a      	add	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d809      	bhi.n	8002f3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1a      	ldr	r2, [r3, #32]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d203      	bcs.n	8002f3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1be      	bne.n	8002ebc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d811      	bhi.n	8002f6e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	2201      	movs	r2, #1
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	6939      	ldr	r1, [r7, #16]
 8002f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	333c      	adds	r3, #60	; 0x3c
 8002f90:	3304      	adds	r3, #4
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d17b      	bne.n	80030a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	4a61      	ldr	r2, [pc, #388]	; (8003140 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f240 80b9 	bls.w	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80b3 	beq.w	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe0:	6093      	str	r3, [r2, #8]
 8002fe2:	e0a7      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	e098      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 8093 	bne.w	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4a4b      	ldr	r2, [pc, #300]	; (8003140 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d90f      	bls.n	8003036 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302c:	461a      	mov	r2, r3
 800302e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003032:	6093      	str	r3, [r2, #8]
 8003034:	e07e      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	3304      	adds	r3, #4
 800304a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	0159      	lsls	r1, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	440b      	add	r3, r1
 8003058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003062:	1ad2      	subs	r2, r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d114      	bne.n	8003098 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003080:	461a      	mov	r2, r3
 8003082:	2101      	movs	r1, #1
 8003084:	f003 f9d4 	bl	8006430 <USB_EP0_OutStart>
 8003088:	e006      	b.n	8003098 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	441a      	add	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f005 fc8c 	bl	80089bc <HAL_PCD_DataOutStageCallback>
 80030a4:	e046      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4a26      	ldr	r2, [pc, #152]	; (8003144 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d124      	bne.n	80030f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c4:	461a      	mov	r2, r3
 80030c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ca:	6093      	str	r3, [r2, #8]
 80030cc:	e032      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	461a      	mov	r2, r3
 80030e6:	2320      	movs	r3, #32
 80030e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f005 fc63 	bl	80089bc <HAL_PCD_DataOutStageCallback>
 80030f6:	e01d      	b.n	8003134 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d114      	bne.n	8003128 <PCD_EP_OutXfrComplete_int+0x1b0>
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003120:	461a      	mov	r2, r3
 8003122:	2100      	movs	r1, #0
 8003124:	f003 f984 	bl	8006430 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f005 fc44 	bl	80089bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	4f54300a 	.word	0x4f54300a
 8003144:	4f54310a 	.word	0x4f54310a

08003148 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	333c      	adds	r3, #60	; 0x3c
 8003160:	3304      	adds	r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d90e      	bls.n	800319c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f005 fbfb 	bl	8008998 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d90c      	bls.n	80031c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031bc:	461a      	mov	r2, r3
 80031be:	2101      	movs	r1, #1
 80031c0:	f003 f936 	bl	8006430 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	4f54300a 	.word	0x4f54300a

080031d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
 80031e0:	4613      	mov	r3, r2
 80031e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d107      	bne.n	8003202 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031f2:	883b      	ldrh	r3, [r7, #0]
 80031f4:	0419      	lsls	r1, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003200:	e028      	b.n	8003254 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4413      	add	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003210:	2300      	movs	r3, #0
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	e00d      	b.n	8003232 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	3340      	adds	r3, #64	; 0x40
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4413      	add	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	3301      	adds	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	3b01      	subs	r3, #1
 8003238:	429a      	cmp	r2, r3
 800323a:	d3ec      	bcc.n	8003216 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800323c:	883b      	ldrh	r3, [r7, #0]
 800323e:	0418      	lsls	r0, r3, #16
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	3b01      	subs	r3, #1
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	4302      	orrs	r2, r0
 800324c:	3340      	adds	r3, #64	; 0x40
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e267      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ba:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b85      	ldr	r3, [pc, #532]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d112      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032de:	d10b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4b7e      	ldr	r3, [pc, #504]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d157      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e242      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a75      	ldr	r2, [pc, #468]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b70      	ldr	r3, [pc, #448]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6f      	ldr	r2, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6c      	ldr	r2, [pc, #432]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003334:	4b69      	ldr	r3, [pc, #420]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a68      	ldr	r2, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe f99c 	bl	8001690 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe f998 	bl	8001690 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e207      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xc0>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe f988 	bl	8001690 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe f984 	bl	8001690 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1f3      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b44      	ldr	r3, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b41      	ldr	r3, [pc, #260]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1c7      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4937      	ldr	r1, [pc, #220]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_RCC_OscConfig+0x244>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe f93d 	bl	8001690 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe f939 	bl	8001690 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1a8      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4925      	ldr	r1, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_OscConfig+0x244>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe f91c 	bl	8001690 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345c:	f7fe f918 	bl	8001690 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e187      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d036      	beq.n	80034f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_RCC_OscConfig+0x248>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe f8fc 	bl	8001690 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe f8f8 	bl	8001690 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e167      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x200>
 80034ba:	e01b      	b.n	80034f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_OscConfig+0x248>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fe f8e5 	bl	8001690 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e00e      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fe f8e1 	bl	8001690 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d907      	bls.n	80034e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e150      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	42470000 	.word	0x42470000
 80034e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b88      	ldr	r3, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ea      	bne.n	80034ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8097 	beq.w	8003630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b81      	ldr	r3, [pc, #516]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b7d      	ldr	r3, [pc, #500]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a7c      	ldr	r2, [pc, #496]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b7a      	ldr	r3, [pc, #488]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b77      	ldr	r3, [pc, #476]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353e:	4b74      	ldr	r3, [pc, #464]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a73      	ldr	r2, [pc, #460]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fe f8a1 	bl	8001690 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe f89d 	bl	8001690 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e10c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x2ea>
 8003578:	4b64      	ldr	r3, [pc, #400]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4a63      	ldr	r2, [pc, #396]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x30c>
 800358e:	4b5f      	ldr	r3, [pc, #380]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	4a5e      	ldr	r2, [pc, #376]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6713      	str	r3, [r2, #112]	; 0x70
 800359a:	4b5c      	ldr	r3, [pc, #368]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a5b      	ldr	r2, [pc, #364]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 80035a8:	4b58      	ldr	r3, [pc, #352]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a57      	ldr	r2, [pc, #348]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a54      	ldr	r2, [pc, #336]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe f862 	bl	8001690 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fe f85e 	bl	8001690 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0cb      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RCC_OscConfig+0x334>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fe f84c 	bl	8001690 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe f848 	bl	8001690 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0b5      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	4a38      	ldr	r2, [pc, #224]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a1 	beq.w	800377c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b08      	cmp	r3, #8
 8003644:	d05c      	beq.n	8003700 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d141      	bne.n	80036d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe f81c 	bl	8001690 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe f818 	bl	8001690 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e087      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	491b      	ldr	r1, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fd fff1 	bl	8001690 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fd ffed 	bl	8001690 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e05c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x416>
 80036d0:	e054      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fd ffda 	bl	8001690 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fd ffd6 	bl	8001690 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e045      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x444>
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e038      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
 8003714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x4ec>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d028      	beq.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d121      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11a      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003750:	4293      	cmp	r3, r2
 8003752:	d111      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	3b01      	subs	r3, #1
 8003762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800

0800378c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0cc      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b68      	ldr	r3, [pc, #416]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d90c      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b63      	ldr	r3, [pc, #396]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0b8      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e0:	4b59      	ldr	r3, [pc, #356]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f8:	4b53      	ldr	r3, [pc, #332]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a52      	ldr	r2, [pc, #328]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b50      	ldr	r3, [pc, #320]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	494d      	ldr	r1, [pc, #308]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d044      	beq.n	80038ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d119      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d003      	beq.n	800384a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	2b03      	cmp	r3, #3
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e067      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4934      	ldr	r1, [pc, #208]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800387c:	f7fd ff08 	bl	8001690 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fd ff04 	bl	8001690 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e04f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ac:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d20c      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e032      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4916      	ldr	r1, [pc, #88]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	490e      	ldr	r1, [pc, #56]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003912:	f000 f821 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003916:	4602      	mov	r2, r0
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	490a      	ldr	r1, [pc, #40]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	4a09      	ldr	r2, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd fe68 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023c00 	.word	0x40023c00
 8003948:	40023800 	.word	0x40023800
 800394c:	0800bdcc 	.word	0x0800bdcc
 8003950:	2000009c 	.word	0x2000009c
 8003954:	200000a0 	.word	0x200000a0

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b090      	sub	sp, #64	; 0x40
 800395e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
 8003964:	2300      	movs	r3, #0
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003968:	2300      	movs	r3, #0
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d00d      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x40>
 800397c:	2b08      	cmp	r3, #8
 800397e:	f200 80a1 	bhi.w	8003ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x34>
 8003986:	2b04      	cmp	r3, #4
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x3a>
 800398a:	e09b      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b53      	ldr	r3, [pc, #332]	; (8003adc <HAL_RCC_GetSysClockFreq+0x184>)
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003990:	e09b      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003992:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003996:	e098      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4b4f      	ldr	r3, [pc, #316]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a2:	4b4d      	ldr	r3, [pc, #308]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d028      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b4a      	ldr	r3, [pc, #296]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	2200      	movs	r2, #0
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	627a      	str	r2, [r7, #36]	; 0x24
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039c0:	2100      	movs	r1, #0
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c4:	fb03 f201 	mul.w	r2, r3, r1
 80039c8:	2300      	movs	r3, #0
 80039ca:	fb00 f303 	mul.w	r3, r0, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	4a43      	ldr	r2, [pc, #268]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d2:	fba0 1202 	umull	r1, r2, r0, r2
 80039d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d8:	460a      	mov	r2, r1
 80039da:	62ba      	str	r2, [r7, #40]	; 0x28
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	4413      	add	r3, r2
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	2200      	movs	r2, #0
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	61fa      	str	r2, [r7, #28]
 80039ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039f2:	f7fd f8e1 	bl	8000bb8 <__aeabi_uldivmod>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4613      	mov	r3, r2
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fe:	e053      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	2200      	movs	r2, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	617a      	str	r2, [r7, #20]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a12:	f04f 0b00 	mov.w	fp, #0
 8003a16:	4652      	mov	r2, sl
 8003a18:	465b      	mov	r3, fp
 8003a1a:	f04f 0000 	mov.w	r0, #0
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	0159      	lsls	r1, r3, #5
 8003a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a28:	0150      	lsls	r0, r2, #5
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a32:	eb63 090b 	sbc.w	r9, r3, fp
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	00eb      	lsls	r3, r5, #3
 8003a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a60:	00e2      	lsls	r2, r4, #3
 8003a62:	4614      	mov	r4, r2
 8003a64:	461d      	mov	r5, r3
 8003a66:	eb14 030a 	adds.w	r3, r4, sl
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	eb45 030b 	adc.w	r3, r5, fp
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	028b      	lsls	r3, r1, #10
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a88:	4621      	mov	r1, r4
 8003a8a:	028a      	lsls	r2, r1, #10
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	2200      	movs	r2, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	60fa      	str	r2, [r7, #12]
 8003a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a9c:	f7fd f88c 	bl	8000bb8 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3740      	adds	r7, #64	; 0x40
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	017d7840 	.word	0x017d7840

08003ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	2000009c 	.word	0x2000009c

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff0 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0a9b      	lsrs	r3, r3, #10
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	0800bddc 	.word	0x0800bddc

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff ffdc 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0b5b      	lsrs	r3, r3, #13
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	0800bddc 	.word	0x0800bddc

08003b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e03f      	b.n	8003bde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fb96 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	; 0x24
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fe1d 	bl	80047d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b08a      	sub	sp, #40	; 0x28
 8003bea:	af02      	add	r7, sp, #8
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d17c      	bne.n	8003d00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_UART_Transmit+0x2c>
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e075      	b.n	8003d02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Transmit+0x3e>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e06e      	b.n	8003d02 <HAL_UART_Transmit+0x11c>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2221      	movs	r2, #33	; 0x21
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c3a:	f7fd fd29 	bl	8001690 <HAL_GetTick>
 8003c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c54:	d108      	bne.n	8003c68 <HAL_UART_Transmit+0x82>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d104      	bne.n	8003c68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	e003      	b.n	8003c70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c78:	e02a      	b.n	8003cd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2200      	movs	r2, #0
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fb9b 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e036      	b.n	8003d02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3302      	adds	r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e007      	b.n	8003cc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1cf      	bne.n	8003c7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2140      	movs	r1, #64	; 0x40
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fb6b 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e006      	b.n	8003d02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b08a      	sub	sp, #40	; 0x28
 8003d0e:	af02      	add	r7, sp, #8
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	f040 808c 	bne.w	8003e44 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Receive+0x2e>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e084      	b.n	8003e46 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_UART_Receive+0x40>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e07d      	b.n	8003e46 <HAL_UART_Receive+0x13c>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2222      	movs	r2, #34	; 0x22
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d66:	f7fd fc93 	bl	8001690 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d80:	d108      	bne.n	8003d94 <HAL_UART_Receive+0x8a>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	e003      	b.n	8003d9c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003da4:	e043      	b.n	8003e2e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2200      	movs	r2, #0
 8003dae:	2120      	movs	r1, #32
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fb05 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e042      	b.n	8003e46 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10c      	bne.n	8003de0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	3302      	adds	r3, #2
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e01f      	b.n	8003e20 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de8:	d007      	beq.n	8003dfa <HAL_UART_Receive+0xf0>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_UART_Receive+0xfe>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e008      	b.n	8003e1a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1b6      	bne.n	8003da6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0ba      	sub	sp, #232	; 0xe8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10f      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x66>
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fbd3 	bl	800465a <UART_Receive_IT>
      return;
 8003eb4:	e256      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80de 	beq.w	800407c <HAL_UART_IRQHandler+0x22c>
 8003ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80d1 	beq.w	800407c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_UART_IRQHandler+0xae>
 8003ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f043 0201 	orr.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_UART_IRQHandler+0xd2>
 8003f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f043 0202 	orr.w	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_UART_IRQHandler+0xf6>
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d011      	beq.n	8003f76 <HAL_UART_IRQHandler+0x126>
 8003f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d105      	bne.n	8003f6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f043 0208 	orr.w	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 81ed 	beq.w	800435a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_UART_IRQHandler+0x14e>
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fb5e 	bl	800465a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_UART_IRQHandler+0x17a>
 8003fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04f      	beq.n	800406a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa66 	bl	800449c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d141      	bne.n	8004062 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800400a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800400e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1d9      	bne.n	8003fde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	4a7d      	ldr	r2, [pc, #500]	; (800422c <HAL_UART_IRQHandler+0x3dc>)
 8004038:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fcd7 	bl	80019f2 <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004054:	4610      	mov	r0, r2
 8004056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00e      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f99a 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e00a      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f996 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e006      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f992 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004076:	e170      	b.n	800435a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	bf00      	nop
    return;
 800407a:	e16e      	b.n	800435a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 814a 	bne.w	800431a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8143 	beq.w	800431a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 813c 	beq.w	800431a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	f040 80b4 	bne.w	8004230 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8140 	beq.w	800435e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e6:	429a      	cmp	r2, r3
 80040e8:	f080 8139 	bcs.w	800435e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fe:	f000 8088 	beq.w	8004212 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800411c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800412e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800413a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1d9      	bne.n	8004102 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800415e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800417a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e1      	bne.n	800414e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800419a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3314      	adds	r3, #20
 80041aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e3      	bne.n	800418a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e2:	f023 0310 	bic.w	r3, r3, #16
 80041e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80041f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e3      	bne.n	80041d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	4618      	mov	r0, r3
 800420e:	f7fd fb80 	bl	8001912 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421a:	b29b      	uxth	r3, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	b29b      	uxth	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8c0 	bl	80043a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004228:	e099      	b.n	800435e <HAL_UART_IRQHandler+0x50e>
 800422a:	bf00      	nop
 800422c:	08004563 	.word	0x08004563
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004238:	b29b      	uxth	r3, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 808b 	beq.w	8004362 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800424c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8086 	beq.w	8004362 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800426c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800427a:	647a      	str	r2, [r7, #68]	; 0x44
 800427c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e3      	bne.n	8004256 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3314      	adds	r3, #20
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	623b      	str	r3, [r7, #32]
   return(result);
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3314      	adds	r3, #20
 80042ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042b2:	633a      	str	r2, [r7, #48]	; 0x30
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e3      	bne.n	800428e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0310 	bic.w	r3, r3, #16
 80042ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042f8:	61fa      	str	r2, [r7, #28]
 80042fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	69b9      	ldr	r1, [r7, #24]
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	617b      	str	r3, [r7, #20]
   return(result);
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e3      	bne.n	80042d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800430c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f848 	bl	80043a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004318:	e023      	b.n	8004362 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_UART_IRQHandler+0x4ea>
 8004326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f929 	bl	800458a <UART_Transmit_IT>
    return;
 8004338:	e014      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00e      	beq.n	8004364 <HAL_UART_IRQHandler+0x514>
 8004346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f969 	bl	800462a <UART_EndTransmit_IT>
    return;
 8004358:	e004      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
    return;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
      return;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
      return;
 8004362:	bf00      	nop
  }
}
 8004364:	37e8      	adds	r7, #232	; 0xe8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop

0800436c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b090      	sub	sp, #64	; 0x40
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	e050      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d04c      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e0:	f7fd f956 	bl	8001690 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d241      	bcs.n	8004474 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004410:	637a      	str	r2, [r7, #52]	; 0x34
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e5      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	613b      	str	r3, [r7, #16]
   return(result);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004444:	623a      	str	r2, [r7, #32]
 8004446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	69f9      	ldr	r1, [r7, #28]
 800444a:	6a3a      	ldr	r2, [r7, #32]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	61bb      	str	r3, [r7, #24]
   return(result);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e00f      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	429a      	cmp	r2, r3
 8004490:	d09f      	beq.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3740      	adds	r7, #64	; 0x40
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b095      	sub	sp, #84	; 0x54
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c4:	643a      	str	r2, [r7, #64]	; 0x40
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3314      	adds	r3, #20
 80044f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d119      	bne.n	8004548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	60bb      	str	r3, [r7, #8]
   return(result);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0310 	bic.w	r3, r3, #16
 800452a:	647b      	str	r3, [r7, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004534:	61ba      	str	r2, [r7, #24]
 8004536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	613b      	str	r3, [r7, #16]
   return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004556:	bf00      	nop
 8004558:	3754      	adds	r7, #84	; 0x54
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff ff09 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b21      	cmp	r3, #33	; 0x21
 800459c:	d13e      	bne.n	800461c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d114      	bne.n	80045d2 <UART_Transmit_IT+0x48>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d110      	bne.n	80045d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	1c9a      	adds	r2, r3, #2
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]
 80045d0:	e008      	b.n	80045e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	1c59      	adds	r1, r3, #1
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6211      	str	r1, [r2, #32]
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4619      	mov	r1, r3
 80045f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10f      	bne.n	8004618 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004606:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004616:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff fe8e 	bl	800436c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b08c      	sub	sp, #48	; 0x30
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b22      	cmp	r3, #34	; 0x22
 800466c:	f040 80ab 	bne.w	80047c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004678:	d117      	bne.n	80046aa <UART_Receive_IT+0x50>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d113      	bne.n	80046aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004698:	b29a      	uxth	r2, r3
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	1c9a      	adds	r2, r3, #2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
 80046a8:	e026      	b.n	80046f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046bc:	d007      	beq.n	80046ce <UART_Receive_IT+0x74>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <UART_Receive_IT+0x82>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e008      	b.n	80046ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29b      	uxth	r3, r3
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4619      	mov	r1, r3
 8004706:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004708:	2b00      	cmp	r3, #0
 800470a:	d15a      	bne.n	80047c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0220 	bic.w	r2, r2, #32
 800471a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800472a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	2b01      	cmp	r3, #1
 800474a:	d135      	bne.n	80047b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	613b      	str	r3, [r7, #16]
   return(result);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f023 0310 	bic.w	r3, r3, #16
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004772:	623a      	str	r2, [r7, #32]
 8004774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	69f9      	ldr	r1, [r7, #28]
 8004778:	6a3a      	ldr	r2, [r7, #32]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b10      	cmp	r3, #16
 8004792:	d10a      	bne.n	80047aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fdf9 	bl	80043a8 <HAL_UARTEx_RxEventCallback>
 80047b6:	e002      	b.n	80047be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fde1 	bl	8004380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	e002      	b.n	80047c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3730      	adds	r7, #48	; 0x30
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d4:	b0c0      	sub	sp, #256	; 0x100
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	68d9      	ldr	r1, [r3, #12]
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	ea40 0301 	orr.w	r3, r0, r1
 80047f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	431a      	orrs	r2, r3
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004828:	f021 010c 	bic.w	r1, r1, #12
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004836:	430b      	orrs	r3, r1
 8004838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484a:	6999      	ldr	r1, [r3, #24]
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	ea40 0301 	orr.w	r3, r0, r1
 8004856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b8f      	ldr	r3, [pc, #572]	; (8004a9c <UART_SetConfig+0x2cc>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d005      	beq.n	8004870 <UART_SetConfig+0xa0>
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b8d      	ldr	r3, [pc, #564]	; (8004aa0 <UART_SetConfig+0x2d0>)
 800486c:	429a      	cmp	r2, r3
 800486e:	d104      	bne.n	800487a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004870:	f7ff f958 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8004874:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004878:	e003      	b.n	8004882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800487a:	f7ff f93f 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 800487e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488c:	f040 810c 	bne.w	8004aa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800489a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800489e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	1891      	adds	r1, r2, r2
 80048a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80048aa:	415b      	adcs	r3, r3
 80048ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048b2:	4621      	mov	r1, r4
 80048b4:	eb12 0801 	adds.w	r8, r2, r1
 80048b8:	4629      	mov	r1, r5
 80048ba:	eb43 0901 	adc.w	r9, r3, r1
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d2:	4690      	mov	r8, r2
 80048d4:	4699      	mov	r9, r3
 80048d6:	4623      	mov	r3, r4
 80048d8:	eb18 0303 	adds.w	r3, r8, r3
 80048dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048e0:	462b      	mov	r3, r5
 80048e2:	eb49 0303 	adc.w	r3, r9, r3
 80048e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048fe:	460b      	mov	r3, r1
 8004900:	18db      	adds	r3, r3, r3
 8004902:	653b      	str	r3, [r7, #80]	; 0x50
 8004904:	4613      	mov	r3, r2
 8004906:	eb42 0303 	adc.w	r3, r2, r3
 800490a:	657b      	str	r3, [r7, #84]	; 0x54
 800490c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004914:	f7fc f950 	bl	8000bb8 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <UART_SetConfig+0x2d4>)
 800491e:	fba3 2302 	umull	r2, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	011c      	lsls	r4, r3, #4
 8004926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004930:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	1891      	adds	r1, r2, r2
 800493e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004940:	415b      	adcs	r3, r3
 8004942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004948:	4641      	mov	r1, r8
 800494a:	eb12 0a01 	adds.w	sl, r2, r1
 800494e:	4649      	mov	r1, r9
 8004950:	eb43 0b01 	adc.w	fp, r3, r1
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004968:	4692      	mov	sl, r2
 800496a:	469b      	mov	fp, r3
 800496c:	4643      	mov	r3, r8
 800496e:	eb1a 0303 	adds.w	r3, sl, r3
 8004972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004976:	464b      	mov	r3, r9
 8004978:	eb4b 0303 	adc.w	r3, fp, r3
 800497c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800498c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004994:	460b      	mov	r3, r1
 8004996:	18db      	adds	r3, r3, r3
 8004998:	643b      	str	r3, [r7, #64]	; 0x40
 800499a:	4613      	mov	r3, r2
 800499c:	eb42 0303 	adc.w	r3, r2, r3
 80049a0:	647b      	str	r3, [r7, #68]	; 0x44
 80049a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049aa:	f7fc f905 	bl	8000bb8 <__aeabi_uldivmod>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <UART_SetConfig+0x2d4>)
 80049b6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2264      	movs	r2, #100	; 0x64
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	1acb      	subs	r3, r1, r3
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ca:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <UART_SetConfig+0x2d4>)
 80049cc:	fba3 2302 	umull	r2, r3, r3, r2
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049d8:	441c      	add	r4, r3
 80049da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049ec:	4642      	mov	r2, r8
 80049ee:	464b      	mov	r3, r9
 80049f0:	1891      	adds	r1, r2, r2
 80049f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049f4:	415b      	adcs	r3, r3
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049fc:	4641      	mov	r1, r8
 80049fe:	1851      	adds	r1, r2, r1
 8004a00:	6339      	str	r1, [r7, #48]	; 0x30
 8004a02:	4649      	mov	r1, r9
 8004a04:	414b      	adcs	r3, r1
 8004a06:	637b      	str	r3, [r7, #52]	; 0x34
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a14:	4659      	mov	r1, fp
 8004a16:	00cb      	lsls	r3, r1, #3
 8004a18:	4651      	mov	r1, sl
 8004a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1e:	4651      	mov	r1, sl
 8004a20:	00ca      	lsls	r2, r1, #3
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	4642      	mov	r2, r8
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a30:	464b      	mov	r3, r9
 8004a32:	460a      	mov	r2, r1
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a50:	460b      	mov	r3, r1
 8004a52:	18db      	adds	r3, r3, r3
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a56:	4613      	mov	r3, r2
 8004a58:	eb42 0303 	adc.w	r3, r2, r3
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a66:	f7fc f8a7 	bl	8000bb8 <__aeabi_uldivmod>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <UART_SetConfig+0x2d4>)
 8004a70:	fba3 1302 	umull	r1, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	2164      	movs	r1, #100	; 0x64
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	3332      	adds	r3, #50	; 0x32
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <UART_SetConfig+0x2d4>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f003 0207 	and.w	r2, r3, #7
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4422      	add	r2, r4
 8004a96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a98:	e105      	b.n	8004ca6 <UART_SetConfig+0x4d6>
 8004a9a:	bf00      	nop
 8004a9c:	40011000 	.word	0x40011000
 8004aa0:	40011400 	.word	0x40011400
 8004aa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aba:	4642      	mov	r2, r8
 8004abc:	464b      	mov	r3, r9
 8004abe:	1891      	adds	r1, r2, r2
 8004ac0:	6239      	str	r1, [r7, #32]
 8004ac2:	415b      	adcs	r3, r3
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aca:	4641      	mov	r1, r8
 8004acc:	1854      	adds	r4, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb43 0501 	adc.w	r5, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	00eb      	lsls	r3, r5, #3
 8004ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae2:	00e2      	lsls	r2, r4, #3
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	461d      	mov	r5, r3
 8004ae8:	4643      	mov	r3, r8
 8004aea:	18e3      	adds	r3, r4, r3
 8004aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004af0:	464b      	mov	r3, r9
 8004af2:	eb45 0303 	adc.w	r3, r5, r3
 8004af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b16:	4629      	mov	r1, r5
 8004b18:	008b      	lsls	r3, r1, #2
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b20:	4621      	mov	r1, r4
 8004b22:	008a      	lsls	r2, r1, #2
 8004b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b28:	f7fc f846 	bl	8000bb8 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004b32:	fba3 2302 	umull	r2, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	011c      	lsls	r4, r3, #4
 8004b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	1891      	adds	r1, r2, r2
 8004b52:	61b9      	str	r1, [r7, #24]
 8004b54:	415b      	adcs	r3, r3
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	1851      	adds	r1, r2, r1
 8004b60:	6139      	str	r1, [r7, #16]
 8004b62:	4649      	mov	r1, r9
 8004b64:	414b      	adcs	r3, r1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b74:	4659      	mov	r1, fp
 8004b76:	00cb      	lsls	r3, r1, #3
 8004b78:	4651      	mov	r1, sl
 8004b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7e:	4651      	mov	r1, sl
 8004b80:	00ca      	lsls	r2, r1, #3
 8004b82:	4610      	mov	r0, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	4642      	mov	r2, r8
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b90:	464b      	mov	r3, r9
 8004b92:	460a      	mov	r2, r1
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ba6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	008b      	lsls	r3, r1, #2
 8004bb8:	4641      	mov	r1, r8
 8004bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	008a      	lsls	r2, r1, #2
 8004bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bc6:	f7fb fff7 	bl	8000bb8 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	2164      	movs	r1, #100	; 0x64
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	3332      	adds	r3, #50	; 0x32
 8004be2:	4a34      	ldr	r2, [pc, #208]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bee:	441c      	add	r4, r3
 8004bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	673b      	str	r3, [r7, #112]	; 0x70
 8004bf8:	677a      	str	r2, [r7, #116]	; 0x74
 8004bfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bfe:	4642      	mov	r2, r8
 8004c00:	464b      	mov	r3, r9
 8004c02:	1891      	adds	r1, r2, r2
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	415b      	adcs	r3, r3
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c0e:	4641      	mov	r1, r8
 8004c10:	1851      	adds	r1, r2, r1
 8004c12:	6039      	str	r1, [r7, #0]
 8004c14:	4649      	mov	r1, r9
 8004c16:	414b      	adcs	r3, r1
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c26:	4659      	mov	r1, fp
 8004c28:	00cb      	lsls	r3, r1, #3
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c30:	4651      	mov	r1, sl
 8004c32:	00ca      	lsls	r2, r1, #3
 8004c34:	4610      	mov	r0, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c40:	464b      	mov	r3, r9
 8004c42:	460a      	mov	r2, r1
 8004c44:	eb42 0303 	adc.w	r3, r2, r3
 8004c48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	663b      	str	r3, [r7, #96]	; 0x60
 8004c54:	667a      	str	r2, [r7, #100]	; 0x64
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c62:	4649      	mov	r1, r9
 8004c64:	008b      	lsls	r3, r1, #2
 8004c66:	4641      	mov	r1, r8
 8004c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	008a      	lsls	r2, r1, #2
 8004c70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c74:	f7fb ffa0 	bl	8000bb8 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2164      	movs	r1, #100	; 0x64
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	3332      	adds	r3, #50	; 0x32
 8004c90:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4422      	add	r2, r4
 8004ca4:	609a      	str	r2, [r3, #8]
}
 8004ca6:	bf00      	nop
 8004ca8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cac:	46bd      	mov	sp, r7
 8004cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb2:	bf00      	nop
 8004cb4:	51eb851f 	.word	0x51eb851f

08004cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cb8:	b084      	sub	sp, #16
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	f107 001c 	add.w	r0, r7, #28
 8004cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d122      	bne.n	8004d16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d105      	bne.n	8004d0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fbee 	bl	80064ec <USB_CoreReset>
 8004d10:	4603      	mov	r3, r0
 8004d12:	73fb      	strb	r3, [r7, #15]
 8004d14:	e01a      	b.n	8004d4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f001 fbe2 	bl	80064ec <USB_CoreReset>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	639a      	str	r2, [r3, #56]	; 0x38
 8004d3e:	e005      	b.n	8004d4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10b      	bne.n	8004d6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f043 0206 	orr.w	r2, r3, #6
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d76:	b004      	add	sp, #16
 8004d78:	4770      	bx	lr
	...

08004d7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d165      	bne.n	8004e5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a41      	ldr	r2, [pc, #260]	; (8004e98 <USB_SetTurnaroundTime+0x11c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d906      	bls.n	8004da6 <USB_SetTurnaroundTime+0x2a>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a40      	ldr	r2, [pc, #256]	; (8004e9c <USB_SetTurnaroundTime+0x120>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d202      	bcs.n	8004da6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004da0:	230f      	movs	r3, #15
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e062      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4a3c      	ldr	r2, [pc, #240]	; (8004e9c <USB_SetTurnaroundTime+0x120>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d306      	bcc.n	8004dbc <USB_SetTurnaroundTime+0x40>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4a3b      	ldr	r2, [pc, #236]	; (8004ea0 <USB_SetTurnaroundTime+0x124>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d202      	bcs.n	8004dbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004db6:	230e      	movs	r3, #14
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	e057      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a38      	ldr	r2, [pc, #224]	; (8004ea0 <USB_SetTurnaroundTime+0x124>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d306      	bcc.n	8004dd2 <USB_SetTurnaroundTime+0x56>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a37      	ldr	r2, [pc, #220]	; (8004ea4 <USB_SetTurnaroundTime+0x128>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d202      	bcs.n	8004dd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dcc:	230d      	movs	r3, #13
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e04c      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a33      	ldr	r2, [pc, #204]	; (8004ea4 <USB_SetTurnaroundTime+0x128>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d306      	bcc.n	8004de8 <USB_SetTurnaroundTime+0x6c>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4a32      	ldr	r2, [pc, #200]	; (8004ea8 <USB_SetTurnaroundTime+0x12c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d802      	bhi.n	8004de8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004de2:	230c      	movs	r3, #12
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e041      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4a2f      	ldr	r2, [pc, #188]	; (8004ea8 <USB_SetTurnaroundTime+0x12c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d906      	bls.n	8004dfe <USB_SetTurnaroundTime+0x82>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4a2e      	ldr	r2, [pc, #184]	; (8004eac <USB_SetTurnaroundTime+0x130>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d802      	bhi.n	8004dfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004df8:	230b      	movs	r3, #11
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e036      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a2a      	ldr	r2, [pc, #168]	; (8004eac <USB_SetTurnaroundTime+0x130>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d906      	bls.n	8004e14 <USB_SetTurnaroundTime+0x98>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a29      	ldr	r2, [pc, #164]	; (8004eb0 <USB_SetTurnaroundTime+0x134>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d802      	bhi.n	8004e14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e0e:	230a      	movs	r3, #10
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e02b      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <USB_SetTurnaroundTime+0x134>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d906      	bls.n	8004e2a <USB_SetTurnaroundTime+0xae>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <USB_SetTurnaroundTime+0x138>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d202      	bcs.n	8004e2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e24:	2309      	movs	r3, #9
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e020      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <USB_SetTurnaroundTime+0x138>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d306      	bcc.n	8004e40 <USB_SetTurnaroundTime+0xc4>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <USB_SetTurnaroundTime+0x13c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d802      	bhi.n	8004e40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e015      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <USB_SetTurnaroundTime+0x13c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d906      	bls.n	8004e56 <USB_SetTurnaroundTime+0xda>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <USB_SetTurnaroundTime+0x140>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d202      	bcs.n	8004e56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e50:	2307      	movs	r3, #7
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e00a      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e56:	2306      	movs	r3, #6
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e007      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e62:	2309      	movs	r3, #9
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e001      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e68:	2309      	movs	r3, #9
 8004e6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	029b      	lsls	r3, r3, #10
 8004e80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	00d8acbf 	.word	0x00d8acbf
 8004e9c:	00e4e1c0 	.word	0x00e4e1c0
 8004ea0:	00f42400 	.word	0x00f42400
 8004ea4:	01067380 	.word	0x01067380
 8004ea8:	011a499f 	.word	0x011a499f
 8004eac:	01312cff 	.word	0x01312cff
 8004eb0:	014ca43f 	.word	0x014ca43f
 8004eb4:	016e3600 	.word	0x016e3600
 8004eb8:	01a6ab1f 	.word	0x01a6ab1f
 8004ebc:	01e84800 	.word	0x01e84800

08004ec0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f043 0201 	orr.w	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 0201 	bic.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d115      	bne.n	8004f52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f32:	2001      	movs	r0, #1
 8004f34:	f7fc fbb8 	bl	80016a8 <HAL_Delay>
      ms++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fa45 	bl	80063ce <USB_GetMode>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d01e      	beq.n	8004f88 <USB_SetCurrentMode+0x84>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b31      	cmp	r3, #49	; 0x31
 8004f4e:	d9f0      	bls.n	8004f32 <USB_SetCurrentMode+0x2e>
 8004f50:	e01a      	b.n	8004f88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d115      	bne.n	8004f84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f64:	2001      	movs	r0, #1
 8004f66:	f7fc fb9f 	bl	80016a8 <HAL_Delay>
      ms++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 fa2c 	bl	80063ce <USB_GetMode>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <USB_SetCurrentMode+0x84>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b31      	cmp	r3, #49	; 0x31
 8004f80:	d9f0      	bls.n	8004f64 <USB_SetCurrentMode+0x60>
 8004f82:	e001      	b.n	8004f88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e005      	b.n	8004f94 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b32      	cmp	r3, #50	; 0x32
 8004f8c:	d101      	bne.n	8004f92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	e009      	b.n	8004fd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3340      	adds	r3, #64	; 0x40
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b0e      	cmp	r3, #14
 8004fd4:	d9f2      	bls.n	8004fbc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d11c      	bne.n	8005016 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fea:	f043 0302 	orr.w	r3, r3, #2
 8004fee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
 8005014:	e00b      	b.n	800502e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005034:	461a      	mov	r2, r3
 8005036:	2300      	movs	r3, #0
 8005038:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005040:	4619      	mov	r1, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005048:	461a      	mov	r2, r3
 800504a:	680b      	ldr	r3, [r1, #0]
 800504c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	2b01      	cmp	r3, #1
 8005052:	d10c      	bne.n	800506e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800505a:	2100      	movs	r1, #0
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f965 	bl	800532c <USB_SetDevSpeed>
 8005062:	e008      	b.n	8005076 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005064:	2101      	movs	r1, #1
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f960 	bl	800532c <USB_SetDevSpeed>
 800506c:	e003      	b.n	8005076 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800506e:	2103      	movs	r1, #3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f95b 	bl	800532c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005076:	2110      	movs	r1, #16
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f8f3 	bl	8005264 <USB_FlushTxFifo>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f91f 	bl	80052cc <USB_FlushRxFifo>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	461a      	mov	r2, r3
 80050a0:	2300      	movs	r3, #0
 80050a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	461a      	mov	r2, r3
 80050ac:	2300      	movs	r3, #0
 80050ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	461a      	mov	r2, r3
 80050b8:	2300      	movs	r3, #0
 80050ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e043      	b.n	800514a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d8:	d118      	bne.n	800510c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	461a      	mov	r2, r3
 80050ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e013      	b.n	800511e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	461a      	mov	r2, r3
 8005104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e008      	b.n	800511e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	461a      	mov	r2, r3
 800511a:	2300      	movs	r3, #0
 800511c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512a:	461a      	mov	r2, r3
 800512c:	2300      	movs	r3, #0
 800512e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	461a      	mov	r2, r3
 800513e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005142:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	3301      	adds	r3, #1
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	429a      	cmp	r2, r3
 8005150:	d3b7      	bcc.n	80050c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e043      	b.n	80051e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800516a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800516e:	d118      	bne.n	80051a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	461a      	mov	r2, r3
 8005184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e013      	b.n	80051b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	461a      	mov	r2, r3
 800519a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e008      	b.n	80051b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	461a      	mov	r2, r3
 80051b0:	2300      	movs	r3, #0
 80051b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c0:	461a      	mov	r2, r3
 80051c2:	2300      	movs	r3, #0
 80051c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	461a      	mov	r2, r3
 80051d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	3301      	adds	r3, #1
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d3b7      	bcc.n	8005158 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005208:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	2b00      	cmp	r3, #0
 800520e:	d105      	bne.n	800521c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f043 0210 	orr.w	r2, r3, #16
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <USB_DevInit+0x2c4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f043 0208 	orr.w	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800523a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005250:	7dfb      	ldrb	r3, [r7, #23]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800525c:	b004      	add	sp, #16
 800525e:	4770      	bx	lr
 8005260:	803c3800 	.word	0x803c3800

08005264 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <USB_FlushTxFifo+0x64>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e01b      	b.n	80052bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	daf2      	bge.n	8005272 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	019b      	lsls	r3, r3, #6
 8005294:	f043 0220 	orr.w	r2, r3, #32
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <USB_FlushTxFifo+0x64>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e006      	b.n	80052bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d0f0      	beq.n	800529c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	00030d40 	.word	0x00030d40

080052cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a11      	ldr	r2, [pc, #68]	; (8005328 <USB_FlushRxFifo+0x5c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e018      	b.n	800531c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	daf2      	bge.n	80052d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2210      	movs	r2, #16
 80052fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a08      	ldr	r2, [pc, #32]	; (8005328 <USB_FlushRxFifo+0x5c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e006      	b.n	800531c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b10      	cmp	r3, #16
 8005318:	d0f0      	beq.n	80052fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	00030d40 	.word	0x00030d40

0800532c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800534c:	4313      	orrs	r3, r2
 800534e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800535e:	b480      	push	{r7}
 8005360:	b087      	sub	sp, #28
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0306 	and.w	r3, r3, #6
 8005376:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800537e:	2300      	movs	r3, #0
 8005380:	75fb      	strb	r3, [r7, #23]
 8005382:	e00a      	b.n	800539a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d002      	beq.n	8005390 <USB_GetDevSpeed+0x32>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b06      	cmp	r3, #6
 800538e:	d102      	bne.n	8005396 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005390:	2302      	movs	r3, #2
 8005392:	75fb      	strb	r3, [r7, #23]
 8005394:	e001      	b.n	800539a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005396:	230f      	movs	r3, #15
 8005398:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800539a:	7dfb      	ldrb	r3, [r7, #23]
}
 800539c:	4618      	mov	r0, r3
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d13a      	bne.n	800543a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	2101      	movs	r1, #1
 80053d6:	fa01 f303 	lsl.w	r3, r1, r3
 80053da:	b29b      	uxth	r3, r3
 80053dc:	68f9      	ldr	r1, [r7, #12]
 80053de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d155      	bne.n	80054a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	791b      	ldrb	r3, [r3, #4]
 8005416:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005418:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	059b      	lsls	r3, r3, #22
 800541e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005420:	4313      	orrs	r3, r2
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	440a      	add	r2, r1
 800542a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	e036      	b.n	80054a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	2101      	movs	r1, #1
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005458:	4313      	orrs	r3, r2
 800545a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11a      	bne.n	80054a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	791b      	ldrb	r3, [r3, #4]
 800548c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800548e:	430b      	orrs	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d161      	bne.n	8005598 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ea:	d11f      	bne.n	800552c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800550a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800552a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	2101      	movs	r1, #1
 800553e:	fa01 f303 	lsl.w	r3, r1, r3
 8005542:	b29b      	uxth	r3, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800554c:	4013      	ands	r3, r2
 800554e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	2101      	movs	r1, #1
 8005562:	fa01 f303 	lsl.w	r3, r1, r3
 8005566:	b29b      	uxth	r3, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005570:	4013      	ands	r3, r2
 8005572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	0159      	lsls	r1, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	440b      	add	r3, r1
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	4619      	mov	r1, r3
 8005590:	4b35      	ldr	r3, [pc, #212]	; (8005668 <USB_DeactivateEndpoint+0x1b0>)
 8005592:	4013      	ands	r3, r2
 8005594:	600b      	str	r3, [r1, #0]
 8005596:	e060      	b.n	800565a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ae:	d11f      	bne.n	80055f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	041b      	lsls	r3, r3, #16
 8005608:	43db      	mvns	r3, r3
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005610:	4013      	ands	r3, r2
 8005612:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	2101      	movs	r1, #1
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	43db      	mvns	r3, r3
 800562e:	68f9      	ldr	r1, [r7, #12]
 8005630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005634:	4013      	ands	r3, r2
 8005636:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	0159      	lsls	r1, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	440b      	add	r3, r1
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	4619      	mov	r1, r3
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <USB_DeactivateEndpoint+0x1b4>)
 8005656:	4013      	ands	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	ec337800 	.word	0xec337800
 800566c:	eff37800 	.word	0xeff37800

08005670 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	; 0x28
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b01      	cmp	r3, #1
 800568e:	f040 815c 	bne.w	800594a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d132      	bne.n	8005700 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f8:	0cdb      	lsrs	r3, r3, #19
 80056fa:	04db      	lsls	r3, r3, #19
 80056fc:	6113      	str	r3, [r2, #16]
 80056fe:	e074      	b.n	80057ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	440a      	add	r2, r1
 8005716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571a:	0cdb      	lsrs	r3, r3, #19
 800571c:	04db      	lsls	r3, r3, #19
 800571e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	440a      	add	r2, r1
 8005736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800573e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6999      	ldr	r1, [r3, #24]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	440b      	add	r3, r1
 800575c:	1e59      	subs	r1, r3, #1
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	fbb1 f3f3 	udiv	r3, r1, r3
 8005766:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005768:	4b9d      	ldr	r3, [pc, #628]	; (80059e0 <USB_EPStartXfer+0x370>)
 800576a:	400b      	ands	r3, r1
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	0148      	lsls	r0, r1, #5
 8005770:	69f9      	ldr	r1, [r7, #28]
 8005772:	4401      	add	r1, r0
 8005774:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005778:	4313      	orrs	r3, r2
 800577a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005792:	69b9      	ldr	r1, [r7, #24]
 8005794:	0148      	lsls	r0, r1, #5
 8005796:	69f9      	ldr	r1, [r7, #28]
 8005798:	4401      	add	r1, r0
 800579a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800579e:	4313      	orrs	r3, r2
 80057a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	791b      	ldrb	r3, [r3, #4]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d11f      	bne.n	80057ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d14b      	bne.n	8005888 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	461a      	mov	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	791b      	ldrb	r3, [r3, #4]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d128      	bne.n	8005866 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d110      	bne.n	8005846 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	440a      	add	r2, r1
 800583a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	e00f      	b.n	8005866 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	440a      	add	r2, r1
 800585c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005864:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005880:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e133      	b.n	8005af0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d015      	beq.n	80058dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 811b 	beq.w	8005af0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	2101      	movs	r1, #1
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	69f9      	ldr	r1, [r7, #28]
 80058d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d6:	4313      	orrs	r3, r2
 80058d8:	634b      	str	r3, [r1, #52]	; 0x34
 80058da:	e109      	b.n	8005af0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d110      	bne.n	800590e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	0151      	lsls	r1, r2, #5
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	440a      	add	r2, r1
 8005902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e00f      	b.n	800592e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6919      	ldr	r1, [r3, #16]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	781a      	ldrb	r2, [r3, #0]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	b298      	uxth	r0, r3
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	4603      	mov	r3, r0
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fade 	bl	8005f04 <USB_WritePacket>
 8005948:	e0d2      	b.n	8005af0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	0cdb      	lsrs	r3, r3, #19
 8005966:	04db      	lsls	r3, r3, #19
 8005968:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005984:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005988:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800598c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d126      	bne.n	80059e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	0148      	lsls	r0, r1, #5
 80059b0:	69f9      	ldr	r1, [r7, #28]
 80059b2:	4401      	add	r1, r0
 80059b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059b8:	4313      	orrs	r3, r2
 80059ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059da:	6113      	str	r3, [r2, #16]
 80059dc:	e03a      	b.n	8005a54 <USB_EPStartXfer+0x3e4>
 80059de:	bf00      	nop
 80059e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	1e5a      	subs	r2, r3, #1
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	8afa      	ldrh	r2, [r7, #22]
 8005a00:	fb03 f202 	mul.w	r2, r3, r2
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	8afb      	ldrh	r3, [r7, #22]
 8005a18:	04d9      	lsls	r1, r3, #19
 8005a1a:	4b38      	ldr	r3, [pc, #224]	; (8005afc <USB_EPStartXfer+0x48c>)
 8005a1c:	400b      	ands	r3, r1
 8005a1e:	69b9      	ldr	r1, [r7, #24]
 8005a20:	0148      	lsls	r0, r1, #5
 8005a22:	69f9      	ldr	r1, [r7, #28]
 8005a24:	4401      	add	r1, r0
 8005a26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a44:	69b9      	ldr	r1, [r7, #24]
 8005a46:	0148      	lsls	r0, r1, #5
 8005a48:	69f9      	ldr	r1, [r7, #28]
 8005a4a:	4401      	add	r1, r0
 8005a4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a50:	4313      	orrs	r3, r2
 8005a52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d10d      	bne.n	8005a76 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6919      	ldr	r1, [r3, #16]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a72:	460a      	mov	r2, r1
 8005a74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	791b      	ldrb	r3, [r3, #4]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d128      	bne.n	8005ad0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d110      	bne.n	8005ab0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e00f      	b.n	8005ad0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ace:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	1ff80000 	.word	0x1ff80000

08005b00 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	f040 80ce 	bne.w	8005cbe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d132      	bne.n	8005b90 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b88:	0cdb      	lsrs	r3, r3, #19
 8005b8a:	04db      	lsls	r3, r3, #19
 8005b8c:	6113      	str	r3, [r2, #16]
 8005b8e:	e04e      	b.n	8005c2e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005baa:	0cdb      	lsrs	r3, r3, #19
 8005bac:	04db      	lsls	r3, r3, #19
 8005bae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bd2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d903      	bls.n	8005be8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c1e:	6939      	ldr	r1, [r7, #16]
 8005c20:	0148      	lsls	r0, r1, #5
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	4401      	add	r1, r0
 8005c26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d11e      	bne.n	8005c72 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	e097      	b.n	8005da2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c90:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8083 	beq.w	8005da2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	2101      	movs	r1, #1
 8005cae:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	634b      	str	r3, [r1, #52]	; 0x34
 8005cbc:	e071      	b.n	8005da2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd8:	0cdb      	lsrs	r3, r3, #19
 8005cda:	04db      	lsls	r3, r3, #19
 8005cdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d50:	6939      	ldr	r1, [r7, #16]
 8005d52:	0148      	lsls	r0, r1, #5
 8005d54:	6979      	ldr	r1, [r7, #20]
 8005d56:	4401      	add	r1, r0
 8005d58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d10d      	bne.n	8005d82 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6919      	ldr	r1, [r3, #16]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	460a      	mov	r2, r1
 8005d80:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005da0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d14a      	bne.n	8005e64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de6:	f040 8086 	bne.w	8005ef6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	7812      	ldrb	r2, [r2, #0]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d902      	bls.n	8005e48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	75fb      	strb	r3, [r7, #23]
          break;
 8005e46:	e056      	b.n	8005ef6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e60:	d0e7      	beq.n	8005e32 <USB_EPStopXfer+0x82>
 8005e62:	e048      	b.n	8005ef6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e7c:	d13b      	bne.n	8005ef6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ea0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	7812      	ldrb	r2, [r2, #0]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ec4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d902      	bls.n	8005edc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8005eda:	e00c      	b.n	8005ef6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef4:	d0e7      	beq.n	8005ec6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b089      	sub	sp, #36	; 0x24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	4611      	mov	r1, r2
 8005f10:	461a      	mov	r2, r3
 8005f12:	460b      	mov	r3, r1
 8005f14:	71fb      	strb	r3, [r7, #7]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d123      	bne.n	8005f72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f2a:	88bb      	ldrh	r3, [r7, #4]
 8005f2c:	3303      	adds	r3, #3
 8005f2e:	089b      	lsrs	r3, r3, #2
 8005f30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f32:	2300      	movs	r3, #0
 8005f34:	61bb      	str	r3, [r7, #24]
 8005f36:	e018      	b.n	8005f6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	031a      	lsls	r2, r3, #12
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f44:	461a      	mov	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	3301      	adds	r3, #1
 8005f56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	3301      	adds	r3, #1
 8005f62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	3301      	adds	r3, #1
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3e2      	bcc.n	8005f38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3724      	adds	r7, #36	; 0x24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b08b      	sub	sp, #44	; 0x2c
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	089b      	lsrs	r3, r3, #2
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	623b      	str	r3, [r7, #32]
 8005faa:	e014      	b.n	8005fd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	3301      	adds	r3, #1
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	3301      	adds	r3, #1
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	623b      	str	r3, [r7, #32]
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d3e6      	bcc.n	8005fac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fde:	8bfb      	ldrh	r3, [r7, #30]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01e      	beq.n	8006022 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f107 0310 	add.w	r3, r7, #16
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	fa22 f303 	lsr.w	r3, r2, r3
 8006004:	b2da      	uxtb	r2, r3
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	701a      	strb	r2, [r3, #0]
      i++;
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	3301      	adds	r3, #1
 800600e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	3301      	adds	r3, #1
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006016:	8bfb      	ldrh	r3, [r7, #30]
 8006018:	3b01      	subs	r3, #1
 800601a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800601c:	8bfb      	ldrh	r3, [r7, #30]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1ea      	bne.n	8005ff8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006024:	4618      	mov	r0, r3
 8006026:	372c      	adds	r7, #44	; 0x2c
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d12c      	bne.n	80060a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	db12      	blt.n	8006084 <USB_EPSetStall+0x54>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00f      	beq.n	8006084 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006082:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	e02b      	b.n	80060fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	db12      	blt.n	80060de <USB_EPSetStall+0xae>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00f      	beq.n	80060de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d128      	bne.n	800617a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006142:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006146:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	791b      	ldrb	r3, [r3, #4]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d003      	beq.n	8006158 <USB_EPClearStall+0x4c>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	791b      	ldrb	r3, [r3, #4]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d138      	bne.n	80061ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e027      	b.n	80061ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006194:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006198:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	791b      	ldrb	r3, [r3, #4]
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d003      	beq.n	80061aa <USB_EPClearStall+0x9e>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	791b      	ldrb	r3, [r3, #4]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d10f      	bne.n	80061ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800620c:	68f9      	ldr	r1, [r7, #12]
 800620e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006212:	4313      	orrs	r3, r2
 8006214:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006252:	f023 0302 	bic.w	r3, r3, #2
 8006256:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006280:	f023 0303 	bic.w	r3, r3, #3
 8006284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062c0:	68fb      	ldr	r3, [r7, #12]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	4013      	ands	r3, r2
 80062f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	0c1b      	lsrs	r3, r3, #16
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	b29b      	uxth	r3, r3
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006364:	68bb      	ldr	r3, [r7, #8]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006372:	b480      	push	{r7}
 8006374:	b087      	sub	sp, #28
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006394:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	fa22 f303 	lsr.w	r3, r2, r3
 80063a2:	01db      	lsls	r3, r3, #7
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4013      	ands	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063c0:	68bb      	ldr	r3, [r7, #8]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0301 	and.w	r3, r3, #1
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006404:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006408:	f023 0307 	bic.w	r3, r3, #7
 800640c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800641c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	460b      	mov	r3, r1
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	333c      	adds	r3, #60	; 0x3c
 8006446:	3304      	adds	r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4a26      	ldr	r2, [pc, #152]	; (80064e8 <USB_EP0_OutStart+0xb8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d90a      	bls.n	800646a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006464:	d101      	bne.n	800646a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	e037      	b.n	80064da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	461a      	mov	r2, r3
 8006472:	2300      	movs	r3, #0
 8006474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006488:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006498:	f043 0318 	orr.w	r3, r3, #24
 800649c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064b2:	7afb      	ldrb	r3, [r7, #11]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d10f      	bne.n	80064d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064be:	461a      	mov	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	4f54300a 	.word	0x4f54300a

080064ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a13      	ldr	r2, [pc, #76]	; (8006550 <USB_CoreReset+0x64>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e01b      	b.n	8006542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	daf2      	bge.n	80064f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f043 0201 	orr.w	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a09      	ldr	r2, [pc, #36]	; (8006550 <USB_CoreReset+0x64>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d901      	bls.n	8006534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e006      	b.n	8006542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b01      	cmp	r3, #1
 800653e:	d0f0      	beq.n	8006522 <USB_CoreReset+0x36>

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	00030d40 	.word	0x00030d40

08006554 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006560:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006564:	f002 fc8a 	bl	8008e7c <USBD_static_malloc>
 8006568:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	32b0      	adds	r2, #176	; 0xb0
 800657a:	2100      	movs	r1, #0
 800657c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006580:	2302      	movs	r3, #2
 8006582:	e0d4      	b.n	800672e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006584:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006588:	2100      	movs	r1, #0
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f002 fce4 	bl	8008f58 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	32b0      	adds	r2, #176	; 0xb0
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	32b0      	adds	r2, #176	; 0xb0
 80065aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	7c1b      	ldrb	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d138      	bne.n	800662e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065bc:	4b5e      	ldr	r3, [pc, #376]	; (8006738 <USBD_CDC_Init+0x1e4>)
 80065be:	7819      	ldrb	r1, [r3, #0]
 80065c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c4:	2202      	movs	r2, #2
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f002 fb35 	bl	8008c36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065cc:	4b5a      	ldr	r3, [pc, #360]	; (8006738 <USBD_CDC_Init+0x1e4>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f003 020f 	and.w	r2, r3, #15
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	440b      	add	r3, r1
 80065e0:	3324      	adds	r3, #36	; 0x24
 80065e2:	2201      	movs	r2, #1
 80065e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065e6:	4b55      	ldr	r3, [pc, #340]	; (800673c <USBD_CDC_Init+0x1e8>)
 80065e8:	7819      	ldrb	r1, [r3, #0]
 80065ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065ee:	2202      	movs	r2, #2
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f002 fb20 	bl	8008c36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065f6:	4b51      	ldr	r3, [pc, #324]	; (800673c <USBD_CDC_Init+0x1e8>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f003 020f 	and.w	r2, r3, #15
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800660e:	2201      	movs	r2, #1
 8006610:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006612:	4b4b      	ldr	r3, [pc, #300]	; (8006740 <USBD_CDC_Init+0x1ec>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f003 020f 	and.w	r2, r3, #15
 800661a:	6879      	ldr	r1, [r7, #4]
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	440b      	add	r3, r1
 8006626:	3326      	adds	r3, #38	; 0x26
 8006628:	2210      	movs	r2, #16
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e035      	b.n	800669a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800662e:	4b42      	ldr	r3, [pc, #264]	; (8006738 <USBD_CDC_Init+0x1e4>)
 8006630:	7819      	ldrb	r1, [r3, #0]
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	2202      	movs	r2, #2
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f002 fafd 	bl	8008c36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800663c:	4b3e      	ldr	r3, [pc, #248]	; (8006738 <USBD_CDC_Init+0x1e4>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f003 020f 	and.w	r2, r3, #15
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	3324      	adds	r3, #36	; 0x24
 8006652:	2201      	movs	r2, #1
 8006654:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006656:	4b39      	ldr	r3, [pc, #228]	; (800673c <USBD_CDC_Init+0x1e8>)
 8006658:	7819      	ldrb	r1, [r3, #0]
 800665a:	2340      	movs	r3, #64	; 0x40
 800665c:	2202      	movs	r2, #2
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f002 fae9 	bl	8008c36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006664:	4b35      	ldr	r3, [pc, #212]	; (800673c <USBD_CDC_Init+0x1e8>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f003 020f 	and.w	r2, r3, #15
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800667c:	2201      	movs	r2, #1
 800667e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006680:	4b2f      	ldr	r3, [pc, #188]	; (8006740 <USBD_CDC_Init+0x1ec>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 020f 	and.w	r2, r3, #15
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	3326      	adds	r3, #38	; 0x26
 8006696:	2210      	movs	r2, #16
 8006698:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800669a:	4b29      	ldr	r3, [pc, #164]	; (8006740 <USBD_CDC_Init+0x1ec>)
 800669c:	7819      	ldrb	r1, [r3, #0]
 800669e:	2308      	movs	r3, #8
 80066a0:	2203      	movs	r2, #3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f002 fac7 	bl	8008c36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066a8:	4b25      	ldr	r3, [pc, #148]	; (8006740 <USBD_CDC_Init+0x1ec>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f003 020f 	and.w	r2, r3, #15
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	3324      	adds	r3, #36	; 0x24
 80066be:	2201      	movs	r2, #1
 80066c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	33b0      	adds	r3, #176	; 0xb0
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80066f8:	2302      	movs	r3, #2
 80066fa:	e018      	b.n	800672e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7c1b      	ldrb	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006704:	4b0d      	ldr	r3, [pc, #52]	; (800673c <USBD_CDC_Init+0x1e8>)
 8006706:	7819      	ldrb	r1, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800670e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f002 fb7e 	bl	8008e14 <USBD_LL_PrepareReceive>
 8006718:	e008      	b.n	800672c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800671a:	4b08      	ldr	r3, [pc, #32]	; (800673c <USBD_CDC_Init+0x1e8>)
 800671c:	7819      	ldrb	r1, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006724:	2340      	movs	r3, #64	; 0x40
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f002 fb74 	bl	8008e14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	2000012f 	.word	0x2000012f
 800673c:	20000130 	.word	0x20000130
 8006740:	20000131 	.word	0x20000131

08006744 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006750:	4b3a      	ldr	r3, [pc, #232]	; (800683c <USBD_CDC_DeInit+0xf8>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f002 fa93 	bl	8008c82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800675c:	4b37      	ldr	r3, [pc, #220]	; (800683c <USBD_CDC_DeInit+0xf8>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f003 020f 	and.w	r2, r3, #15
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	3324      	adds	r3, #36	; 0x24
 8006772:	2200      	movs	r2, #0
 8006774:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006776:	4b32      	ldr	r3, [pc, #200]	; (8006840 <USBD_CDC_DeInit+0xfc>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f002 fa80 	bl	8008c82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006782:	4b2f      	ldr	r3, [pc, #188]	; (8006840 <USBD_CDC_DeInit+0xfc>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	f003 020f 	and.w	r2, r3, #15
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800679a:	2200      	movs	r2, #0
 800679c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800679e:	4b29      	ldr	r3, [pc, #164]	; (8006844 <USBD_CDC_DeInit+0x100>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f002 fa6c 	bl	8008c82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067aa:	4b26      	ldr	r3, [pc, #152]	; (8006844 <USBD_CDC_DeInit+0x100>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	3324      	adds	r3, #36	; 0x24
 80067c0:	2200      	movs	r2, #0
 80067c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067c4:	4b1f      	ldr	r3, [pc, #124]	; (8006844 <USBD_CDC_DeInit+0x100>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	f003 020f 	and.w	r2, r3, #15
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	3326      	adds	r3, #38	; 0x26
 80067da:	2200      	movs	r2, #0
 80067dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	32b0      	adds	r2, #176	; 0xb0
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01f      	beq.n	8006830 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	33b0      	adds	r3, #176	; 0xb0
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	32b0      	adds	r2, #176	; 0xb0
 800680e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006812:	4618      	mov	r0, r3
 8006814:	f002 fb40 	bl	8008e98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	32b0      	adds	r2, #176	; 0xb0
 8006822:	2100      	movs	r1, #0
 8006824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	2000012f 	.word	0x2000012f
 8006840:	20000130 	.word	0x20000130
 8006844:	20000131 	.word	0x20000131

08006848 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	32b0      	adds	r2, #176	; 0xb0
 800685c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006860:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006874:	2303      	movs	r3, #3
 8006876:	e0bf      	b.n	80069f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006880:	2b00      	cmp	r3, #0
 8006882:	d050      	beq.n	8006926 <USBD_CDC_Setup+0xde>
 8006884:	2b20      	cmp	r3, #32
 8006886:	f040 80af 	bne.w	80069e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	88db      	ldrh	r3, [r3, #6]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d03a      	beq.n	8006908 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	b25b      	sxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	da1b      	bge.n	80068d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	33b0      	adds	r3, #176	; 0xb0
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	88d2      	ldrh	r2, [r2, #6]
 80068b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	88db      	ldrh	r3, [r3, #6]
 80068be:	2b07      	cmp	r3, #7
 80068c0:	bf28      	it	cs
 80068c2:	2307      	movcs	r3, #7
 80068c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	89fa      	ldrh	r2, [r7, #14]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fd89 	bl	80083e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068d2:	e090      	b.n	80069f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	785a      	ldrb	r2, [r3, #1]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	88db      	ldrh	r3, [r3, #6]
 80068e2:	2b3f      	cmp	r3, #63	; 0x3f
 80068e4:	d803      	bhi.n	80068ee <USBD_CDC_Setup+0xa6>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	88db      	ldrh	r3, [r3, #6]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	e000      	b.n	80068f0 <USBD_CDC_Setup+0xa8>
 80068ee:	2240      	movs	r2, #64	; 0x40
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80068f6:	6939      	ldr	r1, [r7, #16]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80068fe:	461a      	mov	r2, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fd9b 	bl	800843c <USBD_CtlPrepareRx>
      break;
 8006906:	e076      	b.n	80069f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	33b0      	adds	r3, #176	; 0xb0
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	7850      	ldrb	r0, [r2, #1]
 800691e:	2200      	movs	r2, #0
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	4798      	blx	r3
      break;
 8006924:	e067      	b.n	80069f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	2b0b      	cmp	r3, #11
 800692c:	d851      	bhi.n	80069d2 <USBD_CDC_Setup+0x18a>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <USBD_CDC_Setup+0xec>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006965 	.word	0x08006965
 8006938:	080069e1 	.word	0x080069e1
 800693c:	080069d3 	.word	0x080069d3
 8006940:	080069d3 	.word	0x080069d3
 8006944:	080069d3 	.word	0x080069d3
 8006948:	080069d3 	.word	0x080069d3
 800694c:	080069d3 	.word	0x080069d3
 8006950:	080069d3 	.word	0x080069d3
 8006954:	080069d3 	.word	0x080069d3
 8006958:	080069d3 	.word	0x080069d3
 800695c:	0800698f 	.word	0x0800698f
 8006960:	080069b9 	.word	0x080069b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b03      	cmp	r3, #3
 800696e:	d107      	bne.n	8006980 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006970:	f107 030a 	add.w	r3, r7, #10
 8006974:	2202      	movs	r2, #2
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fd33 	bl	80083e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800697e:	e032      	b.n	80069e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 fcbd 	bl	8008302 <USBD_CtlError>
            ret = USBD_FAIL;
 8006988:	2303      	movs	r3, #3
 800698a:	75fb      	strb	r3, [r7, #23]
          break;
 800698c:	e02b      	b.n	80069e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b03      	cmp	r3, #3
 8006998:	d107      	bne.n	80069aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800699a:	f107 030d 	add.w	r3, r7, #13
 800699e:	2201      	movs	r2, #1
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f001 fd1e 	bl	80083e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069a8:	e01d      	b.n	80069e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 fca8 	bl	8008302 <USBD_CtlError>
            ret = USBD_FAIL;
 80069b2:	2303      	movs	r3, #3
 80069b4:	75fb      	strb	r3, [r7, #23]
          break;
 80069b6:	e016      	b.n	80069e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d00f      	beq.n	80069e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fc9b 	bl	8008302 <USBD_CtlError>
            ret = USBD_FAIL;
 80069cc:	2303      	movs	r3, #3
 80069ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069d0:	e008      	b.n	80069e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fc94 	bl	8008302 <USBD_CtlError>
          ret = USBD_FAIL;
 80069da:	2303      	movs	r3, #3
 80069dc:	75fb      	strb	r3, [r7, #23]
          break;
 80069de:	e002      	b.n	80069e6 <USBD_CDC_Setup+0x19e>
          break;
 80069e0:	bf00      	nop
 80069e2:	e008      	b.n	80069f6 <USBD_CDC_Setup+0x1ae>
          break;
 80069e4:	bf00      	nop
      }
      break;
 80069e6:	e006      	b.n	80069f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fc89 	bl	8008302 <USBD_CtlError>
      ret = USBD_FAIL;
 80069f0:	2303      	movs	r3, #3
 80069f2:	75fb      	strb	r3, [r7, #23]
      break;
 80069f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	32b0      	adds	r2, #176	; 0xb0
 8006a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e065      	b.n	8006af6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	32b0      	adds	r2, #176	; 0xb0
 8006a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	f003 020f 	and.w	r2, r3, #15
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	3318      	adds	r3, #24
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d02f      	beq.n	8006ab4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	f003 020f 	and.w	r2, r3, #15
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	3318      	adds	r3, #24
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	f003 010f 	and.w	r1, r3, #15
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	460b      	mov	r3, r1
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	440b      	add	r3, r1
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4403      	add	r3, r0
 8006a7c:	3348      	adds	r3, #72	; 0x48
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d112      	bne.n	8006ab4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	f003 020f 	and.w	r2, r3, #15
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	3318      	adds	r3, #24
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006aa6:	78f9      	ldrb	r1, [r7, #3]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2200      	movs	r2, #0
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f002 f990 	bl	8008dd2 <USBD_LL_Transmit>
 8006ab2:	e01f      	b.n	8006af4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	33b0      	adds	r3, #176	; 0xb0
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d010      	beq.n	8006af4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	33b0      	adds	r3, #176	; 0xb0
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	32b0      	adds	r2, #176	; 0xb0
 8006b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	32b0      	adds	r2, #176	; 0xb0
 8006b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e01a      	b.n	8006b66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f002 f98e 	bl	8008e56 <USBD_LL_GetRxDataSize>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	33b0      	adds	r3, #176	; 0xb0
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b60:	4611      	mov	r1, r2
 8006b62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	32b0      	adds	r2, #176	; 0xb0
 8006b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e025      	b.n	8006bdc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	33b0      	adds	r3, #176	; 0xb0
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01a      	beq.n	8006bda <USBD_CDC_EP0_RxReady+0x6c>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006baa:	2bff      	cmp	r3, #255	; 0xff
 8006bac:	d015      	beq.n	8006bda <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	33b0      	adds	r3, #176	; 0xb0
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006bc6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bce:	b292      	uxth	r2, r2
 8006bd0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	22ff      	movs	r2, #255	; 0xff
 8006bd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bec:	2182      	movs	r1, #130	; 0x82
 8006bee:	4818      	ldr	r0, [pc, #96]	; (8006c50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bf0:	f000 fd4f 	bl	8007692 <USBD_GetEpDesc>
 8006bf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	4815      	ldr	r0, [pc, #84]	; (8006c50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bfa:	f000 fd4a 	bl	8007692 <USBD_GetEpDesc>
 8006bfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c00:	2181      	movs	r1, #129	; 0x81
 8006c02:	4813      	ldr	r0, [pc, #76]	; (8006c50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c04:	f000 fd45 	bl	8007692 <USBD_GetEpDesc>
 8006c08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2210      	movs	r2, #16
 8006c14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d006      	beq.n	8006c2a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c24:	711a      	strb	r2, [r3, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d006      	beq.n	8006c3e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c38:	711a      	strb	r2, [r3, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2243      	movs	r2, #67	; 0x43
 8006c42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c44:	4b02      	ldr	r3, [pc, #8]	; (8006c50 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200000ec 	.word	0x200000ec

08006c54 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c5c:	2182      	movs	r1, #130	; 0x82
 8006c5e:	4818      	ldr	r0, [pc, #96]	; (8006cc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c60:	f000 fd17 	bl	8007692 <USBD_GetEpDesc>
 8006c64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c66:	2101      	movs	r1, #1
 8006c68:	4815      	ldr	r0, [pc, #84]	; (8006cc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c6a:	f000 fd12 	bl	8007692 <USBD_GetEpDesc>
 8006c6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c70:	2181      	movs	r1, #129	; 0x81
 8006c72:	4813      	ldr	r0, [pc, #76]	; (8006cc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c74:	f000 fd0d 	bl	8007692 <USBD_GetEpDesc>
 8006c78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2210      	movs	r2, #16
 8006c84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d006      	beq.n	8006c9a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	711a      	strb	r2, [r3, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f042 0202 	orr.w	r2, r2, #2
 8006c98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d006      	beq.n	8006cae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	711a      	strb	r2, [r3, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f042 0202 	orr.w	r2, r2, #2
 8006cac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2243      	movs	r2, #67	; 0x43
 8006cb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cb4:	4b02      	ldr	r3, [pc, #8]	; (8006cc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200000ec 	.word	0x200000ec

08006cc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ccc:	2182      	movs	r1, #130	; 0x82
 8006cce:	4818      	ldr	r0, [pc, #96]	; (8006d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cd0:	f000 fcdf 	bl	8007692 <USBD_GetEpDesc>
 8006cd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	4815      	ldr	r0, [pc, #84]	; (8006d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cda:	f000 fcda 	bl	8007692 <USBD_GetEpDesc>
 8006cde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ce0:	2181      	movs	r1, #129	; 0x81
 8006ce2:	4813      	ldr	r0, [pc, #76]	; (8006d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ce4:	f000 fcd5 	bl	8007692 <USBD_GetEpDesc>
 8006ce8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2210      	movs	r2, #16
 8006cf4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d006      	beq.n	8006d0a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d04:	711a      	strb	r2, [r3, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d006      	beq.n	8006d1e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d18:	711a      	strb	r2, [r3, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2243      	movs	r2, #67	; 0x43
 8006d22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d24:	4b02      	ldr	r3, [pc, #8]	; (8006d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200000ec 	.word	0x200000ec

08006d34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	220a      	movs	r2, #10
 8006d40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d42:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	200000a8 	.word	0x200000a8

08006d54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e009      	b.n	8006d7c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	33b0      	adds	r3, #176	; 0xb0
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	32b0      	adds	r2, #176	; 0xb0
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e008      	b.n	8006dc0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	32b0      	adds	r2, #176	; 0xb0
 8006de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e004      	b.n	8006dfa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32b0      	adds	r2, #176	; 0xb0
 8006e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	32b0      	adds	r2, #176	; 0xb0
 8006e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e025      	b.n	8006e86 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d11f      	bne.n	8006e84 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e4c:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <USBD_CDC_TransmitPacket+0x88>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4403      	add	r3, r0
 8006e66:	3318      	adds	r3, #24
 8006e68:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e6a:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <USBD_CDC_TransmitPacket+0x88>)
 8006e6c:	7819      	ldrb	r1, [r3, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 ffa9 	bl	8008dd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	2000012f 	.word	0x2000012f

08006e94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	32b0      	adds	r2, #176	; 0xb0
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32b0      	adds	r2, #176	; 0xb0
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e018      	b.n	8006ef4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	7c1b      	ldrb	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <USBD_CDC_ReceivePacket+0x68>)
 8006ecc:	7819      	ldrb	r1, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 ff9b 	bl	8008e14 <USBD_LL_PrepareReceive>
 8006ede:	e008      	b.n	8006ef2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <USBD_CDC_ReceivePacket+0x68>)
 8006ee2:	7819      	ldrb	r1, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eea:	2340      	movs	r3, #64	; 0x40
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 ff91 	bl	8008e14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20000130 	.word	0x20000130

08006f00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e01f      	b.n	8006f58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	79fa      	ldrb	r2, [r7, #7]
 8006f4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f001 fe0b 	bl	8008b68 <USBD_LL_Init>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e025      	b.n	8006fc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	32ae      	adds	r2, #174	; 0xae
 8006f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00f      	beq.n	8006fb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	32ae      	adds	r2, #174	; 0xae
 8006f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	f107 020e 	add.w	r2, r7, #14
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
 8006fac:	4602      	mov	r2, r0
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 fe13 	bl	8008c00 <USBD_LL_Start>
 8006fda:	4603      	mov	r3, r0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d009      	beq.n	8007028 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	4611      	mov	r1, r2
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
 8007024:	4603      	mov	r3, r0
 8007026:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	4611      	mov	r1, r2
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007058:	2303      	movs	r3, #3
 800705a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	4618      	mov	r0, r3
 800707a:	f001 f908 	bl	800828e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800708c:	461a      	mov	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800709a:	f003 031f 	and.w	r3, r3, #31
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d01a      	beq.n	80070d8 <USBD_LL_SetupStage+0x72>
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d822      	bhi.n	80070ec <USBD_LL_SetupStage+0x86>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <USBD_LL_SetupStage+0x4a>
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d00a      	beq.n	80070c4 <USBD_LL_SetupStage+0x5e>
 80070ae:	e01d      	b.n	80070ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fb5f 	bl	800777c <USBD_StdDevReq>
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]
      break;
 80070c2:	e020      	b.n	8007106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fbc7 	bl	8007860 <USBD_StdItfReq>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
      break;
 80070d6:	e016      	b.n	8007106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fc29 	bl	8007938 <USBD_StdEPReq>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ea:	e00c      	b.n	8007106 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fde0 	bl	8008cc0 <USBD_LL_StallEP>
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]
      break;
 8007104:	bf00      	nop
  }

  return ret;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	460b      	mov	r3, r1
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d16e      	bne.n	8007206 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800712e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007136:	2b03      	cmp	r3, #3
 8007138:	f040 8098 	bne.w	800726c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	429a      	cmp	r2, r3
 8007146:	d913      	bls.n	8007170 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	1ad2      	subs	r2, r2, r3
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	4293      	cmp	r3, r2
 8007160:	bf28      	it	cs
 8007162:	4613      	movcs	r3, r2
 8007164:	461a      	mov	r2, r3
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f001 f984 	bl	8008476 <USBD_CtlContinueRx>
 800716e:	e07d      	b.n	800726c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007176:	f003 031f 	and.w	r3, r3, #31
 800717a:	2b02      	cmp	r3, #2
 800717c:	d014      	beq.n	80071a8 <USBD_LL_DataOutStage+0x98>
 800717e:	2b02      	cmp	r3, #2
 8007180:	d81d      	bhi.n	80071be <USBD_LL_DataOutStage+0xae>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <USBD_LL_DataOutStage+0x7c>
 8007186:	2b01      	cmp	r3, #1
 8007188:	d003      	beq.n	8007192 <USBD_LL_DataOutStage+0x82>
 800718a:	e018      	b.n	80071be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	75bb      	strb	r3, [r7, #22]
            break;
 8007190:	e018      	b.n	80071c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007198:	b2db      	uxtb	r3, r3
 800719a:	4619      	mov	r1, r3
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 fa5e 	bl	800765e <USBD_CoreFindIF>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75bb      	strb	r3, [r7, #22]
            break;
 80071a6:	e00d      	b.n	80071c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	4619      	mov	r1, r3
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fa60 	bl	8007678 <USBD_CoreFindEP>
 80071b8:	4603      	mov	r3, r0
 80071ba:	75bb      	strb	r3, [r7, #22]
            break;
 80071bc:	e002      	b.n	80071c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	75bb      	strb	r3, [r7, #22]
            break;
 80071c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071c4:	7dbb      	ldrb	r3, [r7, #22]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d119      	bne.n	80071fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d113      	bne.n	80071fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071d6:	7dba      	ldrb	r2, [r7, #22]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	32ae      	adds	r2, #174	; 0xae
 80071dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80071e6:	7dba      	ldrb	r2, [r7, #22]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071ee:	7dba      	ldrb	r2, [r7, #22]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	32ae      	adds	r2, #174	; 0xae
 80071f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f001 f94a 	bl	8008498 <USBD_CtlSendStatus>
 8007204:	e032      	b.n	800726c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007206:	7afb      	ldrb	r3, [r7, #11]
 8007208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720c:	b2db      	uxtb	r3, r3
 800720e:	4619      	mov	r1, r3
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fa31 	bl	8007678 <USBD_CoreFindEP>
 8007216:	4603      	mov	r3, r0
 8007218:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800721a:	7dbb      	ldrb	r3, [r7, #22]
 800721c:	2bff      	cmp	r3, #255	; 0xff
 800721e:	d025      	beq.n	800726c <USBD_LL_DataOutStage+0x15c>
 8007220:	7dbb      	ldrb	r3, [r7, #22]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d122      	bne.n	800726c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b03      	cmp	r3, #3
 8007230:	d117      	bne.n	8007262 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007232:	7dba      	ldrb	r2, [r7, #22]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	32ae      	adds	r2, #174	; 0xae
 8007238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00f      	beq.n	8007262 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007242:	7dba      	ldrb	r2, [r7, #22]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800724a:	7dba      	ldrb	r2, [r7, #22]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	32ae      	adds	r2, #174	; 0xae
 8007250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	7afa      	ldrb	r2, [r7, #11]
 8007258:	4611      	mov	r1, r2
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	4798      	blx	r3
 800725e:	4603      	mov	r3, r0
 8007260:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	e000      	b.n	800726e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b086      	sub	sp, #24
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	460b      	mov	r3, r1
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007284:	7afb      	ldrb	r3, [r7, #11]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d16f      	bne.n	800736a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3314      	adds	r3, #20
 800728e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007296:	2b02      	cmp	r3, #2
 8007298:	d15a      	bne.n	8007350 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d914      	bls.n	80072d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	461a      	mov	r2, r3
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f001 f8ac 	bl	800841a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072c2:	2300      	movs	r3, #0
 80072c4:	2200      	movs	r2, #0
 80072c6:	2100      	movs	r1, #0
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f001 fda3 	bl	8008e14 <USBD_LL_PrepareReceive>
 80072ce:	e03f      	b.n	8007350 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d11c      	bne.n	8007316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d316      	bcc.n	8007316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d20f      	bcs.n	8007316 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072f6:	2200      	movs	r2, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f001 f88d 	bl	800841a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007308:	2300      	movs	r3, #0
 800730a:	2200      	movs	r2, #0
 800730c:	2100      	movs	r1, #0
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f001 fd80 	bl	8008e14 <USBD_LL_PrepareReceive>
 8007314:	e01c      	b.n	8007350 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d10f      	bne.n	8007342 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007342:	2180      	movs	r1, #128	; 0x80
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 fcbb 	bl	8008cc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f001 f8b7 	bl	80084be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d03a      	beq.n	80073d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fe42 	bl	8006fe4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007368:	e032      	b.n	80073d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007370:	b2db      	uxtb	r3, r3
 8007372:	4619      	mov	r1, r3
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f97f 	bl	8007678 <USBD_CoreFindEP>
 800737a:	4603      	mov	r3, r0
 800737c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	2bff      	cmp	r3, #255	; 0xff
 8007382:	d025      	beq.n	80073d0 <USBD_LL_DataInStage+0x15a>
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d122      	bne.n	80073d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b03      	cmp	r3, #3
 8007394:	d11c      	bne.n	80073d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007396:	7dfa      	ldrb	r2, [r7, #23]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	32ae      	adds	r2, #174	; 0xae
 800739c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d014      	beq.n	80073d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073a6:	7dfa      	ldrb	r2, [r7, #23]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073ae:	7dfa      	ldrb	r2, [r7, #23]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	32ae      	adds	r2, #174	; 0xae
 80073b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	7afa      	ldrb	r2, [r7, #11]
 80073bc:	4611      	mov	r1, r2
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	4798      	blx	r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073c6:	7dbb      	ldrb	r3, [r7, #22]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073cc:	7dbb      	ldrb	r3, [r7, #22]
 80073ce:	e000      	b.n	80073d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007412:	2b00      	cmp	r3, #0
 8007414:	d014      	beq.n	8007440 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00e      	beq.n	8007440 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6852      	ldr	r2, [r2, #4]
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	4611      	mov	r1, r2
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800743c:	2303      	movs	r3, #3
 800743e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007440:	2340      	movs	r3, #64	; 0x40
 8007442:	2200      	movs	r2, #0
 8007444:	2100      	movs	r1, #0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 fbf5 	bl	8008c36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2240      	movs	r2, #64	; 0x40
 8007458:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	2200      	movs	r2, #0
 8007460:	2180      	movs	r1, #128	; 0x80
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 fbe7 	bl	8008c36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2240      	movs	r2, #64	; 0x40
 8007472:	621a      	str	r2, [r3, #32]

  return ret;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	78fa      	ldrb	r2, [r7, #3]
 800748e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2204      	movs	r2, #4
 80074b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d106      	bne.n	80074ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b03      	cmp	r3, #3
 800750c:	d110      	bne.n	8007530 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00b      	beq.n	8007530 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	32ae      	adds	r2, #174	; 0xae
 8007550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007558:	2303      	movs	r3, #3
 800755a:	e01c      	b.n	8007596 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b03      	cmp	r3, #3
 8007566:	d115      	bne.n	8007594 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	32ae      	adds	r2, #174	; 0xae
 8007572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	32ae      	adds	r2, #174	; 0xae
 8007586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	78fa      	ldrb	r2, [r7, #3]
 800758e:	4611      	mov	r1, r2
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	32ae      	adds	r2, #174	; 0xae
 80075b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075bc:	2303      	movs	r3, #3
 80075be:	e01c      	b.n	80075fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d115      	bne.n	80075f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	32ae      	adds	r2, #174	; 0xae
 80075d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32ae      	adds	r2, #174	; 0xae
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	78fa      	ldrb	r2, [r7, #3]
 80075f2:	4611      	mov	r1, r2
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00e      	beq.n	8007654 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6852      	ldr	r2, [r2, #4]
 8007642:	b2d2      	uxtb	r2, r2
 8007644:	4611      	mov	r1, r2
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007650:	2303      	movs	r3, #3
 8007652:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800766a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007684:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b086      	sub	sp, #24
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	885b      	ldrh	r3, [r3, #2]
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d920      	bls.n	80076fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076c2:	e013      	b.n	80076ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076c4:	f107 030a 	add.w	r3, r7, #10
 80076c8:	4619      	mov	r1, r3
 80076ca:	6978      	ldr	r0, [r7, #20]
 80076cc:	f000 f81b 	bl	8007706 <USBD_GetNextDesc>
 80076d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	2b05      	cmp	r3, #5
 80076d8:	d108      	bne.n	80076ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	789b      	ldrb	r3, [r3, #2]
 80076e2:	78fa      	ldrb	r2, [r7, #3]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d008      	beq.n	80076fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	885b      	ldrh	r3, [r3, #2]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	897b      	ldrh	r3, [r7, #10]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d8e5      	bhi.n	80076c4 <USBD_GetEpDesc+0x32>
 80076f8:	e000      	b.n	80076fc <USBD_GetEpDesc+0x6a>
          break;
 80076fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80076fc:	693b      	ldr	r3, [r7, #16]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	881a      	ldrh	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	4413      	add	r3, r2
 8007720:	b29a      	uxth	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4413      	add	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007732:	68fb      	ldr	r3, [r7, #12]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	3301      	adds	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800775e:	8a3b      	ldrh	r3, [r7, #16]
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	b21a      	sxth	r2, r3
 8007764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007768:	4313      	orrs	r3, r2
 800776a:	b21b      	sxth	r3, r3
 800776c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800776e:	89fb      	ldrh	r3, [r7, #14]
}
 8007770:	4618      	mov	r0, r3
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007792:	2b40      	cmp	r3, #64	; 0x40
 8007794:	d005      	beq.n	80077a2 <USBD_StdDevReq+0x26>
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d857      	bhi.n	800784a <USBD_StdDevReq+0xce>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00f      	beq.n	80077be <USBD_StdDevReq+0x42>
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d153      	bne.n	800784a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	32ae      	adds	r2, #174	; 0xae
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
      break;
 80077bc:	e04a      	b.n	8007854 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	785b      	ldrb	r3, [r3, #1]
 80077c2:	2b09      	cmp	r3, #9
 80077c4:	d83b      	bhi.n	800783e <USBD_StdDevReq+0xc2>
 80077c6:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <USBD_StdDevReq+0x50>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	08007821 	.word	0x08007821
 80077d0:	08007835 	.word	0x08007835
 80077d4:	0800783f 	.word	0x0800783f
 80077d8:	0800782b 	.word	0x0800782b
 80077dc:	0800783f 	.word	0x0800783f
 80077e0:	080077ff 	.word	0x080077ff
 80077e4:	080077f5 	.word	0x080077f5
 80077e8:	0800783f 	.word	0x0800783f
 80077ec:	08007817 	.word	0x08007817
 80077f0:	08007809 	.word	0x08007809
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa3c 	bl	8007c74 <USBD_GetDescriptor>
          break;
 80077fc:	e024      	b.n	8007848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fba1 	bl	8007f48 <USBD_SetAddress>
          break;
 8007806:	e01f      	b.n	8007848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fbe0 	bl	8007fd0 <USBD_SetConfig>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]
          break;
 8007814:	e018      	b.n	8007848 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fc83 	bl	8008124 <USBD_GetConfig>
          break;
 800781e:	e013      	b.n	8007848 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fcb4 	bl	8008190 <USBD_GetStatus>
          break;
 8007828:	e00e      	b.n	8007848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fce3 	bl	80081f8 <USBD_SetFeature>
          break;
 8007832:	e009      	b.n	8007848 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fd07 	bl	800824a <USBD_ClrFeature>
          break;
 800783c:	e004      	b.n	8007848 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fd5e 	bl	8008302 <USBD_CtlError>
          break;
 8007846:	bf00      	nop
      }
      break;
 8007848:	e004      	b.n	8007854 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fd58 	bl	8008302 <USBD_CtlError>
      break;
 8007852:	bf00      	nop
  }

  return ret;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop

08007860 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007876:	2b40      	cmp	r3, #64	; 0x40
 8007878:	d005      	beq.n	8007886 <USBD_StdItfReq+0x26>
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d852      	bhi.n	8007924 <USBD_StdItfReq+0xc4>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <USBD_StdItfReq+0x26>
 8007882:	2b20      	cmp	r3, #32
 8007884:	d14e      	bne.n	8007924 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	2b02      	cmp	r3, #2
 8007892:	d840      	bhi.n	8007916 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	889b      	ldrh	r3, [r3, #4]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b01      	cmp	r3, #1
 800789c:	d836      	bhi.n	800790c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	889b      	ldrh	r3, [r3, #4]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff fed9 	bl	800765e <USBD_CoreFindIF>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2bff      	cmp	r3, #255	; 0xff
 80078b4:	d01d      	beq.n	80078f2 <USBD_StdItfReq+0x92>
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d11a      	bne.n	80078f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078bc:	7bba      	ldrb	r2, [r7, #14]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	32ae      	adds	r2, #174	; 0xae
 80078c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00f      	beq.n	80078ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078cc:	7bba      	ldrb	r2, [r7, #14]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078d4:	7bba      	ldrb	r2, [r7, #14]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	32ae      	adds	r2, #174	; 0xae
 80078da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	4798      	blx	r3
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078ea:	e004      	b.n	80078f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078ec:	2303      	movs	r3, #3
 80078ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078f0:	e001      	b.n	80078f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078f2:	2303      	movs	r3, #3
 80078f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	88db      	ldrh	r3, [r3, #6]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d110      	bne.n	8007920 <USBD_StdItfReq+0xc0>
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10d      	bne.n	8007920 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fdc7 	bl	8008498 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800790a:	e009      	b.n	8007920 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fcf7 	bl	8008302 <USBD_CtlError>
          break;
 8007914:	e004      	b.n	8007920 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fcf2 	bl	8008302 <USBD_CtlError>
          break;
 800791e:	e000      	b.n	8007922 <USBD_StdItfReq+0xc2>
          break;
 8007920:	bf00      	nop
      }
      break;
 8007922:	e004      	b.n	800792e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fceb 	bl	8008302 <USBD_CtlError>
      break;
 800792c:	bf00      	nop
  }

  return ret;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	889b      	ldrh	r3, [r3, #4]
 800794a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007954:	2b40      	cmp	r3, #64	; 0x40
 8007956:	d007      	beq.n	8007968 <USBD_StdEPReq+0x30>
 8007958:	2b40      	cmp	r3, #64	; 0x40
 800795a:	f200 817f 	bhi.w	8007c5c <USBD_StdEPReq+0x324>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d02a      	beq.n	80079b8 <USBD_StdEPReq+0x80>
 8007962:	2b20      	cmp	r3, #32
 8007964:	f040 817a 	bne.w	8007c5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff fe83 	bl	8007678 <USBD_CoreFindEP>
 8007972:	4603      	mov	r3, r0
 8007974:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007976:	7b7b      	ldrb	r3, [r7, #13]
 8007978:	2bff      	cmp	r3, #255	; 0xff
 800797a:	f000 8174 	beq.w	8007c66 <USBD_StdEPReq+0x32e>
 800797e:	7b7b      	ldrb	r3, [r7, #13]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 8170 	bne.w	8007c66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007986:	7b7a      	ldrb	r2, [r7, #13]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800798e:	7b7a      	ldrb	r2, [r7, #13]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	32ae      	adds	r2, #174	; 0xae
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8163 	beq.w	8007c66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079a0:	7b7a      	ldrb	r2, [r7, #13]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	32ae      	adds	r2, #174	; 0xae
 80079a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079b6:	e156      	b.n	8007c66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d008      	beq.n	80079d2 <USBD_StdEPReq+0x9a>
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	f300 8145 	bgt.w	8007c50 <USBD_StdEPReq+0x318>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 809b 	beq.w	8007b02 <USBD_StdEPReq+0x1ca>
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d03c      	beq.n	8007a4a <USBD_StdEPReq+0x112>
 80079d0:	e13e      	b.n	8007c50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d002      	beq.n	80079e4 <USBD_StdEPReq+0xac>
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d016      	beq.n	8007a10 <USBD_StdEPReq+0xd8>
 80079e2:	e02c      	b.n	8007a3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00d      	beq.n	8007a06 <USBD_StdEPReq+0xce>
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	2b80      	cmp	r3, #128	; 0x80
 80079ee:	d00a      	beq.n	8007a06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f963 	bl	8008cc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079fa:	2180      	movs	r1, #128	; 0x80
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 f95f 	bl	8008cc0 <USBD_LL_StallEP>
 8007a02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a04:	e020      	b.n	8007a48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fc7a 	bl	8008302 <USBD_CtlError>
              break;
 8007a0e:	e01b      	b.n	8007a48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	885b      	ldrh	r3, [r3, #2]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10e      	bne.n	8007a36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00b      	beq.n	8007a36 <USBD_StdEPReq+0xfe>
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b80      	cmp	r3, #128	; 0x80
 8007a22:	d008      	beq.n	8007a36 <USBD_StdEPReq+0xfe>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	88db      	ldrh	r3, [r3, #6]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f945 	bl	8008cc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fd2e 	bl	8008498 <USBD_CtlSendStatus>

              break;
 8007a3c:	e004      	b.n	8007a48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fc5e 	bl	8008302 <USBD_CtlError>
              break;
 8007a46:	bf00      	nop
          }
          break;
 8007a48:	e107      	b.n	8007c5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d002      	beq.n	8007a5c <USBD_StdEPReq+0x124>
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d016      	beq.n	8007a88 <USBD_StdEPReq+0x150>
 8007a5a:	e04b      	b.n	8007af4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00d      	beq.n	8007a7e <USBD_StdEPReq+0x146>
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b80      	cmp	r3, #128	; 0x80
 8007a66:	d00a      	beq.n	8007a7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 f927 	bl	8008cc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a72:	2180      	movs	r1, #128	; 0x80
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f923 	bl	8008cc0 <USBD_LL_StallEP>
 8007a7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a7c:	e040      	b.n	8007b00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc3e 	bl	8008302 <USBD_CtlError>
              break;
 8007a86:	e03b      	b.n	8007b00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	885b      	ldrh	r3, [r3, #2]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d136      	bne.n	8007afe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 f92d 	bl	8008cfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fcf7 	bl	8008498 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff fde2 	bl	8007678 <USBD_CoreFindEP>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ab8:	7b7b      	ldrb	r3, [r7, #13]
 8007aba:	2bff      	cmp	r3, #255	; 0xff
 8007abc:	d01f      	beq.n	8007afe <USBD_StdEPReq+0x1c6>
 8007abe:	7b7b      	ldrb	r3, [r7, #13]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d11c      	bne.n	8007afe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ac4:	7b7a      	ldrb	r2, [r7, #13]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007acc:	7b7a      	ldrb	r2, [r7, #13]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	32ae      	adds	r2, #174	; 0xae
 8007ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d010      	beq.n	8007afe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007adc:	7b7a      	ldrb	r2, [r7, #13]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32ae      	adds	r2, #174	; 0xae
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	4798      	blx	r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007af2:	e004      	b.n	8007afe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fc03 	bl	8008302 <USBD_CtlError>
              break;
 8007afc:	e000      	b.n	8007b00 <USBD_StdEPReq+0x1c8>
              break;
 8007afe:	bf00      	nop
          }
          break;
 8007b00:	e0ab      	b.n	8007c5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d002      	beq.n	8007b14 <USBD_StdEPReq+0x1dc>
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d032      	beq.n	8007b78 <USBD_StdEPReq+0x240>
 8007b12:	e097      	b.n	8007c44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <USBD_StdEPReq+0x1f2>
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b80      	cmp	r3, #128	; 0x80
 8007b1e:	d004      	beq.n	8007b2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fbed 	bl	8008302 <USBD_CtlError>
                break;
 8007b28:	e091      	b.n	8007c4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da0b      	bge.n	8007b4a <USBD_StdEPReq+0x212>
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	3310      	adds	r3, #16
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	4413      	add	r3, r2
 8007b46:	3304      	adds	r3, #4
 8007b48:	e00b      	b.n	8007b62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	4413      	add	r3, r2
 8007b60:	3304      	adds	r3, #4
 8007b62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fc37 	bl	80083e4 <USBD_CtlSendData>
              break;
 8007b76:	e06a      	b.n	8007c4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	da11      	bge.n	8007ba4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	f003 020f 	and.w	r2, r3, #15
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	3324      	adds	r3, #36	; 0x24
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d117      	bne.n	8007bca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fbb0 	bl	8008302 <USBD_CtlError>
                  break;
 8007ba2:	e054      	b.n	8007c4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	f003 020f 	and.w	r2, r3, #15
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fb9d 	bl	8008302 <USBD_CtlError>
                  break;
 8007bc8:	e041      	b.n	8007c4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da0b      	bge.n	8007bea <USBD_StdEPReq+0x2b2>
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	3310      	adds	r3, #16
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	4413      	add	r3, r2
 8007be6:	3304      	adds	r3, #4
 8007be8:	e00b      	b.n	8007c02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	4413      	add	r3, r2
 8007c00:	3304      	adds	r3, #4
 8007c02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <USBD_StdEPReq+0x2d8>
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d103      	bne.n	8007c18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e00e      	b.n	8007c36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 f88d 	bl	8008d3c <USBD_LL_IsStallEP>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	e002      	b.n	8007c36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fbd1 	bl	80083e4 <USBD_CtlSendData>
              break;
 8007c42:	e004      	b.n	8007c4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fb5b 	bl	8008302 <USBD_CtlError>
              break;
 8007c4c:	bf00      	nop
          }
          break;
 8007c4e:	e004      	b.n	8007c5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fb55 	bl	8008302 <USBD_CtlError>
          break;
 8007c58:	bf00      	nop
      }
      break;
 8007c5a:	e005      	b.n	8007c68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fb4f 	bl	8008302 <USBD_CtlError>
      break;
 8007c64:	e000      	b.n	8007c68 <USBD_StdEPReq+0x330>
      break;
 8007c66:	bf00      	nop
  }

  return ret;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	885b      	ldrh	r3, [r3, #2]
 8007c8e:	0a1b      	lsrs	r3, r3, #8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	2b06      	cmp	r3, #6
 8007c96:	f200 8128 	bhi.w	8007eea <USBD_GetDescriptor+0x276>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <USBD_GetDescriptor+0x2c>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	08007cd5 	.word	0x08007cd5
 8007ca8:	08007d15 	.word	0x08007d15
 8007cac:	08007eeb 	.word	0x08007eeb
 8007cb0:	08007eeb 	.word	0x08007eeb
 8007cb4:	08007e8b 	.word	0x08007e8b
 8007cb8:	08007eb7 	.word	0x08007eb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7c12      	ldrb	r2, [r2, #16]
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	60f8      	str	r0, [r7, #12]
      break;
 8007cd2:	e112      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7c1b      	ldrb	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10d      	bne.n	8007cf8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	f107 0208 	add.w	r2, r7, #8
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cf6:	e100      	b.n	8007efa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	f107 0208 	add.w	r2, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	2202      	movs	r2, #2
 8007d10:	701a      	strb	r2, [r3, #0]
      break;
 8007d12:	e0f2      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	885b      	ldrh	r3, [r3, #2]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	f200 80ac 	bhi.w	8007e78 <USBD_GetDescriptor+0x204>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USBD_GetDescriptor+0xb4>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d75 	.word	0x08007d75
 8007d30:	08007da9 	.word	0x08007da9
 8007d34:	08007ddd 	.word	0x08007ddd
 8007d38:	08007e11 	.word	0x08007e11
 8007d3c:	08007e45 	.word	0x08007e45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7c12      	ldrb	r2, [r2, #16]
 8007d58:	f107 0108 	add.w	r1, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d62:	e091      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 facb 	bl	8008302 <USBD_CtlError>
            err++;
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	72fb      	strb	r3, [r7, #11]
          break;
 8007d72:	e089      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d96:	e077      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fab1 	bl	8008302 <USBD_CtlError>
            err++;
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	3301      	adds	r3, #1
 8007da4:	72fb      	strb	r3, [r7, #11]
          break;
 8007da6:	e06f      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	7c12      	ldrb	r2, [r2, #16]
 8007dc0:	f107 0108 	add.w	r1, r7, #8
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dca:	e05d      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa97 	bl	8008302 <USBD_CtlError>
            err++;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dda:	e055      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	f107 0108 	add.w	r1, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfe:	e043      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa7d 	bl	8008302 <USBD_CtlError>
            err++;
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0e:	e03b      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e32:	e029      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa63 	bl	8008302 <USBD_CtlError>
            err++;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]
          break;
 8007e42:	e021      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	7c12      	ldrb	r2, [r2, #16]
 8007e5c:	f107 0108 	add.w	r1, r7, #8
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e66:	e00f      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa49 	bl	8008302 <USBD_CtlError>
            err++;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	3301      	adds	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
          break;
 8007e76:	e007      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa41 	bl	8008302 <USBD_CtlError>
          err++;
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e86:	bf00      	nop
      }
      break;
 8007e88:	e037      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7c1b      	ldrb	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	f107 0208 	add.w	r2, r7, #8
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	4798      	blx	r3
 8007ea2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ea4:	e029      	b.n	8007efa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fa2a 	bl	8008302 <USBD_CtlError>
        err++;
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	72fb      	strb	r3, [r7, #11]
      break;
 8007eb4:	e021      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7c1b      	ldrb	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10d      	bne.n	8007eda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec6:	f107 0208 	add.w	r2, r7, #8
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4798      	blx	r3
 8007ece:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	2207      	movs	r2, #7
 8007ed6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ed8:	e00f      	b.n	8007efa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fa10 	bl	8008302 <USBD_CtlError>
        err++;
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee8:	e007      	b.n	8007efa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fa08 	bl	8008302 <USBD_CtlError>
      err++;
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef8:	bf00      	nop
  }

  if (err != 0U)
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d11e      	bne.n	8007f3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d016      	beq.n	8007f36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f08:	893b      	ldrh	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00e      	beq.n	8007f2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	88da      	ldrh	r2, [r3, #6]
 8007f12:	893b      	ldrh	r3, [r7, #8]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	bf28      	it	cs
 8007f18:	4613      	movcs	r3, r2
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f1e:	893b      	ldrh	r3, [r7, #8]
 8007f20:	461a      	mov	r2, r3
 8007f22:	68f9      	ldr	r1, [r7, #12]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa5d 	bl	80083e4 <USBD_CtlSendData>
 8007f2a:	e009      	b.n	8007f40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f9e7 	bl	8008302 <USBD_CtlError>
 8007f34:	e004      	b.n	8007f40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 faae 	bl	8008498 <USBD_CtlSendStatus>
 8007f3c:	e000      	b.n	8007f40 <USBD_GetDescriptor+0x2cc>
    return;
 8007f3e:	bf00      	nop
  }
}
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop

08007f48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	889b      	ldrh	r3, [r3, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d131      	bne.n	8007fbe <USBD_SetAddress+0x76>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	88db      	ldrh	r3, [r3, #6]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d12d      	bne.n	8007fbe <USBD_SetAddress+0x76>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	885b      	ldrh	r3, [r3, #2]
 8007f66:	2b7f      	cmp	r3, #127	; 0x7f
 8007f68:	d829      	bhi.n	8007fbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	885b      	ldrh	r3, [r3, #2]
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d104      	bne.n	8007f8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f9bc 	bl	8008302 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8a:	e01d      	b.n	8007fc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7bfa      	ldrb	r2, [r7, #15]
 8007f90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fefb 	bl	8008d94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa7a 	bl	8008498 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d004      	beq.n	8007fb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb2:	e009      	b.n	8007fc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fbc:	e004      	b.n	8007fc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f99e 	bl	8008302 <USBD_CtlError>
  }
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	885b      	ldrh	r3, [r3, #2]
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	4b4e      	ldr	r3, [pc, #312]	; (8008120 <USBD_SetConfig+0x150>)
 8007fe6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fe8:	4b4d      	ldr	r3, [pc, #308]	; (8008120 <USBD_SetConfig+0x150>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d905      	bls.n	8007ffc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f985 	bl	8008302 <USBD_CtlError>
    return USBD_FAIL;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e08c      	b.n	8008116 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d002      	beq.n	800800e <USBD_SetConfig+0x3e>
 8008008:	2b03      	cmp	r3, #3
 800800a:	d029      	beq.n	8008060 <USBD_SetConfig+0x90>
 800800c:	e075      	b.n	80080fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800800e:	4b44      	ldr	r3, [pc, #272]	; (8008120 <USBD_SetConfig+0x150>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d020      	beq.n	8008058 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008016:	4b42      	ldr	r3, [pc, #264]	; (8008120 <USBD_SetConfig+0x150>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008020:	4b3f      	ldr	r3, [pc, #252]	; (8008120 <USBD_SetConfig+0x150>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7fe ffe7 	bl	8006ffa <USBD_SetClassConfig>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d008      	beq.n	8008048 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f962 	bl	8008302 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2202      	movs	r2, #2
 8008042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008046:	e065      	b.n	8008114 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fa25 	bl	8008498 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2203      	movs	r2, #3
 8008052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008056:	e05d      	b.n	8008114 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fa1d 	bl	8008498 <USBD_CtlSendStatus>
      break;
 800805e:	e059      	b.n	8008114 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008060:	4b2f      	ldr	r3, [pc, #188]	; (8008120 <USBD_SetConfig+0x150>)
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d112      	bne.n	800808e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008070:	4b2b      	ldr	r3, [pc, #172]	; (8008120 <USBD_SetConfig+0x150>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800807a:	4b29      	ldr	r3, [pc, #164]	; (8008120 <USBD_SetConfig+0x150>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fe ffd6 	bl	8007032 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fa06 	bl	8008498 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800808c:	e042      	b.n	8008114 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800808e:	4b24      	ldr	r3, [pc, #144]	; (8008120 <USBD_SetConfig+0x150>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	429a      	cmp	r2, r3
 800809a:	d02a      	beq.n	80080f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7fe ffc4 	bl	8007032 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080aa:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <USBD_SetConfig+0x150>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080b4:	4b1a      	ldr	r3, [pc, #104]	; (8008120 <USBD_SetConfig+0x150>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fe ff9d 	bl	8006ffa <USBD_SetClassConfig>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00f      	beq.n	80080ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f918 	bl	8008302 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fe ffa9 	bl	8007032 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080e8:	e014      	b.n	8008114 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f9d4 	bl	8008498 <USBD_CtlSendStatus>
      break;
 80080f0:	e010      	b.n	8008114 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f9d0 	bl	8008498 <USBD_CtlSendStatus>
      break;
 80080f8:	e00c      	b.n	8008114 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f900 	bl	8008302 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008102:	4b07      	ldr	r3, [pc, #28]	; (8008120 <USBD_SetConfig+0x150>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fe ff92 	bl	8007032 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800810e:	2303      	movs	r3, #3
 8008110:	73fb      	strb	r3, [r7, #15]
      break;
 8008112:	bf00      	nop
  }

  return ret;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	2000041c 	.word	0x2000041c

08008124 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	88db      	ldrh	r3, [r3, #6]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d004      	beq.n	8008140 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f8e2 	bl	8008302 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800813e:	e023      	b.n	8008188 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	dc02      	bgt.n	8008152 <USBD_GetConfig+0x2e>
 800814c:	2b00      	cmp	r3, #0
 800814e:	dc03      	bgt.n	8008158 <USBD_GetConfig+0x34>
 8008150:	e015      	b.n	800817e <USBD_GetConfig+0x5a>
 8008152:	2b03      	cmp	r3, #3
 8008154:	d00b      	beq.n	800816e <USBD_GetConfig+0x4a>
 8008156:	e012      	b.n	800817e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3308      	adds	r3, #8
 8008162:	2201      	movs	r2, #1
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f93c 	bl	80083e4 <USBD_CtlSendData>
        break;
 800816c:	e00c      	b.n	8008188 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3304      	adds	r3, #4
 8008172:	2201      	movs	r2, #1
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f934 	bl	80083e4 <USBD_CtlSendData>
        break;
 800817c:	e004      	b.n	8008188 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f8be 	bl	8008302 <USBD_CtlError>
        break;
 8008186:	bf00      	nop
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d81e      	bhi.n	80081e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	88db      	ldrh	r3, [r3, #6]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d004      	beq.n	80081ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f8a5 	bl	8008302 <USBD_CtlError>
        break;
 80081b8:	e01a      	b.n	80081f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f043 0202 	orr.w	r2, r3, #2
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	330c      	adds	r3, #12
 80081da:	2202      	movs	r2, #2
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f900 	bl	80083e4 <USBD_CtlSendData>
      break;
 80081e4:	e004      	b.n	80081f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f88a 	bl	8008302 <USBD_CtlError>
      break;
 80081ee:	bf00      	nop
  }
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d107      	bne.n	800821a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f940 	bl	8008498 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008218:	e013      	b.n	8008242 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	885b      	ldrh	r3, [r3, #2]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d10b      	bne.n	800823a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	889b      	ldrh	r3, [r3, #4]
 8008226:	0a1b      	lsrs	r3, r3, #8
 8008228:	b29b      	uxth	r3, r3
 800822a:	b2da      	uxtb	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f930 	bl	8008498 <USBD_CtlSendStatus>
}
 8008238:	e003      	b.n	8008242 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f860 	bl	8008302 <USBD_CtlError>
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825a:	b2db      	uxtb	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	2b02      	cmp	r3, #2
 8008260:	d80b      	bhi.n	800827a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	885b      	ldrh	r3, [r3, #2]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d10c      	bne.n	8008284 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f910 	bl	8008498 <USBD_CtlSendStatus>
      }
      break;
 8008278:	e004      	b.n	8008284 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f840 	bl	8008302 <USBD_CtlError>
      break;
 8008282:	e000      	b.n	8008286 <USBD_ClrFeature+0x3c>
      break;
 8008284:	bf00      	nop
  }
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	3301      	adds	r3, #1
 80082a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	781a      	ldrb	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3301      	adds	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff fa41 	bl	8007740 <SWAPBYTE>
 80082be:	4603      	mov	r3, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3301      	adds	r3, #1
 80082ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3301      	adds	r3, #1
 80082d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff fa34 	bl	8007740 <SWAPBYTE>
 80082d8:	4603      	mov	r3, r0
 80082da:	461a      	mov	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3301      	adds	r3, #1
 80082ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff fa27 	bl	8007740 <SWAPBYTE>
 80082f2:	4603      	mov	r3, r0
 80082f4:	461a      	mov	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	80da      	strh	r2, [r3, #6]
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800830c:	2180      	movs	r1, #128	; 0x80
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fcd6 	bl	8008cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008314:	2100      	movs	r1, #0
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fcd2 	bl	8008cc0 <USBD_LL_StallEP>
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d036      	beq.n	80083a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800833e:	6938      	ldr	r0, [r7, #16]
 8008340:	f000 f836 	bl	80083b0 <USBD_GetLen>
 8008344:	4603      	mov	r3, r0
 8008346:	3301      	adds	r3, #1
 8008348:	b29b      	uxth	r3, r3
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	b29a      	uxth	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	4413      	add	r3, r2
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7812      	ldrb	r2, [r2, #0]
 800835c:	701a      	strb	r2, [r3, #0]
  idx++;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	3301      	adds	r3, #1
 8008362:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	4413      	add	r3, r2
 800836a:	2203      	movs	r2, #3
 800836c:	701a      	strb	r2, [r3, #0]
  idx++;
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	3301      	adds	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008374:	e013      	b.n	800839e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	4413      	add	r3, r2
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	7812      	ldrb	r2, [r2, #0]
 8008380:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	3301      	adds	r3, #1
 8008386:	613b      	str	r3, [r7, #16]
    idx++;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	3301      	adds	r3, #1
 800838c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	4413      	add	r3, r2
 8008394:	2200      	movs	r2, #0
 8008396:	701a      	strb	r2, [r3, #0]
    idx++;
 8008398:	7dfb      	ldrb	r3, [r7, #23]
 800839a:	3301      	adds	r3, #1
 800839c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e7      	bne.n	8008376 <USBD_GetString+0x52>
 80083a6:	e000      	b.n	80083aa <USBD_GetString+0x86>
    return;
 80083a8:	bf00      	nop
  }
}
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083c0:	e005      	b.n	80083ce <USBD_GetLen+0x1e>
  {
    len++;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	3301      	adds	r3, #1
 80083c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	3301      	adds	r3, #1
 80083cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f5      	bne.n	80083c2 <USBD_GetLen+0x12>
  }

  return len;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	2100      	movs	r1, #0
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 fce1 	bl	8008dd2 <USBD_LL_Transmit>

  return USBD_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	2100      	movs	r1, #0
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fcd0 	bl	8008dd2 <USBD_LL_Transmit>

  return USBD_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2203      	movs	r2, #3
 800844c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	2100      	movs	r1, #0
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 fcd4 	bl	8008e14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	2100      	movs	r1, #0
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fcc3 	bl	8008e14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2204      	movs	r2, #4
 80084a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084a8:	2300      	movs	r3, #0
 80084aa:	2200      	movs	r2, #0
 80084ac:	2100      	movs	r1, #0
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fc8f 	bl	8008dd2 <USBD_LL_Transmit>

  return USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2205      	movs	r2, #5
 80084ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ce:	2300      	movs	r3, #0
 80084d0:	2200      	movs	r2, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fc9d 	bl	8008e14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084e8:	2200      	movs	r2, #0
 80084ea:	4912      	ldr	r1, [pc, #72]	; (8008534 <MX_USB_DEVICE_Init+0x50>)
 80084ec:	4812      	ldr	r0, [pc, #72]	; (8008538 <MX_USB_DEVICE_Init+0x54>)
 80084ee:	f7fe fd07 	bl	8006f00 <USBD_Init>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084f8:	f7f8 fea6 	bl	8001248 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084fc:	490f      	ldr	r1, [pc, #60]	; (800853c <MX_USB_DEVICE_Init+0x58>)
 80084fe:	480e      	ldr	r0, [pc, #56]	; (8008538 <MX_USB_DEVICE_Init+0x54>)
 8008500:	f7fe fd2e 	bl	8006f60 <USBD_RegisterClass>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800850a:	f7f8 fe9d 	bl	8001248 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800850e:	490c      	ldr	r1, [pc, #48]	; (8008540 <MX_USB_DEVICE_Init+0x5c>)
 8008510:	4809      	ldr	r0, [pc, #36]	; (8008538 <MX_USB_DEVICE_Init+0x54>)
 8008512:	f7fe fc1f 	bl	8006d54 <USBD_CDC_RegisterInterface>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800851c:	f7f8 fe94 	bl	8001248 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008520:	4805      	ldr	r0, [pc, #20]	; (8008538 <MX_USB_DEVICE_Init+0x54>)
 8008522:	f7fe fd53 	bl	8006fcc <USBD_Start>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800852c:	f7f8 fe8c 	bl	8001248 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008530:	bf00      	nop
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20000148 	.word	0x20000148
 8008538:	20000420 	.word	0x20000420
 800853c:	200000b4 	.word	0x200000b4
 8008540:	20000134 	.word	0x20000134

08008544 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008548:	2200      	movs	r2, #0
 800854a:	4905      	ldr	r1, [pc, #20]	; (8008560 <CDC_Init_FS+0x1c>)
 800854c:	4805      	ldr	r0, [pc, #20]	; (8008564 <CDC_Init_FS+0x20>)
 800854e:	f7fe fc1b 	bl	8006d88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008552:	4905      	ldr	r1, [pc, #20]	; (8008568 <CDC_Init_FS+0x24>)
 8008554:	4803      	ldr	r0, [pc, #12]	; (8008564 <CDC_Init_FS+0x20>)
 8008556:	f7fe fc39 	bl	8006dcc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800855a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800855c:	4618      	mov	r0, r3
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20000afc 	.word	0x20000afc
 8008564:	20000420 	.word	0x20000420
 8008568:	200006fc 	.word	0x200006fc

0800856c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008570:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008572:	4618      	mov	r0, r3
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	6039      	str	r1, [r7, #0]
 8008586:	71fb      	strb	r3, [r7, #7]
 8008588:	4613      	mov	r3, r2
 800858a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2b23      	cmp	r3, #35	; 0x23
 8008590:	d84a      	bhi.n	8008628 <CDC_Control_FS+0xac>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <CDC_Control_FS+0x1c>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	08008629 	.word	0x08008629
 800859c:	08008629 	.word	0x08008629
 80085a0:	08008629 	.word	0x08008629
 80085a4:	08008629 	.word	0x08008629
 80085a8:	08008629 	.word	0x08008629
 80085ac:	08008629 	.word	0x08008629
 80085b0:	08008629 	.word	0x08008629
 80085b4:	08008629 	.word	0x08008629
 80085b8:	08008629 	.word	0x08008629
 80085bc:	08008629 	.word	0x08008629
 80085c0:	08008629 	.word	0x08008629
 80085c4:	08008629 	.word	0x08008629
 80085c8:	08008629 	.word	0x08008629
 80085cc:	08008629 	.word	0x08008629
 80085d0:	08008629 	.word	0x08008629
 80085d4:	08008629 	.word	0x08008629
 80085d8:	08008629 	.word	0x08008629
 80085dc:	08008629 	.word	0x08008629
 80085e0:	08008629 	.word	0x08008629
 80085e4:	08008629 	.word	0x08008629
 80085e8:	08008629 	.word	0x08008629
 80085ec:	08008629 	.word	0x08008629
 80085f0:	08008629 	.word	0x08008629
 80085f4:	08008629 	.word	0x08008629
 80085f8:	08008629 	.word	0x08008629
 80085fc:	08008629 	.word	0x08008629
 8008600:	08008629 	.word	0x08008629
 8008604:	08008629 	.word	0x08008629
 8008608:	08008629 	.word	0x08008629
 800860c:	08008629 	.word	0x08008629
 8008610:	08008629 	.word	0x08008629
 8008614:	08008629 	.word	0x08008629
 8008618:	08008629 	.word	0x08008629
 800861c:	08008629 	.word	0x08008629
 8008620:	08008629 	.word	0x08008629
 8008624:	08008629 	.word	0x08008629
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008628:	bf00      	nop
  }

  return (USBD_OK);
 800862a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4805      	ldr	r0, [pc, #20]	; (800865c <CDC_Receive_FS+0x24>)
 8008646:	f7fe fbc1 	bl	8006dcc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800864a:	4804      	ldr	r0, [pc, #16]	; (800865c <CDC_Receive_FS+0x24>)
 800864c:	f7fe fc22 	bl	8006e94 <USBD_CDC_ReceivePacket>
 // memset (buffer, '\0', 64);  // clear the buffer
 // uint8_t len = (uint8_t)*Len;
 // memcpy(buffer, Buf, len);  // copy the data to the buffer
 // memset(Buf, '\0', len);   // clear the Buf also

  return (USBD_OK);
 8008650:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000420 	.word	0x20000420

08008660 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008670:	4b0d      	ldr	r3, [pc, #52]	; (80086a8 <CDC_Transmit_FS+0x48>)
 8008672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008676:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008682:	2301      	movs	r3, #1
 8008684:	e00b      	b.n	800869e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008686:	887b      	ldrh	r3, [r7, #2]
 8008688:	461a      	mov	r2, r3
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4806      	ldr	r0, [pc, #24]	; (80086a8 <CDC_Transmit_FS+0x48>)
 800868e:	f7fe fb7b 	bl	8006d88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008692:	4805      	ldr	r0, [pc, #20]	; (80086a8 <CDC_Transmit_FS+0x48>)
 8008694:	f7fe fbb8 	bl	8006e08 <USBD_CDC_TransmitPacket>
 8008698:	4603      	mov	r3, r0
 800869a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000420 	.word	0x20000420

080086ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	6039      	str	r1, [r7, #0]
 80086da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2212      	movs	r2, #18
 80086e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086e2:	4b03      	ldr	r3, [pc, #12]	; (80086f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	20000164 	.word	0x20000164

080086f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	6039      	str	r1, [r7, #0]
 80086fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2204      	movs	r2, #4
 8008704:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008706:	4b03      	ldr	r3, [pc, #12]	; (8008714 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	20000178 	.word	0x20000178

08008718 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	4907      	ldr	r1, [pc, #28]	; (800874c <USBD_FS_ProductStrDescriptor+0x34>)
 800872e:	4808      	ldr	r0, [pc, #32]	; (8008750 <USBD_FS_ProductStrDescriptor+0x38>)
 8008730:	f7ff fdf8 	bl	8008324 <USBD_GetString>
 8008734:	e004      	b.n	8008740 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	4904      	ldr	r1, [pc, #16]	; (800874c <USBD_FS_ProductStrDescriptor+0x34>)
 800873a:	4805      	ldr	r0, [pc, #20]	; (8008750 <USBD_FS_ProductStrDescriptor+0x38>)
 800873c:	f7ff fdf2 	bl	8008324 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008740:	4b02      	ldr	r3, [pc, #8]	; (800874c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20000efc 	.word	0x20000efc
 8008750:	0800bd84 	.word	0x0800bd84

08008754 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	4904      	ldr	r1, [pc, #16]	; (8008774 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008764:	4804      	ldr	r0, [pc, #16]	; (8008778 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008766:	f7ff fddd 	bl	8008324 <USBD_GetString>
  return USBD_StrDesc;
 800876a:	4b02      	ldr	r3, [pc, #8]	; (8008774 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20000efc 	.word	0x20000efc
 8008778:	0800bd9c 	.word	0x0800bd9c

0800877c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	221a      	movs	r2, #26
 800878c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800878e:	f000 f843 	bl	8008818 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008792:	4b02      	ldr	r3, [pc, #8]	; (800879c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	2000017c 	.word	0x2000017c

080087a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d105      	bne.n	80087be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	4907      	ldr	r1, [pc, #28]	; (80087d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087b6:	4808      	ldr	r0, [pc, #32]	; (80087d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087b8:	f7ff fdb4 	bl	8008324 <USBD_GetString>
 80087bc:	e004      	b.n	80087c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	4904      	ldr	r1, [pc, #16]	; (80087d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087c2:	4805      	ldr	r0, [pc, #20]	; (80087d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087c4:	f7ff fdae 	bl	8008324 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000efc 	.word	0x20000efc
 80087d8:	0800bdb0 	.word	0x0800bdb0

080087dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	6039      	str	r1, [r7, #0]
 80087e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d105      	bne.n	80087fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	4907      	ldr	r1, [pc, #28]	; (8008810 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087f2:	4808      	ldr	r0, [pc, #32]	; (8008814 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087f4:	f7ff fd96 	bl	8008324 <USBD_GetString>
 80087f8:	e004      	b.n	8008804 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	4904      	ldr	r1, [pc, #16]	; (8008810 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087fe:	4805      	ldr	r0, [pc, #20]	; (8008814 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008800:	f7ff fd90 	bl	8008324 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008804:	4b02      	ldr	r3, [pc, #8]	; (8008810 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000efc 	.word	0x20000efc
 8008814:	0800bdbc 	.word	0x0800bdbc

08008818 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800881e:	4b0f      	ldr	r3, [pc, #60]	; (800885c <Get_SerialNum+0x44>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008824:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <Get_SerialNum+0x48>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800882a:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <Get_SerialNum+0x4c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4413      	add	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d009      	beq.n	8008852 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800883e:	2208      	movs	r2, #8
 8008840:	4909      	ldr	r1, [pc, #36]	; (8008868 <Get_SerialNum+0x50>)
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 f814 	bl	8008870 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008848:	2204      	movs	r2, #4
 800884a:	4908      	ldr	r1, [pc, #32]	; (800886c <Get_SerialNum+0x54>)
 800884c:	68b8      	ldr	r0, [r7, #8]
 800884e:	f000 f80f 	bl	8008870 <IntToUnicode>
  }
}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	1fff7a10 	.word	0x1fff7a10
 8008860:	1fff7a14 	.word	0x1fff7a14
 8008864:	1fff7a18 	.word	0x1fff7a18
 8008868:	2000017e 	.word	0x2000017e
 800886c:	2000018e 	.word	0x2000018e

08008870 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	4613      	mov	r3, r2
 800887c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008882:	2300      	movs	r3, #0
 8008884:	75fb      	strb	r3, [r7, #23]
 8008886:	e027      	b.n	80088d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	0f1b      	lsrs	r3, r3, #28
 800888c:	2b09      	cmp	r3, #9
 800888e:	d80b      	bhi.n	80088a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	0f1b      	lsrs	r3, r3, #28
 8008894:	b2da      	uxtb	r2, r3
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	4619      	mov	r1, r3
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	440b      	add	r3, r1
 80088a0:	3230      	adds	r2, #48	; 0x30
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	e00a      	b.n	80088be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	0f1b      	lsrs	r3, r3, #28
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	4619      	mov	r1, r3
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	440b      	add	r3, r1
 80088b8:	3237      	adds	r2, #55	; 0x37
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	011b      	lsls	r3, r3, #4
 80088c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	3301      	adds	r3, #1
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	4413      	add	r3, r2
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	3301      	adds	r3, #1
 80088d6:	75fb      	strb	r3, [r7, #23]
 80088d8:	7dfa      	ldrb	r2, [r7, #23]
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d3d3      	bcc.n	8008888 <IntToUnicode+0x18>
  }
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
	...

080088f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08a      	sub	sp, #40	; 0x28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f8:	f107 0314 	add.w	r3, r7, #20
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	609a      	str	r2, [r3, #8]
 8008904:	60da      	str	r2, [r3, #12]
 8008906:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008910:	d13a      	bne.n	8008988 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008912:	2300      	movs	r3, #0
 8008914:	613b      	str	r3, [r7, #16]
 8008916:	4b1e      	ldr	r3, [pc, #120]	; (8008990 <HAL_PCD_MspInit+0xa0>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	4a1d      	ldr	r2, [pc, #116]	; (8008990 <HAL_PCD_MspInit+0xa0>)
 800891c:	f043 0301 	orr.w	r3, r3, #1
 8008920:	6313      	str	r3, [r2, #48]	; 0x30
 8008922:	4b1b      	ldr	r3, [pc, #108]	; (8008990 <HAL_PCD_MspInit+0xa0>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	613b      	str	r3, [r7, #16]
 800892c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800892e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008934:	2302      	movs	r3, #2
 8008936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008938:	2300      	movs	r3, #0
 800893a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800893c:	2303      	movs	r3, #3
 800893e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008940:	230a      	movs	r3, #10
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008944:	f107 0314 	add.w	r3, r7, #20
 8008948:	4619      	mov	r1, r3
 800894a:	4812      	ldr	r0, [pc, #72]	; (8008994 <HAL_PCD_MspInit+0xa4>)
 800894c:	f7f9 f874 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008950:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <HAL_PCD_MspInit+0xa0>)
 8008952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008954:	4a0e      	ldr	r2, [pc, #56]	; (8008990 <HAL_PCD_MspInit+0xa0>)
 8008956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895a:	6353      	str	r3, [r2, #52]	; 0x34
 800895c:	2300      	movs	r3, #0
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <HAL_PCD_MspInit+0xa0>)
 8008962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008964:	4a0a      	ldr	r2, [pc, #40]	; (8008990 <HAL_PCD_MspInit+0xa0>)
 8008966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800896a:	6453      	str	r3, [r2, #68]	; 0x44
 800896c:	4b08      	ldr	r3, [pc, #32]	; (8008990 <HAL_PCD_MspInit+0xa0>)
 800896e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008978:	2200      	movs	r2, #0
 800897a:	2100      	movs	r1, #0
 800897c:	2043      	movs	r0, #67	; 0x43
 800897e:	f7f8 ff92 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008982:	2043      	movs	r0, #67	; 0x43
 8008984:	f7f8 ffab 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008988:	bf00      	nop
 800898a:	3728      	adds	r7, #40	; 0x28
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40023800 	.word	0x40023800
 8008994:	40020000 	.word	0x40020000

08008998 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f7fe fb59 	bl	8007066 <USBD_LL_SetupStage>
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089ce:	78fa      	ldrb	r2, [r7, #3]
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	4613      	mov	r3, r2
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	4413      	add	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	440b      	add	r3, r1
 80089dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	4619      	mov	r1, r3
 80089e6:	f7fe fb93 	bl	8007110 <USBD_LL_DataOutStage>
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	334c      	adds	r3, #76	; 0x4c
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	78fb      	ldrb	r3, [r7, #3]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f7fe fc2c 	bl	8007276 <USBD_LL_DataInStage>
}
 8008a1e:	bf00      	nop
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fe fd60 	bl	80074fa <USBD_LL_SOF>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d001      	beq.n	8008a5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a56:	f7f8 fbf7 	bl	8001248 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a60:	7bfa      	ldrb	r2, [r7, #15]
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe fd0a 	bl	800747e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe fcb2 	bl	80073da <USBD_LL_Reset>
}
 8008a76:	bf00      	nop
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe fd05 	bl	800749e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ab4:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <HAL_PCD_SuspendCallback+0x48>)
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	4a03      	ldr	r2, [pc, #12]	; (8008ac8 <HAL_PCD_SuspendCallback+0x48>)
 8008aba:	f043 0306 	orr.w	r3, r3, #6
 8008abe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	e000ed00 	.word	0xe000ed00

08008acc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fcf5 	bl	80074ca <USBD_LL_Resume>
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	4611      	mov	r1, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fd4d 	bl	800759e <USBD_LL_IsoOUTIncomplete>
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fd09 	bl	800753a <USBD_LL_IsoINIncomplete>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fd5f 	bl	8007602 <USBD_LL_DevConnected>
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fd5c 	bl	8007618 <USBD_LL_DevDisconnected>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d13c      	bne.n	8008bf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b78:	4a20      	ldr	r2, [pc, #128]	; (8008bfc <USBD_LL_Init+0x94>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a1e      	ldr	r2, [pc, #120]	; (8008bfc <USBD_LL_Init+0x94>)
 8008b84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b88:	4b1c      	ldr	r3, [pc, #112]	; (8008bfc <USBD_LL_Init+0x94>)
 8008b8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b90:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <USBD_LL_Init+0x94>)
 8008b92:	2204      	movs	r2, #4
 8008b94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b96:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <USBD_LL_Init+0x94>)
 8008b98:	2202      	movs	r2, #2
 8008b9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b9c:	4b17      	ldr	r3, [pc, #92]	; (8008bfc <USBD_LL_Init+0x94>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ba2:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <USBD_LL_Init+0x94>)
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ba8:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <USBD_LL_Init+0x94>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bae:	4b13      	ldr	r3, [pc, #76]	; (8008bfc <USBD_LL_Init+0x94>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bb4:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <USBD_LL_Init+0x94>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008bba:	4b10      	ldr	r3, [pc, #64]	; (8008bfc <USBD_LL_Init+0x94>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008bc0:	4b0e      	ldr	r3, [pc, #56]	; (8008bfc <USBD_LL_Init+0x94>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bc6:	480d      	ldr	r0, [pc, #52]	; (8008bfc <USBD_LL_Init+0x94>)
 8008bc8:	f7f9 f8eb 	bl	8001da2 <HAL_PCD_Init>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008bd2:	f7f8 fb39 	bl	8001248 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008bd6:	2180      	movs	r1, #128	; 0x80
 8008bd8:	4808      	ldr	r0, [pc, #32]	; (8008bfc <USBD_LL_Init+0x94>)
 8008bda:	f7fa fb42 	bl	8003262 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bde:	2240      	movs	r2, #64	; 0x40
 8008be0:	2100      	movs	r1, #0
 8008be2:	4806      	ldr	r0, [pc, #24]	; (8008bfc <USBD_LL_Init+0x94>)
 8008be4:	f7fa faf6 	bl	80031d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008be8:	2280      	movs	r2, #128	; 0x80
 8008bea:	2101      	movs	r1, #1
 8008bec:	4803      	ldr	r0, [pc, #12]	; (8008bfc <USBD_LL_Init+0x94>)
 8008bee:	f7fa faf1 	bl	80031d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	200010fc 	.word	0x200010fc

08008c00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7f9 f9e0 	bl	8001fdc <HAL_PCD_Start>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f942 	bl	8008eac <USBD_Get_USB_Status>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	4608      	mov	r0, r1
 8008c40:	4611      	mov	r1, r2
 8008c42:	461a      	mov	r2, r3
 8008c44:	4603      	mov	r3, r0
 8008c46:	70fb      	strb	r3, [r7, #3]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70bb      	strb	r3, [r7, #2]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c5e:	78bb      	ldrb	r3, [r7, #2]
 8008c60:	883a      	ldrh	r2, [r7, #0]
 8008c62:	78f9      	ldrb	r1, [r7, #3]
 8008c64:	f7f9 feb1 	bl	80029ca <HAL_PCD_EP_Open>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f91c 	bl	8008eac <USBD_Get_USB_Status>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7f9 fefa 	bl	8002a9a <HAL_PCD_EP_Close>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 f8fd 	bl	8008eac <USBD_Get_USB_Status>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cda:	78fa      	ldrb	r2, [r7, #3]
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f9 ffd2 	bl	8002c88 <HAL_PCD_EP_SetStall>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 f8de 	bl	8008eac <USBD_Get_USB_Status>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d18:	78fa      	ldrb	r2, [r7, #3]
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fa f817 	bl	8002d50 <HAL_PCD_EP_ClrStall>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 f8bf 	bl	8008eac <USBD_Get_USB_Status>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da0b      	bge.n	8008d70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d5e:	68f9      	ldr	r1, [r7, #12]
 8008d60:	4613      	mov	r3, r2
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4413      	add	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	440b      	add	r3, r1
 8008d6a:	333e      	adds	r3, #62	; 0x3e
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	e00b      	b.n	8008d88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d76:	68f9      	ldr	r1, [r7, #12]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008d86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dae:	78fa      	ldrb	r2, [r7, #3]
 8008db0:	4611      	mov	r1, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f9 fde4 	bl	8002980 <HAL_PCD_SetAddress>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 f874 	bl	8008eac <USBD_Get_USB_Status>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b086      	sub	sp, #24
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	603b      	str	r3, [r7, #0]
 8008dde:	460b      	mov	r3, r1
 8008de0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008df0:	7af9      	ldrb	r1, [r7, #11]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	f7f9 fefd 	bl	8002bf4 <HAL_PCD_EP_Transmit>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f853 	bl	8008eac <USBD_Get_USB_Status>
 8008e06:	4603      	mov	r3, r0
 8008e08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	460b      	mov	r3, r1
 8008e22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e32:	7af9      	ldrb	r1, [r7, #11]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	f7f9 fe79 	bl	8002b2e <HAL_PCD_EP_Receive>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 f832 	bl	8008eac <USBD_Get_USB_Status>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e68:	78fa      	ldrb	r2, [r7, #3]
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7f9 fea9 	bl	8002bc4 <HAL_PCD_EP_GetRxCount>
 8008e72:	4603      	mov	r3, r0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e84:	4b03      	ldr	r3, [pc, #12]	; (8008e94 <USBD_static_malloc+0x18>)
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20001608 	.word	0x20001608

08008e98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d817      	bhi.n	8008ef0 <USBD_Get_USB_Status+0x44>
 8008ec0:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <USBD_Get_USB_Status+0x1c>)
 8008ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec6:	bf00      	nop
 8008ec8:	08008ed9 	.word	0x08008ed9
 8008ecc:	08008edf 	.word	0x08008edf
 8008ed0:	08008ee5 	.word	0x08008ee5
 8008ed4:	08008eeb 	.word	0x08008eeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
    break;
 8008edc:	e00b      	b.n	8008ef6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee2:	e008      	b.n	8008ef6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee8:	e005      	b.n	8008ef6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eea:	2303      	movs	r3, #3
 8008eec:	73fb      	strb	r3, [r7, #15]
    break;
 8008eee:	e002      	b.n	8008ef6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef4:	bf00      	nop
  }
  return usb_status;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <__errno>:
 8008f04:	4b01      	ldr	r3, [pc, #4]	; (8008f0c <__errno+0x8>)
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20000198 	.word	0x20000198

08008f10 <__libc_init_array>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4d0d      	ldr	r5, [pc, #52]	; (8008f48 <__libc_init_array+0x38>)
 8008f14:	4c0d      	ldr	r4, [pc, #52]	; (8008f4c <__libc_init_array+0x3c>)
 8008f16:	1b64      	subs	r4, r4, r5
 8008f18:	10a4      	asrs	r4, r4, #2
 8008f1a:	2600      	movs	r6, #0
 8008f1c:	42a6      	cmp	r6, r4
 8008f1e:	d109      	bne.n	8008f34 <__libc_init_array+0x24>
 8008f20:	4d0b      	ldr	r5, [pc, #44]	; (8008f50 <__libc_init_array+0x40>)
 8008f22:	4c0c      	ldr	r4, [pc, #48]	; (8008f54 <__libc_init_array+0x44>)
 8008f24:	f002 ff04 	bl	800bd30 <_init>
 8008f28:	1b64      	subs	r4, r4, r5
 8008f2a:	10a4      	asrs	r4, r4, #2
 8008f2c:	2600      	movs	r6, #0
 8008f2e:	42a6      	cmp	r6, r4
 8008f30:	d105      	bne.n	8008f3e <__libc_init_array+0x2e>
 8008f32:	bd70      	pop	{r4, r5, r6, pc}
 8008f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f38:	4798      	blx	r3
 8008f3a:	3601      	adds	r6, #1
 8008f3c:	e7ee      	b.n	8008f1c <__libc_init_array+0xc>
 8008f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f42:	4798      	blx	r3
 8008f44:	3601      	adds	r6, #1
 8008f46:	e7f2      	b.n	8008f2e <__libc_init_array+0x1e>
 8008f48:	0800c1c4 	.word	0x0800c1c4
 8008f4c:	0800c1c4 	.word	0x0800c1c4
 8008f50:	0800c1c4 	.word	0x0800c1c4
 8008f54:	0800c1c8 	.word	0x0800c1c8

08008f58 <memset>:
 8008f58:	4402      	add	r2, r0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d100      	bne.n	8008f62 <memset+0xa>
 8008f60:	4770      	bx	lr
 8008f62:	f803 1b01 	strb.w	r1, [r3], #1
 8008f66:	e7f9      	b.n	8008f5c <memset+0x4>

08008f68 <__cvt>:
 8008f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f6c:	ec55 4b10 	vmov	r4, r5, d0
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	460e      	mov	r6, r1
 8008f74:	4619      	mov	r1, r3
 8008f76:	462b      	mov	r3, r5
 8008f78:	bfbb      	ittet	lt
 8008f7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f7e:	461d      	movlt	r5, r3
 8008f80:	2300      	movge	r3, #0
 8008f82:	232d      	movlt	r3, #45	; 0x2d
 8008f84:	700b      	strb	r3, [r1, #0]
 8008f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f8c:	4691      	mov	r9, r2
 8008f8e:	f023 0820 	bic.w	r8, r3, #32
 8008f92:	bfbc      	itt	lt
 8008f94:	4622      	movlt	r2, r4
 8008f96:	4614      	movlt	r4, r2
 8008f98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f9c:	d005      	beq.n	8008faa <__cvt+0x42>
 8008f9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fa2:	d100      	bne.n	8008fa6 <__cvt+0x3e>
 8008fa4:	3601      	adds	r6, #1
 8008fa6:	2102      	movs	r1, #2
 8008fa8:	e000      	b.n	8008fac <__cvt+0x44>
 8008faa:	2103      	movs	r1, #3
 8008fac:	ab03      	add	r3, sp, #12
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	ab02      	add	r3, sp, #8
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	ec45 4b10 	vmov	d0, r4, r5
 8008fb8:	4653      	mov	r3, sl
 8008fba:	4632      	mov	r2, r6
 8008fbc:	f000 fcec 	bl	8009998 <_dtoa_r>
 8008fc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	d102      	bne.n	8008fce <__cvt+0x66>
 8008fc8:	f019 0f01 	tst.w	r9, #1
 8008fcc:	d022      	beq.n	8009014 <__cvt+0xac>
 8008fce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fd2:	eb07 0906 	add.w	r9, r7, r6
 8008fd6:	d110      	bne.n	8008ffa <__cvt+0x92>
 8008fd8:	783b      	ldrb	r3, [r7, #0]
 8008fda:	2b30      	cmp	r3, #48	; 0x30
 8008fdc:	d10a      	bne.n	8008ff4 <__cvt+0x8c>
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	f7f7 fd77 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fea:	b918      	cbnz	r0, 8008ff4 <__cvt+0x8c>
 8008fec:	f1c6 0601 	rsb	r6, r6, #1
 8008ff0:	f8ca 6000 	str.w	r6, [sl]
 8008ff4:	f8da 3000 	ldr.w	r3, [sl]
 8008ff8:	4499      	add	r9, r3
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4620      	mov	r0, r4
 8009000:	4629      	mov	r1, r5
 8009002:	f7f7 fd69 	bl	8000ad8 <__aeabi_dcmpeq>
 8009006:	b108      	cbz	r0, 800900c <__cvt+0xa4>
 8009008:	f8cd 900c 	str.w	r9, [sp, #12]
 800900c:	2230      	movs	r2, #48	; 0x30
 800900e:	9b03      	ldr	r3, [sp, #12]
 8009010:	454b      	cmp	r3, r9
 8009012:	d307      	bcc.n	8009024 <__cvt+0xbc>
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009018:	1bdb      	subs	r3, r3, r7
 800901a:	4638      	mov	r0, r7
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	b004      	add	sp, #16
 8009020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009024:	1c59      	adds	r1, r3, #1
 8009026:	9103      	str	r1, [sp, #12]
 8009028:	701a      	strb	r2, [r3, #0]
 800902a:	e7f0      	b.n	800900e <__cvt+0xa6>

0800902c <__exponent>:
 800902c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800902e:	4603      	mov	r3, r0
 8009030:	2900      	cmp	r1, #0
 8009032:	bfb8      	it	lt
 8009034:	4249      	neglt	r1, r1
 8009036:	f803 2b02 	strb.w	r2, [r3], #2
 800903a:	bfb4      	ite	lt
 800903c:	222d      	movlt	r2, #45	; 0x2d
 800903e:	222b      	movge	r2, #43	; 0x2b
 8009040:	2909      	cmp	r1, #9
 8009042:	7042      	strb	r2, [r0, #1]
 8009044:	dd2a      	ble.n	800909c <__exponent+0x70>
 8009046:	f10d 0407 	add.w	r4, sp, #7
 800904a:	46a4      	mov	ip, r4
 800904c:	270a      	movs	r7, #10
 800904e:	46a6      	mov	lr, r4
 8009050:	460a      	mov	r2, r1
 8009052:	fb91 f6f7 	sdiv	r6, r1, r7
 8009056:	fb07 1516 	mls	r5, r7, r6, r1
 800905a:	3530      	adds	r5, #48	; 0x30
 800905c:	2a63      	cmp	r2, #99	; 0x63
 800905e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009062:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009066:	4631      	mov	r1, r6
 8009068:	dcf1      	bgt.n	800904e <__exponent+0x22>
 800906a:	3130      	adds	r1, #48	; 0x30
 800906c:	f1ae 0502 	sub.w	r5, lr, #2
 8009070:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009074:	1c44      	adds	r4, r0, #1
 8009076:	4629      	mov	r1, r5
 8009078:	4561      	cmp	r1, ip
 800907a:	d30a      	bcc.n	8009092 <__exponent+0x66>
 800907c:	f10d 0209 	add.w	r2, sp, #9
 8009080:	eba2 020e 	sub.w	r2, r2, lr
 8009084:	4565      	cmp	r5, ip
 8009086:	bf88      	it	hi
 8009088:	2200      	movhi	r2, #0
 800908a:	4413      	add	r3, r2
 800908c:	1a18      	subs	r0, r3, r0
 800908e:	b003      	add	sp, #12
 8009090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009096:	f804 2f01 	strb.w	r2, [r4, #1]!
 800909a:	e7ed      	b.n	8009078 <__exponent+0x4c>
 800909c:	2330      	movs	r3, #48	; 0x30
 800909e:	3130      	adds	r1, #48	; 0x30
 80090a0:	7083      	strb	r3, [r0, #2]
 80090a2:	70c1      	strb	r1, [r0, #3]
 80090a4:	1d03      	adds	r3, r0, #4
 80090a6:	e7f1      	b.n	800908c <__exponent+0x60>

080090a8 <_printf_float>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	ed2d 8b02 	vpush	{d8}
 80090b0:	b08d      	sub	sp, #52	; 0x34
 80090b2:	460c      	mov	r4, r1
 80090b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090b8:	4616      	mov	r6, r2
 80090ba:	461f      	mov	r7, r3
 80090bc:	4605      	mov	r5, r0
 80090be:	f001 fa59 	bl	800a574 <_localeconv_r>
 80090c2:	f8d0 a000 	ldr.w	sl, [r0]
 80090c6:	4650      	mov	r0, sl
 80090c8:	f7f7 f88a 	bl	80001e0 <strlen>
 80090cc:	2300      	movs	r3, #0
 80090ce:	930a      	str	r3, [sp, #40]	; 0x28
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	9305      	str	r3, [sp, #20]
 80090d4:	f8d8 3000 	ldr.w	r3, [r8]
 80090d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090dc:	3307      	adds	r3, #7
 80090de:	f023 0307 	bic.w	r3, r3, #7
 80090e2:	f103 0208 	add.w	r2, r3, #8
 80090e6:	f8c8 2000 	str.w	r2, [r8]
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80090f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80090f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090fa:	9307      	str	r3, [sp, #28]
 80090fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009100:	ee08 0a10 	vmov	s16, r0
 8009104:	4b9f      	ldr	r3, [pc, #636]	; (8009384 <_printf_float+0x2dc>)
 8009106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800910a:	f04f 32ff 	mov.w	r2, #4294967295
 800910e:	f7f7 fd15 	bl	8000b3c <__aeabi_dcmpun>
 8009112:	bb88      	cbnz	r0, 8009178 <_printf_float+0xd0>
 8009114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009118:	4b9a      	ldr	r3, [pc, #616]	; (8009384 <_printf_float+0x2dc>)
 800911a:	f04f 32ff 	mov.w	r2, #4294967295
 800911e:	f7f7 fcef 	bl	8000b00 <__aeabi_dcmple>
 8009122:	bb48      	cbnz	r0, 8009178 <_printf_float+0xd0>
 8009124:	2200      	movs	r2, #0
 8009126:	2300      	movs	r3, #0
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 fcde 	bl	8000aec <__aeabi_dcmplt>
 8009130:	b110      	cbz	r0, 8009138 <_printf_float+0x90>
 8009132:	232d      	movs	r3, #45	; 0x2d
 8009134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009138:	4b93      	ldr	r3, [pc, #588]	; (8009388 <_printf_float+0x2e0>)
 800913a:	4894      	ldr	r0, [pc, #592]	; (800938c <_printf_float+0x2e4>)
 800913c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009140:	bf94      	ite	ls
 8009142:	4698      	movls	r8, r3
 8009144:	4680      	movhi	r8, r0
 8009146:	2303      	movs	r3, #3
 8009148:	6123      	str	r3, [r4, #16]
 800914a:	9b05      	ldr	r3, [sp, #20]
 800914c:	f023 0204 	bic.w	r2, r3, #4
 8009150:	6022      	str	r2, [r4, #0]
 8009152:	f04f 0900 	mov.w	r9, #0
 8009156:	9700      	str	r7, [sp, #0]
 8009158:	4633      	mov	r3, r6
 800915a:	aa0b      	add	r2, sp, #44	; 0x2c
 800915c:	4621      	mov	r1, r4
 800915e:	4628      	mov	r0, r5
 8009160:	f000 f9d8 	bl	8009514 <_printf_common>
 8009164:	3001      	adds	r0, #1
 8009166:	f040 8090 	bne.w	800928a <_printf_float+0x1e2>
 800916a:	f04f 30ff 	mov.w	r0, #4294967295
 800916e:	b00d      	add	sp, #52	; 0x34
 8009170:	ecbd 8b02 	vpop	{d8}
 8009174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009178:	4642      	mov	r2, r8
 800917a:	464b      	mov	r3, r9
 800917c:	4640      	mov	r0, r8
 800917e:	4649      	mov	r1, r9
 8009180:	f7f7 fcdc 	bl	8000b3c <__aeabi_dcmpun>
 8009184:	b140      	cbz	r0, 8009198 <_printf_float+0xf0>
 8009186:	464b      	mov	r3, r9
 8009188:	2b00      	cmp	r3, #0
 800918a:	bfbc      	itt	lt
 800918c:	232d      	movlt	r3, #45	; 0x2d
 800918e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009192:	487f      	ldr	r0, [pc, #508]	; (8009390 <_printf_float+0x2e8>)
 8009194:	4b7f      	ldr	r3, [pc, #508]	; (8009394 <_printf_float+0x2ec>)
 8009196:	e7d1      	b.n	800913c <_printf_float+0x94>
 8009198:	6863      	ldr	r3, [r4, #4]
 800919a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800919e:	9206      	str	r2, [sp, #24]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	d13f      	bne.n	8009224 <_printf_float+0x17c>
 80091a4:	2306      	movs	r3, #6
 80091a6:	6063      	str	r3, [r4, #4]
 80091a8:	9b05      	ldr	r3, [sp, #20]
 80091aa:	6861      	ldr	r1, [r4, #4]
 80091ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091b0:	2300      	movs	r3, #0
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	ab0a      	add	r3, sp, #40	; 0x28
 80091b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091ba:	ab09      	add	r3, sp, #36	; 0x24
 80091bc:	ec49 8b10 	vmov	d0, r8, r9
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	6022      	str	r2, [r4, #0]
 80091c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091c8:	4628      	mov	r0, r5
 80091ca:	f7ff fecd 	bl	8008f68 <__cvt>
 80091ce:	9b06      	ldr	r3, [sp, #24]
 80091d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091d2:	2b47      	cmp	r3, #71	; 0x47
 80091d4:	4680      	mov	r8, r0
 80091d6:	d108      	bne.n	80091ea <_printf_float+0x142>
 80091d8:	1cc8      	adds	r0, r1, #3
 80091da:	db02      	blt.n	80091e2 <_printf_float+0x13a>
 80091dc:	6863      	ldr	r3, [r4, #4]
 80091de:	4299      	cmp	r1, r3
 80091e0:	dd41      	ble.n	8009266 <_printf_float+0x1be>
 80091e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80091e6:	fa5f fb8b 	uxtb.w	fp, fp
 80091ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091ee:	d820      	bhi.n	8009232 <_printf_float+0x18a>
 80091f0:	3901      	subs	r1, #1
 80091f2:	465a      	mov	r2, fp
 80091f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091f8:	9109      	str	r1, [sp, #36]	; 0x24
 80091fa:	f7ff ff17 	bl	800902c <__exponent>
 80091fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009200:	1813      	adds	r3, r2, r0
 8009202:	2a01      	cmp	r2, #1
 8009204:	4681      	mov	r9, r0
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	dc02      	bgt.n	8009210 <_printf_float+0x168>
 800920a:	6822      	ldr	r2, [r4, #0]
 800920c:	07d2      	lsls	r2, r2, #31
 800920e:	d501      	bpl.n	8009214 <_printf_float+0x16c>
 8009210:	3301      	adds	r3, #1
 8009212:	6123      	str	r3, [r4, #16]
 8009214:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009218:	2b00      	cmp	r3, #0
 800921a:	d09c      	beq.n	8009156 <_printf_float+0xae>
 800921c:	232d      	movs	r3, #45	; 0x2d
 800921e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009222:	e798      	b.n	8009156 <_printf_float+0xae>
 8009224:	9a06      	ldr	r2, [sp, #24]
 8009226:	2a47      	cmp	r2, #71	; 0x47
 8009228:	d1be      	bne.n	80091a8 <_printf_float+0x100>
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1bc      	bne.n	80091a8 <_printf_float+0x100>
 800922e:	2301      	movs	r3, #1
 8009230:	e7b9      	b.n	80091a6 <_printf_float+0xfe>
 8009232:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009236:	d118      	bne.n	800926a <_printf_float+0x1c2>
 8009238:	2900      	cmp	r1, #0
 800923a:	6863      	ldr	r3, [r4, #4]
 800923c:	dd0b      	ble.n	8009256 <_printf_float+0x1ae>
 800923e:	6121      	str	r1, [r4, #16]
 8009240:	b913      	cbnz	r3, 8009248 <_printf_float+0x1a0>
 8009242:	6822      	ldr	r2, [r4, #0]
 8009244:	07d0      	lsls	r0, r2, #31
 8009246:	d502      	bpl.n	800924e <_printf_float+0x1a6>
 8009248:	3301      	adds	r3, #1
 800924a:	440b      	add	r3, r1
 800924c:	6123      	str	r3, [r4, #16]
 800924e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009250:	f04f 0900 	mov.w	r9, #0
 8009254:	e7de      	b.n	8009214 <_printf_float+0x16c>
 8009256:	b913      	cbnz	r3, 800925e <_printf_float+0x1b6>
 8009258:	6822      	ldr	r2, [r4, #0]
 800925a:	07d2      	lsls	r2, r2, #31
 800925c:	d501      	bpl.n	8009262 <_printf_float+0x1ba>
 800925e:	3302      	adds	r3, #2
 8009260:	e7f4      	b.n	800924c <_printf_float+0x1a4>
 8009262:	2301      	movs	r3, #1
 8009264:	e7f2      	b.n	800924c <_printf_float+0x1a4>
 8009266:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800926a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800926c:	4299      	cmp	r1, r3
 800926e:	db05      	blt.n	800927c <_printf_float+0x1d4>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	6121      	str	r1, [r4, #16]
 8009274:	07d8      	lsls	r0, r3, #31
 8009276:	d5ea      	bpl.n	800924e <_printf_float+0x1a6>
 8009278:	1c4b      	adds	r3, r1, #1
 800927a:	e7e7      	b.n	800924c <_printf_float+0x1a4>
 800927c:	2900      	cmp	r1, #0
 800927e:	bfd4      	ite	le
 8009280:	f1c1 0202 	rsble	r2, r1, #2
 8009284:	2201      	movgt	r2, #1
 8009286:	4413      	add	r3, r2
 8009288:	e7e0      	b.n	800924c <_printf_float+0x1a4>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	055a      	lsls	r2, r3, #21
 800928e:	d407      	bmi.n	80092a0 <_printf_float+0x1f8>
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	4642      	mov	r2, r8
 8009294:	4631      	mov	r1, r6
 8009296:	4628      	mov	r0, r5
 8009298:	47b8      	blx	r7
 800929a:	3001      	adds	r0, #1
 800929c:	d12c      	bne.n	80092f8 <_printf_float+0x250>
 800929e:	e764      	b.n	800916a <_printf_float+0xc2>
 80092a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092a4:	f240 80e0 	bls.w	8009468 <_printf_float+0x3c0>
 80092a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092ac:	2200      	movs	r2, #0
 80092ae:	2300      	movs	r3, #0
 80092b0:	f7f7 fc12 	bl	8000ad8 <__aeabi_dcmpeq>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d034      	beq.n	8009322 <_printf_float+0x27a>
 80092b8:	4a37      	ldr	r2, [pc, #220]	; (8009398 <_printf_float+0x2f0>)
 80092ba:	2301      	movs	r3, #1
 80092bc:	4631      	mov	r1, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	f43f af51 	beq.w	800916a <_printf_float+0xc2>
 80092c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092cc:	429a      	cmp	r2, r3
 80092ce:	db02      	blt.n	80092d6 <_printf_float+0x22e>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	07d8      	lsls	r0, r3, #31
 80092d4:	d510      	bpl.n	80092f8 <_printf_float+0x250>
 80092d6:	ee18 3a10 	vmov	r3, s16
 80092da:	4652      	mov	r2, sl
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af41 	beq.w	800916a <_printf_float+0xc2>
 80092e8:	f04f 0800 	mov.w	r8, #0
 80092ec:	f104 091a 	add.w	r9, r4, #26
 80092f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f2:	3b01      	subs	r3, #1
 80092f4:	4543      	cmp	r3, r8
 80092f6:	dc09      	bgt.n	800930c <_printf_float+0x264>
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	079b      	lsls	r3, r3, #30
 80092fc:	f100 8105 	bmi.w	800950a <_printf_float+0x462>
 8009300:	68e0      	ldr	r0, [r4, #12]
 8009302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009304:	4298      	cmp	r0, r3
 8009306:	bfb8      	it	lt
 8009308:	4618      	movlt	r0, r3
 800930a:	e730      	b.n	800916e <_printf_float+0xc6>
 800930c:	2301      	movs	r3, #1
 800930e:	464a      	mov	r2, r9
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f af27 	beq.w	800916a <_printf_float+0xc2>
 800931c:	f108 0801 	add.w	r8, r8, #1
 8009320:	e7e6      	b.n	80092f0 <_printf_float+0x248>
 8009322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	dc39      	bgt.n	800939c <_printf_float+0x2f4>
 8009328:	4a1b      	ldr	r2, [pc, #108]	; (8009398 <_printf_float+0x2f0>)
 800932a:	2301      	movs	r3, #1
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	f43f af19 	beq.w	800916a <_printf_float+0xc2>
 8009338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800933c:	4313      	orrs	r3, r2
 800933e:	d102      	bne.n	8009346 <_printf_float+0x29e>
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	07d9      	lsls	r1, r3, #31
 8009344:	d5d8      	bpl.n	80092f8 <_printf_float+0x250>
 8009346:	ee18 3a10 	vmov	r3, s16
 800934a:	4652      	mov	r2, sl
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	f43f af09 	beq.w	800916a <_printf_float+0xc2>
 8009358:	f04f 0900 	mov.w	r9, #0
 800935c:	f104 0a1a 	add.w	sl, r4, #26
 8009360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009362:	425b      	negs	r3, r3
 8009364:	454b      	cmp	r3, r9
 8009366:	dc01      	bgt.n	800936c <_printf_float+0x2c4>
 8009368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936a:	e792      	b.n	8009292 <_printf_float+0x1ea>
 800936c:	2301      	movs	r3, #1
 800936e:	4652      	mov	r2, sl
 8009370:	4631      	mov	r1, r6
 8009372:	4628      	mov	r0, r5
 8009374:	47b8      	blx	r7
 8009376:	3001      	adds	r0, #1
 8009378:	f43f aef7 	beq.w	800916a <_printf_float+0xc2>
 800937c:	f109 0901 	add.w	r9, r9, #1
 8009380:	e7ee      	b.n	8009360 <_printf_float+0x2b8>
 8009382:	bf00      	nop
 8009384:	7fefffff 	.word	0x7fefffff
 8009388:	0800bde8 	.word	0x0800bde8
 800938c:	0800bdec 	.word	0x0800bdec
 8009390:	0800bdf4 	.word	0x0800bdf4
 8009394:	0800bdf0 	.word	0x0800bdf0
 8009398:	0800bdf8 	.word	0x0800bdf8
 800939c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800939e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093a0:	429a      	cmp	r2, r3
 80093a2:	bfa8      	it	ge
 80093a4:	461a      	movge	r2, r3
 80093a6:	2a00      	cmp	r2, #0
 80093a8:	4691      	mov	r9, r2
 80093aa:	dc37      	bgt.n	800941c <_printf_float+0x374>
 80093ac:	f04f 0b00 	mov.w	fp, #0
 80093b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093b4:	f104 021a 	add.w	r2, r4, #26
 80093b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093ba:	9305      	str	r3, [sp, #20]
 80093bc:	eba3 0309 	sub.w	r3, r3, r9
 80093c0:	455b      	cmp	r3, fp
 80093c2:	dc33      	bgt.n	800942c <_printf_float+0x384>
 80093c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093c8:	429a      	cmp	r2, r3
 80093ca:	db3b      	blt.n	8009444 <_printf_float+0x39c>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	07da      	lsls	r2, r3, #31
 80093d0:	d438      	bmi.n	8009444 <_printf_float+0x39c>
 80093d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d4:	9a05      	ldr	r2, [sp, #20]
 80093d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093d8:	1a9a      	subs	r2, r3, r2
 80093da:	eba3 0901 	sub.w	r9, r3, r1
 80093de:	4591      	cmp	r9, r2
 80093e0:	bfa8      	it	ge
 80093e2:	4691      	movge	r9, r2
 80093e4:	f1b9 0f00 	cmp.w	r9, #0
 80093e8:	dc35      	bgt.n	8009456 <_printf_float+0x3ae>
 80093ea:	f04f 0800 	mov.w	r8, #0
 80093ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093f2:	f104 0a1a 	add.w	sl, r4, #26
 80093f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093fa:	1a9b      	subs	r3, r3, r2
 80093fc:	eba3 0309 	sub.w	r3, r3, r9
 8009400:	4543      	cmp	r3, r8
 8009402:	f77f af79 	ble.w	80092f8 <_printf_float+0x250>
 8009406:	2301      	movs	r3, #1
 8009408:	4652      	mov	r2, sl
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	f43f aeaa 	beq.w	800916a <_printf_float+0xc2>
 8009416:	f108 0801 	add.w	r8, r8, #1
 800941a:	e7ec      	b.n	80093f6 <_printf_float+0x34e>
 800941c:	4613      	mov	r3, r2
 800941e:	4631      	mov	r1, r6
 8009420:	4642      	mov	r2, r8
 8009422:	4628      	mov	r0, r5
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	d1c0      	bne.n	80093ac <_printf_float+0x304>
 800942a:	e69e      	b.n	800916a <_printf_float+0xc2>
 800942c:	2301      	movs	r3, #1
 800942e:	4631      	mov	r1, r6
 8009430:	4628      	mov	r0, r5
 8009432:	9205      	str	r2, [sp, #20]
 8009434:	47b8      	blx	r7
 8009436:	3001      	adds	r0, #1
 8009438:	f43f ae97 	beq.w	800916a <_printf_float+0xc2>
 800943c:	9a05      	ldr	r2, [sp, #20]
 800943e:	f10b 0b01 	add.w	fp, fp, #1
 8009442:	e7b9      	b.n	80093b8 <_printf_float+0x310>
 8009444:	ee18 3a10 	vmov	r3, s16
 8009448:	4652      	mov	r2, sl
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	d1be      	bne.n	80093d2 <_printf_float+0x32a>
 8009454:	e689      	b.n	800916a <_printf_float+0xc2>
 8009456:	9a05      	ldr	r2, [sp, #20]
 8009458:	464b      	mov	r3, r9
 800945a:	4442      	add	r2, r8
 800945c:	4631      	mov	r1, r6
 800945e:	4628      	mov	r0, r5
 8009460:	47b8      	blx	r7
 8009462:	3001      	adds	r0, #1
 8009464:	d1c1      	bne.n	80093ea <_printf_float+0x342>
 8009466:	e680      	b.n	800916a <_printf_float+0xc2>
 8009468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800946a:	2a01      	cmp	r2, #1
 800946c:	dc01      	bgt.n	8009472 <_printf_float+0x3ca>
 800946e:	07db      	lsls	r3, r3, #31
 8009470:	d538      	bpl.n	80094e4 <_printf_float+0x43c>
 8009472:	2301      	movs	r3, #1
 8009474:	4642      	mov	r2, r8
 8009476:	4631      	mov	r1, r6
 8009478:	4628      	mov	r0, r5
 800947a:	47b8      	blx	r7
 800947c:	3001      	adds	r0, #1
 800947e:	f43f ae74 	beq.w	800916a <_printf_float+0xc2>
 8009482:	ee18 3a10 	vmov	r3, s16
 8009486:	4652      	mov	r2, sl
 8009488:	4631      	mov	r1, r6
 800948a:	4628      	mov	r0, r5
 800948c:	47b8      	blx	r7
 800948e:	3001      	adds	r0, #1
 8009490:	f43f ae6b 	beq.w	800916a <_printf_float+0xc2>
 8009494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009498:	2200      	movs	r2, #0
 800949a:	2300      	movs	r3, #0
 800949c:	f7f7 fb1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80094a0:	b9d8      	cbnz	r0, 80094da <_printf_float+0x432>
 80094a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a4:	f108 0201 	add.w	r2, r8, #1
 80094a8:	3b01      	subs	r3, #1
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	d10e      	bne.n	80094d2 <_printf_float+0x42a>
 80094b4:	e659      	b.n	800916a <_printf_float+0xc2>
 80094b6:	2301      	movs	r3, #1
 80094b8:	4652      	mov	r2, sl
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	47b8      	blx	r7
 80094c0:	3001      	adds	r0, #1
 80094c2:	f43f ae52 	beq.w	800916a <_printf_float+0xc2>
 80094c6:	f108 0801 	add.w	r8, r8, #1
 80094ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094cc:	3b01      	subs	r3, #1
 80094ce:	4543      	cmp	r3, r8
 80094d0:	dcf1      	bgt.n	80094b6 <_printf_float+0x40e>
 80094d2:	464b      	mov	r3, r9
 80094d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094d8:	e6dc      	b.n	8009294 <_printf_float+0x1ec>
 80094da:	f04f 0800 	mov.w	r8, #0
 80094de:	f104 0a1a 	add.w	sl, r4, #26
 80094e2:	e7f2      	b.n	80094ca <_printf_float+0x422>
 80094e4:	2301      	movs	r3, #1
 80094e6:	4642      	mov	r2, r8
 80094e8:	e7df      	b.n	80094aa <_printf_float+0x402>
 80094ea:	2301      	movs	r3, #1
 80094ec:	464a      	mov	r2, r9
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f ae38 	beq.w	800916a <_printf_float+0xc2>
 80094fa:	f108 0801 	add.w	r8, r8, #1
 80094fe:	68e3      	ldr	r3, [r4, #12]
 8009500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009502:	1a5b      	subs	r3, r3, r1
 8009504:	4543      	cmp	r3, r8
 8009506:	dcf0      	bgt.n	80094ea <_printf_float+0x442>
 8009508:	e6fa      	b.n	8009300 <_printf_float+0x258>
 800950a:	f04f 0800 	mov.w	r8, #0
 800950e:	f104 0919 	add.w	r9, r4, #25
 8009512:	e7f4      	b.n	80094fe <_printf_float+0x456>

08009514 <_printf_common>:
 8009514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009518:	4616      	mov	r6, r2
 800951a:	4699      	mov	r9, r3
 800951c:	688a      	ldr	r2, [r1, #8]
 800951e:	690b      	ldr	r3, [r1, #16]
 8009520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009524:	4293      	cmp	r3, r2
 8009526:	bfb8      	it	lt
 8009528:	4613      	movlt	r3, r2
 800952a:	6033      	str	r3, [r6, #0]
 800952c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009530:	4607      	mov	r7, r0
 8009532:	460c      	mov	r4, r1
 8009534:	b10a      	cbz	r2, 800953a <_printf_common+0x26>
 8009536:	3301      	adds	r3, #1
 8009538:	6033      	str	r3, [r6, #0]
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	0699      	lsls	r1, r3, #26
 800953e:	bf42      	ittt	mi
 8009540:	6833      	ldrmi	r3, [r6, #0]
 8009542:	3302      	addmi	r3, #2
 8009544:	6033      	strmi	r3, [r6, #0]
 8009546:	6825      	ldr	r5, [r4, #0]
 8009548:	f015 0506 	ands.w	r5, r5, #6
 800954c:	d106      	bne.n	800955c <_printf_common+0x48>
 800954e:	f104 0a19 	add.w	sl, r4, #25
 8009552:	68e3      	ldr	r3, [r4, #12]
 8009554:	6832      	ldr	r2, [r6, #0]
 8009556:	1a9b      	subs	r3, r3, r2
 8009558:	42ab      	cmp	r3, r5
 800955a:	dc26      	bgt.n	80095aa <_printf_common+0x96>
 800955c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009560:	1e13      	subs	r3, r2, #0
 8009562:	6822      	ldr	r2, [r4, #0]
 8009564:	bf18      	it	ne
 8009566:	2301      	movne	r3, #1
 8009568:	0692      	lsls	r2, r2, #26
 800956a:	d42b      	bmi.n	80095c4 <_printf_common+0xb0>
 800956c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009570:	4649      	mov	r1, r9
 8009572:	4638      	mov	r0, r7
 8009574:	47c0      	blx	r8
 8009576:	3001      	adds	r0, #1
 8009578:	d01e      	beq.n	80095b8 <_printf_common+0xa4>
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	68e5      	ldr	r5, [r4, #12]
 800957e:	6832      	ldr	r2, [r6, #0]
 8009580:	f003 0306 	and.w	r3, r3, #6
 8009584:	2b04      	cmp	r3, #4
 8009586:	bf08      	it	eq
 8009588:	1aad      	subeq	r5, r5, r2
 800958a:	68a3      	ldr	r3, [r4, #8]
 800958c:	6922      	ldr	r2, [r4, #16]
 800958e:	bf0c      	ite	eq
 8009590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009594:	2500      	movne	r5, #0
 8009596:	4293      	cmp	r3, r2
 8009598:	bfc4      	itt	gt
 800959a:	1a9b      	subgt	r3, r3, r2
 800959c:	18ed      	addgt	r5, r5, r3
 800959e:	2600      	movs	r6, #0
 80095a0:	341a      	adds	r4, #26
 80095a2:	42b5      	cmp	r5, r6
 80095a4:	d11a      	bne.n	80095dc <_printf_common+0xc8>
 80095a6:	2000      	movs	r0, #0
 80095a8:	e008      	b.n	80095bc <_printf_common+0xa8>
 80095aa:	2301      	movs	r3, #1
 80095ac:	4652      	mov	r2, sl
 80095ae:	4649      	mov	r1, r9
 80095b0:	4638      	mov	r0, r7
 80095b2:	47c0      	blx	r8
 80095b4:	3001      	adds	r0, #1
 80095b6:	d103      	bne.n	80095c0 <_printf_common+0xac>
 80095b8:	f04f 30ff 	mov.w	r0, #4294967295
 80095bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c0:	3501      	adds	r5, #1
 80095c2:	e7c6      	b.n	8009552 <_printf_common+0x3e>
 80095c4:	18e1      	adds	r1, r4, r3
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	2030      	movs	r0, #48	; 0x30
 80095ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ce:	4422      	add	r2, r4
 80095d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095d8:	3302      	adds	r3, #2
 80095da:	e7c7      	b.n	800956c <_printf_common+0x58>
 80095dc:	2301      	movs	r3, #1
 80095de:	4622      	mov	r2, r4
 80095e0:	4649      	mov	r1, r9
 80095e2:	4638      	mov	r0, r7
 80095e4:	47c0      	blx	r8
 80095e6:	3001      	adds	r0, #1
 80095e8:	d0e6      	beq.n	80095b8 <_printf_common+0xa4>
 80095ea:	3601      	adds	r6, #1
 80095ec:	e7d9      	b.n	80095a2 <_printf_common+0x8e>
	...

080095f0 <_printf_i>:
 80095f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095f4:	7e0f      	ldrb	r7, [r1, #24]
 80095f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095f8:	2f78      	cmp	r7, #120	; 0x78
 80095fa:	4691      	mov	r9, r2
 80095fc:	4680      	mov	r8, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	469a      	mov	sl, r3
 8009602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009606:	d807      	bhi.n	8009618 <_printf_i+0x28>
 8009608:	2f62      	cmp	r7, #98	; 0x62
 800960a:	d80a      	bhi.n	8009622 <_printf_i+0x32>
 800960c:	2f00      	cmp	r7, #0
 800960e:	f000 80d8 	beq.w	80097c2 <_printf_i+0x1d2>
 8009612:	2f58      	cmp	r7, #88	; 0x58
 8009614:	f000 80a3 	beq.w	800975e <_printf_i+0x16e>
 8009618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800961c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009620:	e03a      	b.n	8009698 <_printf_i+0xa8>
 8009622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009626:	2b15      	cmp	r3, #21
 8009628:	d8f6      	bhi.n	8009618 <_printf_i+0x28>
 800962a:	a101      	add	r1, pc, #4	; (adr r1, 8009630 <_printf_i+0x40>)
 800962c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009630:	08009689 	.word	0x08009689
 8009634:	0800969d 	.word	0x0800969d
 8009638:	08009619 	.word	0x08009619
 800963c:	08009619 	.word	0x08009619
 8009640:	08009619 	.word	0x08009619
 8009644:	08009619 	.word	0x08009619
 8009648:	0800969d 	.word	0x0800969d
 800964c:	08009619 	.word	0x08009619
 8009650:	08009619 	.word	0x08009619
 8009654:	08009619 	.word	0x08009619
 8009658:	08009619 	.word	0x08009619
 800965c:	080097a9 	.word	0x080097a9
 8009660:	080096cd 	.word	0x080096cd
 8009664:	0800978b 	.word	0x0800978b
 8009668:	08009619 	.word	0x08009619
 800966c:	08009619 	.word	0x08009619
 8009670:	080097cb 	.word	0x080097cb
 8009674:	08009619 	.word	0x08009619
 8009678:	080096cd 	.word	0x080096cd
 800967c:	08009619 	.word	0x08009619
 8009680:	08009619 	.word	0x08009619
 8009684:	08009793 	.word	0x08009793
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	1d1a      	adds	r2, r3, #4
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	602a      	str	r2, [r5, #0]
 8009690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009698:	2301      	movs	r3, #1
 800969a:	e0a3      	b.n	80097e4 <_printf_i+0x1f4>
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	6829      	ldr	r1, [r5, #0]
 80096a0:	0606      	lsls	r6, r0, #24
 80096a2:	f101 0304 	add.w	r3, r1, #4
 80096a6:	d50a      	bpl.n	80096be <_printf_i+0xce>
 80096a8:	680e      	ldr	r6, [r1, #0]
 80096aa:	602b      	str	r3, [r5, #0]
 80096ac:	2e00      	cmp	r6, #0
 80096ae:	da03      	bge.n	80096b8 <_printf_i+0xc8>
 80096b0:	232d      	movs	r3, #45	; 0x2d
 80096b2:	4276      	negs	r6, r6
 80096b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096b8:	485e      	ldr	r0, [pc, #376]	; (8009834 <_printf_i+0x244>)
 80096ba:	230a      	movs	r3, #10
 80096bc:	e019      	b.n	80096f2 <_printf_i+0x102>
 80096be:	680e      	ldr	r6, [r1, #0]
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096c6:	bf18      	it	ne
 80096c8:	b236      	sxthne	r6, r6
 80096ca:	e7ef      	b.n	80096ac <_printf_i+0xbc>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	6820      	ldr	r0, [r4, #0]
 80096d0:	1d19      	adds	r1, r3, #4
 80096d2:	6029      	str	r1, [r5, #0]
 80096d4:	0601      	lsls	r1, r0, #24
 80096d6:	d501      	bpl.n	80096dc <_printf_i+0xec>
 80096d8:	681e      	ldr	r6, [r3, #0]
 80096da:	e002      	b.n	80096e2 <_printf_i+0xf2>
 80096dc:	0646      	lsls	r6, r0, #25
 80096de:	d5fb      	bpl.n	80096d8 <_printf_i+0xe8>
 80096e0:	881e      	ldrh	r6, [r3, #0]
 80096e2:	4854      	ldr	r0, [pc, #336]	; (8009834 <_printf_i+0x244>)
 80096e4:	2f6f      	cmp	r7, #111	; 0x6f
 80096e6:	bf0c      	ite	eq
 80096e8:	2308      	moveq	r3, #8
 80096ea:	230a      	movne	r3, #10
 80096ec:	2100      	movs	r1, #0
 80096ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096f2:	6865      	ldr	r5, [r4, #4]
 80096f4:	60a5      	str	r5, [r4, #8]
 80096f6:	2d00      	cmp	r5, #0
 80096f8:	bfa2      	ittt	ge
 80096fa:	6821      	ldrge	r1, [r4, #0]
 80096fc:	f021 0104 	bicge.w	r1, r1, #4
 8009700:	6021      	strge	r1, [r4, #0]
 8009702:	b90e      	cbnz	r6, 8009708 <_printf_i+0x118>
 8009704:	2d00      	cmp	r5, #0
 8009706:	d04d      	beq.n	80097a4 <_printf_i+0x1b4>
 8009708:	4615      	mov	r5, r2
 800970a:	fbb6 f1f3 	udiv	r1, r6, r3
 800970e:	fb03 6711 	mls	r7, r3, r1, r6
 8009712:	5dc7      	ldrb	r7, [r0, r7]
 8009714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009718:	4637      	mov	r7, r6
 800971a:	42bb      	cmp	r3, r7
 800971c:	460e      	mov	r6, r1
 800971e:	d9f4      	bls.n	800970a <_printf_i+0x11a>
 8009720:	2b08      	cmp	r3, #8
 8009722:	d10b      	bne.n	800973c <_printf_i+0x14c>
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	07de      	lsls	r6, r3, #31
 8009728:	d508      	bpl.n	800973c <_printf_i+0x14c>
 800972a:	6923      	ldr	r3, [r4, #16]
 800972c:	6861      	ldr	r1, [r4, #4]
 800972e:	4299      	cmp	r1, r3
 8009730:	bfde      	ittt	le
 8009732:	2330      	movle	r3, #48	; 0x30
 8009734:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009738:	f105 35ff 	addle.w	r5, r5, #4294967295
 800973c:	1b52      	subs	r2, r2, r5
 800973e:	6122      	str	r2, [r4, #16]
 8009740:	f8cd a000 	str.w	sl, [sp]
 8009744:	464b      	mov	r3, r9
 8009746:	aa03      	add	r2, sp, #12
 8009748:	4621      	mov	r1, r4
 800974a:	4640      	mov	r0, r8
 800974c:	f7ff fee2 	bl	8009514 <_printf_common>
 8009750:	3001      	adds	r0, #1
 8009752:	d14c      	bne.n	80097ee <_printf_i+0x1fe>
 8009754:	f04f 30ff 	mov.w	r0, #4294967295
 8009758:	b004      	add	sp, #16
 800975a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975e:	4835      	ldr	r0, [pc, #212]	; (8009834 <_printf_i+0x244>)
 8009760:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009764:	6829      	ldr	r1, [r5, #0]
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	f851 6b04 	ldr.w	r6, [r1], #4
 800976c:	6029      	str	r1, [r5, #0]
 800976e:	061d      	lsls	r5, r3, #24
 8009770:	d514      	bpl.n	800979c <_printf_i+0x1ac>
 8009772:	07df      	lsls	r7, r3, #31
 8009774:	bf44      	itt	mi
 8009776:	f043 0320 	orrmi.w	r3, r3, #32
 800977a:	6023      	strmi	r3, [r4, #0]
 800977c:	b91e      	cbnz	r6, 8009786 <_printf_i+0x196>
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	f023 0320 	bic.w	r3, r3, #32
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	2310      	movs	r3, #16
 8009788:	e7b0      	b.n	80096ec <_printf_i+0xfc>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	f043 0320 	orr.w	r3, r3, #32
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	2378      	movs	r3, #120	; 0x78
 8009794:	4828      	ldr	r0, [pc, #160]	; (8009838 <_printf_i+0x248>)
 8009796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800979a:	e7e3      	b.n	8009764 <_printf_i+0x174>
 800979c:	0659      	lsls	r1, r3, #25
 800979e:	bf48      	it	mi
 80097a0:	b2b6      	uxthmi	r6, r6
 80097a2:	e7e6      	b.n	8009772 <_printf_i+0x182>
 80097a4:	4615      	mov	r5, r2
 80097a6:	e7bb      	b.n	8009720 <_printf_i+0x130>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	6826      	ldr	r6, [r4, #0]
 80097ac:	6961      	ldr	r1, [r4, #20]
 80097ae:	1d18      	adds	r0, r3, #4
 80097b0:	6028      	str	r0, [r5, #0]
 80097b2:	0635      	lsls	r5, r6, #24
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	d501      	bpl.n	80097bc <_printf_i+0x1cc>
 80097b8:	6019      	str	r1, [r3, #0]
 80097ba:	e002      	b.n	80097c2 <_printf_i+0x1d2>
 80097bc:	0670      	lsls	r0, r6, #25
 80097be:	d5fb      	bpl.n	80097b8 <_printf_i+0x1c8>
 80097c0:	8019      	strh	r1, [r3, #0]
 80097c2:	2300      	movs	r3, #0
 80097c4:	6123      	str	r3, [r4, #16]
 80097c6:	4615      	mov	r5, r2
 80097c8:	e7ba      	b.n	8009740 <_printf_i+0x150>
 80097ca:	682b      	ldr	r3, [r5, #0]
 80097cc:	1d1a      	adds	r2, r3, #4
 80097ce:	602a      	str	r2, [r5, #0]
 80097d0:	681d      	ldr	r5, [r3, #0]
 80097d2:	6862      	ldr	r2, [r4, #4]
 80097d4:	2100      	movs	r1, #0
 80097d6:	4628      	mov	r0, r5
 80097d8:	f7f6 fd0a 	bl	80001f0 <memchr>
 80097dc:	b108      	cbz	r0, 80097e2 <_printf_i+0x1f2>
 80097de:	1b40      	subs	r0, r0, r5
 80097e0:	6060      	str	r0, [r4, #4]
 80097e2:	6863      	ldr	r3, [r4, #4]
 80097e4:	6123      	str	r3, [r4, #16]
 80097e6:	2300      	movs	r3, #0
 80097e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ec:	e7a8      	b.n	8009740 <_printf_i+0x150>
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	462a      	mov	r2, r5
 80097f2:	4649      	mov	r1, r9
 80097f4:	4640      	mov	r0, r8
 80097f6:	47d0      	blx	sl
 80097f8:	3001      	adds	r0, #1
 80097fa:	d0ab      	beq.n	8009754 <_printf_i+0x164>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	079b      	lsls	r3, r3, #30
 8009800:	d413      	bmi.n	800982a <_printf_i+0x23a>
 8009802:	68e0      	ldr	r0, [r4, #12]
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	4298      	cmp	r0, r3
 8009808:	bfb8      	it	lt
 800980a:	4618      	movlt	r0, r3
 800980c:	e7a4      	b.n	8009758 <_printf_i+0x168>
 800980e:	2301      	movs	r3, #1
 8009810:	4632      	mov	r2, r6
 8009812:	4649      	mov	r1, r9
 8009814:	4640      	mov	r0, r8
 8009816:	47d0      	blx	sl
 8009818:	3001      	adds	r0, #1
 800981a:	d09b      	beq.n	8009754 <_printf_i+0x164>
 800981c:	3501      	adds	r5, #1
 800981e:	68e3      	ldr	r3, [r4, #12]
 8009820:	9903      	ldr	r1, [sp, #12]
 8009822:	1a5b      	subs	r3, r3, r1
 8009824:	42ab      	cmp	r3, r5
 8009826:	dcf2      	bgt.n	800980e <_printf_i+0x21e>
 8009828:	e7eb      	b.n	8009802 <_printf_i+0x212>
 800982a:	2500      	movs	r5, #0
 800982c:	f104 0619 	add.w	r6, r4, #25
 8009830:	e7f5      	b.n	800981e <_printf_i+0x22e>
 8009832:	bf00      	nop
 8009834:	0800bdfa 	.word	0x0800bdfa
 8009838:	0800be0b 	.word	0x0800be0b

0800983c <siprintf>:
 800983c:	b40e      	push	{r1, r2, r3}
 800983e:	b500      	push	{lr}
 8009840:	b09c      	sub	sp, #112	; 0x70
 8009842:	ab1d      	add	r3, sp, #116	; 0x74
 8009844:	9002      	str	r0, [sp, #8]
 8009846:	9006      	str	r0, [sp, #24]
 8009848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800984c:	4809      	ldr	r0, [pc, #36]	; (8009874 <siprintf+0x38>)
 800984e:	9107      	str	r1, [sp, #28]
 8009850:	9104      	str	r1, [sp, #16]
 8009852:	4909      	ldr	r1, [pc, #36]	; (8009878 <siprintf+0x3c>)
 8009854:	f853 2b04 	ldr.w	r2, [r3], #4
 8009858:	9105      	str	r1, [sp, #20]
 800985a:	6800      	ldr	r0, [r0, #0]
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	a902      	add	r1, sp, #8
 8009860:	f001 fb78 	bl	800af54 <_svfiprintf_r>
 8009864:	9b02      	ldr	r3, [sp, #8]
 8009866:	2200      	movs	r2, #0
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	b01c      	add	sp, #112	; 0x70
 800986c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009870:	b003      	add	sp, #12
 8009872:	4770      	bx	lr
 8009874:	20000198 	.word	0x20000198
 8009878:	ffff0208 	.word	0xffff0208

0800987c <quorem>:
 800987c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	6903      	ldr	r3, [r0, #16]
 8009882:	690c      	ldr	r4, [r1, #16]
 8009884:	42a3      	cmp	r3, r4
 8009886:	4607      	mov	r7, r0
 8009888:	f2c0 8081 	blt.w	800998e <quorem+0x112>
 800988c:	3c01      	subs	r4, #1
 800988e:	f101 0814 	add.w	r8, r1, #20
 8009892:	f100 0514 	add.w	r5, r0, #20
 8009896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098a4:	3301      	adds	r3, #1
 80098a6:	429a      	cmp	r2, r3
 80098a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80098b4:	d331      	bcc.n	800991a <quorem+0x9e>
 80098b6:	f04f 0e00 	mov.w	lr, #0
 80098ba:	4640      	mov	r0, r8
 80098bc:	46ac      	mov	ip, r5
 80098be:	46f2      	mov	sl, lr
 80098c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80098c4:	b293      	uxth	r3, r2
 80098c6:	fb06 e303 	mla	r3, r6, r3, lr
 80098ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	ebaa 0303 	sub.w	r3, sl, r3
 80098d4:	f8dc a000 	ldr.w	sl, [ip]
 80098d8:	0c12      	lsrs	r2, r2, #16
 80098da:	fa13 f38a 	uxtah	r3, r3, sl
 80098de:	fb06 e202 	mla	r2, r6, r2, lr
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	9b00      	ldr	r3, [sp, #0]
 80098e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098ea:	b292      	uxth	r2, r2
 80098ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80098f8:	4581      	cmp	r9, r0
 80098fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098fe:	f84c 3b04 	str.w	r3, [ip], #4
 8009902:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009906:	d2db      	bcs.n	80098c0 <quorem+0x44>
 8009908:	f855 300b 	ldr.w	r3, [r5, fp]
 800990c:	b92b      	cbnz	r3, 800991a <quorem+0x9e>
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	3b04      	subs	r3, #4
 8009912:	429d      	cmp	r5, r3
 8009914:	461a      	mov	r2, r3
 8009916:	d32e      	bcc.n	8009976 <quorem+0xfa>
 8009918:	613c      	str	r4, [r7, #16]
 800991a:	4638      	mov	r0, r7
 800991c:	f001 f8c6 	bl	800aaac <__mcmp>
 8009920:	2800      	cmp	r0, #0
 8009922:	db24      	blt.n	800996e <quorem+0xf2>
 8009924:	3601      	adds	r6, #1
 8009926:	4628      	mov	r0, r5
 8009928:	f04f 0c00 	mov.w	ip, #0
 800992c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009930:	f8d0 e000 	ldr.w	lr, [r0]
 8009934:	b293      	uxth	r3, r2
 8009936:	ebac 0303 	sub.w	r3, ip, r3
 800993a:	0c12      	lsrs	r2, r2, #16
 800993c:	fa13 f38e 	uxtah	r3, r3, lr
 8009940:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009948:	b29b      	uxth	r3, r3
 800994a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800994e:	45c1      	cmp	r9, r8
 8009950:	f840 3b04 	str.w	r3, [r0], #4
 8009954:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009958:	d2e8      	bcs.n	800992c <quorem+0xb0>
 800995a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800995e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009962:	b922      	cbnz	r2, 800996e <quorem+0xf2>
 8009964:	3b04      	subs	r3, #4
 8009966:	429d      	cmp	r5, r3
 8009968:	461a      	mov	r2, r3
 800996a:	d30a      	bcc.n	8009982 <quorem+0x106>
 800996c:	613c      	str	r4, [r7, #16]
 800996e:	4630      	mov	r0, r6
 8009970:	b003      	add	sp, #12
 8009972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009976:	6812      	ldr	r2, [r2, #0]
 8009978:	3b04      	subs	r3, #4
 800997a:	2a00      	cmp	r2, #0
 800997c:	d1cc      	bne.n	8009918 <quorem+0x9c>
 800997e:	3c01      	subs	r4, #1
 8009980:	e7c7      	b.n	8009912 <quorem+0x96>
 8009982:	6812      	ldr	r2, [r2, #0]
 8009984:	3b04      	subs	r3, #4
 8009986:	2a00      	cmp	r2, #0
 8009988:	d1f0      	bne.n	800996c <quorem+0xf0>
 800998a:	3c01      	subs	r4, #1
 800998c:	e7eb      	b.n	8009966 <quorem+0xea>
 800998e:	2000      	movs	r0, #0
 8009990:	e7ee      	b.n	8009970 <quorem+0xf4>
 8009992:	0000      	movs	r0, r0
 8009994:	0000      	movs	r0, r0
	...

08009998 <_dtoa_r>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	ed2d 8b04 	vpush	{d8-d9}
 80099a0:	ec57 6b10 	vmov	r6, r7, d0
 80099a4:	b093      	sub	sp, #76	; 0x4c
 80099a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099ac:	9106      	str	r1, [sp, #24]
 80099ae:	ee10 aa10 	vmov	sl, s0
 80099b2:	4604      	mov	r4, r0
 80099b4:	9209      	str	r2, [sp, #36]	; 0x24
 80099b6:	930c      	str	r3, [sp, #48]	; 0x30
 80099b8:	46bb      	mov	fp, r7
 80099ba:	b975      	cbnz	r5, 80099da <_dtoa_r+0x42>
 80099bc:	2010      	movs	r0, #16
 80099be:	f000 fddd 	bl	800a57c <malloc>
 80099c2:	4602      	mov	r2, r0
 80099c4:	6260      	str	r0, [r4, #36]	; 0x24
 80099c6:	b920      	cbnz	r0, 80099d2 <_dtoa_r+0x3a>
 80099c8:	4ba7      	ldr	r3, [pc, #668]	; (8009c68 <_dtoa_r+0x2d0>)
 80099ca:	21ea      	movs	r1, #234	; 0xea
 80099cc:	48a7      	ldr	r0, [pc, #668]	; (8009c6c <_dtoa_r+0x2d4>)
 80099ce:	f001 fbd1 	bl	800b174 <__assert_func>
 80099d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099d6:	6005      	str	r5, [r0, #0]
 80099d8:	60c5      	str	r5, [r0, #12]
 80099da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099dc:	6819      	ldr	r1, [r3, #0]
 80099de:	b151      	cbz	r1, 80099f6 <_dtoa_r+0x5e>
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	604a      	str	r2, [r1, #4]
 80099e4:	2301      	movs	r3, #1
 80099e6:	4093      	lsls	r3, r2
 80099e8:	608b      	str	r3, [r1, #8]
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 fe1c 	bl	800a628 <_Bfree>
 80099f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099f2:	2200      	movs	r2, #0
 80099f4:	601a      	str	r2, [r3, #0]
 80099f6:	1e3b      	subs	r3, r7, #0
 80099f8:	bfaa      	itet	ge
 80099fa:	2300      	movge	r3, #0
 80099fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a00:	f8c8 3000 	strge.w	r3, [r8]
 8009a04:	4b9a      	ldr	r3, [pc, #616]	; (8009c70 <_dtoa_r+0x2d8>)
 8009a06:	bfbc      	itt	lt
 8009a08:	2201      	movlt	r2, #1
 8009a0a:	f8c8 2000 	strlt.w	r2, [r8]
 8009a0e:	ea33 030b 	bics.w	r3, r3, fp
 8009a12:	d11b      	bne.n	8009a4c <_dtoa_r+0xb4>
 8009a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a16:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a20:	4333      	orrs	r3, r6
 8009a22:	f000 8592 	beq.w	800a54a <_dtoa_r+0xbb2>
 8009a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a28:	b963      	cbnz	r3, 8009a44 <_dtoa_r+0xac>
 8009a2a:	4b92      	ldr	r3, [pc, #584]	; (8009c74 <_dtoa_r+0x2dc>)
 8009a2c:	e022      	b.n	8009a74 <_dtoa_r+0xdc>
 8009a2e:	4b92      	ldr	r3, [pc, #584]	; (8009c78 <_dtoa_r+0x2e0>)
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	3308      	adds	r3, #8
 8009a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	9801      	ldr	r0, [sp, #4]
 8009a3a:	b013      	add	sp, #76	; 0x4c
 8009a3c:	ecbd 8b04 	vpop	{d8-d9}
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a44:	4b8b      	ldr	r3, [pc, #556]	; (8009c74 <_dtoa_r+0x2dc>)
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	3303      	adds	r3, #3
 8009a4a:	e7f3      	b.n	8009a34 <_dtoa_r+0x9c>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4650      	mov	r0, sl
 8009a52:	4659      	mov	r1, fp
 8009a54:	f7f7 f840 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a58:	ec4b ab19 	vmov	d9, sl, fp
 8009a5c:	4680      	mov	r8, r0
 8009a5e:	b158      	cbz	r0, 8009a78 <_dtoa_r+0xe0>
 8009a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a62:	2301      	movs	r3, #1
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 856b 	beq.w	800a544 <_dtoa_r+0xbac>
 8009a6e:	4883      	ldr	r0, [pc, #524]	; (8009c7c <_dtoa_r+0x2e4>)
 8009a70:	6018      	str	r0, [r3, #0]
 8009a72:	1e43      	subs	r3, r0, #1
 8009a74:	9301      	str	r3, [sp, #4]
 8009a76:	e7df      	b.n	8009a38 <_dtoa_r+0xa0>
 8009a78:	ec4b ab10 	vmov	d0, sl, fp
 8009a7c:	aa10      	add	r2, sp, #64	; 0x40
 8009a7e:	a911      	add	r1, sp, #68	; 0x44
 8009a80:	4620      	mov	r0, r4
 8009a82:	f001 f8b9 	bl	800abf8 <__d2b>
 8009a86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009a8a:	ee08 0a10 	vmov	s16, r0
 8009a8e:	2d00      	cmp	r5, #0
 8009a90:	f000 8084 	beq.w	8009b9c <_dtoa_r+0x204>
 8009a94:	ee19 3a90 	vmov	r3, s19
 8009a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009aa0:	4656      	mov	r6, sl
 8009aa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009aa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009aaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009aae:	4b74      	ldr	r3, [pc, #464]	; (8009c80 <_dtoa_r+0x2e8>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	f7f6 fbef 	bl	8000298 <__aeabi_dsub>
 8009aba:	a365      	add	r3, pc, #404	; (adr r3, 8009c50 <_dtoa_r+0x2b8>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fda2 	bl	8000608 <__aeabi_dmul>
 8009ac4:	a364      	add	r3, pc, #400	; (adr r3, 8009c58 <_dtoa_r+0x2c0>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f7f6 fbe7 	bl	800029c <__adddf3>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	460f      	mov	r7, r1
 8009ad4:	f7f6 fd2e 	bl	8000534 <__aeabi_i2d>
 8009ad8:	a361      	add	r3, pc, #388	; (adr r3, 8009c60 <_dtoa_r+0x2c8>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f7f6 fd93 	bl	8000608 <__aeabi_dmul>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	4639      	mov	r1, r7
 8009aea:	f7f6 fbd7 	bl	800029c <__adddf3>
 8009aee:	4606      	mov	r6, r0
 8009af0:	460f      	mov	r7, r1
 8009af2:	f7f7 f839 	bl	8000b68 <__aeabi_d2iz>
 8009af6:	2200      	movs	r2, #0
 8009af8:	9000      	str	r0, [sp, #0]
 8009afa:	2300      	movs	r3, #0
 8009afc:	4630      	mov	r0, r6
 8009afe:	4639      	mov	r1, r7
 8009b00:	f7f6 fff4 	bl	8000aec <__aeabi_dcmplt>
 8009b04:	b150      	cbz	r0, 8009b1c <_dtoa_r+0x184>
 8009b06:	9800      	ldr	r0, [sp, #0]
 8009b08:	f7f6 fd14 	bl	8000534 <__aeabi_i2d>
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	463b      	mov	r3, r7
 8009b10:	f7f6 ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b14:	b910      	cbnz	r0, 8009b1c <_dtoa_r+0x184>
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	9b00      	ldr	r3, [sp, #0]
 8009b1e:	2b16      	cmp	r3, #22
 8009b20:	d85a      	bhi.n	8009bd8 <_dtoa_r+0x240>
 8009b22:	9a00      	ldr	r2, [sp, #0]
 8009b24:	4b57      	ldr	r3, [pc, #348]	; (8009c84 <_dtoa_r+0x2ec>)
 8009b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	ec51 0b19 	vmov	r0, r1, d9
 8009b32:	f7f6 ffdb 	bl	8000aec <__aeabi_dcmplt>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d050      	beq.n	8009bdc <_dtoa_r+0x244>
 8009b3a:	9b00      	ldr	r3, [sp, #0]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	2300      	movs	r3, #0
 8009b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b46:	1b5d      	subs	r5, r3, r5
 8009b48:	1e6b      	subs	r3, r5, #1
 8009b4a:	9305      	str	r3, [sp, #20]
 8009b4c:	bf45      	ittet	mi
 8009b4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b52:	9304      	strmi	r3, [sp, #16]
 8009b54:	2300      	movpl	r3, #0
 8009b56:	2300      	movmi	r3, #0
 8009b58:	bf4c      	ite	mi
 8009b5a:	9305      	strmi	r3, [sp, #20]
 8009b5c:	9304      	strpl	r3, [sp, #16]
 8009b5e:	9b00      	ldr	r3, [sp, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	db3d      	blt.n	8009be0 <_dtoa_r+0x248>
 8009b64:	9b05      	ldr	r3, [sp, #20]
 8009b66:	9a00      	ldr	r2, [sp, #0]
 8009b68:	920a      	str	r2, [sp, #40]	; 0x28
 8009b6a:	4413      	add	r3, r2
 8009b6c:	9305      	str	r3, [sp, #20]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9307      	str	r3, [sp, #28]
 8009b72:	9b06      	ldr	r3, [sp, #24]
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	f200 8089 	bhi.w	8009c8c <_dtoa_r+0x2f4>
 8009b7a:	2b05      	cmp	r3, #5
 8009b7c:	bfc4      	itt	gt
 8009b7e:	3b04      	subgt	r3, #4
 8009b80:	9306      	strgt	r3, [sp, #24]
 8009b82:	9b06      	ldr	r3, [sp, #24]
 8009b84:	f1a3 0302 	sub.w	r3, r3, #2
 8009b88:	bfcc      	ite	gt
 8009b8a:	2500      	movgt	r5, #0
 8009b8c:	2501      	movle	r5, #1
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	f200 8087 	bhi.w	8009ca2 <_dtoa_r+0x30a>
 8009b94:	e8df f003 	tbb	[pc, r3]
 8009b98:	59383a2d 	.word	0x59383a2d
 8009b9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009ba0:	441d      	add	r5, r3
 8009ba2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ba6:	2b20      	cmp	r3, #32
 8009ba8:	bfc1      	itttt	gt
 8009baa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009bb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009bb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009bba:	bfda      	itte	le
 8009bbc:	f1c3 0320 	rsble	r3, r3, #32
 8009bc0:	fa06 f003 	lslle.w	r0, r6, r3
 8009bc4:	4318      	orrgt	r0, r3
 8009bc6:	f7f6 fca5 	bl	8000514 <__aeabi_ui2d>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	4606      	mov	r6, r0
 8009bce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009bd2:	3d01      	subs	r5, #1
 8009bd4:	930e      	str	r3, [sp, #56]	; 0x38
 8009bd6:	e76a      	b.n	8009aae <_dtoa_r+0x116>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e7b2      	b.n	8009b42 <_dtoa_r+0x1aa>
 8009bdc:	900b      	str	r0, [sp, #44]	; 0x2c
 8009bde:	e7b1      	b.n	8009b44 <_dtoa_r+0x1ac>
 8009be0:	9b04      	ldr	r3, [sp, #16]
 8009be2:	9a00      	ldr	r2, [sp, #0]
 8009be4:	1a9b      	subs	r3, r3, r2
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	4253      	negs	r3, r2
 8009bea:	9307      	str	r3, [sp, #28]
 8009bec:	2300      	movs	r3, #0
 8009bee:	930a      	str	r3, [sp, #40]	; 0x28
 8009bf0:	e7bf      	b.n	8009b72 <_dtoa_r+0x1da>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9308      	str	r3, [sp, #32]
 8009bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	dc55      	bgt.n	8009ca8 <_dtoa_r+0x310>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c02:	461a      	mov	r2, r3
 8009c04:	9209      	str	r2, [sp, #36]	; 0x24
 8009c06:	e00c      	b.n	8009c22 <_dtoa_r+0x28a>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e7f3      	b.n	8009bf4 <_dtoa_r+0x25c>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c10:	9308      	str	r3, [sp, #32]
 8009c12:	9b00      	ldr	r3, [sp, #0]
 8009c14:	4413      	add	r3, r2
 8009c16:	9302      	str	r3, [sp, #8]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	9303      	str	r3, [sp, #12]
 8009c1e:	bfb8      	it	lt
 8009c20:	2301      	movlt	r3, #1
 8009c22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c24:	2200      	movs	r2, #0
 8009c26:	6042      	str	r2, [r0, #4]
 8009c28:	2204      	movs	r2, #4
 8009c2a:	f102 0614 	add.w	r6, r2, #20
 8009c2e:	429e      	cmp	r6, r3
 8009c30:	6841      	ldr	r1, [r0, #4]
 8009c32:	d93d      	bls.n	8009cb0 <_dtoa_r+0x318>
 8009c34:	4620      	mov	r0, r4
 8009c36:	f000 fcb7 	bl	800a5a8 <_Balloc>
 8009c3a:	9001      	str	r0, [sp, #4]
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d13b      	bne.n	8009cb8 <_dtoa_r+0x320>
 8009c40:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <_dtoa_r+0x2f0>)
 8009c42:	4602      	mov	r2, r0
 8009c44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c48:	e6c0      	b.n	80099cc <_dtoa_r+0x34>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e7df      	b.n	8009c0e <_dtoa_r+0x276>
 8009c4e:	bf00      	nop
 8009c50:	636f4361 	.word	0x636f4361
 8009c54:	3fd287a7 	.word	0x3fd287a7
 8009c58:	8b60c8b3 	.word	0x8b60c8b3
 8009c5c:	3fc68a28 	.word	0x3fc68a28
 8009c60:	509f79fb 	.word	0x509f79fb
 8009c64:	3fd34413 	.word	0x3fd34413
 8009c68:	0800be29 	.word	0x0800be29
 8009c6c:	0800be40 	.word	0x0800be40
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	0800be25 	.word	0x0800be25
 8009c78:	0800be1c 	.word	0x0800be1c
 8009c7c:	0800bdf9 	.word	0x0800bdf9
 8009c80:	3ff80000 	.word	0x3ff80000
 8009c84:	0800bf30 	.word	0x0800bf30
 8009c88:	0800be9b 	.word	0x0800be9b
 8009c8c:	2501      	movs	r5, #1
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9306      	str	r3, [sp, #24]
 8009c92:	9508      	str	r5, [sp, #32]
 8009c94:	f04f 33ff 	mov.w	r3, #4294967295
 8009c98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2312      	movs	r3, #18
 8009ca0:	e7b0      	b.n	8009c04 <_dtoa_r+0x26c>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	9308      	str	r3, [sp, #32]
 8009ca6:	e7f5      	b.n	8009c94 <_dtoa_r+0x2fc>
 8009ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009caa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cae:	e7b8      	b.n	8009c22 <_dtoa_r+0x28a>
 8009cb0:	3101      	adds	r1, #1
 8009cb2:	6041      	str	r1, [r0, #4]
 8009cb4:	0052      	lsls	r2, r2, #1
 8009cb6:	e7b8      	b.n	8009c2a <_dtoa_r+0x292>
 8009cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cba:	9a01      	ldr	r2, [sp, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	2b0e      	cmp	r3, #14
 8009cc2:	f200 809d 	bhi.w	8009e00 <_dtoa_r+0x468>
 8009cc6:	2d00      	cmp	r5, #0
 8009cc8:	f000 809a 	beq.w	8009e00 <_dtoa_r+0x468>
 8009ccc:	9b00      	ldr	r3, [sp, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	dd32      	ble.n	8009d38 <_dtoa_r+0x3a0>
 8009cd2:	4ab7      	ldr	r2, [pc, #732]	; (8009fb0 <_dtoa_r+0x618>)
 8009cd4:	f003 030f 	and.w	r3, r3, #15
 8009cd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ce0:	9b00      	ldr	r3, [sp, #0]
 8009ce2:	05d8      	lsls	r0, r3, #23
 8009ce4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009ce8:	d516      	bpl.n	8009d18 <_dtoa_r+0x380>
 8009cea:	4bb2      	ldr	r3, [pc, #712]	; (8009fb4 <_dtoa_r+0x61c>)
 8009cec:	ec51 0b19 	vmov	r0, r1, d9
 8009cf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cf4:	f7f6 fdb2 	bl	800085c <__aeabi_ddiv>
 8009cf8:	f007 070f 	and.w	r7, r7, #15
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	468b      	mov	fp, r1
 8009d00:	2503      	movs	r5, #3
 8009d02:	4eac      	ldr	r6, [pc, #688]	; (8009fb4 <_dtoa_r+0x61c>)
 8009d04:	b957      	cbnz	r7, 8009d1c <_dtoa_r+0x384>
 8009d06:	4642      	mov	r2, r8
 8009d08:	464b      	mov	r3, r9
 8009d0a:	4650      	mov	r0, sl
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	f7f6 fda5 	bl	800085c <__aeabi_ddiv>
 8009d12:	4682      	mov	sl, r0
 8009d14:	468b      	mov	fp, r1
 8009d16:	e028      	b.n	8009d6a <_dtoa_r+0x3d2>
 8009d18:	2502      	movs	r5, #2
 8009d1a:	e7f2      	b.n	8009d02 <_dtoa_r+0x36a>
 8009d1c:	07f9      	lsls	r1, r7, #31
 8009d1e:	d508      	bpl.n	8009d32 <_dtoa_r+0x39a>
 8009d20:	4640      	mov	r0, r8
 8009d22:	4649      	mov	r1, r9
 8009d24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d28:	f7f6 fc6e 	bl	8000608 <__aeabi_dmul>
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	4680      	mov	r8, r0
 8009d30:	4689      	mov	r9, r1
 8009d32:	107f      	asrs	r7, r7, #1
 8009d34:	3608      	adds	r6, #8
 8009d36:	e7e5      	b.n	8009d04 <_dtoa_r+0x36c>
 8009d38:	f000 809b 	beq.w	8009e72 <_dtoa_r+0x4da>
 8009d3c:	9b00      	ldr	r3, [sp, #0]
 8009d3e:	4f9d      	ldr	r7, [pc, #628]	; (8009fb4 <_dtoa_r+0x61c>)
 8009d40:	425e      	negs	r6, r3
 8009d42:	4b9b      	ldr	r3, [pc, #620]	; (8009fb0 <_dtoa_r+0x618>)
 8009d44:	f006 020f 	and.w	r2, r6, #15
 8009d48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	ec51 0b19 	vmov	r0, r1, d9
 8009d54:	f7f6 fc58 	bl	8000608 <__aeabi_dmul>
 8009d58:	1136      	asrs	r6, r6, #4
 8009d5a:	4682      	mov	sl, r0
 8009d5c:	468b      	mov	fp, r1
 8009d5e:	2300      	movs	r3, #0
 8009d60:	2502      	movs	r5, #2
 8009d62:	2e00      	cmp	r6, #0
 8009d64:	d17a      	bne.n	8009e5c <_dtoa_r+0x4c4>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1d3      	bne.n	8009d12 <_dtoa_r+0x37a>
 8009d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8082 	beq.w	8009e76 <_dtoa_r+0x4de>
 8009d72:	4b91      	ldr	r3, [pc, #580]	; (8009fb8 <_dtoa_r+0x620>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	4650      	mov	r0, sl
 8009d78:	4659      	mov	r1, fp
 8009d7a:	f7f6 feb7 	bl	8000aec <__aeabi_dcmplt>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d079      	beq.n	8009e76 <_dtoa_r+0x4de>
 8009d82:	9b03      	ldr	r3, [sp, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d076      	beq.n	8009e76 <_dtoa_r+0x4de>
 8009d88:	9b02      	ldr	r3, [sp, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dd36      	ble.n	8009dfc <_dtoa_r+0x464>
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	4650      	mov	r0, sl
 8009d92:	4659      	mov	r1, fp
 8009d94:	1e5f      	subs	r7, r3, #1
 8009d96:	2200      	movs	r2, #0
 8009d98:	4b88      	ldr	r3, [pc, #544]	; (8009fbc <_dtoa_r+0x624>)
 8009d9a:	f7f6 fc35 	bl	8000608 <__aeabi_dmul>
 8009d9e:	9e02      	ldr	r6, [sp, #8]
 8009da0:	4682      	mov	sl, r0
 8009da2:	468b      	mov	fp, r1
 8009da4:	3501      	adds	r5, #1
 8009da6:	4628      	mov	r0, r5
 8009da8:	f7f6 fbc4 	bl	8000534 <__aeabi_i2d>
 8009dac:	4652      	mov	r2, sl
 8009dae:	465b      	mov	r3, fp
 8009db0:	f7f6 fc2a 	bl	8000608 <__aeabi_dmul>
 8009db4:	4b82      	ldr	r3, [pc, #520]	; (8009fc0 <_dtoa_r+0x628>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	f7f6 fa70 	bl	800029c <__adddf3>
 8009dbc:	46d0      	mov	r8, sl
 8009dbe:	46d9      	mov	r9, fp
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009dc6:	2e00      	cmp	r6, #0
 8009dc8:	d158      	bne.n	8009e7c <_dtoa_r+0x4e4>
 8009dca:	4b7e      	ldr	r3, [pc, #504]	; (8009fc4 <_dtoa_r+0x62c>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4640      	mov	r0, r8
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	f7f6 fa61 	bl	8000298 <__aeabi_dsub>
 8009dd6:	4652      	mov	r2, sl
 8009dd8:	465b      	mov	r3, fp
 8009dda:	4680      	mov	r8, r0
 8009ddc:	4689      	mov	r9, r1
 8009dde:	f7f6 fea3 	bl	8000b28 <__aeabi_dcmpgt>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f040 8295 	bne.w	800a312 <_dtoa_r+0x97a>
 8009de8:	4652      	mov	r2, sl
 8009dea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009dee:	4640      	mov	r0, r8
 8009df0:	4649      	mov	r1, r9
 8009df2:	f7f6 fe7b 	bl	8000aec <__aeabi_dcmplt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f040 8289 	bne.w	800a30e <_dtoa_r+0x976>
 8009dfc:	ec5b ab19 	vmov	sl, fp, d9
 8009e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f2c0 8148 	blt.w	800a098 <_dtoa_r+0x700>
 8009e08:	9a00      	ldr	r2, [sp, #0]
 8009e0a:	2a0e      	cmp	r2, #14
 8009e0c:	f300 8144 	bgt.w	800a098 <_dtoa_r+0x700>
 8009e10:	4b67      	ldr	r3, [pc, #412]	; (8009fb0 <_dtoa_r+0x618>)
 8009e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f280 80d5 	bge.w	8009fcc <_dtoa_r+0x634>
 8009e22:	9b03      	ldr	r3, [sp, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f300 80d1 	bgt.w	8009fcc <_dtoa_r+0x634>
 8009e2a:	f040 826f 	bne.w	800a30c <_dtoa_r+0x974>
 8009e2e:	4b65      	ldr	r3, [pc, #404]	; (8009fc4 <_dtoa_r+0x62c>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	4640      	mov	r0, r8
 8009e34:	4649      	mov	r1, r9
 8009e36:	f7f6 fbe7 	bl	8000608 <__aeabi_dmul>
 8009e3a:	4652      	mov	r2, sl
 8009e3c:	465b      	mov	r3, fp
 8009e3e:	f7f6 fe69 	bl	8000b14 <__aeabi_dcmpge>
 8009e42:	9e03      	ldr	r6, [sp, #12]
 8009e44:	4637      	mov	r7, r6
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f040 8245 	bne.w	800a2d6 <_dtoa_r+0x93e>
 8009e4c:	9d01      	ldr	r5, [sp, #4]
 8009e4e:	2331      	movs	r3, #49	; 0x31
 8009e50:	f805 3b01 	strb.w	r3, [r5], #1
 8009e54:	9b00      	ldr	r3, [sp, #0]
 8009e56:	3301      	adds	r3, #1
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	e240      	b.n	800a2de <_dtoa_r+0x946>
 8009e5c:	07f2      	lsls	r2, r6, #31
 8009e5e:	d505      	bpl.n	8009e6c <_dtoa_r+0x4d4>
 8009e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e64:	f7f6 fbd0 	bl	8000608 <__aeabi_dmul>
 8009e68:	3501      	adds	r5, #1
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	1076      	asrs	r6, r6, #1
 8009e6e:	3708      	adds	r7, #8
 8009e70:	e777      	b.n	8009d62 <_dtoa_r+0x3ca>
 8009e72:	2502      	movs	r5, #2
 8009e74:	e779      	b.n	8009d6a <_dtoa_r+0x3d2>
 8009e76:	9f00      	ldr	r7, [sp, #0]
 8009e78:	9e03      	ldr	r6, [sp, #12]
 8009e7a:	e794      	b.n	8009da6 <_dtoa_r+0x40e>
 8009e7c:	9901      	ldr	r1, [sp, #4]
 8009e7e:	4b4c      	ldr	r3, [pc, #304]	; (8009fb0 <_dtoa_r+0x618>)
 8009e80:	4431      	add	r1, r6
 8009e82:	910d      	str	r1, [sp, #52]	; 0x34
 8009e84:	9908      	ldr	r1, [sp, #32]
 8009e86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e8e:	2900      	cmp	r1, #0
 8009e90:	d043      	beq.n	8009f1a <_dtoa_r+0x582>
 8009e92:	494d      	ldr	r1, [pc, #308]	; (8009fc8 <_dtoa_r+0x630>)
 8009e94:	2000      	movs	r0, #0
 8009e96:	f7f6 fce1 	bl	800085c <__aeabi_ddiv>
 8009e9a:	4652      	mov	r2, sl
 8009e9c:	465b      	mov	r3, fp
 8009e9e:	f7f6 f9fb 	bl	8000298 <__aeabi_dsub>
 8009ea2:	9d01      	ldr	r5, [sp, #4]
 8009ea4:	4682      	mov	sl, r0
 8009ea6:	468b      	mov	fp, r1
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	4640      	mov	r0, r8
 8009eac:	f7f6 fe5c 	bl	8000b68 <__aeabi_d2iz>
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	f7f6 fb3f 	bl	8000534 <__aeabi_i2d>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4640      	mov	r0, r8
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	f7f6 f9eb 	bl	8000298 <__aeabi_dsub>
 8009ec2:	3630      	adds	r6, #48	; 0x30
 8009ec4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ec8:	4652      	mov	r2, sl
 8009eca:	465b      	mov	r3, fp
 8009ecc:	4680      	mov	r8, r0
 8009ece:	4689      	mov	r9, r1
 8009ed0:	f7f6 fe0c 	bl	8000aec <__aeabi_dcmplt>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d163      	bne.n	8009fa0 <_dtoa_r+0x608>
 8009ed8:	4642      	mov	r2, r8
 8009eda:	464b      	mov	r3, r9
 8009edc:	4936      	ldr	r1, [pc, #216]	; (8009fb8 <_dtoa_r+0x620>)
 8009ede:	2000      	movs	r0, #0
 8009ee0:	f7f6 f9da 	bl	8000298 <__aeabi_dsub>
 8009ee4:	4652      	mov	r2, sl
 8009ee6:	465b      	mov	r3, fp
 8009ee8:	f7f6 fe00 	bl	8000aec <__aeabi_dcmplt>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	f040 80b5 	bne.w	800a05c <_dtoa_r+0x6c4>
 8009ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ef4:	429d      	cmp	r5, r3
 8009ef6:	d081      	beq.n	8009dfc <_dtoa_r+0x464>
 8009ef8:	4b30      	ldr	r3, [pc, #192]	; (8009fbc <_dtoa_r+0x624>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	4650      	mov	r0, sl
 8009efe:	4659      	mov	r1, fp
 8009f00:	f7f6 fb82 	bl	8000608 <__aeabi_dmul>
 8009f04:	4b2d      	ldr	r3, [pc, #180]	; (8009fbc <_dtoa_r+0x624>)
 8009f06:	4682      	mov	sl, r0
 8009f08:	468b      	mov	fp, r1
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f7f6 fb7a 	bl	8000608 <__aeabi_dmul>
 8009f14:	4680      	mov	r8, r0
 8009f16:	4689      	mov	r9, r1
 8009f18:	e7c6      	b.n	8009ea8 <_dtoa_r+0x510>
 8009f1a:	4650      	mov	r0, sl
 8009f1c:	4659      	mov	r1, fp
 8009f1e:	f7f6 fb73 	bl	8000608 <__aeabi_dmul>
 8009f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f24:	9d01      	ldr	r5, [sp, #4]
 8009f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f28:	4682      	mov	sl, r0
 8009f2a:	468b      	mov	fp, r1
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	4640      	mov	r0, r8
 8009f30:	f7f6 fe1a 	bl	8000b68 <__aeabi_d2iz>
 8009f34:	4606      	mov	r6, r0
 8009f36:	f7f6 fafd 	bl	8000534 <__aeabi_i2d>
 8009f3a:	3630      	adds	r6, #48	; 0x30
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4640      	mov	r0, r8
 8009f42:	4649      	mov	r1, r9
 8009f44:	f7f6 f9a8 	bl	8000298 <__aeabi_dsub>
 8009f48:	f805 6b01 	strb.w	r6, [r5], #1
 8009f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f4e:	429d      	cmp	r5, r3
 8009f50:	4680      	mov	r8, r0
 8009f52:	4689      	mov	r9, r1
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	d124      	bne.n	8009fa4 <_dtoa_r+0x60c>
 8009f5a:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <_dtoa_r+0x630>)
 8009f5c:	4650      	mov	r0, sl
 8009f5e:	4659      	mov	r1, fp
 8009f60:	f7f6 f99c 	bl	800029c <__adddf3>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4640      	mov	r0, r8
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	f7f6 fddc 	bl	8000b28 <__aeabi_dcmpgt>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d173      	bne.n	800a05c <_dtoa_r+0x6c4>
 8009f74:	4652      	mov	r2, sl
 8009f76:	465b      	mov	r3, fp
 8009f78:	4913      	ldr	r1, [pc, #76]	; (8009fc8 <_dtoa_r+0x630>)
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	f7f6 f98c 	bl	8000298 <__aeabi_dsub>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4640      	mov	r0, r8
 8009f86:	4649      	mov	r1, r9
 8009f88:	f7f6 fdb0 	bl	8000aec <__aeabi_dcmplt>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	f43f af35 	beq.w	8009dfc <_dtoa_r+0x464>
 8009f92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f94:	1e6b      	subs	r3, r5, #1
 8009f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f9c:	2b30      	cmp	r3, #48	; 0x30
 8009f9e:	d0f8      	beq.n	8009f92 <_dtoa_r+0x5fa>
 8009fa0:	9700      	str	r7, [sp, #0]
 8009fa2:	e049      	b.n	800a038 <_dtoa_r+0x6a0>
 8009fa4:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <_dtoa_r+0x624>)
 8009fa6:	f7f6 fb2f 	bl	8000608 <__aeabi_dmul>
 8009faa:	4680      	mov	r8, r0
 8009fac:	4689      	mov	r9, r1
 8009fae:	e7bd      	b.n	8009f2c <_dtoa_r+0x594>
 8009fb0:	0800bf30 	.word	0x0800bf30
 8009fb4:	0800bf08 	.word	0x0800bf08
 8009fb8:	3ff00000 	.word	0x3ff00000
 8009fbc:	40240000 	.word	0x40240000
 8009fc0:	401c0000 	.word	0x401c0000
 8009fc4:	40140000 	.word	0x40140000
 8009fc8:	3fe00000 	.word	0x3fe00000
 8009fcc:	9d01      	ldr	r5, [sp, #4]
 8009fce:	4656      	mov	r6, sl
 8009fd0:	465f      	mov	r7, fp
 8009fd2:	4642      	mov	r2, r8
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	4639      	mov	r1, r7
 8009fda:	f7f6 fc3f 	bl	800085c <__aeabi_ddiv>
 8009fde:	f7f6 fdc3 	bl	8000b68 <__aeabi_d2iz>
 8009fe2:	4682      	mov	sl, r0
 8009fe4:	f7f6 faa6 	bl	8000534 <__aeabi_i2d>
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	f7f6 fb0c 	bl	8000608 <__aeabi_dmul>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009ffc:	f7f6 f94c 	bl	8000298 <__aeabi_dsub>
 800a000:	f805 6b01 	strb.w	r6, [r5], #1
 800a004:	9e01      	ldr	r6, [sp, #4]
 800a006:	9f03      	ldr	r7, [sp, #12]
 800a008:	1bae      	subs	r6, r5, r6
 800a00a:	42b7      	cmp	r7, r6
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	d135      	bne.n	800a07e <_dtoa_r+0x6e6>
 800a012:	f7f6 f943 	bl	800029c <__adddf3>
 800a016:	4642      	mov	r2, r8
 800a018:	464b      	mov	r3, r9
 800a01a:	4606      	mov	r6, r0
 800a01c:	460f      	mov	r7, r1
 800a01e:	f7f6 fd83 	bl	8000b28 <__aeabi_dcmpgt>
 800a022:	b9d0      	cbnz	r0, 800a05a <_dtoa_r+0x6c2>
 800a024:	4642      	mov	r2, r8
 800a026:	464b      	mov	r3, r9
 800a028:	4630      	mov	r0, r6
 800a02a:	4639      	mov	r1, r7
 800a02c:	f7f6 fd54 	bl	8000ad8 <__aeabi_dcmpeq>
 800a030:	b110      	cbz	r0, 800a038 <_dtoa_r+0x6a0>
 800a032:	f01a 0f01 	tst.w	sl, #1
 800a036:	d110      	bne.n	800a05a <_dtoa_r+0x6c2>
 800a038:	4620      	mov	r0, r4
 800a03a:	ee18 1a10 	vmov	r1, s16
 800a03e:	f000 faf3 	bl	800a628 <_Bfree>
 800a042:	2300      	movs	r3, #0
 800a044:	9800      	ldr	r0, [sp, #0]
 800a046:	702b      	strb	r3, [r5, #0]
 800a048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a04a:	3001      	adds	r0, #1
 800a04c:	6018      	str	r0, [r3, #0]
 800a04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a050:	2b00      	cmp	r3, #0
 800a052:	f43f acf1 	beq.w	8009a38 <_dtoa_r+0xa0>
 800a056:	601d      	str	r5, [r3, #0]
 800a058:	e4ee      	b.n	8009a38 <_dtoa_r+0xa0>
 800a05a:	9f00      	ldr	r7, [sp, #0]
 800a05c:	462b      	mov	r3, r5
 800a05e:	461d      	mov	r5, r3
 800a060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a064:	2a39      	cmp	r2, #57	; 0x39
 800a066:	d106      	bne.n	800a076 <_dtoa_r+0x6de>
 800a068:	9a01      	ldr	r2, [sp, #4]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d1f7      	bne.n	800a05e <_dtoa_r+0x6c6>
 800a06e:	9901      	ldr	r1, [sp, #4]
 800a070:	2230      	movs	r2, #48	; 0x30
 800a072:	3701      	adds	r7, #1
 800a074:	700a      	strb	r2, [r1, #0]
 800a076:	781a      	ldrb	r2, [r3, #0]
 800a078:	3201      	adds	r2, #1
 800a07a:	701a      	strb	r2, [r3, #0]
 800a07c:	e790      	b.n	8009fa0 <_dtoa_r+0x608>
 800a07e:	4ba6      	ldr	r3, [pc, #664]	; (800a318 <_dtoa_r+0x980>)
 800a080:	2200      	movs	r2, #0
 800a082:	f7f6 fac1 	bl	8000608 <__aeabi_dmul>
 800a086:	2200      	movs	r2, #0
 800a088:	2300      	movs	r3, #0
 800a08a:	4606      	mov	r6, r0
 800a08c:	460f      	mov	r7, r1
 800a08e:	f7f6 fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 800a092:	2800      	cmp	r0, #0
 800a094:	d09d      	beq.n	8009fd2 <_dtoa_r+0x63a>
 800a096:	e7cf      	b.n	800a038 <_dtoa_r+0x6a0>
 800a098:	9a08      	ldr	r2, [sp, #32]
 800a09a:	2a00      	cmp	r2, #0
 800a09c:	f000 80d7 	beq.w	800a24e <_dtoa_r+0x8b6>
 800a0a0:	9a06      	ldr	r2, [sp, #24]
 800a0a2:	2a01      	cmp	r2, #1
 800a0a4:	f300 80ba 	bgt.w	800a21c <_dtoa_r+0x884>
 800a0a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0aa:	2a00      	cmp	r2, #0
 800a0ac:	f000 80b2 	beq.w	800a214 <_dtoa_r+0x87c>
 800a0b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0b4:	9e07      	ldr	r6, [sp, #28]
 800a0b6:	9d04      	ldr	r5, [sp, #16]
 800a0b8:	9a04      	ldr	r2, [sp, #16]
 800a0ba:	441a      	add	r2, r3
 800a0bc:	9204      	str	r2, [sp, #16]
 800a0be:	9a05      	ldr	r2, [sp, #20]
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	441a      	add	r2, r3
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	9205      	str	r2, [sp, #20]
 800a0c8:	f000 fb66 	bl	800a798 <__i2b>
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	2d00      	cmp	r5, #0
 800a0d0:	dd0c      	ble.n	800a0ec <_dtoa_r+0x754>
 800a0d2:	9b05      	ldr	r3, [sp, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	dd09      	ble.n	800a0ec <_dtoa_r+0x754>
 800a0d8:	42ab      	cmp	r3, r5
 800a0da:	9a04      	ldr	r2, [sp, #16]
 800a0dc:	bfa8      	it	ge
 800a0de:	462b      	movge	r3, r5
 800a0e0:	1ad2      	subs	r2, r2, r3
 800a0e2:	9204      	str	r2, [sp, #16]
 800a0e4:	9a05      	ldr	r2, [sp, #20]
 800a0e6:	1aed      	subs	r5, r5, r3
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	9305      	str	r3, [sp, #20]
 800a0ec:	9b07      	ldr	r3, [sp, #28]
 800a0ee:	b31b      	cbz	r3, 800a138 <_dtoa_r+0x7a0>
 800a0f0:	9b08      	ldr	r3, [sp, #32]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 80af 	beq.w	800a256 <_dtoa_r+0x8be>
 800a0f8:	2e00      	cmp	r6, #0
 800a0fa:	dd13      	ble.n	800a124 <_dtoa_r+0x78c>
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	4632      	mov	r2, r6
 800a100:	4620      	mov	r0, r4
 800a102:	f000 fc09 	bl	800a918 <__pow5mult>
 800a106:	ee18 2a10 	vmov	r2, s16
 800a10a:	4601      	mov	r1, r0
 800a10c:	4607      	mov	r7, r0
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 fb58 	bl	800a7c4 <__multiply>
 800a114:	ee18 1a10 	vmov	r1, s16
 800a118:	4680      	mov	r8, r0
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 fa84 	bl	800a628 <_Bfree>
 800a120:	ee08 8a10 	vmov	s16, r8
 800a124:	9b07      	ldr	r3, [sp, #28]
 800a126:	1b9a      	subs	r2, r3, r6
 800a128:	d006      	beq.n	800a138 <_dtoa_r+0x7a0>
 800a12a:	ee18 1a10 	vmov	r1, s16
 800a12e:	4620      	mov	r0, r4
 800a130:	f000 fbf2 	bl	800a918 <__pow5mult>
 800a134:	ee08 0a10 	vmov	s16, r0
 800a138:	2101      	movs	r1, #1
 800a13a:	4620      	mov	r0, r4
 800a13c:	f000 fb2c 	bl	800a798 <__i2b>
 800a140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a142:	2b00      	cmp	r3, #0
 800a144:	4606      	mov	r6, r0
 800a146:	f340 8088 	ble.w	800a25a <_dtoa_r+0x8c2>
 800a14a:	461a      	mov	r2, r3
 800a14c:	4601      	mov	r1, r0
 800a14e:	4620      	mov	r0, r4
 800a150:	f000 fbe2 	bl	800a918 <__pow5mult>
 800a154:	9b06      	ldr	r3, [sp, #24]
 800a156:	2b01      	cmp	r3, #1
 800a158:	4606      	mov	r6, r0
 800a15a:	f340 8081 	ble.w	800a260 <_dtoa_r+0x8c8>
 800a15e:	f04f 0800 	mov.w	r8, #0
 800a162:	6933      	ldr	r3, [r6, #16]
 800a164:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a168:	6918      	ldr	r0, [r3, #16]
 800a16a:	f000 fac5 	bl	800a6f8 <__hi0bits>
 800a16e:	f1c0 0020 	rsb	r0, r0, #32
 800a172:	9b05      	ldr	r3, [sp, #20]
 800a174:	4418      	add	r0, r3
 800a176:	f010 001f 	ands.w	r0, r0, #31
 800a17a:	f000 8092 	beq.w	800a2a2 <_dtoa_r+0x90a>
 800a17e:	f1c0 0320 	rsb	r3, r0, #32
 800a182:	2b04      	cmp	r3, #4
 800a184:	f340 808a 	ble.w	800a29c <_dtoa_r+0x904>
 800a188:	f1c0 001c 	rsb	r0, r0, #28
 800a18c:	9b04      	ldr	r3, [sp, #16]
 800a18e:	4403      	add	r3, r0
 800a190:	9304      	str	r3, [sp, #16]
 800a192:	9b05      	ldr	r3, [sp, #20]
 800a194:	4403      	add	r3, r0
 800a196:	4405      	add	r5, r0
 800a198:	9305      	str	r3, [sp, #20]
 800a19a:	9b04      	ldr	r3, [sp, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dd07      	ble.n	800a1b0 <_dtoa_r+0x818>
 800a1a0:	ee18 1a10 	vmov	r1, s16
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fc10 	bl	800a9cc <__lshift>
 800a1ac:	ee08 0a10 	vmov	s16, r0
 800a1b0:	9b05      	ldr	r3, [sp, #20]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	dd05      	ble.n	800a1c2 <_dtoa_r+0x82a>
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fc06 	bl	800a9cc <__lshift>
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d06e      	beq.n	800a2a6 <_dtoa_r+0x90e>
 800a1c8:	ee18 0a10 	vmov	r0, s16
 800a1cc:	4631      	mov	r1, r6
 800a1ce:	f000 fc6d 	bl	800aaac <__mcmp>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	da67      	bge.n	800a2a6 <_dtoa_r+0x90e>
 800a1d6:	9b00      	ldr	r3, [sp, #0]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	ee18 1a10 	vmov	r1, s16
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	220a      	movs	r2, #10
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fa41 	bl	800a66c <__multadd>
 800a1ea:	9b08      	ldr	r3, [sp, #32]
 800a1ec:	ee08 0a10 	vmov	s16, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 81b1 	beq.w	800a558 <_dtoa_r+0xbc0>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	220a      	movs	r2, #10
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 fa35 	bl	800a66c <__multadd>
 800a202:	9b02      	ldr	r3, [sp, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	4607      	mov	r7, r0
 800a208:	f300 808e 	bgt.w	800a328 <_dtoa_r+0x990>
 800a20c:	9b06      	ldr	r3, [sp, #24]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	dc51      	bgt.n	800a2b6 <_dtoa_r+0x91e>
 800a212:	e089      	b.n	800a328 <_dtoa_r+0x990>
 800a214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a21a:	e74b      	b.n	800a0b4 <_dtoa_r+0x71c>
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	1e5e      	subs	r6, r3, #1
 800a220:	9b07      	ldr	r3, [sp, #28]
 800a222:	42b3      	cmp	r3, r6
 800a224:	bfbf      	itttt	lt
 800a226:	9b07      	ldrlt	r3, [sp, #28]
 800a228:	9607      	strlt	r6, [sp, #28]
 800a22a:	1af2      	sublt	r2, r6, r3
 800a22c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a22e:	bfb6      	itet	lt
 800a230:	189b      	addlt	r3, r3, r2
 800a232:	1b9e      	subge	r6, r3, r6
 800a234:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a236:	9b03      	ldr	r3, [sp, #12]
 800a238:	bfb8      	it	lt
 800a23a:	2600      	movlt	r6, #0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bfb7      	itett	lt
 800a240:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a244:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a248:	1a9d      	sublt	r5, r3, r2
 800a24a:	2300      	movlt	r3, #0
 800a24c:	e734      	b.n	800a0b8 <_dtoa_r+0x720>
 800a24e:	9e07      	ldr	r6, [sp, #28]
 800a250:	9d04      	ldr	r5, [sp, #16]
 800a252:	9f08      	ldr	r7, [sp, #32]
 800a254:	e73b      	b.n	800a0ce <_dtoa_r+0x736>
 800a256:	9a07      	ldr	r2, [sp, #28]
 800a258:	e767      	b.n	800a12a <_dtoa_r+0x792>
 800a25a:	9b06      	ldr	r3, [sp, #24]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	dc18      	bgt.n	800a292 <_dtoa_r+0x8fa>
 800a260:	f1ba 0f00 	cmp.w	sl, #0
 800a264:	d115      	bne.n	800a292 <_dtoa_r+0x8fa>
 800a266:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a26a:	b993      	cbnz	r3, 800a292 <_dtoa_r+0x8fa>
 800a26c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a270:	0d1b      	lsrs	r3, r3, #20
 800a272:	051b      	lsls	r3, r3, #20
 800a274:	b183      	cbz	r3, 800a298 <_dtoa_r+0x900>
 800a276:	9b04      	ldr	r3, [sp, #16]
 800a278:	3301      	adds	r3, #1
 800a27a:	9304      	str	r3, [sp, #16]
 800a27c:	9b05      	ldr	r3, [sp, #20]
 800a27e:	3301      	adds	r3, #1
 800a280:	9305      	str	r3, [sp, #20]
 800a282:	f04f 0801 	mov.w	r8, #1
 800a286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f47f af6a 	bne.w	800a162 <_dtoa_r+0x7ca>
 800a28e:	2001      	movs	r0, #1
 800a290:	e76f      	b.n	800a172 <_dtoa_r+0x7da>
 800a292:	f04f 0800 	mov.w	r8, #0
 800a296:	e7f6      	b.n	800a286 <_dtoa_r+0x8ee>
 800a298:	4698      	mov	r8, r3
 800a29a:	e7f4      	b.n	800a286 <_dtoa_r+0x8ee>
 800a29c:	f43f af7d 	beq.w	800a19a <_dtoa_r+0x802>
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	301c      	adds	r0, #28
 800a2a4:	e772      	b.n	800a18c <_dtoa_r+0x7f4>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	dc37      	bgt.n	800a31c <_dtoa_r+0x984>
 800a2ac:	9b06      	ldr	r3, [sp, #24]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	dd34      	ble.n	800a31c <_dtoa_r+0x984>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	9302      	str	r3, [sp, #8]
 800a2b6:	9b02      	ldr	r3, [sp, #8]
 800a2b8:	b96b      	cbnz	r3, 800a2d6 <_dtoa_r+0x93e>
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	2205      	movs	r2, #5
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f000 f9d4 	bl	800a66c <__multadd>
 800a2c4:	4601      	mov	r1, r0
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	ee18 0a10 	vmov	r0, s16
 800a2cc:	f000 fbee 	bl	800aaac <__mcmp>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f73f adbb 	bgt.w	8009e4c <_dtoa_r+0x4b4>
 800a2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d8:	9d01      	ldr	r5, [sp, #4]
 800a2da:	43db      	mvns	r3, r3
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	f04f 0800 	mov.w	r8, #0
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f000 f99f 	bl	800a628 <_Bfree>
 800a2ea:	2f00      	cmp	r7, #0
 800a2ec:	f43f aea4 	beq.w	800a038 <_dtoa_r+0x6a0>
 800a2f0:	f1b8 0f00 	cmp.w	r8, #0
 800a2f4:	d005      	beq.n	800a302 <_dtoa_r+0x96a>
 800a2f6:	45b8      	cmp	r8, r7
 800a2f8:	d003      	beq.n	800a302 <_dtoa_r+0x96a>
 800a2fa:	4641      	mov	r1, r8
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f000 f993 	bl	800a628 <_Bfree>
 800a302:	4639      	mov	r1, r7
 800a304:	4620      	mov	r0, r4
 800a306:	f000 f98f 	bl	800a628 <_Bfree>
 800a30a:	e695      	b.n	800a038 <_dtoa_r+0x6a0>
 800a30c:	2600      	movs	r6, #0
 800a30e:	4637      	mov	r7, r6
 800a310:	e7e1      	b.n	800a2d6 <_dtoa_r+0x93e>
 800a312:	9700      	str	r7, [sp, #0]
 800a314:	4637      	mov	r7, r6
 800a316:	e599      	b.n	8009e4c <_dtoa_r+0x4b4>
 800a318:	40240000 	.word	0x40240000
 800a31c:	9b08      	ldr	r3, [sp, #32]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 80ca 	beq.w	800a4b8 <_dtoa_r+0xb20>
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	9302      	str	r3, [sp, #8]
 800a328:	2d00      	cmp	r5, #0
 800a32a:	dd05      	ble.n	800a338 <_dtoa_r+0x9a0>
 800a32c:	4639      	mov	r1, r7
 800a32e:	462a      	mov	r2, r5
 800a330:	4620      	mov	r0, r4
 800a332:	f000 fb4b 	bl	800a9cc <__lshift>
 800a336:	4607      	mov	r7, r0
 800a338:	f1b8 0f00 	cmp.w	r8, #0
 800a33c:	d05b      	beq.n	800a3f6 <_dtoa_r+0xa5e>
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	4620      	mov	r0, r4
 800a342:	f000 f931 	bl	800a5a8 <_Balloc>
 800a346:	4605      	mov	r5, r0
 800a348:	b928      	cbnz	r0, 800a356 <_dtoa_r+0x9be>
 800a34a:	4b87      	ldr	r3, [pc, #540]	; (800a568 <_dtoa_r+0xbd0>)
 800a34c:	4602      	mov	r2, r0
 800a34e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a352:	f7ff bb3b 	b.w	80099cc <_dtoa_r+0x34>
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	3202      	adds	r2, #2
 800a35a:	0092      	lsls	r2, r2, #2
 800a35c:	f107 010c 	add.w	r1, r7, #12
 800a360:	300c      	adds	r0, #12
 800a362:	f000 f913 	bl	800a58c <memcpy>
 800a366:	2201      	movs	r2, #1
 800a368:	4629      	mov	r1, r5
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 fb2e 	bl	800a9cc <__lshift>
 800a370:	9b01      	ldr	r3, [sp, #4]
 800a372:	f103 0901 	add.w	r9, r3, #1
 800a376:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a37a:	4413      	add	r3, r2
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	f00a 0301 	and.w	r3, sl, #1
 800a382:	46b8      	mov	r8, r7
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	4607      	mov	r7, r0
 800a388:	4631      	mov	r1, r6
 800a38a:	ee18 0a10 	vmov	r0, s16
 800a38e:	f7ff fa75 	bl	800987c <quorem>
 800a392:	4641      	mov	r1, r8
 800a394:	9002      	str	r0, [sp, #8]
 800a396:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a39a:	ee18 0a10 	vmov	r0, s16
 800a39e:	f000 fb85 	bl	800aaac <__mcmp>
 800a3a2:	463a      	mov	r2, r7
 800a3a4:	9003      	str	r0, [sp, #12]
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 fb9b 	bl	800aae4 <__mdiff>
 800a3ae:	68c2      	ldr	r2, [r0, #12]
 800a3b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	bb02      	cbnz	r2, 800a3fa <_dtoa_r+0xa62>
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	ee18 0a10 	vmov	r0, s16
 800a3be:	f000 fb75 	bl	800aaac <__mcmp>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	9207      	str	r2, [sp, #28]
 800a3ca:	f000 f92d 	bl	800a628 <_Bfree>
 800a3ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a3d2:	ea43 0102 	orr.w	r1, r3, r2
 800a3d6:	9b04      	ldr	r3, [sp, #16]
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	464d      	mov	r5, r9
 800a3dc:	d10f      	bne.n	800a3fe <_dtoa_r+0xa66>
 800a3de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3e2:	d02a      	beq.n	800a43a <_dtoa_r+0xaa2>
 800a3e4:	9b03      	ldr	r3, [sp, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	dd02      	ble.n	800a3f0 <_dtoa_r+0xa58>
 800a3ea:	9b02      	ldr	r3, [sp, #8]
 800a3ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a3f0:	f88b a000 	strb.w	sl, [fp]
 800a3f4:	e775      	b.n	800a2e2 <_dtoa_r+0x94a>
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	e7ba      	b.n	800a370 <_dtoa_r+0x9d8>
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	e7e2      	b.n	800a3c4 <_dtoa_r+0xa2c>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	db04      	blt.n	800a40e <_dtoa_r+0xa76>
 800a404:	9906      	ldr	r1, [sp, #24]
 800a406:	430b      	orrs	r3, r1
 800a408:	9904      	ldr	r1, [sp, #16]
 800a40a:	430b      	orrs	r3, r1
 800a40c:	d122      	bne.n	800a454 <_dtoa_r+0xabc>
 800a40e:	2a00      	cmp	r2, #0
 800a410:	ddee      	ble.n	800a3f0 <_dtoa_r+0xa58>
 800a412:	ee18 1a10 	vmov	r1, s16
 800a416:	2201      	movs	r2, #1
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 fad7 	bl	800a9cc <__lshift>
 800a41e:	4631      	mov	r1, r6
 800a420:	ee08 0a10 	vmov	s16, r0
 800a424:	f000 fb42 	bl	800aaac <__mcmp>
 800a428:	2800      	cmp	r0, #0
 800a42a:	dc03      	bgt.n	800a434 <_dtoa_r+0xa9c>
 800a42c:	d1e0      	bne.n	800a3f0 <_dtoa_r+0xa58>
 800a42e:	f01a 0f01 	tst.w	sl, #1
 800a432:	d0dd      	beq.n	800a3f0 <_dtoa_r+0xa58>
 800a434:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a438:	d1d7      	bne.n	800a3ea <_dtoa_r+0xa52>
 800a43a:	2339      	movs	r3, #57	; 0x39
 800a43c:	f88b 3000 	strb.w	r3, [fp]
 800a440:	462b      	mov	r3, r5
 800a442:	461d      	mov	r5, r3
 800a444:	3b01      	subs	r3, #1
 800a446:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a44a:	2a39      	cmp	r2, #57	; 0x39
 800a44c:	d071      	beq.n	800a532 <_dtoa_r+0xb9a>
 800a44e:	3201      	adds	r2, #1
 800a450:	701a      	strb	r2, [r3, #0]
 800a452:	e746      	b.n	800a2e2 <_dtoa_r+0x94a>
 800a454:	2a00      	cmp	r2, #0
 800a456:	dd07      	ble.n	800a468 <_dtoa_r+0xad0>
 800a458:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a45c:	d0ed      	beq.n	800a43a <_dtoa_r+0xaa2>
 800a45e:	f10a 0301 	add.w	r3, sl, #1
 800a462:	f88b 3000 	strb.w	r3, [fp]
 800a466:	e73c      	b.n	800a2e2 <_dtoa_r+0x94a>
 800a468:	9b05      	ldr	r3, [sp, #20]
 800a46a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a46e:	4599      	cmp	r9, r3
 800a470:	d047      	beq.n	800a502 <_dtoa_r+0xb6a>
 800a472:	ee18 1a10 	vmov	r1, s16
 800a476:	2300      	movs	r3, #0
 800a478:	220a      	movs	r2, #10
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 f8f6 	bl	800a66c <__multadd>
 800a480:	45b8      	cmp	r8, r7
 800a482:	ee08 0a10 	vmov	s16, r0
 800a486:	f04f 0300 	mov.w	r3, #0
 800a48a:	f04f 020a 	mov.w	r2, #10
 800a48e:	4641      	mov	r1, r8
 800a490:	4620      	mov	r0, r4
 800a492:	d106      	bne.n	800a4a2 <_dtoa_r+0xb0a>
 800a494:	f000 f8ea 	bl	800a66c <__multadd>
 800a498:	4680      	mov	r8, r0
 800a49a:	4607      	mov	r7, r0
 800a49c:	f109 0901 	add.w	r9, r9, #1
 800a4a0:	e772      	b.n	800a388 <_dtoa_r+0x9f0>
 800a4a2:	f000 f8e3 	bl	800a66c <__multadd>
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	220a      	movs	r2, #10
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f000 f8dc 	bl	800a66c <__multadd>
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	e7f1      	b.n	800a49c <_dtoa_r+0xb04>
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	9302      	str	r3, [sp, #8]
 800a4bc:	9d01      	ldr	r5, [sp, #4]
 800a4be:	ee18 0a10 	vmov	r0, s16
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	f7ff f9da 	bl	800987c <quorem>
 800a4c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a4cc:	9b01      	ldr	r3, [sp, #4]
 800a4ce:	f805 ab01 	strb.w	sl, [r5], #1
 800a4d2:	1aea      	subs	r2, r5, r3
 800a4d4:	9b02      	ldr	r3, [sp, #8]
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	dd09      	ble.n	800a4ee <_dtoa_r+0xb56>
 800a4da:	ee18 1a10 	vmov	r1, s16
 800a4de:	2300      	movs	r3, #0
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 f8c2 	bl	800a66c <__multadd>
 800a4e8:	ee08 0a10 	vmov	s16, r0
 800a4ec:	e7e7      	b.n	800a4be <_dtoa_r+0xb26>
 800a4ee:	9b02      	ldr	r3, [sp, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	bfc8      	it	gt
 800a4f4:	461d      	movgt	r5, r3
 800a4f6:	9b01      	ldr	r3, [sp, #4]
 800a4f8:	bfd8      	it	le
 800a4fa:	2501      	movle	r5, #1
 800a4fc:	441d      	add	r5, r3
 800a4fe:	f04f 0800 	mov.w	r8, #0
 800a502:	ee18 1a10 	vmov	r1, s16
 800a506:	2201      	movs	r2, #1
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 fa5f 	bl	800a9cc <__lshift>
 800a50e:	4631      	mov	r1, r6
 800a510:	ee08 0a10 	vmov	s16, r0
 800a514:	f000 faca 	bl	800aaac <__mcmp>
 800a518:	2800      	cmp	r0, #0
 800a51a:	dc91      	bgt.n	800a440 <_dtoa_r+0xaa8>
 800a51c:	d102      	bne.n	800a524 <_dtoa_r+0xb8c>
 800a51e:	f01a 0f01 	tst.w	sl, #1
 800a522:	d18d      	bne.n	800a440 <_dtoa_r+0xaa8>
 800a524:	462b      	mov	r3, r5
 800a526:	461d      	mov	r5, r3
 800a528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a52c:	2a30      	cmp	r2, #48	; 0x30
 800a52e:	d0fa      	beq.n	800a526 <_dtoa_r+0xb8e>
 800a530:	e6d7      	b.n	800a2e2 <_dtoa_r+0x94a>
 800a532:	9a01      	ldr	r2, [sp, #4]
 800a534:	429a      	cmp	r2, r3
 800a536:	d184      	bne.n	800a442 <_dtoa_r+0xaaa>
 800a538:	9b00      	ldr	r3, [sp, #0]
 800a53a:	3301      	adds	r3, #1
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	2331      	movs	r3, #49	; 0x31
 800a540:	7013      	strb	r3, [r2, #0]
 800a542:	e6ce      	b.n	800a2e2 <_dtoa_r+0x94a>
 800a544:	4b09      	ldr	r3, [pc, #36]	; (800a56c <_dtoa_r+0xbd4>)
 800a546:	f7ff ba95 	b.w	8009a74 <_dtoa_r+0xdc>
 800a54a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f47f aa6e 	bne.w	8009a2e <_dtoa_r+0x96>
 800a552:	4b07      	ldr	r3, [pc, #28]	; (800a570 <_dtoa_r+0xbd8>)
 800a554:	f7ff ba8e 	b.w	8009a74 <_dtoa_r+0xdc>
 800a558:	9b02      	ldr	r3, [sp, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	dcae      	bgt.n	800a4bc <_dtoa_r+0xb24>
 800a55e:	9b06      	ldr	r3, [sp, #24]
 800a560:	2b02      	cmp	r3, #2
 800a562:	f73f aea8 	bgt.w	800a2b6 <_dtoa_r+0x91e>
 800a566:	e7a9      	b.n	800a4bc <_dtoa_r+0xb24>
 800a568:	0800be9b 	.word	0x0800be9b
 800a56c:	0800bdf8 	.word	0x0800bdf8
 800a570:	0800be1c 	.word	0x0800be1c

0800a574 <_localeconv_r>:
 800a574:	4800      	ldr	r0, [pc, #0]	; (800a578 <_localeconv_r+0x4>)
 800a576:	4770      	bx	lr
 800a578:	200002ec 	.word	0x200002ec

0800a57c <malloc>:
 800a57c:	4b02      	ldr	r3, [pc, #8]	; (800a588 <malloc+0xc>)
 800a57e:	4601      	mov	r1, r0
 800a580:	6818      	ldr	r0, [r3, #0]
 800a582:	f000 bc17 	b.w	800adb4 <_malloc_r>
 800a586:	bf00      	nop
 800a588:	20000198 	.word	0x20000198

0800a58c <memcpy>:
 800a58c:	440a      	add	r2, r1
 800a58e:	4291      	cmp	r1, r2
 800a590:	f100 33ff 	add.w	r3, r0, #4294967295
 800a594:	d100      	bne.n	800a598 <memcpy+0xc>
 800a596:	4770      	bx	lr
 800a598:	b510      	push	{r4, lr}
 800a59a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5a2:	4291      	cmp	r1, r2
 800a5a4:	d1f9      	bne.n	800a59a <memcpy+0xe>
 800a5a6:	bd10      	pop	{r4, pc}

0800a5a8 <_Balloc>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	460d      	mov	r5, r1
 800a5b0:	b976      	cbnz	r6, 800a5d0 <_Balloc+0x28>
 800a5b2:	2010      	movs	r0, #16
 800a5b4:	f7ff ffe2 	bl	800a57c <malloc>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	6260      	str	r0, [r4, #36]	; 0x24
 800a5bc:	b920      	cbnz	r0, 800a5c8 <_Balloc+0x20>
 800a5be:	4b18      	ldr	r3, [pc, #96]	; (800a620 <_Balloc+0x78>)
 800a5c0:	4818      	ldr	r0, [pc, #96]	; (800a624 <_Balloc+0x7c>)
 800a5c2:	2166      	movs	r1, #102	; 0x66
 800a5c4:	f000 fdd6 	bl	800b174 <__assert_func>
 800a5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5cc:	6006      	str	r6, [r0, #0]
 800a5ce:	60c6      	str	r6, [r0, #12]
 800a5d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5d2:	68f3      	ldr	r3, [r6, #12]
 800a5d4:	b183      	cbz	r3, 800a5f8 <_Balloc+0x50>
 800a5d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5de:	b9b8      	cbnz	r0, 800a610 <_Balloc+0x68>
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	fa01 f605 	lsl.w	r6, r1, r5
 800a5e6:	1d72      	adds	r2, r6, #5
 800a5e8:	0092      	lsls	r2, r2, #2
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 fb60 	bl	800acb0 <_calloc_r>
 800a5f0:	b160      	cbz	r0, 800a60c <_Balloc+0x64>
 800a5f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5f6:	e00e      	b.n	800a616 <_Balloc+0x6e>
 800a5f8:	2221      	movs	r2, #33	; 0x21
 800a5fa:	2104      	movs	r1, #4
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f000 fb57 	bl	800acb0 <_calloc_r>
 800a602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a604:	60f0      	str	r0, [r6, #12]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1e4      	bne.n	800a5d6 <_Balloc+0x2e>
 800a60c:	2000      	movs	r0, #0
 800a60e:	bd70      	pop	{r4, r5, r6, pc}
 800a610:	6802      	ldr	r2, [r0, #0]
 800a612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a616:	2300      	movs	r3, #0
 800a618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a61c:	e7f7      	b.n	800a60e <_Balloc+0x66>
 800a61e:	bf00      	nop
 800a620:	0800be29 	.word	0x0800be29
 800a624:	0800beac 	.word	0x0800beac

0800a628 <_Bfree>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a62c:	4605      	mov	r5, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	b976      	cbnz	r6, 800a650 <_Bfree+0x28>
 800a632:	2010      	movs	r0, #16
 800a634:	f7ff ffa2 	bl	800a57c <malloc>
 800a638:	4602      	mov	r2, r0
 800a63a:	6268      	str	r0, [r5, #36]	; 0x24
 800a63c:	b920      	cbnz	r0, 800a648 <_Bfree+0x20>
 800a63e:	4b09      	ldr	r3, [pc, #36]	; (800a664 <_Bfree+0x3c>)
 800a640:	4809      	ldr	r0, [pc, #36]	; (800a668 <_Bfree+0x40>)
 800a642:	218a      	movs	r1, #138	; 0x8a
 800a644:	f000 fd96 	bl	800b174 <__assert_func>
 800a648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a64c:	6006      	str	r6, [r0, #0]
 800a64e:	60c6      	str	r6, [r0, #12]
 800a650:	b13c      	cbz	r4, 800a662 <_Bfree+0x3a>
 800a652:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a654:	6862      	ldr	r2, [r4, #4]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a65c:	6021      	str	r1, [r4, #0]
 800a65e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a662:	bd70      	pop	{r4, r5, r6, pc}
 800a664:	0800be29 	.word	0x0800be29
 800a668:	0800beac 	.word	0x0800beac

0800a66c <__multadd>:
 800a66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a670:	690d      	ldr	r5, [r1, #16]
 800a672:	4607      	mov	r7, r0
 800a674:	460c      	mov	r4, r1
 800a676:	461e      	mov	r6, r3
 800a678:	f101 0c14 	add.w	ip, r1, #20
 800a67c:	2000      	movs	r0, #0
 800a67e:	f8dc 3000 	ldr.w	r3, [ip]
 800a682:	b299      	uxth	r1, r3
 800a684:	fb02 6101 	mla	r1, r2, r1, r6
 800a688:	0c1e      	lsrs	r6, r3, #16
 800a68a:	0c0b      	lsrs	r3, r1, #16
 800a68c:	fb02 3306 	mla	r3, r2, r6, r3
 800a690:	b289      	uxth	r1, r1
 800a692:	3001      	adds	r0, #1
 800a694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a698:	4285      	cmp	r5, r0
 800a69a:	f84c 1b04 	str.w	r1, [ip], #4
 800a69e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6a2:	dcec      	bgt.n	800a67e <__multadd+0x12>
 800a6a4:	b30e      	cbz	r6, 800a6ea <__multadd+0x7e>
 800a6a6:	68a3      	ldr	r3, [r4, #8]
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	dc19      	bgt.n	800a6e0 <__multadd+0x74>
 800a6ac:	6861      	ldr	r1, [r4, #4]
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	3101      	adds	r1, #1
 800a6b2:	f7ff ff79 	bl	800a5a8 <_Balloc>
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	b928      	cbnz	r0, 800a6c6 <__multadd+0x5a>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	4b0c      	ldr	r3, [pc, #48]	; (800a6f0 <__multadd+0x84>)
 800a6be:	480d      	ldr	r0, [pc, #52]	; (800a6f4 <__multadd+0x88>)
 800a6c0:	21b5      	movs	r1, #181	; 0xb5
 800a6c2:	f000 fd57 	bl	800b174 <__assert_func>
 800a6c6:	6922      	ldr	r2, [r4, #16]
 800a6c8:	3202      	adds	r2, #2
 800a6ca:	f104 010c 	add.w	r1, r4, #12
 800a6ce:	0092      	lsls	r2, r2, #2
 800a6d0:	300c      	adds	r0, #12
 800a6d2:	f7ff ff5b 	bl	800a58c <memcpy>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f7ff ffa5 	bl	800a628 <_Bfree>
 800a6de:	4644      	mov	r4, r8
 800a6e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6e4:	3501      	adds	r5, #1
 800a6e6:	615e      	str	r6, [r3, #20]
 800a6e8:	6125      	str	r5, [r4, #16]
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f0:	0800be9b 	.word	0x0800be9b
 800a6f4:	0800beac 	.word	0x0800beac

0800a6f8 <__hi0bits>:
 800a6f8:	0c03      	lsrs	r3, r0, #16
 800a6fa:	041b      	lsls	r3, r3, #16
 800a6fc:	b9d3      	cbnz	r3, 800a734 <__hi0bits+0x3c>
 800a6fe:	0400      	lsls	r0, r0, #16
 800a700:	2310      	movs	r3, #16
 800a702:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a706:	bf04      	itt	eq
 800a708:	0200      	lsleq	r0, r0, #8
 800a70a:	3308      	addeq	r3, #8
 800a70c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a710:	bf04      	itt	eq
 800a712:	0100      	lsleq	r0, r0, #4
 800a714:	3304      	addeq	r3, #4
 800a716:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a71a:	bf04      	itt	eq
 800a71c:	0080      	lsleq	r0, r0, #2
 800a71e:	3302      	addeq	r3, #2
 800a720:	2800      	cmp	r0, #0
 800a722:	db05      	blt.n	800a730 <__hi0bits+0x38>
 800a724:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a728:	f103 0301 	add.w	r3, r3, #1
 800a72c:	bf08      	it	eq
 800a72e:	2320      	moveq	r3, #32
 800a730:	4618      	mov	r0, r3
 800a732:	4770      	bx	lr
 800a734:	2300      	movs	r3, #0
 800a736:	e7e4      	b.n	800a702 <__hi0bits+0xa>

0800a738 <__lo0bits>:
 800a738:	6803      	ldr	r3, [r0, #0]
 800a73a:	f013 0207 	ands.w	r2, r3, #7
 800a73e:	4601      	mov	r1, r0
 800a740:	d00b      	beq.n	800a75a <__lo0bits+0x22>
 800a742:	07da      	lsls	r2, r3, #31
 800a744:	d423      	bmi.n	800a78e <__lo0bits+0x56>
 800a746:	0798      	lsls	r0, r3, #30
 800a748:	bf49      	itett	mi
 800a74a:	085b      	lsrmi	r3, r3, #1
 800a74c:	089b      	lsrpl	r3, r3, #2
 800a74e:	2001      	movmi	r0, #1
 800a750:	600b      	strmi	r3, [r1, #0]
 800a752:	bf5c      	itt	pl
 800a754:	600b      	strpl	r3, [r1, #0]
 800a756:	2002      	movpl	r0, #2
 800a758:	4770      	bx	lr
 800a75a:	b298      	uxth	r0, r3
 800a75c:	b9a8      	cbnz	r0, 800a78a <__lo0bits+0x52>
 800a75e:	0c1b      	lsrs	r3, r3, #16
 800a760:	2010      	movs	r0, #16
 800a762:	b2da      	uxtb	r2, r3
 800a764:	b90a      	cbnz	r2, 800a76a <__lo0bits+0x32>
 800a766:	3008      	adds	r0, #8
 800a768:	0a1b      	lsrs	r3, r3, #8
 800a76a:	071a      	lsls	r2, r3, #28
 800a76c:	bf04      	itt	eq
 800a76e:	091b      	lsreq	r3, r3, #4
 800a770:	3004      	addeq	r0, #4
 800a772:	079a      	lsls	r2, r3, #30
 800a774:	bf04      	itt	eq
 800a776:	089b      	lsreq	r3, r3, #2
 800a778:	3002      	addeq	r0, #2
 800a77a:	07da      	lsls	r2, r3, #31
 800a77c:	d403      	bmi.n	800a786 <__lo0bits+0x4e>
 800a77e:	085b      	lsrs	r3, r3, #1
 800a780:	f100 0001 	add.w	r0, r0, #1
 800a784:	d005      	beq.n	800a792 <__lo0bits+0x5a>
 800a786:	600b      	str	r3, [r1, #0]
 800a788:	4770      	bx	lr
 800a78a:	4610      	mov	r0, r2
 800a78c:	e7e9      	b.n	800a762 <__lo0bits+0x2a>
 800a78e:	2000      	movs	r0, #0
 800a790:	4770      	bx	lr
 800a792:	2020      	movs	r0, #32
 800a794:	4770      	bx	lr
	...

0800a798 <__i2b>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	460c      	mov	r4, r1
 800a79c:	2101      	movs	r1, #1
 800a79e:	f7ff ff03 	bl	800a5a8 <_Balloc>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	b928      	cbnz	r0, 800a7b2 <__i2b+0x1a>
 800a7a6:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <__i2b+0x24>)
 800a7a8:	4805      	ldr	r0, [pc, #20]	; (800a7c0 <__i2b+0x28>)
 800a7aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7ae:	f000 fce1 	bl	800b174 <__assert_func>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	6144      	str	r4, [r0, #20]
 800a7b6:	6103      	str	r3, [r0, #16]
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	bf00      	nop
 800a7bc:	0800be9b 	.word	0x0800be9b
 800a7c0:	0800beac 	.word	0x0800beac

0800a7c4 <__multiply>:
 800a7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c8:	4691      	mov	r9, r2
 800a7ca:	690a      	ldr	r2, [r1, #16]
 800a7cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	bfb8      	it	lt
 800a7d4:	460b      	movlt	r3, r1
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	bfbc      	itt	lt
 800a7da:	464c      	movlt	r4, r9
 800a7dc:	4699      	movlt	r9, r3
 800a7de:	6927      	ldr	r7, [r4, #16]
 800a7e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7e4:	68a3      	ldr	r3, [r4, #8]
 800a7e6:	6861      	ldr	r1, [r4, #4]
 800a7e8:	eb07 060a 	add.w	r6, r7, sl
 800a7ec:	42b3      	cmp	r3, r6
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	bfb8      	it	lt
 800a7f2:	3101      	addlt	r1, #1
 800a7f4:	f7ff fed8 	bl	800a5a8 <_Balloc>
 800a7f8:	b930      	cbnz	r0, 800a808 <__multiply+0x44>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	4b44      	ldr	r3, [pc, #272]	; (800a910 <__multiply+0x14c>)
 800a7fe:	4845      	ldr	r0, [pc, #276]	; (800a914 <__multiply+0x150>)
 800a800:	f240 115d 	movw	r1, #349	; 0x15d
 800a804:	f000 fcb6 	bl	800b174 <__assert_func>
 800a808:	f100 0514 	add.w	r5, r0, #20
 800a80c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a810:	462b      	mov	r3, r5
 800a812:	2200      	movs	r2, #0
 800a814:	4543      	cmp	r3, r8
 800a816:	d321      	bcc.n	800a85c <__multiply+0x98>
 800a818:	f104 0314 	add.w	r3, r4, #20
 800a81c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a820:	f109 0314 	add.w	r3, r9, #20
 800a824:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a828:	9202      	str	r2, [sp, #8]
 800a82a:	1b3a      	subs	r2, r7, r4
 800a82c:	3a15      	subs	r2, #21
 800a82e:	f022 0203 	bic.w	r2, r2, #3
 800a832:	3204      	adds	r2, #4
 800a834:	f104 0115 	add.w	r1, r4, #21
 800a838:	428f      	cmp	r7, r1
 800a83a:	bf38      	it	cc
 800a83c:	2204      	movcc	r2, #4
 800a83e:	9201      	str	r2, [sp, #4]
 800a840:	9a02      	ldr	r2, [sp, #8]
 800a842:	9303      	str	r3, [sp, #12]
 800a844:	429a      	cmp	r2, r3
 800a846:	d80c      	bhi.n	800a862 <__multiply+0x9e>
 800a848:	2e00      	cmp	r6, #0
 800a84a:	dd03      	ble.n	800a854 <__multiply+0x90>
 800a84c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a850:	2b00      	cmp	r3, #0
 800a852:	d05a      	beq.n	800a90a <__multiply+0x146>
 800a854:	6106      	str	r6, [r0, #16]
 800a856:	b005      	add	sp, #20
 800a858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85c:	f843 2b04 	str.w	r2, [r3], #4
 800a860:	e7d8      	b.n	800a814 <__multiply+0x50>
 800a862:	f8b3 a000 	ldrh.w	sl, [r3]
 800a866:	f1ba 0f00 	cmp.w	sl, #0
 800a86a:	d024      	beq.n	800a8b6 <__multiply+0xf2>
 800a86c:	f104 0e14 	add.w	lr, r4, #20
 800a870:	46a9      	mov	r9, r5
 800a872:	f04f 0c00 	mov.w	ip, #0
 800a876:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a87a:	f8d9 1000 	ldr.w	r1, [r9]
 800a87e:	fa1f fb82 	uxth.w	fp, r2
 800a882:	b289      	uxth	r1, r1
 800a884:	fb0a 110b 	mla	r1, sl, fp, r1
 800a888:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a88c:	f8d9 2000 	ldr.w	r2, [r9]
 800a890:	4461      	add	r1, ip
 800a892:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a896:	fb0a c20b 	mla	r2, sl, fp, ip
 800a89a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a89e:	b289      	uxth	r1, r1
 800a8a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8a4:	4577      	cmp	r7, lr
 800a8a6:	f849 1b04 	str.w	r1, [r9], #4
 800a8aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8ae:	d8e2      	bhi.n	800a876 <__multiply+0xb2>
 800a8b0:	9a01      	ldr	r2, [sp, #4]
 800a8b2:	f845 c002 	str.w	ip, [r5, r2]
 800a8b6:	9a03      	ldr	r2, [sp, #12]
 800a8b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8bc:	3304      	adds	r3, #4
 800a8be:	f1b9 0f00 	cmp.w	r9, #0
 800a8c2:	d020      	beq.n	800a906 <__multiply+0x142>
 800a8c4:	6829      	ldr	r1, [r5, #0]
 800a8c6:	f104 0c14 	add.w	ip, r4, #20
 800a8ca:	46ae      	mov	lr, r5
 800a8cc:	f04f 0a00 	mov.w	sl, #0
 800a8d0:	f8bc b000 	ldrh.w	fp, [ip]
 800a8d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8d8:	fb09 220b 	mla	r2, r9, fp, r2
 800a8dc:	4492      	add	sl, r2
 800a8de:	b289      	uxth	r1, r1
 800a8e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a8e4:	f84e 1b04 	str.w	r1, [lr], #4
 800a8e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a8ec:	f8be 1000 	ldrh.w	r1, [lr]
 800a8f0:	0c12      	lsrs	r2, r2, #16
 800a8f2:	fb09 1102 	mla	r1, r9, r2, r1
 800a8f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a8fa:	4567      	cmp	r7, ip
 800a8fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a900:	d8e6      	bhi.n	800a8d0 <__multiply+0x10c>
 800a902:	9a01      	ldr	r2, [sp, #4]
 800a904:	50a9      	str	r1, [r5, r2]
 800a906:	3504      	adds	r5, #4
 800a908:	e79a      	b.n	800a840 <__multiply+0x7c>
 800a90a:	3e01      	subs	r6, #1
 800a90c:	e79c      	b.n	800a848 <__multiply+0x84>
 800a90e:	bf00      	nop
 800a910:	0800be9b 	.word	0x0800be9b
 800a914:	0800beac 	.word	0x0800beac

0800a918 <__pow5mult>:
 800a918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a91c:	4615      	mov	r5, r2
 800a91e:	f012 0203 	ands.w	r2, r2, #3
 800a922:	4606      	mov	r6, r0
 800a924:	460f      	mov	r7, r1
 800a926:	d007      	beq.n	800a938 <__pow5mult+0x20>
 800a928:	4c25      	ldr	r4, [pc, #148]	; (800a9c0 <__pow5mult+0xa8>)
 800a92a:	3a01      	subs	r2, #1
 800a92c:	2300      	movs	r3, #0
 800a92e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a932:	f7ff fe9b 	bl	800a66c <__multadd>
 800a936:	4607      	mov	r7, r0
 800a938:	10ad      	asrs	r5, r5, #2
 800a93a:	d03d      	beq.n	800a9b8 <__pow5mult+0xa0>
 800a93c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a93e:	b97c      	cbnz	r4, 800a960 <__pow5mult+0x48>
 800a940:	2010      	movs	r0, #16
 800a942:	f7ff fe1b 	bl	800a57c <malloc>
 800a946:	4602      	mov	r2, r0
 800a948:	6270      	str	r0, [r6, #36]	; 0x24
 800a94a:	b928      	cbnz	r0, 800a958 <__pow5mult+0x40>
 800a94c:	4b1d      	ldr	r3, [pc, #116]	; (800a9c4 <__pow5mult+0xac>)
 800a94e:	481e      	ldr	r0, [pc, #120]	; (800a9c8 <__pow5mult+0xb0>)
 800a950:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a954:	f000 fc0e 	bl	800b174 <__assert_func>
 800a958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a95c:	6004      	str	r4, [r0, #0]
 800a95e:	60c4      	str	r4, [r0, #12]
 800a960:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a968:	b94c      	cbnz	r4, 800a97e <__pow5mult+0x66>
 800a96a:	f240 2171 	movw	r1, #625	; 0x271
 800a96e:	4630      	mov	r0, r6
 800a970:	f7ff ff12 	bl	800a798 <__i2b>
 800a974:	2300      	movs	r3, #0
 800a976:	f8c8 0008 	str.w	r0, [r8, #8]
 800a97a:	4604      	mov	r4, r0
 800a97c:	6003      	str	r3, [r0, #0]
 800a97e:	f04f 0900 	mov.w	r9, #0
 800a982:	07eb      	lsls	r3, r5, #31
 800a984:	d50a      	bpl.n	800a99c <__pow5mult+0x84>
 800a986:	4639      	mov	r1, r7
 800a988:	4622      	mov	r2, r4
 800a98a:	4630      	mov	r0, r6
 800a98c:	f7ff ff1a 	bl	800a7c4 <__multiply>
 800a990:	4639      	mov	r1, r7
 800a992:	4680      	mov	r8, r0
 800a994:	4630      	mov	r0, r6
 800a996:	f7ff fe47 	bl	800a628 <_Bfree>
 800a99a:	4647      	mov	r7, r8
 800a99c:	106d      	asrs	r5, r5, #1
 800a99e:	d00b      	beq.n	800a9b8 <__pow5mult+0xa0>
 800a9a0:	6820      	ldr	r0, [r4, #0]
 800a9a2:	b938      	cbnz	r0, 800a9b4 <__pow5mult+0x9c>
 800a9a4:	4622      	mov	r2, r4
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7ff ff0b 	bl	800a7c4 <__multiply>
 800a9ae:	6020      	str	r0, [r4, #0]
 800a9b0:	f8c0 9000 	str.w	r9, [r0]
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	e7e4      	b.n	800a982 <__pow5mult+0x6a>
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9be:	bf00      	nop
 800a9c0:	0800bff8 	.word	0x0800bff8
 800a9c4:	0800be29 	.word	0x0800be29
 800a9c8:	0800beac 	.word	0x0800beac

0800a9cc <__lshift>:
 800a9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	6849      	ldr	r1, [r1, #4]
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9da:	68a3      	ldr	r3, [r4, #8]
 800a9dc:	4607      	mov	r7, r0
 800a9de:	4691      	mov	r9, r2
 800a9e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9e4:	f108 0601 	add.w	r6, r8, #1
 800a9e8:	42b3      	cmp	r3, r6
 800a9ea:	db0b      	blt.n	800aa04 <__lshift+0x38>
 800a9ec:	4638      	mov	r0, r7
 800a9ee:	f7ff fddb 	bl	800a5a8 <_Balloc>
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	b948      	cbnz	r0, 800aa0a <__lshift+0x3e>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	4b2a      	ldr	r3, [pc, #168]	; (800aaa4 <__lshift+0xd8>)
 800a9fa:	482b      	ldr	r0, [pc, #172]	; (800aaa8 <__lshift+0xdc>)
 800a9fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa00:	f000 fbb8 	bl	800b174 <__assert_func>
 800aa04:	3101      	adds	r1, #1
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	e7ee      	b.n	800a9e8 <__lshift+0x1c>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f100 0114 	add.w	r1, r0, #20
 800aa10:	f100 0210 	add.w	r2, r0, #16
 800aa14:	4618      	mov	r0, r3
 800aa16:	4553      	cmp	r3, sl
 800aa18:	db37      	blt.n	800aa8a <__lshift+0xbe>
 800aa1a:	6920      	ldr	r0, [r4, #16]
 800aa1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa20:	f104 0314 	add.w	r3, r4, #20
 800aa24:	f019 091f 	ands.w	r9, r9, #31
 800aa28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa30:	d02f      	beq.n	800aa92 <__lshift+0xc6>
 800aa32:	f1c9 0e20 	rsb	lr, r9, #32
 800aa36:	468a      	mov	sl, r1
 800aa38:	f04f 0c00 	mov.w	ip, #0
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	fa02 f209 	lsl.w	r2, r2, r9
 800aa42:	ea42 020c 	orr.w	r2, r2, ip
 800aa46:	f84a 2b04 	str.w	r2, [sl], #4
 800aa4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4e:	4298      	cmp	r0, r3
 800aa50:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aa54:	d8f2      	bhi.n	800aa3c <__lshift+0x70>
 800aa56:	1b03      	subs	r3, r0, r4
 800aa58:	3b15      	subs	r3, #21
 800aa5a:	f023 0303 	bic.w	r3, r3, #3
 800aa5e:	3304      	adds	r3, #4
 800aa60:	f104 0215 	add.w	r2, r4, #21
 800aa64:	4290      	cmp	r0, r2
 800aa66:	bf38      	it	cc
 800aa68:	2304      	movcc	r3, #4
 800aa6a:	f841 c003 	str.w	ip, [r1, r3]
 800aa6e:	f1bc 0f00 	cmp.w	ip, #0
 800aa72:	d001      	beq.n	800aa78 <__lshift+0xac>
 800aa74:	f108 0602 	add.w	r6, r8, #2
 800aa78:	3e01      	subs	r6, #1
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	612e      	str	r6, [r5, #16]
 800aa7e:	4621      	mov	r1, r4
 800aa80:	f7ff fdd2 	bl	800a628 <_Bfree>
 800aa84:	4628      	mov	r0, r5
 800aa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa8e:	3301      	adds	r3, #1
 800aa90:	e7c1      	b.n	800aa16 <__lshift+0x4a>
 800aa92:	3904      	subs	r1, #4
 800aa94:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa98:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa9c:	4298      	cmp	r0, r3
 800aa9e:	d8f9      	bhi.n	800aa94 <__lshift+0xc8>
 800aaa0:	e7ea      	b.n	800aa78 <__lshift+0xac>
 800aaa2:	bf00      	nop
 800aaa4:	0800be9b 	.word	0x0800be9b
 800aaa8:	0800beac 	.word	0x0800beac

0800aaac <__mcmp>:
 800aaac:	b530      	push	{r4, r5, lr}
 800aaae:	6902      	ldr	r2, [r0, #16]
 800aab0:	690c      	ldr	r4, [r1, #16]
 800aab2:	1b12      	subs	r2, r2, r4
 800aab4:	d10e      	bne.n	800aad4 <__mcmp+0x28>
 800aab6:	f100 0314 	add.w	r3, r0, #20
 800aaba:	3114      	adds	r1, #20
 800aabc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aac0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aac4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aac8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aacc:	42a5      	cmp	r5, r4
 800aace:	d003      	beq.n	800aad8 <__mcmp+0x2c>
 800aad0:	d305      	bcc.n	800aade <__mcmp+0x32>
 800aad2:	2201      	movs	r2, #1
 800aad4:	4610      	mov	r0, r2
 800aad6:	bd30      	pop	{r4, r5, pc}
 800aad8:	4283      	cmp	r3, r0
 800aada:	d3f3      	bcc.n	800aac4 <__mcmp+0x18>
 800aadc:	e7fa      	b.n	800aad4 <__mcmp+0x28>
 800aade:	f04f 32ff 	mov.w	r2, #4294967295
 800aae2:	e7f7      	b.n	800aad4 <__mcmp+0x28>

0800aae4 <__mdiff>:
 800aae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae8:	460c      	mov	r4, r1
 800aaea:	4606      	mov	r6, r0
 800aaec:	4611      	mov	r1, r2
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4690      	mov	r8, r2
 800aaf2:	f7ff ffdb 	bl	800aaac <__mcmp>
 800aaf6:	1e05      	subs	r5, r0, #0
 800aaf8:	d110      	bne.n	800ab1c <__mdiff+0x38>
 800aafa:	4629      	mov	r1, r5
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff fd53 	bl	800a5a8 <_Balloc>
 800ab02:	b930      	cbnz	r0, 800ab12 <__mdiff+0x2e>
 800ab04:	4b3a      	ldr	r3, [pc, #232]	; (800abf0 <__mdiff+0x10c>)
 800ab06:	4602      	mov	r2, r0
 800ab08:	f240 2132 	movw	r1, #562	; 0x232
 800ab0c:	4839      	ldr	r0, [pc, #228]	; (800abf4 <__mdiff+0x110>)
 800ab0e:	f000 fb31 	bl	800b174 <__assert_func>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1c:	bfa4      	itt	ge
 800ab1e:	4643      	movge	r3, r8
 800ab20:	46a0      	movge	r8, r4
 800ab22:	4630      	mov	r0, r6
 800ab24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab28:	bfa6      	itte	ge
 800ab2a:	461c      	movge	r4, r3
 800ab2c:	2500      	movge	r5, #0
 800ab2e:	2501      	movlt	r5, #1
 800ab30:	f7ff fd3a 	bl	800a5a8 <_Balloc>
 800ab34:	b920      	cbnz	r0, 800ab40 <__mdiff+0x5c>
 800ab36:	4b2e      	ldr	r3, [pc, #184]	; (800abf0 <__mdiff+0x10c>)
 800ab38:	4602      	mov	r2, r0
 800ab3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab3e:	e7e5      	b.n	800ab0c <__mdiff+0x28>
 800ab40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab44:	6926      	ldr	r6, [r4, #16]
 800ab46:	60c5      	str	r5, [r0, #12]
 800ab48:	f104 0914 	add.w	r9, r4, #20
 800ab4c:	f108 0514 	add.w	r5, r8, #20
 800ab50:	f100 0e14 	add.w	lr, r0, #20
 800ab54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab5c:	f108 0210 	add.w	r2, r8, #16
 800ab60:	46f2      	mov	sl, lr
 800ab62:	2100      	movs	r1, #0
 800ab64:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab6c:	fa1f f883 	uxth.w	r8, r3
 800ab70:	fa11 f18b 	uxtah	r1, r1, fp
 800ab74:	0c1b      	lsrs	r3, r3, #16
 800ab76:	eba1 0808 	sub.w	r8, r1, r8
 800ab7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab82:	fa1f f888 	uxth.w	r8, r8
 800ab86:	1419      	asrs	r1, r3, #16
 800ab88:	454e      	cmp	r6, r9
 800ab8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab8e:	f84a 3b04 	str.w	r3, [sl], #4
 800ab92:	d8e7      	bhi.n	800ab64 <__mdiff+0x80>
 800ab94:	1b33      	subs	r3, r6, r4
 800ab96:	3b15      	subs	r3, #21
 800ab98:	f023 0303 	bic.w	r3, r3, #3
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	3415      	adds	r4, #21
 800aba0:	42a6      	cmp	r6, r4
 800aba2:	bf38      	it	cc
 800aba4:	2304      	movcc	r3, #4
 800aba6:	441d      	add	r5, r3
 800aba8:	4473      	add	r3, lr
 800abaa:	469e      	mov	lr, r3
 800abac:	462e      	mov	r6, r5
 800abae:	4566      	cmp	r6, ip
 800abb0:	d30e      	bcc.n	800abd0 <__mdiff+0xec>
 800abb2:	f10c 0203 	add.w	r2, ip, #3
 800abb6:	1b52      	subs	r2, r2, r5
 800abb8:	f022 0203 	bic.w	r2, r2, #3
 800abbc:	3d03      	subs	r5, #3
 800abbe:	45ac      	cmp	ip, r5
 800abc0:	bf38      	it	cc
 800abc2:	2200      	movcc	r2, #0
 800abc4:	441a      	add	r2, r3
 800abc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800abca:	b17b      	cbz	r3, 800abec <__mdiff+0x108>
 800abcc:	6107      	str	r7, [r0, #16]
 800abce:	e7a3      	b.n	800ab18 <__mdiff+0x34>
 800abd0:	f856 8b04 	ldr.w	r8, [r6], #4
 800abd4:	fa11 f288 	uxtah	r2, r1, r8
 800abd8:	1414      	asrs	r4, r2, #16
 800abda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800abde:	b292      	uxth	r2, r2
 800abe0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800abe4:	f84e 2b04 	str.w	r2, [lr], #4
 800abe8:	1421      	asrs	r1, r4, #16
 800abea:	e7e0      	b.n	800abae <__mdiff+0xca>
 800abec:	3f01      	subs	r7, #1
 800abee:	e7ea      	b.n	800abc6 <__mdiff+0xe2>
 800abf0:	0800be9b 	.word	0x0800be9b
 800abf4:	0800beac 	.word	0x0800beac

0800abf8 <__d2b>:
 800abf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abfc:	4689      	mov	r9, r1
 800abfe:	2101      	movs	r1, #1
 800ac00:	ec57 6b10 	vmov	r6, r7, d0
 800ac04:	4690      	mov	r8, r2
 800ac06:	f7ff fccf 	bl	800a5a8 <_Balloc>
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	b930      	cbnz	r0, 800ac1c <__d2b+0x24>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	4b25      	ldr	r3, [pc, #148]	; (800aca8 <__d2b+0xb0>)
 800ac12:	4826      	ldr	r0, [pc, #152]	; (800acac <__d2b+0xb4>)
 800ac14:	f240 310a 	movw	r1, #778	; 0x30a
 800ac18:	f000 faac 	bl	800b174 <__assert_func>
 800ac1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac24:	bb35      	cbnz	r5, 800ac74 <__d2b+0x7c>
 800ac26:	2e00      	cmp	r6, #0
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	d028      	beq.n	800ac7e <__d2b+0x86>
 800ac2c:	4668      	mov	r0, sp
 800ac2e:	9600      	str	r6, [sp, #0]
 800ac30:	f7ff fd82 	bl	800a738 <__lo0bits>
 800ac34:	9900      	ldr	r1, [sp, #0]
 800ac36:	b300      	cbz	r0, 800ac7a <__d2b+0x82>
 800ac38:	9a01      	ldr	r2, [sp, #4]
 800ac3a:	f1c0 0320 	rsb	r3, r0, #32
 800ac3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac42:	430b      	orrs	r3, r1
 800ac44:	40c2      	lsrs	r2, r0
 800ac46:	6163      	str	r3, [r4, #20]
 800ac48:	9201      	str	r2, [sp, #4]
 800ac4a:	9b01      	ldr	r3, [sp, #4]
 800ac4c:	61a3      	str	r3, [r4, #24]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	bf14      	ite	ne
 800ac52:	2202      	movne	r2, #2
 800ac54:	2201      	moveq	r2, #1
 800ac56:	6122      	str	r2, [r4, #16]
 800ac58:	b1d5      	cbz	r5, 800ac90 <__d2b+0x98>
 800ac5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac5e:	4405      	add	r5, r0
 800ac60:	f8c9 5000 	str.w	r5, [r9]
 800ac64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac68:	f8c8 0000 	str.w	r0, [r8]
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	b003      	add	sp, #12
 800ac70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac78:	e7d5      	b.n	800ac26 <__d2b+0x2e>
 800ac7a:	6161      	str	r1, [r4, #20]
 800ac7c:	e7e5      	b.n	800ac4a <__d2b+0x52>
 800ac7e:	a801      	add	r0, sp, #4
 800ac80:	f7ff fd5a 	bl	800a738 <__lo0bits>
 800ac84:	9b01      	ldr	r3, [sp, #4]
 800ac86:	6163      	str	r3, [r4, #20]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	6122      	str	r2, [r4, #16]
 800ac8c:	3020      	adds	r0, #32
 800ac8e:	e7e3      	b.n	800ac58 <__d2b+0x60>
 800ac90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac98:	f8c9 0000 	str.w	r0, [r9]
 800ac9c:	6918      	ldr	r0, [r3, #16]
 800ac9e:	f7ff fd2b 	bl	800a6f8 <__hi0bits>
 800aca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aca6:	e7df      	b.n	800ac68 <__d2b+0x70>
 800aca8:	0800be9b 	.word	0x0800be9b
 800acac:	0800beac 	.word	0x0800beac

0800acb0 <_calloc_r>:
 800acb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acb2:	fba1 2402 	umull	r2, r4, r1, r2
 800acb6:	b94c      	cbnz	r4, 800accc <_calloc_r+0x1c>
 800acb8:	4611      	mov	r1, r2
 800acba:	9201      	str	r2, [sp, #4]
 800acbc:	f000 f87a 	bl	800adb4 <_malloc_r>
 800acc0:	9a01      	ldr	r2, [sp, #4]
 800acc2:	4605      	mov	r5, r0
 800acc4:	b930      	cbnz	r0, 800acd4 <_calloc_r+0x24>
 800acc6:	4628      	mov	r0, r5
 800acc8:	b003      	add	sp, #12
 800acca:	bd30      	pop	{r4, r5, pc}
 800accc:	220c      	movs	r2, #12
 800acce:	6002      	str	r2, [r0, #0]
 800acd0:	2500      	movs	r5, #0
 800acd2:	e7f8      	b.n	800acc6 <_calloc_r+0x16>
 800acd4:	4621      	mov	r1, r4
 800acd6:	f7fe f93f 	bl	8008f58 <memset>
 800acda:	e7f4      	b.n	800acc6 <_calloc_r+0x16>

0800acdc <_free_r>:
 800acdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acde:	2900      	cmp	r1, #0
 800ace0:	d044      	beq.n	800ad6c <_free_r+0x90>
 800ace2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace6:	9001      	str	r0, [sp, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f1a1 0404 	sub.w	r4, r1, #4
 800acee:	bfb8      	it	lt
 800acf0:	18e4      	addlt	r4, r4, r3
 800acf2:	f000 fa9b 	bl	800b22c <__malloc_lock>
 800acf6:	4a1e      	ldr	r2, [pc, #120]	; (800ad70 <_free_r+0x94>)
 800acf8:	9801      	ldr	r0, [sp, #4]
 800acfa:	6813      	ldr	r3, [r2, #0]
 800acfc:	b933      	cbnz	r3, 800ad0c <_free_r+0x30>
 800acfe:	6063      	str	r3, [r4, #4]
 800ad00:	6014      	str	r4, [r2, #0]
 800ad02:	b003      	add	sp, #12
 800ad04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad08:	f000 ba96 	b.w	800b238 <__malloc_unlock>
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	d908      	bls.n	800ad22 <_free_r+0x46>
 800ad10:	6825      	ldr	r5, [r4, #0]
 800ad12:	1961      	adds	r1, r4, r5
 800ad14:	428b      	cmp	r3, r1
 800ad16:	bf01      	itttt	eq
 800ad18:	6819      	ldreq	r1, [r3, #0]
 800ad1a:	685b      	ldreq	r3, [r3, #4]
 800ad1c:	1949      	addeq	r1, r1, r5
 800ad1e:	6021      	streq	r1, [r4, #0]
 800ad20:	e7ed      	b.n	800acfe <_free_r+0x22>
 800ad22:	461a      	mov	r2, r3
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	b10b      	cbz	r3, 800ad2c <_free_r+0x50>
 800ad28:	42a3      	cmp	r3, r4
 800ad2a:	d9fa      	bls.n	800ad22 <_free_r+0x46>
 800ad2c:	6811      	ldr	r1, [r2, #0]
 800ad2e:	1855      	adds	r5, r2, r1
 800ad30:	42a5      	cmp	r5, r4
 800ad32:	d10b      	bne.n	800ad4c <_free_r+0x70>
 800ad34:	6824      	ldr	r4, [r4, #0]
 800ad36:	4421      	add	r1, r4
 800ad38:	1854      	adds	r4, r2, r1
 800ad3a:	42a3      	cmp	r3, r4
 800ad3c:	6011      	str	r1, [r2, #0]
 800ad3e:	d1e0      	bne.n	800ad02 <_free_r+0x26>
 800ad40:	681c      	ldr	r4, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	6053      	str	r3, [r2, #4]
 800ad46:	4421      	add	r1, r4
 800ad48:	6011      	str	r1, [r2, #0]
 800ad4a:	e7da      	b.n	800ad02 <_free_r+0x26>
 800ad4c:	d902      	bls.n	800ad54 <_free_r+0x78>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	6003      	str	r3, [r0, #0]
 800ad52:	e7d6      	b.n	800ad02 <_free_r+0x26>
 800ad54:	6825      	ldr	r5, [r4, #0]
 800ad56:	1961      	adds	r1, r4, r5
 800ad58:	428b      	cmp	r3, r1
 800ad5a:	bf04      	itt	eq
 800ad5c:	6819      	ldreq	r1, [r3, #0]
 800ad5e:	685b      	ldreq	r3, [r3, #4]
 800ad60:	6063      	str	r3, [r4, #4]
 800ad62:	bf04      	itt	eq
 800ad64:	1949      	addeq	r1, r1, r5
 800ad66:	6021      	streq	r1, [r4, #0]
 800ad68:	6054      	str	r4, [r2, #4]
 800ad6a:	e7ca      	b.n	800ad02 <_free_r+0x26>
 800ad6c:	b003      	add	sp, #12
 800ad6e:	bd30      	pop	{r4, r5, pc}
 800ad70:	20001828 	.word	0x20001828

0800ad74 <sbrk_aligned>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	4e0e      	ldr	r6, [pc, #56]	; (800adb0 <sbrk_aligned+0x3c>)
 800ad78:	460c      	mov	r4, r1
 800ad7a:	6831      	ldr	r1, [r6, #0]
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	b911      	cbnz	r1, 800ad86 <sbrk_aligned+0x12>
 800ad80:	f000 f9e8 	bl	800b154 <_sbrk_r>
 800ad84:	6030      	str	r0, [r6, #0]
 800ad86:	4621      	mov	r1, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f000 f9e3 	bl	800b154 <_sbrk_r>
 800ad8e:	1c43      	adds	r3, r0, #1
 800ad90:	d00a      	beq.n	800ada8 <sbrk_aligned+0x34>
 800ad92:	1cc4      	adds	r4, r0, #3
 800ad94:	f024 0403 	bic.w	r4, r4, #3
 800ad98:	42a0      	cmp	r0, r4
 800ad9a:	d007      	beq.n	800adac <sbrk_aligned+0x38>
 800ad9c:	1a21      	subs	r1, r4, r0
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f000 f9d8 	bl	800b154 <_sbrk_r>
 800ada4:	3001      	adds	r0, #1
 800ada6:	d101      	bne.n	800adac <sbrk_aligned+0x38>
 800ada8:	f04f 34ff 	mov.w	r4, #4294967295
 800adac:	4620      	mov	r0, r4
 800adae:	bd70      	pop	{r4, r5, r6, pc}
 800adb0:	2000182c 	.word	0x2000182c

0800adb4 <_malloc_r>:
 800adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb8:	1ccd      	adds	r5, r1, #3
 800adba:	f025 0503 	bic.w	r5, r5, #3
 800adbe:	3508      	adds	r5, #8
 800adc0:	2d0c      	cmp	r5, #12
 800adc2:	bf38      	it	cc
 800adc4:	250c      	movcc	r5, #12
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	4607      	mov	r7, r0
 800adca:	db01      	blt.n	800add0 <_malloc_r+0x1c>
 800adcc:	42a9      	cmp	r1, r5
 800adce:	d905      	bls.n	800addc <_malloc_r+0x28>
 800add0:	230c      	movs	r3, #12
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	2600      	movs	r6, #0
 800add6:	4630      	mov	r0, r6
 800add8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800addc:	4e2e      	ldr	r6, [pc, #184]	; (800ae98 <_malloc_r+0xe4>)
 800adde:	f000 fa25 	bl	800b22c <__malloc_lock>
 800ade2:	6833      	ldr	r3, [r6, #0]
 800ade4:	461c      	mov	r4, r3
 800ade6:	bb34      	cbnz	r4, 800ae36 <_malloc_r+0x82>
 800ade8:	4629      	mov	r1, r5
 800adea:	4638      	mov	r0, r7
 800adec:	f7ff ffc2 	bl	800ad74 <sbrk_aligned>
 800adf0:	1c43      	adds	r3, r0, #1
 800adf2:	4604      	mov	r4, r0
 800adf4:	d14d      	bne.n	800ae92 <_malloc_r+0xde>
 800adf6:	6834      	ldr	r4, [r6, #0]
 800adf8:	4626      	mov	r6, r4
 800adfa:	2e00      	cmp	r6, #0
 800adfc:	d140      	bne.n	800ae80 <_malloc_r+0xcc>
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	4631      	mov	r1, r6
 800ae02:	4638      	mov	r0, r7
 800ae04:	eb04 0803 	add.w	r8, r4, r3
 800ae08:	f000 f9a4 	bl	800b154 <_sbrk_r>
 800ae0c:	4580      	cmp	r8, r0
 800ae0e:	d13a      	bne.n	800ae86 <_malloc_r+0xd2>
 800ae10:	6821      	ldr	r1, [r4, #0]
 800ae12:	3503      	adds	r5, #3
 800ae14:	1a6d      	subs	r5, r5, r1
 800ae16:	f025 0503 	bic.w	r5, r5, #3
 800ae1a:	3508      	adds	r5, #8
 800ae1c:	2d0c      	cmp	r5, #12
 800ae1e:	bf38      	it	cc
 800ae20:	250c      	movcc	r5, #12
 800ae22:	4629      	mov	r1, r5
 800ae24:	4638      	mov	r0, r7
 800ae26:	f7ff ffa5 	bl	800ad74 <sbrk_aligned>
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	d02b      	beq.n	800ae86 <_malloc_r+0xd2>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	442b      	add	r3, r5
 800ae32:	6023      	str	r3, [r4, #0]
 800ae34:	e00e      	b.n	800ae54 <_malloc_r+0xa0>
 800ae36:	6822      	ldr	r2, [r4, #0]
 800ae38:	1b52      	subs	r2, r2, r5
 800ae3a:	d41e      	bmi.n	800ae7a <_malloc_r+0xc6>
 800ae3c:	2a0b      	cmp	r2, #11
 800ae3e:	d916      	bls.n	800ae6e <_malloc_r+0xba>
 800ae40:	1961      	adds	r1, r4, r5
 800ae42:	42a3      	cmp	r3, r4
 800ae44:	6025      	str	r5, [r4, #0]
 800ae46:	bf18      	it	ne
 800ae48:	6059      	strne	r1, [r3, #4]
 800ae4a:	6863      	ldr	r3, [r4, #4]
 800ae4c:	bf08      	it	eq
 800ae4e:	6031      	streq	r1, [r6, #0]
 800ae50:	5162      	str	r2, [r4, r5]
 800ae52:	604b      	str	r3, [r1, #4]
 800ae54:	4638      	mov	r0, r7
 800ae56:	f104 060b 	add.w	r6, r4, #11
 800ae5a:	f000 f9ed 	bl	800b238 <__malloc_unlock>
 800ae5e:	f026 0607 	bic.w	r6, r6, #7
 800ae62:	1d23      	adds	r3, r4, #4
 800ae64:	1af2      	subs	r2, r6, r3
 800ae66:	d0b6      	beq.n	800add6 <_malloc_r+0x22>
 800ae68:	1b9b      	subs	r3, r3, r6
 800ae6a:	50a3      	str	r3, [r4, r2]
 800ae6c:	e7b3      	b.n	800add6 <_malloc_r+0x22>
 800ae6e:	6862      	ldr	r2, [r4, #4]
 800ae70:	42a3      	cmp	r3, r4
 800ae72:	bf0c      	ite	eq
 800ae74:	6032      	streq	r2, [r6, #0]
 800ae76:	605a      	strne	r2, [r3, #4]
 800ae78:	e7ec      	b.n	800ae54 <_malloc_r+0xa0>
 800ae7a:	4623      	mov	r3, r4
 800ae7c:	6864      	ldr	r4, [r4, #4]
 800ae7e:	e7b2      	b.n	800ade6 <_malloc_r+0x32>
 800ae80:	4634      	mov	r4, r6
 800ae82:	6876      	ldr	r6, [r6, #4]
 800ae84:	e7b9      	b.n	800adfa <_malloc_r+0x46>
 800ae86:	230c      	movs	r3, #12
 800ae88:	603b      	str	r3, [r7, #0]
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	f000 f9d4 	bl	800b238 <__malloc_unlock>
 800ae90:	e7a1      	b.n	800add6 <_malloc_r+0x22>
 800ae92:	6025      	str	r5, [r4, #0]
 800ae94:	e7de      	b.n	800ae54 <_malloc_r+0xa0>
 800ae96:	bf00      	nop
 800ae98:	20001828 	.word	0x20001828

0800ae9c <__ssputs_r>:
 800ae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea0:	688e      	ldr	r6, [r1, #8]
 800aea2:	429e      	cmp	r6, r3
 800aea4:	4682      	mov	sl, r0
 800aea6:	460c      	mov	r4, r1
 800aea8:	4690      	mov	r8, r2
 800aeaa:	461f      	mov	r7, r3
 800aeac:	d838      	bhi.n	800af20 <__ssputs_r+0x84>
 800aeae:	898a      	ldrh	r2, [r1, #12]
 800aeb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aeb4:	d032      	beq.n	800af1c <__ssputs_r+0x80>
 800aeb6:	6825      	ldr	r5, [r4, #0]
 800aeb8:	6909      	ldr	r1, [r1, #16]
 800aeba:	eba5 0901 	sub.w	r9, r5, r1
 800aebe:	6965      	ldr	r5, [r4, #20]
 800aec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aec8:	3301      	adds	r3, #1
 800aeca:	444b      	add	r3, r9
 800aecc:	106d      	asrs	r5, r5, #1
 800aece:	429d      	cmp	r5, r3
 800aed0:	bf38      	it	cc
 800aed2:	461d      	movcc	r5, r3
 800aed4:	0553      	lsls	r3, r2, #21
 800aed6:	d531      	bpl.n	800af3c <__ssputs_r+0xa0>
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7ff ff6b 	bl	800adb4 <_malloc_r>
 800aede:	4606      	mov	r6, r0
 800aee0:	b950      	cbnz	r0, 800aef8 <__ssputs_r+0x5c>
 800aee2:	230c      	movs	r3, #12
 800aee4:	f8ca 3000 	str.w	r3, [sl]
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeee:	81a3      	strh	r3, [r4, #12]
 800aef0:	f04f 30ff 	mov.w	r0, #4294967295
 800aef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef8:	6921      	ldr	r1, [r4, #16]
 800aefa:	464a      	mov	r2, r9
 800aefc:	f7ff fb46 	bl	800a58c <memcpy>
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	6126      	str	r6, [r4, #16]
 800af0e:	6165      	str	r5, [r4, #20]
 800af10:	444e      	add	r6, r9
 800af12:	eba5 0509 	sub.w	r5, r5, r9
 800af16:	6026      	str	r6, [r4, #0]
 800af18:	60a5      	str	r5, [r4, #8]
 800af1a:	463e      	mov	r6, r7
 800af1c:	42be      	cmp	r6, r7
 800af1e:	d900      	bls.n	800af22 <__ssputs_r+0x86>
 800af20:	463e      	mov	r6, r7
 800af22:	6820      	ldr	r0, [r4, #0]
 800af24:	4632      	mov	r2, r6
 800af26:	4641      	mov	r1, r8
 800af28:	f000 f966 	bl	800b1f8 <memmove>
 800af2c:	68a3      	ldr	r3, [r4, #8]
 800af2e:	1b9b      	subs	r3, r3, r6
 800af30:	60a3      	str	r3, [r4, #8]
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	4433      	add	r3, r6
 800af36:	6023      	str	r3, [r4, #0]
 800af38:	2000      	movs	r0, #0
 800af3a:	e7db      	b.n	800aef4 <__ssputs_r+0x58>
 800af3c:	462a      	mov	r2, r5
 800af3e:	f000 f981 	bl	800b244 <_realloc_r>
 800af42:	4606      	mov	r6, r0
 800af44:	2800      	cmp	r0, #0
 800af46:	d1e1      	bne.n	800af0c <__ssputs_r+0x70>
 800af48:	6921      	ldr	r1, [r4, #16]
 800af4a:	4650      	mov	r0, sl
 800af4c:	f7ff fec6 	bl	800acdc <_free_r>
 800af50:	e7c7      	b.n	800aee2 <__ssputs_r+0x46>
	...

0800af54 <_svfiprintf_r>:
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	4698      	mov	r8, r3
 800af5a:	898b      	ldrh	r3, [r1, #12]
 800af5c:	061b      	lsls	r3, r3, #24
 800af5e:	b09d      	sub	sp, #116	; 0x74
 800af60:	4607      	mov	r7, r0
 800af62:	460d      	mov	r5, r1
 800af64:	4614      	mov	r4, r2
 800af66:	d50e      	bpl.n	800af86 <_svfiprintf_r+0x32>
 800af68:	690b      	ldr	r3, [r1, #16]
 800af6a:	b963      	cbnz	r3, 800af86 <_svfiprintf_r+0x32>
 800af6c:	2140      	movs	r1, #64	; 0x40
 800af6e:	f7ff ff21 	bl	800adb4 <_malloc_r>
 800af72:	6028      	str	r0, [r5, #0]
 800af74:	6128      	str	r0, [r5, #16]
 800af76:	b920      	cbnz	r0, 800af82 <_svfiprintf_r+0x2e>
 800af78:	230c      	movs	r3, #12
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295
 800af80:	e0d1      	b.n	800b126 <_svfiprintf_r+0x1d2>
 800af82:	2340      	movs	r3, #64	; 0x40
 800af84:	616b      	str	r3, [r5, #20]
 800af86:	2300      	movs	r3, #0
 800af88:	9309      	str	r3, [sp, #36]	; 0x24
 800af8a:	2320      	movs	r3, #32
 800af8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af90:	f8cd 800c 	str.w	r8, [sp, #12]
 800af94:	2330      	movs	r3, #48	; 0x30
 800af96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b140 <_svfiprintf_r+0x1ec>
 800af9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af9e:	f04f 0901 	mov.w	r9, #1
 800afa2:	4623      	mov	r3, r4
 800afa4:	469a      	mov	sl, r3
 800afa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afaa:	b10a      	cbz	r2, 800afb0 <_svfiprintf_r+0x5c>
 800afac:	2a25      	cmp	r2, #37	; 0x25
 800afae:	d1f9      	bne.n	800afa4 <_svfiprintf_r+0x50>
 800afb0:	ebba 0b04 	subs.w	fp, sl, r4
 800afb4:	d00b      	beq.n	800afce <_svfiprintf_r+0x7a>
 800afb6:	465b      	mov	r3, fp
 800afb8:	4622      	mov	r2, r4
 800afba:	4629      	mov	r1, r5
 800afbc:	4638      	mov	r0, r7
 800afbe:	f7ff ff6d 	bl	800ae9c <__ssputs_r>
 800afc2:	3001      	adds	r0, #1
 800afc4:	f000 80aa 	beq.w	800b11c <_svfiprintf_r+0x1c8>
 800afc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afca:	445a      	add	r2, fp
 800afcc:	9209      	str	r2, [sp, #36]	; 0x24
 800afce:	f89a 3000 	ldrb.w	r3, [sl]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 80a2 	beq.w	800b11c <_svfiprintf_r+0x1c8>
 800afd8:	2300      	movs	r3, #0
 800afda:	f04f 32ff 	mov.w	r2, #4294967295
 800afde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afe2:	f10a 0a01 	add.w	sl, sl, #1
 800afe6:	9304      	str	r3, [sp, #16]
 800afe8:	9307      	str	r3, [sp, #28]
 800afea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afee:	931a      	str	r3, [sp, #104]	; 0x68
 800aff0:	4654      	mov	r4, sl
 800aff2:	2205      	movs	r2, #5
 800aff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff8:	4851      	ldr	r0, [pc, #324]	; (800b140 <_svfiprintf_r+0x1ec>)
 800affa:	f7f5 f8f9 	bl	80001f0 <memchr>
 800affe:	9a04      	ldr	r2, [sp, #16]
 800b000:	b9d8      	cbnz	r0, 800b03a <_svfiprintf_r+0xe6>
 800b002:	06d0      	lsls	r0, r2, #27
 800b004:	bf44      	itt	mi
 800b006:	2320      	movmi	r3, #32
 800b008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b00c:	0711      	lsls	r1, r2, #28
 800b00e:	bf44      	itt	mi
 800b010:	232b      	movmi	r3, #43	; 0x2b
 800b012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b016:	f89a 3000 	ldrb.w	r3, [sl]
 800b01a:	2b2a      	cmp	r3, #42	; 0x2a
 800b01c:	d015      	beq.n	800b04a <_svfiprintf_r+0xf6>
 800b01e:	9a07      	ldr	r2, [sp, #28]
 800b020:	4654      	mov	r4, sl
 800b022:	2000      	movs	r0, #0
 800b024:	f04f 0c0a 	mov.w	ip, #10
 800b028:	4621      	mov	r1, r4
 800b02a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b02e:	3b30      	subs	r3, #48	; 0x30
 800b030:	2b09      	cmp	r3, #9
 800b032:	d94e      	bls.n	800b0d2 <_svfiprintf_r+0x17e>
 800b034:	b1b0      	cbz	r0, 800b064 <_svfiprintf_r+0x110>
 800b036:	9207      	str	r2, [sp, #28]
 800b038:	e014      	b.n	800b064 <_svfiprintf_r+0x110>
 800b03a:	eba0 0308 	sub.w	r3, r0, r8
 800b03e:	fa09 f303 	lsl.w	r3, r9, r3
 800b042:	4313      	orrs	r3, r2
 800b044:	9304      	str	r3, [sp, #16]
 800b046:	46a2      	mov	sl, r4
 800b048:	e7d2      	b.n	800aff0 <_svfiprintf_r+0x9c>
 800b04a:	9b03      	ldr	r3, [sp, #12]
 800b04c:	1d19      	adds	r1, r3, #4
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	9103      	str	r1, [sp, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	bfbb      	ittet	lt
 800b056:	425b      	neglt	r3, r3
 800b058:	f042 0202 	orrlt.w	r2, r2, #2
 800b05c:	9307      	strge	r3, [sp, #28]
 800b05e:	9307      	strlt	r3, [sp, #28]
 800b060:	bfb8      	it	lt
 800b062:	9204      	strlt	r2, [sp, #16]
 800b064:	7823      	ldrb	r3, [r4, #0]
 800b066:	2b2e      	cmp	r3, #46	; 0x2e
 800b068:	d10c      	bne.n	800b084 <_svfiprintf_r+0x130>
 800b06a:	7863      	ldrb	r3, [r4, #1]
 800b06c:	2b2a      	cmp	r3, #42	; 0x2a
 800b06e:	d135      	bne.n	800b0dc <_svfiprintf_r+0x188>
 800b070:	9b03      	ldr	r3, [sp, #12]
 800b072:	1d1a      	adds	r2, r3, #4
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	9203      	str	r2, [sp, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	bfb8      	it	lt
 800b07c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b080:	3402      	adds	r4, #2
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b150 <_svfiprintf_r+0x1fc>
 800b088:	7821      	ldrb	r1, [r4, #0]
 800b08a:	2203      	movs	r2, #3
 800b08c:	4650      	mov	r0, sl
 800b08e:	f7f5 f8af 	bl	80001f0 <memchr>
 800b092:	b140      	cbz	r0, 800b0a6 <_svfiprintf_r+0x152>
 800b094:	2340      	movs	r3, #64	; 0x40
 800b096:	eba0 000a 	sub.w	r0, r0, sl
 800b09a:	fa03 f000 	lsl.w	r0, r3, r0
 800b09e:	9b04      	ldr	r3, [sp, #16]
 800b0a0:	4303      	orrs	r3, r0
 800b0a2:	3401      	adds	r4, #1
 800b0a4:	9304      	str	r3, [sp, #16]
 800b0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0aa:	4826      	ldr	r0, [pc, #152]	; (800b144 <_svfiprintf_r+0x1f0>)
 800b0ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0b0:	2206      	movs	r2, #6
 800b0b2:	f7f5 f89d 	bl	80001f0 <memchr>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d038      	beq.n	800b12c <_svfiprintf_r+0x1d8>
 800b0ba:	4b23      	ldr	r3, [pc, #140]	; (800b148 <_svfiprintf_r+0x1f4>)
 800b0bc:	bb1b      	cbnz	r3, 800b106 <_svfiprintf_r+0x1b2>
 800b0be:	9b03      	ldr	r3, [sp, #12]
 800b0c0:	3307      	adds	r3, #7
 800b0c2:	f023 0307 	bic.w	r3, r3, #7
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	9303      	str	r3, [sp, #12]
 800b0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0cc:	4433      	add	r3, r6
 800b0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d0:	e767      	b.n	800afa2 <_svfiprintf_r+0x4e>
 800b0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	2001      	movs	r0, #1
 800b0da:	e7a5      	b.n	800b028 <_svfiprintf_r+0xd4>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	3401      	adds	r4, #1
 800b0e0:	9305      	str	r3, [sp, #20]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	f04f 0c0a 	mov.w	ip, #10
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ee:	3a30      	subs	r2, #48	; 0x30
 800b0f0:	2a09      	cmp	r2, #9
 800b0f2:	d903      	bls.n	800b0fc <_svfiprintf_r+0x1a8>
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d0c5      	beq.n	800b084 <_svfiprintf_r+0x130>
 800b0f8:	9105      	str	r1, [sp, #20]
 800b0fa:	e7c3      	b.n	800b084 <_svfiprintf_r+0x130>
 800b0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b100:	4604      	mov	r4, r0
 800b102:	2301      	movs	r3, #1
 800b104:	e7f0      	b.n	800b0e8 <_svfiprintf_r+0x194>
 800b106:	ab03      	add	r3, sp, #12
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	462a      	mov	r2, r5
 800b10c:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <_svfiprintf_r+0x1f8>)
 800b10e:	a904      	add	r1, sp, #16
 800b110:	4638      	mov	r0, r7
 800b112:	f7fd ffc9 	bl	80090a8 <_printf_float>
 800b116:	1c42      	adds	r2, r0, #1
 800b118:	4606      	mov	r6, r0
 800b11a:	d1d6      	bne.n	800b0ca <_svfiprintf_r+0x176>
 800b11c:	89ab      	ldrh	r3, [r5, #12]
 800b11e:	065b      	lsls	r3, r3, #25
 800b120:	f53f af2c 	bmi.w	800af7c <_svfiprintf_r+0x28>
 800b124:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b126:	b01d      	add	sp, #116	; 0x74
 800b128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12c:	ab03      	add	r3, sp, #12
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	462a      	mov	r2, r5
 800b132:	4b06      	ldr	r3, [pc, #24]	; (800b14c <_svfiprintf_r+0x1f8>)
 800b134:	a904      	add	r1, sp, #16
 800b136:	4638      	mov	r0, r7
 800b138:	f7fe fa5a 	bl	80095f0 <_printf_i>
 800b13c:	e7eb      	b.n	800b116 <_svfiprintf_r+0x1c2>
 800b13e:	bf00      	nop
 800b140:	0800c004 	.word	0x0800c004
 800b144:	0800c00e 	.word	0x0800c00e
 800b148:	080090a9 	.word	0x080090a9
 800b14c:	0800ae9d 	.word	0x0800ae9d
 800b150:	0800c00a 	.word	0x0800c00a

0800b154 <_sbrk_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4d06      	ldr	r5, [pc, #24]	; (800b170 <_sbrk_r+0x1c>)
 800b158:	2300      	movs	r3, #0
 800b15a:	4604      	mov	r4, r0
 800b15c:	4608      	mov	r0, r1
 800b15e:	602b      	str	r3, [r5, #0]
 800b160:	f7f6 f9be 	bl	80014e0 <_sbrk>
 800b164:	1c43      	adds	r3, r0, #1
 800b166:	d102      	bne.n	800b16e <_sbrk_r+0x1a>
 800b168:	682b      	ldr	r3, [r5, #0]
 800b16a:	b103      	cbz	r3, 800b16e <_sbrk_r+0x1a>
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	bd38      	pop	{r3, r4, r5, pc}
 800b170:	20001830 	.word	0x20001830

0800b174 <__assert_func>:
 800b174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b176:	4614      	mov	r4, r2
 800b178:	461a      	mov	r2, r3
 800b17a:	4b09      	ldr	r3, [pc, #36]	; (800b1a0 <__assert_func+0x2c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4605      	mov	r5, r0
 800b180:	68d8      	ldr	r0, [r3, #12]
 800b182:	b14c      	cbz	r4, 800b198 <__assert_func+0x24>
 800b184:	4b07      	ldr	r3, [pc, #28]	; (800b1a4 <__assert_func+0x30>)
 800b186:	9100      	str	r1, [sp, #0]
 800b188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b18c:	4906      	ldr	r1, [pc, #24]	; (800b1a8 <__assert_func+0x34>)
 800b18e:	462b      	mov	r3, r5
 800b190:	f000 f80e 	bl	800b1b0 <fiprintf>
 800b194:	f000 faac 	bl	800b6f0 <abort>
 800b198:	4b04      	ldr	r3, [pc, #16]	; (800b1ac <__assert_func+0x38>)
 800b19a:	461c      	mov	r4, r3
 800b19c:	e7f3      	b.n	800b186 <__assert_func+0x12>
 800b19e:	bf00      	nop
 800b1a0:	20000198 	.word	0x20000198
 800b1a4:	0800c015 	.word	0x0800c015
 800b1a8:	0800c022 	.word	0x0800c022
 800b1ac:	0800c050 	.word	0x0800c050

0800b1b0 <fiprintf>:
 800b1b0:	b40e      	push	{r1, r2, r3}
 800b1b2:	b503      	push	{r0, r1, lr}
 800b1b4:	4601      	mov	r1, r0
 800b1b6:	ab03      	add	r3, sp, #12
 800b1b8:	4805      	ldr	r0, [pc, #20]	; (800b1d0 <fiprintf+0x20>)
 800b1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1be:	6800      	ldr	r0, [r0, #0]
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	f000 f897 	bl	800b2f4 <_vfiprintf_r>
 800b1c6:	b002      	add	sp, #8
 800b1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1cc:	b003      	add	sp, #12
 800b1ce:	4770      	bx	lr
 800b1d0:	20000198 	.word	0x20000198

0800b1d4 <__ascii_mbtowc>:
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	b901      	cbnz	r1, 800b1da <__ascii_mbtowc+0x6>
 800b1d8:	a901      	add	r1, sp, #4
 800b1da:	b142      	cbz	r2, 800b1ee <__ascii_mbtowc+0x1a>
 800b1dc:	b14b      	cbz	r3, 800b1f2 <__ascii_mbtowc+0x1e>
 800b1de:	7813      	ldrb	r3, [r2, #0]
 800b1e0:	600b      	str	r3, [r1, #0]
 800b1e2:	7812      	ldrb	r2, [r2, #0]
 800b1e4:	1e10      	subs	r0, r2, #0
 800b1e6:	bf18      	it	ne
 800b1e8:	2001      	movne	r0, #1
 800b1ea:	b002      	add	sp, #8
 800b1ec:	4770      	bx	lr
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	e7fb      	b.n	800b1ea <__ascii_mbtowc+0x16>
 800b1f2:	f06f 0001 	mvn.w	r0, #1
 800b1f6:	e7f8      	b.n	800b1ea <__ascii_mbtowc+0x16>

0800b1f8 <memmove>:
 800b1f8:	4288      	cmp	r0, r1
 800b1fa:	b510      	push	{r4, lr}
 800b1fc:	eb01 0402 	add.w	r4, r1, r2
 800b200:	d902      	bls.n	800b208 <memmove+0x10>
 800b202:	4284      	cmp	r4, r0
 800b204:	4623      	mov	r3, r4
 800b206:	d807      	bhi.n	800b218 <memmove+0x20>
 800b208:	1e43      	subs	r3, r0, #1
 800b20a:	42a1      	cmp	r1, r4
 800b20c:	d008      	beq.n	800b220 <memmove+0x28>
 800b20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b216:	e7f8      	b.n	800b20a <memmove+0x12>
 800b218:	4402      	add	r2, r0
 800b21a:	4601      	mov	r1, r0
 800b21c:	428a      	cmp	r2, r1
 800b21e:	d100      	bne.n	800b222 <memmove+0x2a>
 800b220:	bd10      	pop	{r4, pc}
 800b222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b22a:	e7f7      	b.n	800b21c <memmove+0x24>

0800b22c <__malloc_lock>:
 800b22c:	4801      	ldr	r0, [pc, #4]	; (800b234 <__malloc_lock+0x8>)
 800b22e:	f000 bc1f 	b.w	800ba70 <__retarget_lock_acquire_recursive>
 800b232:	bf00      	nop
 800b234:	20001834 	.word	0x20001834

0800b238 <__malloc_unlock>:
 800b238:	4801      	ldr	r0, [pc, #4]	; (800b240 <__malloc_unlock+0x8>)
 800b23a:	f000 bc1a 	b.w	800ba72 <__retarget_lock_release_recursive>
 800b23e:	bf00      	nop
 800b240:	20001834 	.word	0x20001834

0800b244 <_realloc_r>:
 800b244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b248:	4680      	mov	r8, r0
 800b24a:	4614      	mov	r4, r2
 800b24c:	460e      	mov	r6, r1
 800b24e:	b921      	cbnz	r1, 800b25a <_realloc_r+0x16>
 800b250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b254:	4611      	mov	r1, r2
 800b256:	f7ff bdad 	b.w	800adb4 <_malloc_r>
 800b25a:	b92a      	cbnz	r2, 800b268 <_realloc_r+0x24>
 800b25c:	f7ff fd3e 	bl	800acdc <_free_r>
 800b260:	4625      	mov	r5, r4
 800b262:	4628      	mov	r0, r5
 800b264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b268:	f000 fc6a 	bl	800bb40 <_malloc_usable_size_r>
 800b26c:	4284      	cmp	r4, r0
 800b26e:	4607      	mov	r7, r0
 800b270:	d802      	bhi.n	800b278 <_realloc_r+0x34>
 800b272:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b276:	d812      	bhi.n	800b29e <_realloc_r+0x5a>
 800b278:	4621      	mov	r1, r4
 800b27a:	4640      	mov	r0, r8
 800b27c:	f7ff fd9a 	bl	800adb4 <_malloc_r>
 800b280:	4605      	mov	r5, r0
 800b282:	2800      	cmp	r0, #0
 800b284:	d0ed      	beq.n	800b262 <_realloc_r+0x1e>
 800b286:	42bc      	cmp	r4, r7
 800b288:	4622      	mov	r2, r4
 800b28a:	4631      	mov	r1, r6
 800b28c:	bf28      	it	cs
 800b28e:	463a      	movcs	r2, r7
 800b290:	f7ff f97c 	bl	800a58c <memcpy>
 800b294:	4631      	mov	r1, r6
 800b296:	4640      	mov	r0, r8
 800b298:	f7ff fd20 	bl	800acdc <_free_r>
 800b29c:	e7e1      	b.n	800b262 <_realloc_r+0x1e>
 800b29e:	4635      	mov	r5, r6
 800b2a0:	e7df      	b.n	800b262 <_realloc_r+0x1e>

0800b2a2 <__sfputc_r>:
 800b2a2:	6893      	ldr	r3, [r2, #8]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	b410      	push	{r4}
 800b2aa:	6093      	str	r3, [r2, #8]
 800b2ac:	da08      	bge.n	800b2c0 <__sfputc_r+0x1e>
 800b2ae:	6994      	ldr	r4, [r2, #24]
 800b2b0:	42a3      	cmp	r3, r4
 800b2b2:	db01      	blt.n	800b2b8 <__sfputc_r+0x16>
 800b2b4:	290a      	cmp	r1, #10
 800b2b6:	d103      	bne.n	800b2c0 <__sfputc_r+0x1e>
 800b2b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2bc:	f000 b94a 	b.w	800b554 <__swbuf_r>
 800b2c0:	6813      	ldr	r3, [r2, #0]
 800b2c2:	1c58      	adds	r0, r3, #1
 800b2c4:	6010      	str	r0, [r2, #0]
 800b2c6:	7019      	strb	r1, [r3, #0]
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <__sfputs_r>:
 800b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	460f      	mov	r7, r1
 800b2d6:	4614      	mov	r4, r2
 800b2d8:	18d5      	adds	r5, r2, r3
 800b2da:	42ac      	cmp	r4, r5
 800b2dc:	d101      	bne.n	800b2e2 <__sfputs_r+0x12>
 800b2de:	2000      	movs	r0, #0
 800b2e0:	e007      	b.n	800b2f2 <__sfputs_r+0x22>
 800b2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7ff ffda 	bl	800b2a2 <__sfputc_r>
 800b2ee:	1c43      	adds	r3, r0, #1
 800b2f0:	d1f3      	bne.n	800b2da <__sfputs_r+0xa>
 800b2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2f4 <_vfiprintf_r>:
 800b2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	b09d      	sub	sp, #116	; 0x74
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	4698      	mov	r8, r3
 800b300:	4606      	mov	r6, r0
 800b302:	b118      	cbz	r0, 800b30c <_vfiprintf_r+0x18>
 800b304:	6983      	ldr	r3, [r0, #24]
 800b306:	b90b      	cbnz	r3, 800b30c <_vfiprintf_r+0x18>
 800b308:	f000 fb14 	bl	800b934 <__sinit>
 800b30c:	4b89      	ldr	r3, [pc, #548]	; (800b534 <_vfiprintf_r+0x240>)
 800b30e:	429d      	cmp	r5, r3
 800b310:	d11b      	bne.n	800b34a <_vfiprintf_r+0x56>
 800b312:	6875      	ldr	r5, [r6, #4]
 800b314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b316:	07d9      	lsls	r1, r3, #31
 800b318:	d405      	bmi.n	800b326 <_vfiprintf_r+0x32>
 800b31a:	89ab      	ldrh	r3, [r5, #12]
 800b31c:	059a      	lsls	r2, r3, #22
 800b31e:	d402      	bmi.n	800b326 <_vfiprintf_r+0x32>
 800b320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b322:	f000 fba5 	bl	800ba70 <__retarget_lock_acquire_recursive>
 800b326:	89ab      	ldrh	r3, [r5, #12]
 800b328:	071b      	lsls	r3, r3, #28
 800b32a:	d501      	bpl.n	800b330 <_vfiprintf_r+0x3c>
 800b32c:	692b      	ldr	r3, [r5, #16]
 800b32e:	b9eb      	cbnz	r3, 800b36c <_vfiprintf_r+0x78>
 800b330:	4629      	mov	r1, r5
 800b332:	4630      	mov	r0, r6
 800b334:	f000 f96e 	bl	800b614 <__swsetup_r>
 800b338:	b1c0      	cbz	r0, 800b36c <_vfiprintf_r+0x78>
 800b33a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b33c:	07dc      	lsls	r4, r3, #31
 800b33e:	d50e      	bpl.n	800b35e <_vfiprintf_r+0x6a>
 800b340:	f04f 30ff 	mov.w	r0, #4294967295
 800b344:	b01d      	add	sp, #116	; 0x74
 800b346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34a:	4b7b      	ldr	r3, [pc, #492]	; (800b538 <_vfiprintf_r+0x244>)
 800b34c:	429d      	cmp	r5, r3
 800b34e:	d101      	bne.n	800b354 <_vfiprintf_r+0x60>
 800b350:	68b5      	ldr	r5, [r6, #8]
 800b352:	e7df      	b.n	800b314 <_vfiprintf_r+0x20>
 800b354:	4b79      	ldr	r3, [pc, #484]	; (800b53c <_vfiprintf_r+0x248>)
 800b356:	429d      	cmp	r5, r3
 800b358:	bf08      	it	eq
 800b35a:	68f5      	ldreq	r5, [r6, #12]
 800b35c:	e7da      	b.n	800b314 <_vfiprintf_r+0x20>
 800b35e:	89ab      	ldrh	r3, [r5, #12]
 800b360:	0598      	lsls	r0, r3, #22
 800b362:	d4ed      	bmi.n	800b340 <_vfiprintf_r+0x4c>
 800b364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b366:	f000 fb84 	bl	800ba72 <__retarget_lock_release_recursive>
 800b36a:	e7e9      	b.n	800b340 <_vfiprintf_r+0x4c>
 800b36c:	2300      	movs	r3, #0
 800b36e:	9309      	str	r3, [sp, #36]	; 0x24
 800b370:	2320      	movs	r3, #32
 800b372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b376:	f8cd 800c 	str.w	r8, [sp, #12]
 800b37a:	2330      	movs	r3, #48	; 0x30
 800b37c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b540 <_vfiprintf_r+0x24c>
 800b380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b384:	f04f 0901 	mov.w	r9, #1
 800b388:	4623      	mov	r3, r4
 800b38a:	469a      	mov	sl, r3
 800b38c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b390:	b10a      	cbz	r2, 800b396 <_vfiprintf_r+0xa2>
 800b392:	2a25      	cmp	r2, #37	; 0x25
 800b394:	d1f9      	bne.n	800b38a <_vfiprintf_r+0x96>
 800b396:	ebba 0b04 	subs.w	fp, sl, r4
 800b39a:	d00b      	beq.n	800b3b4 <_vfiprintf_r+0xc0>
 800b39c:	465b      	mov	r3, fp
 800b39e:	4622      	mov	r2, r4
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f7ff ff94 	bl	800b2d0 <__sfputs_r>
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	f000 80aa 	beq.w	800b502 <_vfiprintf_r+0x20e>
 800b3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3b0:	445a      	add	r2, fp
 800b3b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 80a2 	beq.w	800b502 <_vfiprintf_r+0x20e>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3c8:	f10a 0a01 	add.w	sl, sl, #1
 800b3cc:	9304      	str	r3, [sp, #16]
 800b3ce:	9307      	str	r3, [sp, #28]
 800b3d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b3d6:	4654      	mov	r4, sl
 800b3d8:	2205      	movs	r2, #5
 800b3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3de:	4858      	ldr	r0, [pc, #352]	; (800b540 <_vfiprintf_r+0x24c>)
 800b3e0:	f7f4 ff06 	bl	80001f0 <memchr>
 800b3e4:	9a04      	ldr	r2, [sp, #16]
 800b3e6:	b9d8      	cbnz	r0, 800b420 <_vfiprintf_r+0x12c>
 800b3e8:	06d1      	lsls	r1, r2, #27
 800b3ea:	bf44      	itt	mi
 800b3ec:	2320      	movmi	r3, #32
 800b3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3f2:	0713      	lsls	r3, r2, #28
 800b3f4:	bf44      	itt	mi
 800b3f6:	232b      	movmi	r3, #43	; 0x2b
 800b3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b400:	2b2a      	cmp	r3, #42	; 0x2a
 800b402:	d015      	beq.n	800b430 <_vfiprintf_r+0x13c>
 800b404:	9a07      	ldr	r2, [sp, #28]
 800b406:	4654      	mov	r4, sl
 800b408:	2000      	movs	r0, #0
 800b40a:	f04f 0c0a 	mov.w	ip, #10
 800b40e:	4621      	mov	r1, r4
 800b410:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b414:	3b30      	subs	r3, #48	; 0x30
 800b416:	2b09      	cmp	r3, #9
 800b418:	d94e      	bls.n	800b4b8 <_vfiprintf_r+0x1c4>
 800b41a:	b1b0      	cbz	r0, 800b44a <_vfiprintf_r+0x156>
 800b41c:	9207      	str	r2, [sp, #28]
 800b41e:	e014      	b.n	800b44a <_vfiprintf_r+0x156>
 800b420:	eba0 0308 	sub.w	r3, r0, r8
 800b424:	fa09 f303 	lsl.w	r3, r9, r3
 800b428:	4313      	orrs	r3, r2
 800b42a:	9304      	str	r3, [sp, #16]
 800b42c:	46a2      	mov	sl, r4
 800b42e:	e7d2      	b.n	800b3d6 <_vfiprintf_r+0xe2>
 800b430:	9b03      	ldr	r3, [sp, #12]
 800b432:	1d19      	adds	r1, r3, #4
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	9103      	str	r1, [sp, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	bfbb      	ittet	lt
 800b43c:	425b      	neglt	r3, r3
 800b43e:	f042 0202 	orrlt.w	r2, r2, #2
 800b442:	9307      	strge	r3, [sp, #28]
 800b444:	9307      	strlt	r3, [sp, #28]
 800b446:	bfb8      	it	lt
 800b448:	9204      	strlt	r2, [sp, #16]
 800b44a:	7823      	ldrb	r3, [r4, #0]
 800b44c:	2b2e      	cmp	r3, #46	; 0x2e
 800b44e:	d10c      	bne.n	800b46a <_vfiprintf_r+0x176>
 800b450:	7863      	ldrb	r3, [r4, #1]
 800b452:	2b2a      	cmp	r3, #42	; 0x2a
 800b454:	d135      	bne.n	800b4c2 <_vfiprintf_r+0x1ce>
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	1d1a      	adds	r2, r3, #4
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	9203      	str	r2, [sp, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	bfb8      	it	lt
 800b462:	f04f 33ff 	movlt.w	r3, #4294967295
 800b466:	3402      	adds	r4, #2
 800b468:	9305      	str	r3, [sp, #20]
 800b46a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b550 <_vfiprintf_r+0x25c>
 800b46e:	7821      	ldrb	r1, [r4, #0]
 800b470:	2203      	movs	r2, #3
 800b472:	4650      	mov	r0, sl
 800b474:	f7f4 febc 	bl	80001f0 <memchr>
 800b478:	b140      	cbz	r0, 800b48c <_vfiprintf_r+0x198>
 800b47a:	2340      	movs	r3, #64	; 0x40
 800b47c:	eba0 000a 	sub.w	r0, r0, sl
 800b480:	fa03 f000 	lsl.w	r0, r3, r0
 800b484:	9b04      	ldr	r3, [sp, #16]
 800b486:	4303      	orrs	r3, r0
 800b488:	3401      	adds	r4, #1
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b490:	482c      	ldr	r0, [pc, #176]	; (800b544 <_vfiprintf_r+0x250>)
 800b492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b496:	2206      	movs	r2, #6
 800b498:	f7f4 feaa 	bl	80001f0 <memchr>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d03f      	beq.n	800b520 <_vfiprintf_r+0x22c>
 800b4a0:	4b29      	ldr	r3, [pc, #164]	; (800b548 <_vfiprintf_r+0x254>)
 800b4a2:	bb1b      	cbnz	r3, 800b4ec <_vfiprintf_r+0x1f8>
 800b4a4:	9b03      	ldr	r3, [sp, #12]
 800b4a6:	3307      	adds	r3, #7
 800b4a8:	f023 0307 	bic.w	r3, r3, #7
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	9303      	str	r3, [sp, #12]
 800b4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b2:	443b      	add	r3, r7
 800b4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b6:	e767      	b.n	800b388 <_vfiprintf_r+0x94>
 800b4b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4bc:	460c      	mov	r4, r1
 800b4be:	2001      	movs	r0, #1
 800b4c0:	e7a5      	b.n	800b40e <_vfiprintf_r+0x11a>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	3401      	adds	r4, #1
 800b4c6:	9305      	str	r3, [sp, #20]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	f04f 0c0a 	mov.w	ip, #10
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4d4:	3a30      	subs	r2, #48	; 0x30
 800b4d6:	2a09      	cmp	r2, #9
 800b4d8:	d903      	bls.n	800b4e2 <_vfiprintf_r+0x1ee>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0c5      	beq.n	800b46a <_vfiprintf_r+0x176>
 800b4de:	9105      	str	r1, [sp, #20]
 800b4e0:	e7c3      	b.n	800b46a <_vfiprintf_r+0x176>
 800b4e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e7f0      	b.n	800b4ce <_vfiprintf_r+0x1da>
 800b4ec:	ab03      	add	r3, sp, #12
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	462a      	mov	r2, r5
 800b4f2:	4b16      	ldr	r3, [pc, #88]	; (800b54c <_vfiprintf_r+0x258>)
 800b4f4:	a904      	add	r1, sp, #16
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	f7fd fdd6 	bl	80090a8 <_printf_float>
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	1c78      	adds	r0, r7, #1
 800b500:	d1d6      	bne.n	800b4b0 <_vfiprintf_r+0x1bc>
 800b502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b504:	07d9      	lsls	r1, r3, #31
 800b506:	d405      	bmi.n	800b514 <_vfiprintf_r+0x220>
 800b508:	89ab      	ldrh	r3, [r5, #12]
 800b50a:	059a      	lsls	r2, r3, #22
 800b50c:	d402      	bmi.n	800b514 <_vfiprintf_r+0x220>
 800b50e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b510:	f000 faaf 	bl	800ba72 <__retarget_lock_release_recursive>
 800b514:	89ab      	ldrh	r3, [r5, #12]
 800b516:	065b      	lsls	r3, r3, #25
 800b518:	f53f af12 	bmi.w	800b340 <_vfiprintf_r+0x4c>
 800b51c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b51e:	e711      	b.n	800b344 <_vfiprintf_r+0x50>
 800b520:	ab03      	add	r3, sp, #12
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	462a      	mov	r2, r5
 800b526:	4b09      	ldr	r3, [pc, #36]	; (800b54c <_vfiprintf_r+0x258>)
 800b528:	a904      	add	r1, sp, #16
 800b52a:	4630      	mov	r0, r6
 800b52c:	f7fe f860 	bl	80095f0 <_printf_i>
 800b530:	e7e4      	b.n	800b4fc <_vfiprintf_r+0x208>
 800b532:	bf00      	nop
 800b534:	0800c17c 	.word	0x0800c17c
 800b538:	0800c19c 	.word	0x0800c19c
 800b53c:	0800c15c 	.word	0x0800c15c
 800b540:	0800c004 	.word	0x0800c004
 800b544:	0800c00e 	.word	0x0800c00e
 800b548:	080090a9 	.word	0x080090a9
 800b54c:	0800b2d1 	.word	0x0800b2d1
 800b550:	0800c00a 	.word	0x0800c00a

0800b554 <__swbuf_r>:
 800b554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b556:	460e      	mov	r6, r1
 800b558:	4614      	mov	r4, r2
 800b55a:	4605      	mov	r5, r0
 800b55c:	b118      	cbz	r0, 800b566 <__swbuf_r+0x12>
 800b55e:	6983      	ldr	r3, [r0, #24]
 800b560:	b90b      	cbnz	r3, 800b566 <__swbuf_r+0x12>
 800b562:	f000 f9e7 	bl	800b934 <__sinit>
 800b566:	4b21      	ldr	r3, [pc, #132]	; (800b5ec <__swbuf_r+0x98>)
 800b568:	429c      	cmp	r4, r3
 800b56a:	d12b      	bne.n	800b5c4 <__swbuf_r+0x70>
 800b56c:	686c      	ldr	r4, [r5, #4]
 800b56e:	69a3      	ldr	r3, [r4, #24]
 800b570:	60a3      	str	r3, [r4, #8]
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	071a      	lsls	r2, r3, #28
 800b576:	d52f      	bpl.n	800b5d8 <__swbuf_r+0x84>
 800b578:	6923      	ldr	r3, [r4, #16]
 800b57a:	b36b      	cbz	r3, 800b5d8 <__swbuf_r+0x84>
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	6820      	ldr	r0, [r4, #0]
 800b580:	1ac0      	subs	r0, r0, r3
 800b582:	6963      	ldr	r3, [r4, #20]
 800b584:	b2f6      	uxtb	r6, r6
 800b586:	4283      	cmp	r3, r0
 800b588:	4637      	mov	r7, r6
 800b58a:	dc04      	bgt.n	800b596 <__swbuf_r+0x42>
 800b58c:	4621      	mov	r1, r4
 800b58e:	4628      	mov	r0, r5
 800b590:	f000 f93c 	bl	800b80c <_fflush_r>
 800b594:	bb30      	cbnz	r0, 800b5e4 <__swbuf_r+0x90>
 800b596:	68a3      	ldr	r3, [r4, #8]
 800b598:	3b01      	subs	r3, #1
 800b59a:	60a3      	str	r3, [r4, #8]
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	6022      	str	r2, [r4, #0]
 800b5a2:	701e      	strb	r6, [r3, #0]
 800b5a4:	6963      	ldr	r3, [r4, #20]
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	4283      	cmp	r3, r0
 800b5aa:	d004      	beq.n	800b5b6 <__swbuf_r+0x62>
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	07db      	lsls	r3, r3, #31
 800b5b0:	d506      	bpl.n	800b5c0 <__swbuf_r+0x6c>
 800b5b2:	2e0a      	cmp	r6, #10
 800b5b4:	d104      	bne.n	800b5c0 <__swbuf_r+0x6c>
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f000 f927 	bl	800b80c <_fflush_r>
 800b5be:	b988      	cbnz	r0, 800b5e4 <__swbuf_r+0x90>
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5c4:	4b0a      	ldr	r3, [pc, #40]	; (800b5f0 <__swbuf_r+0x9c>)
 800b5c6:	429c      	cmp	r4, r3
 800b5c8:	d101      	bne.n	800b5ce <__swbuf_r+0x7a>
 800b5ca:	68ac      	ldr	r4, [r5, #8]
 800b5cc:	e7cf      	b.n	800b56e <__swbuf_r+0x1a>
 800b5ce:	4b09      	ldr	r3, [pc, #36]	; (800b5f4 <__swbuf_r+0xa0>)
 800b5d0:	429c      	cmp	r4, r3
 800b5d2:	bf08      	it	eq
 800b5d4:	68ec      	ldreq	r4, [r5, #12]
 800b5d6:	e7ca      	b.n	800b56e <__swbuf_r+0x1a>
 800b5d8:	4621      	mov	r1, r4
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 f81a 	bl	800b614 <__swsetup_r>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d0cb      	beq.n	800b57c <__swbuf_r+0x28>
 800b5e4:	f04f 37ff 	mov.w	r7, #4294967295
 800b5e8:	e7ea      	b.n	800b5c0 <__swbuf_r+0x6c>
 800b5ea:	bf00      	nop
 800b5ec:	0800c17c 	.word	0x0800c17c
 800b5f0:	0800c19c 	.word	0x0800c19c
 800b5f4:	0800c15c 	.word	0x0800c15c

0800b5f8 <__ascii_wctomb>:
 800b5f8:	b149      	cbz	r1, 800b60e <__ascii_wctomb+0x16>
 800b5fa:	2aff      	cmp	r2, #255	; 0xff
 800b5fc:	bf85      	ittet	hi
 800b5fe:	238a      	movhi	r3, #138	; 0x8a
 800b600:	6003      	strhi	r3, [r0, #0]
 800b602:	700a      	strbls	r2, [r1, #0]
 800b604:	f04f 30ff 	movhi.w	r0, #4294967295
 800b608:	bf98      	it	ls
 800b60a:	2001      	movls	r0, #1
 800b60c:	4770      	bx	lr
 800b60e:	4608      	mov	r0, r1
 800b610:	4770      	bx	lr
	...

0800b614 <__swsetup_r>:
 800b614:	4b32      	ldr	r3, [pc, #200]	; (800b6e0 <__swsetup_r+0xcc>)
 800b616:	b570      	push	{r4, r5, r6, lr}
 800b618:	681d      	ldr	r5, [r3, #0]
 800b61a:	4606      	mov	r6, r0
 800b61c:	460c      	mov	r4, r1
 800b61e:	b125      	cbz	r5, 800b62a <__swsetup_r+0x16>
 800b620:	69ab      	ldr	r3, [r5, #24]
 800b622:	b913      	cbnz	r3, 800b62a <__swsetup_r+0x16>
 800b624:	4628      	mov	r0, r5
 800b626:	f000 f985 	bl	800b934 <__sinit>
 800b62a:	4b2e      	ldr	r3, [pc, #184]	; (800b6e4 <__swsetup_r+0xd0>)
 800b62c:	429c      	cmp	r4, r3
 800b62e:	d10f      	bne.n	800b650 <__swsetup_r+0x3c>
 800b630:	686c      	ldr	r4, [r5, #4]
 800b632:	89a3      	ldrh	r3, [r4, #12]
 800b634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b638:	0719      	lsls	r1, r3, #28
 800b63a:	d42c      	bmi.n	800b696 <__swsetup_r+0x82>
 800b63c:	06dd      	lsls	r5, r3, #27
 800b63e:	d411      	bmi.n	800b664 <__swsetup_r+0x50>
 800b640:	2309      	movs	r3, #9
 800b642:	6033      	str	r3, [r6, #0]
 800b644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b648:	81a3      	strh	r3, [r4, #12]
 800b64a:	f04f 30ff 	mov.w	r0, #4294967295
 800b64e:	e03e      	b.n	800b6ce <__swsetup_r+0xba>
 800b650:	4b25      	ldr	r3, [pc, #148]	; (800b6e8 <__swsetup_r+0xd4>)
 800b652:	429c      	cmp	r4, r3
 800b654:	d101      	bne.n	800b65a <__swsetup_r+0x46>
 800b656:	68ac      	ldr	r4, [r5, #8]
 800b658:	e7eb      	b.n	800b632 <__swsetup_r+0x1e>
 800b65a:	4b24      	ldr	r3, [pc, #144]	; (800b6ec <__swsetup_r+0xd8>)
 800b65c:	429c      	cmp	r4, r3
 800b65e:	bf08      	it	eq
 800b660:	68ec      	ldreq	r4, [r5, #12]
 800b662:	e7e6      	b.n	800b632 <__swsetup_r+0x1e>
 800b664:	0758      	lsls	r0, r3, #29
 800b666:	d512      	bpl.n	800b68e <__swsetup_r+0x7a>
 800b668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b66a:	b141      	cbz	r1, 800b67e <__swsetup_r+0x6a>
 800b66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b670:	4299      	cmp	r1, r3
 800b672:	d002      	beq.n	800b67a <__swsetup_r+0x66>
 800b674:	4630      	mov	r0, r6
 800b676:	f7ff fb31 	bl	800acdc <_free_r>
 800b67a:	2300      	movs	r3, #0
 800b67c:	6363      	str	r3, [r4, #52]	; 0x34
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b684:	81a3      	strh	r3, [r4, #12]
 800b686:	2300      	movs	r3, #0
 800b688:	6063      	str	r3, [r4, #4]
 800b68a:	6923      	ldr	r3, [r4, #16]
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	f043 0308 	orr.w	r3, r3, #8
 800b694:	81a3      	strh	r3, [r4, #12]
 800b696:	6923      	ldr	r3, [r4, #16]
 800b698:	b94b      	cbnz	r3, 800b6ae <__swsetup_r+0x9a>
 800b69a:	89a3      	ldrh	r3, [r4, #12]
 800b69c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6a4:	d003      	beq.n	800b6ae <__swsetup_r+0x9a>
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f000 fa09 	bl	800bac0 <__smakebuf_r>
 800b6ae:	89a0      	ldrh	r0, [r4, #12]
 800b6b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6b4:	f010 0301 	ands.w	r3, r0, #1
 800b6b8:	d00a      	beq.n	800b6d0 <__swsetup_r+0xbc>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60a3      	str	r3, [r4, #8]
 800b6be:	6963      	ldr	r3, [r4, #20]
 800b6c0:	425b      	negs	r3, r3
 800b6c2:	61a3      	str	r3, [r4, #24]
 800b6c4:	6923      	ldr	r3, [r4, #16]
 800b6c6:	b943      	cbnz	r3, 800b6da <__swsetup_r+0xc6>
 800b6c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6cc:	d1ba      	bne.n	800b644 <__swsetup_r+0x30>
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	0781      	lsls	r1, r0, #30
 800b6d2:	bf58      	it	pl
 800b6d4:	6963      	ldrpl	r3, [r4, #20]
 800b6d6:	60a3      	str	r3, [r4, #8]
 800b6d8:	e7f4      	b.n	800b6c4 <__swsetup_r+0xb0>
 800b6da:	2000      	movs	r0, #0
 800b6dc:	e7f7      	b.n	800b6ce <__swsetup_r+0xba>
 800b6de:	bf00      	nop
 800b6e0:	20000198 	.word	0x20000198
 800b6e4:	0800c17c 	.word	0x0800c17c
 800b6e8:	0800c19c 	.word	0x0800c19c
 800b6ec:	0800c15c 	.word	0x0800c15c

0800b6f0 <abort>:
 800b6f0:	b508      	push	{r3, lr}
 800b6f2:	2006      	movs	r0, #6
 800b6f4:	f000 fa54 	bl	800bba0 <raise>
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	f7f5 fe79 	bl	80013f0 <_exit>
	...

0800b700 <__sflush_r>:
 800b700:	898a      	ldrh	r2, [r1, #12]
 800b702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b706:	4605      	mov	r5, r0
 800b708:	0710      	lsls	r0, r2, #28
 800b70a:	460c      	mov	r4, r1
 800b70c:	d458      	bmi.n	800b7c0 <__sflush_r+0xc0>
 800b70e:	684b      	ldr	r3, [r1, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	dc05      	bgt.n	800b720 <__sflush_r+0x20>
 800b714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b716:	2b00      	cmp	r3, #0
 800b718:	dc02      	bgt.n	800b720 <__sflush_r+0x20>
 800b71a:	2000      	movs	r0, #0
 800b71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b722:	2e00      	cmp	r6, #0
 800b724:	d0f9      	beq.n	800b71a <__sflush_r+0x1a>
 800b726:	2300      	movs	r3, #0
 800b728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b72c:	682f      	ldr	r7, [r5, #0]
 800b72e:	602b      	str	r3, [r5, #0]
 800b730:	d032      	beq.n	800b798 <__sflush_r+0x98>
 800b732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	075a      	lsls	r2, r3, #29
 800b738:	d505      	bpl.n	800b746 <__sflush_r+0x46>
 800b73a:	6863      	ldr	r3, [r4, #4]
 800b73c:	1ac0      	subs	r0, r0, r3
 800b73e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b740:	b10b      	cbz	r3, 800b746 <__sflush_r+0x46>
 800b742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b744:	1ac0      	subs	r0, r0, r3
 800b746:	2300      	movs	r3, #0
 800b748:	4602      	mov	r2, r0
 800b74a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b74c:	6a21      	ldr	r1, [r4, #32]
 800b74e:	4628      	mov	r0, r5
 800b750:	47b0      	blx	r6
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	d106      	bne.n	800b766 <__sflush_r+0x66>
 800b758:	6829      	ldr	r1, [r5, #0]
 800b75a:	291d      	cmp	r1, #29
 800b75c:	d82c      	bhi.n	800b7b8 <__sflush_r+0xb8>
 800b75e:	4a2a      	ldr	r2, [pc, #168]	; (800b808 <__sflush_r+0x108>)
 800b760:	40ca      	lsrs	r2, r1
 800b762:	07d6      	lsls	r6, r2, #31
 800b764:	d528      	bpl.n	800b7b8 <__sflush_r+0xb8>
 800b766:	2200      	movs	r2, #0
 800b768:	6062      	str	r2, [r4, #4]
 800b76a:	04d9      	lsls	r1, r3, #19
 800b76c:	6922      	ldr	r2, [r4, #16]
 800b76e:	6022      	str	r2, [r4, #0]
 800b770:	d504      	bpl.n	800b77c <__sflush_r+0x7c>
 800b772:	1c42      	adds	r2, r0, #1
 800b774:	d101      	bne.n	800b77a <__sflush_r+0x7a>
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	b903      	cbnz	r3, 800b77c <__sflush_r+0x7c>
 800b77a:	6560      	str	r0, [r4, #84]	; 0x54
 800b77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b77e:	602f      	str	r7, [r5, #0]
 800b780:	2900      	cmp	r1, #0
 800b782:	d0ca      	beq.n	800b71a <__sflush_r+0x1a>
 800b784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b788:	4299      	cmp	r1, r3
 800b78a:	d002      	beq.n	800b792 <__sflush_r+0x92>
 800b78c:	4628      	mov	r0, r5
 800b78e:	f7ff faa5 	bl	800acdc <_free_r>
 800b792:	2000      	movs	r0, #0
 800b794:	6360      	str	r0, [r4, #52]	; 0x34
 800b796:	e7c1      	b.n	800b71c <__sflush_r+0x1c>
 800b798:	6a21      	ldr	r1, [r4, #32]
 800b79a:	2301      	movs	r3, #1
 800b79c:	4628      	mov	r0, r5
 800b79e:	47b0      	blx	r6
 800b7a0:	1c41      	adds	r1, r0, #1
 800b7a2:	d1c7      	bne.n	800b734 <__sflush_r+0x34>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d0c4      	beq.n	800b734 <__sflush_r+0x34>
 800b7aa:	2b1d      	cmp	r3, #29
 800b7ac:	d001      	beq.n	800b7b2 <__sflush_r+0xb2>
 800b7ae:	2b16      	cmp	r3, #22
 800b7b0:	d101      	bne.n	800b7b6 <__sflush_r+0xb6>
 800b7b2:	602f      	str	r7, [r5, #0]
 800b7b4:	e7b1      	b.n	800b71a <__sflush_r+0x1a>
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	e7ad      	b.n	800b71c <__sflush_r+0x1c>
 800b7c0:	690f      	ldr	r7, [r1, #16]
 800b7c2:	2f00      	cmp	r7, #0
 800b7c4:	d0a9      	beq.n	800b71a <__sflush_r+0x1a>
 800b7c6:	0793      	lsls	r3, r2, #30
 800b7c8:	680e      	ldr	r6, [r1, #0]
 800b7ca:	bf08      	it	eq
 800b7cc:	694b      	ldreq	r3, [r1, #20]
 800b7ce:	600f      	str	r7, [r1, #0]
 800b7d0:	bf18      	it	ne
 800b7d2:	2300      	movne	r3, #0
 800b7d4:	eba6 0807 	sub.w	r8, r6, r7
 800b7d8:	608b      	str	r3, [r1, #8]
 800b7da:	f1b8 0f00 	cmp.w	r8, #0
 800b7de:	dd9c      	ble.n	800b71a <__sflush_r+0x1a>
 800b7e0:	6a21      	ldr	r1, [r4, #32]
 800b7e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7e4:	4643      	mov	r3, r8
 800b7e6:	463a      	mov	r2, r7
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b0      	blx	r6
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	dc06      	bgt.n	800b7fe <__sflush_r+0xfe>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	e78e      	b.n	800b71c <__sflush_r+0x1c>
 800b7fe:	4407      	add	r7, r0
 800b800:	eba8 0800 	sub.w	r8, r8, r0
 800b804:	e7e9      	b.n	800b7da <__sflush_r+0xda>
 800b806:	bf00      	nop
 800b808:	20400001 	.word	0x20400001

0800b80c <_fflush_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	690b      	ldr	r3, [r1, #16]
 800b810:	4605      	mov	r5, r0
 800b812:	460c      	mov	r4, r1
 800b814:	b913      	cbnz	r3, 800b81c <_fflush_r+0x10>
 800b816:	2500      	movs	r5, #0
 800b818:	4628      	mov	r0, r5
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	b118      	cbz	r0, 800b826 <_fflush_r+0x1a>
 800b81e:	6983      	ldr	r3, [r0, #24]
 800b820:	b90b      	cbnz	r3, 800b826 <_fflush_r+0x1a>
 800b822:	f000 f887 	bl	800b934 <__sinit>
 800b826:	4b14      	ldr	r3, [pc, #80]	; (800b878 <_fflush_r+0x6c>)
 800b828:	429c      	cmp	r4, r3
 800b82a:	d11b      	bne.n	800b864 <_fflush_r+0x58>
 800b82c:	686c      	ldr	r4, [r5, #4]
 800b82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0ef      	beq.n	800b816 <_fflush_r+0xa>
 800b836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b838:	07d0      	lsls	r0, r2, #31
 800b83a:	d404      	bmi.n	800b846 <_fflush_r+0x3a>
 800b83c:	0599      	lsls	r1, r3, #22
 800b83e:	d402      	bmi.n	800b846 <_fflush_r+0x3a>
 800b840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b842:	f000 f915 	bl	800ba70 <__retarget_lock_acquire_recursive>
 800b846:	4628      	mov	r0, r5
 800b848:	4621      	mov	r1, r4
 800b84a:	f7ff ff59 	bl	800b700 <__sflush_r>
 800b84e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b850:	07da      	lsls	r2, r3, #31
 800b852:	4605      	mov	r5, r0
 800b854:	d4e0      	bmi.n	800b818 <_fflush_r+0xc>
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	059b      	lsls	r3, r3, #22
 800b85a:	d4dd      	bmi.n	800b818 <_fflush_r+0xc>
 800b85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b85e:	f000 f908 	bl	800ba72 <__retarget_lock_release_recursive>
 800b862:	e7d9      	b.n	800b818 <_fflush_r+0xc>
 800b864:	4b05      	ldr	r3, [pc, #20]	; (800b87c <_fflush_r+0x70>)
 800b866:	429c      	cmp	r4, r3
 800b868:	d101      	bne.n	800b86e <_fflush_r+0x62>
 800b86a:	68ac      	ldr	r4, [r5, #8]
 800b86c:	e7df      	b.n	800b82e <_fflush_r+0x22>
 800b86e:	4b04      	ldr	r3, [pc, #16]	; (800b880 <_fflush_r+0x74>)
 800b870:	429c      	cmp	r4, r3
 800b872:	bf08      	it	eq
 800b874:	68ec      	ldreq	r4, [r5, #12]
 800b876:	e7da      	b.n	800b82e <_fflush_r+0x22>
 800b878:	0800c17c 	.word	0x0800c17c
 800b87c:	0800c19c 	.word	0x0800c19c
 800b880:	0800c15c 	.word	0x0800c15c

0800b884 <std>:
 800b884:	2300      	movs	r3, #0
 800b886:	b510      	push	{r4, lr}
 800b888:	4604      	mov	r4, r0
 800b88a:	e9c0 3300 	strd	r3, r3, [r0]
 800b88e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b892:	6083      	str	r3, [r0, #8]
 800b894:	8181      	strh	r1, [r0, #12]
 800b896:	6643      	str	r3, [r0, #100]	; 0x64
 800b898:	81c2      	strh	r2, [r0, #14]
 800b89a:	6183      	str	r3, [r0, #24]
 800b89c:	4619      	mov	r1, r3
 800b89e:	2208      	movs	r2, #8
 800b8a0:	305c      	adds	r0, #92	; 0x5c
 800b8a2:	f7fd fb59 	bl	8008f58 <memset>
 800b8a6:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <std+0x38>)
 800b8a8:	6263      	str	r3, [r4, #36]	; 0x24
 800b8aa:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <std+0x3c>)
 800b8ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <std+0x40>)
 800b8b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8b2:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <std+0x44>)
 800b8b4:	6224      	str	r4, [r4, #32]
 800b8b6:	6323      	str	r3, [r4, #48]	; 0x30
 800b8b8:	bd10      	pop	{r4, pc}
 800b8ba:	bf00      	nop
 800b8bc:	0800bbd9 	.word	0x0800bbd9
 800b8c0:	0800bbfb 	.word	0x0800bbfb
 800b8c4:	0800bc33 	.word	0x0800bc33
 800b8c8:	0800bc57 	.word	0x0800bc57

0800b8cc <_cleanup_r>:
 800b8cc:	4901      	ldr	r1, [pc, #4]	; (800b8d4 <_cleanup_r+0x8>)
 800b8ce:	f000 b8af 	b.w	800ba30 <_fwalk_reent>
 800b8d2:	bf00      	nop
 800b8d4:	0800b80d 	.word	0x0800b80d

0800b8d8 <__sfmoreglue>:
 800b8d8:	b570      	push	{r4, r5, r6, lr}
 800b8da:	2268      	movs	r2, #104	; 0x68
 800b8dc:	1e4d      	subs	r5, r1, #1
 800b8de:	4355      	muls	r5, r2
 800b8e0:	460e      	mov	r6, r1
 800b8e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8e6:	f7ff fa65 	bl	800adb4 <_malloc_r>
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	b140      	cbz	r0, 800b900 <__sfmoreglue+0x28>
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	e9c0 1600 	strd	r1, r6, [r0]
 800b8f4:	300c      	adds	r0, #12
 800b8f6:	60a0      	str	r0, [r4, #8]
 800b8f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8fc:	f7fd fb2c 	bl	8008f58 <memset>
 800b900:	4620      	mov	r0, r4
 800b902:	bd70      	pop	{r4, r5, r6, pc}

0800b904 <__sfp_lock_acquire>:
 800b904:	4801      	ldr	r0, [pc, #4]	; (800b90c <__sfp_lock_acquire+0x8>)
 800b906:	f000 b8b3 	b.w	800ba70 <__retarget_lock_acquire_recursive>
 800b90a:	bf00      	nop
 800b90c:	20001835 	.word	0x20001835

0800b910 <__sfp_lock_release>:
 800b910:	4801      	ldr	r0, [pc, #4]	; (800b918 <__sfp_lock_release+0x8>)
 800b912:	f000 b8ae 	b.w	800ba72 <__retarget_lock_release_recursive>
 800b916:	bf00      	nop
 800b918:	20001835 	.word	0x20001835

0800b91c <__sinit_lock_acquire>:
 800b91c:	4801      	ldr	r0, [pc, #4]	; (800b924 <__sinit_lock_acquire+0x8>)
 800b91e:	f000 b8a7 	b.w	800ba70 <__retarget_lock_acquire_recursive>
 800b922:	bf00      	nop
 800b924:	20001836 	.word	0x20001836

0800b928 <__sinit_lock_release>:
 800b928:	4801      	ldr	r0, [pc, #4]	; (800b930 <__sinit_lock_release+0x8>)
 800b92a:	f000 b8a2 	b.w	800ba72 <__retarget_lock_release_recursive>
 800b92e:	bf00      	nop
 800b930:	20001836 	.word	0x20001836

0800b934 <__sinit>:
 800b934:	b510      	push	{r4, lr}
 800b936:	4604      	mov	r4, r0
 800b938:	f7ff fff0 	bl	800b91c <__sinit_lock_acquire>
 800b93c:	69a3      	ldr	r3, [r4, #24]
 800b93e:	b11b      	cbz	r3, 800b948 <__sinit+0x14>
 800b940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b944:	f7ff bff0 	b.w	800b928 <__sinit_lock_release>
 800b948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b94c:	6523      	str	r3, [r4, #80]	; 0x50
 800b94e:	4b13      	ldr	r3, [pc, #76]	; (800b99c <__sinit+0x68>)
 800b950:	4a13      	ldr	r2, [pc, #76]	; (800b9a0 <__sinit+0x6c>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	62a2      	str	r2, [r4, #40]	; 0x28
 800b956:	42a3      	cmp	r3, r4
 800b958:	bf04      	itt	eq
 800b95a:	2301      	moveq	r3, #1
 800b95c:	61a3      	streq	r3, [r4, #24]
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 f820 	bl	800b9a4 <__sfp>
 800b964:	6060      	str	r0, [r4, #4]
 800b966:	4620      	mov	r0, r4
 800b968:	f000 f81c 	bl	800b9a4 <__sfp>
 800b96c:	60a0      	str	r0, [r4, #8]
 800b96e:	4620      	mov	r0, r4
 800b970:	f000 f818 	bl	800b9a4 <__sfp>
 800b974:	2200      	movs	r2, #0
 800b976:	60e0      	str	r0, [r4, #12]
 800b978:	2104      	movs	r1, #4
 800b97a:	6860      	ldr	r0, [r4, #4]
 800b97c:	f7ff ff82 	bl	800b884 <std>
 800b980:	68a0      	ldr	r0, [r4, #8]
 800b982:	2201      	movs	r2, #1
 800b984:	2109      	movs	r1, #9
 800b986:	f7ff ff7d 	bl	800b884 <std>
 800b98a:	68e0      	ldr	r0, [r4, #12]
 800b98c:	2202      	movs	r2, #2
 800b98e:	2112      	movs	r1, #18
 800b990:	f7ff ff78 	bl	800b884 <std>
 800b994:	2301      	movs	r3, #1
 800b996:	61a3      	str	r3, [r4, #24]
 800b998:	e7d2      	b.n	800b940 <__sinit+0xc>
 800b99a:	bf00      	nop
 800b99c:	0800bde4 	.word	0x0800bde4
 800b9a0:	0800b8cd 	.word	0x0800b8cd

0800b9a4 <__sfp>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	f7ff ffac 	bl	800b904 <__sfp_lock_acquire>
 800b9ac:	4b1e      	ldr	r3, [pc, #120]	; (800ba28 <__sfp+0x84>)
 800b9ae:	681e      	ldr	r6, [r3, #0]
 800b9b0:	69b3      	ldr	r3, [r6, #24]
 800b9b2:	b913      	cbnz	r3, 800b9ba <__sfp+0x16>
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7ff ffbd 	bl	800b934 <__sinit>
 800b9ba:	3648      	adds	r6, #72	; 0x48
 800b9bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	d503      	bpl.n	800b9cc <__sfp+0x28>
 800b9c4:	6833      	ldr	r3, [r6, #0]
 800b9c6:	b30b      	cbz	r3, 800ba0c <__sfp+0x68>
 800b9c8:	6836      	ldr	r6, [r6, #0]
 800b9ca:	e7f7      	b.n	800b9bc <__sfp+0x18>
 800b9cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9d0:	b9d5      	cbnz	r5, 800ba08 <__sfp+0x64>
 800b9d2:	4b16      	ldr	r3, [pc, #88]	; (800ba2c <__sfp+0x88>)
 800b9d4:	60e3      	str	r3, [r4, #12]
 800b9d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9da:	6665      	str	r5, [r4, #100]	; 0x64
 800b9dc:	f000 f847 	bl	800ba6e <__retarget_lock_init_recursive>
 800b9e0:	f7ff ff96 	bl	800b910 <__sfp_lock_release>
 800b9e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9ec:	6025      	str	r5, [r4, #0]
 800b9ee:	61a5      	str	r5, [r4, #24]
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9f8:	f7fd faae 	bl	8008f58 <memset>
 800b9fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba04:	4620      	mov	r0, r4
 800ba06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba08:	3468      	adds	r4, #104	; 0x68
 800ba0a:	e7d9      	b.n	800b9c0 <__sfp+0x1c>
 800ba0c:	2104      	movs	r1, #4
 800ba0e:	4638      	mov	r0, r7
 800ba10:	f7ff ff62 	bl	800b8d8 <__sfmoreglue>
 800ba14:	4604      	mov	r4, r0
 800ba16:	6030      	str	r0, [r6, #0]
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d1d5      	bne.n	800b9c8 <__sfp+0x24>
 800ba1c:	f7ff ff78 	bl	800b910 <__sfp_lock_release>
 800ba20:	230c      	movs	r3, #12
 800ba22:	603b      	str	r3, [r7, #0]
 800ba24:	e7ee      	b.n	800ba04 <__sfp+0x60>
 800ba26:	bf00      	nop
 800ba28:	0800bde4 	.word	0x0800bde4
 800ba2c:	ffff0001 	.word	0xffff0001

0800ba30 <_fwalk_reent>:
 800ba30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba34:	4606      	mov	r6, r0
 800ba36:	4688      	mov	r8, r1
 800ba38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba3c:	2700      	movs	r7, #0
 800ba3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba42:	f1b9 0901 	subs.w	r9, r9, #1
 800ba46:	d505      	bpl.n	800ba54 <_fwalk_reent+0x24>
 800ba48:	6824      	ldr	r4, [r4, #0]
 800ba4a:	2c00      	cmp	r4, #0
 800ba4c:	d1f7      	bne.n	800ba3e <_fwalk_reent+0xe>
 800ba4e:	4638      	mov	r0, r7
 800ba50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba54:	89ab      	ldrh	r3, [r5, #12]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d907      	bls.n	800ba6a <_fwalk_reent+0x3a>
 800ba5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	d003      	beq.n	800ba6a <_fwalk_reent+0x3a>
 800ba62:	4629      	mov	r1, r5
 800ba64:	4630      	mov	r0, r6
 800ba66:	47c0      	blx	r8
 800ba68:	4307      	orrs	r7, r0
 800ba6a:	3568      	adds	r5, #104	; 0x68
 800ba6c:	e7e9      	b.n	800ba42 <_fwalk_reent+0x12>

0800ba6e <__retarget_lock_init_recursive>:
 800ba6e:	4770      	bx	lr

0800ba70 <__retarget_lock_acquire_recursive>:
 800ba70:	4770      	bx	lr

0800ba72 <__retarget_lock_release_recursive>:
 800ba72:	4770      	bx	lr

0800ba74 <__swhatbuf_r>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	460e      	mov	r6, r1
 800ba78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7c:	2900      	cmp	r1, #0
 800ba7e:	b096      	sub	sp, #88	; 0x58
 800ba80:	4614      	mov	r4, r2
 800ba82:	461d      	mov	r5, r3
 800ba84:	da08      	bge.n	800ba98 <__swhatbuf_r+0x24>
 800ba86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	602a      	str	r2, [r5, #0]
 800ba8e:	061a      	lsls	r2, r3, #24
 800ba90:	d410      	bmi.n	800bab4 <__swhatbuf_r+0x40>
 800ba92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba96:	e00e      	b.n	800bab6 <__swhatbuf_r+0x42>
 800ba98:	466a      	mov	r2, sp
 800ba9a:	f000 f903 	bl	800bca4 <_fstat_r>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	dbf1      	blt.n	800ba86 <__swhatbuf_r+0x12>
 800baa2:	9a01      	ldr	r2, [sp, #4]
 800baa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800baac:	425a      	negs	r2, r3
 800baae:	415a      	adcs	r2, r3
 800bab0:	602a      	str	r2, [r5, #0]
 800bab2:	e7ee      	b.n	800ba92 <__swhatbuf_r+0x1e>
 800bab4:	2340      	movs	r3, #64	; 0x40
 800bab6:	2000      	movs	r0, #0
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	b016      	add	sp, #88	; 0x58
 800babc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bac0 <__smakebuf_r>:
 800bac0:	898b      	ldrh	r3, [r1, #12]
 800bac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bac4:	079d      	lsls	r5, r3, #30
 800bac6:	4606      	mov	r6, r0
 800bac8:	460c      	mov	r4, r1
 800baca:	d507      	bpl.n	800badc <__smakebuf_r+0x1c>
 800bacc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	6123      	str	r3, [r4, #16]
 800bad4:	2301      	movs	r3, #1
 800bad6:	6163      	str	r3, [r4, #20]
 800bad8:	b002      	add	sp, #8
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	ab01      	add	r3, sp, #4
 800bade:	466a      	mov	r2, sp
 800bae0:	f7ff ffc8 	bl	800ba74 <__swhatbuf_r>
 800bae4:	9900      	ldr	r1, [sp, #0]
 800bae6:	4605      	mov	r5, r0
 800bae8:	4630      	mov	r0, r6
 800baea:	f7ff f963 	bl	800adb4 <_malloc_r>
 800baee:	b948      	cbnz	r0, 800bb04 <__smakebuf_r+0x44>
 800baf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf4:	059a      	lsls	r2, r3, #22
 800baf6:	d4ef      	bmi.n	800bad8 <__smakebuf_r+0x18>
 800baf8:	f023 0303 	bic.w	r3, r3, #3
 800bafc:	f043 0302 	orr.w	r3, r3, #2
 800bb00:	81a3      	strh	r3, [r4, #12]
 800bb02:	e7e3      	b.n	800bacc <__smakebuf_r+0xc>
 800bb04:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <__smakebuf_r+0x7c>)
 800bb06:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	6020      	str	r0, [r4, #0]
 800bb0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb10:	81a3      	strh	r3, [r4, #12]
 800bb12:	9b00      	ldr	r3, [sp, #0]
 800bb14:	6163      	str	r3, [r4, #20]
 800bb16:	9b01      	ldr	r3, [sp, #4]
 800bb18:	6120      	str	r0, [r4, #16]
 800bb1a:	b15b      	cbz	r3, 800bb34 <__smakebuf_r+0x74>
 800bb1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb20:	4630      	mov	r0, r6
 800bb22:	f000 f8d1 	bl	800bcc8 <_isatty_r>
 800bb26:	b128      	cbz	r0, 800bb34 <__smakebuf_r+0x74>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	f023 0303 	bic.w	r3, r3, #3
 800bb2e:	f043 0301 	orr.w	r3, r3, #1
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	89a0      	ldrh	r0, [r4, #12]
 800bb36:	4305      	orrs	r5, r0
 800bb38:	81a5      	strh	r5, [r4, #12]
 800bb3a:	e7cd      	b.n	800bad8 <__smakebuf_r+0x18>
 800bb3c:	0800b8cd 	.word	0x0800b8cd

0800bb40 <_malloc_usable_size_r>:
 800bb40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb44:	1f18      	subs	r0, r3, #4
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	bfbc      	itt	lt
 800bb4a:	580b      	ldrlt	r3, [r1, r0]
 800bb4c:	18c0      	addlt	r0, r0, r3
 800bb4e:	4770      	bx	lr

0800bb50 <_raise_r>:
 800bb50:	291f      	cmp	r1, #31
 800bb52:	b538      	push	{r3, r4, r5, lr}
 800bb54:	4604      	mov	r4, r0
 800bb56:	460d      	mov	r5, r1
 800bb58:	d904      	bls.n	800bb64 <_raise_r+0x14>
 800bb5a:	2316      	movs	r3, #22
 800bb5c:	6003      	str	r3, [r0, #0]
 800bb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb66:	b112      	cbz	r2, 800bb6e <_raise_r+0x1e>
 800bb68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb6c:	b94b      	cbnz	r3, 800bb82 <_raise_r+0x32>
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 f830 	bl	800bbd4 <_getpid_r>
 800bb74:	462a      	mov	r2, r5
 800bb76:	4601      	mov	r1, r0
 800bb78:	4620      	mov	r0, r4
 800bb7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb7e:	f000 b817 	b.w	800bbb0 <_kill_r>
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d00a      	beq.n	800bb9c <_raise_r+0x4c>
 800bb86:	1c59      	adds	r1, r3, #1
 800bb88:	d103      	bne.n	800bb92 <_raise_r+0x42>
 800bb8a:	2316      	movs	r3, #22
 800bb8c:	6003      	str	r3, [r0, #0]
 800bb8e:	2001      	movs	r0, #1
 800bb90:	e7e7      	b.n	800bb62 <_raise_r+0x12>
 800bb92:	2400      	movs	r4, #0
 800bb94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb98:	4628      	mov	r0, r5
 800bb9a:	4798      	blx	r3
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	e7e0      	b.n	800bb62 <_raise_r+0x12>

0800bba0 <raise>:
 800bba0:	4b02      	ldr	r3, [pc, #8]	; (800bbac <raise+0xc>)
 800bba2:	4601      	mov	r1, r0
 800bba4:	6818      	ldr	r0, [r3, #0]
 800bba6:	f7ff bfd3 	b.w	800bb50 <_raise_r>
 800bbaa:	bf00      	nop
 800bbac:	20000198 	.word	0x20000198

0800bbb0 <_kill_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d07      	ldr	r5, [pc, #28]	; (800bbd0 <_kill_r+0x20>)
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	4611      	mov	r1, r2
 800bbbc:	602b      	str	r3, [r5, #0]
 800bbbe:	f7f5 fc07 	bl	80013d0 <_kill>
 800bbc2:	1c43      	adds	r3, r0, #1
 800bbc4:	d102      	bne.n	800bbcc <_kill_r+0x1c>
 800bbc6:	682b      	ldr	r3, [r5, #0]
 800bbc8:	b103      	cbz	r3, 800bbcc <_kill_r+0x1c>
 800bbca:	6023      	str	r3, [r4, #0]
 800bbcc:	bd38      	pop	{r3, r4, r5, pc}
 800bbce:	bf00      	nop
 800bbd0:	20001830 	.word	0x20001830

0800bbd4 <_getpid_r>:
 800bbd4:	f7f5 bbf4 	b.w	80013c0 <_getpid>

0800bbd8 <__sread>:
 800bbd8:	b510      	push	{r4, lr}
 800bbda:	460c      	mov	r4, r1
 800bbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe0:	f000 f894 	bl	800bd0c <_read_r>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	bfab      	itete	ge
 800bbe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbea:	89a3      	ldrhlt	r3, [r4, #12]
 800bbec:	181b      	addge	r3, r3, r0
 800bbee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbf2:	bfac      	ite	ge
 800bbf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbf6:	81a3      	strhlt	r3, [r4, #12]
 800bbf8:	bd10      	pop	{r4, pc}

0800bbfa <__swrite>:
 800bbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfe:	461f      	mov	r7, r3
 800bc00:	898b      	ldrh	r3, [r1, #12]
 800bc02:	05db      	lsls	r3, r3, #23
 800bc04:	4605      	mov	r5, r0
 800bc06:	460c      	mov	r4, r1
 800bc08:	4616      	mov	r6, r2
 800bc0a:	d505      	bpl.n	800bc18 <__swrite+0x1e>
 800bc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc10:	2302      	movs	r3, #2
 800bc12:	2200      	movs	r2, #0
 800bc14:	f000 f868 	bl	800bce8 <_lseek_r>
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	4632      	mov	r2, r6
 800bc26:	463b      	mov	r3, r7
 800bc28:	4628      	mov	r0, r5
 800bc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2e:	f000 b817 	b.w	800bc60 <_write_r>

0800bc32 <__sseek>:
 800bc32:	b510      	push	{r4, lr}
 800bc34:	460c      	mov	r4, r1
 800bc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc3a:	f000 f855 	bl	800bce8 <_lseek_r>
 800bc3e:	1c43      	adds	r3, r0, #1
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	bf15      	itete	ne
 800bc44:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc4e:	81a3      	strheq	r3, [r4, #12]
 800bc50:	bf18      	it	ne
 800bc52:	81a3      	strhne	r3, [r4, #12]
 800bc54:	bd10      	pop	{r4, pc}

0800bc56 <__sclose>:
 800bc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc5a:	f000 b813 	b.w	800bc84 <_close_r>
	...

0800bc60 <_write_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d07      	ldr	r5, [pc, #28]	; (800bc80 <_write_r+0x20>)
 800bc64:	4604      	mov	r4, r0
 800bc66:	4608      	mov	r0, r1
 800bc68:	4611      	mov	r1, r2
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	602a      	str	r2, [r5, #0]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f7f5 fbe5 	bl	800143e <_write>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_write_r+0x1e>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_write_r+0x1e>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	20001830 	.word	0x20001830

0800bc84 <_close_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4d06      	ldr	r5, [pc, #24]	; (800bca0 <_close_r+0x1c>)
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	602b      	str	r3, [r5, #0]
 800bc90:	f7f5 fbf1 	bl	8001476 <_close>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d102      	bne.n	800bc9e <_close_r+0x1a>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	b103      	cbz	r3, 800bc9e <_close_r+0x1a>
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	20001830 	.word	0x20001830

0800bca4 <_fstat_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d07      	ldr	r5, [pc, #28]	; (800bcc4 <_fstat_r+0x20>)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4604      	mov	r4, r0
 800bcac:	4608      	mov	r0, r1
 800bcae:	4611      	mov	r1, r2
 800bcb0:	602b      	str	r3, [r5, #0]
 800bcb2:	f7f5 fbec 	bl	800148e <_fstat>
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	d102      	bne.n	800bcc0 <_fstat_r+0x1c>
 800bcba:	682b      	ldr	r3, [r5, #0]
 800bcbc:	b103      	cbz	r3, 800bcc0 <_fstat_r+0x1c>
 800bcbe:	6023      	str	r3, [r4, #0]
 800bcc0:	bd38      	pop	{r3, r4, r5, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20001830 	.word	0x20001830

0800bcc8 <_isatty_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d06      	ldr	r5, [pc, #24]	; (800bce4 <_isatty_r+0x1c>)
 800bccc:	2300      	movs	r3, #0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	602b      	str	r3, [r5, #0]
 800bcd4:	f7f5 fbeb 	bl	80014ae <_isatty>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_isatty_r+0x1a>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_isatty_r+0x1a>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	20001830 	.word	0x20001830

0800bce8 <_lseek_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d07      	ldr	r5, [pc, #28]	; (800bd08 <_lseek_r+0x20>)
 800bcec:	4604      	mov	r4, r0
 800bcee:	4608      	mov	r0, r1
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	602a      	str	r2, [r5, #0]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	f7f5 fbe4 	bl	80014c4 <_lseek>
 800bcfc:	1c43      	adds	r3, r0, #1
 800bcfe:	d102      	bne.n	800bd06 <_lseek_r+0x1e>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	b103      	cbz	r3, 800bd06 <_lseek_r+0x1e>
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	bd38      	pop	{r3, r4, r5, pc}
 800bd08:	20001830 	.word	0x20001830

0800bd0c <_read_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4d07      	ldr	r5, [pc, #28]	; (800bd2c <_read_r+0x20>)
 800bd10:	4604      	mov	r4, r0
 800bd12:	4608      	mov	r0, r1
 800bd14:	4611      	mov	r1, r2
 800bd16:	2200      	movs	r2, #0
 800bd18:	602a      	str	r2, [r5, #0]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f7f5 fb72 	bl	8001404 <_read>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_read_r+0x1e>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_read_r+0x1e>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	20001830 	.word	0x20001830

0800bd30 <_init>:
 800bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd32:	bf00      	nop
 800bd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd36:	bc08      	pop	{r3}
 800bd38:	469e      	mov	lr, r3
 800bd3a:	4770      	bx	lr

0800bd3c <_fini>:
 800bd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3e:	bf00      	nop
 800bd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd42:	bc08      	pop	{r3}
 800bd44:	469e      	mov	lr, r3
 800bd46:	4770      	bx	lr
