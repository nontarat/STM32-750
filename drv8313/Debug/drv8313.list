
drv8313.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005a60  08005a60  00015a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000334  24000000  08005a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000130  24000334  08005d9c  00020334  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000464  08005d9c  00020464  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020362  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e173  00000000  00000000  000203a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ec0  00000000  00000000  0002e518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c80  00000000  00000000  000303d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000099c  00000000  00000000  00031058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003683e  00000000  00000000  000319f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000114b7  00000000  00000000  00068232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c1de  00000000  00000000  000796e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003348  00000000  00000000  001d58c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000003f  00000000  00000000  001d8c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000334 	.word	0x24000334
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005a30 	.word	0x08005a30

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000338 	.word	0x24000338
 80002d4:	08005a30 	.word	0x08005a30

080002d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <MX_DMA_Init+0x3c>)
 80002e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <MX_DMA_Init+0x3c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_DMA_Init+0x3c>)
 80002f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	200b      	movs	r0, #11
 8000302:	f000 fd54 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000306:	200b      	movs	r0, #11
 8000308:	f000 fd6b 	bl	8000de2 <HAL_NVIC_EnableIRQ>

}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	58024400 	.word	0x58024400

08000318 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_GPIO_Init+0x50>)
 8000320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000324:	4a10      	ldr	r2, [pc, #64]	; (8000368 <MX_GPIO_Init+0x50>)
 8000326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800032a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_GPIO_Init+0x50>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <MX_GPIO_Init+0x50>)
 800033e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000342:	4a09      	ldr	r2, [pc, #36]	; (8000368 <MX_GPIO_Init+0x50>)
 8000344:	f043 0310 	orr.w	r3, r3, #16
 8000348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_GPIO_Init+0x50>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000352:	f003 0310 	and.w	r3, r3, #16
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]

}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	58024400 	.word	0x58024400

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 fba4 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f840 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f7ff ffce 	bl	8000318 <MX_GPIO_Init>
  MX_DMA_Init();
 800037c:	f7ff ffac 	bl	80002d8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000380:	f000 f992 	bl	80006a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000384:	f000 fa54 	bl	8000830 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000388:	4816      	ldr	r0, [pc, #88]	; (80003e4 <main+0x78>)
 800038a:	f003 ffe9 	bl	8004360 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800038e:	2100      	movs	r1, #0
 8000390:	4814      	ldr	r0, [pc, #80]	; (80003e4 <main+0x78>)
 8000392:	f004 fa4d 	bl	8004830 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000396:	2100      	movs	r1, #0
 8000398:	4813      	ldr	r0, [pc, #76]	; (80003e8 <main+0x7c>)
 800039a:	f004 f8d9 	bl	8004550 <HAL_TIM_OC_Start>

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800039e:	2104      	movs	r1, #4
 80003a0:	4810      	ldr	r0, [pc, #64]	; (80003e4 <main+0x78>)
 80003a2:	f004 fa45 	bl	8004830 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80003a6:	2100      	movs	r1, #0
 80003a8:	480f      	ldr	r0, [pc, #60]	; (80003e8 <main+0x7c>)
 80003aa:	f004 f8d1 	bl	8004550 <HAL_TIM_OC_Start>

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80003ae:	2108      	movs	r1, #8
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <main+0x78>)
 80003b2:	f004 fa3d 	bl	8004830 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80003b6:	2100      	movs	r1, #0
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <main+0x7c>)
 80003ba:	f004 f8c9 	bl	8004550 <HAL_TIM_OC_Start>

   HAL_DMA_Start_IT(&hdma_tim3_ch1, (uint32_t)Wave_LUT, DestAddress, NS);
 80003be:	490b      	ldr	r1, [pc, #44]	; (80003ec <main+0x80>)
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <main+0x84>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	23c8      	movs	r3, #200	; 0xc8
 80003c6:	480b      	ldr	r0, [pc, #44]	; (80003f4 <main+0x88>)
 80003c8:	f001 f882 	bl	80014d0 <HAL_DMA_Start_IT>
   __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <main+0x7c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	68da      	ldr	r2, [r3, #12]
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <main+0x7c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003da:	60da      	str	r2, [r3, #12]

   HAL_TIM_Base_Stop(&htim1);
 80003dc:	4801      	ldr	r0, [pc, #4]	; (80003e4 <main+0x78>)
 80003de:	f004 f82f 	bl	8004440 <HAL_TIM_Base_Stop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <main+0x76>
 80003e4:	24000350 	.word	0x24000350
 80003e8:	2400039c 	.word	0x2400039c
 80003ec:	24000000 	.word	0x24000000
 80003f0:	24000320 	.word	0x24000320
 80003f4:	240003e8 	.word	0x240003e8

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b09c      	sub	sp, #112	; 0x70
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000402:	224c      	movs	r2, #76	; 0x4c
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f005 fae6 	bl	80059d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2220      	movs	r2, #32
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f005 fae0 	bl	80059d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000418:	2002      	movs	r0, #2
 800041a:	f002 ff85 	bl	8003328 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800041e:	2300      	movs	r3, #0
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <SystemClock_Config+0xf0>)
 8000424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000426:	4a30      	ldr	r2, [pc, #192]	; (80004e8 <SystemClock_Config+0xf0>)
 8000428:	f023 0301 	bic.w	r3, r3, #1
 800042c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800042e:	4b2e      	ldr	r3, [pc, #184]	; (80004e8 <SystemClock_Config+0xf0>)
 8000430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <SystemClock_Config+0xf4>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000440:	4a2a      	ldr	r2, [pc, #168]	; (80004ec <SystemClock_Config+0xf4>)
 8000442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <SystemClock_Config+0xf4>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000454:	bf00      	nop
 8000456:	4b25      	ldr	r3, [pc, #148]	; (80004ec <SystemClock_Config+0xf4>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800045e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000462:	d1f8      	bne.n	8000456 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000464:	2301      	movs	r3, #1
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	2302      	movs	r3, #2
 8000470:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000472:	2302      	movs	r3, #2
 8000474:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000476:	2305      	movs	r3, #5
 8000478:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800047a:	2360      	movs	r3, #96	; 0x60
 800047c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800047e:	2302      	movs	r3, #2
 8000480:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000482:	2302      	movs	r3, #2
 8000484:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000486:	2302      	movs	r3, #2
 8000488:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800048a:	2308      	movs	r3, #8
 800048c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800048e:	2300      	movs	r3, #0
 8000490:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049a:	4618      	mov	r0, r3
 800049c:	f002 ff7e 	bl	800339c <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004a6:	f000 f823 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	233f      	movs	r3, #63	; 0x3f
 80004ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	2303      	movs	r3, #3
 80004b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004b6:	2308      	movs	r3, #8
 80004b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2102      	movs	r1, #2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f003 fbbe 	bl	8003c50 <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80004da:	f000 f809 	bl	80004f0 <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3770      	adds	r7, #112	; 0x70
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	58000400 	.word	0x58000400
 80004ec:	58024800 	.word	0x58024800

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>
	...

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x30>)
 8000504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <HAL_MspInit+0x30>)
 800050a:	f043 0302 	orr.w	r3, r3, #2
 800050e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <HAL_MspInit+0x30>)
 8000514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000518:	f003 0302 	and.w	r3, r3, #2
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	58024400 	.word	0x58024400

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 fb10 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <DMA1_Stream0_IRQHandler+0x10>)
 800058a:	f001 fa0b 	bl	80019a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	240003e8 	.word	0x240003e8

08000598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <SystemInit+0xe4>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a36      	ldr	r2, [pc, #216]	; (800067c <SystemInit+0xe4>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005ac:	4b34      	ldr	r3, [pc, #208]	; (8000680 <SystemInit+0xe8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f003 030f 	and.w	r3, r3, #15
 80005b4:	2b06      	cmp	r3, #6
 80005b6:	d807      	bhi.n	80005c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005b8:	4b31      	ldr	r3, [pc, #196]	; (8000680 <SystemInit+0xe8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f023 030f 	bic.w	r3, r3, #15
 80005c0:	4a2f      	ldr	r2, [pc, #188]	; (8000680 <SystemInit+0xe8>)
 80005c2:	f043 0307 	orr.w	r3, r3, #7
 80005c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005c8:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <SystemInit+0xec>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a2d      	ldr	r2, [pc, #180]	; (8000684 <SystemInit+0xec>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <SystemInit+0xec>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <SystemInit+0xec>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4929      	ldr	r1, [pc, #164]	; (8000684 <SystemInit+0xec>)
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <SystemInit+0xf0>)
 80005e2:	4013      	ands	r3, r2
 80005e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <SystemInit+0xe8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d007      	beq.n	8000602 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <SystemInit+0xe8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f023 030f 	bic.w	r3, r3, #15
 80005fa:	4a21      	ldr	r2, [pc, #132]	; (8000680 <SystemInit+0xe8>)
 80005fc:	f043 0307 	orr.w	r3, r3, #7
 8000600:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <SystemInit+0xec>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemInit+0xec>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <SystemInit+0xec>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SystemInit+0xec>)
 8000616:	4a1d      	ldr	r2, [pc, #116]	; (800068c <SystemInit+0xf4>)
 8000618:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <SystemInit+0xec>)
 800061c:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <SystemInit+0xf8>)
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <SystemInit+0xec>)
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <SystemInit+0xfc>)
 8000624:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <SystemInit+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <SystemInit+0xec>)
 800062e:	4a19      	ldr	r2, [pc, #100]	; (8000694 <SystemInit+0xfc>)
 8000630:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <SystemInit+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <SystemInit+0xec>)
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <SystemInit+0xfc>)
 800063c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <SystemInit+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <SystemInit+0xec>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <SystemInit+0xec>)
 800064a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800064e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <SystemInit+0xec>)
 8000652:	2200      	movs	r2, #0
 8000654:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <SystemInit+0x100>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <SystemInit+0x104>)
 800065c:	4013      	ands	r3, r2
 800065e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000662:	d202      	bcs.n	800066a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <SystemInit+0x108>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <SystemInit+0x10c>)
 800066c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000670:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	52002000 	.word	0x52002000
 8000684:	58024400 	.word	0x58024400
 8000688:	eaf6ed7f 	.word	0xeaf6ed7f
 800068c:	02020200 	.word	0x02020200
 8000690:	01ff0000 	.word	0x01ff0000
 8000694:	01010280 	.word	0x01010280
 8000698:	5c001000 	.word	0x5c001000
 800069c:	ffff0000 	.word	0xffff0000
 80006a0:	51008108 	.word	0x51008108
 80006a4:	52004000 	.word	0x52004000

080006a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09a      	sub	sp, #104	; 0x68
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	222c      	movs	r2, #44	; 0x2c
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 f978 	bl	80059d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e8:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <MX_TIM1_Init+0x180>)
 80006ea:	4a50      	ldr	r2, [pc, #320]	; (800082c <MX_TIM1_Init+0x184>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 80006ee:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <MX_TIM1_Init+0x180>)
 80006f0:	2277      	movs	r2, #119	; 0x77
 80006f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b4c      	ldr	r3, [pc, #304]	; (8000828 <MX_TIM1_Init+0x180>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40-1;
 80006fa:	4b4b      	ldr	r3, [pc, #300]	; (8000828 <MX_TIM1_Init+0x180>)
 80006fc:	2227      	movs	r2, #39	; 0x27
 80006fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000700:	4b49      	ldr	r3, [pc, #292]	; (8000828 <MX_TIM1_Init+0x180>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000706:	4b48      	ldr	r3, [pc, #288]	; (8000828 <MX_TIM1_Init+0x180>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070c:	4b46      	ldr	r3, [pc, #280]	; (8000828 <MX_TIM1_Init+0x180>)
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000712:	4845      	ldr	r0, [pc, #276]	; (8000828 <MX_TIM1_Init+0x180>)
 8000714:	f003 fdcc 	bl	80042b0 <HAL_TIM_Base_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800071e:	f7ff fee7 	bl	80004f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800072c:	4619      	mov	r1, r3
 800072e:	483e      	ldr	r0, [pc, #248]	; (8000828 <MX_TIM1_Init+0x180>)
 8000730:	f004 fb1a 	bl	8004d68 <HAL_TIM_ConfigClockSource>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800073a:	f7ff fed9 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800073e:	483a      	ldr	r0, [pc, #232]	; (8000828 <MX_TIM1_Init+0x180>)
 8000740:	f004 f814 	bl	800476c <HAL_TIM_PWM_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800074a:	f7ff fed1 	bl	80004f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800075e:	4619      	mov	r1, r3
 8000760:	4831      	ldr	r0, [pc, #196]	; (8000828 <MX_TIM1_Init+0x180>)
 8000762:	f005 f82d 	bl	80057c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800076c:	f7ff fec0 	bl	80004f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000770:	2360      	movs	r3, #96	; 0x60
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	4824      	ldr	r0, [pc, #144]	; (8000828 <MX_TIM1_Init+0x180>)
 8000796:	f004 f9d3 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80007a0:	f7ff fea6 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007a8:	2204      	movs	r2, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	481e      	ldr	r0, [pc, #120]	; (8000828 <MX_TIM1_Init+0x180>)
 80007ae:	f004 f9c7 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80007b8:	f7ff fe9a 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007c0:	2208      	movs	r2, #8
 80007c2:	4619      	mov	r1, r3
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <MX_TIM1_Init+0x180>)
 80007c6:	f004 f9bb 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80007d0:	f7ff fe8e 	bl	80004f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4619      	mov	r1, r3
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM1_Init+0x180>)
 800080a:	f005 f867 	bl	80058dc <HAL_TIMEx_ConfigBreakDeadTime>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000814:	f7ff fe6c 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM1_Init+0x180>)
 800081a:	f000 f8e9 	bl	80009f0 <HAL_TIM_MspPostInit>

}
 800081e:	bf00      	nop
 8000820:	3768      	adds	r7, #104	; 0x68
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	24000350 	.word	0x24000350
 800082c:	40010000 	.word	0x40010000

08000830 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_TIM3_Init+0xe0>)
 8000864:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <MX_TIM3_Init+0xe4>)
 8000866:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_TIM3_Init+0xe0>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_TIM3_Init+0xe0>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_TIM3_Init+0xe0>)
 8000876:	2264      	movs	r2, #100	; 0x64
 8000878:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <MX_TIM3_Init+0xe0>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_TIM3_Init+0xe0>)
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000886:	4822      	ldr	r0, [pc, #136]	; (8000910 <MX_TIM3_Init+0xe0>)
 8000888:	f003 fd12 	bl	80042b0 <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000892:	f7ff fe2d 	bl	80004f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800089c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a0:	4619      	mov	r1, r3
 80008a2:	481b      	ldr	r0, [pc, #108]	; (8000910 <MX_TIM3_Init+0xe0>)
 80008a4:	f004 fa60 	bl	8004d68 <HAL_TIM_ConfigClockSource>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008ae:	f7ff fe1f 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008b2:	4817      	ldr	r0, [pc, #92]	; (8000910 <MX_TIM3_Init+0xe0>)
 80008b4:	f003 fdeb 	bl	800448e <HAL_TIM_OC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008be:	f7ff fe17 	bl	80004f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	480f      	ldr	r0, [pc, #60]	; (8000910 <MX_TIM3_Init+0xe0>)
 80008d2:	f004 ff75 	bl	80057c0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008dc:	f7ff fe08 	bl	80004f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <MX_TIM3_Init+0xe0>)
 80008f8:	f004 f8a8 	bl	8004a4c <HAL_TIM_OC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000902:	f7ff fdf5 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3738      	adds	r7, #56	; 0x38
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2400039c 	.word	0x2400039c
 8000914:	40000400 	.word	0x40000400

08000918 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a2d      	ldr	r2, [pc, #180]	; (80009dc <HAL_TIM_Base_MspInit+0xc4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10f      	bne.n	800094a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_TIM_Base_MspInit+0xc8>)
 800092c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000930:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <HAL_TIM_Base_MspInit+0xc8>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <HAL_TIM_Base_MspInit+0xc8>)
 800093c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000948:	e044      	b.n	80009d4 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM3)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d13f      	bne.n	80009d4 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <HAL_TIM_Base_MspInit+0xc8>)
 8000956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800095a:	4a21      	ldr	r2, [pc, #132]	; (80009e0 <HAL_TIM_Base_MspInit+0xc8>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <HAL_TIM_Base_MspInit+0xc8>)
 8000966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 8000974:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <HAL_TIM_Base_MspInit+0xd4>)
 8000976:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 800097a:	2217      	movs	r2, #23
 800097c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 8000980:	2240      	movs	r2, #64	; 0x40
 8000982:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 800098c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000990:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 8000994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000998:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 800099c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 80009a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 80009ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009b0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 80009ba:	f000 fa2d 	bl	8000e18 <HAL_DMA_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_TIM_Base_MspInit+0xb0>
      Error_Handler();
 80009c4:	f7ff fd94 	bl	80004f0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
 80009ce:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40010000 	.word	0x40010000
 80009e0:	58024400 	.word	0x58024400
 80009e4:	40000400 	.word	0x40000400
 80009e8:	240003e8 	.word	0x240003e8
 80009ec:	40020010 	.word	0x40020010

080009f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <HAL_TIM_MspPostInit+0x6c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d11f      	bne.n	8000a52 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_TIM_MspPostInit+0x70>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <HAL_TIM_MspPostInit+0x70>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_TIM_MspPostInit+0x70>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	f003 0310 	and.w	r3, r3, #16
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8000a30:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000a34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_TIM_MspPostInit+0x74>)
 8000a4e:	f002 fabb 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3720      	adds	r7, #32
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010000 	.word	0x40010000
 8000a60:	58024400 	.word	0x58024400
 8000a64:	58021000 	.word	0x58021000

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a6c:	f7ff fd94 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	; (8000aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f004 ffa7 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fc67 	bl	800036c <main>
  bx  lr
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000aa4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000aa8:	24000334 	.word	0x24000334
  ldr r2, =_sidata
 8000aac:	08005a68 	.word	0x08005a68
  ldr r2, =_sbss
 8000ab0:	24000334 	.word	0x24000334
  ldr r4, =_ebss
 8000ab4:	24000464 	.word	0x24000464

08000ab8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC3_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f000 f968 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ac8:	f003 fa78 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8000acc:	4602      	mov	r2, r0
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_Init+0x68>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	4913      	ldr	r1, [pc, #76]	; (8000b28 <HAL_Init+0x6c>)
 8000ada:	5ccb      	ldrb	r3, [r1, r3]
 8000adc:	f003 031f 	and.w	r3, r3, #31
 8000ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_Init+0x68>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_Init+0x6c>)
 8000af0:	5cd3      	ldrb	r3, [r2, r3]
 8000af2:	f003 031f 	and.w	r3, r3, #31
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	fa22 f303 	lsr.w	r3, r2, r3
 8000afc:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <HAL_Init+0x70>)
 8000afe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b00:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <HAL_Init+0x74>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b06:	200f      	movs	r0, #15
 8000b08:	f000 f814 	bl	8000b34 <HAL_InitTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e002      	b.n	8000b1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b16:	f7ff fcf1 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	58024400 	.word	0x58024400
 8000b28:	08005a48 	.word	0x08005a48
 8000b2c:	24000328 	.word	0x24000328
 8000b30:	24000324 	.word	0x24000324

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_InitTick+0x60>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e021      	b.n	8000b8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <HAL_InitTick+0x64>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_InitTick+0x60>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f94d 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f917 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x68>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	24000330 	.word	0x24000330
 8000b98:	24000324 	.word	0x24000324
 8000b9c:	2400032c 	.word	0x2400032c

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	24000330 	.word	0x24000330
 8000bc4:	24000460 	.word	0x24000460

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	24000460 	.word	0x24000460

08000be0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetREVID+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	0c1b      	lsrs	r3, r3, #16
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	5c001000 	.word	0x5c001000

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <__NVIC_SetPriorityGrouping+0x40>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x40>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00
 8000c3c:	05fa0000 	.word	0x05fa0000

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <__NVIC_EnableIRQ+0x38>)
 8000c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff8e 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff29 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff40 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff90 	bl	8000cec <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5f 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff33 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffa4 	bl	8000d54 <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fed2 	bl	8000bc8 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e316      	b.n	800145e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a66      	ldr	r2, [pc, #408]	; (8000fd0 <HAL_DMA_Init+0x1b8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d04a      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a65      	ldr	r2, [pc, #404]	; (8000fd4 <HAL_DMA_Init+0x1bc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d045      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a63      	ldr	r2, [pc, #396]	; (8000fd8 <HAL_DMA_Init+0x1c0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d040      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a62      	ldr	r2, [pc, #392]	; (8000fdc <HAL_DMA_Init+0x1c4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d03b      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a60      	ldr	r2, [pc, #384]	; (8000fe0 <HAL_DMA_Init+0x1c8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d036      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a5f      	ldr	r2, [pc, #380]	; (8000fe4 <HAL_DMA_Init+0x1cc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d031      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a5d      	ldr	r2, [pc, #372]	; (8000fe8 <HAL_DMA_Init+0x1d0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d02c      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a5c      	ldr	r2, [pc, #368]	; (8000fec <HAL_DMA_Init+0x1d4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d027      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a5a      	ldr	r2, [pc, #360]	; (8000ff0 <HAL_DMA_Init+0x1d8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d022      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a59      	ldr	r2, [pc, #356]	; (8000ff4 <HAL_DMA_Init+0x1dc>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d01d      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a57      	ldr	r2, [pc, #348]	; (8000ff8 <HAL_DMA_Init+0x1e0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d018      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a56      	ldr	r2, [pc, #344]	; (8000ffc <HAL_DMA_Init+0x1e4>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d013      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a54      	ldr	r2, [pc, #336]	; (8001000 <HAL_DMA_Init+0x1e8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d00e      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a53      	ldr	r2, [pc, #332]	; (8001004 <HAL_DMA_Init+0x1ec>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d009      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a51      	ldr	r2, [pc, #324]	; (8001008 <HAL_DMA_Init+0x1f0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d004      	beq.n	8000ed0 <HAL_DMA_Init+0xb8>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a50      	ldr	r2, [pc, #320]	; (800100c <HAL_DMA_Init+0x1f4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d101      	bne.n	8000ed4 <HAL_DMA_Init+0xbc>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <HAL_DMA_Init+0xbe>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 813b 	beq.w	8001152 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <HAL_DMA_Init+0x1b8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d04a      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a36      	ldr	r2, [pc, #216]	; (8000fd4 <HAL_DMA_Init+0x1bc>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d045      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <HAL_DMA_Init+0x1c0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d040      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a33      	ldr	r2, [pc, #204]	; (8000fdc <HAL_DMA_Init+0x1c4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d03b      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <HAL_DMA_Init+0x1c8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d036      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <HAL_DMA_Init+0x1cc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d031      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <HAL_DMA_Init+0x1d0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d02c      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a2d      	ldr	r2, [pc, #180]	; (8000fec <HAL_DMA_Init+0x1d4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d027      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <HAL_DMA_Init+0x1d8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d022      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a2a      	ldr	r2, [pc, #168]	; (8000ff4 <HAL_DMA_Init+0x1dc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d01d      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <HAL_DMA_Init+0x1e0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d018      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <HAL_DMA_Init+0x1e4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d013      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a25      	ldr	r2, [pc, #148]	; (8001000 <HAL_DMA_Init+0x1e8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00e      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a24      	ldr	r2, [pc, #144]	; (8001004 <HAL_DMA_Init+0x1ec>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d009      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a22      	ldr	r2, [pc, #136]	; (8001008 <HAL_DMA_Init+0x1f0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d004      	beq.n	8000f8c <HAL_DMA_Init+0x174>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a21      	ldr	r2, [pc, #132]	; (800100c <HAL_DMA_Init+0x1f4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d108      	bne.n	8000f9e <HAL_DMA_Init+0x186>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e007      	b.n	8000fae <HAL_DMA_Init+0x196>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0201 	bic.w	r2, r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000fae:	e02f      	b.n	8001010 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb0:	f7ff fe0a 	bl	8000bc8 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	d928      	bls.n	8001010 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e246      	b.n	800145e <HAL_DMA_Init+0x646>
 8000fd0:	40020010 	.word	0x40020010
 8000fd4:	40020028 	.word	0x40020028
 8000fd8:	40020040 	.word	0x40020040
 8000fdc:	40020058 	.word	0x40020058
 8000fe0:	40020070 	.word	0x40020070
 8000fe4:	40020088 	.word	0x40020088
 8000fe8:	400200a0 	.word	0x400200a0
 8000fec:	400200b8 	.word	0x400200b8
 8000ff0:	40020410 	.word	0x40020410
 8000ff4:	40020428 	.word	0x40020428
 8000ff8:	40020440 	.word	0x40020440
 8000ffc:	40020458 	.word	0x40020458
 8001000:	40020470 	.word	0x40020470
 8001004:	40020488 	.word	0x40020488
 8001008:	400204a0 	.word	0x400204a0
 800100c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1c8      	bne.n	8000fb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4b83      	ldr	r3, [pc, #524]	; (8001238 <HAL_DMA_Init+0x420>)
 800102a:	4013      	ands	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001036:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001042:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	4313      	orrs	r3, r2
 800105a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	2b04      	cmp	r3, #4
 8001062:	d107      	bne.n	8001074 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4313      	orrs	r3, r2
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4313      	orrs	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001074:	4b71      	ldr	r3, [pc, #452]	; (800123c <HAL_DMA_Init+0x424>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b71      	ldr	r3, [pc, #452]	; (8001240 <HAL_DMA_Init+0x428>)
 800107a:	4013      	ands	r3, r2
 800107c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001080:	d328      	bcc.n	80010d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b28      	cmp	r3, #40	; 0x28
 8001088:	d903      	bls.n	8001092 <HAL_DMA_Init+0x27a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b2e      	cmp	r3, #46	; 0x2e
 8001090:	d917      	bls.n	80010c2 <HAL_DMA_Init+0x2aa>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b3e      	cmp	r3, #62	; 0x3e
 8001098:	d903      	bls.n	80010a2 <HAL_DMA_Init+0x28a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b42      	cmp	r3, #66	; 0x42
 80010a0:	d90f      	bls.n	80010c2 <HAL_DMA_Init+0x2aa>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b46      	cmp	r3, #70	; 0x46
 80010a8:	d903      	bls.n	80010b2 <HAL_DMA_Init+0x29a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b48      	cmp	r3, #72	; 0x48
 80010b0:	d907      	bls.n	80010c2 <HAL_DMA_Init+0x2aa>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b4e      	cmp	r3, #78	; 0x4e
 80010b8:	d905      	bls.n	80010c6 <HAL_DMA_Init+0x2ae>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b52      	cmp	r3, #82	; 0x52
 80010c0:	d801      	bhi.n	80010c6 <HAL_DMA_Init+0x2ae>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_DMA_Init+0x2b0>
 80010c6:	2300      	movs	r3, #0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f023 0307 	bic.w	r3, r3, #7
 80010ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d117      	bne.n	800112e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4313      	orrs	r3, r2
 8001106:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00e      	beq.n	800112e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 fdcf 	bl	8002cb4 <DMA_CheckFifoParam>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2240      	movs	r2, #64	; 0x40
 8001120:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e197      	b.n	800145e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f001 fd0a 	bl	8002b50 <DMA_CalcBaseAndBitshift>
 800113c:	4603      	mov	r3, r0
 800113e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	223f      	movs	r2, #63	; 0x3f
 800114a:	409a      	lsls	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	e0cd      	b.n	80012ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a3b      	ldr	r2, [pc, #236]	; (8001244 <HAL_DMA_Init+0x42c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d022      	beq.n	80011a2 <HAL_DMA_Init+0x38a>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a39      	ldr	r2, [pc, #228]	; (8001248 <HAL_DMA_Init+0x430>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d01d      	beq.n	80011a2 <HAL_DMA_Init+0x38a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a38      	ldr	r2, [pc, #224]	; (800124c <HAL_DMA_Init+0x434>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d018      	beq.n	80011a2 <HAL_DMA_Init+0x38a>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a36      	ldr	r2, [pc, #216]	; (8001250 <HAL_DMA_Init+0x438>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_DMA_Init+0x38a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a35      	ldr	r2, [pc, #212]	; (8001254 <HAL_DMA_Init+0x43c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00e      	beq.n	80011a2 <HAL_DMA_Init+0x38a>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a33      	ldr	r2, [pc, #204]	; (8001258 <HAL_DMA_Init+0x440>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d009      	beq.n	80011a2 <HAL_DMA_Init+0x38a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a32      	ldr	r2, [pc, #200]	; (800125c <HAL_DMA_Init+0x444>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d004      	beq.n	80011a2 <HAL_DMA_Init+0x38a>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a30      	ldr	r2, [pc, #192]	; (8001260 <HAL_DMA_Init+0x448>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_DMA_Init+0x38e>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_DMA_Init+0x390>
 80011a6:	2300      	movs	r3, #0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 8097 	beq.w	80012dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a24      	ldr	r2, [pc, #144]	; (8001244 <HAL_DMA_Init+0x42c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d021      	beq.n	80011fc <HAL_DMA_Init+0x3e4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a22      	ldr	r2, [pc, #136]	; (8001248 <HAL_DMA_Init+0x430>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01c      	beq.n	80011fc <HAL_DMA_Init+0x3e4>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <HAL_DMA_Init+0x434>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d017      	beq.n	80011fc <HAL_DMA_Init+0x3e4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_DMA_Init+0x438>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d012      	beq.n	80011fc <HAL_DMA_Init+0x3e4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <HAL_DMA_Init+0x43c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d00d      	beq.n	80011fc <HAL_DMA_Init+0x3e4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_DMA_Init+0x440>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d008      	beq.n	80011fc <HAL_DMA_Init+0x3e4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_DMA_Init+0x444>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d003      	beq.n	80011fc <HAL_DMA_Init+0x3e4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_DMA_Init+0x448>)
 80011fa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_DMA_Init+0x44c>)
 8001218:	4013      	ands	r3, r2
 800121a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b40      	cmp	r3, #64	; 0x40
 8001222:	d021      	beq.n	8001268 <HAL_DMA_Init+0x450>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b80      	cmp	r3, #128	; 0x80
 800122a:	d102      	bne.n	8001232 <HAL_DMA_Init+0x41a>
 800122c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001230:	e01b      	b.n	800126a <HAL_DMA_Init+0x452>
 8001232:	2300      	movs	r3, #0
 8001234:	e019      	b.n	800126a <HAL_DMA_Init+0x452>
 8001236:	bf00      	nop
 8001238:	fe10803f 	.word	0xfe10803f
 800123c:	5c001000 	.word	0x5c001000
 8001240:	ffff0000 	.word	0xffff0000
 8001244:	58025408 	.word	0x58025408
 8001248:	5802541c 	.word	0x5802541c
 800124c:	58025430 	.word	0x58025430
 8001250:	58025444 	.word	0x58025444
 8001254:	58025458 	.word	0x58025458
 8001258:	5802546c 	.word	0x5802546c
 800125c:	58025480 	.word	0x58025480
 8001260:	58025494 	.word	0x58025494
 8001264:	fffe000f 	.word	0xfffe000f
 8001268:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68d2      	ldr	r2, [r2, #12]
 800126e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001270:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001278:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001280:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001288:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001290:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001298:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <HAL_DMA_Init+0x650>)
 80012b0:	4413      	add	r3, r2
 80012b2:	4a6e      	ldr	r2, [pc, #440]	; (800146c <HAL_DMA_Init+0x654>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	009a      	lsls	r2, r3, #2
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f001 fc45 	bl	8002b50 <DMA_CalcBaseAndBitshift>
 80012c6:	4603      	mov	r3, r0
 80012c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	f003 031f 	and.w	r3, r3, #31
 80012d2:	2201      	movs	r2, #1
 80012d4:	409a      	lsls	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	e008      	b.n	80012ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2203      	movs	r2, #3
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0b7      	b.n	800145e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a5f      	ldr	r2, [pc, #380]	; (8001470 <HAL_DMA_Init+0x658>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d072      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a5d      	ldr	r2, [pc, #372]	; (8001474 <HAL_DMA_Init+0x65c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d06d      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a5c      	ldr	r2, [pc, #368]	; (8001478 <HAL_DMA_Init+0x660>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d068      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a5a      	ldr	r2, [pc, #360]	; (800147c <HAL_DMA_Init+0x664>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d063      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a59      	ldr	r2, [pc, #356]	; (8001480 <HAL_DMA_Init+0x668>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d05e      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a57      	ldr	r2, [pc, #348]	; (8001484 <HAL_DMA_Init+0x66c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d059      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a56      	ldr	r2, [pc, #344]	; (8001488 <HAL_DMA_Init+0x670>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d054      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a54      	ldr	r2, [pc, #336]	; (800148c <HAL_DMA_Init+0x674>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d04f      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a53      	ldr	r2, [pc, #332]	; (8001490 <HAL_DMA_Init+0x678>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d04a      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a51      	ldr	r2, [pc, #324]	; (8001494 <HAL_DMA_Init+0x67c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d045      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a50      	ldr	r2, [pc, #320]	; (8001498 <HAL_DMA_Init+0x680>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d040      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a4e      	ldr	r2, [pc, #312]	; (800149c <HAL_DMA_Init+0x684>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d03b      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <HAL_DMA_Init+0x688>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d036      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a4b      	ldr	r2, [pc, #300]	; (80014a4 <HAL_DMA_Init+0x68c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d031      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a4a      	ldr	r2, [pc, #296]	; (80014a8 <HAL_DMA_Init+0x690>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d02c      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a48      	ldr	r2, [pc, #288]	; (80014ac <HAL_DMA_Init+0x694>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d027      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a47      	ldr	r2, [pc, #284]	; (80014b0 <HAL_DMA_Init+0x698>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d022      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a45      	ldr	r2, [pc, #276]	; (80014b4 <HAL_DMA_Init+0x69c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d01d      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <HAL_DMA_Init+0x6a0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d018      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a42      	ldr	r2, [pc, #264]	; (80014bc <HAL_DMA_Init+0x6a4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a41      	ldr	r2, [pc, #260]	; (80014c0 <HAL_DMA_Init+0x6a8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00e      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a3f      	ldr	r2, [pc, #252]	; (80014c4 <HAL_DMA_Init+0x6ac>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d009      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a3e      	ldr	r2, [pc, #248]	; (80014c8 <HAL_DMA_Init+0x6b0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d004      	beq.n	80013de <HAL_DMA_Init+0x5c6>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a3c      	ldr	r2, [pc, #240]	; (80014cc <HAL_DMA_Init+0x6b4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_DMA_Init+0x5ca>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_DMA_Init+0x5cc>
 80013e2:	2300      	movs	r3, #0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d032      	beq.n	800144e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f001 fcdf 	bl	8002dac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b80      	cmp	r3, #128	; 0x80
 80013f4:	d102      	bne.n	80013fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001410:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d010      	beq.n	800143c <HAL_DMA_Init+0x624>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b08      	cmp	r3, #8
 8001420:	d80c      	bhi.n	800143c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f001 fd5c 	bl	8002ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	e008      	b.n	800144e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	a7fdabf8 	.word	0xa7fdabf8
 800146c:	cccccccd 	.word	0xcccccccd
 8001470:	40020010 	.word	0x40020010
 8001474:	40020028 	.word	0x40020028
 8001478:	40020040 	.word	0x40020040
 800147c:	40020058 	.word	0x40020058
 8001480:	40020070 	.word	0x40020070
 8001484:	40020088 	.word	0x40020088
 8001488:	400200a0 	.word	0x400200a0
 800148c:	400200b8 	.word	0x400200b8
 8001490:	40020410 	.word	0x40020410
 8001494:	40020428 	.word	0x40020428
 8001498:	40020440 	.word	0x40020440
 800149c:	40020458 	.word	0x40020458
 80014a0:	40020470 	.word	0x40020470
 80014a4:	40020488 	.word	0x40020488
 80014a8:	400204a0 	.word	0x400204a0
 80014ac:	400204b8 	.word	0x400204b8
 80014b0:	58025408 	.word	0x58025408
 80014b4:	5802541c 	.word	0x5802541c
 80014b8:	58025430 	.word	0x58025430
 80014bc:	58025444 	.word	0x58025444
 80014c0:	58025458 	.word	0x58025458
 80014c4:	5802546c 	.word	0x5802546c
 80014c8:	58025480 	.word	0x58025480
 80014cc:	58025494 	.word	0x58025494

080014d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e226      	b.n	800193a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_DMA_Start_IT+0x2a>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e21f      	b.n	800193a <HAL_DMA_Start_IT+0x46a>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	f040 820a 	bne.w	8001924 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <HAL_DMA_Start_IT+0x1f4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d04a      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <HAL_DMA_Start_IT+0x1f8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d045      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a65      	ldr	r2, [pc, #404]	; (80016cc <HAL_DMA_Start_IT+0x1fc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d040      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a63      	ldr	r2, [pc, #396]	; (80016d0 <HAL_DMA_Start_IT+0x200>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d03b      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <HAL_DMA_Start_IT+0x204>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d036      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a60      	ldr	r2, [pc, #384]	; (80016d8 <HAL_DMA_Start_IT+0x208>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d031      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a5f      	ldr	r2, [pc, #380]	; (80016dc <HAL_DMA_Start_IT+0x20c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d02c      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a5d      	ldr	r2, [pc, #372]	; (80016e0 <HAL_DMA_Start_IT+0x210>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d027      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a5c      	ldr	r2, [pc, #368]	; (80016e4 <HAL_DMA_Start_IT+0x214>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d022      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a5a      	ldr	r2, [pc, #360]	; (80016e8 <HAL_DMA_Start_IT+0x218>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d01d      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a59      	ldr	r2, [pc, #356]	; (80016ec <HAL_DMA_Start_IT+0x21c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d018      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_DMA_Start_IT+0x220>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d013      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a56      	ldr	r2, [pc, #344]	; (80016f4 <HAL_DMA_Start_IT+0x224>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00e      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_DMA_Start_IT+0x228>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d009      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a53      	ldr	r2, [pc, #332]	; (80016fc <HAL_DMA_Start_IT+0x22c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d004      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a51      	ldr	r2, [pc, #324]	; (8001700 <HAL_DMA_Start_IT+0x230>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d108      	bne.n	80015d0 <HAL_DMA_Start_IT+0x100>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e007      	b.n	80015e0 <HAL_DMA_Start_IT+0x110>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f001 f906 	bl	80027f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a34      	ldr	r2, [pc, #208]	; (80016c4 <HAL_DMA_Start_IT+0x1f4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d04a      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <HAL_DMA_Start_IT+0x1f8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d045      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a31      	ldr	r2, [pc, #196]	; (80016cc <HAL_DMA_Start_IT+0x1fc>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d040      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a30      	ldr	r2, [pc, #192]	; (80016d0 <HAL_DMA_Start_IT+0x200>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d03b      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2e      	ldr	r2, [pc, #184]	; (80016d4 <HAL_DMA_Start_IT+0x204>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d036      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <HAL_DMA_Start_IT+0x208>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d031      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2b      	ldr	r2, [pc, #172]	; (80016dc <HAL_DMA_Start_IT+0x20c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d02c      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <HAL_DMA_Start_IT+0x210>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d027      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <HAL_DMA_Start_IT+0x214>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d022      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_DMA_Start_IT+0x218>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d01d      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a25      	ldr	r2, [pc, #148]	; (80016ec <HAL_DMA_Start_IT+0x21c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d018      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <HAL_DMA_Start_IT+0x220>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d013      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <HAL_DMA_Start_IT+0x224>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00e      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <HAL_DMA_Start_IT+0x228>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d009      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_DMA_Start_IT+0x22c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <HAL_DMA_Start_IT+0x230>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_DMA_Start_IT+0x1c0>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_DMA_Start_IT+0x1c2>
 8001690:	2300      	movs	r3, #0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d036      	beq.n	8001704 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 021e 	bic.w	r2, r3, #30
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0216 	orr.w	r2, r2, #22
 80016a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03e      	beq.n	8001730 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0208 	orr.w	r2, r2, #8
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e035      	b.n	8001730 <HAL_DMA_Start_IT+0x260>
 80016c4:	40020010 	.word	0x40020010
 80016c8:	40020028 	.word	0x40020028
 80016cc:	40020040 	.word	0x40020040
 80016d0:	40020058 	.word	0x40020058
 80016d4:	40020070 	.word	0x40020070
 80016d8:	40020088 	.word	0x40020088
 80016dc:	400200a0 	.word	0x400200a0
 80016e0:	400200b8 	.word	0x400200b8
 80016e4:	40020410 	.word	0x40020410
 80016e8:	40020428 	.word	0x40020428
 80016ec:	40020440 	.word	0x40020440
 80016f0:	40020458 	.word	0x40020458
 80016f4:	40020470 	.word	0x40020470
 80016f8:	40020488 	.word	0x40020488
 80016fc:	400204a0 	.word	0x400204a0
 8001700:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 020e 	bic.w	r2, r3, #14
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 020a 	orr.w	r2, r2, #10
 8001716:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0204 	orr.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a83      	ldr	r2, [pc, #524]	; (8001944 <HAL_DMA_Start_IT+0x474>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d072      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a82      	ldr	r2, [pc, #520]	; (8001948 <HAL_DMA_Start_IT+0x478>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d06d      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a80      	ldr	r2, [pc, #512]	; (800194c <HAL_DMA_Start_IT+0x47c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d068      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7f      	ldr	r2, [pc, #508]	; (8001950 <HAL_DMA_Start_IT+0x480>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d063      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a7d      	ldr	r2, [pc, #500]	; (8001954 <HAL_DMA_Start_IT+0x484>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d05e      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7c      	ldr	r2, [pc, #496]	; (8001958 <HAL_DMA_Start_IT+0x488>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d059      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a7a      	ldr	r2, [pc, #488]	; (800195c <HAL_DMA_Start_IT+0x48c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d054      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a79      	ldr	r2, [pc, #484]	; (8001960 <HAL_DMA_Start_IT+0x490>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04f      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a77      	ldr	r2, [pc, #476]	; (8001964 <HAL_DMA_Start_IT+0x494>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d04a      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a76      	ldr	r2, [pc, #472]	; (8001968 <HAL_DMA_Start_IT+0x498>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d045      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a74      	ldr	r2, [pc, #464]	; (800196c <HAL_DMA_Start_IT+0x49c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d040      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a73      	ldr	r2, [pc, #460]	; (8001970 <HAL_DMA_Start_IT+0x4a0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d03b      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a71      	ldr	r2, [pc, #452]	; (8001974 <HAL_DMA_Start_IT+0x4a4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d036      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a70      	ldr	r2, [pc, #448]	; (8001978 <HAL_DMA_Start_IT+0x4a8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d031      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6e      	ldr	r2, [pc, #440]	; (800197c <HAL_DMA_Start_IT+0x4ac>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d02c      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6d      	ldr	r2, [pc, #436]	; (8001980 <HAL_DMA_Start_IT+0x4b0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d027      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6b      	ldr	r2, [pc, #428]	; (8001984 <HAL_DMA_Start_IT+0x4b4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d022      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6a      	ldr	r2, [pc, #424]	; (8001988 <HAL_DMA_Start_IT+0x4b8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d01d      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a68      	ldr	r2, [pc, #416]	; (800198c <HAL_DMA_Start_IT+0x4bc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d018      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a67      	ldr	r2, [pc, #412]	; (8001990 <HAL_DMA_Start_IT+0x4c0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d013      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a65      	ldr	r2, [pc, #404]	; (8001994 <HAL_DMA_Start_IT+0x4c4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00e      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a64      	ldr	r2, [pc, #400]	; (8001998 <HAL_DMA_Start_IT+0x4c8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d009      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a62      	ldr	r2, [pc, #392]	; (800199c <HAL_DMA_Start_IT+0x4cc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d004      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a61      	ldr	r2, [pc, #388]	; (80019a0 <HAL_DMA_Start_IT+0x4d0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_DMA_Start_IT+0x354>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_DMA_Start_IT+0x356>
 8001824:	2300      	movs	r3, #0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01a      	beq.n	8001860 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001846:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800185a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800185e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a37      	ldr	r2, [pc, #220]	; (8001944 <HAL_DMA_Start_IT+0x474>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d04a      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a36      	ldr	r2, [pc, #216]	; (8001948 <HAL_DMA_Start_IT+0x478>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d045      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a34      	ldr	r2, [pc, #208]	; (800194c <HAL_DMA_Start_IT+0x47c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d040      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a33      	ldr	r2, [pc, #204]	; (8001950 <HAL_DMA_Start_IT+0x480>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d03b      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a31      	ldr	r2, [pc, #196]	; (8001954 <HAL_DMA_Start_IT+0x484>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d036      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a30      	ldr	r2, [pc, #192]	; (8001958 <HAL_DMA_Start_IT+0x488>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d031      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2e      	ldr	r2, [pc, #184]	; (800195c <HAL_DMA_Start_IT+0x48c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02c      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <HAL_DMA_Start_IT+0x490>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d027      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <HAL_DMA_Start_IT+0x494>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d022      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <HAL_DMA_Start_IT+0x498>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d01d      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <HAL_DMA_Start_IT+0x49c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d018      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_DMA_Start_IT+0x4a0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a25      	ldr	r2, [pc, #148]	; (8001974 <HAL_DMA_Start_IT+0x4a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00e      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a24      	ldr	r2, [pc, #144]	; (8001978 <HAL_DMA_Start_IT+0x4a8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d009      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <HAL_DMA_Start_IT+0x4ac>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <HAL_DMA_Start_IT+0x4b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d108      	bne.n	8001912 <HAL_DMA_Start_IT+0x442>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e012      	b.n	8001938 <HAL_DMA_Start_IT+0x468>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0201 	orr.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e009      	b.n	8001938 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800192a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001938:	7dfb      	ldrb	r3, [r7, #23]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40020010 	.word	0x40020010
 8001948:	40020028 	.word	0x40020028
 800194c:	40020040 	.word	0x40020040
 8001950:	40020058 	.word	0x40020058
 8001954:	40020070 	.word	0x40020070
 8001958:	40020088 	.word	0x40020088
 800195c:	400200a0 	.word	0x400200a0
 8001960:	400200b8 	.word	0x400200b8
 8001964:	40020410 	.word	0x40020410
 8001968:	40020428 	.word	0x40020428
 800196c:	40020440 	.word	0x40020440
 8001970:	40020458 	.word	0x40020458
 8001974:	40020470 	.word	0x40020470
 8001978:	40020488 	.word	0x40020488
 800197c:	400204a0 	.word	0x400204a0
 8001980:	400204b8 	.word	0x400204b8
 8001984:	58025408 	.word	0x58025408
 8001988:	5802541c 	.word	0x5802541c
 800198c:	58025430 	.word	0x58025430
 8001990:	58025444 	.word	0x58025444
 8001994:	58025458 	.word	0x58025458
 8001998:	5802546c 	.word	0x5802546c
 800199c:	58025480 	.word	0x58025480
 80019a0:	58025494 	.word	0x58025494

080019a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019b0:	4b67      	ldr	r3, [pc, #412]	; (8001b50 <HAL_DMA_IRQHandler+0x1ac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a67      	ldr	r2, [pc, #412]	; (8001b54 <HAL_DMA_IRQHandler+0x1b0>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0a9b      	lsrs	r3, r3, #10
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a5f      	ldr	r2, [pc, #380]	; (8001b58 <HAL_DMA_IRQHandler+0x1b4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04a      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a5d      	ldr	r2, [pc, #372]	; (8001b5c <HAL_DMA_IRQHandler+0x1b8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d045      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a5c      	ldr	r2, [pc, #368]	; (8001b60 <HAL_DMA_IRQHandler+0x1bc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d040      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a5a      	ldr	r2, [pc, #360]	; (8001b64 <HAL_DMA_IRQHandler+0x1c0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d03b      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a59      	ldr	r2, [pc, #356]	; (8001b68 <HAL_DMA_IRQHandler+0x1c4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d036      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a57      	ldr	r2, [pc, #348]	; (8001b6c <HAL_DMA_IRQHandler+0x1c8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d031      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a56      	ldr	r2, [pc, #344]	; (8001b70 <HAL_DMA_IRQHandler+0x1cc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d02c      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <HAL_DMA_IRQHandler+0x1d0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d027      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a53      	ldr	r2, [pc, #332]	; (8001b78 <HAL_DMA_IRQHandler+0x1d4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d022      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_DMA_IRQHandler+0x1d8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01d      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a50      	ldr	r2, [pc, #320]	; (8001b80 <HAL_DMA_IRQHandler+0x1dc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d018      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <HAL_DMA_IRQHandler+0x1e0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <HAL_DMA_IRQHandler+0x1e4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00e      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a4b      	ldr	r2, [pc, #300]	; (8001b8c <HAL_DMA_IRQHandler+0x1e8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d009      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a4a      	ldr	r2, [pc, #296]	; (8001b90 <HAL_DMA_IRQHandler+0x1ec>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d004      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xd2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <HAL_DMA_IRQHandler+0x1f0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_DMA_IRQHandler+0xd6>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_DMA_IRQHandler+0xd8>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 842b 	beq.w	80022d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 80a2 	beq.w	8001bdc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2e      	ldr	r2, [pc, #184]	; (8001b58 <HAL_DMA_IRQHandler+0x1b4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d04a      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2d      	ldr	r2, [pc, #180]	; (8001b5c <HAL_DMA_IRQHandler+0x1b8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d045      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2b      	ldr	r2, [pc, #172]	; (8001b60 <HAL_DMA_IRQHandler+0x1bc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d040      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <HAL_DMA_IRQHandler+0x1c0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d03b      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a28      	ldr	r2, [pc, #160]	; (8001b68 <HAL_DMA_IRQHandler+0x1c4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d036      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <HAL_DMA_IRQHandler+0x1c8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d031      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_DMA_IRQHandler+0x1cc>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d02c      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <HAL_DMA_IRQHandler+0x1d0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d027      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_DMA_IRQHandler+0x1d4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d022      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a21      	ldr	r2, [pc, #132]	; (8001b7c <HAL_DMA_IRQHandler+0x1d8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d01d      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_DMA_IRQHandler+0x1dc>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d018      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_DMA_IRQHandler+0x1e0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d013      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <HAL_DMA_IRQHandler+0x1e4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00e      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <HAL_DMA_IRQHandler+0x1e8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d009      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_DMA_IRQHandler+0x1ec>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d004      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x194>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <HAL_DMA_IRQHandler+0x1f0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d12f      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x1f4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	e02e      	b.n	8001bac <HAL_DMA_IRQHandler+0x208>
 8001b4e:	bf00      	nop
 8001b50:	24000324 	.word	0x24000324
 8001b54:	1b4e81b5 	.word	0x1b4e81b5
 8001b58:	40020010 	.word	0x40020010
 8001b5c:	40020028 	.word	0x40020028
 8001b60:	40020040 	.word	0x40020040
 8001b64:	40020058 	.word	0x40020058
 8001b68:	40020070 	.word	0x40020070
 8001b6c:	40020088 	.word	0x40020088
 8001b70:	400200a0 	.word	0x400200a0
 8001b74:	400200b8 	.word	0x400200b8
 8001b78:	40020410 	.word	0x40020410
 8001b7c:	40020428 	.word	0x40020428
 8001b80:	40020440 	.word	0x40020440
 8001b84:	40020458 	.word	0x40020458
 8001b88:	40020470 	.word	0x40020470
 8001b8c:	40020488 	.word	0x40020488
 8001b90:	400204a0 	.word	0x400204a0
 8001b94:	400204b8 	.word	0x400204b8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf14      	ite	ne
 8001ba6:	2301      	movne	r3, #1
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d015      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0204 	bic.w	r2, r2, #4
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2208      	movs	r2, #8
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	f043 0201 	orr.w	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d06e      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a69      	ldr	r2, [pc, #420]	; (8001d9c <HAL_DMA_IRQHandler+0x3f8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d04a      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a67      	ldr	r2, [pc, #412]	; (8001da0 <HAL_DMA_IRQHandler+0x3fc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d045      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a66      	ldr	r2, [pc, #408]	; (8001da4 <HAL_DMA_IRQHandler+0x400>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d040      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a64      	ldr	r2, [pc, #400]	; (8001da8 <HAL_DMA_IRQHandler+0x404>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d03b      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a63      	ldr	r2, [pc, #396]	; (8001dac <HAL_DMA_IRQHandler+0x408>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d036      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a61      	ldr	r2, [pc, #388]	; (8001db0 <HAL_DMA_IRQHandler+0x40c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d031      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a60      	ldr	r2, [pc, #384]	; (8001db4 <HAL_DMA_IRQHandler+0x410>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d02c      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a5e      	ldr	r2, [pc, #376]	; (8001db8 <HAL_DMA_IRQHandler+0x414>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d027      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a5d      	ldr	r2, [pc, #372]	; (8001dbc <HAL_DMA_IRQHandler+0x418>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d022      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a5b      	ldr	r2, [pc, #364]	; (8001dc0 <HAL_DMA_IRQHandler+0x41c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01d      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a5a      	ldr	r2, [pc, #360]	; (8001dc4 <HAL_DMA_IRQHandler+0x420>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d018      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_DMA_IRQHandler+0x424>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <HAL_DMA_IRQHandler+0x428>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00e      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a55      	ldr	r2, [pc, #340]	; (8001dd0 <HAL_DMA_IRQHandler+0x42c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d009      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a54      	ldr	r2, [pc, #336]	; (8001dd4 <HAL_DMA_IRQHandler+0x430>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d004      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ee>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a52      	ldr	r2, [pc, #328]	; (8001dd8 <HAL_DMA_IRQHandler+0x434>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10a      	bne.n	8001ca8 <HAL_DMA_IRQHandler+0x304>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e003      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x30c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	f043 0202 	orr.w	r2, r3, #2
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2204      	movs	r2, #4
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 808f 	beq.w	8001e04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <HAL_DMA_IRQHandler+0x3f8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d04a      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <HAL_DMA_IRQHandler+0x3fc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d045      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <HAL_DMA_IRQHandler+0x400>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d040      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <HAL_DMA_IRQHandler+0x404>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d03b      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a26      	ldr	r2, [pc, #152]	; (8001dac <HAL_DMA_IRQHandler+0x408>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d036      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <HAL_DMA_IRQHandler+0x40c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d031      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_DMA_IRQHandler+0x410>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d02c      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <HAL_DMA_IRQHandler+0x414>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d027      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <HAL_DMA_IRQHandler+0x418>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_DMA_IRQHandler+0x41c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01d      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <HAL_DMA_IRQHandler+0x420>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d018      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_DMA_IRQHandler+0x424>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <HAL_DMA_IRQHandler+0x428>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00e      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_DMA_IRQHandler+0x42c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_DMA_IRQHandler+0x430>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d004      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x3e2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_DMA_IRQHandler+0x434>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d12a      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x438>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	e023      	b.n	8001de4 <HAL_DMA_IRQHandler+0x440>
 8001d9c:	40020010 	.word	0x40020010
 8001da0:	40020028 	.word	0x40020028
 8001da4:	40020040 	.word	0x40020040
 8001da8:	40020058 	.word	0x40020058
 8001dac:	40020070 	.word	0x40020070
 8001db0:	40020088 	.word	0x40020088
 8001db4:	400200a0 	.word	0x400200a0
 8001db8:	400200b8 	.word	0x400200b8
 8001dbc:	40020410 	.word	0x40020410
 8001dc0:	40020428 	.word	0x40020428
 8001dc4:	40020440 	.word	0x40020440
 8001dc8:	40020458 	.word	0x40020458
 8001dcc:	40020470 	.word	0x40020470
 8001dd0:	40020488 	.word	0x40020488
 8001dd4:	400204a0 	.word	0x400204a0
 8001dd8:	400204b8 	.word	0x400204b8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00d      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	2204      	movs	r2, #4
 8001df2:	409a      	lsls	r2, r3
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f043 0204 	orr.w	r2, r3, #4
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80a6 	beq.w	8001f66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a85      	ldr	r2, [pc, #532]	; (8002034 <HAL_DMA_IRQHandler+0x690>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d04a      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a83      	ldr	r2, [pc, #524]	; (8002038 <HAL_DMA_IRQHandler+0x694>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d045      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a82      	ldr	r2, [pc, #520]	; (800203c <HAL_DMA_IRQHandler+0x698>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d040      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a80      	ldr	r2, [pc, #512]	; (8002040 <HAL_DMA_IRQHandler+0x69c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d03b      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7f      	ldr	r2, [pc, #508]	; (8002044 <HAL_DMA_IRQHandler+0x6a0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d036      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a7d      	ldr	r2, [pc, #500]	; (8002048 <HAL_DMA_IRQHandler+0x6a4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7c      	ldr	r2, [pc, #496]	; (800204c <HAL_DMA_IRQHandler+0x6a8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d02c      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7a      	ldr	r2, [pc, #488]	; (8002050 <HAL_DMA_IRQHandler+0x6ac>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d027      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a79      	ldr	r2, [pc, #484]	; (8002054 <HAL_DMA_IRQHandler+0x6b0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d022      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a77      	ldr	r2, [pc, #476]	; (8002058 <HAL_DMA_IRQHandler+0x6b4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01d      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a76      	ldr	r2, [pc, #472]	; (800205c <HAL_DMA_IRQHandler+0x6b8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d018      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a74      	ldr	r2, [pc, #464]	; (8002060 <HAL_DMA_IRQHandler+0x6bc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a73      	ldr	r2, [pc, #460]	; (8002064 <HAL_DMA_IRQHandler+0x6c0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00e      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a71      	ldr	r2, [pc, #452]	; (8002068 <HAL_DMA_IRQHandler+0x6c4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a70      	ldr	r2, [pc, #448]	; (800206c <HAL_DMA_IRQHandler+0x6c8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_DMA_IRQHandler+0x516>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6e      	ldr	r2, [pc, #440]	; (8002070 <HAL_DMA_IRQHandler+0x6cc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10a      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x52c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf14      	ite	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	2300      	moveq	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	e009      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x540>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf14      	ite	ne
 8001ede:	2301      	movne	r3, #1
 8001ee0:	2300      	moveq	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03e      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d018      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d108      	bne.n	8001f26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d024      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	e01f      	b.n	8001f66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01b      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
 8001f36:	e016      	b.n	8001f66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0208 	bic.w	r2, r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2220      	movs	r2, #32
 8001f70:	409a      	lsls	r2, r3
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8110 	beq.w	800219c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <HAL_DMA_IRQHandler+0x690>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d04a      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2b      	ldr	r2, [pc, #172]	; (8002038 <HAL_DMA_IRQHandler+0x694>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d045      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a29      	ldr	r2, [pc, #164]	; (800203c <HAL_DMA_IRQHandler+0x698>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d040      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_DMA_IRQHandler+0x69c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d03b      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <HAL_DMA_IRQHandler+0x6a0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d036      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a25      	ldr	r2, [pc, #148]	; (8002048 <HAL_DMA_IRQHandler+0x6a4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d031      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a23      	ldr	r2, [pc, #140]	; (800204c <HAL_DMA_IRQHandler+0x6a8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02c      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_DMA_IRQHandler+0x6ac>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d027      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <HAL_DMA_IRQHandler+0x6b0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d022      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_DMA_IRQHandler+0x6b4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d01d      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_DMA_IRQHandler+0x6b8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d018      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_DMA_IRQHandler+0x6bc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <HAL_DMA_IRQHandler+0x6c0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00e      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_DMA_IRQHandler+0x6c4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d009      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_DMA_IRQHandler+0x6c8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d004      	beq.n	800201c <HAL_DMA_IRQHandler+0x678>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_DMA_IRQHandler+0x6cc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d12b      	bne.n	8002074 <HAL_DMA_IRQHandler+0x6d0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf14      	ite	ne
 800202a:	2301      	movne	r3, #1
 800202c:	2300      	moveq	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	e02a      	b.n	8002088 <HAL_DMA_IRQHandler+0x6e4>
 8002032:	bf00      	nop
 8002034:	40020010 	.word	0x40020010
 8002038:	40020028 	.word	0x40020028
 800203c:	40020040 	.word	0x40020040
 8002040:	40020058 	.word	0x40020058
 8002044:	40020070 	.word	0x40020070
 8002048:	40020088 	.word	0x40020088
 800204c:	400200a0 	.word	0x400200a0
 8002050:	400200b8 	.word	0x400200b8
 8002054:	40020410 	.word	0x40020410
 8002058:	40020428 	.word	0x40020428
 800205c:	40020440 	.word	0x40020440
 8002060:	40020458 	.word	0x40020458
 8002064:	40020470 	.word	0x40020470
 8002068:	40020488 	.word	0x40020488
 800206c:	400204a0 	.word	0x400204a0
 8002070:	400204b8 	.word	0x400204b8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8087 	beq.w	800219c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2220      	movs	r2, #32
 8002098:	409a      	lsls	r2, r3
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d139      	bne.n	800211e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0216 	bic.w	r2, r2, #22
 80020b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d103      	bne.n	80020da <HAL_DMA_IRQHandler+0x736>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0208 	bic.w	r2, r2, #8
 80020e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	223f      	movs	r2, #63	; 0x3f
 80020f4:	409a      	lsls	r2, r3
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 834a 	beq.w	80027a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
          }
          return;
 800211c:	e344      	b.n	80027a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d018      	beq.n	800215e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d108      	bne.n	800214c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	2b00      	cmp	r3, #0
 8002140:	d02c      	beq.n	800219c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4798      	blx	r3
 800214a:	e027      	b.n	800219c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d023      	beq.n	800219c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
 800215c:	e01e      	b.n	800219c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10f      	bne.n	800218c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0210 	bic.w	r2, r2, #16
 800217a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8306 	beq.w	80027b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8088 	beq.w	80022c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2204      	movs	r2, #4
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a7a      	ldr	r2, [pc, #488]	; (80023ac <HAL_DMA_IRQHandler+0xa08>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04a      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a79      	ldr	r2, [pc, #484]	; (80023b0 <HAL_DMA_IRQHandler+0xa0c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d045      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a77      	ldr	r2, [pc, #476]	; (80023b4 <HAL_DMA_IRQHandler+0xa10>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d040      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a76      	ldr	r2, [pc, #472]	; (80023b8 <HAL_DMA_IRQHandler+0xa14>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d03b      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a74      	ldr	r2, [pc, #464]	; (80023bc <HAL_DMA_IRQHandler+0xa18>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d036      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a73      	ldr	r2, [pc, #460]	; (80023c0 <HAL_DMA_IRQHandler+0xa1c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d031      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a71      	ldr	r2, [pc, #452]	; (80023c4 <HAL_DMA_IRQHandler+0xa20>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02c      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a70      	ldr	r2, [pc, #448]	; (80023c8 <HAL_DMA_IRQHandler+0xa24>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d027      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6e      	ldr	r2, [pc, #440]	; (80023cc <HAL_DMA_IRQHandler+0xa28>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d022      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6d      	ldr	r2, [pc, #436]	; (80023d0 <HAL_DMA_IRQHandler+0xa2c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d01d      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <HAL_DMA_IRQHandler+0xa30>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d018      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6a      	ldr	r2, [pc, #424]	; (80023d8 <HAL_DMA_IRQHandler+0xa34>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d013      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a68      	ldr	r2, [pc, #416]	; (80023dc <HAL_DMA_IRQHandler+0xa38>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00e      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a67      	ldr	r2, [pc, #412]	; (80023e0 <HAL_DMA_IRQHandler+0xa3c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d009      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_DMA_IRQHandler+0xa40>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_DMA_IRQHandler+0x8b8>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a64      	ldr	r2, [pc, #400]	; (80023e8 <HAL_DMA_IRQHandler+0xa44>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d108      	bne.n	800226e <HAL_DMA_IRQHandler+0x8ca>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e007      	b.n	800227e <HAL_DMA_IRQHandler+0x8da>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3301      	adds	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	429a      	cmp	r2, r3
 8002288:	d307      	bcc.n	800229a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f2      	bne.n	800227e <HAL_DMA_IRQHandler+0x8da>
 8002298:	e000      	b.n	800229c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800229a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2203      	movs	r2, #3
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80022b2:	e003      	b.n	80022bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8272 	beq.w	80027b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
 80022d6:	e26c      	b.n	80027b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a43      	ldr	r2, [pc, #268]	; (80023ec <HAL_DMA_IRQHandler+0xa48>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d022      	beq.n	8002328 <HAL_DMA_IRQHandler+0x984>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a42      	ldr	r2, [pc, #264]	; (80023f0 <HAL_DMA_IRQHandler+0xa4c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d01d      	beq.n	8002328 <HAL_DMA_IRQHandler+0x984>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a40      	ldr	r2, [pc, #256]	; (80023f4 <HAL_DMA_IRQHandler+0xa50>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d018      	beq.n	8002328 <HAL_DMA_IRQHandler+0x984>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a3f      	ldr	r2, [pc, #252]	; (80023f8 <HAL_DMA_IRQHandler+0xa54>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <HAL_DMA_IRQHandler+0x984>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <HAL_DMA_IRQHandler+0xa58>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00e      	beq.n	8002328 <HAL_DMA_IRQHandler+0x984>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <HAL_DMA_IRQHandler+0xa5c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d009      	beq.n	8002328 <HAL_DMA_IRQHandler+0x984>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3a      	ldr	r2, [pc, #232]	; (8002404 <HAL_DMA_IRQHandler+0xa60>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_DMA_IRQHandler+0x984>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a39      	ldr	r2, [pc, #228]	; (8002408 <HAL_DMA_IRQHandler+0xa64>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_DMA_IRQHandler+0x988>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_DMA_IRQHandler+0x98a>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 823f 	beq.w	80027b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2204      	movs	r2, #4
 8002346:	409a      	lsls	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80cd 	beq.w	80024ec <HAL_DMA_IRQHandler+0xb48>
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80c7 	beq.w	80024ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2204      	movs	r2, #4
 8002368:	409a      	lsls	r2, r3
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d049      	beq.n	800240c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8210 	beq.w	80027ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002394:	e20a      	b.n	80027ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8206 	beq.w	80027ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023a8:	e200      	b.n	80027ac <HAL_DMA_IRQHandler+0xe08>
 80023aa:	bf00      	nop
 80023ac:	40020010 	.word	0x40020010
 80023b0:	40020028 	.word	0x40020028
 80023b4:	40020040 	.word	0x40020040
 80023b8:	40020058 	.word	0x40020058
 80023bc:	40020070 	.word	0x40020070
 80023c0:	40020088 	.word	0x40020088
 80023c4:	400200a0 	.word	0x400200a0
 80023c8:	400200b8 	.word	0x400200b8
 80023cc:	40020410 	.word	0x40020410
 80023d0:	40020428 	.word	0x40020428
 80023d4:	40020440 	.word	0x40020440
 80023d8:	40020458 	.word	0x40020458
 80023dc:	40020470 	.word	0x40020470
 80023e0:	40020488 	.word	0x40020488
 80023e4:	400204a0 	.word	0x400204a0
 80023e8:	400204b8 	.word	0x400204b8
 80023ec:	58025408 	.word	0x58025408
 80023f0:	5802541c 	.word	0x5802541c
 80023f4:	58025430 	.word	0x58025430
 80023f8:	58025444 	.word	0x58025444
 80023fc:	58025458 	.word	0x58025458
 8002400:	5802546c 	.word	0x5802546c
 8002404:	58025480 	.word	0x58025480
 8002408:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d160      	bne.n	80024d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a7f      	ldr	r2, [pc, #508]	; (8002618 <HAL_DMA_IRQHandler+0xc74>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d04a      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a7d      	ldr	r2, [pc, #500]	; (800261c <HAL_DMA_IRQHandler+0xc78>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d045      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7c      	ldr	r2, [pc, #496]	; (8002620 <HAL_DMA_IRQHandler+0xc7c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d040      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a7a      	ldr	r2, [pc, #488]	; (8002624 <HAL_DMA_IRQHandler+0xc80>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d03b      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a79      	ldr	r2, [pc, #484]	; (8002628 <HAL_DMA_IRQHandler+0xc84>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d036      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a77      	ldr	r2, [pc, #476]	; (800262c <HAL_DMA_IRQHandler+0xc88>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d031      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a76      	ldr	r2, [pc, #472]	; (8002630 <HAL_DMA_IRQHandler+0xc8c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d02c      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a74      	ldr	r2, [pc, #464]	; (8002634 <HAL_DMA_IRQHandler+0xc90>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d027      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a73      	ldr	r2, [pc, #460]	; (8002638 <HAL_DMA_IRQHandler+0xc94>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a71      	ldr	r2, [pc, #452]	; (800263c <HAL_DMA_IRQHandler+0xc98>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d01d      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a70      	ldr	r2, [pc, #448]	; (8002640 <HAL_DMA_IRQHandler+0xc9c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d018      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a6e      	ldr	r2, [pc, #440]	; (8002644 <HAL_DMA_IRQHandler+0xca0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6d      	ldr	r2, [pc, #436]	; (8002648 <HAL_DMA_IRQHandler+0xca4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00e      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a6b      	ldr	r2, [pc, #428]	; (800264c <HAL_DMA_IRQHandler+0xca8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6a      	ldr	r2, [pc, #424]	; (8002650 <HAL_DMA_IRQHandler+0xcac>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d004      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xb12>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a68      	ldr	r2, [pc, #416]	; (8002654 <HAL_DMA_IRQHandler+0xcb0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d108      	bne.n	80024c8 <HAL_DMA_IRQHandler+0xb24>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0208 	bic.w	r2, r2, #8
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e007      	b.n	80024d8 <HAL_DMA_IRQHandler+0xb34>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8165 	beq.w	80027ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024ea:	e15f      	b.n	80027ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2202      	movs	r2, #2
 80024f6:	409a      	lsls	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80c5 	beq.w	800268c <HAL_DMA_IRQHandler+0xce8>
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80bf 	beq.w	800268c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2202      	movs	r2, #2
 8002518:	409a      	lsls	r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d018      	beq.n	800255a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 813a 	beq.w	80027b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002544:	e134      	b.n	80027b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8130 	beq.w	80027b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002558:	e12a      	b.n	80027b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b00      	cmp	r3, #0
 8002562:	f040 8089 	bne.w	8002678 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2b      	ldr	r2, [pc, #172]	; (8002618 <HAL_DMA_IRQHandler+0xc74>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04a      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a29      	ldr	r2, [pc, #164]	; (800261c <HAL_DMA_IRQHandler+0xc78>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a28      	ldr	r2, [pc, #160]	; (8002620 <HAL_DMA_IRQHandler+0xc7c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d040      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <HAL_DMA_IRQHandler+0xc80>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d03b      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a25      	ldr	r2, [pc, #148]	; (8002628 <HAL_DMA_IRQHandler+0xc84>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d036      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_DMA_IRQHandler+0xc88>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a22      	ldr	r2, [pc, #136]	; (8002630 <HAL_DMA_IRQHandler+0xc8c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d02c      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a20      	ldr	r2, [pc, #128]	; (8002634 <HAL_DMA_IRQHandler+0xc90>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d027      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <HAL_DMA_IRQHandler+0xc94>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_DMA_IRQHandler+0xc98>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_DMA_IRQHandler+0xc9c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <HAL_DMA_IRQHandler+0xca0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_DMA_IRQHandler+0xca4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_DMA_IRQHandler+0xca8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a16      	ldr	r2, [pc, #88]	; (8002650 <HAL_DMA_IRQHandler+0xcac>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_IRQHandler+0xc62>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_DMA_IRQHandler+0xcb0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d128      	bne.n	8002658 <HAL_DMA_IRQHandler+0xcb4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0214 	bic.w	r2, r2, #20
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e027      	b.n	8002668 <HAL_DMA_IRQHandler+0xcc4>
 8002618:	40020010 	.word	0x40020010
 800261c:	40020028 	.word	0x40020028
 8002620:	40020040 	.word	0x40020040
 8002624:	40020058 	.word	0x40020058
 8002628:	40020070 	.word	0x40020070
 800262c:	40020088 	.word	0x40020088
 8002630:	400200a0 	.word	0x400200a0
 8002634:	400200b8 	.word	0x400200b8
 8002638:	40020410 	.word	0x40020410
 800263c:	40020428 	.word	0x40020428
 8002640:	40020440 	.word	0x40020440
 8002644:	40020458 	.word	0x40020458
 8002648:	40020470 	.word	0x40020470
 800264c:	40020488 	.word	0x40020488
 8002650:	400204a0 	.word	0x400204a0
 8002654:	400204b8 	.word	0x400204b8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 020a 	bic.w	r2, r2, #10
 8002666:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8097 	beq.w	80027b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800268a:	e091      	b.n	80027b0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2208      	movs	r2, #8
 8002696:	409a      	lsls	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8088 	beq.w	80027b2 <HAL_DMA_IRQHandler+0xe0e>
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8082 	beq.w	80027b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a41      	ldr	r2, [pc, #260]	; (80027b8 <HAL_DMA_IRQHandler+0xe14>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d04a      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a3f      	ldr	r2, [pc, #252]	; (80027bc <HAL_DMA_IRQHandler+0xe18>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d045      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a3e      	ldr	r2, [pc, #248]	; (80027c0 <HAL_DMA_IRQHandler+0xe1c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d040      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a3c      	ldr	r2, [pc, #240]	; (80027c4 <HAL_DMA_IRQHandler+0xe20>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d03b      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <HAL_DMA_IRQHandler+0xe24>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d036      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a39      	ldr	r2, [pc, #228]	; (80027cc <HAL_DMA_IRQHandler+0xe28>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d031      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a38      	ldr	r2, [pc, #224]	; (80027d0 <HAL_DMA_IRQHandler+0xe2c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d02c      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a36      	ldr	r2, [pc, #216]	; (80027d4 <HAL_DMA_IRQHandler+0xe30>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d027      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a35      	ldr	r2, [pc, #212]	; (80027d8 <HAL_DMA_IRQHandler+0xe34>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d022      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a33      	ldr	r2, [pc, #204]	; (80027dc <HAL_DMA_IRQHandler+0xe38>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01d      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <HAL_DMA_IRQHandler+0xe3c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d018      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a30      	ldr	r2, [pc, #192]	; (80027e4 <HAL_DMA_IRQHandler+0xe40>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2f      	ldr	r2, [pc, #188]	; (80027e8 <HAL_DMA_IRQHandler+0xe44>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00e      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2d      	ldr	r2, [pc, #180]	; (80027ec <HAL_DMA_IRQHandler+0xe48>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d009      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2c      	ldr	r2, [pc, #176]	; (80027f0 <HAL_DMA_IRQHandler+0xe4c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d004      	beq.n	800274e <HAL_DMA_IRQHandler+0xdaa>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a2a      	ldr	r2, [pc, #168]	; (80027f4 <HAL_DMA_IRQHandler+0xe50>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d108      	bne.n	8002760 <HAL_DMA_IRQHandler+0xdbc>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 021c 	bic.w	r2, r2, #28
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e007      	b.n	8002770 <HAL_DMA_IRQHandler+0xdcc>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 020e 	bic.w	r2, r2, #14
 800276e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2201      	movs	r2, #1
 800277a:	409a      	lsls	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
 80027a6:	e004      	b.n	80027b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80027a8:	bf00      	nop
 80027aa:	e002      	b.n	80027b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80027b2:	3728      	adds	r7, #40	; 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40020010 	.word	0x40020010
 80027bc:	40020028 	.word	0x40020028
 80027c0:	40020040 	.word	0x40020040
 80027c4:	40020058 	.word	0x40020058
 80027c8:	40020070 	.word	0x40020070
 80027cc:	40020088 	.word	0x40020088
 80027d0:	400200a0 	.word	0x400200a0
 80027d4:	400200b8 	.word	0x400200b8
 80027d8:	40020410 	.word	0x40020410
 80027dc:	40020428 	.word	0x40020428
 80027e0:	40020440 	.word	0x40020440
 80027e4:	40020458 	.word	0x40020458
 80027e8:	40020470 	.word	0x40020470
 80027ec:	40020488 	.word	0x40020488
 80027f0:	400204a0 	.word	0x400204a0
 80027f4:	400204b8 	.word	0x400204b8

080027f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7f      	ldr	r2, [pc, #508]	; (8002a14 <DMA_SetConfig+0x21c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d072      	beq.n	8002902 <DMA_SetConfig+0x10a>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a7d      	ldr	r2, [pc, #500]	; (8002a18 <DMA_SetConfig+0x220>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d06d      	beq.n	8002902 <DMA_SetConfig+0x10a>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7c      	ldr	r2, [pc, #496]	; (8002a1c <DMA_SetConfig+0x224>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d068      	beq.n	8002902 <DMA_SetConfig+0x10a>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a7a      	ldr	r2, [pc, #488]	; (8002a20 <DMA_SetConfig+0x228>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d063      	beq.n	8002902 <DMA_SetConfig+0x10a>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a79      	ldr	r2, [pc, #484]	; (8002a24 <DMA_SetConfig+0x22c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d05e      	beq.n	8002902 <DMA_SetConfig+0x10a>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a77      	ldr	r2, [pc, #476]	; (8002a28 <DMA_SetConfig+0x230>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d059      	beq.n	8002902 <DMA_SetConfig+0x10a>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a76      	ldr	r2, [pc, #472]	; (8002a2c <DMA_SetConfig+0x234>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d054      	beq.n	8002902 <DMA_SetConfig+0x10a>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a74      	ldr	r2, [pc, #464]	; (8002a30 <DMA_SetConfig+0x238>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d04f      	beq.n	8002902 <DMA_SetConfig+0x10a>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a73      	ldr	r2, [pc, #460]	; (8002a34 <DMA_SetConfig+0x23c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d04a      	beq.n	8002902 <DMA_SetConfig+0x10a>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a71      	ldr	r2, [pc, #452]	; (8002a38 <DMA_SetConfig+0x240>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d045      	beq.n	8002902 <DMA_SetConfig+0x10a>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a70      	ldr	r2, [pc, #448]	; (8002a3c <DMA_SetConfig+0x244>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d040      	beq.n	8002902 <DMA_SetConfig+0x10a>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <DMA_SetConfig+0x248>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d03b      	beq.n	8002902 <DMA_SetConfig+0x10a>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6d      	ldr	r2, [pc, #436]	; (8002a44 <DMA_SetConfig+0x24c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d036      	beq.n	8002902 <DMA_SetConfig+0x10a>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6b      	ldr	r2, [pc, #428]	; (8002a48 <DMA_SetConfig+0x250>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d031      	beq.n	8002902 <DMA_SetConfig+0x10a>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6a      	ldr	r2, [pc, #424]	; (8002a4c <DMA_SetConfig+0x254>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d02c      	beq.n	8002902 <DMA_SetConfig+0x10a>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a68      	ldr	r2, [pc, #416]	; (8002a50 <DMA_SetConfig+0x258>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d027      	beq.n	8002902 <DMA_SetConfig+0x10a>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a67      	ldr	r2, [pc, #412]	; (8002a54 <DMA_SetConfig+0x25c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d022      	beq.n	8002902 <DMA_SetConfig+0x10a>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a65      	ldr	r2, [pc, #404]	; (8002a58 <DMA_SetConfig+0x260>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01d      	beq.n	8002902 <DMA_SetConfig+0x10a>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a64      	ldr	r2, [pc, #400]	; (8002a5c <DMA_SetConfig+0x264>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d018      	beq.n	8002902 <DMA_SetConfig+0x10a>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a62      	ldr	r2, [pc, #392]	; (8002a60 <DMA_SetConfig+0x268>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <DMA_SetConfig+0x10a>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a61      	ldr	r2, [pc, #388]	; (8002a64 <DMA_SetConfig+0x26c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00e      	beq.n	8002902 <DMA_SetConfig+0x10a>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a5f      	ldr	r2, [pc, #380]	; (8002a68 <DMA_SetConfig+0x270>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <DMA_SetConfig+0x10a>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5e      	ldr	r2, [pc, #376]	; (8002a6c <DMA_SetConfig+0x274>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <DMA_SetConfig+0x10a>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5c      	ldr	r2, [pc, #368]	; (8002a70 <DMA_SetConfig+0x278>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d101      	bne.n	8002906 <DMA_SetConfig+0x10e>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <DMA_SetConfig+0x110>
 8002906:	2300      	movs	r3, #0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002914:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002926:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a39      	ldr	r2, [pc, #228]	; (8002a14 <DMA_SetConfig+0x21c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d04a      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a38      	ldr	r2, [pc, #224]	; (8002a18 <DMA_SetConfig+0x220>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d045      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a36      	ldr	r2, [pc, #216]	; (8002a1c <DMA_SetConfig+0x224>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d040      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a35      	ldr	r2, [pc, #212]	; (8002a20 <DMA_SetConfig+0x228>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d03b      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <DMA_SetConfig+0x22c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d036      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a32      	ldr	r2, [pc, #200]	; (8002a28 <DMA_SetConfig+0x230>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d031      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a30      	ldr	r2, [pc, #192]	; (8002a2c <DMA_SetConfig+0x234>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02c      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <DMA_SetConfig+0x238>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d027      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2d      	ldr	r2, [pc, #180]	; (8002a34 <DMA_SetConfig+0x23c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d022      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2c      	ldr	r2, [pc, #176]	; (8002a38 <DMA_SetConfig+0x240>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d01d      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <DMA_SetConfig+0x244>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d018      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a29      	ldr	r2, [pc, #164]	; (8002a40 <DMA_SetConfig+0x248>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <DMA_SetConfig+0x24c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00e      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <DMA_SetConfig+0x250>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <DMA_SetConfig+0x254>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <DMA_SetConfig+0x1d0>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <DMA_SetConfig+0x258>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d101      	bne.n	80029cc <DMA_SetConfig+0x1d4>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <DMA_SetConfig+0x1d6>
 80029cc:	2300      	movs	r3, #0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d059      	beq.n	8002a86 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	223f      	movs	r2, #63	; 0x3f
 80029dc:	409a      	lsls	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b40      	cmp	r3, #64	; 0x40
 8002a00:	d138      	bne.n	8002a74 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002a12:	e086      	b.n	8002b22 <DMA_SetConfig+0x32a>
 8002a14:	40020010 	.word	0x40020010
 8002a18:	40020028 	.word	0x40020028
 8002a1c:	40020040 	.word	0x40020040
 8002a20:	40020058 	.word	0x40020058
 8002a24:	40020070 	.word	0x40020070
 8002a28:	40020088 	.word	0x40020088
 8002a2c:	400200a0 	.word	0x400200a0
 8002a30:	400200b8 	.word	0x400200b8
 8002a34:	40020410 	.word	0x40020410
 8002a38:	40020428 	.word	0x40020428
 8002a3c:	40020440 	.word	0x40020440
 8002a40:	40020458 	.word	0x40020458
 8002a44:	40020470 	.word	0x40020470
 8002a48:	40020488 	.word	0x40020488
 8002a4c:	400204a0 	.word	0x400204a0
 8002a50:	400204b8 	.word	0x400204b8
 8002a54:	58025408 	.word	0x58025408
 8002a58:	5802541c 	.word	0x5802541c
 8002a5c:	58025430 	.word	0x58025430
 8002a60:	58025444 	.word	0x58025444
 8002a64:	58025458 	.word	0x58025458
 8002a68:	5802546c 	.word	0x5802546c
 8002a6c:	58025480 	.word	0x58025480
 8002a70:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
}
 8002a84:	e04d      	b.n	8002b22 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a29      	ldr	r2, [pc, #164]	; (8002b30 <DMA_SetConfig+0x338>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <DMA_SetConfig+0x2de>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <DMA_SetConfig+0x33c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01d      	beq.n	8002ad6 <DMA_SetConfig+0x2de>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a26      	ldr	r2, [pc, #152]	; (8002b38 <DMA_SetConfig+0x340>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d018      	beq.n	8002ad6 <DMA_SetConfig+0x2de>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a24      	ldr	r2, [pc, #144]	; (8002b3c <DMA_SetConfig+0x344>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <DMA_SetConfig+0x2de>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <DMA_SetConfig+0x348>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <DMA_SetConfig+0x2de>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a21      	ldr	r2, [pc, #132]	; (8002b44 <DMA_SetConfig+0x34c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <DMA_SetConfig+0x2de>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <DMA_SetConfig+0x350>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <DMA_SetConfig+0x2de>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <DMA_SetConfig+0x354>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <DMA_SetConfig+0x2e2>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <DMA_SetConfig+0x2e4>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d108      	bne.n	8002b12 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
}
 8002b10:	e007      	b.n	8002b22 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	60da      	str	r2, [r3, #12]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	58025408 	.word	0x58025408
 8002b34:	5802541c 	.word	0x5802541c
 8002b38:	58025430 	.word	0x58025430
 8002b3c:	58025444 	.word	0x58025444
 8002b40:	58025458 	.word	0x58025458
 8002b44:	5802546c 	.word	0x5802546c
 8002b48:	58025480 	.word	0x58025480
 8002b4c:	58025494 	.word	0x58025494

08002b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <DMA_CalcBaseAndBitshift+0x118>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d04a      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a41      	ldr	r2, [pc, #260]	; (8002c6c <DMA_CalcBaseAndBitshift+0x11c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d045      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <DMA_CalcBaseAndBitshift+0x120>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d040      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <DMA_CalcBaseAndBitshift+0x124>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d03b      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3c      	ldr	r2, [pc, #240]	; (8002c78 <DMA_CalcBaseAndBitshift+0x128>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d036      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3b      	ldr	r2, [pc, #236]	; (8002c7c <DMA_CalcBaseAndBitshift+0x12c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d031      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a39      	ldr	r2, [pc, #228]	; (8002c80 <DMA_CalcBaseAndBitshift+0x130>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d02c      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <DMA_CalcBaseAndBitshift+0x134>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d027      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a36      	ldr	r2, [pc, #216]	; (8002c88 <DMA_CalcBaseAndBitshift+0x138>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d022      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a35      	ldr	r2, [pc, #212]	; (8002c8c <DMA_CalcBaseAndBitshift+0x13c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d01d      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a33      	ldr	r2, [pc, #204]	; (8002c90 <DMA_CalcBaseAndBitshift+0x140>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d018      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a32      	ldr	r2, [pc, #200]	; (8002c94 <DMA_CalcBaseAndBitshift+0x144>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a30      	ldr	r2, [pc, #192]	; (8002c98 <DMA_CalcBaseAndBitshift+0x148>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00e      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <DMA_CalcBaseAndBitshift+0x14c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d009      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2d      	ldr	r2, [pc, #180]	; (8002ca0 <DMA_CalcBaseAndBitshift+0x150>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d004      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x154>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <DMA_CalcBaseAndBitshift+0xac>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <DMA_CalcBaseAndBitshift+0xae>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d024      	beq.n	8002c4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3b10      	subs	r3, #16
 8002c0a:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <DMA_CalcBaseAndBitshift+0x158>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	4a24      	ldr	r2, [pc, #144]	; (8002cac <DMA_CalcBaseAndBitshift+0x15c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d908      	bls.n	8002c3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x160>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	1d1a      	adds	r2, r3, #4
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58
 8002c3a:	e00d      	b.n	8002c58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x160>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4a:	e005      	b.n	8002c58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	40020028 	.word	0x40020028
 8002c70:	40020040 	.word	0x40020040
 8002c74:	40020058 	.word	0x40020058
 8002c78:	40020070 	.word	0x40020070
 8002c7c:	40020088 	.word	0x40020088
 8002c80:	400200a0 	.word	0x400200a0
 8002c84:	400200b8 	.word	0x400200b8
 8002c88:	40020410 	.word	0x40020410
 8002c8c:	40020428 	.word	0x40020428
 8002c90:	40020440 	.word	0x40020440
 8002c94:	40020458 	.word	0x40020458
 8002c98:	40020470 	.word	0x40020470
 8002c9c:	40020488 	.word	0x40020488
 8002ca0:	400204a0 	.word	0x400204a0
 8002ca4:	400204b8 	.word	0x400204b8
 8002ca8:	aaaaaaab 	.word	0xaaaaaaab
 8002cac:	08005a58 	.word	0x08005a58
 8002cb0:	fffffc00 	.word	0xfffffc00

08002cb4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d120      	bne.n	8002d0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d858      	bhi.n	8002d82 <DMA_CheckFifoParam+0xce>
 8002cd0:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <DMA_CheckFifoParam+0x24>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cfb 	.word	0x08002cfb
 8002ce0:	08002ce9 	.word	0x08002ce9
 8002ce4:	08002d83 	.word	0x08002d83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d048      	beq.n	8002d86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002cf8:	e045      	b.n	8002d86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d02:	d142      	bne.n	8002d8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d08:	e03f      	b.n	8002d8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d12:	d123      	bne.n	8002d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d838      	bhi.n	8002d8e <DMA_CheckFifoParam+0xda>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <DMA_CheckFifoParam+0x70>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d3b 	.word	0x08002d3b
 8002d2c:	08002d35 	.word	0x08002d35
 8002d30:	08002d4d 	.word	0x08002d4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
        break;
 8002d38:	e030      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d025      	beq.n	8002d92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d4a:	e022      	b.n	8002d92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d54:	d11f      	bne.n	8002d96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d5a:	e01c      	b.n	8002d96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d902      	bls.n	8002d6a <DMA_CheckFifoParam+0xb6>
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d003      	beq.n	8002d70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002d68:	e018      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d6e:	e015      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8002d80:	e00b      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
        break;
 8002d82:	bf00      	nop
 8002d84:	e00a      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d86:	bf00      	nop
 8002d88:	e008      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d8a:	bf00      	nop
 8002d8c:	e006      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d8e:	bf00      	nop
 8002d90:	e004      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
    break;
 8002d9a:	bf00      	nop
    }
  }

  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a38      	ldr	r2, [pc, #224]	; (8002ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a36      	ldr	r2, [pc, #216]	; (8002ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a35      	ldr	r2, [pc, #212]	; (8002ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a33      	ldr	r2, [pc, #204]	; (8002eac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a32      	ldr	r2, [pc, #200]	; (8002eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a30      	ldr	r2, [pc, #192]	; (8002eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2f      	ldr	r2, [pc, #188]	; (8002eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01a      	beq.n	8002e4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3b08      	subs	r3, #8
 8002e1c:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002e38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2201      	movs	r2, #1
 8002e42:	409a      	lsls	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002e48:	e024      	b.n	8002e94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	3b10      	subs	r3, #16
 8002e52:	4a1e      	ldr	r2, [pc, #120]	; (8002ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d806      	bhi.n	8002e72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d902      	bls.n	8002e72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3308      	adds	r3, #8
 8002e70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002e84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	58025408 	.word	0x58025408
 8002ea4:	5802541c 	.word	0x5802541c
 8002ea8:	58025430 	.word	0x58025430
 8002eac:	58025444 	.word	0x58025444
 8002eb0:	58025458 	.word	0x58025458
 8002eb4:	5802546c 	.word	0x5802546c
 8002eb8:	58025480 	.word	0x58025480
 8002ebc:	58025494 	.word	0x58025494
 8002ec0:	cccccccd 	.word	0xcccccccd
 8002ec4:	16009600 	.word	0x16009600
 8002ec8:	58025880 	.word	0x58025880
 8002ecc:	aaaaaaab 	.word	0xaaaaaaab
 8002ed0:	400204b8 	.word	0x400204b8
 8002ed4:	4002040f 	.word	0x4002040f
 8002ed8:	10008200 	.word	0x10008200
 8002edc:	40020880 	.word	0x40020880

08002ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d04a      	beq.n	8002f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d847      	bhi.n	8002f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d022      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d01d      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d018      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d013      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00e      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d009      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	461a      	mov	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002f68:	671a      	str	r2, [r3, #112]	; 0x70
 8002f6a:	e009      	b.n	8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002f7e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	58025408 	.word	0x58025408
 8002f9c:	5802541c 	.word	0x5802541c
 8002fa0:	58025430 	.word	0x58025430
 8002fa4:	58025444 	.word	0x58025444
 8002fa8:	58025458 	.word	0x58025458
 8002fac:	5802546c 	.word	0x5802546c
 8002fb0:	58025480 	.word	0x58025480
 8002fb4:	58025494 	.word	0x58025494
 8002fb8:	1600963f 	.word	0x1600963f
 8002fbc:	58025940 	.word	0x58025940
 8002fc0:	1000823f 	.word	0x1000823f
 8002fc4:	40020940 	.word	0x40020940

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fd6:	4b89      	ldr	r3, [pc, #548]	; (80031fc <HAL_GPIO_Init+0x234>)
 8002fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fda:	e194      	b.n	8003306 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8186 	beq.w	8003300 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d005      	beq.n	800300c <HAL_GPIO_Init+0x44>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d130      	bne.n	800306e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003042:	2201      	movs	r2, #1
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	f003 0201 	and.w	r2, r3, #1
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b03      	cmp	r3, #3
 8003078:	d017      	beq.n	80030aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d123      	bne.n	80030fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	08da      	lsrs	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3208      	adds	r2, #8
 80030be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	69b9      	ldr	r1, [r7, #24]
 80030fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0203 	and.w	r2, r3, #3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80e0 	beq.w	8003300 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_GPIO_Init+0x238>)
 8003142:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003146:	4a2e      	ldr	r2, [pc, #184]	; (8003200 <HAL_GPIO_Init+0x238>)
 8003148:	f043 0302 	orr.w	r3, r3, #2
 800314c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_GPIO_Init+0x238>)
 8003152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315e:	4a29      	ldr	r2, [pc, #164]	; (8003204 <HAL_GPIO_Init+0x23c>)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <HAL_GPIO_Init+0x240>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d052      	beq.n	8003230 <HAL_GPIO_Init+0x268>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1f      	ldr	r2, [pc, #124]	; (800320c <HAL_GPIO_Init+0x244>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_GPIO_Init+0x22e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <HAL_GPIO_Init+0x248>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d02b      	beq.n	80031f2 <HAL_GPIO_Init+0x22a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <HAL_GPIO_Init+0x24c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d025      	beq.n	80031ee <HAL_GPIO_Init+0x226>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <HAL_GPIO_Init+0x250>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01f      	beq.n	80031ea <HAL_GPIO_Init+0x222>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1b      	ldr	r2, [pc, #108]	; (800321c <HAL_GPIO_Init+0x254>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d019      	beq.n	80031e6 <HAL_GPIO_Init+0x21e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1a      	ldr	r2, [pc, #104]	; (8003220 <HAL_GPIO_Init+0x258>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0x21a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a19      	ldr	r2, [pc, #100]	; (8003224 <HAL_GPIO_Init+0x25c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00d      	beq.n	80031de <HAL_GPIO_Init+0x216>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_GPIO_Init+0x260>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <HAL_GPIO_Init+0x212>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a17      	ldr	r2, [pc, #92]	; (800322c <HAL_GPIO_Init+0x264>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_GPIO_Init+0x20e>
 80031d2:	2309      	movs	r3, #9
 80031d4:	e02d      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031d6:	230a      	movs	r3, #10
 80031d8:	e02b      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031da:	2308      	movs	r3, #8
 80031dc:	e029      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031de:	2307      	movs	r3, #7
 80031e0:	e027      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031e2:	2306      	movs	r3, #6
 80031e4:	e025      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031e6:	2305      	movs	r3, #5
 80031e8:	e023      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e021      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031ee:	2303      	movs	r3, #3
 80031f0:	e01f      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e01d      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e01b      	b.n	8003232 <HAL_GPIO_Init+0x26a>
 80031fa:	bf00      	nop
 80031fc:	58000080 	.word	0x58000080
 8003200:	58024400 	.word	0x58024400
 8003204:	58000400 	.word	0x58000400
 8003208:	58020000 	.word	0x58020000
 800320c:	58020400 	.word	0x58020400
 8003210:	58020800 	.word	0x58020800
 8003214:	58020c00 	.word	0x58020c00
 8003218:	58021000 	.word	0x58021000
 800321c:	58021400 	.word	0x58021400
 8003220:	58021800 	.word	0x58021800
 8003224:	58021c00 	.word	0x58021c00
 8003228:	58022000 	.word	0x58022000
 800322c:	58022400 	.word	0x58022400
 8003230:	2300      	movs	r3, #0
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	f002 0203 	and.w	r2, r2, #3
 8003238:	0092      	lsls	r2, r2, #2
 800323a:	4093      	lsls	r3, r2
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003242:	4938      	ldr	r1, [pc, #224]	; (8003324 <HAL_GPIO_Init+0x35c>)
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	3302      	adds	r3, #2
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800327e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	3301      	adds	r3, #1
 8003304:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	f47f ae63 	bne.w	8002fdc <HAL_GPIO_Init+0x14>
  }
}
 8003316:	bf00      	nop
 8003318:	bf00      	nop
 800331a:	3724      	adds	r7, #36	; 0x24
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	58000400 	.word	0x58000400

08003328 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_PWREx_ConfigSupply+0x70>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d00a      	beq.n	8003352 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_PWREx_ConfigSupply+0x70>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d001      	beq.n	800334e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e01f      	b.n	800338e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e01d      	b.n	800338e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_PWREx_ConfigSupply+0x70>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	490f      	ldr	r1, [pc, #60]	; (8003398 <HAL_PWREx_ConfigSupply+0x70>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4313      	orrs	r3, r2
 8003360:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003362:	f7fd fc31 	bl	8000bc8 <HAL_GetTick>
 8003366:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003368:	e009      	b.n	800337e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800336a:	f7fd fc2d 	bl	8000bc8 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003378:	d901      	bls.n	800337e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e007      	b.n	800338e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_PWREx_ConfigSupply+0x70>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	d1ee      	bne.n	800336a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	58024800 	.word	0x58024800

0800339c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08c      	sub	sp, #48	; 0x30
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f000 bc48 	b.w	8003c40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8088 	beq.w	80034ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033be:	4b99      	ldr	r3, [pc, #612]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033c8:	4b96      	ldr	r3, [pc, #600]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d007      	beq.n	80033e4 <HAL_RCC_OscConfig+0x48>
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	2b18      	cmp	r3, #24
 80033d8:	d111      	bne.n	80033fe <HAL_RCC_OscConfig+0x62>
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d10c      	bne.n	80033fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e4:	4b8f      	ldr	r3, [pc, #572]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d06d      	beq.n	80034cc <HAL_RCC_OscConfig+0x130>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d169      	bne.n	80034cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f000 bc21 	b.w	8003c40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x7a>
 8003408:	4b86      	ldr	r3, [pc, #536]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a85      	ldr	r2, [pc, #532]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800340e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	e02e      	b.n	8003474 <HAL_RCC_OscConfig+0xd8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x9c>
 800341e:	4b81      	ldr	r3, [pc, #516]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a80      	ldr	r2, [pc, #512]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b7e      	ldr	r3, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7d      	ldr	r2, [pc, #500]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0xd8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0xc0>
 8003442:	4b78      	ldr	r3, [pc, #480]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a77      	ldr	r2, [pc, #476]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b75      	ldr	r3, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a74      	ldr	r2, [pc, #464]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0xd8>
 800345c:	4b71      	ldr	r3, [pc, #452]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a70      	ldr	r2, [pc, #448]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6d      	ldr	r2, [pc, #436]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd fba4 	bl	8000bc8 <HAL_GetTick>
 8003480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003484:	f7fd fba0 	bl	8000bc8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e3d4      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003496:	4b63      	ldr	r3, [pc, #396]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0xe8>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fb90 	bl	8000bc8 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fd fb8c 	bl	8000bc8 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e3c0      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034be:	4b59      	ldr	r3, [pc, #356]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x110>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80ca 	beq.w	8003670 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034dc:	4b51      	ldr	r3, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034e6:	4b4f      	ldr	r3, [pc, #316]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_RCC_OscConfig+0x166>
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2b18      	cmp	r3, #24
 80034f6:	d156      	bne.n	80035a6 <HAL_RCC_OscConfig+0x20a>
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d151      	bne.n	80035a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003502:	4b48      	ldr	r3, [pc, #288]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_RCC_OscConfig+0x17e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e392      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800351a:	4b42      	ldr	r3, [pc, #264]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 0219 	bic.w	r2, r3, #25
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	493f      	ldr	r1, [pc, #252]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fd fb4c 	bl	8000bc8 <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fd fb48 	bl	8000bc8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e37c      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003546:	4b37      	ldr	r3, [pc, #220]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	f7fd fb45 	bl	8000be0 <HAL_GetREVID>
 8003556:	4603      	mov	r3, r0
 8003558:	f241 0203 	movw	r2, #4099	; 0x1003
 800355c:	4293      	cmp	r3, r2
 800355e:	d817      	bhi.n	8003590 <HAL_RCC_OscConfig+0x1f4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d108      	bne.n	800357a <HAL_RCC_OscConfig+0x1de>
 8003568:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003570:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003576:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003578:	e07a      	b.n	8003670 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357a:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	031b      	lsls	r3, r3, #12
 8003588:	4926      	ldr	r1, [pc, #152]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800358e:	e06f      	b.n	8003670 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b24      	ldr	r3, [pc, #144]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	061b      	lsls	r3, r3, #24
 800359e:	4921      	ldr	r1, [pc, #132]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a4:	e064      	b.n	8003670 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d047      	beq.n	800363e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 0219 	bic.w	r2, r3, #25
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	491a      	ldr	r1, [pc, #104]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fd fb02 	bl	8000bc8 <HAL_GetTick>
 80035c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c8:	f7fd fafe 	bl	8000bc8 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e332      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	f7fd fafb 	bl	8000be0 <HAL_GetREVID>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d819      	bhi.n	8003628 <HAL_RCC_OscConfig+0x28c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d108      	bne.n	800360e <HAL_RCC_OscConfig+0x272>
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360a:	6053      	str	r3, [r2, #4]
 800360c:	e030      	b.n	8003670 <HAL_RCC_OscConfig+0x2d4>
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	031b      	lsls	r3, r3, #12
 800361c:	4901      	ldr	r1, [pc, #4]	; (8003624 <HAL_RCC_OscConfig+0x288>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]
 8003622:	e025      	b.n	8003670 <HAL_RCC_OscConfig+0x2d4>
 8003624:	58024400 	.word	0x58024400
 8003628:	4b9a      	ldr	r3, [pc, #616]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	4997      	ldr	r1, [pc, #604]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
 800363c:	e018      	b.n	8003670 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363e:	4b95      	ldr	r3, [pc, #596]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a94      	ldr	r2, [pc, #592]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fd fabd 	bl	8000bc8 <HAL_GetTick>
 800364e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003652:	f7fd fab9 	bl	8000bc8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e2ed      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003664:	4b8b      	ldr	r3, [pc, #556]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80a9 	beq.w	80037d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800367e:	4b85      	ldr	r3, [pc, #532]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003686:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003688:	4b82      	ldr	r3, [pc, #520]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d007      	beq.n	80036a4 <HAL_RCC_OscConfig+0x308>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b18      	cmp	r3, #24
 8003698:	d13a      	bne.n	8003710 <HAL_RCC_OscConfig+0x374>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d135      	bne.n	8003710 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036a4:	4b7b      	ldr	r3, [pc, #492]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_OscConfig+0x320>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	2b80      	cmp	r3, #128	; 0x80
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e2c1      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036bc:	f7fd fa90 	bl	8000be0 <HAL_GetREVID>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d817      	bhi.n	80036fa <HAL_RCC_OscConfig+0x35e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d108      	bne.n	80036e4 <HAL_RCC_OscConfig+0x348>
 80036d2:	4b70      	ldr	r3, [pc, #448]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036da:	4a6e      	ldr	r2, [pc, #440]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80036dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036e2:	e075      	b.n	80037d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036e4:	4b6b      	ldr	r3, [pc, #428]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	069b      	lsls	r3, r3, #26
 80036f2:	4968      	ldr	r1, [pc, #416]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036f8:	e06a      	b.n	80037d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036fa:	4b66      	ldr	r3, [pc, #408]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	4962      	ldr	r1, [pc, #392]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800370e:	e05f      	b.n	80037d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d042      	beq.n	800379e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003718:	4b5e      	ldr	r3, [pc, #376]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5d      	ldr	r2, [pc, #372]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800371e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fd fa50 	bl	8000bc8 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800372c:	f7fd fa4c 	bl	8000bc8 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e280      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800373e:	4b55      	ldr	r3, [pc, #340]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800374a:	f7fd fa49 	bl	8000be0 <HAL_GetREVID>
 800374e:	4603      	mov	r3, r0
 8003750:	f241 0203 	movw	r2, #4099	; 0x1003
 8003754:	4293      	cmp	r3, r2
 8003756:	d817      	bhi.n	8003788 <HAL_RCC_OscConfig+0x3ec>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	2b20      	cmp	r3, #32
 800375e:	d108      	bne.n	8003772 <HAL_RCC_OscConfig+0x3d6>
 8003760:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003768:	4a4a      	ldr	r2, [pc, #296]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800376a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800376e:	6053      	str	r3, [r2, #4]
 8003770:	e02e      	b.n	80037d0 <HAL_RCC_OscConfig+0x434>
 8003772:	4b48      	ldr	r3, [pc, #288]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	069b      	lsls	r3, r3, #26
 8003780:	4944      	ldr	r1, [pc, #272]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003782:	4313      	orrs	r3, r2
 8003784:	604b      	str	r3, [r1, #4]
 8003786:	e023      	b.n	80037d0 <HAL_RCC_OscConfig+0x434>
 8003788:	4b42      	ldr	r3, [pc, #264]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	493f      	ldr	r1, [pc, #252]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003798:	4313      	orrs	r3, r2
 800379a:	60cb      	str	r3, [r1, #12]
 800379c:	e018      	b.n	80037d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a3c      	ldr	r2, [pc, #240]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80037a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fd fa0d 	bl	8000bc8 <HAL_GetTick>
 80037ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80037b2:	f7fd fa09 	bl	8000bc8 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e23d      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037c4:	4b33      	ldr	r3, [pc, #204]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f0      	bne.n	80037b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d036      	beq.n	800384a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d019      	beq.n	8003818 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80037e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e8:	4a2a      	ldr	r2, [pc, #168]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fd f9ea 	bl	8000bc8 <HAL_GetTick>
 80037f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f8:	f7fd f9e6 	bl	8000bc8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e21a      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800380a:	4b22      	ldr	r3, [pc, #136]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800380c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x45c>
 8003816:	e018      	b.n	800384a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003818:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fd f9d0 	bl	8000bc8 <HAL_GetTick>
 8003828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382c:	f7fd f9cc 	bl	8000bc8 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e200      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d039      	beq.n	80038ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d01c      	beq.n	8003898 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003868:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800386a:	f7fd f9ad 	bl	8000bc8 <HAL_GetTick>
 800386e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003872:	f7fd f9a9 	bl	8000bc8 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e1dd      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_OscConfig+0x4f8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x4d6>
 8003890:	e01b      	b.n	80038ca <HAL_RCC_OscConfig+0x52e>
 8003892:	bf00      	nop
 8003894:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003898:	4b9b      	ldr	r3, [pc, #620]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a9a      	ldr	r2, [pc, #616]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 800389e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80038a4:	f7fd f990 	bl	8000bc8 <HAL_GetTick>
 80038a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ac:	f7fd f98c 	bl	8000bc8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1c0      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038be:	4b92      	ldr	r3, [pc, #584]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8081 	beq.w	80039da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <HAL_RCC_OscConfig+0x770>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a8b      	ldr	r2, [pc, #556]	; (8003b0c <HAL_RCC_OscConfig+0x770>)
 80038de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038e4:	f7fd f970 	bl	8000bc8 <HAL_GetTick>
 80038e8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ec:	f7fd f96c 	bl	8000bc8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1a0      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038fe:	4b83      	ldr	r3, [pc, #524]	; (8003b0c <HAL_RCC_OscConfig+0x770>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d106      	bne.n	8003920 <HAL_RCC_OscConfig+0x584>
 8003912:	4b7d      	ldr	r3, [pc, #500]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a7c      	ldr	r2, [pc, #496]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
 800391e:	e02d      	b.n	800397c <HAL_RCC_OscConfig+0x5e0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10c      	bne.n	8003942 <HAL_RCC_OscConfig+0x5a6>
 8003928:	4b77      	ldr	r3, [pc, #476]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a76      	ldr	r2, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
 8003934:	4b74      	ldr	r3, [pc, #464]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a73      	ldr	r2, [pc, #460]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 800393a:	f023 0304 	bic.w	r3, r3, #4
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
 8003940:	e01c      	b.n	800397c <HAL_RCC_OscConfig+0x5e0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b05      	cmp	r3, #5
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c8>
 800394a:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a6e      	ldr	r2, [pc, #440]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	4b6c      	ldr	r3, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a6b      	ldr	r2, [pc, #428]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0x5e0>
 8003964:	4b68      	ldr	r3, [pc, #416]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a67      	ldr	r2, [pc, #412]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
 8003970:	4b65      	ldr	r3, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a64      	ldr	r2, [pc, #400]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003976:	f023 0304 	bic.w	r3, r3, #4
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d015      	beq.n	80039b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fd f920 	bl	8000bc8 <HAL_GetTick>
 8003988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398c:	f7fd f91c 	bl	8000bc8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e14e      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a2:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ee      	beq.n	800398c <HAL_RCC_OscConfig+0x5f0>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fd f90a 	bl	8000bc8 <HAL_GetTick>
 80039b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b8:	f7fd f906 	bl	8000bc8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e138      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039ce:	4b4e      	ldr	r3, [pc, #312]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ee      	bne.n	80039b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 812d 	beq.w	8003c3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039e4:	4b48      	ldr	r3, [pc, #288]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ec:	2b18      	cmp	r3, #24
 80039ee:	f000 80bd 	beq.w	8003b6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	f040 809e 	bne.w	8003b38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b42      	ldr	r3, [pc, #264]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a41      	ldr	r2, [pc, #260]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd f8de 	bl	8000bc8 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fd f8da 	bl	8000bc8 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e10e      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a22:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2e:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a32:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <HAL_RCC_OscConfig+0x774>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	430a      	orrs	r2, r1
 8003a42:	4931      	ldr	r1, [pc, #196]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	628b      	str	r3, [r1, #40]	; 0x28
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	3b01      	subs	r3, #1
 8003a58:	025b      	lsls	r3, r3, #9
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	3b01      	subs	r3, #1
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	3b01      	subs	r3, #1
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a78:	4923      	ldr	r1, [pc, #140]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8e:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <HAL_RCC_OscConfig+0x778>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a96:	00d2      	lsls	r2, r2, #3
 8003a98:	491b      	ldr	r1, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f023 020c 	bic.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	4917      	ldr	r1, [pc, #92]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	f023 0202 	bic.w	r2, r3, #2
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	4912      	ldr	r1, [pc, #72]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	4a10      	ldr	r2, [pc, #64]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ace:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <HAL_RCC_OscConfig+0x76c>)
 8003af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd f863 	bl	8000bc8 <HAL_GetTick>
 8003b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b04:	e011      	b.n	8003b2a <HAL_RCC_OscConfig+0x78e>
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	58024800 	.word	0x58024800
 8003b10:	fffffc0c 	.word	0xfffffc0c
 8003b14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd f856 	bl	8000bc8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e08a      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x77c>
 8003b36:	e082      	b.n	8003c3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b43      	ldr	r3, [pc, #268]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a42      	ldr	r2, [pc, #264]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fd f840 	bl	8000bc8 <HAL_GetTick>
 8003b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd f83c 	bl	8000bc8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e070      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b5e:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x7b0>
 8003b6a:	e068      	b.n	8003c3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b6c:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b72:	4b35      	ldr	r3, [pc, #212]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d031      	beq.n	8003be4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0203 	and.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d12a      	bne.n	8003be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d122      	bne.n	8003be4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d11a      	bne.n	8003be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	0a5b      	lsrs	r3, r3, #9
 8003bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d111      	bne.n	8003be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d108      	bne.n	8003be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	0e1b      	lsrs	r3, r3, #24
 8003bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e02b      	b.n	8003c40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	08db      	lsrs	r3, r3, #3
 8003bee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bf2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d01f      	beq.n	8003c3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c0a:	f7fc ffdd 	bl	8000bc8 <HAL_GetTick>
 8003c0e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003c10:	bf00      	nop
 8003c12:	f7fc ffd9 	bl	8000bc8 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d0f9      	beq.n	8003c12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_RCC_OscConfig+0x8b0>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c2a:	00d2      	lsls	r2, r2, #3
 8003c2c:	4906      	ldr	r1, [pc, #24]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_RCC_OscConfig+0x8ac>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3730      	adds	r7, #48	; 0x30
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	ffff0007 	.word	0xffff0007

08003c50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e19c      	b.n	8003f9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b8a      	ldr	r3, [pc, #552]	; (8003e90 <HAL_RCC_ClockConfig+0x240>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d910      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b87      	ldr	r3, [pc, #540]	; (8003e90 <HAL_RCC_ClockConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 020f 	bic.w	r2, r3, #15
 8003c7a:	4985      	ldr	r1, [pc, #532]	; (8003e90 <HAL_RCC_ClockConfig+0x240>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b83      	ldr	r3, [pc, #524]	; (8003e90 <HAL_RCC_ClockConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e184      	b.n	8003f9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d010      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	4b7b      	ldr	r3, [pc, #492]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d908      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cb0:	4b78      	ldr	r3, [pc, #480]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4975      	ldr	r1, [pc, #468]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d908      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cde:	4b6d      	ldr	r3, [pc, #436]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	496a      	ldr	r1, [pc, #424]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d010      	beq.n	8003d1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	4b64      	ldr	r3, [pc, #400]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d908      	bls.n	8003d1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d0c:	4b61      	ldr	r3, [pc, #388]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	495e      	ldr	r1, [pc, #376]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d010      	beq.n	8003d4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	4b59      	ldr	r3, [pc, #356]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d908      	bls.n	8003d4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d3a:	4b56      	ldr	r3, [pc, #344]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4953      	ldr	r1, [pc, #332]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d908      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f023 020f 	bic.w	r2, r3, #15
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4947      	ldr	r1, [pc, #284]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d055      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d86:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	4940      	ldr	r1, [pc, #256]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003da0:	4b3c      	ldr	r3, [pc, #240]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d121      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0f6      	b.n	8003f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db8:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d115      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0ea      	b.n	8003f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dd0:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0de      	b.n	8003f9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003de0:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0d6      	b.n	8003f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003df0:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f023 0207 	bic.w	r2, r3, #7
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4925      	ldr	r1, [pc, #148]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e02:	f7fc fee1 	bl	8000bc8 <HAL_GetTick>
 8003e06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0a:	f7fc fedd 	bl	8000bc8 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0be      	b.n	8003f9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e20:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d1eb      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d010      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d208      	bcs.n	8003e60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f023 020f 	bic.w	r2, r3, #15
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	490e      	ldr	r1, [pc, #56]	; (8003e94 <HAL_RCC_ClockConfig+0x244>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_ClockConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d214      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <HAL_RCC_ClockConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 020f 	bic.w	r2, r3, #15
 8003e76:	4906      	ldr	r1, [pc, #24]	; (8003e90 <HAL_RCC_ClockConfig+0x240>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <HAL_RCC_ClockConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e086      	b.n	8003f9e <HAL_RCC_ClockConfig+0x34e>
 8003e90:	52002000 	.word	0x52002000
 8003e94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d208      	bcs.n	8003ec6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003eb4:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	4939      	ldr	r1, [pc, #228]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d010      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d208      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ee2:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	492e      	ldr	r1, [pc, #184]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d010      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699a      	ldr	r2, [r3, #24]
 8003f04:	4b28      	ldr	r3, [pc, #160]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d208      	bcs.n	8003f22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f10:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	4922      	ldr	r1, [pc, #136]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d208      	bcs.n	8003f50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	4917      	ldr	r1, [pc, #92]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f50:	f000 f834 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	4912      	ldr	r1, [pc, #72]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <HAL_RCC_ClockConfig+0x358>)
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	4a0d      	ldr	r2, [pc, #52]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f78:	5cd3      	ldrb	r3, [r2, r3]
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
 8003f84:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <HAL_RCC_ClockConfig+0x360>)
 8003f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f88:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_RCC_ClockConfig+0x364>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x368>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fc fdce 	bl	8000b34 <HAL_InitTick>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	08005a48 	.word	0x08005a48
 8003fb0:	24000328 	.word	0x24000328
 8003fb4:	24000324 	.word	0x24000324
 8003fb8:	2400032c 	.word	0x2400032c

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc2:	4bb3      	ldr	r3, [pc, #716]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fca:	2b18      	cmp	r3, #24
 8003fcc:	f200 8155 	bhi.w	800427a <HAL_RCC_GetSysClockFreq+0x2be>
 8003fd0:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	0800403d 	.word	0x0800403d
 8003fdc:	0800427b 	.word	0x0800427b
 8003fe0:	0800427b 	.word	0x0800427b
 8003fe4:	0800427b 	.word	0x0800427b
 8003fe8:	0800427b 	.word	0x0800427b
 8003fec:	0800427b 	.word	0x0800427b
 8003ff0:	0800427b 	.word	0x0800427b
 8003ff4:	0800427b 	.word	0x0800427b
 8003ff8:	08004063 	.word	0x08004063
 8003ffc:	0800427b 	.word	0x0800427b
 8004000:	0800427b 	.word	0x0800427b
 8004004:	0800427b 	.word	0x0800427b
 8004008:	0800427b 	.word	0x0800427b
 800400c:	0800427b 	.word	0x0800427b
 8004010:	0800427b 	.word	0x0800427b
 8004014:	0800427b 	.word	0x0800427b
 8004018:	08004069 	.word	0x08004069
 800401c:	0800427b 	.word	0x0800427b
 8004020:	0800427b 	.word	0x0800427b
 8004024:	0800427b 	.word	0x0800427b
 8004028:	0800427b 	.word	0x0800427b
 800402c:	0800427b 	.word	0x0800427b
 8004030:	0800427b 	.word	0x0800427b
 8004034:	0800427b 	.word	0x0800427b
 8004038:	0800406f 	.word	0x0800406f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800403c:	4b94      	ldr	r3, [pc, #592]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004048:	4b91      	ldr	r3, [pc, #580]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	08db      	lsrs	r3, r3, #3
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	4a90      	ldr	r2, [pc, #576]	; (8004294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
 8004058:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800405a:	e111      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800405c:	4b8d      	ldr	r3, [pc, #564]	; (8004294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800405e:	61bb      	str	r3, [r7, #24]
      break;
 8004060:	e10e      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004062:	4b8d      	ldr	r3, [pc, #564]	; (8004298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004064:	61bb      	str	r3, [r7, #24]
      break;
 8004066:	e10b      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004068:	4b8c      	ldr	r3, [pc, #560]	; (800429c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800406a:	61bb      	str	r3, [r7, #24]
      break;
 800406c:	e108      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800406e:	4b88      	ldr	r3, [pc, #544]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004078:	4b85      	ldr	r3, [pc, #532]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004082:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004084:	4b82      	ldr	r3, [pc, #520]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800408e:	4b80      	ldr	r3, [pc, #512]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	08db      	lsrs	r3, r3, #3
 8004094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80e1 	beq.w	8004274 <HAL_RCC_GetSysClockFreq+0x2b8>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	f000 8083 	beq.w	80041c0 <HAL_RCC_GetSysClockFreq+0x204>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	f200 80a1 	bhi.w	8004204 <HAL_RCC_GetSysClockFreq+0x248>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x114>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d056      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x1c0>
 80040ce:	e099      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040d0:	4b6f      	ldr	r3, [pc, #444]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d02d      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040dc:	4b6c      	ldr	r3, [pc, #432]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	08db      	lsrs	r3, r3, #3
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	4a6b      	ldr	r2, [pc, #428]	; (8004294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004106:	4b62      	ldr	r3, [pc, #392]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004116:	ed97 6a02 	vldr	s12, [r7, #8]
 800411a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80042a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800411e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800412a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004132:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004136:	e087      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	eddf 6a58 	vldr	s13, [pc, #352]	; 80042a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414a:	4b51      	ldr	r3, [pc, #324]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415a:	ed97 6a02 	vldr	s12, [r7, #8]
 800415e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80042a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800416e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800417a:	e065      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	eddf 6a48 	vldr	s13, [pc, #288]	; 80042a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800418a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418e:	4b40      	ldr	r3, [pc, #256]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419e:	ed97 6a02 	vldr	s12, [r7, #8]
 80041a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80042a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041be:	e043      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80042ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80041ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d2:	4b2f      	ldr	r3, [pc, #188]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80042a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004202:	e021      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80042a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004216:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004226:	ed97 6a02 	vldr	s12, [r7, #8]
 800422a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80042a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800422e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800423a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800423e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004242:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004246:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004248:	4b11      	ldr	r3, [pc, #68]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	0a5b      	lsrs	r3, r3, #9
 800424e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004252:	3301      	adds	r3, #1
 8004254:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004260:	edd7 6a07 	vldr	s13, [r7, #28]
 8004264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426c:	ee17 3a90 	vmov	r3, s15
 8004270:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004272:	e005      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
      break;
 8004278:	e002      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800427c:	61bb      	str	r3, [r7, #24]
      break;
 800427e:	bf00      	nop
  }

  return sysclockfreq;
 8004280:	69bb      	ldr	r3, [r7, #24]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	58024400 	.word	0x58024400
 8004294:	03d09000 	.word	0x03d09000
 8004298:	003d0900 	.word	0x003d0900
 800429c:	017d7840 	.word	0x017d7840
 80042a0:	46000000 	.word	0x46000000
 80042a4:	4c742400 	.word	0x4c742400
 80042a8:	4a742400 	.word	0x4a742400
 80042ac:	4bbebc20 	.word	0x4bbebc20

080042b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e049      	b.n	8004356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc fb1e 	bl	8000918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f000 fe32 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d001      	beq.n	8004378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e04c      	b.n	8004412 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a26      	ldr	r2, [pc, #152]	; (8004420 <HAL_TIM_Base_Start+0xc0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d022      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d01d      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <HAL_TIM_Base_Start+0xc4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d018      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a21      	ldr	r2, [pc, #132]	; (8004428 <HAL_TIM_Base_Start+0xc8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1f      	ldr	r2, [pc, #124]	; (800442c <HAL_TIM_Base_Start+0xcc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <HAL_TIM_Base_Start+0xd0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <HAL_TIM_Base_Start+0xd4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <HAL_TIM_Base_Start+0xd8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d115      	bne.n	80043fc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	4b19      	ldr	r3, [pc, #100]	; (800443c <HAL_TIM_Base_Start+0xdc>)
 80043d8:	4013      	ands	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d015      	beq.n	800440e <HAL_TIM_Base_Start+0xae>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e8:	d011      	beq.n	800440e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fa:	e008      	b.n	800440e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	e000      	b.n	8004410 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40010000 	.word	0x40010000
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40010400 	.word	0x40010400
 8004434:	40001800 	.word	0x40001800
 8004438:	40014000 	.word	0x40014000
 800443c:	00010007 	.word	0x00010007

08004440 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10f      	bne.n	8004478 <HAL_TIM_Base_Stop+0x38>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	f240 4344 	movw	r3, #1092	; 0x444
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d107      	bne.n	8004478 <HAL_TIM_Base_Stop+0x38>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e049      	b.n	8004534 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f841 	bl	800453c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f000 fd43 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_TIM_OC_Start+0x24>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e03c      	b.n	80045ee <HAL_TIM_OC_Start+0x9e>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b04      	cmp	r3, #4
 8004578:	d109      	bne.n	800458e <HAL_TIM_OC_Start+0x3e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	bf14      	ite	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2300      	moveq	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	e02f      	b.n	80045ee <HAL_TIM_OC_Start+0x9e>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d109      	bne.n	80045a8 <HAL_TIM_OC_Start+0x58>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e022      	b.n	80045ee <HAL_TIM_OC_Start+0x9e>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b0c      	cmp	r3, #12
 80045ac:	d109      	bne.n	80045c2 <HAL_TIM_OC_Start+0x72>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	e015      	b.n	80045ee <HAL_TIM_OC_Start+0x9e>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d109      	bne.n	80045dc <HAL_TIM_OC_Start+0x8c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e008      	b.n	80045ee <HAL_TIM_OC_Start+0x9e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e0a1      	b.n	800473a <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_OC_Start+0xb6>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004604:	e023      	b.n	800464e <HAL_TIM_OC_Start+0xfe>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d104      	bne.n	8004616 <HAL_TIM_OC_Start+0xc6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004614:	e01b      	b.n	800464e <HAL_TIM_OC_Start+0xfe>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d104      	bne.n	8004626 <HAL_TIM_OC_Start+0xd6>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004624:	e013      	b.n	800464e <HAL_TIM_OC_Start+0xfe>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d104      	bne.n	8004636 <HAL_TIM_OC_Start+0xe6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004634:	e00b      	b.n	800464e <HAL_TIM_OC_Start+0xfe>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b10      	cmp	r3, #16
 800463a:	d104      	bne.n	8004646 <HAL_TIM_OC_Start+0xf6>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004644:	e003      	b.n	800464e <HAL_TIM_OC_Start+0xfe>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2201      	movs	r2, #1
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f001 f88c 	bl	8005774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a38      	ldr	r2, [pc, #224]	; (8004744 <HAL_TIM_OC_Start+0x1f4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_TIM_OC_Start+0x13e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a37      	ldr	r2, [pc, #220]	; (8004748 <HAL_TIM_OC_Start+0x1f8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_TIM_OC_Start+0x13e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a35      	ldr	r2, [pc, #212]	; (800474c <HAL_TIM_OC_Start+0x1fc>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_TIM_OC_Start+0x13e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a34      	ldr	r2, [pc, #208]	; (8004750 <HAL_TIM_OC_Start+0x200>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIM_OC_Start+0x13e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a32      	ldr	r2, [pc, #200]	; (8004754 <HAL_TIM_OC_Start+0x204>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d101      	bne.n	8004692 <HAL_TIM_OC_Start+0x142>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_TIM_OC_Start+0x144>
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a25      	ldr	r2, [pc, #148]	; (8004744 <HAL_TIM_OC_Start+0x1f4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_TIM_OC_Start+0x1a8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d01d      	beq.n	80046f8 <HAL_TIM_OC_Start+0x1a8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a25      	ldr	r2, [pc, #148]	; (8004758 <HAL_TIM_OC_Start+0x208>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_TIM_OC_Start+0x1a8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a24      	ldr	r2, [pc, #144]	; (800475c <HAL_TIM_OC_Start+0x20c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_TIM_OC_Start+0x1a8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a22      	ldr	r2, [pc, #136]	; (8004760 <HAL_TIM_OC_Start+0x210>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_OC_Start+0x1a8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <HAL_TIM_OC_Start+0x1f8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_OC_Start+0x1a8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_TIM_OC_Start+0x214>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_OC_Start+0x1a8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <HAL_TIM_OC_Start+0x1fc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d115      	bne.n	8004724 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <HAL_TIM_OC_Start+0x218>)
 8004700:	4013      	ands	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b06      	cmp	r3, #6
 8004708:	d015      	beq.n	8004736 <HAL_TIM_OC_Start+0x1e6>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004710:	d011      	beq.n	8004736 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	e008      	b.n	8004736 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e000      	b.n	8004738 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40010400 	.word	0x40010400
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800
 8004760:	40000c00 	.word	0x40000c00
 8004764:	40001800 	.word	0x40001800
 8004768:	00010007 	.word	0x00010007

0800476c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e049      	b.n	8004812 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f841 	bl	800481a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f000 fbd4 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <HAL_TIM_PWM_Start+0x24>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e03c      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d109      	bne.n	800486e <HAL_TIM_PWM_Start+0x3e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e02f      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d109      	bne.n	8004888 <HAL_TIM_PWM_Start+0x58>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e022      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d109      	bne.n	80048a2 <HAL_TIM_PWM_Start+0x72>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	bf14      	ite	ne
 800489a:	2301      	movne	r3, #1
 800489c:	2300      	moveq	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	e015      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d109      	bne.n	80048bc <HAL_TIM_PWM_Start+0x8c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e008      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0a1      	b.n	8004a1a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xb6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	e023      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_PWM_Start+0xc6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	e01b      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0xd6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	e013      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0xe6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004914:	e00b      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b10      	cmp	r3, #16
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0xf6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004924:	e003      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2201      	movs	r2, #1
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 ff1c 	bl	8005774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a38      	ldr	r2, [pc, #224]	; (8004a24 <HAL_TIM_PWM_Start+0x1f4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_TIM_PWM_Start+0x13e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a37      	ldr	r2, [pc, #220]	; (8004a28 <HAL_TIM_PWM_Start+0x1f8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIM_PWM_Start+0x13e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a35      	ldr	r2, [pc, #212]	; (8004a2c <HAL_TIM_PWM_Start+0x1fc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIM_PWM_Start+0x13e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a34      	ldr	r2, [pc, #208]	; (8004a30 <HAL_TIM_PWM_Start+0x200>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIM_PWM_Start+0x13e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a32      	ldr	r2, [pc, #200]	; (8004a34 <HAL_TIM_PWM_Start+0x204>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <HAL_TIM_PWM_Start+0x142>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_TIM_PWM_Start+0x144>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004986:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a25      	ldr	r2, [pc, #148]	; (8004a24 <HAL_TIM_PWM_Start+0x1f4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d022      	beq.n	80049d8 <HAL_TIM_PWM_Start+0x1a8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499a:	d01d      	beq.n	80049d8 <HAL_TIM_PWM_Start+0x1a8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <HAL_TIM_PWM_Start+0x208>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d018      	beq.n	80049d8 <HAL_TIM_PWM_Start+0x1a8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a24      	ldr	r2, [pc, #144]	; (8004a3c <HAL_TIM_PWM_Start+0x20c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_TIM_PWM_Start+0x1a8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a22      	ldr	r2, [pc, #136]	; (8004a40 <HAL_TIM_PWM_Start+0x210>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00e      	beq.n	80049d8 <HAL_TIM_PWM_Start+0x1a8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1a      	ldr	r2, [pc, #104]	; (8004a28 <HAL_TIM_PWM_Start+0x1f8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_TIM_PWM_Start+0x1a8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <HAL_TIM_PWM_Start+0x214>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_TIM_PWM_Start+0x1a8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <HAL_TIM_PWM_Start+0x1fc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d115      	bne.n	8004a04 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_TIM_PWM_Start+0x218>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d015      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x1e6>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f0:	d011      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a02:	e008      	b.n	8004a16 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e000      	b.n	8004a18 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40010400 	.word	0x40010400
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40014400 	.word	0x40014400
 8004a34:	40014800 	.word	0x40014800
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40001800 	.word	0x40001800
 8004a48:	00010007 	.word	0x00010007

08004a4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e066      	b.n	8004b38 <HAL_TIM_OC_ConfigChannel+0xec>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b14      	cmp	r3, #20
 8004a76:	d857      	bhi.n	8004b28 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004a78:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004b29 	.word	0x08004b29
 8004a88:	08004b29 	.word	0x08004b29
 8004a8c:	08004b29 	.word	0x08004b29
 8004a90:	08004ae3 	.word	0x08004ae3
 8004a94:	08004b29 	.word	0x08004b29
 8004a98:	08004b29 	.word	0x08004b29
 8004a9c:	08004b29 	.word	0x08004b29
 8004aa0:	08004af1 	.word	0x08004af1
 8004aa4:	08004b29 	.word	0x08004b29
 8004aa8:	08004b29 	.word	0x08004b29
 8004aac:	08004b29 	.word	0x08004b29
 8004ab0:	08004aff 	.word	0x08004aff
 8004ab4:	08004b29 	.word	0x08004b29
 8004ab8:	08004b29 	.word	0x08004b29
 8004abc:	08004b29 	.word	0x08004b29
 8004ac0:	08004b0d 	.word	0x08004b0d
 8004ac4:	08004b29 	.word	0x08004b29
 8004ac8:	08004b29 	.word	0x08004b29
 8004acc:	08004b29 	.word	0x08004b29
 8004ad0:	08004b1b 	.word	0x08004b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fad6 	bl	800508c <TIM_OC1_SetConfig>
      break;
 8004ae0:	e025      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fb5f 	bl	80051ac <TIM_OC2_SetConfig>
      break;
 8004aee:	e01e      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fbe2 	bl	80052c0 <TIM_OC3_SetConfig>
      break;
 8004afc:	e017      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fc63 	bl	80053d0 <TIM_OC4_SetConfig>
      break;
 8004b0a:	e010      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fcc6 	bl	80054a4 <TIM_OC5_SetConfig>
      break;
 8004b18:	e009      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fd23 	bl	800556c <TIM_OC6_SetConfig>
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e0ff      	b.n	8004d5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b14      	cmp	r3, #20
 8004b6a:	f200 80f0 	bhi.w	8004d4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b6e:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004bc9 	.word	0x08004bc9
 8004b78:	08004d4f 	.word	0x08004d4f
 8004b7c:	08004d4f 	.word	0x08004d4f
 8004b80:	08004d4f 	.word	0x08004d4f
 8004b84:	08004c09 	.word	0x08004c09
 8004b88:	08004d4f 	.word	0x08004d4f
 8004b8c:	08004d4f 	.word	0x08004d4f
 8004b90:	08004d4f 	.word	0x08004d4f
 8004b94:	08004c4b 	.word	0x08004c4b
 8004b98:	08004d4f 	.word	0x08004d4f
 8004b9c:	08004d4f 	.word	0x08004d4f
 8004ba0:	08004d4f 	.word	0x08004d4f
 8004ba4:	08004c8b 	.word	0x08004c8b
 8004ba8:	08004d4f 	.word	0x08004d4f
 8004bac:	08004d4f 	.word	0x08004d4f
 8004bb0:	08004d4f 	.word	0x08004d4f
 8004bb4:	08004ccd 	.word	0x08004ccd
 8004bb8:	08004d4f 	.word	0x08004d4f
 8004bbc:	08004d4f 	.word	0x08004d4f
 8004bc0:	08004d4f 	.word	0x08004d4f
 8004bc4:	08004d0d 	.word	0x08004d0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa5c 	bl	800508c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0208 	orr.w	r2, r2, #8
 8004be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0204 	bic.w	r2, r2, #4
 8004bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6999      	ldr	r1, [r3, #24]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	619a      	str	r2, [r3, #24]
      break;
 8004c06:	e0a5      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 facc 	bl	80051ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6999      	ldr	r1, [r3, #24]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	021a      	lsls	r2, r3, #8
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	619a      	str	r2, [r3, #24]
      break;
 8004c48:	e084      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fb35 	bl	80052c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0208 	orr.w	r2, r2, #8
 8004c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0204 	bic.w	r2, r2, #4
 8004c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69d9      	ldr	r1, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	61da      	str	r2, [r3, #28]
      break;
 8004c88:	e064      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fb9d 	bl	80053d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69d9      	ldr	r1, [r3, #28]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	021a      	lsls	r2, r3, #8
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	61da      	str	r2, [r3, #28]
      break;
 8004cca:	e043      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fbe6 	bl	80054a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0208 	orr.w	r2, r2, #8
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0204 	bic.w	r2, r2, #4
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d0a:	e023      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fc2a 	bl	800556c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	021a      	lsls	r2, r3, #8
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d4c:	e002      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	75fb      	strb	r3, [r7, #23]
      break;
 8004d52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop

08004d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_TIM_ConfigClockSource+0x1c>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e0dc      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x1d6>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	4b6a      	ldr	r3, [pc, #424]	; (8004f48 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a64      	ldr	r2, [pc, #400]	; (8004f4c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	f000 80a9 	beq.w	8004f12 <HAL_TIM_ConfigClockSource+0x1aa>
 8004dc0:	4a62      	ldr	r2, [pc, #392]	; (8004f4c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	f200 80ae 	bhi.w	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004dc8:	4a61      	ldr	r2, [pc, #388]	; (8004f50 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	f000 80a1 	beq.w	8004f12 <HAL_TIM_ConfigClockSource+0x1aa>
 8004dd0:	4a5f      	ldr	r2, [pc, #380]	; (8004f50 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	f200 80a6 	bhi.w	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004dd8:	4a5e      	ldr	r2, [pc, #376]	; (8004f54 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	f000 8099 	beq.w	8004f12 <HAL_TIM_ConfigClockSource+0x1aa>
 8004de0:	4a5c      	ldr	r2, [pc, #368]	; (8004f54 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	f200 809e 	bhi.w	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004de8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004dec:	f000 8091 	beq.w	8004f12 <HAL_TIM_ConfigClockSource+0x1aa>
 8004df0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004df4:	f200 8096 	bhi.w	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfc:	f000 8089 	beq.w	8004f12 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e04:	f200 808e 	bhi.w	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0c:	d03e      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0x124>
 8004e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e12:	f200 8087 	bhi.w	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	f000 8086 	beq.w	8004f2a <HAL_TIM_ConfigClockSource+0x1c2>
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e22:	d87f      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e24:	2b70      	cmp	r3, #112	; 0x70
 8004e26:	d01a      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0xf6>
 8004e28:	2b70      	cmp	r3, #112	; 0x70
 8004e2a:	d87b      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e2c:	2b60      	cmp	r3, #96	; 0x60
 8004e2e:	d050      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x16a>
 8004e30:	2b60      	cmp	r3, #96	; 0x60
 8004e32:	d877      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e34:	2b50      	cmp	r3, #80	; 0x50
 8004e36:	d03c      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x14a>
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d873      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d058      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x18a>
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d86f      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d064      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d86b      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d060      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d867      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05c      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d05a      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e5c:	e062      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e6e:	f000 fc61 	bl	8005734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	609a      	str	r2, [r3, #8]
      break;
 8004e8a:	e04f      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e9c:	f000 fc4a 	bl	8005734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eae:	609a      	str	r2, [r3, #8]
      break;
 8004eb0:	e03c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 fbba 	bl	8005638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2150      	movs	r1, #80	; 0x50
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fc14 	bl	80056f8 <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e02c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fbd9 	bl	8005696 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2160      	movs	r1, #96	; 0x60
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fc04 	bl	80056f8 <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e01c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 fb9a 	bl	8005638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2140      	movs	r1, #64	; 0x40
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fbf4 	bl	80056f8 <TIM_ITRx_SetConfig>
      break;
 8004f10:	e00c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	f000 fbeb 	bl	80056f8 <TIM_ITRx_SetConfig>
      break;
 8004f22:	e003      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e000      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	ffceff88 	.word	0xffceff88
 8004f4c:	00100040 	.word	0x00100040
 8004f50:	00100030 	.word	0x00100030
 8004f54:	00100020 	.word	0x00100020

08004f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a40      	ldr	r2, [pc, #256]	; (800506c <TIM_Base_SetConfig+0x114>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d00f      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a3d      	ldr	r2, [pc, #244]	; (8005070 <TIM_Base_SetConfig+0x118>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a3c      	ldr	r2, [pc, #240]	; (8005074 <TIM_Base_SetConfig+0x11c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a3b      	ldr	r2, [pc, #236]	; (8005078 <TIM_Base_SetConfig+0x120>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a3a      	ldr	r2, [pc, #232]	; (800507c <TIM_Base_SetConfig+0x124>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d108      	bne.n	8004faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2f      	ldr	r2, [pc, #188]	; (800506c <TIM_Base_SetConfig+0x114>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01f      	beq.n	8004ff2 <TIM_Base_SetConfig+0x9a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb8:	d01b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x9a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2c      	ldr	r2, [pc, #176]	; (8005070 <TIM_Base_SetConfig+0x118>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d017      	beq.n	8004ff2 <TIM_Base_SetConfig+0x9a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a2b      	ldr	r2, [pc, #172]	; (8005074 <TIM_Base_SetConfig+0x11c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <TIM_Base_SetConfig+0x9a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <TIM_Base_SetConfig+0x120>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00f      	beq.n	8004ff2 <TIM_Base_SetConfig+0x9a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a29      	ldr	r2, [pc, #164]	; (800507c <TIM_Base_SetConfig+0x124>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x9a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a28      	ldr	r2, [pc, #160]	; (8005080 <TIM_Base_SetConfig+0x128>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0x9a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a27      	ldr	r2, [pc, #156]	; (8005084 <TIM_Base_SetConfig+0x12c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0x9a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a26      	ldr	r2, [pc, #152]	; (8005088 <TIM_Base_SetConfig+0x130>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a10      	ldr	r2, [pc, #64]	; (800506c <TIM_Base_SetConfig+0x114>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00f      	beq.n	8005050 <TIM_Base_SetConfig+0xf8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a12      	ldr	r2, [pc, #72]	; (800507c <TIM_Base_SetConfig+0x124>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00b      	beq.n	8005050 <TIM_Base_SetConfig+0xf8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a11      	ldr	r2, [pc, #68]	; (8005080 <TIM_Base_SetConfig+0x128>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <TIM_Base_SetConfig+0xf8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a10      	ldr	r2, [pc, #64]	; (8005084 <TIM_Base_SetConfig+0x12c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0xf8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a0f      	ldr	r2, [pc, #60]	; (8005088 <TIM_Base_SetConfig+0x130>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d103      	bne.n	8005058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	615a      	str	r2, [r3, #20]
}
 800505e:	bf00      	nop
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40010400 	.word	0x40010400
 8005080:	40014000 	.word	0x40014000
 8005084:	40014400 	.word	0x40014400
 8005088:	40014800 	.word	0x40014800

0800508c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f023 0201 	bic.w	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4b37      	ldr	r3, [pc, #220]	; (8005194 <TIM_OC1_SetConfig+0x108>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0302 	bic.w	r3, r3, #2
 80050d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a2d      	ldr	r2, [pc, #180]	; (8005198 <TIM_OC1_SetConfig+0x10c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00f      	beq.n	8005108 <TIM_OC1_SetConfig+0x7c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a2c      	ldr	r2, [pc, #176]	; (800519c <TIM_OC1_SetConfig+0x110>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00b      	beq.n	8005108 <TIM_OC1_SetConfig+0x7c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <TIM_OC1_SetConfig+0x114>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d007      	beq.n	8005108 <TIM_OC1_SetConfig+0x7c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <TIM_OC1_SetConfig+0x118>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC1_SetConfig+0x7c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <TIM_OC1_SetConfig+0x11c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d10c      	bne.n	8005122 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 0308 	bic.w	r3, r3, #8
 800510e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a1c      	ldr	r2, [pc, #112]	; (8005198 <TIM_OC1_SetConfig+0x10c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00f      	beq.n	800514a <TIM_OC1_SetConfig+0xbe>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1b      	ldr	r2, [pc, #108]	; (800519c <TIM_OC1_SetConfig+0x110>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00b      	beq.n	800514a <TIM_OC1_SetConfig+0xbe>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1a      	ldr	r2, [pc, #104]	; (80051a0 <TIM_OC1_SetConfig+0x114>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d007      	beq.n	800514a <TIM_OC1_SetConfig+0xbe>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <TIM_OC1_SetConfig+0x118>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d003      	beq.n	800514a <TIM_OC1_SetConfig+0xbe>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <TIM_OC1_SetConfig+0x11c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d111      	bne.n	800516e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	621a      	str	r2, [r3, #32]
}
 8005188:	bf00      	nop
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	fffeff8f 	.word	0xfffeff8f
 8005198:	40010000 	.word	0x40010000
 800519c:	40010400 	.word	0x40010400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800

080051ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0210 	bic.w	r2, r3, #16
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4b34      	ldr	r3, [pc, #208]	; (80052a8 <TIM_OC2_SetConfig+0xfc>)
 80051d8:	4013      	ands	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0320 	bic.w	r3, r3, #32
 80051f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a29      	ldr	r2, [pc, #164]	; (80052ac <TIM_OC2_SetConfig+0x100>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_OC2_SetConfig+0x68>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a28      	ldr	r2, [pc, #160]	; (80052b0 <TIM_OC2_SetConfig+0x104>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10d      	bne.n	8005230 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <TIM_OC2_SetConfig+0x100>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00f      	beq.n	8005258 <TIM_OC2_SetConfig+0xac>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <TIM_OC2_SetConfig+0x104>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00b      	beq.n	8005258 <TIM_OC2_SetConfig+0xac>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <TIM_OC2_SetConfig+0x108>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d007      	beq.n	8005258 <TIM_OC2_SetConfig+0xac>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <TIM_OC2_SetConfig+0x10c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC2_SetConfig+0xac>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1a      	ldr	r2, [pc, #104]	; (80052bc <TIM_OC2_SetConfig+0x110>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d113      	bne.n	8005280 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	feff8fff 	.word	0xfeff8fff
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40010400 	.word	0x40010400
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800

080052c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4b33      	ldr	r3, [pc, #204]	; (80053b8 <TIM_OC3_SetConfig+0xf8>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <TIM_OC3_SetConfig+0xfc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC3_SetConfig+0x66>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <TIM_OC3_SetConfig+0x100>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10d      	bne.n	8005342 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800532c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <TIM_OC3_SetConfig+0xfc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_OC3_SetConfig+0xaa>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a1c      	ldr	r2, [pc, #112]	; (80053c0 <TIM_OC3_SetConfig+0x100>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_OC3_SetConfig+0xaa>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a1b      	ldr	r2, [pc, #108]	; (80053c4 <TIM_OC3_SetConfig+0x104>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_OC3_SetConfig+0xaa>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1a      	ldr	r2, [pc, #104]	; (80053c8 <TIM_OC3_SetConfig+0x108>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_OC3_SetConfig+0xaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a19      	ldr	r2, [pc, #100]	; (80053cc <TIM_OC3_SetConfig+0x10c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d113      	bne.n	8005392 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	621a      	str	r2, [r3, #32]
}
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	fffeff8f 	.word	0xfffeff8f
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40010400 	.word	0x40010400
 80053c4:	40014000 	.word	0x40014000
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40014800 	.word	0x40014800

080053d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4b24      	ldr	r3, [pc, #144]	; (800548c <TIM_OC4_SetConfig+0xbc>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800541a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	031b      	lsls	r3, r3, #12
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a19      	ldr	r2, [pc, #100]	; (8005490 <TIM_OC4_SetConfig+0xc0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00f      	beq.n	8005450 <TIM_OC4_SetConfig+0x80>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a18      	ldr	r2, [pc, #96]	; (8005494 <TIM_OC4_SetConfig+0xc4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_OC4_SetConfig+0x80>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <TIM_OC4_SetConfig+0xc8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_OC4_SetConfig+0x80>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a16      	ldr	r2, [pc, #88]	; (800549c <TIM_OC4_SetConfig+0xcc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC4_SetConfig+0x80>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <TIM_OC4_SetConfig+0xd0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d109      	bne.n	8005464 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	019b      	lsls	r3, r3, #6
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	feff8fff 	.word	0xfeff8fff
 8005490:	40010000 	.word	0x40010000
 8005494:	40010400 	.word	0x40010400
 8005498:	40014000 	.word	0x40014000
 800549c:	40014400 	.word	0x40014400
 80054a0:	40014800 	.word	0x40014800

080054a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <TIM_OC5_SetConfig+0xb0>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	041b      	lsls	r3, r3, #16
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a18      	ldr	r2, [pc, #96]	; (8005558 <TIM_OC5_SetConfig+0xb4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_OC5_SetConfig+0x76>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a17      	ldr	r2, [pc, #92]	; (800555c <TIM_OC5_SetConfig+0xb8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_OC5_SetConfig+0x76>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a16      	ldr	r2, [pc, #88]	; (8005560 <TIM_OC5_SetConfig+0xbc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_OC5_SetConfig+0x76>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a15      	ldr	r2, [pc, #84]	; (8005564 <TIM_OC5_SetConfig+0xc0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_OC5_SetConfig+0x76>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a14      	ldr	r2, [pc, #80]	; (8005568 <TIM_OC5_SetConfig+0xc4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d109      	bne.n	800552e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005520:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	621a      	str	r2, [r3, #32]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	fffeff8f 	.word	0xfffeff8f
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400
 8005568:	40014800 	.word	0x40014800

0800556c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <TIM_OC6_SetConfig+0xb4>)
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	051b      	lsls	r3, r3, #20
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a19      	ldr	r2, [pc, #100]	; (8005624 <TIM_OC6_SetConfig+0xb8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00f      	beq.n	80055e4 <TIM_OC6_SetConfig+0x78>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a18      	ldr	r2, [pc, #96]	; (8005628 <TIM_OC6_SetConfig+0xbc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <TIM_OC6_SetConfig+0x78>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a17      	ldr	r2, [pc, #92]	; (800562c <TIM_OC6_SetConfig+0xc0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_OC6_SetConfig+0x78>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a16      	ldr	r2, [pc, #88]	; (8005630 <TIM_OC6_SetConfig+0xc4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_OC6_SetConfig+0x78>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a15      	ldr	r2, [pc, #84]	; (8005634 <TIM_OC6_SetConfig+0xc8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d109      	bne.n	80055f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	feff8fff 	.word	0xfeff8fff
 8005624:	40010000 	.word	0x40010000
 8005628:	40010400 	.word	0x40010400
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800

08005638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0201 	bic.w	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f023 030a 	bic.w	r3, r3, #10
 8005674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	f023 0210 	bic.w	r2, r3, #16
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	031b      	lsls	r3, r3, #12
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <TIM_ITRx_SetConfig+0x38>)
 800570c:	4013      	ands	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	f043 0307 	orr.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	609a      	str	r2, [r3, #8]
}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	ffcfff8f 	.word	0xffcfff8f

08005734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	021a      	lsls	r2, r3, #8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	431a      	orrs	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	609a      	str	r2, [r3, #8]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2201      	movs	r2, #1
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1a      	ldr	r2, [r3, #32]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	43db      	mvns	r3, r3
 8005796:	401a      	ands	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1a      	ldr	r2, [r3, #32]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ac:	431a      	orrs	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e06d      	b.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a30      	ldr	r2, [pc, #192]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d004      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a2f      	ldr	r2, [pc, #188]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d108      	bne.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005812:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005824:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a20      	ldr	r2, [pc, #128]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d022      	beq.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584a:	d01d      	beq.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d018      	beq.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1c      	ldr	r2, [pc, #112]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d013      	beq.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00e      	beq.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d009      	beq.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d10c      	bne.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800588e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	4313      	orrs	r3, r2
 8005898:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40010000 	.word	0x40010000
 80058c4:	40010400 	.word	0x40010400
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40001800 	.word	0x40001800
 80058d8:	40014000 	.word	0x40014000

080058dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e065      	b.n	80059c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	041b      	lsls	r3, r3, #16
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d115      	bne.n	80059b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	051b      	lsls	r3, r3, #20
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40010400 	.word	0x40010400

080059d8 <memset>:
 80059d8:	4402      	add	r2, r0
 80059da:	4603      	mov	r3, r0
 80059dc:	4293      	cmp	r3, r2
 80059de:	d100      	bne.n	80059e2 <memset+0xa>
 80059e0:	4770      	bx	lr
 80059e2:	f803 1b01 	strb.w	r1, [r3], #1
 80059e6:	e7f9      	b.n	80059dc <memset+0x4>

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	; (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	; (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	; (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	; (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 f818 	bl	8005a30 <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08005a60 	.word	0x08005a60
 8005a24:	08005a60 	.word	0x08005a60
 8005a28:	08005a60 	.word	0x08005a60
 8005a2c:	08005a64 	.word	0x08005a64

08005a30 <_init>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	bf00      	nop
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr

08005a3c <_fini>:
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	bf00      	nop
 8005a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a42:	bc08      	pop	{r3}
 8005a44:	469e      	mov	lr, r3
 8005a46:	4770      	bx	lr
