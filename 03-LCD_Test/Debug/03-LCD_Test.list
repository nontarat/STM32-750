
03-LCD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08004590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000118  24000010  080045a0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000128  080045a0  00020128  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012c36  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002607  00000000  00000000  00032c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001008  00000000  00000000  00035280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ed0  00000000  00000000  00036288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000381bb  00000000  00000000  00037158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014c3d  00000000  00000000  0006f313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00166bdd  00000000  00000000  00083f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001eab2d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004204  00000000  00000000  001eab80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004560 	.word	0x08004560

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004560 	.word	0x08004560

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4b3a      	ldr	r3, [pc, #232]	; (80003d8 <MX_GPIO_Init+0x100>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a38      	ldr	r2, [pc, #224]	; (80003d8 <MX_GPIO_Init+0x100>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b36      	ldr	r3, [pc, #216]	; (80003d8 <MX_GPIO_Init+0x100>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	4b32      	ldr	r3, [pc, #200]	; (80003d8 <MX_GPIO_Init+0x100>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a31      	ldr	r2, [pc, #196]	; (80003d8 <MX_GPIO_Init+0x100>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <MX_GPIO_Init+0x100>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800032a:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <MX_GPIO_Init+0x100>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a29      	ldr	r2, [pc, #164]	; (80003d8 <MX_GPIO_Init+0x100>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <MX_GPIO_Init+0x100>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <MX_GPIO_Init+0x100>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <MX_GPIO_Init+0x100>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000358:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <MX_GPIO_Init+0x100>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	481c      	ldr	r0, [pc, #112]	; (80003dc <MX_GPIO_Init+0x104>)
 800036c:	f000 ff3c 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000376:	4819      	ldr	r0, [pc, #100]	; (80003dc <MX_GPIO_Init+0x104>)
 8000378:	f000 ff36 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E3_Pin;
 800037c:	2308      	movs	r3, #8
 800037e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2300      	movs	r3, #0
 800038a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	4619      	mov	r1, r3
 8000392:	4812      	ldr	r0, [pc, #72]	; (80003dc <MX_GPIO_Init+0x104>)
 8000394:	f000 fd78 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003a2:	2302      	movs	r3, #2
 80003a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	4619      	mov	r1, r3
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <MX_GPIO_Init+0x108>)
 80003ae:	f000 fd6b 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 80003b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003c0:	2303      	movs	r3, #3
 80003c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003c4:	f107 0314 	add.w	r3, r7, #20
 80003c8:	4619      	mov	r1, r3
 80003ca:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0x104>)
 80003cc:	f000 fd5c 	bl	8000e88 <HAL_GPIO_Init>

}
 80003d0:	bf00      	nop
 80003d2:	3728      	adds	r7, #40	; 0x28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	58024400 	.word	0x58024400
 80003dc:	58021000 	.word	0x58021000
 80003e0:	58020800 	.word	0x58020800

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e8:	f000 fbcc 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ec:	f000 f80a 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f7ff ff72 	bl	80002d8 <MX_GPIO_Init>
  MX_RTC_Init();
 80003f4:	f000 f894 	bl	8000520 <MX_RTC_Init>
  MX_SPI4_Init();
 80003f8:	f000 f91e 	bl	8000638 <MX_SPI4_Init>
  MX_TIM1_Init();
 80003fc:	f000 faaa 	bl	8000954 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000400:	e7fe      	b.n	8000400 <main+0x1c>
	...

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b09c      	sub	sp, #112	; 0x70
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800040e:	224c      	movs	r2, #76	; 0x4c
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f004 f89c 	bl	8004550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2220      	movs	r2, #32
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f004 f896 	bl	8004550 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000424:	2002      	movs	r0, #2
 8000426:	f000 ff09 	bl	800123c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800042a:	2300      	movs	r3, #0
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	4b36      	ldr	r3, [pc, #216]	; (8000508 <SystemClock_Config+0x104>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a35      	ldr	r2, [pc, #212]	; (8000508 <SystemClock_Config+0x104>)
 8000434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b33      	ldr	r3, [pc, #204]	; (8000508 <SystemClock_Config+0x104>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	4b31      	ldr	r3, [pc, #196]	; (800050c <SystemClock_Config+0x108>)
 8000446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000448:	4a30      	ldr	r2, [pc, #192]	; (800050c <SystemClock_Config+0x108>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000450:	4b2e      	ldr	r3, [pc, #184]	; (800050c <SystemClock_Config+0x108>)
 8000452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800045c:	bf00      	nop
 800045e:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <SystemClock_Config+0x104>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800046a:	d1f8      	bne.n	800045e <SystemClock_Config+0x5a>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800046c:	f000 fed6 	bl	800121c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000470:	f000 fc1a 	bl	8000ca8 <HAL_GetREVID>
 8000474:	4b26      	ldr	r3, [pc, #152]	; (8000510 <SystemClock_Config+0x10c>)
 8000476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000478:	4a25      	ldr	r2, [pc, #148]	; (8000510 <SystemClock_Config+0x10c>)
 800047a:	f023 0318 	bic.w	r3, r3, #24
 800047e:	6713      	str	r3, [r2, #112]	; 0x70
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000480:	2305      	movs	r3, #5
 8000482:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000488:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800048a:	2301      	movs	r3, #1
 800048c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	2302      	movs	r3, #2
 8000490:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000492:	2302      	movs	r3, #2
 8000494:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000496:	2305      	movs	r3, #5
 8000498:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800049a:	2360      	movs	r3, #96	; 0x60
 800049c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800049e:	2302      	movs	r3, #2
 80004a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004a2:	2302      	movs	r3, #2
 80004a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004a6:	2302      	movs	r3, #2
 80004a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004aa:	2308      	movs	r3, #8
 80004ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fef8 	bl	80012b0 <HAL_RCC_OscConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004c6:	f000 f825 	bl	8000514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ca:	233f      	movs	r3, #63	; 0x3f
 80004cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ce:	2303      	movs	r3, #3
 80004d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004d6:	2308      	movs	r3, #8
 80004d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2101      	movs	r1, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 faec 	bl	8001acc <HAL_RCC_ClockConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80004fa:	f000 f80b 	bl	8000514 <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3770      	adds	r7, #112	; 0x70
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	58024800 	.word	0x58024800
 800050c:	58000400 	.word	0x58000400
 8000510:	58024400 	.word	0x58024400

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000534:	2300      	movs	r3, #0
 8000536:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_RTC_Init+0xb0>)
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <MX_RTC_Init+0xb4>)
 800053c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_RTC_Init+0xb0>)
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_RTC_Init+0xb0>)
 8000546:	227f      	movs	r2, #127	; 0x7f
 8000548:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <MX_RTC_Init+0xb0>)
 800054c:	22ff      	movs	r2, #255	; 0xff
 800054e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_RTC_Init+0xb0>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_RTC_Init+0xb0>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_RTC_Init+0xb0>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_RTC_Init+0xb0>)
 8000564:	2200      	movs	r2, #0
 8000566:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000568:	4819      	ldr	r0, [pc, #100]	; (80005d0 <MX_RTC_Init+0xb0>)
 800056a:	f002 fe89 	bl	8003280 <HAL_RTC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000574:	f7ff ffce 	bl	8000514 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000578:	2312      	movs	r3, #18
 800057a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800057c:	2300      	movs	r3, #0
 800057e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000580:	2300      	movs	r3, #0
 8000582:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	480f      	ldr	r0, [pc, #60]	; (80005d0 <MX_RTC_Init+0xb0>)
 8000594:	f002 feec 	bl	8003370 <HAL_RTC_SetTime>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800059e:	f7ff ffb9 	bl	8000514 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80005a2:	2301      	movs	r3, #1
 80005a4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80005a6:	2306      	movs	r3, #6
 80005a8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 80005ae:	2320      	movs	r3, #32
 80005b0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_RTC_Init+0xb0>)
 80005ba:	f002 ff77 	bl	80034ac <HAL_RTC_SetDate>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80005c4:	f7ff ffa6 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2400002c 	.word	0x2400002c
 80005d4:	58004000 	.word	0x58004000

080005d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b2      	sub	sp, #200	; 0xc8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	22bc      	movs	r2, #188	; 0xbc
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 ffb1 	bl	8004550 <memset>
  if(rtcHandle->Instance==RTC)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <HAL_RTC_MspInit+0x58>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d116      	bne.n	8000626 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fd8e 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000616:	f7ff ff7d 	bl	8000514 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_RTC_MspInit+0x5c>)
 800061c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <HAL_RTC_MspInit+0x5c>)
 8000620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000624:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000626:	bf00      	nop
 8000628:	37c8      	adds	r7, #200	; 0xc8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	58004000 	.word	0x58004000
 8000634:	58024400 	.word	0x58024400

08000638 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_SPI4_Init+0xa8>)
 800063e:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <MX_SPI4_Init+0xac>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <MX_SPI4_Init+0xa8>)
 8000644:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000648:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <MX_SPI4_Init+0xa8>)
 800064c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000650:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <MX_SPI4_Init+0xa8>)
 8000654:	2207      	movs	r2, #7
 8000656:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_SPI4_Init+0xa8>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_SPI4_Init+0xa8>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_SPI4_Init+0xa8>)
 8000666:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800066a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_SPI4_Init+0xa8>)
 800066e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000672:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_SPI4_Init+0xa8>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_SPI4_Init+0xa8>)
 800067c:	2200      	movs	r2, #0
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_SPI4_Init+0xa8>)
 8000682:	2200      	movs	r2, #0
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_SPI4_Init+0xa8>)
 8000688:	2200      	movs	r2, #0
 800068a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_SPI4_Init+0xa8>)
 800068e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000692:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_SPI4_Init+0xa8>)
 8000696:	2200      	movs	r2, #0
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_SPI4_Init+0xa8>)
 800069c:	2200      	movs	r2, #0
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_SPI4_Init+0xa8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_SPI4_Init+0xa8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_SPI4_Init+0xa8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_SPI4_Init+0xa8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_SPI4_Init+0xa8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_SPI4_Init+0xa8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_SPI4_Init+0xa8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_SPI4_Init+0xa8>)
 80006cc:	f003 f82a 	bl	8003724 <HAL_SPI_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80006d6:	f7ff ff1d 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	24000050 	.word	0x24000050
 80006e4:	40013400 	.word	0x40013400

080006e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0b8      	sub	sp, #224	; 0xe0
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	22bc      	movs	r2, #188	; 0xbc
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f003 ff21 	bl	8004550 <memset>
  if(spiHandle->Instance==SPI4)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <HAL_SPI_MspInit+0xc0>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d142      	bne.n	800079e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800071e:	2300      	movs	r3, #0
 8000720:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd00 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000732:	f7ff feef 	bl	8000514 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <HAL_SPI_MspInit+0xc4>)
 8000738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <HAL_SPI_MspInit+0xc4>)
 800073e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000742:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <HAL_SPI_MspInit+0xc4>)
 8000748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800074c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_SPI_MspInit+0xc4>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <HAL_SPI_MspInit+0xc4>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_SPI_MspInit+0xc4>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000772:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000776:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2302      	movs	r3, #2
 8000788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800078c:	2305      	movs	r3, #5
 800078e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000792:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <HAL_SPI_MspInit+0xc8>)
 800079a:	f000 fb75 	bl	8000e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800079e:	bf00      	nop
 80007a0:	37e0      	adds	r7, #224	; 0xe0
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40013400 	.word	0x40013400
 80007ac:	58024400 	.word	0x58024400
 80007b0:	58021000 	.word	0x58021000

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_MspInit+0x30>)
 80007bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007c0:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x30>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x30>)
 80007cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d0:	f003 0302 	and.w	r3, r3, #2
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	58024400 	.word	0x58024400

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 fa18 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000840:	4b39      	ldr	r3, [pc, #228]	; (8000928 <SystemInit+0xec>)
 8000842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000846:	4a38      	ldr	r2, [pc, #224]	; (8000928 <SystemInit+0xec>)
 8000848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000850:	4b36      	ldr	r3, [pc, #216]	; (800092c <SystemInit+0xf0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	2b06      	cmp	r3, #6
 800085a:	d807      	bhi.n	800086c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800085c:	4b33      	ldr	r3, [pc, #204]	; (800092c <SystemInit+0xf0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f023 030f 	bic.w	r3, r3, #15
 8000864:	4a31      	ldr	r2, [pc, #196]	; (800092c <SystemInit+0xf0>)
 8000866:	f043 0307 	orr.w	r3, r3, #7
 800086a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800086c:	4b30      	ldr	r3, [pc, #192]	; (8000930 <SystemInit+0xf4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a2f      	ldr	r2, [pc, #188]	; (8000930 <SystemInit+0xf4>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000878:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <SystemInit+0xf4>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <SystemInit+0xf4>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	492b      	ldr	r1, [pc, #172]	; (8000930 <SystemInit+0xf4>)
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <SystemInit+0xf8>)
 8000886:	4013      	ands	r3, r2
 8000888:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <SystemInit+0xf0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	2b00      	cmp	r3, #0
 8000894:	d007      	beq.n	80008a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <SystemInit+0xf0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f023 030f 	bic.w	r3, r3, #15
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <SystemInit+0xf0>)
 80008a0:	f043 0307 	orr.w	r3, r3, #7
 80008a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <SystemInit+0xf4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <SystemInit+0xf4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <SystemInit+0xf4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <SystemInit+0xf4>)
 80008ba:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <SystemInit+0xfc>)
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <SystemInit+0xf4>)
 80008c0:	4a1e      	ldr	r2, [pc, #120]	; (800093c <SystemInit+0x100>)
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <SystemInit+0xf4>)
 80008c6:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <SystemInit+0x104>)
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <SystemInit+0xf4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <SystemInit+0xf4>)
 80008d2:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <SystemInit+0x104>)
 80008d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <SystemInit+0xf4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <SystemInit+0xf4>)
 80008de:	4a18      	ldr	r2, [pc, #96]	; (8000940 <SystemInit+0x104>)
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <SystemInit+0xf4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <SystemInit+0xf4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a10      	ldr	r2, [pc, #64]	; (8000930 <SystemInit+0xf4>)
 80008ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <SystemInit+0xf4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <SystemInit+0x108>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <SystemInit+0x10c>)
 8000900:	4013      	ands	r3, r2
 8000902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000906:	d202      	bcs.n	800090e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <SystemInit+0x110>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <SystemInit+0x114>)
 8000910:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000914:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SystemInit+0xec>)
 8000918:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800091c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00
 800092c:	52002000 	.word	0x52002000
 8000930:	58024400 	.word	0x58024400
 8000934:	eaf6ed7f 	.word	0xeaf6ed7f
 8000938:	02020200 	.word	0x02020200
 800093c:	01ff0000 	.word	0x01ff0000
 8000940:	01010280 	.word	0x01010280
 8000944:	5c001000 	.word	0x5c001000
 8000948:	ffff0000 	.word	0xffff0000
 800094c:	51008108 	.word	0x51008108
 8000950:	52004000 	.word	0x52004000

08000954 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b096      	sub	sp, #88	; 0x58
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	222c      	movs	r2, #44	; 0x2c
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fde5 	bl	8004550 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000986:	4b39      	ldr	r3, [pc, #228]	; (8000a6c <MX_TIM1_Init+0x118>)
 8000988:	4a39      	ldr	r2, [pc, #228]	; (8000a70 <MX_TIM1_Init+0x11c>)
 800098a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 800098c:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <MX_TIM1_Init+0x118>)
 800098e:	220b      	movs	r2, #11
 8000990:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b36      	ldr	r3, [pc, #216]	; (8000a6c <MX_TIM1_Init+0x118>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000998:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <MX_TIM1_Init+0x118>)
 800099a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <MX_TIM1_Init+0x118>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <MX_TIM1_Init+0x118>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <MX_TIM1_Init+0x118>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b2:	482e      	ldr	r0, [pc, #184]	; (8000a6c <MX_TIM1_Init+0x118>)
 80009b4:	f002 ffd3 	bl	800395e <HAL_TIM_PWM_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009be:	f7ff fda9 	bl	8000514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009d2:	4619      	mov	r1, r3
 80009d4:	4825      	ldr	r0, [pc, #148]	; (8000a6c <MX_TIM1_Init+0x118>)
 80009d6:	f003 fc91 	bl	80042fc <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009e0:	f7ff fd98 	bl	8000514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ec:	2300      	movs	r3, #0
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80009f0:	2308      	movs	r3, #8
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a04:	2204      	movs	r2, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4818      	ldr	r0, [pc, #96]	; (8000a6c <MX_TIM1_Init+0x118>)
 8000a0a:	f002 ffff 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a14:	f7ff fd7e 	bl	8000514 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM1_Init+0x118>)
 8000a4e:	f003 fcdd 	bl	800440c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000a58:	f7ff fd5c 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM1_Init+0x118>)
 8000a5e:	f000 f82b 	bl	8000ab8 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3758      	adds	r7, #88	; 0x58
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	240000d8 	.word	0x240000d8
 8000a70:	40010000 	.word	0x40010000

08000a74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d10e      	bne.n	8000aa4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_TIM_PWM_MspInit+0x40>)
 8000a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a8c:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <HAL_TIM_PWM_MspInit+0x40>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <HAL_TIM_PWM_MspInit+0x40>)
 8000a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40010000 	.word	0x40010000
 8000ab4:	58024400 	.word	0x58024400

08000ab8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <HAL_TIM_MspPostInit+0x6c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d11f      	bne.n	8000b1a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_TIM_MspPostInit+0x70>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <HAL_TIM_MspPostInit+0x70>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_TIM_MspPostInit+0x70>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	f003 0310 	and.w	r3, r3, #16
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <HAL_TIM_MspPostInit+0x74>)
 8000b16:	f000 f9b7 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010000 	.word	0x40010000
 8000b28:	58024400 	.word	0x58024400
 8000b2c:	58021000 	.word	0x58021000

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b34:	f7ff fe82 	bl	800083c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	; (8000b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	; (8000b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f003 fcd3 	bl	8004508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fc3f 	bl	80003e4 <main>
  bx  lr
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b70:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b74:	08004590 	.word	0x08004590
  ldr r2, =_sbss
 8000b78:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b7c:	24000128 	.word	0x24000128

08000b80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC3_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f000 f94a 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b90:	f001 f952 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8000b94:	4602      	mov	r2, r0
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_Init+0x68>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	4913      	ldr	r1, [pc, #76]	; (8000bf0 <HAL_Init+0x6c>)
 8000ba2:	5ccb      	ldrb	r3, [r1, r3]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_Init+0x68>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_Init+0x6c>)
 8000bb8:	5cd3      	ldrb	r3, [r2, r3]
 8000bba:	f003 031f 	and.w	r3, r3, #31
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <HAL_Init+0x70>)
 8000bc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <HAL_Init+0x74>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f814 	bl	8000bfc <HAL_InitTick>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e002      	b.n	8000be4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bde:	f7ff fde9 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	08004578 	.word	0x08004578
 8000bf4:	24000004 	.word	0x24000004
 8000bf8:	24000000 	.word	0x24000000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_InitTick+0x60>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e021      	b.n	8000c54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_InitTick+0x64>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_InitTick+0x60>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f921 	bl	8000e6e <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 f8f9 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x68>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2400000c 	.word	0x2400000c
 8000c60:	24000000 	.word	0x24000000
 8000c64:	24000008 	.word	0x24000008

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2400000c 	.word	0x2400000c
 8000c8c:	24000124 	.word	0x24000124

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	24000124 	.word	0x24000124

08000ca8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetREVID+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	0c1b      	lsrs	r3, r3, #16
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	5c001000 	.word	0x5c001000

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00
 8000d04:	05fa0000 	.word	0x05fa0000

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff47 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff5e 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff90 	bl	8000d78 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5f 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffb2 	bl	8000de0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e96:	4b89      	ldr	r3, [pc, #548]	; (80010bc <HAL_GPIO_Init+0x234>)
 8000e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e9a:	e194      	b.n	80011c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8186 	beq.w	80011c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d00b      	beq.n	8000ed4 <HAL_GPIO_Init+0x4c>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	2b11      	cmp	r3, #17
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b12      	cmp	r3, #18
 8000ed2:	d130      	bne.n	8000f36 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 0201 	and.w	r2, r3, #1
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0xee>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d123      	bne.n	8000fbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	69b9      	ldr	r1, [r7, #24]
 8000fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0203 	and.w	r2, r3, #3
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80e0 	beq.w	80011c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x238>)
 8001002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <HAL_GPIO_Init+0x238>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_GPIO_Init+0x238>)
 8001012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <HAL_GPIO_Init+0x23c>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <HAL_GPIO_Init+0x240>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d052      	beq.n	80010f0 <HAL_GPIO_Init+0x268>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <HAL_GPIO_Init+0x244>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d031      	beq.n	80010b6 <HAL_GPIO_Init+0x22e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_GPIO_Init+0x248>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d02b      	beq.n	80010b2 <HAL_GPIO_Init+0x22a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <HAL_GPIO_Init+0x24c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x226>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <HAL_GPIO_Init+0x250>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x222>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_GPIO_Init+0x254>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x21e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <HAL_GPIO_Init+0x258>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x21a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_GPIO_Init+0x25c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x216>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <HAL_GPIO_Init+0x260>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x212>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a17      	ldr	r2, [pc, #92]	; (80010ec <HAL_GPIO_Init+0x264>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x20e>
 8001092:	2309      	movs	r3, #9
 8001094:	e02d      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 8001096:	230a      	movs	r3, #10
 8001098:	e02b      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 800109a:	2308      	movs	r3, #8
 800109c:	e029      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 800109e:	2307      	movs	r3, #7
 80010a0:	e027      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 80010a2:	2306      	movs	r3, #6
 80010a4:	e025      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 80010a6:	2305      	movs	r3, #5
 80010a8:	e023      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 80010aa:	2304      	movs	r3, #4
 80010ac:	e021      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 80010ae:	2303      	movs	r3, #3
 80010b0:	e01f      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e01d      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e01b      	b.n	80010f2 <HAL_GPIO_Init+0x26a>
 80010ba:	bf00      	nop
 80010bc:	58000080 	.word	0x58000080
 80010c0:	58024400 	.word	0x58024400
 80010c4:	58000400 	.word	0x58000400
 80010c8:	58020000 	.word	0x58020000
 80010cc:	58020400 	.word	0x58020400
 80010d0:	58020800 	.word	0x58020800
 80010d4:	58020c00 	.word	0x58020c00
 80010d8:	58021000 	.word	0x58021000
 80010dc:	58021400 	.word	0x58021400
 80010e0:	58021800 	.word	0x58021800
 80010e4:	58021c00 	.word	0x58021c00
 80010e8:	58022000 	.word	0x58022000
 80010ec:	58022400 	.word	0x58022400
 80010f0:	2300      	movs	r3, #0
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	f002 0203 	and.w	r2, r2, #3
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	4093      	lsls	r3, r2
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001102:	4938      	ldr	r1, [pc, #224]	; (80011e4 <HAL_GPIO_Init+0x35c>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800118a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3301      	adds	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f47f ae63 	bne.w	8000e9c <HAL_GPIO_Init+0x14>
  }
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	3724      	adds	r7, #36	; 0x24
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58000400 	.word	0x58000400

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	58024800 	.word	0x58024800

0800123c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_PWREx_ConfigSupply+0x70>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b04      	cmp	r3, #4
 800124e:	d00a      	beq.n	8001266 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_PWREx_ConfigSupply+0x70>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d001      	beq.n	8001262 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e01f      	b.n	80012a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e01d      	b.n	80012a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_PWREx_ConfigSupply+0x70>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f023 0207 	bic.w	r2, r3, #7
 800126e:	490f      	ldr	r1, [pc, #60]	; (80012ac <HAL_PWREx_ConfigSupply+0x70>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4313      	orrs	r3, r2
 8001274:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001276:	f7ff fd0b 	bl	8000c90 <HAL_GetTick>
 800127a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800127c:	e009      	b.n	8001292 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800127e:	f7ff fd07 	bl	8000c90 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800128c:	d901      	bls.n	8001292 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e007      	b.n	80012a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_PWREx_ConfigSupply+0x70>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800129e:	d1ee      	bne.n	800127e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	58024800 	.word	0x58024800

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e3fd      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8087 	beq.w	80013de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d0:	4b99      	ldr	r3, [pc, #612]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012da:	4b97      	ldr	r3, [pc, #604]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	2b10      	cmp	r3, #16
 80012e4:	d007      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46>
 80012e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e8:	2b18      	cmp	r3, #24
 80012ea:	d110      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d10b      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f6:	4b90      	ldr	r3, [pc, #576]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d06c      	beq.n	80013dc <HAL_RCC_OscConfig+0x12c>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d168      	bne.n	80013dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e3d7      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x76>
 8001318:	4b87      	ldr	r3, [pc, #540]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a86      	ldr	r2, [pc, #536]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800131e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e02e      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x98>
 800132e:	4b82      	ldr	r3, [pc, #520]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a81      	ldr	r2, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b7f      	ldr	r3, [pc, #508]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7e      	ldr	r2, [pc, #504]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0xbc>
 8001352:	4b79      	ldr	r3, [pc, #484]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a78      	ldr	r2, [pc, #480]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a75      	ldr	r2, [pc, #468]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 800136c:	4b72      	ldr	r3, [pc, #456]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a71      	ldr	r2, [pc, #452]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a6e      	ldr	r2, [pc, #440]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fc80 	bl	8000c90 <HAL_GetTick>
 8001390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fc7c 	bl	8000c90 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e38b      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a6:	4b64      	ldr	r3, [pc, #400]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xe4>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc6c 	bl	8000c90 <HAL_GetTick>
 80013b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fc68 	bl	8000c90 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e377      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ce:	4b5a      	ldr	r3, [pc, #360]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x10c>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80ae 	beq.w	8001548 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ec:	4b52      	ldr	r3, [pc, #328]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_RCC_OscConfig+0x162>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b18      	cmp	r3, #24
 8001406:	d13a      	bne.n	800147e <HAL_RCC_OscConfig+0x1ce>
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d135      	bne.n	800147e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001412:	4b49      	ldr	r3, [pc, #292]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x17a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e349      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142a:	f7ff fc3d 	bl	8000ca8 <HAL_GetREVID>
 800142e:	4603      	mov	r3, r0
 8001430:	f241 0203 	movw	r2, #4099	; 0x1003
 8001434:	4293      	cmp	r3, r2
 8001436:	d817      	bhi.n	8001468 <HAL_RCC_OscConfig+0x1b8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	2b40      	cmp	r3, #64	; 0x40
 800143e:	d108      	bne.n	8001452 <HAL_RCC_OscConfig+0x1a2>
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001448:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800144a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001450:	e07a      	b.n	8001548 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	031b      	lsls	r3, r3, #12
 8001460:	4935      	ldr	r1, [pc, #212]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001462:	4313      	orrs	r3, r2
 8001464:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001466:	e06f      	b.n	8001548 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	4930      	ldr	r1, [pc, #192]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800147c:	e064      	b.n	8001548 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d045      	beq.n	8001512 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 0219 	bic.w	r2, r3, #25
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	4929      	ldr	r1, [pc, #164]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fbfa 	bl	8000c90 <HAL_GetTick>
 800149c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fbf6 	bl	8000c90 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e305      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	f7ff fbf3 	bl	8000ca8 <HAL_GetREVID>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d817      	bhi.n	80014fc <HAL_RCC_OscConfig+0x24c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	2b40      	cmp	r3, #64	; 0x40
 80014d2:	d108      	bne.n	80014e6 <HAL_RCC_OscConfig+0x236>
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80014dc:	4a16      	ldr	r2, [pc, #88]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80014de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e2:	6053      	str	r3, [r2, #4]
 80014e4:	e030      	b.n	8001548 <HAL_RCC_OscConfig+0x298>
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	031b      	lsls	r3, r3, #12
 80014f4:	4910      	ldr	r1, [pc, #64]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
 80014fa:	e025      	b.n	8001548 <HAL_RCC_OscConfig+0x298>
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	490b      	ldr	r1, [pc, #44]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
 8001510:	e01a      	b.n	8001548 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff fbb7 	bl	8000c90 <HAL_GetTick>
 8001522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fbb3 	bl	8000c90 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d903      	bls.n	800153c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e2c2      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
 8001538:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800153c:	4b94      	ldr	r3, [pc, #592]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ee      	bne.n	8001526 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a9 	beq.w	80016a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001556:	4b8e      	ldr	r3, [pc, #568]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800155e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001560:	4b8b      	ldr	r3, [pc, #556]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b08      	cmp	r3, #8
 800156a:	d007      	beq.n	800157c <HAL_RCC_OscConfig+0x2cc>
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b18      	cmp	r3, #24
 8001570:	d13a      	bne.n	80015e8 <HAL_RCC_OscConfig+0x338>
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d135      	bne.n	80015e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800157c:	4b84      	ldr	r3, [pc, #528]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_OscConfig+0x2e4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2b80      	cmp	r3, #128	; 0x80
 800158e:	d001      	beq.n	8001594 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e294      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001594:	f7ff fb88 	bl	8000ca8 <HAL_GetREVID>
 8001598:	4603      	mov	r3, r0
 800159a:	f241 0203 	movw	r2, #4099	; 0x1003
 800159e:	4293      	cmp	r3, r2
 80015a0:	d817      	bhi.n	80015d2 <HAL_RCC_OscConfig+0x322>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	2b20      	cmp	r3, #32
 80015a8:	d108      	bne.n	80015bc <HAL_RCC_OscConfig+0x30c>
 80015aa:	4b79      	ldr	r3, [pc, #484]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80015b2:	4a77      	ldr	r2, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80015b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015ba:	e075      	b.n	80016a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015bc:	4b74      	ldr	r3, [pc, #464]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	069b      	lsls	r3, r3, #26
 80015ca:	4971      	ldr	r1, [pc, #452]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015d0:	e06a      	b.n	80016a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015d2:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	061b      	lsls	r3, r3, #24
 80015e0:	496b      	ldr	r1, [pc, #428]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015e6:	e05f      	b.n	80016a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d042      	beq.n	8001676 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015f0:	4b67      	ldr	r3, [pc, #412]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a66      	ldr	r2, [pc, #408]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80015f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb48 	bl	8000c90 <HAL_GetTick>
 8001600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001604:	f7ff fb44 	bl	8000c90 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e253      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001616:	4b5e      	ldr	r3, [pc, #376]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001622:	f7ff fb41 	bl	8000ca8 <HAL_GetREVID>
 8001626:	4603      	mov	r3, r0
 8001628:	f241 0203 	movw	r2, #4099	; 0x1003
 800162c:	4293      	cmp	r3, r2
 800162e:	d817      	bhi.n	8001660 <HAL_RCC_OscConfig+0x3b0>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	2b20      	cmp	r3, #32
 8001636:	d108      	bne.n	800164a <HAL_RCC_OscConfig+0x39a>
 8001638:	4b55      	ldr	r3, [pc, #340]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001640:	4a53      	ldr	r2, [pc, #332]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001646:	6053      	str	r3, [r2, #4]
 8001648:	e02e      	b.n	80016a8 <HAL_RCC_OscConfig+0x3f8>
 800164a:	4b51      	ldr	r3, [pc, #324]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	069b      	lsls	r3, r3, #26
 8001658:	494d      	ldr	r1, [pc, #308]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
 800165e:	e023      	b.n	80016a8 <HAL_RCC_OscConfig+0x3f8>
 8001660:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	061b      	lsls	r3, r3, #24
 800166e:	4948      	ldr	r1, [pc, #288]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001670:	4313      	orrs	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
 8001674:	e018      	b.n	80016a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a45      	ldr	r2, [pc, #276]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800167c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff fb05 	bl	8000c90 <HAL_GetTick>
 8001686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800168a:	f7ff fb01 	bl	8000c90 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e210      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800169c:	4b3c      	ldr	r3, [pc, #240]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d036      	beq.n	8001722 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d019      	beq.n	80016f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c0:	4a33      	ldr	r2, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fae2 	bl	8000c90 <HAL_GetTick>
 80016cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fade 	bl	8000c90 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1ed      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80016e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x420>
 80016ee:	e018      	b.n	8001722 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80016f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fac8 	bl	8000c90 <HAL_GetTick>
 8001700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fac4 	bl	8000c90 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1d3      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	2b00      	cmp	r3, #0
 800172c:	d038      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d019      	beq.n	800176a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800173c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001742:	f7ff faa5 	bl	8000c90 <HAL_GetTick>
 8001746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800174a:	f7ff faa1 	bl	8000c90 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1b0      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x49a>
 8001768:	e01a      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_RCC_OscConfig+0x4e0>)
 8001770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001774:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001776:	f7ff fa8b 	bl	8000c90 <HAL_GetTick>
 800177a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800177e:	f7ff fa87 	bl	8000c90 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d903      	bls.n	8001794 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e196      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
 8001790:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001794:	4b99      	ldr	r3, [pc, #612]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8081 	beq.w	80018b0 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80017ae:	4b94      	ldr	r3, [pc, #592]	; (8001a00 <HAL_RCC_OscConfig+0x750>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a93      	ldr	r2, [pc, #588]	; (8001a00 <HAL_RCC_OscConfig+0x750>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80017ba:	f7ff fa69 	bl	8000c90 <HAL_GetTick>
 80017be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017c2:	f7ff fa65 	bl	8000c90 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b64      	cmp	r3, #100	; 0x64
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e174      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017d4:	4b8a      	ldr	r3, [pc, #552]	; (8001a00 <HAL_RCC_OscConfig+0x750>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x546>
 80017e8:	4b84      	ldr	r3, [pc, #528]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	4a83      	ldr	r2, [pc, #524]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6713      	str	r3, [r2, #112]	; 0x70
 80017f4:	e02d      	b.n	8001852 <HAL_RCC_OscConfig+0x5a2>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x568>
 80017fe:	4b7f      	ldr	r3, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a7e      	ldr	r2, [pc, #504]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a7b      	ldr	r2, [pc, #492]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	e01c      	b.n	8001852 <HAL_RCC_OscConfig+0x5a2>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d10c      	bne.n	800183a <HAL_RCC_OscConfig+0x58a>
 8001820:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	4a75      	ldr	r2, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
 800182c:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	4a72      	ldr	r2, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
 8001838:	e00b      	b.n	8001852 <HAL_RCC_OscConfig+0x5a2>
 800183a:	4b70      	ldr	r3, [pc, #448]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a6f      	ldr	r2, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
 8001846:	4b6d      	ldr	r3, [pc, #436]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	4a6c      	ldr	r2, [pc, #432]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d015      	beq.n	8001886 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fa19 	bl	8000c90 <HAL_GetTick>
 800185e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f7ff fa15 	bl	8000c90 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e122      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001878:	4b60      	ldr	r3, [pc, #384]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ee      	beq.n	8001862 <HAL_RCC_OscConfig+0x5b2>
 8001884:	e014      	b.n	80018b0 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff fa03 	bl	8000c90 <HAL_GetTick>
 800188a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7ff f9ff 	bl	8000c90 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	; 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e10c      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018a4:	4b55      	ldr	r3, [pc, #340]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ee      	bne.n	800188e <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8101 	beq.w	8001abc <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018ba:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018c2:	2b18      	cmp	r3, #24
 80018c4:	f000 80bc 	beq.w	8001a40 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	f040 809d 	bne.w	8001a0c <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a49      	ldr	r2, [pc, #292]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80018d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff f9d7 	bl	8000c90 <HAL_GetTick>
 80018e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff f9d3 	bl	8000c90 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e0e2      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018f8:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001908:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <HAL_RCC_OscConfig+0x754>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	430a      	orrs	r2, r1
 8001918:	4938      	ldr	r1, [pc, #224]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 800191a:	4313      	orrs	r3, r2
 800191c:	628b      	str	r3, [r1, #40]	; 0x28
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	3b01      	subs	r3, #1
 8001924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192c:	3b01      	subs	r3, #1
 800192e:	025b      	lsls	r3, r3, #9
 8001930:	b29b      	uxth	r3, r3
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001938:	3b01      	subs	r3, #1
 800193a:	041b      	lsls	r3, r3, #16
 800193c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001946:	3b01      	subs	r3, #1
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800194e:	492b      	ldr	r1, [pc, #172]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001950:	4313      	orrs	r3, r2
 8001952:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	4a28      	ldr	r2, [pc, #160]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_RCC_OscConfig+0x758>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800196c:	00d2      	lsls	r2, r2, #3
 800196e:	4923      	ldr	r1, [pc, #140]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001970:	4313      	orrs	r3, r2
 8001972:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	f023 020c 	bic.w	r2, r3, #12
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	491e      	ldr	r1, [pc, #120]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001982:	4313      	orrs	r3, r2
 8001984:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f023 0202 	bic.w	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	491a      	ldr	r1, [pc, #104]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 8001994:	4313      	orrs	r3, r2
 8001996:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80019aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	4a11      	ldr	r2, [pc, #68]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80019b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f95c 	bl	8000c90 <HAL_GetTick>
 80019d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f958 	bl	8000c90 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e067      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019ee:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_RCC_OscConfig+0x74c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x72c>
 80019fa:	e05f      	b.n	8001abc <HAL_RCC_OscConfig+0x80c>
 80019fc:	58024400 	.word	0x58024400
 8001a00:	58024800 	.word	0x58024800
 8001a04:	fffffc0c 	.word	0xfffffc0c
 8001a08:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_RCC_OscConfig+0x818>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2d      	ldr	r2, [pc, #180]	; (8001ac8 <HAL_RCC_OscConfig+0x818>)
 8001a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff f93a 	bl	8000c90 <HAL_GetTick>
 8001a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f936 	bl	8000c90 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e045      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_RCC_OscConfig+0x818>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x770>
 8001a3e:	e03d      	b.n	8001abc <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_RCC_OscConfig+0x818>)
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_RCC_OscConfig+0x818>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d031      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f003 0203 	and.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d12a      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d122      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d11a      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	0a5b      	lsrs	r3, r3, #9
 8001a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d111      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	0e1b      	lsrs	r3, r3, #24
 8001aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3730      	adds	r7, #48	; 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	58024400 	.word	0x58024400

08001acc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e19c      	b.n	8001e1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b8a      	ldr	r3, [pc, #552]	; (8001d0c <HAL_RCC_ClockConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d910      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b87      	ldr	r3, [pc, #540]	; (8001d0c <HAL_RCC_ClockConfig+0x240>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 020f 	bic.w	r2, r3, #15
 8001af6:	4985      	ldr	r1, [pc, #532]	; (8001d0c <HAL_RCC_ClockConfig+0x240>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b83      	ldr	r3, [pc, #524]	; (8001d0c <HAL_RCC_ClockConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e184      	b.n	8001e1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d908      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	4975      	ldr	r1, [pc, #468]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d010      	beq.n	8001b6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d908      	bls.n	8001b6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	496a      	ldr	r1, [pc, #424]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d908      	bls.n	8001b9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b88:	4b61      	ldr	r3, [pc, #388]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	495e      	ldr	r1, [pc, #376]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d010      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d908      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001bb6:	4b56      	ldr	r3, [pc, #344]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4953      	ldr	r1, [pc, #332]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d010      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d908      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be4:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f023 020f 	bic.w	r2, r3, #15
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4947      	ldr	r1, [pc, #284]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d055      	beq.n	8001cae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4940      	ldr	r1, [pc, #256]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c1c:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d121      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0f6      	b.n	8001e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c34:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d115      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0ea      	b.n	8001e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0de      	b.n	8001e1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0d6      	b.n	8001e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f023 0207 	bic.w	r2, r3, #7
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4925      	ldr	r1, [pc, #148]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f807 	bl	8000c90 <HAL_GetTick>
 8001c82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c86:	f7ff f803 	bl	8000c90 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0be      	b.n	8001e1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d1eb      	bne.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d010      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d208      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f023 020f 	bic.w	r2, r3, #15
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_RCC_ClockConfig+0x244>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_ClockConfig+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d214      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_RCC_ClockConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 020f 	bic.w	r2, r3, #15
 8001cf2:	4906      	ldr	r1, [pc, #24]	; (8001d0c <HAL_RCC_ClockConfig+0x240>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_RCC_ClockConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e086      	b.n	8001e1a <HAL_RCC_ClockConfig+0x34e>
 8001d0c:	52002000 	.word	0x52002000
 8001d10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d208      	bcs.n	8001d42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d30:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4939      	ldr	r1, [pc, #228]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d208      	bcs.n	8001d70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d5e:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	492e      	ldr	r1, [pc, #184]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d208      	bcs.n	8001d9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4922      	ldr	r1, [pc, #136]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d010      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d208      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4917      	ldr	r1, [pc, #92]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dcc:	f000 f834 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	4912      	ldr	r1, [pc, #72]	; (8001e28 <HAL_RCC_ClockConfig+0x35c>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_RCC_ClockConfig+0x358>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_RCC_ClockConfig+0x35c>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_RCC_ClockConfig+0x360>)
 8001e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x364>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x368>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fef4 	bl	8000bfc <HAL_InitTick>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	58024400 	.word	0x58024400
 8001e28:	08004578 	.word	0x08004578
 8001e2c:	24000004 	.word	0x24000004
 8001e30:	24000000 	.word	0x24000000
 8001e34:	24000008 	.word	0x24000008

08001e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e3e:	4bb3      	ldr	r3, [pc, #716]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e46:	2b18      	cmp	r3, #24
 8001e48:	f200 8155 	bhi.w	80020f6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001e4c:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001eb9 	.word	0x08001eb9
 8001e58:	080020f7 	.word	0x080020f7
 8001e5c:	080020f7 	.word	0x080020f7
 8001e60:	080020f7 	.word	0x080020f7
 8001e64:	080020f7 	.word	0x080020f7
 8001e68:	080020f7 	.word	0x080020f7
 8001e6c:	080020f7 	.word	0x080020f7
 8001e70:	080020f7 	.word	0x080020f7
 8001e74:	08001edf 	.word	0x08001edf
 8001e78:	080020f7 	.word	0x080020f7
 8001e7c:	080020f7 	.word	0x080020f7
 8001e80:	080020f7 	.word	0x080020f7
 8001e84:	080020f7 	.word	0x080020f7
 8001e88:	080020f7 	.word	0x080020f7
 8001e8c:	080020f7 	.word	0x080020f7
 8001e90:	080020f7 	.word	0x080020f7
 8001e94:	08001ee5 	.word	0x08001ee5
 8001e98:	080020f7 	.word	0x080020f7
 8001e9c:	080020f7 	.word	0x080020f7
 8001ea0:	080020f7 	.word	0x080020f7
 8001ea4:	080020f7 	.word	0x080020f7
 8001ea8:	080020f7 	.word	0x080020f7
 8001eac:	080020f7 	.word	0x080020f7
 8001eb0:	080020f7 	.word	0x080020f7
 8001eb4:	08001eeb 	.word	0x08001eeb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001eb8:	4b94      	ldr	r3, [pc, #592]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ec4:	4b91      	ldr	r3, [pc, #580]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	4a90      	ldr	r2, [pc, #576]	; (8002110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001ed6:	e111      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ed8:	4b8d      	ldr	r3, [pc, #564]	; (8002110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eda:	61bb      	str	r3, [r7, #24]
    break;
 8001edc:	e10e      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001ede:	4b8d      	ldr	r3, [pc, #564]	; (8002114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ee0:	61bb      	str	r3, [r7, #24]
    break;
 8001ee2:	e10b      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ee4:	4b8c      	ldr	r3, [pc, #560]	; (8002118 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ee6:	61bb      	str	r3, [r7, #24]
    break;
 8001ee8:	e108      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001eea:	4b88      	ldr	r3, [pc, #544]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ef4:	4b85      	ldr	r3, [pc, #532]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001efe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f00:	4b82      	ldr	r3, [pc, #520]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f0a:	4b80      	ldr	r3, [pc, #512]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0e:	08db      	lsrs	r3, r3, #3
 8001f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80e1 	beq.w	80020f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	f000 8083 	beq.w	800203c <HAL_RCC_GetSysClockFreq+0x204>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	f200 80a1 	bhi.w	8002080 <HAL_RCC_GetSysClockFreq+0x248>
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x114>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d056      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f4a:	e099      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f4c:	4b6f      	ldr	r3, [pc, #444]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d02d      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f58:	4b6c      	ldr	r3, [pc, #432]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	4a6b      	ldr	r2, [pc, #428]	; (8002110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f82:	4b62      	ldr	r3, [pc, #392]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800211c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001fb2:	e087      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002120 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fc6:	4b51      	ldr	r3, [pc, #324]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800211c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ff6:	e065      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002002:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002124 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800200a:	4b40      	ldr	r3, [pc, #256]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800201a:	ed97 6a02 	vldr	s12, [r7, #8]
 800201e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800211c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800202a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800202e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800203a:	e043      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002046:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002128 <HAL_RCC_GetSysClockFreq+0x2f0>
 800204a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800204e:	4b2f      	ldr	r3, [pc, #188]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800205e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002062:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800211c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800206a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800206e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800207e:	e021      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002124 <HAL_RCC_GetSysClockFreq+0x2ec>
 800208e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800211c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	0a5b      	lsrs	r3, r3, #9
 80020ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ce:	3301      	adds	r3, #1
 80020d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80020e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e8:	ee17 3a90 	vmov	r3, s15
 80020ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80020ee:	e005      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
    break;
 80020f4:	e002      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020f8:	61bb      	str	r3, [r7, #24]
    break;
 80020fa:	bf00      	nop
  }

  return sysclockfreq;
 80020fc:	69bb      	ldr	r3, [r7, #24]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	; 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	58024400 	.word	0x58024400
 8002110:	03d09000 	.word	0x03d09000
 8002114:	003d0900 	.word	0x003d0900
 8002118:	017d7840 	.word	0x017d7840
 800211c:	46000000 	.word	0x46000000
 8002120:	4c742400 	.word	0x4c742400
 8002124:	4a742400 	.word	0x4a742400
 8002128:	4bbebc20 	.word	0x4bbebc20

0800212c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002134:	2300      	movs	r3, #0
 8002136:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002138:	2300      	movs	r3, #0
 800213a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d03f      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002150:	d02a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002152:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002156:	d824      	bhi.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800215c:	d018      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800215e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002162:	d81e      	bhi.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800216c:	d007      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800216e:	e018      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002170:	4ba3      	ldr	r3, [pc, #652]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	4aa2      	ldr	r2, [pc, #648]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800217c:	e015      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	2102      	movs	r1, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f000 ff17 	bl	8002fb8 <RCCEx_PLL2_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800218e:	e00c      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3324      	adds	r3, #36	; 0x24
 8002194:	2102      	movs	r1, #2
 8002196:	4618      	mov	r0, r3
 8002198:	f000 ffc0 	bl	800311c <RCCEx_PLL3_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80021a0:	e003      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
      break;
 80021a6:	e000      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80021b0:	4b93      	ldr	r3, [pc, #588]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021bc:	4990      	ldr	r1, [pc, #576]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	650b      	str	r3, [r1, #80]	; 0x50
 80021c2:	e001      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d03d      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d826      	bhi.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	080021f9 	.word	0x080021f9
 80021e8:	08002207 	.word	0x08002207
 80021ec:	08002219 	.word	0x08002219
 80021f0:	08002231 	.word	0x08002231
 80021f4:	08002231 	.word	0x08002231
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021f8:	4b81      	ldr	r3, [pc, #516]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	4a80      	ldr	r2, [pc, #512]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002204:	e015      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fed3 	bl	8002fb8 <RCCEx_PLL2_Config>
 8002212:	4603      	mov	r3, r0
 8002214:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002216:	e00c      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3324      	adds	r3, #36	; 0x24
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f000 ff7c 	bl	800311c <RCCEx_PLL3_Config>
 8002224:	4603      	mov	r3, r0
 8002226:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002228:	e003      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
      break;
 800222e:	e000      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002232:	7dfb      	ldrb	r3, [r7, #23]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002238:	4b71      	ldr	r3, [pc, #452]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800223a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223c:	f023 0207 	bic.w	r2, r3, #7
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	496e      	ldr	r1, [pc, #440]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	650b      	str	r3, [r1, #80]	; 0x50
 800224a:	e001      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002258:	2b00      	cmp	r3, #0
 800225a:	d042      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002264:	d02b      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226a:	d825      	bhi.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800226c:	2bc0      	cmp	r3, #192	; 0xc0
 800226e:	d028      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002270:	2bc0      	cmp	r3, #192	; 0xc0
 8002272:	d821      	bhi.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d016      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d81d      	bhi.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d007      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002284:	e018      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002286:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	4a5d      	ldr	r2, [pc, #372]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800228c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002292:	e017      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3304      	adds	r3, #4
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fe8c 	bl	8002fb8 <RCCEx_PLL2_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80022a4:	e00e      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3324      	adds	r3, #36	; 0x24
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 ff35 	bl	800311c <RCCEx_PLL3_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80022b6:	e005      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	75fb      	strb	r3, [r7, #23]
      break;
 80022bc:	e002      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80022be:	bf00      	nop
 80022c0:	e000      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80022c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80022ca:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	494a      	ldr	r1, [pc, #296]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	650b      	str	r3, [r1, #80]	; 0x50
 80022dc:	e001      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022de:	7dfb      	ldrb	r3, [r7, #23]
 80022e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d049      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80022f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022f8:	d030      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80022fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022fe:	d82a      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002300:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002304:	d02c      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002306:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800230a:	d824      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800230c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002310:	d018      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002316:	d81e      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800231c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002320:	d007      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002322:	e018      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	4a35      	ldr	r2, [pc, #212]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800232a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002330:	e017      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fe3d 	bl	8002fb8 <RCCEx_PLL2_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002342:	e00e      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3324      	adds	r3, #36	; 0x24
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fee6 	bl	800311c <RCCEx_PLL3_Config>
 8002350:	4603      	mov	r3, r0
 8002352:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002354:	e005      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
      break;
 800235a:	e002      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800235c:	bf00      	nop
 800235e:	e000      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002376:	4922      	ldr	r1, [pc, #136]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	658b      	str	r3, [r1, #88]	; 0x58
 800237c:	e001      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238a:	2b00      	cmp	r3, #0
 800238c:	d04b      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002398:	d030      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239e:	d82a      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80023a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a4:	d02e      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80023a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023aa:	d824      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80023ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023b0:	d018      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80023b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023b6:	d81e      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c0:	d007      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80023c2:	e018      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023d0:	e019      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fded 	bl	8002fb8 <RCCEx_PLL2_Config>
 80023de:	4603      	mov	r3, r0
 80023e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80023e2:	e010      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3324      	adds	r3, #36	; 0x24
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fe96 	bl	800311c <RCCEx_PLL3_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023f4:	e007      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
      break;
 80023fa:	e004      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80023fc:	bf00      	nop
 80023fe:	e002      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002400:	58024400 	.word	0x58024400
      break;
 8002404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800240c:	4b99      	ldr	r3, [pc, #612]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800241a:	4996      	ldr	r1, [pc, #600]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800241c:	4313      	orrs	r3, r2
 800241e:	658b      	str	r3, [r1, #88]	; 0x58
 8002420:	e001      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
 8002424:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d032      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	2b30      	cmp	r3, #48	; 0x30
 8002438:	d01c      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800243a:	2b30      	cmp	r3, #48	; 0x30
 800243c:	d817      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800243e:	2b20      	cmp	r3, #32
 8002440:	d00c      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002442:	2b20      	cmp	r3, #32
 8002444:	d813      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800244a:	2b10      	cmp	r3, #16
 800244c:	d10f      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800244e:	4b89      	ldr	r3, [pc, #548]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	4a88      	ldr	r2, [pc, #544]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800245a:	e00e      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	2102      	movs	r1, #2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fda8 	bl	8002fb8 <RCCEx_PLL2_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800246c:	e005      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
      break;
 8002472:	e002      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002474:	bf00      	nop
 8002476:	e000      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800247a:	7dfb      	ldrb	r3, [r7, #23]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002480:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	4979      	ldr	r1, [pc, #484]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800248e:	4313      	orrs	r3, r2
 8002490:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002492:	e001      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d047      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ac:	d030      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80024ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024b2:	d82a      	bhi.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80024b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024b8:	d02c      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80024ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024be:	d824      	bhi.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80024c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c4:	d018      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80024c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ca:	d81e      	bhi.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80024d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d4:	d007      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80024d6:	e018      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024d8:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	4a65      	ldr	r2, [pc, #404]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80024e4:	e017      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fd63 	bl	8002fb8 <RCCEx_PLL2_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80024f6:	e00e      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3324      	adds	r3, #36	; 0x24
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fe0c 	bl	800311c <RCCEx_PLL3_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002508:	e005      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
      break;
 800250e:	e002      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002510:	bf00      	nop
 8002512:	e000      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800251c:	4b55      	ldr	r3, [pc, #340]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800251e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002520:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	4952      	ldr	r1, [pc, #328]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800252a:	4313      	orrs	r3, r2
 800252c:	650b      	str	r3, [r1, #80]	; 0x50
 800252e:	e001      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d049      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d02e      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800254a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254e:	d828      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002554:	d02a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002556:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800255a:	d822      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800255c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002560:	d026      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002562:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002566:	d81c      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800256c:	d010      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800256e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002572:	d816      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01d      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257c:	d111      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fd17 	bl	8002fb8 <RCCEx_PLL2_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800258e:	e012      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3324      	adds	r3, #36	; 0x24
 8002594:	2101      	movs	r1, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fdc0 	bl	800311c <RCCEx_PLL3_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80025a0:	e009      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
      break;
 80025a6:	e006      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80025a8:	bf00      	nop
 80025aa:	e004      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80025ac:	bf00      	nop
 80025ae:	e002      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80025b0:	bf00      	nop
 80025b2:	e000      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80025b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c8:	492a      	ldr	r1, [pc, #168]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	650b      	str	r3, [r1, #80]	; 0x50
 80025ce:	e001      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d04d      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80025e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ea:	d02e      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80025ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f0:	d828      	bhi.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80025f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f6:	d02a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d822      	bhi.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80025fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002602:	d026      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002604:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002608:	d81c      	bhi.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800260a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800260e:	d010      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002614:	d816      	bhi.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01d      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800261a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800261e:	d111      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	2101      	movs	r1, #1
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fcc6 	bl	8002fb8 <RCCEx_PLL2_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002630:	e012      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3324      	adds	r3, #36	; 0x24
 8002636:	2101      	movs	r1, #1
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fd6f 	bl	800311c <RCCEx_PLL3_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002642:	e009      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]
      break;
 8002648:	e006      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800264a:	bf00      	nop
 800264c:	e004      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800264e:	bf00      	nop
 8002650:	e002      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002652:	bf00      	nop
 8002654:	e000      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800266c:	4901      	ldr	r1, [pc, #4]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800266e:	4313      	orrs	r3, r2
 8002670:	658b      	str	r3, [r1, #88]	; 0x58
 8002672:	e003      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02f      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002690:	d00e      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002696:	d814      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002698:	2b00      	cmp	r3, #0
 800269a:	d015      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800269c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026a0:	d10f      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026a2:	4baf      	ldr	r3, [pc, #700]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	4aae      	ldr	r2, [pc, #696]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026ae:	e00c      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3304      	adds	r3, #4
 80026b4:	2101      	movs	r1, #1
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fc7e 	bl	8002fb8 <RCCEx_PLL2_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026c0:	e003      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
      break;
 80026c6:	e000      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80026c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026d0:	4ba3      	ldr	r3, [pc, #652]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026dc:	49a0      	ldr	r1, [pc, #640]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	650b      	str	r3, [r1, #80]	; 0x50
 80026e2:	e001      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d032      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d81b      	bhi.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80026fc:	a201      	add	r2, pc, #4	; (adr r2, 8002704 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	0800273b 	.word	0x0800273b
 8002708:	08002715 	.word	0x08002715
 800270c:	08002723 	.word	0x08002723
 8002710:	0800273b 	.word	0x0800273b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002714:	4b92      	ldr	r3, [pc, #584]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	4a91      	ldr	r2, [pc, #580]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800271a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002720:	e00c      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	2102      	movs	r1, #2
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fc45 	bl	8002fb8 <RCCEx_PLL2_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002732:	e003      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	75fb      	strb	r3, [r7, #23]
      break;
 8002738:	e000      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800273a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002742:	4b87      	ldr	r3, [pc, #540]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4984      	ldr	r1, [pc, #528]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002750:	4313      	orrs	r3, r2
 8002752:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002754:	e001      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
 8002758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8086 	beq.w	8002874 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002768:	4b7e      	ldr	r3, [pc, #504]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a7d      	ldr	r2, [pc, #500]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800276e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002772:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002774:	f7fe fa8c 	bl	8000c90 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277a:	e009      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277c:	f7fe fa88 	bl	8000c90 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d902      	bls.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	75fb      	strb	r3, [r7, #23]
        break;
 800278e:	e005      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002790:	4b74      	ldr	r3, [pc, #464]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d166      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80027a2:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027ac:	4053      	eors	r3, r2
 80027ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d013      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027b6:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027c0:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a66      	ldr	r2, [pc, #408]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027cc:	4b64      	ldr	r3, [pc, #400]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a63      	ldr	r2, [pc, #396]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80027d8:	4a61      	ldr	r2, [pc, #388]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e8:	d115      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fa51 	bl	8000c90 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f0:	e00b      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fa4d 	bl	8000c90 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d902      	bls.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	75fb      	strb	r3, [r7, #23]
            break;
 8002808:	e005      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800280a:	4b55      	ldr	r3, [pc, #340]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0ed      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d126      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800282a:	d10d      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800282c:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800283a:	0919      	lsrs	r1, r3, #4
 800283c:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800283e:	400b      	ands	r3, r1
 8002840:	4947      	ldr	r1, [pc, #284]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002842:	4313      	orrs	r3, r2
 8002844:	610b      	str	r3, [r1, #16]
 8002846:	e005      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002848:	4b45      	ldr	r3, [pc, #276]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	4a44      	ldr	r2, [pc, #272]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800284e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002852:	6113      	str	r3, [r2, #16]
 8002854:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800285e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002862:	493f      	ldr	r1, [pc, #252]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002864:	4313      	orrs	r3, r2
 8002866:	670b      	str	r3, [r1, #112]	; 0x70
 8002868:	e004      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	75bb      	strb	r3, [r7, #22]
 800286e:	e001      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8085 	beq.w	800298c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002886:	2b28      	cmp	r3, #40	; 0x28
 8002888:	d866      	bhi.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800288a:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	0800296d 	.word	0x0800296d
 8002894:	08002959 	.word	0x08002959
 8002898:	08002959 	.word	0x08002959
 800289c:	08002959 	.word	0x08002959
 80028a0:	08002959 	.word	0x08002959
 80028a4:	08002959 	.word	0x08002959
 80028a8:	08002959 	.word	0x08002959
 80028ac:	08002959 	.word	0x08002959
 80028b0:	08002935 	.word	0x08002935
 80028b4:	08002959 	.word	0x08002959
 80028b8:	08002959 	.word	0x08002959
 80028bc:	08002959 	.word	0x08002959
 80028c0:	08002959 	.word	0x08002959
 80028c4:	08002959 	.word	0x08002959
 80028c8:	08002959 	.word	0x08002959
 80028cc:	08002959 	.word	0x08002959
 80028d0:	08002947 	.word	0x08002947
 80028d4:	08002959 	.word	0x08002959
 80028d8:	08002959 	.word	0x08002959
 80028dc:	08002959 	.word	0x08002959
 80028e0:	08002959 	.word	0x08002959
 80028e4:	08002959 	.word	0x08002959
 80028e8:	08002959 	.word	0x08002959
 80028ec:	08002959 	.word	0x08002959
 80028f0:	0800296d 	.word	0x0800296d
 80028f4:	08002959 	.word	0x08002959
 80028f8:	08002959 	.word	0x08002959
 80028fc:	08002959 	.word	0x08002959
 8002900:	08002959 	.word	0x08002959
 8002904:	08002959 	.word	0x08002959
 8002908:	08002959 	.word	0x08002959
 800290c:	08002959 	.word	0x08002959
 8002910:	0800296d 	.word	0x0800296d
 8002914:	08002959 	.word	0x08002959
 8002918:	08002959 	.word	0x08002959
 800291c:	08002959 	.word	0x08002959
 8002920:	08002959 	.word	0x08002959
 8002924:	08002959 	.word	0x08002959
 8002928:	08002959 	.word	0x08002959
 800292c:	08002959 	.word	0x08002959
 8002930:	0800296d 	.word	0x0800296d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fb3c 	bl	8002fb8 <RCCEx_PLL2_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002944:	e013      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3324      	adds	r3, #36	; 0x24
 800294a:	2101      	movs	r1, #1
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fbe5 	bl	800311c <RCCEx_PLL3_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002956:	e00a      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	75fb      	strb	r3, [r7, #23]
      break;
 800295c:	e007      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800295e:	bf00      	nop
 8002960:	58024400 	.word	0x58024400
 8002964:	58024800 	.word	0x58024800
 8002968:	00ffffcf 	.word	0x00ffffcf
      break;
 800296c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002974:	4b96      	ldr	r3, [pc, #600]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002980:	4993      	ldr	r1, [pc, #588]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	654b      	str	r3, [r1, #84]	; 0x54
 8002986:	e001      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d038      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299c:	2b05      	cmp	r3, #5
 800299e:	d821      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80029a0:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029eb 	.word	0x080029eb
 80029ac:	080029c1 	.word	0x080029c1
 80029b0:	080029d3 	.word	0x080029d3
 80029b4:	080029eb 	.word	0x080029eb
 80029b8:	080029eb 	.word	0x080029eb
 80029bc:	080029eb 	.word	0x080029eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	2101      	movs	r1, #1
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 faf6 	bl	8002fb8 <RCCEx_PLL2_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80029d0:	e00c      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3324      	adds	r3, #36	; 0x24
 80029d6:	2101      	movs	r1, #1
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fb9f 	bl	800311c <RCCEx_PLL3_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80029e2:	e003      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
      break;
 80029e8:	e000      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80029ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80029f2:	4b77      	ldr	r3, [pc, #476]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fe:	4974      	ldr	r1, [pc, #464]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	654b      	str	r3, [r1, #84]	; 0x54
 8002a04:	e001      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d03a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d821      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002a20:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a6b 	.word	0x08002a6b
 8002a2c:	08002a41 	.word	0x08002a41
 8002a30:	08002a53 	.word	0x08002a53
 8002a34:	08002a6b 	.word	0x08002a6b
 8002a38:	08002a6b 	.word	0x08002a6b
 8002a3c:	08002a6b 	.word	0x08002a6b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fab6 	bl	8002fb8 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a50:	e00c      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3324      	adds	r3, #36	; 0x24
 8002a56:	2101      	movs	r1, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fb5f 	bl	800311c <RCCEx_PLL3_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a62:	e003      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	75fb      	strb	r3, [r7, #23]
      break;
 8002a68:	e000      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a72:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	4953      	ldr	r1, [pc, #332]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	658b      	str	r3, [r1, #88]	; 0x58
 8002a86:	e001      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d04b      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa2:	d02e      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa8:	d828      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aae:	d02a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d822      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ab6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002aba:	d026      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002abc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ac0:	d81c      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac6:	d010      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d816      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01d      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad6:	d111      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fa6a 	bl	8002fb8 <RCCEx_PLL2_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ae8:	e012      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3324      	adds	r3, #36	; 0x24
 8002aee:	2102      	movs	r1, #2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fb13 	bl	800311c <RCCEx_PLL3_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002afa:	e009      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	75fb      	strb	r3, [r7, #23]
      break;
 8002b00:	e006      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002b02:	bf00      	nop
 8002b04:	e004      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002b06:	bf00      	nop
 8002b08:	e002      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10a      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b16:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b24:	492a      	ldr	r1, [pc, #168]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	654b      	str	r3, [r1, #84]	; 0x54
 8002b2a:	e001      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d04d      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b46:	d02e      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002b48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b4c:	d828      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b52:	d02a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b58:	d822      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002b5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b5e:	d026      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b64:	d81c      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6a:	d010      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b70:	d816      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01d      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d111      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fa18 	bl	8002fb8 <RCCEx_PLL2_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002b8c:	e012      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3324      	adds	r3, #36	; 0x24
 8002b92:	2102      	movs	r1, #2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fac1 	bl	800311c <RCCEx_PLL3_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002b9e:	e009      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba4:	e006      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e004      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002baa:	bf00      	nop
 8002bac:	e002      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc8:	4901      	ldr	r1, [pc, #4]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	658b      	str	r3, [r1, #88]	; 0x58
 8002bce:	e003      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d04b      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002bee:	d02e      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002bf0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002bf4:	d828      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfa:	d02a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c00:	d822      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002c02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c06:	d026      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002c08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c0c:	d81c      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c12:	d010      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c18:	d816      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01d      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c22:	d111      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f9c4 	bl	8002fb8 <RCCEx_PLL2_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c34:	e012      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3324      	adds	r3, #36	; 0x24
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fa6d 	bl	800311c <RCCEx_PLL3_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c46:	e009      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c4c:	e006      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e004      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002c52:	bf00      	nop
 8002c54:	e002      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002c62:	4b9d      	ldr	r3, [pc, #628]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c70:	4999      	ldr	r1, [pc, #612]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	658b      	str	r3, [r1, #88]	; 0x58
 8002c76:	e001      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c92:	d10a      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3324      	adds	r3, #36	; 0x24
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fa3e 	bl	800311c <RCCEx_PLL3_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002caa:	4b8b      	ldr	r3, [pc, #556]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb8:	4987      	ldr	r1, [pc, #540]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd4:	d10a      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3324      	adds	r3, #36	; 0x24
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fa1d 	bl	800311c <RCCEx_PLL3_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cec:	4b7a      	ldr	r3, [pc, #488]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	4977      	ldr	r1, [pc, #476]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d034      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d16:	d01d      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d1c:	d817      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d26:	d009      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002d28:	e011      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f941 	bl	8002fb8 <RCCEx_PLL2_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d3a:	e00c      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3324      	adds	r3, #36	; 0x24
 8002d40:	2102      	movs	r1, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f9ea 	bl	800311c <RCCEx_PLL3_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d4c:	e003      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
      break;
 8002d52:	e000      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d5c:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d6a:	495b      	ldr	r1, [pc, #364]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	658b      	str	r3, [r1, #88]	; 0x58
 8002d70:	e001      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d033      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d8c:	d01c      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002d8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d92:	d816      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d98:	d003      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d9e:	d007      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002da0:	e00f      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da2:	4b4d      	ldr	r3, [pc, #308]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	4a4c      	ldr	r2, [pc, #304]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002dae:	e00c      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3324      	adds	r3, #36	; 0x24
 8002db4:	2101      	movs	r1, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f9b0 	bl	800311c <RCCEx_PLL3_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002dc0:	e003      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dd0:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dde:	493e      	ldr	r1, [pc, #248]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	654b      	str	r3, [r1, #84]	; 0x54
 8002de4:	e001      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d029      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e02:	d007      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002e04:	e00f      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e06:	4b34      	ldr	r3, [pc, #208]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	4a33      	ldr	r2, [pc, #204]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e12:	e00b      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	2102      	movs	r1, #2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f8cc 	bl	8002fb8 <RCCEx_PLL2_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e24:	e002      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
      break;
 8002e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	4926      	ldr	r1, [pc, #152]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e44:	e001      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3324      	adds	r3, #36	; 0x24
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 f95d 	bl	800311c <RCCEx_PLL3_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d033      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e80:	d017      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e86:	d811      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8c:	d013      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e92:	d80b      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8002e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9c:	d106      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002eaa:	e007      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb0:	e004      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ece:	4902      	ldr	r1, [pc, #8]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	654b      	str	r3, [r1, #84]	; 0x54
 8002ed4:	e004      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8002ed6:	bf00      	nop
 8002ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	492e      	ldr	r1, [pc, #184]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f18:	4926      	ldr	r1, [pc, #152]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f36:	491f      	ldr	r1, [pc, #124]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f48:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f52:	6113      	str	r3, [r2, #16]
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f5e:	4915      	ldr	r1, [pc, #84]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	da08      	bge.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002f9e:	7dbb      	ldrb	r3, [r7, #22]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	58024400 	.word	0x58024400

08002fb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002fc6:	4b53      	ldr	r3, [pc, #332]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d101      	bne.n	8002fd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e099      	b.n	800310a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002fd6:	4b4f      	ldr	r3, [pc, #316]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a4e      	ldr	r2, [pc, #312]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8002fdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe2:	f7fd fe55 	bl	8000c90 <HAL_GetTick>
 8002fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002fe8:	e008      	b.n	8002ffc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002fea:	f7fd fe51 	bl	8000c90 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e086      	b.n	800310a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002ffc:	4b45      	ldr	r3, [pc, #276]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003008:	4b42      	ldr	r3, [pc, #264]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	031b      	lsls	r3, r3, #12
 8003016:	493f      	ldr	r1, [pc, #252]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8003018:	4313      	orrs	r3, r2
 800301a:	628b      	str	r3, [r1, #40]	; 0x28
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	3b01      	subs	r3, #1
 8003022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	3b01      	subs	r3, #1
 800302c:	025b      	lsls	r3, r3, #9
 800302e:	b29b      	uxth	r3, r3
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	3b01      	subs	r3, #1
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	3b01      	subs	r3, #1
 8003046:	061b      	lsls	r3, r3, #24
 8003048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800304c:	4931      	ldr	r1, [pc, #196]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 800304e:	4313      	orrs	r3, r2
 8003050:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003052:	4b30      	ldr	r3, [pc, #192]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	492d      	ldr	r1, [pc, #180]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8003060:	4313      	orrs	r3, r2
 8003062:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003064:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f023 0220 	bic.w	r2, r3, #32
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4928      	ldr	r1, [pc, #160]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8003072:	4313      	orrs	r3, r2
 8003074:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003076:	4b27      	ldr	r3, [pc, #156]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	4a26      	ldr	r2, [pc, #152]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 800307c:	f023 0310 	bic.w	r3, r3, #16
 8003080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8003084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <RCCEx_PLL2_Config+0x160>)
 8003088:	4013      	ands	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	69d2      	ldr	r2, [r2, #28]
 800308e:	00d2      	lsls	r2, r2, #3
 8003090:	4920      	ldr	r1, [pc, #128]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8003092:	4313      	orrs	r3, r2
 8003094:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003096:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	4a1e      	ldr	r2, [pc, #120]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 800309c:	f043 0310 	orr.w	r3, r3, #16
 80030a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 80030ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80030b4:	e00f      	b.n	80030d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 80030c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80030c8:	e005      	b.n	80030d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	4a11      	ldr	r2, [pc, #68]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 80030d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 80030dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e2:	f7fd fdd5 	bl	8000c90 <HAL_GetTick>
 80030e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80030e8:	e008      	b.n	80030fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80030ea:	f7fd fdd1 	bl	8000c90 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e006      	b.n	800310a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <RCCEx_PLL2_Config+0x15c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003108:	7bfb      	ldrb	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	58024400 	.word	0x58024400
 8003118:	ffff0007 	.word	0xffff0007

0800311c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800312a:	4b53      	ldr	r3, [pc, #332]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b03      	cmp	r3, #3
 8003134:	d101      	bne.n	800313a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e099      	b.n	800326e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800313a:	4b4f      	ldr	r3, [pc, #316]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a4e      	ldr	r2, [pc, #312]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003146:	f7fd fda3 	bl	8000c90 <HAL_GetTick>
 800314a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800314c:	e008      	b.n	8003160 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800314e:	f7fd fd9f 	bl	8000c90 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e086      	b.n	800326e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003160:	4b45      	ldr	r3, [pc, #276]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f0      	bne.n	800314e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800316c:	4b42      	ldr	r3, [pc, #264]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	051b      	lsls	r3, r3, #20
 800317a:	493f      	ldr	r1, [pc, #252]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	628b      	str	r3, [r1, #40]	; 0x28
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	3b01      	subs	r3, #1
 8003186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	3b01      	subs	r3, #1
 8003190:	025b      	lsls	r3, r3, #9
 8003192:	b29b      	uxth	r3, r3
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	3b01      	subs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	061b      	lsls	r3, r3, #24
 80031ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031b0:	4931      	ldr	r1, [pc, #196]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80031b6:	4b30      	ldr	r3, [pc, #192]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	492d      	ldr	r1, [pc, #180]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4928      	ldr	r1, [pc, #160]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	4a26      	ldr	r2, [pc, #152]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <RCCEx_PLL3_Config+0x160>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	69d2      	ldr	r2, [r2, #28]
 80031f2:	00d2      	lsls	r2, r2, #3
 80031f4:	4920      	ldr	r1, [pc, #128]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80031fa:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	4a1e      	ldr	r2, [pc, #120]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d106      	bne.n	800321a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	4a19      	ldr	r2, [pc, #100]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003212:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003218:	e00f      	b.n	800323a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d106      	bne.n	800322e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003220:	4b15      	ldr	r3, [pc, #84]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800322a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800322c:	e005      	b.n	800323a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	4a11      	ldr	r2, [pc, #68]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003238:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0e      	ldr	r2, [pc, #56]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003246:	f7fd fd23 	bl	8000c90 <HAL_GetTick>
 800324a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800324c:	e008      	b.n	8003260 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800324e:	f7fd fd1f 	bl	8000c90 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e006      	b.n	800326e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <RCCEx_PLL3_Config+0x15c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	58024400 	.word	0x58024400
 800327c:	ffff0007 	.word	0xffff0007

08003280 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d067      	beq.n	8003362 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd f996 	bl	80005d8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	22ca      	movs	r2, #202	; 0xca
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2253      	movs	r2, #83	; 0x53
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f99f 	bl	8003608 <RTC_EnterInitMode>
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d13b      	bne.n	800334c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6899      	ldr	r1, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b23      	ldr	r3, [pc, #140]	; (800336c <HAL_RTC_Init+0xec>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0419      	lsls	r1, r3, #16
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f9a7 	bl	8003668 <RTC_ExitInitMode>
 800331a:	4603      	mov	r3, r0
 800331c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d113      	bne.n	800334c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0203 	bic.w	r2, r2, #3
 8003332:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	22ff      	movs	r2, #255	; 0xff
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	ff8fffbf 	.word	0xff8fffbf

08003370 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_RTC_SetTime+0x1a>
 8003386:	2302      	movs	r3, #2
 8003388:	e089      	b.n	800349e <HAL_RTC_SetTime+0x12e>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	22ca      	movs	r2, #202	; 0xca
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2253      	movs	r2, #83	; 0x53
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f92c 	bl	8003608 <RTC_EnterInitMode>
 80033b0:	4603      	mov	r3, r0
 80033b2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d161      	bne.n	800347e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d126      	bne.n	800340e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2200      	movs	r2, #0
 80033d2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f983 	bl	80036e4 <RTC_ByteToBcd2>
 80033de:	4603      	mov	r3, r0
 80033e0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f97c 	bl	80036e4 <RTC_ByteToBcd2>
 80033ec:	4603      	mov	r3, r0
 80033ee:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80033f0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	789b      	ldrb	r3, [r3, #2]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f974 	bl	80036e4 <RTC_ByteToBcd2>
 80033fc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80033fe:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	78db      	ldrb	r3, [r3, #3]
 8003406:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e018      	b.n	8003440 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2200      	movs	r2, #0
 8003420:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800342e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003434:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	6979      	ldr	r1, [r7, #20]
 8003446:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <HAL_RTC_SetTime+0x138>)
 8003448:	400b      	ands	r3, r1
 800344a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800345a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	431a      	orrs	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f8f7 	bl	8003668 <RTC_ExitInitMode>
 800347a:	4603      	mov	r3, r0
 800347c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d103      	bne.n	8003494 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800349c:	7cfb      	ldrb	r3, [r7, #19]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	007f7f7f 	.word	0x007f7f7f

080034ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_RTC_SetDate+0x1a>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e073      	b.n	80035ae <HAL_RTC_SetDate+0x102>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10e      	bne.n	80034fa <HAL_RTC_SetDate+0x4e>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	f023 0310 	bic.w	r3, r3, #16
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	330a      	adds	r3, #10
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11c      	bne.n	800353a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	78db      	ldrb	r3, [r3, #3]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f8ed 	bl	80036e4 <RTC_ByteToBcd2>
 800350a:	4603      	mov	r3, r0
 800350c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f8e6 	bl	80036e4 <RTC_ByteToBcd2>
 8003518:	4603      	mov	r3, r0
 800351a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800351c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	789b      	ldrb	r3, [r3, #2]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f8de 	bl	80036e4 <RTC_ByteToBcd2>
 8003528:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800352a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e00e      	b.n	8003558 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	78db      	ldrb	r3, [r3, #3]
 800353e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003546:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800354c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	22ca      	movs	r2, #202	; 0xca
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2253      	movs	r2, #83	; 0x53
 8003566:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f84d 	bl	8003608 <RTC_EnterInitMode>
 800356e:	4603      	mov	r3, r0
 8003570:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	6979      	ldr	r1, [r7, #20]
 800357e:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <HAL_RTC_SetDate+0x10c>)
 8003580:	400b      	ands	r3, r1
 8003582:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f86f 	bl	8003668 <RTC_ExitInitMode>
 800358a:	4603      	mov	r3, r0
 800358c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	22ff      	movs	r2, #255	; 0xff
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]


}
 80035ae:	4618      	mov	r0, r3
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	00ffff3f 	.word	0x00ffff3f

080035bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035d2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 80035d4:	f7fd fb5c 	bl	8000c90 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035da:	e009      	b.n	80035f0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035dc:	f7fd fb58 	bl	8000c90 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ea:	d901      	bls.n	80035f0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e007      	b.n	8003600 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ee      	beq.n	80035dc <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f04f 32ff 	mov.w	r2, #4294967295
 800362a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800362c:	f7fd fb30 	bl	8000c90 <HAL_GetTick>
 8003630:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003632:	e00d      	b.n	8003650 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003634:	f7fd fb2c 	bl	8000c90 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003642:	d905      	bls.n	8003650 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2203      	movs	r2, #3
 800364c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ea      	beq.n	8003634 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <RTC_ExitInitMode+0x78>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <RTC_ExitInitMode+0x78>)
 800367a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <RTC_ExitInitMode+0x78>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10c      	bne.n	80036a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff95 	bl	80035bc <HAL_RTC_WaitForSynchro>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01e      	beq.n	80036d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2203      	movs	r2, #3
 800369c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e017      	b.n	80036d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <RTC_ExitInitMode+0x78>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <RTC_ExitInitMode+0x78>)
 80036ac:	f023 0320 	bic.w	r3, r3, #32
 80036b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ff82 	bl	80035bc <HAL_RTC_WaitForSynchro>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2203      	movs	r2, #3
 80036c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <RTC_ExitInitMode+0x78>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <RTC_ExitInitMode+0x78>)
 80036d0:	f043 0320 	orr.w	r3, r3, #32
 80036d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	58004000 	.word	0x58004000

080036e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80036f6:	e005      	b.n	8003704 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3301      	adds	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80036fe:	7afb      	ldrb	r3, [r7, #11]
 8003700:	3b0a      	subs	r3, #10
 8003702:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8003704:	7afb      	ldrb	r3, [r7, #11]
 8003706:	2b09      	cmp	r3, #9
 8003708:	d8f6      	bhi.n	80036f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	b2da      	uxtb	r2, r3
 8003712:	7afb      	ldrb	r3, [r7, #11]
 8003714:	4313      	orrs	r3, r2
 8003716:	b2db      	uxtb	r3, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0eb      	b.n	8003912 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a75      	ldr	r2, [pc, #468]	; (800391c <HAL_SPI_Init+0x1f8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00f      	beq.n	800376a <HAL_SPI_Init+0x46>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a74      	ldr	r2, [pc, #464]	; (8003920 <HAL_SPI_Init+0x1fc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00a      	beq.n	800376a <HAL_SPI_Init+0x46>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a72      	ldr	r2, [pc, #456]	; (8003924 <HAL_SPI_Init+0x200>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d005      	beq.n	800376a <HAL_SPI_Init+0x46>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	d901      	bls.n	800376a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0d3      	b.n	8003912 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8dc 	bl	8003928 <SPI_GetPacketSize>
 8003770:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a69      	ldr	r2, [pc, #420]	; (800391c <HAL_SPI_Init+0x1f8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00c      	beq.n	8003796 <HAL_SPI_Init+0x72>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a67      	ldr	r2, [pc, #412]	; (8003920 <HAL_SPI_Init+0x1fc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <HAL_SPI_Init+0x72>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a66      	ldr	r2, [pc, #408]	; (8003924 <HAL_SPI_Init+0x200>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d002      	beq.n	8003796 <HAL_SPI_Init+0x72>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b08      	cmp	r3, #8
 8003794:	d811      	bhi.n	80037ba <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800379a:	4a60      	ldr	r2, [pc, #384]	; (800391c <HAL_SPI_Init+0x1f8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5e      	ldr	r2, [pc, #376]	; (8003920 <HAL_SPI_Init+0x1fc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_SPI_Init+0x90>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5d      	ldr	r2, [pc, #372]	; (8003924 <HAL_SPI_Init+0x200>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d104      	bne.n	80037be <HAL_SPI_Init+0x9a>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d901      	bls.n	80037be <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0a9      	b.n	8003912 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fc ff88 	bl	80006e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f8:	d119      	bne.n	800382e <HAL_SPI_Init+0x10a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003802:	d103      	bne.n	800380c <HAL_SPI_Init+0xe8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10c      	bne.n	800382e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800381c:	d107      	bne.n	800382e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	431a      	orrs	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	ea42 0103 	orr.w	r1, r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	ea42 0103 	orr.w	r1, r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d113      	bne.n	80038ce <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40013000 	.word	0x40013000
 8003920:	40003800 	.word	0x40003800
 8003924:	40003c00 	.word	0x40003c00

08003928 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	3301      	adds	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	3301      	adds	r3, #1
 8003940:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3307      	adds	r3, #7
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	fb02 f303 	mul.w	r3, r2, r3
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e049      	b.n	8003a04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fd f875 	bl	8000a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3304      	adds	r3, #4
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f000 f945 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e0fd      	b.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b14      	cmp	r3, #20
 8003a32:	f200 80f0 	bhi.w	8003c16 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003a36:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003a91 	.word	0x08003a91
 8003a40:	08003c17 	.word	0x08003c17
 8003a44:	08003c17 	.word	0x08003c17
 8003a48:	08003c17 	.word	0x08003c17
 8003a4c:	08003ad1 	.word	0x08003ad1
 8003a50:	08003c17 	.word	0x08003c17
 8003a54:	08003c17 	.word	0x08003c17
 8003a58:	08003c17 	.word	0x08003c17
 8003a5c:	08003b13 	.word	0x08003b13
 8003a60:	08003c17 	.word	0x08003c17
 8003a64:	08003c17 	.word	0x08003c17
 8003a68:	08003c17 	.word	0x08003c17
 8003a6c:	08003b53 	.word	0x08003b53
 8003a70:	08003c17 	.word	0x08003c17
 8003a74:	08003c17 	.word	0x08003c17
 8003a78:	08003c17 	.word	0x08003c17
 8003a7c:	08003b95 	.word	0x08003b95
 8003a80:	08003c17 	.word	0x08003c17
 8003a84:	08003c17 	.word	0x08003c17
 8003a88:	08003c17 	.word	0x08003c17
 8003a8c:	08003bd5 	.word	0x08003bd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f962 	bl	8003d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0208 	orr.w	r2, r2, #8
 8003aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0204 	bic.w	r2, r2, #4
 8003aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6999      	ldr	r1, [r3, #24]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	619a      	str	r2, [r3, #24]
      break;
 8003ace:	e0a3      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f9d2 	bl	8003e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	619a      	str	r2, [r3, #24]
      break;
 8003b10:	e082      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fa3b 	bl	8003f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0208 	orr.w	r2, r2, #8
 8003b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0204 	bic.w	r2, r2, #4
 8003b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	61da      	str	r2, [r3, #28]
      break;
 8003b50:	e062      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 faa1 	bl	80040a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69d9      	ldr	r1, [r3, #28]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	021a      	lsls	r2, r3, #8
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	61da      	str	r2, [r3, #28]
      break;
 8003b92:	e041      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fae8 	bl	8004170 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0208 	orr.w	r2, r2, #8
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0204 	bic.w	r2, r2, #4
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bd2:	e021      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fb2a 	bl	8004234 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	021a      	lsls	r2, r3, #8
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c14:	e000      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003c16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop

08003c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a40      	ldr	r2, [pc, #256]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4a:	d00f      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a3d      	ldr	r2, [pc, #244]	; (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <TIM_Base_SetConfig+0x120>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3a      	ldr	r2, [pc, #232]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01f      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d01b      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d017      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <TIM_Base_SetConfig+0x120>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00f      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <TIM_Base_SetConfig+0x128>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <TIM_Base_SetConfig+0x130>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d108      	bne.n	8003cd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a10      	ldr	r2, [pc, #64]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a11      	ldr	r2, [pc, #68]	; (8003d54 <TIM_Base_SetConfig+0x128>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a10      	ldr	r2, [pc, #64]	; (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0f      	ldr	r2, [pc, #60]	; (8003d5c <TIM_Base_SetConfig+0x130>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000c00 	.word	0x40000c00
 8003d50:	40010400 	.word	0x40010400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800

08003d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f023 0201 	bic.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <TIM_OC1_SetConfig+0x108>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0302 	bic.w	r3, r3, #2
 8003da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <TIM_OC1_SetConfig+0x10c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00f      	beq.n	8003ddc <TIM_OC1_SetConfig+0x7c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <TIM_OC1_SetConfig+0x110>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <TIM_OC1_SetConfig+0x7c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <TIM_OC1_SetConfig+0x114>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_OC1_SetConfig+0x7c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <TIM_OC1_SetConfig+0x118>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_OC1_SetConfig+0x7c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <TIM_OC1_SetConfig+0x11c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d10c      	bne.n	8003df6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 0308 	bic.w	r3, r3, #8
 8003de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 0304 	bic.w	r3, r3, #4
 8003df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <TIM_OC1_SetConfig+0x10c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00f      	beq.n	8003e1e <TIM_OC1_SetConfig+0xbe>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <TIM_OC1_SetConfig+0x110>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <TIM_OC1_SetConfig+0xbe>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <TIM_OC1_SetConfig+0x114>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_OC1_SetConfig+0xbe>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <TIM_OC1_SetConfig+0x118>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_OC1_SetConfig+0xbe>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <TIM_OC1_SetConfig+0x11c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d111      	bne.n	8003e42 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	621a      	str	r2, [r3, #32]
}
 8003e5c:	bf00      	nop
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	fffeff8f 	.word	0xfffeff8f
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40010400 	.word	0x40010400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800

08003e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f023 0210 	bic.w	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <TIM_OC2_SetConfig+0xfc>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0320 	bic.w	r3, r3, #32
 8003eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <TIM_OC2_SetConfig+0x100>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d003      	beq.n	8003ee8 <TIM_OC2_SetConfig+0x68>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <TIM_OC2_SetConfig+0x104>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d10d      	bne.n	8003f04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <TIM_OC2_SetConfig+0x100>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00f      	beq.n	8003f2c <TIM_OC2_SetConfig+0xac>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <TIM_OC2_SetConfig+0x104>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <TIM_OC2_SetConfig+0xac>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <TIM_OC2_SetConfig+0x108>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_OC2_SetConfig+0xac>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a1b      	ldr	r2, [pc, #108]	; (8003f8c <TIM_OC2_SetConfig+0x10c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_OC2_SetConfig+0xac>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <TIM_OC2_SetConfig+0x110>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d113      	bne.n	8003f54 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	feff8fff 	.word	0xfeff8fff
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800

08003f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a27      	ldr	r2, [pc, #156]	; (800408c <TIM_OC3_SetConfig+0xf8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_OC3_SetConfig+0x66>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a26      	ldr	r2, [pc, #152]	; (8004090 <TIM_OC3_SetConfig+0xfc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10d      	bne.n	8004016 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1c      	ldr	r2, [pc, #112]	; (800408c <TIM_OC3_SetConfig+0xf8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <TIM_OC3_SetConfig+0xaa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <TIM_OC3_SetConfig+0xfc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00b      	beq.n	800403e <TIM_OC3_SetConfig+0xaa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <TIM_OC3_SetConfig+0x100>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <TIM_OC3_SetConfig+0xaa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <TIM_OC3_SetConfig+0x104>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_OC3_SetConfig+0xaa>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <TIM_OC3_SetConfig+0x108>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d113      	bne.n	8004066 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40010000 	.word	0x40010000
 8004090:	40010400 	.word	0x40010400
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800

080040a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	031b      	lsls	r3, r3, #12
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a18      	ldr	r2, [pc, #96]	; (800415c <TIM_OC4_SetConfig+0xbc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00f      	beq.n	8004120 <TIM_OC4_SetConfig+0x80>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a17      	ldr	r2, [pc, #92]	; (8004160 <TIM_OC4_SetConfig+0xc0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00b      	beq.n	8004120 <TIM_OC4_SetConfig+0x80>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a16      	ldr	r2, [pc, #88]	; (8004164 <TIM_OC4_SetConfig+0xc4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <TIM_OC4_SetConfig+0x80>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a15      	ldr	r2, [pc, #84]	; (8004168 <TIM_OC4_SetConfig+0xc8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_OC4_SetConfig+0x80>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a14      	ldr	r2, [pc, #80]	; (800416c <TIM_OC4_SetConfig+0xcc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d109      	bne.n	8004134 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40010400 	.word	0x40010400
 8004164:	40014000 	.word	0x40014000
 8004168:	40014400 	.word	0x40014400
 800416c:	40014800 	.word	0x40014800

08004170 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a17      	ldr	r2, [pc, #92]	; (8004220 <TIM_OC5_SetConfig+0xb0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_OC5_SetConfig+0x76>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a16      	ldr	r2, [pc, #88]	; (8004224 <TIM_OC5_SetConfig+0xb4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_OC5_SetConfig+0x76>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <TIM_OC5_SetConfig+0xb8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_OC5_SetConfig+0x76>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a14      	ldr	r2, [pc, #80]	; (800422c <TIM_OC5_SetConfig+0xbc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC5_SetConfig+0x76>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <TIM_OC5_SetConfig+0xc0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d109      	bne.n	80041fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40010000 	.word	0x40010000
 8004224:	40010400 	.word	0x40010400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	051b      	lsls	r3, r3, #20
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <TIM_OC6_SetConfig+0xb4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00f      	beq.n	80042ac <TIM_OC6_SetConfig+0x78>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a17      	ldr	r2, [pc, #92]	; (80042ec <TIM_OC6_SetConfig+0xb8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00b      	beq.n	80042ac <TIM_OC6_SetConfig+0x78>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a16      	ldr	r2, [pc, #88]	; (80042f0 <TIM_OC6_SetConfig+0xbc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_OC6_SetConfig+0x78>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <TIM_OC6_SetConfig+0xc0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_OC6_SetConfig+0x78>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <TIM_OC6_SetConfig+0xc4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d109      	bne.n	80042c0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	029b      	lsls	r3, r3, #10
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40010000 	.word	0x40010000
 80042ec:	40010400 	.word	0x40010400
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40014400 	.word	0x40014400
 80042f8:	40014800 	.word	0x40014800

080042fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004310:	2302      	movs	r3, #2
 8004312:	e068      	b.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2e      	ldr	r2, [pc, #184]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d108      	bne.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800434e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01d      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d018      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40010400 	.word	0x40010400
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40001800 	.word	0x40001800

0800440c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004424:	2302      	movs	r3, #2
 8004426:	e065      	b.n	80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a16      	ldr	r2, [pc, #88]	; (8004500 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a14      	ldr	r2, [pc, #80]	; (8004504 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d115      	bne.n	80044e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	051b      	lsls	r3, r3, #20
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40010000 	.word	0x40010000
 8004504:	40010400 	.word	0x40010400

08004508 <__libc_init_array>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	4d0d      	ldr	r5, [pc, #52]	; (8004540 <__libc_init_array+0x38>)
 800450c:	4c0d      	ldr	r4, [pc, #52]	; (8004544 <__libc_init_array+0x3c>)
 800450e:	1b64      	subs	r4, r4, r5
 8004510:	10a4      	asrs	r4, r4, #2
 8004512:	2600      	movs	r6, #0
 8004514:	42a6      	cmp	r6, r4
 8004516:	d109      	bne.n	800452c <__libc_init_array+0x24>
 8004518:	4d0b      	ldr	r5, [pc, #44]	; (8004548 <__libc_init_array+0x40>)
 800451a:	4c0c      	ldr	r4, [pc, #48]	; (800454c <__libc_init_array+0x44>)
 800451c:	f000 f820 	bl	8004560 <_init>
 8004520:	1b64      	subs	r4, r4, r5
 8004522:	10a4      	asrs	r4, r4, #2
 8004524:	2600      	movs	r6, #0
 8004526:	42a6      	cmp	r6, r4
 8004528:	d105      	bne.n	8004536 <__libc_init_array+0x2e>
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004530:	4798      	blx	r3
 8004532:	3601      	adds	r6, #1
 8004534:	e7ee      	b.n	8004514 <__libc_init_array+0xc>
 8004536:	f855 3b04 	ldr.w	r3, [r5], #4
 800453a:	4798      	blx	r3
 800453c:	3601      	adds	r6, #1
 800453e:	e7f2      	b.n	8004526 <__libc_init_array+0x1e>
 8004540:	08004588 	.word	0x08004588
 8004544:	08004588 	.word	0x08004588
 8004548:	08004588 	.word	0x08004588
 800454c:	0800458c 	.word	0x0800458c

08004550 <memset>:
 8004550:	4402      	add	r2, r0
 8004552:	4603      	mov	r3, r0
 8004554:	4293      	cmp	r3, r2
 8004556:	d100      	bne.n	800455a <memset+0xa>
 8004558:	4770      	bx	lr
 800455a:	f803 1b01 	strb.w	r1, [r3], #1
 800455e:	e7f9      	b.n	8004554 <memset+0x4>

08004560 <_init>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	bf00      	nop
 8004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004566:	bc08      	pop	{r3}
 8004568:	469e      	mov	lr, r3
 800456a:	4770      	bx	lr

0800456c <_fini>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr
