
led8digi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000401c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080042b4  080042b4  000142b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  080042cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  24000020  080042ec  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000cc  080042ec  000200cc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bd93  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001a94  00000000  00000000  0002bde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000938  00000000  00000000  0002d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000870  00000000  00000000  0002e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000358fa  00000000  00000000  0002ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b5e7  00000000  00000000  0006431a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00154282  00000000  00000000  0006f901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c3b83  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000248c  00000000  00000000  001c3bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800429c 	.word	0x0800429c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	0800429c 	.word	0x0800429c

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fd06 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f82c 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f900 	bl	80004e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002e8:	f000 f8a6 	bl	8000438 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  max7219_Init(7);
 80002ec:	2007      	movs	r0, #7
 80002ee:	f000 f954 	bl	800059a <max7219_Init>
  max7219_Decode_On();
 80002f2:	f000 f9cd 	bl	8000690 <max7219_Decode_On>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  max7219_Clean();
 80002f6:	f000 f977 	bl	80005e8 <max7219_Clean>
	    max7219_PrintFtos(DIGIT_8, -3.14, 2);
 80002fa:	2102      	movs	r1, #2
 80002fc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000338 <main+0x60>
 8000300:	2008      	movs	r0, #8
 8000302:	f000 faed 	bl	80008e0 <max7219_PrintFtos>
	    max7219_PrintDigit(DIGIT_4, LETTER_H, false);
 8000306:	2200      	movs	r2, #0
 8000308:	210c      	movs	r1, #12
 800030a:	2004      	movs	r0, #4
 800030c:	f000 f9d0 	bl	80006b0 <max7219_PrintDigit>
	    max7219_PrintDigit(DIGIT_3, LETTER_E, false);
 8000310:	2200      	movs	r2, #0
 8000312:	210b      	movs	r1, #11
 8000314:	2003      	movs	r0, #3
 8000316:	f000 f9cb 	bl	80006b0 <max7219_PrintDigit>
	    max7219_PrintDigit(DIGIT_2, LETTER_L, false);
 800031a:	2200      	movs	r2, #0
 800031c:	210d      	movs	r1, #13
 800031e:	2002      	movs	r0, #2
 8000320:	f000 f9c6 	bl	80006b0 <max7219_PrintDigit>
	    max7219_PrintDigit(DIGIT_1, LETTER_P, false);
 8000324:	2200      	movs	r2, #0
 8000326:	210e      	movs	r1, #14
 8000328:	2001      	movs	r0, #1
 800032a:	f000 f9c1 	bl	80006b0 <max7219_PrintDigit>
	    HAL_Delay(1500);
 800032e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000332:	f000 fd6d 	bl	8000e10 <HAL_Delay>
	  max7219_Clean();
 8000336:	e7de      	b.n	80002f6 <main+0x1e>
 8000338:	c048f5c3 	.word	0xc048f5c3

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b09c      	sub	sp, #112	; 0x70
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000346:	224c      	movs	r2, #76	; 0x4c
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f003 ff9e 	bl	800428c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2220      	movs	r2, #32
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f003 ff98 	bl	800428c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800035c:	2002      	movs	r0, #2
 800035e:	f001 f835 	bl	80013cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000362:	2300      	movs	r3, #0
 8000364:	603b      	str	r3, [r7, #0]
 8000366:	4b32      	ldr	r3, [pc, #200]	; (8000430 <SystemClock_Config+0xf4>)
 8000368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800036a:	4a31      	ldr	r2, [pc, #196]	; (8000430 <SystemClock_Config+0xf4>)
 800036c:	f023 0301 	bic.w	r3, r3, #1
 8000370:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000372:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <SystemClock_Config+0xf4>)
 8000374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <SystemClock_Config+0xf8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000384:	4a2b      	ldr	r2, [pc, #172]	; (8000434 <SystemClock_Config+0xf8>)
 8000386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b29      	ldr	r3, [pc, #164]	; (8000434 <SystemClock_Config+0xf8>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000398:	bf00      	nop
 800039a:	4b26      	ldr	r3, [pc, #152]	; (8000434 <SystemClock_Config+0xf8>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003a6:	d1f8      	bne.n	800039a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	2340      	movs	r3, #64	; 0x40
 80003b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b4:	2302      	movs	r3, #2
 80003b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b8:	2300      	movs	r3, #0
 80003ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003bc:	2304      	movs	r3, #4
 80003be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80003c0:	2309      	movs	r3, #9
 80003c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003cc:	2302      	movs	r3, #2
 80003ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003d0:	230c      	movs	r3, #12
 80003d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80003d4:	2302      	movs	r3, #2
 80003d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80003d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 f82c 	bl	8001440 <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003ee:	f000 f8cf 	bl	8000590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	233f      	movs	r3, #63	; 0x3f
 80003f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2101      	movs	r1, #1
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fc6c 	bl	8001cf4 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000422:	f000 f8b5 	bl	8000590 <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3770      	adds	r7, #112	; 0x70
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	58000400 	.word	0x58000400
 8000434:	58024800 	.word	0x58024800

08000438 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_SPI1_Init+0xa8>)
 800043e:	4a29      	ldr	r2, [pc, #164]	; (80004e4 <MX_SPI1_Init+0xac>)
 8000440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000442:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_SPI1_Init+0xa8>)
 8000444:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000448:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <MX_SPI1_Init+0xa8>)
 800044c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000450:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_SPI1_Init+0xa8>)
 8000454:	2207      	movs	r2, #7
 8000456:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000458:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <MX_SPI1_Init+0xa8>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800045e:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <MX_SPI1_Init+0xa8>)
 8000460:	2200      	movs	r2, #0
 8000462:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_SPI1_Init+0xa8>)
 8000466:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800046a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_SPI1_Init+0xa8>)
 800046e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <MX_SPI1_Init+0xa8>)
 8000476:	2200      	movs	r2, #0
 8000478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800047a:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_SPI1_Init+0xa8>)
 800047c:	2200      	movs	r2, #0
 800047e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <MX_SPI1_Init+0xa8>)
 8000482:	2200      	movs	r2, #0
 8000484:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_SPI1_Init+0xa8>)
 8000488:	2200      	movs	r2, #0
 800048a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_SPI1_Init+0xa8>)
 800048e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000492:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_SPI1_Init+0xa8>)
 8000496:	2200      	movs	r2, #0
 8000498:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_SPI1_Init+0xa8>)
 800049c:	2200      	movs	r2, #0
 800049e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_SPI1_Init+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_SPI1_Init+0xa8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_SPI1_Init+0xa8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_SPI1_Init+0xa8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_SPI1_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_SPI1_Init+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_SPI1_Init+0xa8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_SPI1_Init+0xa8>)
 80004cc:	f003 fab0 	bl	8003a30 <HAL_SPI_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80004d6:	f000 f85b 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	2400003c 	.word	0x2400003c
 80004e4:	40013000 	.word	0x40013000

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000504:	4a20      	ldr	r2, [pc, #128]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800050e:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_GPIO_Init+0xa0>)
 800051e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000522:	4a19      	ldr	r2, [pc, #100]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_GPIO_Init+0xa0>)
 800052e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_GPIO_Init+0xa0>)
 800053c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000540:	4a11      	ldr	r2, [pc, #68]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000542:	f043 0302 	orr.w	r3, r3, #2
 8000546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_GPIO_Init+0xa0>)
 800054c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MAX7219_GPIO_Port, CS_MAX7219_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <MX_GPIO_Init+0xa4>)
 800055e:	f000 ff1b 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_MAX7219_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin;
 8000562:	2301      	movs	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056e:	2303      	movs	r3, #3
 8000570:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_MAX7219_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	4619      	mov	r1, r3
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <MX_GPIO_Init+0xa4>)
 800057a:	f000 fd5d 	bl	8001038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057e:	bf00      	nop
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	58024400 	.word	0x58024400
 800058c:	58020400 	.word	0x58020400

08000590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
}
 8000596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000598:	e7fe      	b.n	8000598 <Error_Handler+0x8>

0800059a <max7219_Init>:

static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);

void max7219_Init(uint8_t intensivity)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	4603      	mov	r3, r0
 80005a2:	71fb      	strb	r3, [r7, #7]
	max7219_Turn_On();
 80005a4:	f000 f86c 	bl	8000680 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 80005a8:	2107      	movs	r1, #7
 80005aa:	200b      	movs	r0, #11
 80005ac:	f000 f840 	bl	8000630 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f806 	bl	80005c4 <max7219_SetIntensivity>
	max7219_Clean();
 80005b8:	f000 f816 	bl	80005e8 <max7219_Clean>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	if (intensivity > 0x0F)
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	d805      	bhi.n	80005e0 <max7219_SetIntensivity+0x1c>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4619      	mov	r1, r3
 80005d8:	200a      	movs	r0, #10
 80005da:	f000 f829 	bl	8000630 <max7219_SendData>
 80005de:	e000      	b.n	80005e2 <max7219_SetIntensivity+0x1e>
		return;
 80005e0:	bf00      	nop
}
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <max7219_Clean>:

void max7219_Clean()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]

	if(decodeMode == 0xFF)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <max7219_Clean+0x44>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2bff      	cmp	r3, #255	; 0xff
 80005f8:	d101      	bne.n	80005fe <max7219_Clean+0x16>
	{
		clear = BLANK;
 80005fa:	230f      	movs	r3, #15
 80005fc:	71fb      	strb	r3, [r7, #7]
	}

	for (int i = 0; i < 8; ++i)
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	e00b      	b.n	800061c <max7219_Clean+0x34>
	{
		max7219_SendData(i + 1, clear);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	3301      	adds	r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	4611      	mov	r1, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f80d 	bl	8000630 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2b07      	cmp	r3, #7
 8000620:	ddf0      	ble.n	8000604 <max7219_Clean+0x1c>
	}
}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	240000c4 	.word	0x240000c4

08000630 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
	CS_SET();
 8000640:	2200      	movs	r2, #0
 8000642:	2101      	movs	r1, #1
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <max7219_SendData+0x48>)
 8000646:	f000 fea7 	bl	8001398 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 800064a:	1df9      	adds	r1, r7, #7
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2201      	movs	r2, #1
 8000652:	480a      	ldr	r0, [pc, #40]	; (800067c <max7219_SendData+0x4c>)
 8000654:	f003 fb10 	bl	8003c78 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000658:	1db9      	adds	r1, r7, #6
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	2201      	movs	r2, #1
 8000660:	4806      	ldr	r0, [pc, #24]	; (800067c <max7219_SendData+0x4c>)
 8000662:	f003 fb09 	bl	8003c78 <HAL_SPI_Transmit>
	CS_RESET();
 8000666:	2201      	movs	r2, #1
 8000668:	2101      	movs	r1, #1
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <max7219_SendData+0x48>)
 800066c:	f000 fe94 	bl	8001398 <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	58020400 	.word	0x58020400
 800067c:	2400003c 	.word	0x2400003c

08000680 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8000684:	2101      	movs	r1, #1
 8000686:	200c      	movs	r0, #12
 8000688:	f7ff ffd2 	bl	8000630 <max7219_SendData>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <max7219_Decode_On>:
{
	max7219_SendData(REG_SHUTDOWN, 0x00);
}

void max7219_Decode_On(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <max7219_Decode_On+0x1c>)
 8000696:	22ff      	movs	r2, #255	; 0xff
 8000698:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <max7219_Decode_On+0x1c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	2009      	movs	r0, #9
 80006a2:	f7ff ffc5 	bl	8000630 <max7219_SendData>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	240000c4 	.word	0x240000c4

080006b0 <max7219_PrintDigit>:
	decodeMode = 0x00;
	max7219_SendData(REG_DECODE_MODE, decodeMode);
}

void max7219_PrintDigit(MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	460b      	mov	r3, r1
 80006bc:	71bb      	strb	r3, [r7, #6]
 80006be:	4613      	mov	r3, r2
 80006c0:	717b      	strb	r3, [r7, #5]
	if(position > NUMBER_OF_DIGITS)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	d844      	bhi.n	8000752 <max7219_PrintDigit+0xa2>
	{
		return;
	}

	if(point)
 80006c8:	797b      	ldrb	r3, [r7, #5]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d020      	beq.n	8000710 <max7219_PrintDigit+0x60>
	{
		if(decodeMode == 0x00)
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <max7219_PrintDigit+0xac>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10e      	bne.n	80006f4 <max7219_PrintDigit+0x44>
		{
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f97b 	bl	80009d4 <getSymbol>
 80006de:	4603      	mov	r3, r0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff9f 	bl	8000630 <max7219_SendData>
 80006f2:	e02f      	b.n	8000754 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <max7219_PrintDigit+0xac>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2bff      	cmp	r3, #255	; 0xff
 80006fa:	d12b      	bne.n	8000754 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric | (1 << 7));
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000702:	b2da      	uxtb	r2, r3
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff91 	bl	8000630 <max7219_SendData>
 800070e:	e021      	b.n	8000754 <max7219_PrintDigit+0xa4>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <max7219_PrintDigit+0xac>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d10e      	bne.n	8000736 <max7219_PrintDigit+0x86>
		{
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f95a 	bl	80009d4 <getSymbol>
 8000720:	4603      	mov	r3, r0
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000728:	b2da      	uxtb	r2, r3
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff7e 	bl	8000630 <max7219_SendData>
 8000734:	e00e      	b.n	8000754 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <max7219_PrintDigit+0xac>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2bff      	cmp	r3, #255	; 0xff
 800073c:	d10a      	bne.n	8000754 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric & (~(1 << 7)));
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000744:	b2da      	uxtb	r2, r3
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff70 	bl	8000630 <max7219_SendData>
 8000750:	e000      	b.n	8000754 <max7219_PrintDigit+0xa4>
		return;
 8000752:	bf00      	nop
		}
	}
}
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	240000c4 	.word	0x240000c4

08000760 <max7219_PrintItos>:

MAX7219_Digits max7219_PrintItos(MAX7219_Digits position, int value)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 800076c:	21ff      	movs	r1, #255	; 0xff
 800076e:	2009      	movs	r0, #9
 8000770:	f7ff ff5e 	bl	8000630 <max7219_SendData>

	int32_t i;

	if (value < 0)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da0d      	bge.n	8000796 <max7219_PrintItos+0x36>
	{
		if(position > 0)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d007      	beq.n	8000790 <max7219_PrintItos+0x30>
		{
			max7219_SendData(position, MINUS);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	210a      	movs	r1, #10
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff53 	bl	8000630 <max7219_SendData>
			position--;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	3b01      	subs	r3, #1
 800078e:	71fb      	strb	r3, [r7, #7]
		}
		value = -value;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	425b      	negs	r3, r3
 8000794:	603b      	str	r3, [r7, #0]
	}

	i = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]

	while ((value / i) > 9)
 800079a:	e005      	b.n	80007a8 <max7219_PrintItos+0x48>
	{
		i *= 10;
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80007b0:	2b09      	cmp	r3, #9
 80007b2:	dcf3      	bgt.n	800079c <max7219_PrintItos+0x3c>
	}

	if(position > 0)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00c      	beq.n	80007d4 <max7219_PrintItos+0x74>
	{
		max7219_SendData(position, value/i);
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	fb92 f3f3 	sdiv	r3, r2, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff31 	bl	8000630 <max7219_SendData>
		position--;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	71fb      	strb	r3, [r7, #7]
	}

	i /= 10;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <max7219_PrintItos+0xe8>)
 80007d8:	fb82 1203 	smull	r1, r2, r2, r3
 80007dc:	1092      	asrs	r2, r2, #2
 80007de:	17db      	asrs	r3, r3, #31
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	60fb      	str	r3, [r7, #12]

	while (i > 0)
 80007e4:	e022      	b.n	800082c <max7219_PrintItos+0xcc>
	{
		if(position > 0)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d017      	beq.n	800081c <max7219_PrintItos+0xbc>
		{
			max7219_SendData(position, (value % (i * 10)) / i);
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	461a      	mov	r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80007fe:	fb01 f202 	mul.w	r2, r1, r2
 8000802:	1a9a      	subs	r2, r3, r2
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	fb92 f3f3 	sdiv	r3, r2, r3
 800080a:	b2da      	uxtb	r2, r3
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff0d 	bl	8000630 <max7219_SendData>
			position--;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	3b01      	subs	r3, #1
 800081a:	71fb      	strb	r3, [r7, #7]
		}

		i /= 10;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <max7219_PrintItos+0xe8>)
 8000820:	fb82 1203 	smull	r1, r2, r2, r3
 8000824:	1092      	asrs	r2, r2, #2
 8000826:	17db      	asrs	r3, r3, #31
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	60fb      	str	r3, [r7, #12]
	while (i > 0)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b00      	cmp	r3, #0
 8000830:	dcd9      	bgt.n	80007e6 <max7219_PrintItos+0x86>
	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <max7219_PrintItos+0xec>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	2009      	movs	r0, #9
 800083a:	f7ff fef9 	bl	8000630 <max7219_SendData>

	return position;
 800083e:	79fb      	ldrb	r3, [r7, #7]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	66666667 	.word	0x66666667
 800084c:	240000c4 	.word	0x240000c4

08000850 <max7219_PrintNtos>:

MAX7219_Digits max7219_PrintNtos(MAX7219_Digits position, uint32_t value, uint8_t n)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 8000860:	21ff      	movs	r1, #255	; 0xff
 8000862:	2009      	movs	r0, #9
 8000864:	f7ff fee4 	bl	8000630 <max7219_SendData>

	if (n > 0u)
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d029      	beq.n	80008c2 <max7219_PrintNtos+0x72>
	{
		uint32_t i = lcdPow10(n - 1u);
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	3b01      	subs	r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f8bf 	bl	80009f8 <lcdPow10>
 800087a:	60f8      	str	r0, [r7, #12]

		while (i > 0u)	/* Display at least one symbol */
 800087c:	e01e      	b.n	80008bc <max7219_PrintNtos+0x6c>
		{
			if(position > 0u)
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d015      	beq.n	80008b0 <max7219_PrintNtos+0x60>
			{
				max7219_SendData(position, (value / i) % 10u);
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	fbb2 f1f3 	udiv	r1, r2, r3
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <max7219_PrintNtos+0x88>)
 800088e:	fba3 2301 	umull	r2, r3, r3, r1
 8000892:	08da      	lsrs	r2, r3, #3
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	1aca      	subs	r2, r1, r3
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fec3 	bl	8000630 <max7219_SendData>
				position--;
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	71fb      	strb	r3, [r7, #7]
			}

			i /= 10u;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <max7219_PrintNtos+0x88>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	60fb      	str	r3, [r7, #12]
		while (i > 0u)	/* Display at least one symbol */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1dd      	bne.n	800087e <max7219_PrintNtos+0x2e>
		}
	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <max7219_PrintNtos+0x8c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	2009      	movs	r0, #9
 80008ca:	f7ff feb1 	bl	8000630 <max7219_SendData>

	return position;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	cccccccd 	.word	0xcccccccd
 80008dc:	240000c4 	.word	0x240000c4

080008e0 <max7219_PrintFtos>:

MAX7219_Digits max7219_PrintFtos(MAX7219_Digits position, float value, uint8_t n)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	ed87 0a00 	vstr	s0, [r7]
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	if(n > 4)
 80008f4:	79bb      	ldrb	r3, [r7, #6]
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	d901      	bls.n	80008fe <max7219_PrintFtos+0x1e>
	{
		n = 4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	71bb      	strb	r3, [r7, #6]
	}

	max7219_SendData(REG_DECODE_MODE, 0xFF);
 80008fe:	21ff      	movs	r1, #255	; 0xff
 8000900:	2009      	movs	r0, #9
 8000902:	f7ff fe95 	bl	8000630 <max7219_SendData>

	if (value < 0.0)
 8000906:	edd7 7a00 	vldr	s15, [r7]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	d510      	bpl.n	8000936 <max7219_PrintFtos+0x56>
	{
		if(position > 0)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d007      	beq.n	800092a <max7219_PrintFtos+0x4a>
		{
			max7219_SendData(position, MINUS);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	210a      	movs	r1, #10
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe86 	bl	8000630 <max7219_SendData>
			position--;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	3b01      	subs	r3, #1
 8000928:	71fb      	strb	r3, [r7, #7]
		}

		value = -value;
 800092a:	edd7 7a00 	vldr	s15, [r7]
 800092e:	eef1 7a67 	vneg.f32	s15, s15
 8000932:	edc7 7a00 	vstr	s15, [r7]
	}

	position = max7219_PrintItos(position, (int32_t) value);
 8000936:	edd7 7a00 	vldr	s15, [r7]
 800093a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	ee17 1a90 	vmov	r1, s15
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff0b 	bl	8000760 <max7219_PrintItos>
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]

	if (n > 0u)
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d02f      	beq.n	80009b4 <max7219_PrintFtos+0xd4>
	{
		max7219_PrintDigit(position + 1, ((int32_t) value) % 10, true);
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3301      	adds	r3, #1
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	edd7 7a00 	vldr	s15, [r7]
 800095e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000962:	ee17 1a90 	vmov	r1, s15
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <max7219_PrintFtos+0xec>)
 8000968:	fb83 2301 	smull	r2, r3, r3, r1
 800096c:	109a      	asrs	r2, r3, #2
 800096e:	17cb      	asrs	r3, r1, #31
 8000970:	1ad2      	subs	r2, r2, r3
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	1aca      	subs	r2, r1, r3
 800097c:	b2d3      	uxtb	r3, r2
 800097e:	2201      	movs	r2, #1
 8000980:	4619      	mov	r1, r3
 8000982:	f7ff fe95 	bl	80006b0 <max7219_PrintDigit>

		position = max7219_PrintNtos(position, (uint32_t) (value * (float) lcdPow10(n)), n);
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f835 	bl	80009f8 <lcdPow10>
 800098e:	ee07 0a90 	vmov	s15, r0
 8000992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000996:	edd7 7a00 	vldr	s15, [r7]
 800099a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009a2:	79ba      	ldrb	r2, [r7, #6]
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	ee17 1a90 	vmov	r1, s15
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff50 	bl	8000850 <max7219_PrintNtos>
 80009b0:	4603      	mov	r3, r0
 80009b2:	71fb      	strb	r3, [r7, #7]
	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <max7219_PrintFtos+0xf0>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2009      	movs	r0, #9
 80009bc:	f7ff fe38 	bl	8000630 <max7219_SendData>

	return position;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	66666667 	.word	0x66666667
 80009d0:	240000c4 	.word	0x240000c4

080009d4 <getSymbol>:

static uint16_t getSymbol(uint8_t number)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	return SYMBOLS[number];
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <getSymbol+0x20>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	b29b      	uxth	r3, r3
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	24000000 	.word	0x24000000

080009f8 <lcdPow10>:

static uint32_t lcdPow10(uint8_t n)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	uint32_t retval = 1u;
 8000a02:	2301      	movs	r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]

	while (n > 0u)
 8000a06:	e008      	b.n	8000a1a <lcdPow10+0x22>
	{
		retval *= 10u;
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
		n--;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	71fb      	strb	r3, [r7, #7]
	while (n > 0u)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f3      	bne.n	8000a08 <lcdPow10+0x10>
	}

	return retval;
 8000a20:	68fb      	ldr	r3, [r7, #12]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_MspInit+0x30>)
 8000a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a3c:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x30>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x30>)
 8000a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	58024400 	.word	0x58024400

08000a64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0ba      	sub	sp, #232	; 0xe8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	22c0      	movs	r2, #192	; 0xc0
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 fc01 	bl	800428c <memset>
  if(hspi->Instance==SPI1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a26      	ldr	r2, [pc, #152]	; (8000b28 <HAL_SPI_MspInit+0xc4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d144      	bne.n	8000b1e <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fc53 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000ab4:	f7ff fd6c 	bl	8000590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_SPI_MspInit+0xc8>)
 8000aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <HAL_SPI_MspInit+0xc8>)
 8000ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_SPI_MspInit+0xc8>)
 8000aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_SPI_MspInit+0xc8>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <HAL_SPI_MspInit+0xc8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_SPI_MspInit+0xc8>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000af4:	23a0      	movs	r3, #160	; 0xa0
 8000af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0c:	2305      	movs	r3, #5
 8000b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_SPI_MspInit+0xcc>)
 8000b1a:	f000 fa8d 	bl	8001038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	37e8      	adds	r7, #232	; 0xe8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40013000 	.word	0x40013000
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	58020000 	.word	0x58020000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f926 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <SystemInit+0xe4>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <SystemInit+0xe4>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b9c:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <SystemInit+0xe8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	d807      	bhi.n	8000bb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ba8:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <SystemInit+0xe8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f023 030f 	bic.w	r3, r3, #15
 8000bb0:	4a2f      	ldr	r2, [pc, #188]	; (8000c70 <SystemInit+0xe8>)
 8000bb2:	f043 0307 	orr.w	r3, r3, #7
 8000bb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <SystemInit+0xec>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <SystemInit+0xec>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <SystemInit+0xec>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <SystemInit+0xec>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4929      	ldr	r1, [pc, #164]	; (8000c74 <SystemInit+0xec>)
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <SystemInit+0xf0>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <SystemInit+0xe8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d007      	beq.n	8000bf2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <SystemInit+0xe8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f023 030f 	bic.w	r3, r3, #15
 8000bea:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <SystemInit+0xe8>)
 8000bec:	f043 0307 	orr.w	r3, r3, #7
 8000bf0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <SystemInit+0xec>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <SystemInit+0xec>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <SystemInit+0xec>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <SystemInit+0xec>)
 8000c06:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <SystemInit+0xf4>)
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <SystemInit+0xec>)
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <SystemInit+0xf8>)
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <SystemInit+0xec>)
 8000c12:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <SystemInit+0xfc>)
 8000c14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <SystemInit+0xec>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <SystemInit+0xec>)
 8000c1e:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <SystemInit+0xfc>)
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <SystemInit+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <SystemInit+0xec>)
 8000c2a:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <SystemInit+0xfc>)
 8000c2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <SystemInit+0xec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <SystemInit+0xec>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <SystemInit+0xec>)
 8000c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <SystemInit+0xec>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <SystemInit+0x100>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <SystemInit+0x104>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c52:	d202      	bcs.n	8000c5a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <SystemInit+0x108>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <SystemInit+0x10c>)
 8000c5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c60:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00
 8000c70:	52002000 	.word	0x52002000
 8000c74:	58024400 	.word	0x58024400
 8000c78:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c7c:	02020200 	.word	0x02020200
 8000c80:	01ff0000 	.word	0x01ff0000
 8000c84:	01010280 	.word	0x01010280
 8000c88:	5c001000 	.word	0x5c001000
 8000c8c:	ffff0000 	.word	0xffff0000
 8000c90:	51008108 	.word	0x51008108
 8000c94:	52004000 	.word	0x52004000

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c9c:	f7ff ff74 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 fabd 	bl	8004244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fb05 	bl	80002d8 <main>
  bx  lr
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cd8:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8000cdc:	080042cc 	.word	0x080042cc
  ldr r2, =_sbss
 8000ce0:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8000ce4:	240000cc 	.word	0x240000cc

08000ce8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC3_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 f96e 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cf8:	f001 f9b2 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_Init+0x68>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	f003 030f 	and.w	r3, r3, #15
 8000d08:	4913      	ldr	r1, [pc, #76]	; (8000d58 <HAL_Init+0x6c>)
 8000d0a:	5ccb      	ldrb	r3, [r1, r3]
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	fa22 f303 	lsr.w	r3, r2, r3
 8000d14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_Init+0x68>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_Init+0x6c>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_Init+0x70>)
 8000d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_Init+0x74>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	200f      	movs	r0, #15
 8000d38:	f000 f814 	bl	8000d64 <HAL_InitTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e002      	b.n	8000d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d46:	f7ff fe73 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400
 8000d58:	080042b4 	.word	0x080042b4
 8000d5c:	24000014 	.word	0x24000014
 8000d60:	24000010 	.word	0x24000010

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_InitTick+0x60>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e021      	b.n	8000dbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_InitTick+0x64>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_InitTick+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f945 	bl	800101e <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f91d 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x68>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400001c 	.word	0x2400001c
 8000dc8:	24000010 	.word	0x24000010
 8000dcc:	24000018 	.word	0x24000018

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2400001c 	.word	0x2400001c
 8000df4:	240000c8 	.word	0x240000c8

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	240000c8 	.word	0x240000c8

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2400001c 	.word	0x2400001c

08000e58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetREVID+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	0c1b      	lsrs	r3, r3, #16
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	5c001000 	.word	0x5c001000

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	05fa0000 	.word	0x05fa0000

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff47 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff5e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff90 	bl	8000f28 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5f 	bl	8000ed4 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffb2 	bl	8000f90 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001046:	4b89      	ldr	r3, [pc, #548]	; (800126c <HAL_GPIO_Init+0x234>)
 8001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800104a:	e194      	b.n	8001376 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8186 	beq.w	8001370 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d005      	beq.n	800107c <HAL_GPIO_Init+0x44>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d130      	bne.n	80010de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	f003 0201 	and.w	r2, r3, #1
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d017      	beq.n	800111a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	69b9      	ldr	r1, [r7, #24]
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0203 	and.w	r2, r3, #3
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80e0 	beq.w	8001370 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_GPIO_Init+0x238>)
 80011b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011b6:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <HAL_GPIO_Init+0x238>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_GPIO_Init+0x238>)
 80011c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ce:	4a29      	ldr	r2, [pc, #164]	; (8001274 <HAL_GPIO_Init+0x23c>)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a20      	ldr	r2, [pc, #128]	; (8001278 <HAL_GPIO_Init+0x240>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d052      	beq.n	80012a0 <HAL_GPIO_Init+0x268>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <HAL_GPIO_Init+0x244>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d031      	beq.n	8001266 <HAL_GPIO_Init+0x22e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_GPIO_Init+0x248>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02b      	beq.n	8001262 <HAL_GPIO_Init+0x22a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_GPIO_Init+0x24c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x226>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <HAL_GPIO_Init+0x250>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x222>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_GPIO_Init+0x254>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x21e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <HAL_GPIO_Init+0x258>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x21a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_GPIO_Init+0x25c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x216>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a18      	ldr	r2, [pc, #96]	; (8001298 <HAL_GPIO_Init+0x260>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x212>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_GPIO_Init+0x264>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x20e>
 8001242:	2309      	movs	r3, #9
 8001244:	e02d      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001246:	230a      	movs	r3, #10
 8001248:	e02b      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800124a:	2308      	movs	r3, #8
 800124c:	e029      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800124e:	2307      	movs	r3, #7
 8001250:	e027      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001252:	2306      	movs	r3, #6
 8001254:	e025      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001256:	2305      	movs	r3, #5
 8001258:	e023      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800125a:	2304      	movs	r3, #4
 800125c:	e021      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800125e:	2303      	movs	r3, #3
 8001260:	e01f      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001262:	2302      	movs	r3, #2
 8001264:	e01d      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001266:	2301      	movs	r3, #1
 8001268:	e01b      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800126a:	bf00      	nop
 800126c:	58000080 	.word	0x58000080
 8001270:	58024400 	.word	0x58024400
 8001274:	58000400 	.word	0x58000400
 8001278:	58020000 	.word	0x58020000
 800127c:	58020400 	.word	0x58020400
 8001280:	58020800 	.word	0x58020800
 8001284:	58020c00 	.word	0x58020c00
 8001288:	58021000 	.word	0x58021000
 800128c:	58021400 	.word	0x58021400
 8001290:	58021800 	.word	0x58021800
 8001294:	58021c00 	.word	0x58021c00
 8001298:	58022000 	.word	0x58022000
 800129c:	58022400 	.word	0x58022400
 80012a0:	2300      	movs	r3, #0
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	f002 0203 	and.w	r2, r2, #3
 80012a8:	0092      	lsls	r2, r2, #2
 80012aa:	4093      	lsls	r3, r2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b2:	4938      	ldr	r1, [pc, #224]	; (8001394 <HAL_GPIO_Init+0x35c>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	3301      	adds	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	f47f ae63 	bne.w	800104c <HAL_GPIO_Init+0x14>
  }
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3724      	adds	r7, #36	; 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	58000400 	.word	0x58000400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_PWREx_ConfigSupply+0x70>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d00a      	beq.n	80013f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_PWREx_ConfigSupply+0x70>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e01f      	b.n	8001432 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e01d      	b.n	8001432 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_PWREx_ConfigSupply+0x70>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	f023 0207 	bic.w	r2, r3, #7
 80013fe:	490f      	ldr	r1, [pc, #60]	; (800143c <HAL_PWREx_ConfigSupply+0x70>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4313      	orrs	r3, r2
 8001404:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001406:	f7ff fcf7 	bl	8000df8 <HAL_GetTick>
 800140a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800140c:	e009      	b.n	8001422 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800140e:	f7ff fcf3 	bl	8000df8 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141c:	d901      	bls.n	8001422 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e007      	b.n	8001432 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_PWREx_ConfigSupply+0x70>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800142a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800142e:	d1ee      	bne.n	800140e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	58024800 	.word	0x58024800

08001440 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	f000 bc48 	b.w	8001ce4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 8088 	beq.w	8001572 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001462:	4b99      	ldr	r3, [pc, #612]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800146c:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001474:	2b10      	cmp	r3, #16
 8001476:	d007      	beq.n	8001488 <HAL_RCC_OscConfig+0x48>
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	2b18      	cmp	r3, #24
 800147c:	d111      	bne.n	80014a2 <HAL_RCC_OscConfig+0x62>
 800147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d10c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	4b8f      	ldr	r3, [pc, #572]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d06d      	beq.n	8001570 <HAL_RCC_OscConfig+0x130>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d169      	bne.n	8001570 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	f000 bc21 	b.w	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x7a>
 80014ac:	4b86      	ldr	r3, [pc, #536]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a85      	ldr	r2, [pc, #532]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e02e      	b.n	8001518 <HAL_RCC_OscConfig+0xd8>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x9c>
 80014c2:	4b81      	ldr	r3, [pc, #516]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a80      	ldr	r2, [pc, #512]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7d      	ldr	r2, [pc, #500]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e01d      	b.n	8001518 <HAL_RCC_OscConfig+0xd8>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0xc0>
 80014e6:	4b78      	ldr	r3, [pc, #480]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a77      	ldr	r2, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b75      	ldr	r3, [pc, #468]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a74      	ldr	r2, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0xd8>
 8001500:	4b71      	ldr	r3, [pc, #452]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a70      	ldr	r2, [pc, #448]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b6e      	ldr	r3, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a6d      	ldr	r2, [pc, #436]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fc6a 	bl	8000df8 <HAL_GetTick>
 8001524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fc66 	bl	8000df8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e3d4      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0xe8>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fc56 	bl	8000df8 <HAL_GetTick>
 800154c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fc52 	bl	8000df8 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e3c0      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001562:	4b59      	ldr	r3, [pc, #356]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x110>
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80ca 	beq.w	8001714 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001588:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800158a:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <HAL_RCC_OscConfig+0x166>
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	2b18      	cmp	r3, #24
 800159a:	d156      	bne.n	800164a <HAL_RCC_OscConfig+0x20a>
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d151      	bne.n	800164a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_RCC_OscConfig+0x17e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e392      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015be:	4b42      	ldr	r3, [pc, #264]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0219 	bic.w	r2, r3, #25
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	493f      	ldr	r1, [pc, #252]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc12 	bl	8000df8 <HAL_GetTick>
 80015d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc0e 	bl	8000df8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e37c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	f7ff fc2f 	bl	8000e58 <HAL_GetREVID>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001600:	4293      	cmp	r3, r2
 8001602:	d817      	bhi.n	8001634 <HAL_RCC_OscConfig+0x1f4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d108      	bne.n	800161e <HAL_RCC_OscConfig+0x1de>
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001614:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800161c:	e07a      	b.n	8001714 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	031b      	lsls	r3, r3, #12
 800162c:	4926      	ldr	r1, [pc, #152]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001632:	e06f      	b.n	8001714 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	4921      	ldr	r1, [pc, #132]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001648:	e064      	b.n	8001714 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d047      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0219 	bic.w	r2, r3, #25
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	491a      	ldr	r1, [pc, #104]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fbc8 	bl	8000df8 <HAL_GetTick>
 8001668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166c:	f7ff fbc4 	bl	8000df8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e332      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	f7ff fbe5 	bl	8000e58 <HAL_GetREVID>
 800168e:	4603      	mov	r3, r0
 8001690:	f241 0203 	movw	r2, #4099	; 0x1003
 8001694:	4293      	cmp	r3, r2
 8001696:	d819      	bhi.n	80016cc <HAL_RCC_OscConfig+0x28c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	2b40      	cmp	r3, #64	; 0x40
 800169e:	d108      	bne.n	80016b2 <HAL_RCC_OscConfig+0x272>
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ae:	6053      	str	r3, [r2, #4]
 80016b0:	e030      	b.n	8001714 <HAL_RCC_OscConfig+0x2d4>
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	031b      	lsls	r3, r3, #12
 80016c0:	4901      	ldr	r1, [pc, #4]	; (80016c8 <HAL_RCC_OscConfig+0x288>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
 80016c6:	e025      	b.n	8001714 <HAL_RCC_OscConfig+0x2d4>
 80016c8:	58024400 	.word	0x58024400
 80016cc:	4b9a      	ldr	r3, [pc, #616]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	4997      	ldr	r1, [pc, #604]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
 80016e0:	e018      	b.n	8001714 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b95      	ldr	r3, [pc, #596]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a94      	ldr	r2, [pc, #592]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb83 	bl	8000df8 <HAL_GetTick>
 80016f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fb7f 	bl	8000df8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e2ed      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001708:	4b8b      	ldr	r3, [pc, #556]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a9 	beq.w	8001874 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001722:	4b85      	ldr	r3, [pc, #532]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800172a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800172c:	4b82      	ldr	r3, [pc, #520]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d007      	beq.n	8001748 <HAL_RCC_OscConfig+0x308>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b18      	cmp	r3, #24
 800173c:	d13a      	bne.n	80017b4 <HAL_RCC_OscConfig+0x374>
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d135      	bne.n	80017b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001748:	4b7b      	ldr	r3, [pc, #492]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x320>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b80      	cmp	r3, #128	; 0x80
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e2c1      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001760:	f7ff fb7a 	bl	8000e58 <HAL_GetREVID>
 8001764:	4603      	mov	r3, r0
 8001766:	f241 0203 	movw	r2, #4099	; 0x1003
 800176a:	4293      	cmp	r3, r2
 800176c:	d817      	bhi.n	800179e <HAL_RCC_OscConfig+0x35e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	2b20      	cmp	r3, #32
 8001774:	d108      	bne.n	8001788 <HAL_RCC_OscConfig+0x348>
 8001776:	4b70      	ldr	r3, [pc, #448]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001784:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001786:	e075      	b.n	8001874 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001788:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	069b      	lsls	r3, r3, #26
 8001796:	4968      	ldr	r1, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800179c:	e06a      	b.n	8001874 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800179e:	4b66      	ldr	r3, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	061b      	lsls	r3, r3, #24
 80017ac:	4962      	ldr	r1, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017b2:	e05f      	b.n	8001874 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d042      	beq.n	8001842 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017bc:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80017c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb16 	bl	8000df8 <HAL_GetTick>
 80017cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017d0:	f7ff fb12 	bl	8000df8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e280      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017e2:	4b55      	ldr	r3, [pc, #340]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017ee:	f7ff fb33 	bl	8000e58 <HAL_GetREVID>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d817      	bhi.n	800182c <HAL_RCC_OscConfig+0x3ec>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	2b20      	cmp	r3, #32
 8001802:	d108      	bne.n	8001816 <HAL_RCC_OscConfig+0x3d6>
 8001804:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800180c:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800180e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001812:	6053      	str	r3, [r2, #4]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0x434>
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	069b      	lsls	r3, r3, #26
 8001824:	4944      	ldr	r1, [pc, #272]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
 800182a:	e023      	b.n	8001874 <HAL_RCC_OscConfig+0x434>
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	493f      	ldr	r1, [pc, #252]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800183c:	4313      	orrs	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
 8001840:	e018      	b.n	8001874 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a3c      	ldr	r2, [pc, #240]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800184c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fad3 	bl	8000df8 <HAL_GetTick>
 8001852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001856:	f7ff facf 	bl	8000df8 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e23d      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d036      	beq.n	80018ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d019      	beq.n	80018bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800188a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188c:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff fab0 	bl	8000df8 <HAL_GetTick>
 8001898:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff faac 	bl	8000df8 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e21a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x45c>
 80018ba:	e018      	b.n	80018ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80018be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fa96 	bl	8000df8 <HAL_GetTick>
 80018cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fa92 	bl	8000df8 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e200      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 80018e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d039      	beq.n	800196e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01c      	beq.n	800193c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 8001908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800190c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800190e:	f7ff fa73 	bl	8000df8 <HAL_GetTick>
 8001912:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001916:	f7ff fa6f 	bl	8000df8 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1dd      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x4d6>
 8001934:	e01b      	b.n	800196e <HAL_RCC_OscConfig+0x52e>
 8001936:	bf00      	nop
 8001938:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800193c:	4b9b      	ldr	r3, [pc, #620]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a9a      	ldr	r2, [pc, #616]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001946:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001948:	f7ff fa56 	bl	8000df8 <HAL_GetTick>
 800194c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001950:	f7ff fa52 	bl	8000df8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1c0      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001962:	4b92      	ldr	r3, [pc, #584]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8081 	beq.w	8001a7e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800197c:	4b8c      	ldr	r3, [pc, #560]	; (8001bb0 <HAL_RCC_OscConfig+0x770>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a8b      	ldr	r2, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x770>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001988:	f7ff fa36 	bl	8000df8 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001990:	f7ff fa32 	bl	8000df8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1a0      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019a2:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <HAL_RCC_OscConfig+0x770>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x584>
 80019b6:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	4a7c      	ldr	r2, [pc, #496]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6713      	str	r3, [r2, #112]	; 0x70
 80019c2:	e02d      	b.n	8001a20 <HAL_RCC_OscConfig+0x5e0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5a6>
 80019cc:	4b77      	ldr	r3, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	4a76      	ldr	r2, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	6713      	str	r3, [r2, #112]	; 0x70
 80019d8:	4b74      	ldr	r3, [pc, #464]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	4a73      	ldr	r2, [pc, #460]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 80019de:	f023 0304 	bic.w	r3, r3, #4
 80019e2:	6713      	str	r3, [r2, #112]	; 0x70
 80019e4:	e01c      	b.n	8001a20 <HAL_RCC_OscConfig+0x5e0>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5c8>
 80019ee:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
 80019fa:	4b6c      	ldr	r3, [pc, #432]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a6b      	ldr	r2, [pc, #428]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0x5e0>
 8001a08:	4b68      	ldr	r3, [pc, #416]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a67      	ldr	r2, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	4b65      	ldr	r3, [pc, #404]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a64      	ldr	r2, [pc, #400]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001a1a:	f023 0304 	bic.w	r3, r3, #4
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d015      	beq.n	8001a54 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff f9e6 	bl	8000df8 <HAL_GetTick>
 8001a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff f9e2 	bl	8000df8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e14e      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a46:	4b59      	ldr	r3, [pc, #356]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0ee      	beq.n	8001a30 <HAL_RCC_OscConfig+0x5f0>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff f9d0 	bl	8000df8 <HAL_GetTick>
 8001a58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f9cc 	bl	8000df8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e138      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a72:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ee      	bne.n	8001a5c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 812d 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a88:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a90:	2b18      	cmp	r3, #24
 8001a92:	f000 80bd 	beq.w	8001c10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	f040 809e 	bne.w	8001bdc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa0:	4b42      	ldr	r3, [pc, #264]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a41      	ldr	r2, [pc, #260]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff f9a4 	bl	8000df8 <HAL_GetTick>
 8001ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff f9a0 	bl	8000df8 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e10e      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <HAL_RCC_OscConfig+0x774>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	4931      	ldr	r1, [pc, #196]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	628b      	str	r3, [r1, #40]	; 0x28
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	3b01      	subs	r3, #1
 8001af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afa:	3b01      	subs	r3, #1
 8001afc:	025b      	lsls	r3, r3, #9
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	3b01      	subs	r3, #1
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	3b01      	subs	r3, #1
 8001b16:	061b      	lsls	r3, r3, #24
 8001b18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b1c:	4923      	ldr	r1, [pc, #140]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_RCC_OscConfig+0x778>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b3a:	00d2      	lsls	r2, r2, #3
 8001b3c:	491b      	ldr	r1, [pc, #108]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f023 020c 	bic.w	r2, r3, #12
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4917      	ldr	r1, [pc, #92]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	f023 0202 	bic.w	r2, r3, #2
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	4912      	ldr	r1, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_RCC_OscConfig+0x76c>)
 8001b9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f929 	bl	8000df8 <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ba8:	e011      	b.n	8001bce <HAL_RCC_OscConfig+0x78e>
 8001baa:	bf00      	nop
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	58024800 	.word	0x58024800
 8001bb4:	fffffc0c 	.word	0xfffffc0c
 8001bb8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f91c 	bl	8000df8 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e08a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x77c>
 8001bda:	e082      	b.n	8001ce2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a42      	ldr	r2, [pc, #264]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff f906 	bl	8000df8 <HAL_GetTick>
 8001bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f902 	bl	8000df8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e070      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x7b0>
 8001c0e:	e068      	b.n	8001ce2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c10:	4b36      	ldr	r3, [pc, #216]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c16:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d031      	beq.n	8001c88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0203 	and.w	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d12a      	bne.n	8001c88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d122      	bne.n	8001c88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d11a      	bne.n	8001c88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	0a5b      	lsrs	r3, r3, #9
 8001c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d111      	bne.n	8001c88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	0c1b      	lsrs	r3, r3, #16
 8001c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d108      	bne.n	8001c88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	0e1b      	lsrs	r3, r3, #24
 8001c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e02b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	4a11      	ldr	r2, [pc, #68]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cae:	f7ff f8a3 	bl	8000df8 <HAL_GetTick>
 8001cb2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001cb4:	bf00      	nop
 8001cb6:	f7ff f89f 	bl	8000df8 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d0f9      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_RCC_OscConfig+0x8b0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cce:	00d2      	lsls	r2, r2, #3
 8001cd0:	4906      	ldr	r1, [pc, #24]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_RCC_OscConfig+0x8ac>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	ffff0007 	.word	0xffff0007

08001cf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e19c      	b.n	8002042 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b8a      	ldr	r3, [pc, #552]	; (8001f34 <HAL_RCC_ClockConfig+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d910      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <HAL_RCC_ClockConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 020f 	bic.w	r2, r3, #15
 8001d1e:	4985      	ldr	r1, [pc, #532]	; (8001f34 <HAL_RCC_ClockConfig+0x240>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <HAL_RCC_ClockConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e184      	b.n	8002042 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d010      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d908      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d54:	4b78      	ldr	r3, [pc, #480]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	4975      	ldr	r1, [pc, #468]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d010      	beq.n	8001d94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	4b70      	ldr	r3, [pc, #448]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d908      	bls.n	8001d94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d82:	4b6d      	ldr	r3, [pc, #436]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	496a      	ldr	r1, [pc, #424]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d010      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d908      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001db0:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	495e      	ldr	r1, [pc, #376]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d010      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d908      	bls.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001dde:	4b56      	ldr	r3, [pc, #344]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4953      	ldr	r1, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d010      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d908      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f023 020f 	bic.w	r2, r3, #15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4947      	ldr	r1, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d055      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e2a:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4940      	ldr	r1, [pc, #256]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e44:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d121      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0f6      	b.n	8002042 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e5c:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d115      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0ea      	b.n	8002042 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0de      	b.n	8002042 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0d6      	b.n	8002042 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f023 0207 	bic.w	r2, r3, #7
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4925      	ldr	r1, [pc, #148]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea6:	f7fe ffa7 	bl	8000df8 <HAL_GetTick>
 8001eaa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eae:	f7fe ffa3 	bl	8000df8 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0be      	b.n	8002042 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d1eb      	bne.n	8001eae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d208      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	490e      	ldr	r1, [pc, #56]	; (8001f38 <HAL_RCC_ClockConfig+0x244>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_ClockConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d214      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_RCC_ClockConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 020f 	bic.w	r2, r3, #15
 8001f1a:	4906      	ldr	r1, [pc, #24]	; (8001f34 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_RCC_ClockConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e086      	b.n	8002042 <HAL_RCC_ClockConfig+0x34e>
 8001f34:	52002000 	.word	0x52002000
 8001f38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d010      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d208      	bcs.n	8001f6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f58:	4b3c      	ldr	r3, [pc, #240]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	4939      	ldr	r1, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d010      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d208      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	492e      	ldr	r1, [pc, #184]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d010      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d208      	bcs.n	8001fc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4922      	ldr	r1, [pc, #136]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d010      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d208      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4917      	ldr	r1, [pc, #92]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ff4:	f000 f834 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	4912      	ldr	r1, [pc, #72]	; (8002050 <HAL_RCC_ClockConfig+0x35c>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x358>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <HAL_RCC_ClockConfig+0x35c>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x360>)
 800202a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x364>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x368>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fe94 	bl	8000d64 <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
 800203e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	58024400 	.word	0x58024400
 8002050:	080042b4 	.word	0x080042b4
 8002054:	24000014 	.word	0x24000014
 8002058:	24000010 	.word	0x24000010
 800205c:	24000018 	.word	0x24000018

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002066:	4bb3      	ldr	r3, [pc, #716]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800206e:	2b18      	cmp	r3, #24
 8002070:	f200 8155 	bhi.w	800231e <HAL_RCC_GetSysClockFreq+0x2be>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	080020e1 	.word	0x080020e1
 8002080:	0800231f 	.word	0x0800231f
 8002084:	0800231f 	.word	0x0800231f
 8002088:	0800231f 	.word	0x0800231f
 800208c:	0800231f 	.word	0x0800231f
 8002090:	0800231f 	.word	0x0800231f
 8002094:	0800231f 	.word	0x0800231f
 8002098:	0800231f 	.word	0x0800231f
 800209c:	08002107 	.word	0x08002107
 80020a0:	0800231f 	.word	0x0800231f
 80020a4:	0800231f 	.word	0x0800231f
 80020a8:	0800231f 	.word	0x0800231f
 80020ac:	0800231f 	.word	0x0800231f
 80020b0:	0800231f 	.word	0x0800231f
 80020b4:	0800231f 	.word	0x0800231f
 80020b8:	0800231f 	.word	0x0800231f
 80020bc:	0800210d 	.word	0x0800210d
 80020c0:	0800231f 	.word	0x0800231f
 80020c4:	0800231f 	.word	0x0800231f
 80020c8:	0800231f 	.word	0x0800231f
 80020cc:	0800231f 	.word	0x0800231f
 80020d0:	0800231f 	.word	0x0800231f
 80020d4:	0800231f 	.word	0x0800231f
 80020d8:	0800231f 	.word	0x0800231f
 80020dc:	08002113 	.word	0x08002113
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020e0:	4b94      	ldr	r3, [pc, #592]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d009      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020ec:	4b91      	ldr	r3, [pc, #580]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	4a90      	ldr	r2, [pc, #576]	; (8002338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80020fe:	e111      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002100:	4b8d      	ldr	r3, [pc, #564]	; (8002338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002102:	61bb      	str	r3, [r7, #24]
      break;
 8002104:	e10e      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002106:	4b8d      	ldr	r3, [pc, #564]	; (800233c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002108:	61bb      	str	r3, [r7, #24]
      break;
 800210a:	e10b      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800210c:	4b8c      	ldr	r3, [pc, #560]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800210e:	61bb      	str	r3, [r7, #24]
      break;
 8002110:	e108      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002112:	4b88      	ldr	r3, [pc, #544]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800211c:	4b85      	ldr	r3, [pc, #532]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002126:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002128:	4b82      	ldr	r3, [pc, #520]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002132:	4b80      	ldr	r3, [pc, #512]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	08db      	lsrs	r3, r3, #3
 8002138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80e1 	beq.w	8002318 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b02      	cmp	r3, #2
 800215a:	f000 8083 	beq.w	8002264 <HAL_RCC_GetSysClockFreq+0x204>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b02      	cmp	r3, #2
 8002162:	f200 80a1 	bhi.w	80022a8 <HAL_RCC_GetSysClockFreq+0x248>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x114>
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d056      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002172:	e099      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002174:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02d      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002180:	4b6c      	ldr	r3, [pc, #432]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	4a6b      	ldr	r2, [pc, #428]	; (8002338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	ee07 3a90 	vmov	s15, r3
 8002198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021aa:	4b62      	ldr	r3, [pc, #392]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80021be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80021da:	e087      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002348 <HAL_RCC_GetSysClockFreq+0x2e8>
 80021ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ee:	4b51      	ldr	r3, [pc, #324]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002202:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002344 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800220a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800220e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800221e:	e065      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800222a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800234c <HAL_RCC_GetSysClockFreq+0x2ec>
 800222e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002232:	4b40      	ldr	r3, [pc, #256]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002242:	ed97 6a02 	vldr	s12, [r7, #8]
 8002246:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800224a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800224e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800225a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002262:	e043      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002350 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002276:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002286:	ed97 6a02 	vldr	s12, [r7, #8]
 800228a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800228e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800229a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800229e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022a6:	e021      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800234c <HAL_RCC_GetSysClockFreq+0x2ec>
 80022b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	0a5b      	lsrs	r3, r3, #9
 80022f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f6:	3301      	adds	r3, #1
 80022f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002304:	edd7 6a07 	vldr	s13, [r7, #28]
 8002308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002310:	ee17 3a90 	vmov	r3, s15
 8002314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002316:	e005      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
      break;
 800231c:	e002      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002320:	61bb      	str	r3, [r7, #24]
      break;
 8002322:	bf00      	nop
  }

  return sysclockfreq;
 8002324:	69bb      	ldr	r3, [r7, #24]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	58024400 	.word	0x58024400
 8002338:	03d09000 	.word	0x03d09000
 800233c:	003d0900 	.word	0x003d0900
 8002340:	017d7840 	.word	0x017d7840
 8002344:	46000000 	.word	0x46000000
 8002348:	4c742400 	.word	0x4c742400
 800234c:	4a742400 	.word	0x4a742400
 8002350:	4bbebc20 	.word	0x4bbebc20

08002354 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002358:	b0ca      	sub	sp, #296	; 0x128
 800235a:	af00      	add	r7, sp, #0
 800235c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002366:	2300      	movs	r3, #0
 8002368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800236c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002378:	2500      	movs	r5, #0
 800237a:	ea54 0305 	orrs.w	r3, r4, r5
 800237e:	d049      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800238a:	d02f      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800238c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002390:	d828      	bhi.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002396:	d01a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800239c:	d822      	bhi.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a6:	d007      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023a8:	e01c      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023aa:	4bb8      	ldr	r3, [pc, #736]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	4ab7      	ldr	r2, [pc, #732]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023b6:	e01a      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023bc:	3308      	adds	r3, #8
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f001 f9d1 	bl	8003768 <RCCEx_PLL2_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023cc:	e00f      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80023ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023d2:	3328      	adds	r3, #40	; 0x28
 80023d4:	2102      	movs	r1, #2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 fa78 	bl	80038cc <RCCEx_PLL3_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023e2:	e004      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80023ea:	e000      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80023ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023f6:	4ba5      	ldr	r3, [pc, #660]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80023fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002404:	4aa1      	ldr	r2, [pc, #644]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002406:	430b      	orrs	r3, r1
 8002408:	6513      	str	r3, [r2, #80]	; 0x50
 800240a:	e003      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002420:	f04f 0900 	mov.w	r9, #0
 8002424:	ea58 0309 	orrs.w	r3, r8, r9
 8002428:	d047      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800242a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	2b04      	cmp	r3, #4
 8002432:	d82a      	bhi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002434:	a201      	add	r2, pc, #4	; (adr r2, 800243c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243a:	bf00      	nop
 800243c:	08002451 	.word	0x08002451
 8002440:	0800245f 	.word	0x0800245f
 8002444:	08002475 	.word	0x08002475
 8002448:	08002493 	.word	0x08002493
 800244c:	08002493 	.word	0x08002493
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002450:	4b8e      	ldr	r3, [pc, #568]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	4a8d      	ldr	r2, [pc, #564]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800245c:	e01a      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800245e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002462:	3308      	adds	r3, #8
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f001 f97e 	bl	8003768 <RCCEx_PLL2_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002472:	e00f      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002478:	3328      	adds	r3, #40	; 0x28
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f001 fa25 	bl	80038cc <RCCEx_PLL3_Config>
 8002482:	4603      	mov	r3, r0
 8002484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002488:	e004      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002490:	e000      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800249c:	4b7b      	ldr	r3, [pc, #492]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800249e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a0:	f023 0107 	bic.w	r1, r3, #7
 80024a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	4a78      	ldr	r2, [pc, #480]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ac:	430b      	orrs	r3, r1
 80024ae:	6513      	str	r3, [r2, #80]	; 0x50
 80024b0:	e003      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80024ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80024c6:	f04f 0b00 	mov.w	fp, #0
 80024ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80024ce:	d04c      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80024d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024da:	d030      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80024dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e0:	d829      	bhi.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024e2:	2bc0      	cmp	r3, #192	; 0xc0
 80024e4:	d02d      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024e6:	2bc0      	cmp	r3, #192	; 0xc0
 80024e8:	d825      	bhi.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024ea:	2b80      	cmp	r3, #128	; 0x80
 80024ec:	d018      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	d821      	bhi.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d007      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80024fa:	e01c      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024fc:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	4a62      	ldr	r2, [pc, #392]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002508:	e01c      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800250a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800250e:	3308      	adds	r3, #8
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f001 f928 	bl	8003768 <RCCEx_PLL2_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800251e:	e011      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002524:	3328      	adds	r3, #40	; 0x28
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f001 f9cf 	bl	80038cc <RCCEx_PLL3_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002534:	e006      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800253c:	e002      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800254c:	4b4f      	ldr	r3, [pc, #316]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800254e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002550:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255a:	4a4c      	ldr	r2, [pc, #304]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800255c:	430b      	orrs	r3, r1
 800255e:	6513      	str	r3, [r2, #80]	; 0x50
 8002560:	e003      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002566:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800256a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002576:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002580:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002584:	460b      	mov	r3, r1
 8002586:	4313      	orrs	r3, r2
 8002588:	d053      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800258a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800258e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002596:	d035      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800259c:	d82e      	bhi.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800259e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025a2:	d031      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80025a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025a8:	d828      	bhi.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80025aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ae:	d01a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80025b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b4:	d822      	bhi.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80025ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025be:	d007      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80025c0:	e01c      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025c2:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	4a31      	ldr	r2, [pc, #196]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025ce:	e01c      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025d4:	3308      	adds	r3, #8
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 f8c5 	bl	8003768 <RCCEx_PLL2_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80025e4:	e011      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025ea:	3328      	adds	r3, #40	; 0x28
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 f96c 	bl	80038cc <RCCEx_PLL3_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025fa:	e006      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002602:	e002      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002604:	bf00      	nop
 8002606:	e000      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800260a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10b      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800261a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800261e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002622:	4a1a      	ldr	r2, [pc, #104]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002624:	430b      	orrs	r3, r1
 8002626:	6593      	str	r3, [r2, #88]	; 0x58
 8002628:	e003      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800262a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800262e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800263e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002648:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800264c:	460b      	mov	r3, r1
 800264e:	4313      	orrs	r3, r2
 8002650:	d056      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002656:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800265a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800265e:	d038      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002664:	d831      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800266a:	d034      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800266c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002670:	d82b      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002676:	d01d      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800267c:	d825      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002682:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002688:	e01f      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800268a:	bf00      	nop
 800268c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002690:	4ba2      	ldr	r3, [pc, #648]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	4aa1      	ldr	r2, [pc, #644]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800269c:	e01c      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800269e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026a2:	3308      	adds	r3, #8
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 f85e 	bl	8003768 <RCCEx_PLL2_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80026b2:	e011      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b8:	3328      	adds	r3, #40	; 0x28
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 f905 	bl	80038cc <RCCEx_PLL3_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026c8:	e006      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80026d0:	e002      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80026d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026e0:	4b8e      	ldr	r3, [pc, #568]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80026e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026f0:	4a8a      	ldr	r2, [pc, #552]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026f2:	430b      	orrs	r3, r1
 80026f4:	6593      	str	r3, [r2, #88]	; 0x58
 80026f6:	e003      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800270c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002716:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800271a:	460b      	mov	r3, r1
 800271c:	4313      	orrs	r3, r2
 800271e:	d03a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	2b30      	cmp	r3, #48	; 0x30
 8002728:	d01f      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800272a:	2b30      	cmp	r3, #48	; 0x30
 800272c:	d819      	bhi.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800272e:	2b20      	cmp	r3, #32
 8002730:	d00c      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002732:	2b20      	cmp	r3, #32
 8002734:	d815      	bhi.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d019      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800273a:	2b10      	cmp	r3, #16
 800273c:	d111      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800273e:	4b77      	ldr	r3, [pc, #476]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	4a76      	ldr	r2, [pc, #472]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800274a:	e011      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800274c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002750:	3308      	adds	r3, #8
 8002752:	2102      	movs	r1, #2
 8002754:	4618      	mov	r0, r3
 8002756:	f001 f807 	bl	8003768 <RCCEx_PLL2_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002760:	e006      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002768:	e002      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800276e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002778:	4b68      	ldr	r3, [pc, #416]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	4a65      	ldr	r2, [pc, #404]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002788:	430b      	orrs	r3, r1
 800278a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278c:	e003      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80027a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80027ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4313      	orrs	r3, r2
 80027b4:	d051      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80027b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027c0:	d035      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80027c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027c6:	d82e      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027cc:	d031      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80027ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027d2:	d828      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d8:	d01a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80027da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027de:	d822      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80027e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e8:	d007      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80027ea:	e01c      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ec:	4b4b      	ldr	r3, [pc, #300]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	4a4a      	ldr	r2, [pc, #296]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027f8:	e01c      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027fe:	3308      	adds	r3, #8
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f000 ffb0 	bl	8003768 <RCCEx_PLL2_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800280e:	e011      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002814:	3328      	adds	r3, #40	; 0x28
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f001 f857 	bl	80038cc <RCCEx_PLL3_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002824:	e006      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800282c:	e002      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800283c:	4b37      	ldr	r3, [pc, #220]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	4a34      	ldr	r2, [pc, #208]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800284c:	430b      	orrs	r3, r1
 800284e:	6513      	str	r3, [r2, #80]	; 0x50
 8002850:	e003      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002856:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800285a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002870:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002874:	460b      	mov	r3, r1
 8002876:	4313      	orrs	r3, r2
 8002878:	d056      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800287a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800287e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d033      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288a:	d82c      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800288c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002890:	d02f      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002896:	d826      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002898:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800289c:	d02b      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800289e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028a2:	d820      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80028a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028a8:	d012      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80028aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ae:	d81a      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d022      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d115      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80028ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028be:	3308      	adds	r3, #8
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 ff50 	bl	8003768 <RCCEx_PLL2_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028ce:	e015      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d4:	3328      	adds	r3, #40	; 0x28
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fff7 	bl	80038cc <RCCEx_PLL3_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028e4:	e00a      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80028ec:	e006      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028ee:	bf00      	nop
 80028f0:	e004      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028f2:	bf00      	nop
 80028f4:	e002      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028f6:	bf00      	nop
 80028f8:	e000      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002908:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800290c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002912:	4a02      	ldr	r2, [pc, #8]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002914:	430b      	orrs	r3, r1
 8002916:	6513      	str	r3, [r2, #80]	; 0x50
 8002918:	e006      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800291a:	bf00      	nop
 800291c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002924:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800293e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002942:	460b      	mov	r3, r1
 8002944:	4313      	orrs	r3, r2
 8002946:	d055      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800294c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002954:	d033      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800295a:	d82c      	bhi.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d02f      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002966:	d826      	bhi.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002968:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800296c:	d02b      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800296e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002972:	d820      	bhi.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002978:	d012      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800297a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800297e:	d81a      	bhi.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002980:	2b00      	cmp	r3, #0
 8002982:	d022      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002988:	d115      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800298e:	3308      	adds	r3, #8
 8002990:	2101      	movs	r1, #1
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fee8 	bl	8003768 <RCCEx_PLL2_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800299e:	e015      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a4:	3328      	adds	r3, #40	; 0x28
 80029a6:	2101      	movs	r1, #1
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 ff8f 	bl	80038cc <RCCEx_PLL3_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029b4:	e00a      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029bc:	e006      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029be:	bf00      	nop
 80029c0:	e004      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029c2:	bf00      	nop
 80029c4:	e002      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029d4:	4ba3      	ldr	r3, [pc, #652]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80029dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029e4:	4a9f      	ldr	r2, [pc, #636]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029e6:	430b      	orrs	r3, r1
 80029e8:	6593      	str	r3, [r2, #88]	; 0x58
 80029ea:	e003      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4313      	orrs	r3, r2
 8002a12:	d037      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1e:	d00e      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a24:	d816      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d018      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a2e:	d111      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a30:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	4a8b      	ldr	r2, [pc, #556]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a3c:	e00f      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a42:	3308      	adds	r3, #8
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fe8e 	bl	8003768 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a52:	e004      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a5a:	e000      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a66:	4b7f      	ldr	r3, [pc, #508]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a7b      	ldr	r2, [pc, #492]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a76:	430b      	orrs	r3, r1
 8002a78:	6513      	str	r3, [r2, #80]	; 0x50
 8002a7a:	e003      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	d039      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d81c      	bhi.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002aae:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002af1 	.word	0x08002af1
 8002ab8:	08002ac5 	.word	0x08002ac5
 8002abc:	08002ad3 	.word	0x08002ad3
 8002ac0:	08002af1 	.word	0x08002af1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ac4:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	4a66      	ldr	r2, [pc, #408]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ad0:	e00f      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	2102      	movs	r1, #2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fe44 	bl	8003768 <RCCEx_PLL2_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ae6:	e004      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002aee:	e000      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002afa:	4b5a      	ldr	r3, [pc, #360]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	f023 0103 	bic.w	r1, r3, #3
 8002b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b08:	4a56      	ldr	r2, [pc, #344]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0e:	e003      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002b24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002b32:	460b      	mov	r3, r1
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f000 809f 	beq.w	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b3a:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b46:	f7fe f957 	bl	8000df8 <HAL_GetTick>
 8002b4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7fe f952 	bl	8000df8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b64      	cmp	r3, #100	; 0x64
 8002b5e:	d903      	bls.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b66:	e005      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b68:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ed      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d179      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b7c:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b88:	4053      	eors	r3, r2
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d015      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b92:	4b34      	ldr	r3, [pc, #208]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a30      	ldr	r2, [pc, #192]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002baa:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bb6:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bca:	d118      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe f914 	bl	8000df8 <HAL_GetTick>
 8002bd0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bd4:	e00d      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe f90f 	bl	8000df8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002be0:	1ad2      	subs	r2, r2, r3
 8002be2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d903      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002bf0:	e005      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0eb      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d129      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c16:	d10e      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c28:	091a      	lsrs	r2, r3, #4
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6113      	str	r3, [r2, #16]
 8002c34:	e005      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c40:	6113      	str	r3, [r2, #16]
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c44:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
 8002c58:	e00e      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002c62:	e009      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002c64:	58024400 	.word	0x58024400
 8002c68:	58024800 	.word	0x58024800
 8002c6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f002 0301 	and.w	r3, r2, #1
 8002c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f000 8089 	beq.w	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca0:	2b28      	cmp	r3, #40	; 0x28
 8002ca2:	d86b      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002d85 	.word	0x08002d85
 8002cb0:	08002d7d 	.word	0x08002d7d
 8002cb4:	08002d7d 	.word	0x08002d7d
 8002cb8:	08002d7d 	.word	0x08002d7d
 8002cbc:	08002d7d 	.word	0x08002d7d
 8002cc0:	08002d7d 	.word	0x08002d7d
 8002cc4:	08002d7d 	.word	0x08002d7d
 8002cc8:	08002d7d 	.word	0x08002d7d
 8002ccc:	08002d51 	.word	0x08002d51
 8002cd0:	08002d7d 	.word	0x08002d7d
 8002cd4:	08002d7d 	.word	0x08002d7d
 8002cd8:	08002d7d 	.word	0x08002d7d
 8002cdc:	08002d7d 	.word	0x08002d7d
 8002ce0:	08002d7d 	.word	0x08002d7d
 8002ce4:	08002d7d 	.word	0x08002d7d
 8002ce8:	08002d7d 	.word	0x08002d7d
 8002cec:	08002d67 	.word	0x08002d67
 8002cf0:	08002d7d 	.word	0x08002d7d
 8002cf4:	08002d7d 	.word	0x08002d7d
 8002cf8:	08002d7d 	.word	0x08002d7d
 8002cfc:	08002d7d 	.word	0x08002d7d
 8002d00:	08002d7d 	.word	0x08002d7d
 8002d04:	08002d7d 	.word	0x08002d7d
 8002d08:	08002d7d 	.word	0x08002d7d
 8002d0c:	08002d85 	.word	0x08002d85
 8002d10:	08002d7d 	.word	0x08002d7d
 8002d14:	08002d7d 	.word	0x08002d7d
 8002d18:	08002d7d 	.word	0x08002d7d
 8002d1c:	08002d7d 	.word	0x08002d7d
 8002d20:	08002d7d 	.word	0x08002d7d
 8002d24:	08002d7d 	.word	0x08002d7d
 8002d28:	08002d7d 	.word	0x08002d7d
 8002d2c:	08002d85 	.word	0x08002d85
 8002d30:	08002d7d 	.word	0x08002d7d
 8002d34:	08002d7d 	.word	0x08002d7d
 8002d38:	08002d7d 	.word	0x08002d7d
 8002d3c:	08002d7d 	.word	0x08002d7d
 8002d40:	08002d7d 	.word	0x08002d7d
 8002d44:	08002d7d 	.word	0x08002d7d
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002d85 	.word	0x08002d85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d54:	3308      	adds	r3, #8
 8002d56:	2101      	movs	r1, #1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fd05 	bl	8003768 <RCCEx_PLL2_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d64:	e00f      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6a:	3328      	adds	r3, #40	; 0x28
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fdac 	bl	80038cc <RCCEx_PLL3_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d7a:	e004      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d82:	e000      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d8e:	4bbf      	ldr	r3, [pc, #764]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9c:	4abb      	ldr	r2, [pc, #748]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	6553      	str	r3, [r2, #84]	; 0x54
 8002da2:	e003      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002da8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f002 0302 	and.w	r3, r2, #2
 8002db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002dc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	d041      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d824      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002dd6:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ddc:	08002e29 	.word	0x08002e29
 8002de0:	08002df5 	.word	0x08002df5
 8002de4:	08002e0b 	.word	0x08002e0b
 8002de8:	08002e29 	.word	0x08002e29
 8002dec:	08002e29 	.word	0x08002e29
 8002df0:	08002e29 	.word	0x08002e29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df8:	3308      	adds	r3, #8
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fcb3 	bl	8003768 <RCCEx_PLL2_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e08:	e00f      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e0e:	3328      	adds	r3, #40	; 0x28
 8002e10:	2101      	movs	r1, #1
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fd5a 	bl	80038cc <RCCEx_PLL3_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e1e:	e004      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e26:	e000      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e32:	4b96      	ldr	r3, [pc, #600]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f023 0107 	bic.w	r1, r3, #7
 8002e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e40:	4a92      	ldr	r2, [pc, #584]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e42:	430b      	orrs	r3, r1
 8002e44:	6553      	str	r3, [r2, #84]	; 0x54
 8002e46:	e003      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	f002 0304 	and.w	r3, r2, #4
 8002e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	d044      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d825      	bhi.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002ed1 	.word	0x08002ed1
 8002e88:	08002e9d 	.word	0x08002e9d
 8002e8c:	08002eb3 	.word	0x08002eb3
 8002e90:	08002ed1 	.word	0x08002ed1
 8002e94:	08002ed1 	.word	0x08002ed1
 8002e98:	08002ed1 	.word	0x08002ed1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fc5f 	bl	8003768 <RCCEx_PLL2_Config>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002eb0:	e00f      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb6:	3328      	adds	r3, #40	; 0x28
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fd06 	bl	80038cc <RCCEx_PLL3_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ec6:	e004      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ece:	e000      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eda:	4b6c      	ldr	r3, [pc, #432]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	f023 0107 	bic.w	r1, r3, #7
 8002ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eea:	4a68      	ldr	r2, [pc, #416]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef0:	e003      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f002 0320 	and.w	r3, r2, #32
 8002f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f14:	460b      	mov	r3, r1
 8002f16:	4313      	orrs	r3, r2
 8002f18:	d055      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f26:	d033      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2c:	d82c      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f32:	d02f      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f38:	d826      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f3e:	d02b      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002f40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f44:	d820      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f4a:	d012      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f50:	d81a      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d022      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f5a:	d115      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f60:	3308      	adds	r3, #8
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fbff 	bl	8003768 <RCCEx_PLL2_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f70:	e015      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f76:	3328      	adds	r3, #40	; 0x28
 8002f78:	2102      	movs	r1, #2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fca6 	bl	80038cc <RCCEx_PLL3_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f86:	e00a      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f8e:	e006      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f90:	bf00      	nop
 8002f92:	e004      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f94:	bf00      	nop
 8002f96:	e002      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fa6:	4b39      	ldr	r3, [pc, #228]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	4a35      	ldr	r2, [pc, #212]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6553      	str	r3, [r2, #84]	; 0x54
 8002fbc:	e003      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002fdc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	d058      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ff2:	d033      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002ff4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ff8:	d82c      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d02f      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003004:	d826      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800300a:	d02b      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800300c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003010:	d820      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003016:	d012      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301c:	d81a      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d022      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d115      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800302c:	3308      	adds	r3, #8
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fb99 	bl	8003768 <RCCEx_PLL2_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800303c:	e015      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800303e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003042:	3328      	adds	r3, #40	; 0x28
 8003044:	2102      	movs	r1, #2
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fc40 	bl	80038cc <RCCEx_PLL3_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003052:	e00a      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800305a:	e006      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800305c:	bf00      	nop
 800305e:	e004      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003060:	bf00      	nop
 8003062:	e002      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10e      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800307a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003082:	4a02      	ldr	r2, [pc, #8]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003084:	430b      	orrs	r3, r1
 8003086:	6593      	str	r3, [r2, #88]	; 0x58
 8003088:	e006      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800308a:	bf00      	nop
 800308c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003094:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80030a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80030b2:	460b      	mov	r3, r1
 80030b4:	4313      	orrs	r3, r2
 80030b6:	d055      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80030b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030c4:	d033      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80030c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030ca:	d82c      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d0:	d02f      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80030d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d6:	d826      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030dc:	d02b      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80030de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030e2:	d820      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e8:	d012      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80030ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ee:	d81a      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d022      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80030f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f8:	d115      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fe:	3308      	adds	r3, #8
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fb30 	bl	8003768 <RCCEx_PLL2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800310e:	e015      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003114:	3328      	adds	r3, #40	; 0x28
 8003116:	2102      	movs	r1, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fbd7 	bl	80038cc <RCCEx_PLL3_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003124:	e00a      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800312c:	e006      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800312e:	bf00      	nop
 8003130:	e004      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003132:	bf00      	nop
 8003134:	e002      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800313a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800313c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003144:	4ba1      	ldr	r3, [pc, #644]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003154:	4a9d      	ldr	r2, [pc, #628]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003156:	430b      	orrs	r3, r1
 8003158:	6593      	str	r3, [r2, #88]	; 0x58
 800315a:	e003      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f002 0308 	and.w	r3, r2, #8
 8003170:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800317a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800317e:	460b      	mov	r3, r1
 8003180:	4313      	orrs	r3, r2
 8003182:	d01e      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d10c      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003196:	3328      	adds	r3, #40	; 0x28
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fb96 	bl	80038cc <RCCEx_PLL3_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031ac:	4b87      	ldr	r3, [pc, #540]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031bc:	4a83      	ldr	r2, [pc, #524]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031be:	430b      	orrs	r3, r1
 80031c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f002 0310 	and.w	r3, r2, #16
 80031ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80031d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80031dc:	460b      	mov	r3, r1
 80031de:	4313      	orrs	r3, r2
 80031e0:	d01e      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80031e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ee:	d10c      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f4:	3328      	adds	r3, #40	; 0x28
 80031f6:	2102      	movs	r1, #2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fb67 	bl	80038cc <RCCEx_PLL3_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800320a:	4b70      	ldr	r3, [pc, #448]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003216:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800321a:	4a6c      	ldr	r2, [pc, #432]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800321c:	430b      	orrs	r3, r1
 800321e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800322c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003236:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800323a:	460b      	mov	r3, r1
 800323c:	4313      	orrs	r3, r2
 800323e:	d03e      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003244:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800324c:	d022      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800324e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003252:	d81b      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325c:	d00b      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800325e:	e015      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003264:	3308      	adds	r3, #8
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fa7d 	bl	8003768 <RCCEx_PLL2_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003274:	e00f      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800327a:	3328      	adds	r3, #40	; 0x28
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fb24 	bl	80038cc <RCCEx_PLL3_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800328a:	e004      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10b      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800329e:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032ae:	4a47      	ldr	r2, [pc, #284]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6593      	str	r3, [r2, #88]	; 0x58
 80032b4:	e003      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80032ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80032cc:	2300      	movs	r3, #0
 80032ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80032d4:	460b      	mov	r3, r1
 80032d6:	4313      	orrs	r3, r2
 80032d8:	d03b      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032e6:	d01f      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80032e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032ec:	d818      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80032ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f2:	d003      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80032f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f8:	d007      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80032fa:	e011      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fc:	4b33      	ldr	r3, [pc, #204]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	4a32      	ldr	r2, [pc, #200]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003308:	e00f      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800330a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330e:	3328      	adds	r3, #40	; 0x28
 8003310:	2101      	movs	r1, #1
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fada 	bl	80038cc <RCCEx_PLL3_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800331e:	e004      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003326:	e000      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800332a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003344:	430b      	orrs	r3, r1
 8003346:	6553      	str	r3, [r2, #84]	; 0x54
 8003348:	e003      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800334e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800335e:	673b      	str	r3, [r7, #112]	; 0x70
 8003360:	2300      	movs	r3, #0
 8003362:	677b      	str	r3, [r7, #116]	; 0x74
 8003364:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003368:	460b      	mov	r3, r1
 800336a:	4313      	orrs	r3, r2
 800336c:	d034      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d007      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800337e:	e011      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	4a11      	ldr	r2, [pc, #68]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800338c:	e00e      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003392:	3308      	adds	r3, #8
 8003394:	2102      	movs	r1, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f9e6 	bl	8003768 <RCCEx_PLL2_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033a2:	e003      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	4a02      	ldr	r2, [pc, #8]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033c8:	e006      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80033ca:	bf00      	nop
 80033cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80033e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e6:	2300      	movs	r3, #0
 80033e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80033ee:	460b      	mov	r3, r1
 80033f0:	4313      	orrs	r3, r2
 80033f2:	d00c      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f8:	3328      	adds	r3, #40	; 0x28
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fa65 	bl	80038cc <RCCEx_PLL3_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800341a:	663b      	str	r3, [r7, #96]	; 0x60
 800341c:	2300      	movs	r3, #0
 800341e:	667b      	str	r3, [r7, #100]	; 0x64
 8003420:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003424:	460b      	mov	r3, r1
 8003426:	4313      	orrs	r3, r2
 8003428:	d038      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003436:	d018      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343c:	d811      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800343e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003442:	d014      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003448:	d80b      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d011      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800344e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003452:	d106      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003454:	4bc3      	ldr	r3, [pc, #780]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	4ac2      	ldr	r2, [pc, #776]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800345a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003460:	e008      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003468:	e004      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800346a:	bf00      	nop
 800346c:	e002      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10b      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800347c:	4bb9      	ldr	r3, [pc, #740]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348c:	4ab5      	ldr	r2, [pc, #724]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800348e:	430b      	orrs	r3, r1
 8003490:	6553      	str	r3, [r2, #84]	; 0x54
 8003492:	e003      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003498:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80034a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80034aa:	2300      	movs	r3, #0
 80034ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80034b2:	460b      	mov	r3, r1
 80034b4:	4313      	orrs	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034b8:	4baa      	ldr	r3, [pc, #680]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c6:	4aa7      	ldr	r2, [pc, #668]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80034d8:	653b      	str	r3, [r7, #80]	; 0x50
 80034da:	2300      	movs	r3, #0
 80034dc:	657b      	str	r3, [r7, #84]	; 0x54
 80034de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80034e2:	460b      	mov	r3, r1
 80034e4:	4313      	orrs	r3, r2
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80034e8:	4b9e      	ldr	r3, [pc, #632]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034f8:	4a9a      	ldr	r2, [pc, #616]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034fa:	430b      	orrs	r3, r1
 80034fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48
 800350c:	2300      	movs	r3, #0
 800350e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003510:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003514:	460b      	mov	r3, r1
 8003516:	4313      	orrs	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800351a:	4b92      	ldr	r3, [pc, #584]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003528:	4a8e      	ldr	r2, [pc, #568]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800353a:	643b      	str	r3, [r7, #64]	; 0x40
 800353c:	2300      	movs	r3, #0
 800353e:	647b      	str	r3, [r7, #68]	; 0x44
 8003540:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d00e      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800354a:	4b86      	ldr	r3, [pc, #536]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	4a85      	ldr	r2, [pc, #532]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003554:	6113      	str	r3, [r2, #16]
 8003556:	4b83      	ldr	r3, [pc, #524]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003558:	6919      	ldr	r1, [r3, #16]
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003562:	4a80      	ldr	r2, [pc, #512]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003564:	430b      	orrs	r3, r1
 8003566:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
 8003576:	2300      	movs	r3, #0
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003584:	4b77      	ldr	r3, [pc, #476]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800358c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	4a74      	ldr	r2, [pc, #464]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003594:	430b      	orrs	r3, r1
 8003596:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
 80035a6:	2300      	movs	r3, #0
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
 80035aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80035ae:	460b      	mov	r3, r1
 80035b0:	4313      	orrs	r3, r2
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035b4:	4b6b      	ldr	r3, [pc, #428]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c4:	4a67      	ldr	r2, [pc, #412]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035c6:	430b      	orrs	r3, r1
 80035c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	2100      	movs	r1, #0
 80035d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80035e0:	460b      	mov	r3, r1
 80035e2:	4313      	orrs	r3, r2
 80035e4:	d011      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ea:	3308      	adds	r3, #8
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f8ba 	bl	8003768 <RCCEx_PLL2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80035fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	2100      	movs	r1, #0
 8003614:	6239      	str	r1, [r7, #32]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
 800361c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003620:	460b      	mov	r3, r1
 8003622:	4313      	orrs	r3, r2
 8003624:	d011      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362a:	3308      	adds	r3, #8
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f89a 	bl	8003768 <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800363a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	2100      	movs	r1, #0
 8003654:	61b9      	str	r1, [r7, #24]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d011      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366a:	3308      	adds	r3, #8
 800366c:	2102      	movs	r1, #2
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f87a 	bl	8003768 <RCCEx_PLL2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800367a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	2100      	movs	r1, #0
 8003694:	6139      	str	r1, [r7, #16]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80036a0:	460b      	mov	r3, r1
 80036a2:	4313      	orrs	r3, r2
 80036a4:	d011      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036aa:	3328      	adds	r3, #40	; 0x28
 80036ac:	2100      	movs	r1, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f90c 	bl	80038cc <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80036ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	2100      	movs	r1, #0
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036e0:	460b      	mov	r3, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	d011      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ea:	3328      	adds	r3, #40	; 0x28
 80036ec:	2101      	movs	r1, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f8ec 	bl	80038cc <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003706:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	2100      	movs	r1, #0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003720:	460b      	mov	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	d011      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372a:	3328      	adds	r3, #40	; 0x28
 800372c:	2102      	movs	r1, #2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f8cc 	bl	80038cc <RCCEx_PLL3_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800373a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800374a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
}
 8003758:	4618      	mov	r0, r3
 800375a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800375e:	46bd      	mov	sp, r7
 8003760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003764:	58024400 	.word	0x58024400

08003768 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003776:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b03      	cmp	r3, #3
 8003780:	d101      	bne.n	8003786 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e099      	b.n	80038ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003786:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a4e      	ldr	r2, [pc, #312]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 800378c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003792:	f7fd fb31 	bl	8000df8 <HAL_GetTick>
 8003796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003798:	e008      	b.n	80037ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800379a:	f7fd fb2d 	bl	8000df8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e086      	b.n	80038ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80037ac:	4b45      	ldr	r3, [pc, #276]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80037b8:	4b42      	ldr	r3, [pc, #264]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	031b      	lsls	r3, r3, #12
 80037c6:	493f      	ldr	r1, [pc, #252]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	628b      	str	r3, [r1, #40]	; 0x28
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	3b01      	subs	r3, #1
 80037dc:	025b      	lsls	r3, r3, #9
 80037de:	b29b      	uxth	r3, r3
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	061b      	lsls	r3, r3, #24
 80037f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037fc:	4931      	ldr	r1, [pc, #196]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003802:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	492d      	ldr	r1, [pc, #180]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003810:	4313      	orrs	r3, r2
 8003812:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	f023 0220 	bic.w	r2, r3, #32
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	4928      	ldr	r1, [pc, #160]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003826:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	4a26      	ldr	r2, [pc, #152]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 800382c:	f023 0310 	bic.w	r3, r3, #16
 8003830:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003832:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <RCCEx_PLL2_Config+0x160>)
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	69d2      	ldr	r2, [r2, #28]
 800383e:	00d2      	lsls	r2, r2, #3
 8003840:	4920      	ldr	r1, [pc, #128]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003842:	4313      	orrs	r3, r2
 8003844:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003846:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 800384c:	f043 0310 	orr.w	r3, r3, #16
 8003850:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003858:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4a19      	ldr	r2, [pc, #100]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 800385e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003862:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003864:	e00f      	b.n	8003886 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d106      	bne.n	800387a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003876:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003878:	e005      	b.n	8003886 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800387a:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	4a11      	ldr	r2, [pc, #68]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003884:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a0e      	ldr	r2, [pc, #56]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 800388c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003892:	f7fd fab1 	bl	8000df8 <HAL_GetTick>
 8003896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003898:	e008      	b.n	80038ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800389a:	f7fd faad 	bl	8000df8 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e006      	b.n	80038ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <RCCEx_PLL2_Config+0x15c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	58024400 	.word	0x58024400
 80038c8:	ffff0007 	.word	0xffff0007

080038cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038da:	4b53      	ldr	r3, [pc, #332]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d101      	bne.n	80038ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e099      	b.n	8003a1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80038ea:	4b4f      	ldr	r3, [pc, #316]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4e      	ldr	r2, [pc, #312]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f6:	f7fd fa7f 	bl	8000df8 <HAL_GetTick>
 80038fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038fc:	e008      	b.n	8003910 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80038fe:	f7fd fa7b 	bl	8000df8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e086      	b.n	8003a1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003910:	4b45      	ldr	r3, [pc, #276]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800391c:	4b42      	ldr	r3, [pc, #264]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	051b      	lsls	r3, r3, #20
 800392a:	493f      	ldr	r1, [pc, #252]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 800392c:	4313      	orrs	r3, r2
 800392e:	628b      	str	r3, [r1, #40]	; 0x28
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	3b01      	subs	r3, #1
 8003936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	3b01      	subs	r3, #1
 8003940:	025b      	lsls	r3, r3, #9
 8003942:	b29b      	uxth	r3, r3
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	3b01      	subs	r3, #1
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	3b01      	subs	r3, #1
 800395a:	061b      	lsls	r3, r3, #24
 800395c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003960:	4931      	ldr	r1, [pc, #196]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003966:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	492d      	ldr	r1, [pc, #180]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003978:	4b2b      	ldr	r3, [pc, #172]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4928      	ldr	r1, [pc, #160]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800398a:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 8003990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 8003998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800399a:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <RCCEx_PLL3_Config+0x160>)
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	69d2      	ldr	r2, [r2, #28]
 80039a2:	00d2      	lsls	r2, r2, #3
 80039a4:	4920      	ldr	r1, [pc, #128]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80039aa:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80039bc:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039c8:	e00f      	b.n	80039ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80039d0:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039dc:	e005      	b.n	80039ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f6:	f7fd f9ff 	bl	8000df8 <HAL_GetTick>
 80039fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039fc:	e008      	b.n	8003a10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80039fe:	f7fd f9fb 	bl	8000df8 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e006      	b.n	8003a1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <RCCEx_PLL3_Config+0x15c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	ffff0007 	.word	0xffff0007

08003a30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e10f      	b.n	8003c62 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a87      	ldr	r2, [pc, #540]	; (8003c6c <HAL_SPI_Init+0x23c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00f      	beq.n	8003a72 <HAL_SPI_Init+0x42>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a86      	ldr	r2, [pc, #536]	; (8003c70 <HAL_SPI_Init+0x240>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00a      	beq.n	8003a72 <HAL_SPI_Init+0x42>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a84      	ldr	r2, [pc, #528]	; (8003c74 <HAL_SPI_Init+0x244>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d005      	beq.n	8003a72 <HAL_SPI_Init+0x42>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d901      	bls.n	8003a72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0f7      	b.n	8003c62 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fbca 	bl	800420c <SPI_GetPacketSize>
 8003a78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a7b      	ldr	r2, [pc, #492]	; (8003c6c <HAL_SPI_Init+0x23c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00c      	beq.n	8003a9e <HAL_SPI_Init+0x6e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a79      	ldr	r2, [pc, #484]	; (8003c70 <HAL_SPI_Init+0x240>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <HAL_SPI_Init+0x6e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a78      	ldr	r2, [pc, #480]	; (8003c74 <HAL_SPI_Init+0x244>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d002      	beq.n	8003a9e <HAL_SPI_Init+0x6e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d811      	bhi.n	8003ac2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003aa2:	4a72      	ldr	r2, [pc, #456]	; (8003c6c <HAL_SPI_Init+0x23c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a70      	ldr	r2, [pc, #448]	; (8003c70 <HAL_SPI_Init+0x240>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_SPI_Init+0x8c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6f      	ldr	r2, [pc, #444]	; (8003c74 <HAL_SPI_Init+0x244>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d104      	bne.n	8003ac6 <HAL_SPI_Init+0x96>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d901      	bls.n	8003ac6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0cd      	b.n	8003c62 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fc ffc2 	bl	8000a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003b02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b0c:	d119      	bne.n	8003b42 <HAL_SPI_Init+0x112>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b16:	d103      	bne.n	8003b20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10c      	bne.n	8003b42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b30:	d107      	bne.n	8003b42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00f      	beq.n	8003b6e <HAL_SPI_Init+0x13e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d90b      	bls.n	8003b6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e007      	b.n	8003b7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	431a      	orrs	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	ea42 0103 	orr.w	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bde:	ea42 0103 	orr.w	r1, r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d113      	bne.n	8003c1e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40013000 	.word	0x40013000
 8003c70:	40003800 	.word	0x40003800
 8003c74:	40003c00 	.word	0x40003c00

08003c78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3320      	adds	r3, #32
 8003c8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_SPI_Transmit+0x2a>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e1e1      	b.n	8004066 <HAL_SPI_Transmit+0x3ee>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003caa:	f7fd f8a5 	bl	8000df8 <HAL_GetTick>
 8003cae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d007      	beq.n	8003ccc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003cc8:	7efb      	ldrb	r3, [r7, #27]
 8003cca:	e1cc      	b.n	8004066 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Transmit+0x60>
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d107      	bne.n	8003ce8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003ce4:	7efb      	ldrb	r3, [r7, #27]
 8003ce6:	e1be      	b.n	8004066 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2203      	movs	r2, #3
 8003cec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	88fa      	ldrh	r2, [r7, #6]
 8003d02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003d38:	d108      	bne.n	8003d4c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e009      	b.n	8003d60 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d5e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4b96      	ldr	r3, [pc, #600]	; (8003fc0 <HAL_SPI_Transmit+0x348>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	88f9      	ldrh	r1, [r7, #6]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8c:	d107      	bne.n	8003d9e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	d947      	bls.n	8003e36 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003da6:	e03f      	b.n	8003e28 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d114      	bne.n	8003de0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003dde:	e023      	b.n	8003e28 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de0:	f7fd f80a 	bl	8000df8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d803      	bhi.n	8003df8 <HAL_SPI_Transmit+0x180>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d102      	bne.n	8003dfe <HAL_SPI_Transmit+0x186>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d114      	bne.n	8003e28 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f936 	bl	8004070 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e11e      	b.n	8004066 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1b9      	bne.n	8003da8 <HAL_SPI_Transmit+0x130>
 8003e34:	e0f1      	b.n	800401a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b07      	cmp	r3, #7
 8003e3c:	f240 80e6 	bls.w	800400c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003e40:	e05d      	b.n	8003efe <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d132      	bne.n	8003eb6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d918      	bls.n	8003e8e <HAL_SPI_Transmit+0x216>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d014      	beq.n	8003e8e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	1d1a      	adds	r2, r3, #4
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b02      	subs	r3, #2
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003e8c:	e037      	b.n	8003efe <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003eb4:	e023      	b.n	8003efe <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb6:	f7fc ff9f 	bl	8000df8 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d803      	bhi.n	8003ece <HAL_SPI_Transmit+0x256>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d102      	bne.n	8003ed4 <HAL_SPI_Transmit+0x25c>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d114      	bne.n	8003efe <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f8cb 	bl	8004070 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0b3      	b.n	8004066 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d19b      	bne.n	8003e42 <HAL_SPI_Transmit+0x1ca>
 8003f0a:	e086      	b.n	800401a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d154      	bne.n	8003fc4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d918      	bls.n	8003f58 <HAL_SPI_Transmit+0x2e0>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d914      	bls.n	8003f58 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b04      	subs	r3, #4
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003f56:	e059      	b.n	800400c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d917      	bls.n	8003f94 <HAL_SPI_Transmit+0x31c>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d013      	beq.n	8003f94 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f70:	881a      	ldrh	r2, [r3, #0]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	1c9a      	adds	r2, r3, #2
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b02      	subs	r3, #2
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003f92:	e03b      	b.n	800400c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3320      	adds	r3, #32
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003fbe:	e025      	b.n	800400c <HAL_SPI_Transmit+0x394>
 8003fc0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc4:	f7fc ff18 	bl	8000df8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d803      	bhi.n	8003fdc <HAL_SPI_Transmit+0x364>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d102      	bne.n	8003fe2 <HAL_SPI_Transmit+0x36a>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d114      	bne.n	800400c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f844 	bl	8004070 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e02c      	b.n	8004066 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f af79 	bne.w	8003f0c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2200      	movs	r2, #0
 8004022:	2108      	movs	r1, #8
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f8c3 	bl	80041b0 <SPI_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004036:	f043 0220 	orr.w	r2, r3, #32
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f815 	bl	8004070 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8004064:	7efb      	ldrb	r3, [r7, #27]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop

08004070 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0208 	orr.w	r2, r2, #8
 800408e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0210 	orr.w	r2, r2, #16
 800409e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6919      	ldr	r1, [r3, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <SPI_CloseTransfer+0x13c>)
 80040bc:	400b      	ands	r3, r1
 80040be:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80040ce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d014      	beq.n	8004106 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00f      	beq.n	8004106 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699a      	ldr	r2, [r3, #24]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0220 	orr.w	r2, r2, #32
 8004104:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b03      	cmp	r3, #3
 8004110:	d014      	beq.n	800413c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00f      	beq.n	800413c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004122:	f043 0204 	orr.w	r2, r3, #4
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00f      	beq.n	8004166 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414c:	f043 0201 	orr.w	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004164:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00f      	beq.n	8004190 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004176:	f043 0208 	orr.w	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	fffffc90 	.word	0xfffffc90

080041b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80041c0:	e010      	b.n	80041e4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c2:	f7fc fe19 	bl	8000df8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d803      	bhi.n	80041da <SPI_WaitOnFlagUntilTimeout+0x2a>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d102      	bne.n	80041e0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e00f      	b.n	8004204 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d0df      	beq.n	80041c2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	3301      	adds	r3, #1
 8004224:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	3307      	adds	r3, #7
 800422a:	08db      	lsrs	r3, r3, #3
 800422c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	fb02 f303 	mul.w	r3, r2, r3
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <__libc_init_array>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4d0d      	ldr	r5, [pc, #52]	; (800427c <__libc_init_array+0x38>)
 8004248:	4c0d      	ldr	r4, [pc, #52]	; (8004280 <__libc_init_array+0x3c>)
 800424a:	1b64      	subs	r4, r4, r5
 800424c:	10a4      	asrs	r4, r4, #2
 800424e:	2600      	movs	r6, #0
 8004250:	42a6      	cmp	r6, r4
 8004252:	d109      	bne.n	8004268 <__libc_init_array+0x24>
 8004254:	4d0b      	ldr	r5, [pc, #44]	; (8004284 <__libc_init_array+0x40>)
 8004256:	4c0c      	ldr	r4, [pc, #48]	; (8004288 <__libc_init_array+0x44>)
 8004258:	f000 f820 	bl	800429c <_init>
 800425c:	1b64      	subs	r4, r4, r5
 800425e:	10a4      	asrs	r4, r4, #2
 8004260:	2600      	movs	r6, #0
 8004262:	42a6      	cmp	r6, r4
 8004264:	d105      	bne.n	8004272 <__libc_init_array+0x2e>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	f855 3b04 	ldr.w	r3, [r5], #4
 800426c:	4798      	blx	r3
 800426e:	3601      	adds	r6, #1
 8004270:	e7ee      	b.n	8004250 <__libc_init_array+0xc>
 8004272:	f855 3b04 	ldr.w	r3, [r5], #4
 8004276:	4798      	blx	r3
 8004278:	3601      	adds	r6, #1
 800427a:	e7f2      	b.n	8004262 <__libc_init_array+0x1e>
 800427c:	080042c4 	.word	0x080042c4
 8004280:	080042c4 	.word	0x080042c4
 8004284:	080042c4 	.word	0x080042c4
 8004288:	080042c8 	.word	0x080042c8

0800428c <memset>:
 800428c:	4402      	add	r2, r0
 800428e:	4603      	mov	r3, r0
 8004290:	4293      	cmp	r3, r2
 8004292:	d100      	bne.n	8004296 <memset+0xa>
 8004294:	4770      	bx	lr
 8004296:	f803 1b01 	strb.w	r1, [r3], #1
 800429a:	e7f9      	b.n	8004290 <memset+0x4>

0800429c <_init>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	bf00      	nop
 80042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a2:	bc08      	pop	{r3}
 80042a4:	469e      	mov	lr, r3
 80042a6:	4770      	bx	lr

080042a8 <_fini>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr
