/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "SimpleFOC.hpp"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define ROLE_MASTER  // when defined MASTER clock settings are programmed, else, SLAVE clock settings are programmed
#define SENSOR_MAGNETIC //position sensor is MAGNETIC (AS5048A)
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TEST_SPI 0 //SPI cable super flaky - need to run this test sometimes

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
PhaseCurrent_s currents;
float current_magnitude = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
BLDCMotor motor = BLDCMotor(7);//,0.039);//,0.039); //(pp,phase_resistance)
BLDCDriver3PWM driver = BLDCDriver3PWM(PE11, PE14, PE9, Enable_Pin8_Pin);
#ifdef SENSOR_ENCODER
	Encoder sensor = Encoder(2, 3, 2048, 11); //these pins, and values are actually hardcoded
#else //SENSOR_MAGNETIC
	//Magnetic sensor class supports only AS5048A at the moment: https://media.digikey.com/pdf/Data%20Sheets/Austriamicrosystems%20PDFs/AS5048A,B.pdf
	MagneticSensorSPI sensor = MagneticSensorSPI(); //CS = D10 (PD14 on STM32H743), resolution bits = 14, angle register address = 0x3fff); //these pins are all hardcoded
#endif
	InlineCurrentSense current_sense = InlineCurrentSense(0.01, 50.0, phaseA, phaseB); //pins are hardcoded

	// function setting the pwm duty cycle to the hardware
	// - BLDC motor - 3PWM setting
	//- hardware specific
	void _writeDutyCycle3PWM(float dc_a,  float dc_b, float dc_c, int pinA, int pinB, int pinC){
		int pwm_range = htim1.Instance->ARR;
		htim1.Instance->CCR1 = (int)(dc_a * pwm_range);
		htim1.Instance->CCR2 = (int)(dc_c * pwm_range);
		htim1.Instance->CCR4 = (int)(dc_b * pwm_range);
	}

	// function reading an ADC value and returning the read voltage

	float _readADCVoltage_pinA(void){
		int raw_reading = HAL_ADC_GetValue(&hadc1); //assigned to a variable prior to return for debugging purposes
		return raw_reading;
	}

	float _readADCVoltage_pinB(void) {
		int raw_reading = HAL_ADC_GetValue(&hadc3); //assigned to a variable prior to return for debugging purposes
		return raw_reading;
	}

	int _calibrate_phaseA(void) {
		int sum = 0;
		//calibration process, the calculated calibration value (offset) should be automatically applied
		//during subsequent conversions
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
		for (int i = 0; i < 100; i++) {
			sum += HAL_ADC_GetValue(&hadc1);
		}
		return (float)(sum/100.0);
	}

	int _calibrate_phaseB(void) {
		int sum = 0;
		//calibration process, the calculated calibration value (offset) should be automatically applied
		//during subsequent conversions
		HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
		for (int i = 0; i < 100; i++) {
			sum += HAL_ADC_GetValue(&hadc3);
		}
		return (float)(sum/100);
	}

/*
	uint16_t _SPI_read(uint16_t read_command) {
		uint8_t register_value[2] = {0x00, 0x00};
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&read_command, &register_value[0], 1, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
		return ((register_value[1] << 8) | register_value[0]);
	}
	*/


	int loopIdx = 100000;
	float time_loop;
	bool initialisation_complete = false;
	bool run_foc_loop = false;
	int inc_mov_loop = 0;

	float copy_target = 0;
	float lk_shaft_velocity;
	float lk_shaft_angle;
	float lk_current_sp;

	float copy_PID_Iq_P = 0.5;
	float copy_PID_Iq_I = 0.1;
	float copy_PID_Iq_D = 0.01;
	float copy_PID_Iq_ramp = 50;
	float copy_PID_Iq_limit = 2;
	float copy_PID_Iq_Tf = 0.01;

	float copy_PID_Id_P = 0.5;
	float copy_PID_Id_I = 0.1;
	float copy_PID_Id_D = 0.01;
	float copy_PID_Id_ramp = 50;
	float copy_PID_Id_limit = 1;
	float copy_PID_Id_Tf = 0.01;

	float copy_PID_velocity_P = 0;// 0.1;//0.05;
	float copy_PID_velocity_I = 0;//0.5;//0.5;
	float copy_PID_velocity_D = 0;// 0.001;//0;
	float copy_PID_velocity_ramp = 0;// 5000;//1000;
	float copy_PID_velocity_limit = 0;// 24;//2;
	float copy_PID_velocity_Tf = 0;// 0;//0.01;//0;

	float copy_PID_angle_P = 0;// 10;//0.5;
	float copy_PID_angle_I = 0;// 1;//0;
	float copy_PID_angle_D = 0;// 0;//0;
	float copy_PID_angle_ramp = 0;// 100;//1e9;
	float copy_PID_angle_limit = 0;// 10;//20;
	float copy_PID_angle_Tf = 0;// 0;//0.001;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC3_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1); //25kHz timer - need interrupt to trigger FOC loop at this frequency
  HAL_TIM_Base_Start_IT(&htim2); //timer set to 1MHz used by _micros(), will overflow every 4295 seconds - should do something about this overflow... TODO

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);


  //driver config:
  driver.voltage_power_supply = 12;//24;
  driver.init();
  //link the motor and the driver:
  motor.linkDriver(&driver);
  //aligning the voltage [V]
  motor.voltage_sensor_align = 2;
  //index search velocity [rad/s]
  motor.velocity_index_search = 0.5; //needs to be low otherwise index search fails. Tested to 10rad/s - doesn't fail anymore.
  //set motion control loop to be used
 // motor.foc_modulation = FOCModulationType::SpaceVectorPWM;//SpaceVectorPWM;//SinePWM;
  motor.controller = MotionControlType::velocity;//angle;//velocity;//torque;
 // motor.torque_controller = TorqueControlType::foc_current;//voltage;//foc_current;//dc_current;//voltage;

  //initialise motor
  motor.init();
  //align sensor and start FOC
  motor.initFOC();
  _delay(100);



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 lk_shaft_velocity = motor.shaft_velocity;
		 lk_shaft_angle = motor.shaft_angle;
		 lk_current_sp = motor.current_sp;

		  motor.loopFOC();
		  motor.move(10);

  }
}
  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 120;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
