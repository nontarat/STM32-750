/*
 * pid.h
 *
 *  Created on: Oct 12, 2023
 *      Author: user
 */

#ifndef SRC_COMMON_PID_H_
#define SRC_COMMON_PID_H_
#include "time_utils.h"
#include "foc_utils.h"

class PIDController {
public:
	 /**
	     *
	     * @param P - Proportional gain
	     * @param I - Integral gain
	     * @param D - Derivative gain
	     * @param ramp - Maximum speed of change of the output value
	     * @param limit - Maximum output value
	     */
	    PIDController(float P, float I, float D, float ramp, float limit);
	virtual ~PIDController()= default;
	float operator() (float error);

	    float P; //!< Proportional gain
	    float I; //!< Integral gain
	    float D; //!< Derivative gain
	    float output_ramp; //!< Maximum speed of change of the output value
	    float limit; //!< Maximum output value

	protected:
	    float integral_prev; //!< last integral component value
	    float error_prev; //!< last tracking error value
	    unsigned long timestamp_prev; //!< Last execution timestamp
	    float output_prev;  //!< last pid output value
};

#endif /* SRC_COMMON_PID_H_ */
