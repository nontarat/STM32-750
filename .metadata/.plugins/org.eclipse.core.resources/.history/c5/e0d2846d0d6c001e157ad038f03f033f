/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x41, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x61, 0x73, 0x79, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x61, 0x77, 0x6e, 0x2c, 0x20, 0x67, 0x61, 0x72, 0x6c, 0x69, 0x63, 0x20, 0x26, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x20, 0x70, 0x61, 0x73, 0x74, 0x61, 0xa, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2c, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x20, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x20, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0, // @0 "A quick and easy simple prawn, garlic & chilli pasta\nrecipe, from our authentic Italian cuisine collection."
    0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x20, 0x63, 0x72, 0x65, 0x61, 0x6d, 0x79, 0x20, 0x70, 0x61, 0x73, 0x74, 0x61, 0x20, 0x73, 0x61, 0x6c, 0x61, 0x64, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0xa, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x75, 0x63, 0x6b, 0x77, 0x68, 0x65, 0x61, 0x74, 0x20, 0x70, 0x61, 0x73, 0x74, 0x61, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x2e, 0x2e, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x2e, 0x0, // @108 "Classic creamy pasta salad given a healthy makeover by \nusing buckwheat pasta and a lighter... See more."
    0x48, 0x65, 0x61, 0x72, 0x74, 0x79, 0x20, 0x70, 0x61, 0x73, 0x74, 0x61, 0x20, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x61, 0x63, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x67, 0x67, 0x73, 0x20, 0xa, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x66, 0x61, 0x73, 0x74, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x0, // @213 "Hearty pasta recipe proves that bacon and eggs \nshould not be restricted to the breakfast table."
    0x53, 0x70, 0x61, 0x67, 0x68, 0x65, 0x74, 0x74, 0x69, 0x20, 0x61, 0x6c, 0x6c, 0x61, 0x20, 0x70, 0x75, 0x74, 0x74, 0x61, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x20, 0x2d, 0x20, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x61, 0x72, 0x6c, 0x69, 0x63, 0x2c, 0x20, 0xa, 0x63, 0x61, 0x70, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x69, 0x63, 0x79, 0x20, 0x6b, 0x69, 0x63, 0x6b, 0x2e, 0x0, // @310 "Spaghetti alla puttanesca - infused with garlic, \ncapers, anchovies and chilli for a spicy kick."
    0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x61, 0x20, 0x66, 0x61, 0x62, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x6d, 0x65, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x20, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0xa, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x20, 0x2d, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x20, 0x74, 0x61, 0x73, 0x74, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0, // @407 "This makes a fab family meal or Italian dinner party \nstarter - it's a real taste sensation."
    0x43, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x2c, 0x20, 0x70, 0x65, 0x73, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x65, 0x61, 0x73, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x20, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0xa, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x71, 0x75, 0x65, 0x65, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x0, // @500 "Chorizo, pesto and peas make a perfect combination, \nwhile adding a squeeze of lemon."
    0x54, 0x68, 0x69, 0x73, 0x20, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x61, 0x77, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x74, 0x61, 0x20, 0x6d, 0x65, 0x61, 0x6c, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x77, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x20, 0x75, 0x70, 0x20, 0xa, 0x69, 0x6e, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x68, 0x6f, 0x75, 0x72, 0x2e, 0x0, // @586 "This king prawn and pasta meal can be whipped up \nin just over half an hour."
    0x4b, 0x49, 0x4e, 0x47, 0x20, 0x50, 0x52, 0x41, 0x57, 0x4e, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x42, 0x41, 0x53, 0x49, 0x4c, 0x20, 0x50, 0x41, 0x53, 0x54, 0x41, 0x0, // @663 "KING PRAWN AND BASIL PASTA"
    0x47, 0x41, 0x52, 0x4c, 0x49, 0x43, 0x20, 0x43, 0x48, 0x49, 0x4c, 0x4c, 0x49, 0x20, 0x50, 0x52, 0x41, 0x57, 0x4e, 0x20, 0x50, 0x41, 0x53, 0x54, 0x41, 0x0, // @690 "GARLIC CHILLI PRAWN PASTA"
    0x50, 0x41, 0x53, 0x54, 0x41, 0x2c, 0x20, 0x50, 0x45, 0x53, 0x54, 0x4f, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x43, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x0, // @716 "PASTA, PESTO AND CHORIZO"
    0x50, 0x41, 0x53, 0x54, 0x41, 0x20, 0x57, 0x49, 0x54, 0x48, 0x20, 0x54, 0x55, 0x53, 0x43, 0x41, 0x4e, 0x20, 0x50, 0x45, 0x53, 0x54, 0x4f, 0x0, // @741 "PASTA WITH TUSCAN PESTO"
    0x42, 0x41, 0x43, 0x4f, 0x4e, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x45, 0x47, 0x47, 0x20, 0x4c, 0x49, 0x4e, 0x47, 0x55, 0x49, 0x4e, 0x45, 0x0, // @765 "BACON AND EGG LINGUINE"
    0x50, 0x41, 0x53, 0x54, 0x41, 0x20, 0x41, 0x4c, 0x4c, 0x41, 0x20, 0x50, 0x55, 0x54, 0x54, 0x41, 0x4e, 0x45, 0x53, 0x43, 0x41, 0x0, // @788 "PASTA ALLA PUTTANESCA"
    0x42, 0x41, 0x54, 0x48, 0x52, 0x4f, 0x4f, 0x4d, 0x20, 0x2d, 0x20, 0x33, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x0, // @810 "BATHROOM - 3 DEVICES"
    0x36, 0x3a, 0x30, 0x30, 0x20, 0x41, 0x4d, 0x20, 0x54, 0x4f, 0x20, 0x31, 0x30, 0x3a, 0x30, 0x30, 0x20, 0x50, 0x4d, 0x0, // @831 "6:00 AM TO 10:00 PM"
    0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x20, 0x50, 0x41, 0x53, 0x54, 0x41, 0x20, 0x53, 0x41, 0x4c, 0x41, 0x44, 0x0, // @851 "CHICKEN PASTA SALAD"
    0x4b, 0x49, 0x54, 0x43, 0x48, 0x45, 0x4e, 0x20, 0x2d, 0x20, 0x34, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x0, // @871 "KITCHEN - 4 DEVICES"
    0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x0, // @891 "CONNECTED DEVICES"
    0x52, 0x4f, 0x4f, 0x4d, 0x20, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x0, // @909 "ROOM TEMPERATURES"
    0x54, 0x41, 0x50, 0x20, 0x54, 0x4f, 0x20, 0x57, 0x41, 0x4b, 0x45, 0x20, 0x4d, 0x45, 0x20, 0x55, 0x50, 0x0, // @927 "TAP TO WAKE ME UP"
    0x57, 0x41, 0x54, 0x45, 0x52, 0x20, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x0, // @945 "WATER TEMPERATURE"
    0x57, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x20, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x0, // @963 "WASHING MACHINE"
    0x41, 0x49, 0x52, 0x20, 0x2f, 0x20, 0x48, 0x55, 0x4d, 0x49, 0x44, 0x49, 0x54, 0x59, 0x0, // @979 "AIR / HUMIDITY"
    0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x20, 0x48, 0x4f, 0x4f, 0x44, 0x0, // @994 "EXTRACTOR HOOD"
    0x4c, 0x49, 0x47, 0x48, 0x54, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x0, // @1009 "LIGHT CONTROL"
    0x54, 0x49, 0x4d, 0x45, 0x3a, 0x20, 0x2, 0x0, // @1023 "TIME: <>"
    0x48, 0x4f, 0x4d, 0x45, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x0, // @1031 "HOME CONTROL"
    0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x20, 0x57, 0x45, 0x41, 0x52, 0x0, // @1044 "ACTIVE WEAR"
    0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x48, 0x45, 0x41, 0x54, 0x0, // @1056 "BOTTOM HEAT"
    0x46, 0x41, 0x4e, 0x20, 0x2b, 0x20, 0x47, 0x52, 0x49, 0x4c, 0x4c, 0x0, // @1068 "FAN + GRILL"
    0x4c, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x20, 0x52, 0x4f, 0x4f, 0x4d, 0x0, // @1080 "LIVING ROOM"
    0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x20, 0x55, 0x50, 0x0, // @1092 "HEATING UP"
    0x4a, 0x45, 0x54, 0x20, 0x53, 0x50, 0x45, 0x45, 0x44, 0x0, // @1103 "JET SPEED"
    0x4f, 0x56, 0x45, 0x4e, 0x20, 0x48, 0x45, 0x41, 0x54, 0x0, // @1113 "OVEN HEAT"
    0x2, 0x20, 0xb0, 0x43, 0x0, // @1123 "<> ?C"
    0x42, 0x41, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x0, // @1128 "BASEMENT"
    0x42, 0x41, 0x54, 0x48, 0x52, 0x4f, 0x4f, 0x4d, 0x0, // @1137 "BATHROOM"
    0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x0, // @1146 "SCHEDULE"
    0x54, 0x4f, 0x50, 0x20, 0x48, 0x45, 0x41, 0x54, 0x0, // @1155 "TOP HEAT"
    0x57, 0x45, 0x45, 0x4b, 0x44, 0x41, 0x59, 0x53, 0x0, // @1164 "WEEKDAYS"
    0x31, 0x30, 0x30, 0x20, 0xb0, 0x43, 0x46, 0x0, // @1173 "100 ?CF"
    0x42, 0x41, 0x54, 0x48, 0x54, 0x55, 0x42, 0x0, // @1181 "BATHTUB"
    0x42, 0x45, 0x44, 0x52, 0x4f, 0x4f, 0x4d, 0x0, // @1189 "BEDROOM"
    0x4b, 0x49, 0x54, 0x43, 0x48, 0x45, 0x4e, 0x0, // @1197 "KITCHEN"
    0x4c, 0x45, 0x56, 0x45, 0x4c, 0x20, 0x33, 0x0, // @1205 "LEVEL 3"
    0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x0, // @1213 "DEVICE"
    0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x0, // @1220 "LIGHTS"
    0x43, 0x4c, 0x45, 0x41, 0x4e, 0x0, // @1227 "CLEAN"
    0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x0, // @1233 "FLOOR"
    0x49, 0x44, 0x4c, 0x45, 0x0, // @1239 "IDLE"
    0x4f, 0x56, 0x45, 0x4e, 0x0, // @1244 "OVEN"
    0x32, 0x31, 0x35, 0x0, // @1249 "215"
    0x46, 0x41, 0x4e, 0x0, // @1253 "FAN"
    0x30, 0x39, 0x0, // @1257 "09"
    0x31, 0x38, 0x0, // @1260 "18"
    0x34, 0x38, 0x0, // @1263 "48"
    0x35, 0x30, 0x0, // @1266 "50"
    0x36, 0x34, 0x0, // @1269 "64"
    0x37, 0x33, 0x0, // @1272 "73"
    0x41, 0x4d, 0x0, // @1275 "AM"
    0x4f, 0x4e, 0x0, // @1278 "ON"
    0xb0, 0x46, 0x0, // @1281 "?F"
    0x2d, 0x0, // @1284 "-"
    0x3a, 0x0 // @1286 ":"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
