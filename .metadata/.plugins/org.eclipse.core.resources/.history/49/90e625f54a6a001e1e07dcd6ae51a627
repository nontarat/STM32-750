/*
 * pid.h
 *
 *  Created on: Oct 14, 2023
 *      Author: user
 */

#ifndef SRC_COMMON_PID_H_
#define SRC_COMMON_PID_H_

class PIDController {
public:
	/**
	     *
	     * @param P - Proportional gain
	     * @param I - Integral gain
	     * @param D - Derivative gain
	     * @param ramp - Maximum speed of change of the output value
	     * @param limit - Maximum output value
	     */
	PIDController(float P, float I, float D, float ramp, float limit);
	virtual ~PIDController();

    float operator() (float error);
    void reset();

    float P; //!< Proportional gain
    float I; //!< Integral gain
    float D; //!< Derivative gain
    float output_ramp; //!< Maximum speed of change of the output value
    float limit; //!< Maximum output value

protected:
    float error_prev; //!< last tracking error value
    float output_prev;  //!< last pid output value
    float integral_prev; //!< last integral component value
    unsigned long timestamp_prev; //!< Last execution timestamp
};

#endif /* SRC_COMMON_PID_H_ */
