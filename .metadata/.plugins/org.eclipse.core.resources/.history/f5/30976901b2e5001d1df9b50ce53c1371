#include <hx711.h>
#include "main.h"
#include "gpio.h"
#include "hx711Config.h"
#include "tim.h"

extern TIM_HandleTypeDef htim1;

void hx711_delay_us (uint16_t us) //delay function
{
__HAL_TIM_SET_COUNTER(&htim1,0);  // setting the delay counter to 0.
while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // while loop till the counter reaches the delay given (us).
}

void hx711_lock(hx711_t *hx711)
{
	while(hx711->lock)
		 HAL_Delay(1);
		  hx711->lock = 1;
}
void hx711_unlock(hx711_t *hx711)
{
  hx711->lock = 0;
}
void hx711_setGain1(uint8_t gain1)  //the values should be 32, 64 or 128
{
	if(gain1 < 64) GAIN1 = 2; //32, channel B
	else if(gain1 < 128) GAIN1 = 3; //64, channel A
	else GAIN1 = 1; //128, channel A
}

void hx711_setGain2(uint8_t gain2)  //the values should be 32, 64 or 128
{
	if(gain2 < 64) GAIN2 = 2; //32, channel B
	else if(gain2 < 128) GAIN2 = 3; //64, channel A
	else GAIN2 = 1; //128, channel A
}
void hx711_init1(void) //initializes the hx711 module by calling 2 functions.
{
  hx711_setGain1(128); //setting gain to 128, as this was our best result after trying with other gains.
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //writing to the pin and setting it to 0.
}
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
	hx711_setGain1(128);
hx711_lock(hx711);
hx711->clk_gpio = clk_gpio;
hx711->clk_pin = clk_pin;
hx711->dat_gpio = dat_gpio;
hx711->dat_pin = dat_pin;
GPIO_InitTypeDef  gpio = {0};

  gpio.Mode = GPIO_MODE_OUTPUT_PP;
  gpio.Pull = GPIO_NOPULL;
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio.Pin = clk_pin;
  HAL_GPIO_Init(clk_gpio, &gpio);

  gpio.Mode = GPIO_MODE_INPUT;
  gpio.Pull = GPIO_PULLUP;
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio.Pin = dat_pin;
  HAL_GPIO_Init(dat_gpio, &gpio);

//  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
  //HAL_Delay(10);
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
  //HAL_Delay(10);
  hx711_value(hx711);
  //hx711_value(hx711);
  hx711_unlock(hx711);
}

int32_t hx711_get_value(void) //getting the weight from the module.
{
	uint32_t data = 0; //the data (weight) is firstly set to 0.
	uint8_t dout; // this is to show whether at this bit, if theres a number that should be recorded.
	int32_t filler; //to fill the rest of the 32 bits.
	int32_t ret_value; //final value to return after adding the filling and the data together.

	for (uint8_t i = 0; i < 24; i++) //read 24 bit data + set gain and start next conversion
	{

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //set the clock pin to 1.
		delay_us(1); //delay
			dout = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3); //read from the dout pin in variable dout.
			data = data << 1; //shift the data by 1 to make sure we are in correct position depending on the counter.
			if (dout) //if this bit has an output (value of 1) .
			{
				data++; //it sets the data value at this position as 1 as well.
			}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //set clock pin to 0.
		delay_us(1); //delay
	}

	for( int i = 0; i < GAIN; i ++ ) //this for loop is for the gain, to add more clock cycles based on the gain.
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //set clock pin to 1.
		delay_us(1); //delay
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //set clock pin to 0.
		delay_us(1); //delay, here we are making a clock cycle.
	}

	if( data & 0x800000 ) //here we are checking if theres values in the 24 bits by anding.
		filler = 0xFF000000; //if there are values we add 1's to the last 8 bits which are needed as this is a 32-bit adc.
	else
		filler = 0x00000000; //however, if nothing is in the data we just add 0's.

	ret_value = filler + data; //the return value is the addition of the data with the filler to have the 32-bits.
	return ret_value; //returning the value to be printed.
}

int32_t hx711_value(hx711_t *hx711)
{
	uint32_t data = 0; //the data (weight) is firstly set to 0.
	uint8_t dout; // this is to show whether at this bit, if theres a number that should be recorded.
	int32_t filler; //to fill the rest of the 32 bits.
	int32_t ret_value; //final value to return after adding the filling and the data together.

	for (uint8_t i = 0; i < 24; i++) //read 24 bit data + set gain and start next conversion
	{
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
	    hx711_delay_us(1);
		dout = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3); //read from the dout pin in variable dout.
		data = data << 1; //shift the data by 1 to make sure we are in correct position depending on the counter.
		if (dout) //if this bit has an output (value of 1)
		{
			data++; //it sets the data value at this position as 1 as well.
		}
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
		hx711_delay_us(1);

	}
	for(int i = 0; i< GAIN1; i++)
	{
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
		hx711_delay_us(1);
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
		hx711_delay_us(1);
	}
	if( data & 0x800000 ) //here we are checking if theres values in the 24 bits by anding.
		filler = 0xFF000000; //if there are values we add 1's to the last 8 bits which are needed as this is a 32-bit adc.
	else
		filler = 0x00000000; //however, if nothing is in the data we just add 0's.

	ret_value = filler + data; //the return value is the addition of the data with the filler to have the 32-bits.
	return ret_value; //returning the value to be printed.
	/*
	  uint32_t data = 0;
	  uint32_t  startTime = HAL_GetTick();
	  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
	  {
		  HAL_Delay(1);
	    if(HAL_GetTick() - startTime > 150)
	      return 0;
	  }
	  for(int8_t i=0; i<24 ; i++)
	    {
	      HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
	      hx711_delay_us(1);
	      HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
	      hx711_delay_us(1);
	      data = data << 1;
	      if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
	        data ++;
	    }
	    data = data ^ 0x800000;
	    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
	    hx711_delay_us(1);
	    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
	    hx711_delay_us(1);
	    return data;
	    */
}

int32_t hx711_value_ave(hx711_t *hx711, uint16_t sample)
{
  hx711_lock(hx711);
  int64_t  ave = 0;
  for(uint16_t i=0 ; i<sample ; i++)
  {
    ave += hx711_value(hx711);
    HAL_Delay(5);
  }
  int32_t answer = (int32_t)(ave / sample);
  hx711_unlock(hx711);
  return answer;
}
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
  hx711_lock(hx711);
  int64_t  ave = 0;
  for(uint16_t i=0 ; i<sample ; i++)
  {
    ave += hx711_value(hx711);
    HAL_Delay(5);
  }
  hx711->offset = (int32_t)(ave / sample);
  hx711_unlock(hx711);
}

void hx711_calibration(hx711_t *hx711, int32_t noload_raw, int32_t load_raw, float scale)
{
  hx711_lock(hx711);
  hx711->offset = noload_raw;
  hx711->coef = (load_raw - noload_raw) / scale;
  hx711_unlock(hx711);
}

float hx711_weight(hx711_t *hx711, uint16_t sample)
{
  hx711_lock(hx711);
  int64_t  ave = 0;
  for(uint16_t i=0 ; i<sample ; i++)
  {
    ave += hx711_value(hx711);
    HAL_Delay(5);
  }
  int32_t data = (int32_t)(ave / sample);
  float answer =  (data - hx711->offset) / hx711->coef;
  hx711_unlock(hx711);
  return answer;
}

void hx711_coef_set(hx711_t *hx711, float coef)
{
  hx711->coef = coef;
}

float hx711_coef_get(hx711_t *hx711)
{
  return hx711->coef;
}

void hx711_power_down(hx711_t *hx711)
{
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
  HAL_Delay(1);
}

void hx711_power_up(hx711_t *hx711)
{
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
}

uint8_t hx711_is_ready(void) //making sure that the HX711 module is ready
{
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET; //reading a value from it, the reseting it.
}

