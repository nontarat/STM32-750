/*
 * main.cpp
 *
 *  Created on: Apr 8, 2023
 *      Author: user
 */
#include "main.h"
extern "c"
{
TIM_HandleTypeDef htim1;

}
uint8_t newDmaSignal 				=	 0 ;
uint16_t dmaSignal[16] 				= 	{0};
uint16_t dmaSignalNormalized[16] 	= 	{0};
uint16_t motorSpeed 				=	 0 ;
uint16_t test[16] = {1,2,3,4,5};
uint16_t divClosest(uint16_t a, uint16_t b)
{
	return  ( a + b / 2 ) / b ;
}

void processDmaSignal()
{
	newDmaSignal = 0;

	for(int index = 0 ; index < 15 ; index++)
	{
		for (int index = 0; index < 15; index++)
			dmaSignalNormalized[index] = divClosest(dmaSignal[index + 1] - dmaSignal[index], 8) - 8;
		//if (dmaSignalNormalized[0] > 1000 && dmaSignalNormalized[1] > 1000
		//		&& dmaSignalNormalized[2] > 1000) {
		//	return;
		//}

		for (int index = 0; index <= 10; index++) {
			if (dmaSignalNormalized[index] < 100)
				continue;
			//if (dmaSignalNormalized[index + 1] > 3000)
			//	continue;
			motorSpeed	=	dmaSignalNormalized[index + 1] << 6 |
							dmaSignalNormalized[index + 3] << 2 |
							dmaSignalNormalized[index + 5] >> 2;

			//uint16_t motorSpeedNewValue = dmaSignalNormalized[index + 1] << 6
			//		| dmaSignalNormalized[index + 3] << 2
			//		| dmaSignalNormalized[index + 5] >> 2;
			//if (motorSpeedNewValue < 1026)
			//	motorSpeed = motorSpeedNewValue;

			//break;
		}
	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(htim == &htim1 && htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1)
	{
		newDmaSignal = 1;
	}
}

void setup()
{
	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)dmaSignal, 16);
}
void maincpp()
{
	setup();
	while(1)
	{
		if(newDmaSignal)
		{
			processDmaSignal();
			HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)dmaSignal, 16);
		}
	}
}
