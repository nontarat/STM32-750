/*
 * mpr121.c
 *
 *  Created on: Jul 25, 2023
 *      Author: user
 */
#include "mpr121.h"
#include "stm32h7xx.h"
#include "stm32h750xx.h"
/* ------------- Local defines --------------- */

/* Uncomment this define to enable MPR121 IRQ interrupt */
//#define MPR121_INT_ENABLED


/* Number of electrodes of MPR121 */
#define NUM_OF_ELECTRODES	13


/* MPR121 I2C bus address */
#define MPR121_ADDRESS_BYTE	0x5A

static bool write_register(uint8_t , uint8_t );
static bool read_register(uint8_t, uint8_t *);


static bool write_register(uint8_t reg_addr, uint8_t value)
{
    bool success = true;

    while ((I2C1->ISR & I2C_ISR_BUSY) != 0);

    /* send START and wait for completion */
    I2C1->CR1 |= I2C_CR2_START;
    while ((I2C1->ISR & I2C_ISR_TXIS) == 0);

    /* send device address, r/w request and wait for completion */
    I2C1->TXDR = (MPR121_ADDRESS_BYTE << 1) | 0;  // Write address
    while ((I2C1->ISR & I2C_ISR_TXIS) == 0);

    /* check BUSY flag and go on if OK */
    if (I2C1->ISR & I2C_ISR_BUSY) {

        /* send register address */
        I2C1->TXDR = reg_addr;
        while ((I2C1->ISR & I2C_ISR_TXIS) == 0);

        /* send data byte */
        I2C1->TXDR = value;
        while ((I2C1->ISR & I2C_ISR_TXIS) == 0);

        /* send stop */
        I2C1->CR2 |= I2C_CR2_STOP;

        /* ATTENTION: consider to wait for a while */
    }
    else {
        /* error */
        success = false;
    }

    return success;
}

static bool read_register(uint8_t reg_addr, uint8_t *value_ptr)
{
    bool success = true;

    // Wait until the I2C bus is not busy
    while ((I2C1->ISR & I2C_ISR_BUSY) != 0);

    // Send START condition and wait for its completion
    I2C1->CR1 |= I2C_CR1_START;
    while ((I2C1->ISR & I2C_ISR_TXE) == 0);

    // Send the device address with the write request and wait for its completion
    I2C1->TXDR = (MPR121_ADDRESS_BYTE << 1) | 0; // Write request
    while ((I2C1->ISR & I2C_ISR_TXE) == 0);
    while ((I2C1->ISR & I2C_ISR_TC) == 0);

    // Send the register address to read from
    I2C1->TXDR = reg_addr;
    while ((I2C1->ISR & I2C_ISR_TXE) == 0);
    while ((I2C1->ISR & I2C_ISR_TC) == 0);

    // Send a repeated START condition and wait for its completion
    I2C1->CR1 |= I2C_CR1_START;
    while ((I2C1->ISR & I2C_ISR_TXE) == 0);

    // Send the device address with the read request and wait for its completion
    I2C1->TXDR = (MPR121_ADDRESS_BYTE << 1) | I2C_CR2_RD; // Read request
    while ((I2C1->ISR & I2C_ISR_TXE) == 0);

    // Disable ACK, so we only read one byte
    I2C1->CR1 &= ~I2C_CR1_ACK;

    // Clear ADDR flag by reading SR1 register followed by reading SR2 register
    (void)I2C1->ISR;
    (void)I2C1->ICR;

    // Wait for data reception
    while ((I2C1->ISR & I2C_ISR_RXNE) == 0);

    // Read the received byte
    *value_ptr = I2C1->RXDR;

    // Send STOP condition to end the communication
    I2C1->CR1 |= I2C_CR1_STOP;

    // Enable ACK again for future communications
    I2C1->CR1 |= I2C_CR1_ACK;

    // Return the success status of the operation
    return success;
}
