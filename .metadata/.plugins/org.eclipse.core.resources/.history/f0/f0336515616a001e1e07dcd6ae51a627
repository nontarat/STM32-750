/*
 * Sensor.h
 *
 *  Created on: Oct 14, 2023
 *      Author: user
 */

#ifndef SRC_COMMON_BASE_CLASSES_SENSOR_H_
#define SRC_COMMON_BASE_CLASSES_SENSOR_H_

/**
 *  Direction structure
 */
enum Direction{
    CW      = 1,  //clockwise
    CCW     = -1, // counter clockwise
    UNKNOWN = 0   //not yet known or invalid state
};

/**
 *  Pullup configuration structure
 */
enum Pullup{
    INTERN, //!< Use internal pullups
    EXTERN //!< Use external pullups
};
class Sensor {
public:
	Sensor();
	virtual ~Sensor();
	 /** get current angle (rad) */
	         float getAngle(){};
	        /** get current angular velocity (rad/s)*/
	         float getVelocity(){};
	        /**
	         *  set current angle as zero angle
	         *  return the angle [rad] difference
	         */
	        virtual float initRelativeZero(){};
	        /**
	         * set absolute zero angle as zero angle
	         * return the angle [rad] difference
	         */
	        virtual float initAbsoluteZero(){};

	        // if natural_direction == Direction::CCW then direction will be flipped to CW
	        int natural_direction = Direction::CW;

	        /**
	         * returns 0 if it has no absolute 0 measurement
	         * 0 - incremental encoder without index
	         * 1 - encoder with index & magnetic sensors
	         */
	        virtual int hasAbsoluteZero(){};
	        /**
	         * returns 0 if it does need search for absolute zero
	         * 0 - magnetic sensor (& encoder with index which is found)
	         * 1 - ecoder with index (with index not found yet)
	         */
	        virtual int needsAbsoluteZeroSearch(){};
	        /**
	         * returns 0 if it does need search for absolute zero
	         * 0 - magnetic sensor (& encoder with index which is found)
	         * 1 - encoder with index (with index not found yet)
	         */
	        virtual int needsSearch();

	        /** NAT: set angle to zero:         */
	        virtual void setAngle(float);
private:
    // velocity calculation variables
    float angle_prev=0; //!< angle in previous velocity calculation step
    long velocity_calc_timestamp=0; //!< last velocity calculation timestamp
};

#endif /* SRC_COMMON_BASE_CLASSES_SENSOR_H_ */
