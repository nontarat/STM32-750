/*
 * mpr121.c
 *
 *  Created on: Jul 25, 2023
 *      Author: user
 */
#include "mpr121.h"
#include "stm32h7xx.h"
#include "stm32h750xx.h"
#include "main.h"
#include "i2c.h"
#include "stm32h7xx_hal.h"
#include "gpio.h"

extern I2C_HandleTypeDef hi2c1;

/* ------------- Local defines --------------- */

/* Uncomment this define to enable MPR121 IRQ interrupt */
//#define MPR121_INT_ENABLED


/* Number of electrodes of MPR121 */
#define NUM_OF_ELECTRODES	13


/* MPR121 I2C bus address */
#define MPR121_ADDRESS_BYTE	0x5A
/*
 *
#ifdef MPR121_INT_ENABLED
#define MPR121_IRQ_RCC		RCC_GPIOA
#define MPR121_IRQ_PORT		GPIOA
#define MPR121_IRQ_PIN 		GPIO4
#define MPR121_IRQ_EXTI 	EXTI4
#define MPR121_IRQ_isr 		exti4_isr
#define MPR121_IRQ_NVIC 	NVIC_EXTI4_IRQ
#endif
 *
 */

static bool write_register(uint8_t , uint8_t );
static bool read_register(uint8_t, uint8_t *);


static bool write_register(uint8_t reg_addr, uint8_t value)
{
    bool success = true;

    while ((I2C1->ISR & I2C_ISR_BUSY) != 0);

    /* send START and wait for completion */
    I2C1->CR1 |= I2C_CR2_START;
    while ((I2C1->ISR & I2C_ISR_TXIS) == 0);

    /* send device address, r/w request and wait for completion */
    I2C1->TXDR = (MPR121_ADDRESS_BYTE << 1) | 0;  // Write address
    while ((I2C1->ISR & I2C_ISR_TXIS) == 0);

    /* check BUSY flag and go on if OK */
    if (I2C1->ISR & I2C_ISR_BUSY) {

        /* send register address */
        I2C1->TXDR = reg_addr;
        while ((I2C1->ISR & I2C_ISR_TXIS) == 0);

        /* send data byte */
        I2C1->TXDR = value;
        while ((I2C1->ISR & I2C_ISR_TXIS) == 0);

        /* send stop */
        I2C1->CR2 |= I2C_CR2_STOP;

        /* ATTENTION: consider to wait for a while */
    }
    else {
        /* error */
        success = false;
    }

    return success;
}

static bool read_register(uint8_t reg_addr, uint8_t *value_ptr)
{
	bool success = true;

	    // Wait until the I2C bus is not busy
	    while ((I2C1->ISR & I2C_ISR_BUSY) != 0);

	    // Send START and wait for completion
	    I2C1->CR1 |= I2C_CR2_START;
	    while ((I2C1->ISR & I2C_ISR_TC) == 0);

	    // Send device address, write request, and wait for completion
	    I2C1->TXDR = (MPR121_ADDRESS_BYTE << 1) | 0; // Write operation
	    while ((I2C1->ISR & I2C_ISR_TXE) == 0);
	    while ((I2C1->ISR & I2C_ISR_TC) == 0); // Transfer Complete

	    // Send register address
	    I2C1->TXDR = reg_addr;
	    while ((I2C1->ISR & I2C_ISR_TXE) == 0);
	    while ((I2C1->ISR & I2C_ISR_TC) == 0); // Transfer Complete

	    // Send repeated START and wait for completion
	    I2C1->CR1 |= I2C_CR2_START;
	    while ((I2C1->ISR & I2C_ISR_TC) == 0);

	    // Send device address, read request, and wait for completion
	    I2C1->TXDR = (MPR121_ADDRESS_BYTE << 1) | 1; // Read operation
	    while ((I2C1->ISR & I2C_ISR_TXE) == 0);
	    while ((I2C1->ISR & I2C_ISR_TC) == 0); // Transfer Complete

	    // If communication ongoing
	    if (I2C1->ISR & I2C_ISR_BUSY) {
	        // Read received byte
	        while ((I2C1->ISR & I2C_ISR_RXNE) == 0);
	        *value_ptr = I2C1->RXDR;

	        // Send stop
	        I2C1->CR1 |= I2C_CR2_STOP;
	    } else {
	        // Error
	        success = false;
	    }

	    return success;
}

uint16_t mpr121_get_touch( void )
{
	uint8_t reg_value = 0;
	uint16_t touch_flags = 0;

	/* read Touch 1 Status register */
	read_register(TS1, &reg_value);
	/* store lower 8 electrodes status flags */
	touch_flags = reg_value;
	/* read Touch 2 Status register */
	read_register(TS2, &reg_value);
	/* clear unused higher flags */
	reg_value &= 0x1F;
	/* store higher 5 electrodes status flags */
	touch_flags |= (reg_value << 8);

	return touch_flags;
}

bool mpr121_init( void )
{
	bool success;
	uint8_t electrodes_count;
  	uint8_t reg_value = 0;

	success = true;

	/* init port pins */
	MX_GPIO_Init();
		/* init I2C interface */
	MX_I2C1_Init();

	/* soft reset */
	write_register(SRST, 0x63);

	/* read AFE Configuration 2 */
	read_register(AFE2, &reg_value);
	/* check default value */
	if (reg_value != 0x24) {
		/* error */
		success = false;
	} else {
		/* OK */
	}

	/* read Touch Status register */
	read_register(TS2, &reg_value);
	/* check default value */
	if ((reg_value & 0x80) != 0) {
		/* error */
		success = false;
	} else {
		/* OK */
	}

	if (success == true)
		{
			/* turn off all electrodes to stop */
			write_register(ECR, 0x00);

			/* write register with initial values */
			write_register(MHDR, 0x01);
			write_register(NHDR, 0x01);
			write_register(NCLR, 0x10);
			write_register(FDLR, 0x20);
			write_register(MHDF, 0x01);
			write_register(NHDF, 0x01);
			write_register(NCLF, 0x10);
			write_register(FDLF, 0x20);
			write_register(NHDT, 0x01);
			write_register(NCLT, 0x10);
			write_register(FDLT, 0xFF);
			write_register(MHDPROXR, 0x0F);
			write_register(NHDPROXR, 0x0F);
			write_register(NCLPROXR, 0x00);
			write_register(FDLPROXR, 0x00);
			write_register(MHDPROXF, 0x01);
			write_register(NHDPROXF, 0x01);
			write_register(NCLPROXF, 0xFF);
			write_register(FDLPROXF, 0xFF);
			write_register(NHDPROXT, 0x00);
			write_register(NCLPROXT, 0x00);
			write_register(FDLPROXT, 0x00);
		  	write_register(DTR, 0x11);
			write_register(AFE1, 0xFF);
			write_register(AFE2, 0x30);
			write_register(ACCR0, 0x00);
			write_register(ACCR1, 0x00);
			write_register(USL, 0x00);
			write_register(LSL, 0x00);
			write_register(TL, 0x00);
			write_register(ECR, 0xCC); // default to fast baseline startup and 12 electrodes enabled, no prox

			/* apply next setting for all electrodes */
			for (electrodes_count = 0; electrodes_count < NUM_OF_ELECTRODES; electrodes_count++) {
				write_register((E0TTH + (electrodes_count<<1)), 40);
				write_register((E0RTH + (electrodes_count<<1)), 20);
			}

			/* enable electrodes and set the current to 16uA */
			write_register(ECR, 0x10);
		}
		else
		{
			/* init error */
		}

	return success;

}
