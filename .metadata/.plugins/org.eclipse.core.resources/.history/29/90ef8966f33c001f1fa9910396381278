#include "stm32c0xx_hal.h"
#include "string.h"
#include "stdio.h"
#include "FLASH_PAGE_C0.h"

/*
page  0 = 0x0800 0000 - 0x0800 07FF size 2Kbyte
page 1 = 0x0800 0800 - 0x0800 0FFF size 2Kbyte
page 2 = 0x0800 1000 - 0x0800 17FF size 2Kbyte
Page 3: 0x08001800 - 0x08001FFF (ขนาด 2Kbyte)
Page 4: 0x08002000 - 0x080027FF (ขนาด 2Kbyte)
Page 5: 0x08002800 - 0x08002FFF (ขนาด 2Kbyte)
Page 6: 0x08003000 - 0x080037FF (ขนาด 2Kbyte)
Page 7: 0x08003800 - 0x08003FFF (ขนาด 2Kbyte)
Page 8: 0x08004000 - 0x080047FF (ขนาด 2Kbyte)
Page 9: 0x08004800 - 0x08004FFF (ขนาด 2Kbyte)
Page 10: 0x08005000 - 0x080057FF (ขนาด 2Kbyte)
Page 11: 0x08005800 - 0x08005FFF (ขนาด 2Kbyte)
Page 12: 0x08006000 - 0x080067FF (ขนาด 2Kbyte)
Page 13: 0x08006800 - 0x08006FFF (ขนาด 2Kbyte)
Page 14: 0x08007000 - 0x080077FF (ขนาด 2Kbyte)
Page 15: 0x08007800 - 0x08007FFF (ขนาด 2Kbyte)
 */
#define FLASH_PAGE_SIZE 2048

static uint32_t GetPage(uint32_t Address)
{
  for (int indx = 0; indx < 32; indx++) // STM32C011F6 มี 32 หน้าของแฟลช
  {
    if ((Address < (0x08000000 + (FLASH_PAGE_SIZE * (indx + 1)))) && (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx)))
    {
      return (0x08000000 + FLASH_PAGE_SIZE * indx);
    }
  }

  return 0;
}

uint8_t bytes_temp[4];

void float2Bytes(uint8_t *ftoa_bytes_temp, float float_variable)
{
  union {
    float a;
    uint8_t bytes[4];
  } thing;

  thing.a = float_variable;

  for (uint8_t i = 0; i < 4; i++)
  {
    ftoa_bytes_temp[i] = thing.bytes[i];
  }
}

float Bytes2float(uint8_t *ftoa_bytes_temp)
{
  union {
    float a;
    uint8_t bytes[4];
  } thing;

  for (uint8_t i = 0; i < 4; i++)
  {
    thing.bytes[i] = ftoa_bytes_temp[i];
  }

  float float_variable = thing.a;
  return float_variable;
}

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
  static FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PAGEError;
  int sofar = 0;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();

  /* Erase the user Flash area*/

//  uint32_t StartPage = GetPage(StartPageAddress);
//  uint32_t EndPageAdress = StartPageAddress + numberofwords * 4;
//  uint32_t EndPage = GetPage(EndPageAdress);
  uint32_t StartPage = StartPageAddress & ~(FLASH_PAGE_SIZE - 1);
  uint32_t EndPageAdress = StartPageAddress + numberofwords * 4;
  uint32_t EndPage = EndPageAdress & ~(FLASH_PAGE_SIZE - 1);

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
  //EraseInitStruct.Banks = FLASH_BANK_1;
  EraseInitStruct.Page = StartPage / FLASH_PAGE_SIZE;
  EraseInitStruct.NbPages = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
  {
    /*Error occurred while page erase.*/
    return HAL_FLASH_GetError();
  }

  /* Program the user Flash area word by word*/

  while (sofar < numberofwords)
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, Data[sofar]) == HAL_OK) // เปลี่ยนเป็น FLASH_TYPEPROGRAM_QUADWORD
    {
      StartPageAddress += 4; // use StartPageAddress += 2 for half word and 8 for double word
      sofar++;
    }
    else
    {
      /* Error occurred while writing data in Flash memory*/
      return HAL_FLASH_GetError();
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
      to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();

  return 0;
}

void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
//  while (1)
//  {
//    *RxBuf = *(__IO uint32_t *)StartPageAddress;
//    StartPageAddress += 4;
//    RxBuf++;
//    if (!(numberofwords--))
//      break;
//  }
	  while (numberofwords--) {
	    *RxBuf = *(__IO uint32_t *)StartPageAddress;
	    StartPageAddress += 4;
	    RxBuf++;
	  }
}

void Convert_To_Str(uint32_t *Data, char *Buf)
{
  int numberofbytes = ((strlen((char *)Data) / 4) + ((strlen((char *)Data) % 4) != 0)) * 4;

  for (int i = 0; i < numberofbytes; i++)
  {
    Buf[i] = Data[i / 4] >> (8 * (i % 4));
  }
}

void Flash_Write_NUM(uint32_t StartSectorAddress, float Num)
{
  float2Bytes(bytes_temp, Num);
  Flash_Write_Data(StartSectorAddress, (uint32_t *)bytes_temp, 1);
}

float Flash_Read_NUM(uint32_t StartSectorAddress)
{
  uint8_t buffer[4];
  float value;

  Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
  value = Bytes2float(buffer);
  return value;
}
