/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32c0xx.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
void delay_ms(uint32_t ms);
void Flash_Unlock(void);
void Flash_Lock(void);
void Flash_Program(uint32_t Address, uint32_t Data);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//void delay_ms(uint32_t ms) {
//	SysTick->LOAD = 16000 - 1; // 1ms delay for 16MHz clock
//	SysTick->VAL = 0;          // Clear current value register
//	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk; // Enable SysTick
//
//	for (uint32_t i = 0; i < ms; i++) {
//		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // Wait until the COUNTFLAG is set
//	}
//
//	SysTick->CTRL = 0; // Disable SysTick
//}
void Flash_Unlock(void) {
    // Unlock the flash memory access
    if ((FLASH->CR & FLASH_CR_LOCK) != 0) {
        FLASH->KEYR = FLASH_KEY1;
        FLASH->KEYR = FLASH_KEY2;
    }
}

void Flash_Lock(void) {
    // Lock the flash memory access
    FLASH->CR |= FLASH_CR_LOCK;
}

void Flash_Program(uint32_t TypeProgram,uint32_t Address, uint32_t Data) {
    HAL_StatusTypeDef status = HAL_OK;

    // Check the parameters
    if (!IS_FLASH_TYPEPROGRAM(TypeProgram) || !IS_FLASH_PROGRAM_ADDRESS(Address))
    {
        return HAL_ERROR;
    }

    // Unlock the FLASH control register access
    FLASH->KEYR = FLASH_KEY1;
    FLASH->KEYR = FLASH_KEY2;

    // Reset error code
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    // Wait for last operation to be completed
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);

    if (status == HAL_OK)
    {
        // Set the programming bit
        if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
        {
            // Program double-word (64-bit) at a specified address
            FLASH->CR |= FLASH_CR_PG;
            *(__IO uint32_t*)Address = (uint32_t)Data;
            *(__IO uint32_t*)(Address + 4) = (uint32_t)(Data >> 32);
        }
        else
        {
            // Fast program a 32 row double-word (64-bit) at a specified address
            FLASH->CR |= FLASH_CR_FSTPG;
            *(__IO uint32_t*)Address = (uint32_t)Data;
            *(__IO uint32_t*)(Address + 4) = (uint32_t)(Data >> 32);
        }

        // Wait for last operation to be completed
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);

        // If the program operation is completed, disable the PG or FSTPG Bit
        FLASH->CR &= ~(TypeProgram);
    }

    // Lock the FLASH control register access
    FLASH->CR |= FLASH_CR_LOCK;

    // Return status
    return status;
}
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	/* USER CODE BEGIN 2 */
	//RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
	//Set PA4 as output
	//GPIOA->MODER &= ~(GPIO_MODER_MODE4); // Clear mode for PA4
	//GPIOA->MODER |= GPIO_MODER_MODE4_0;  // Set PA4 to output mode
	uint32_t address = 0x08007800; // Example flash address (make sure it's in a writable area)
	    uint32_t data = 0x12345678;    // Example data to program
	    Flash_Unlock();

	    // Program the flash memory
	    Flash_Program(address, data);
	    // Lock the flash memory
	    Flash_Lock();
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		//GPIOA->ODR ^= GPIO_ODR_OD4;
		//Delay 1 second
		//delay_ms(1000);
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
