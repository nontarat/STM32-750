#include <gui/screen2_screen/Screen2View.hpp>
#include "stm32h7xx_hal.h"

extern RTC_HandleTypeDef hrtc;
extern uint16_t ADC_Val;
extern volatile int count_ ;
Screen2View::Screen2View()
{

}

void Screen2View::setupScreen()
{
    Screen2ViewBase::setupScreen();
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}

void Screen2View::setADC (int val)
{
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d",val);
	textArea1.invalidate();
	gauge1.setValue(val);

}

void Screen2View::setLight(bool state)
{
	lightON.setVisible(state);
	lightON.invalidate();
	if (!(animatedImage1.isAnimatedImageRunning()))
	{
		if (state == true)
		{
			animatedImage1.startAnimation(false, false, true);  // rev, should reset, loop
		}
	}

	else if ((animatedImage1.isAnimatedImageRunning()))
	{
		if (state == false)
		{
			animatedImage1.pauseAnimation ();
		}
	}
}
/*
void Screen2View::updateTime(uint8_t hour,uint8_t minute, uint8_t second)
{
	analogClock1.setTime24Hour(hour, minute, second);
	digitalClock1.setTime24Hour(hour, minute, second);
}

void Screen2View::updateDate(uint8_t Date  , uint8_t month  , uint8_t year)
{
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%2d/" "%2d/" "%2d", Date,month,year);
	textArea1.invalidate();
}
*/
void Screen2View::timestamp()
{

	 HAL_PWR_EnableBkUpAccess();
	 HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, ADC_Val);	//Write new data in BKP_DR1
	 HAL_PWR_DisableBkUpAccess();
}

void Screen2View::timeshow()
{
	HAL_PWR_EnableBkUpAccess();
	//HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 10);	//Write new data in BKP_DR1
	count_ = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
	HAL_PWR_DisableBkUpAccess();
	Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%d",count_ );

	textArea2.invalidate();

}
