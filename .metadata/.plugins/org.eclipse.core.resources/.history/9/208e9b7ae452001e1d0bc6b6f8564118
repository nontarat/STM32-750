/*
 * mpr121.c
 *
 *  Created on: Sep 14, 2023
 *      Author: user
 */
#include "main.h"

#include "mpr121.h"



bool MPR121_Begin(uint8_t i2caddr, uint8_t touchThreshold, uint8_t releaseThreshold) {
	if (!MPR121_InitI2C(i2caddr)) {
	    return false;
	  }

  // Soft reset the MPR121
  MPR121_WriteRegister(MPR121_SOFTRESET, 0x63);
  HAL_Delay(1);

  // Check if MPR121 is responsive
  for (uint8_t i = 0; i < 0x7F; i++) {
    // Uncomment these lines for debugging:
    // uint8_t regValue = MPR121_ReadRegister(i);
    // printf("$%02X: 0x%02X\n", i, regValue);
  }

  // Initialize MPR121 configuration
  MPR121_WriteRegister(MPR121_ECR, 0x00);

  uint8_t config2 = MPR121_ReadRegister(MPR121_CONFIG2);

  if (config2 != 0x24) {
    return false;
  }

  MPR121_SetThresholds(touchThreshold, releaseThreshold);
  MPR121_WriteRegister(MPR121_MHDR, 0x01);
  MPR121_WriteRegister(MPR121_NHDR, 0x01);
  MPR121_WriteRegister(MPR121_NCLR, 0x0E);
  MPR121_WriteRegister(MPR121_FDLR, 0x00);

  MPR121_WriteRegister(MPR121_MHDF, 0x01);
  MPR121_WriteRegister(MPR121_NHDF, 0x05);
  MPR121_WriteRegister(MPR121_NCLF, 0x01);
  MPR121_WriteRegister(MPR121_FDLF, 0x00);

  MPR121_WriteRegister(MPR121_NHDT, 0x00);
  MPR121_WriteRegister(MPR121_NCLT, 0x00);
  MPR121_WriteRegister(MPR121_FDLT, 0x00);

  MPR121_WriteRegister(MPR121_DEBOUNCE, 0x00);
  MPR121_WriteRegister(MPR121_CONFIG1, 0x10); // Default, 16uA charge current
  MPR121_WriteRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
#ifdef AUTOCONFIG
  MPR121_WriteRegister(MPR121_AUTOCONFIG0, 0x0B);
  MPR121_WriteRegister(MPR121_UPLIMIT, 200);     // ((Vdd - 0.7)/Vdd) * 256
  MPR121_WriteRegister(MPR121_TARGETLIMIT, 180); // UPLIMIT * 0.9
  MPR121_WriteRegister(MPR121_LOWLIMIT, 130);    // UPLIMIT * 0.65
#endif
  uint8_t ECR_SETTING = 0x80 + 12; // 5 bits for baseline tracking & proximity disabled + X amount of electrodes running (12)
  MPR121_WriteRegister(MPR121_ECR, ECR_SETTING); // Start with the above ECR setting

  return true;
}

bool MPR121_InitI2C(uint8_t i2caddr) {
  // Initialize the I2C device
  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i2caddr << 1), 1, HAL_MAX_DELAY) != HAL_OK) {
    return false;
  }

  return true;
}


uint8_t MPR121_ReadRegister8(uint8_t reg) {
  uint8_t data = 0;

  // Read the 8-bit register value from the MPR121 device
  HAL_I2C_Mem_Read(&hi2c1, MPR121_I2C_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);

  return data;
}


uint16_t MPR121_ReadRegister16(uint8_t reg)
{
  uint16_t data = 0;

  // Read the 16-bit register value from the MPR121 device
  HAL_I2C_Mem_Read(&hi2c1, MPR121_I2C_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 2, HAL_MAX_DELAY);

  // If your STM32 MCU is little-endian (most common), you don't need to swap bytes.
  // If it's big-endian, you may need to swap the bytes here.

  return data;
}


uint16_t MPR121_Touched(void) {
  // Read the 16-bit TOUCHSTATUS_L register value from the MPR121 device
  uint16_t t;
  t = MPR121_ReadRegister16(MPR121_TOUCHSTATUS_L);

  // Extract the lower 12 bits that represent touch status
  return t & 0x0FFF;
}
uint16_t MPR121_BaselineData(uint8_t t) {
  if (t > 12)
    return 0;

  // Read the 8-bit baseline data for the specified electrode (t) from the MPR121 device
  uint16_t bl;
  bl = MPR121_ReadRegister8(MPR121_BASELINE_0 + t);

  // Left shift the 8-bit value by 2 to convert it to a 10-bit value
  return (bl << 2);
}

uint16_t MPR121_FilteredData(uint8_t t) {
  if (t > 12)
    return 0;

  // Read the 16-bit filtered data for the specified electrode (t) from the MPR121 device
  return MPR121_ReadRegister16(MPR121_FILTDATA_0L + t * 2);
}

void MPR121_SetThresholds(uint8_t touch, uint8_t release) {
  // Set touch and release thresholds for all electrodes (0-11)
  for (uint8_t i = 0; i < 12; i++) {
    MPR121_WriteRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
    MPR121_WriteRegister(MPR121_RELEASETH_0 + 2 * i, release);
  }
}

void MPR121_setThreshholds(uint8_t touch, uint8_t release) {
	MPR121_SetThresholds(touch, release);
}

void MPR121_WriteRegister(uint8_t reg, uint8_t value) {
  // MPR121 must be put in Stop Mode to write to most registers
  bool stop_required = true;
  uint8_t ecr_backup;
  // first get the current set value of the MPR121_ECR register
  HAL_I2C_Mem_Read(&hi2c1, MPR121_I2C_ADDRESS << 1, MPR121_ECR, I2C_MEMADD_SIZE_8BIT, &ecr_backup, 1, HAL_MAX_DELAY);
  if ((reg == MPR121_ECR) || ((0x73 <= reg) && (reg <= 0x7A))) {
      stop_required = 0; // false
    }
  if (stop_required) {
    // Clear the register to set stop mode
    uint8_t stop_mode = 0x00;
    HAL_I2C_Mem_Write(&hi2c1, MPR121_I2C_ADDRESS << 1, MPR121_ECR, I2C_MEMADD_SIZE_8BIT, &stop_mode, 1, HAL_MAX_DELAY);
  }
  HAL_I2C_Mem_Write(&hi2c1, MPR121_I2C_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);

   if (stop_required) {
     // Write back the previous set ECR settings
     HAL_I2C_Mem_Write(&hi2c1, MPR121_I2C_ADDRESS << 1, MPR121_ECR, I2C_MEMADD_SIZE_8BIT, &ecr_backup, 1, HAL_MAX_DELAY);
   }
}
