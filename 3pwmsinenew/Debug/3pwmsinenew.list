
3pwmsinenew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000330  24000000  08006190  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000026c  24000330  080064c0  00020330  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400059c  080064c0  0002059c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002035e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000df7d  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d1e  00000000  00000000  0002e31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c60  00000000  00000000  00030040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000996  00000000  00000000  00030ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036018  00000000  00000000  00031636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fdc0  00000000  00000000  0006764e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c236  00000000  00000000  0007740e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000033c0  00000000  00000000  001d3644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000043  00000000  00000000  001d6a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000330 	.word	0x24000330
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006158 	.word	0x08006158

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000334 	.word	0x24000334
 80002d4:	08006158 	.word	0x08006158

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80002de:	4b59      	ldr	r3, [pc, #356]	; (8000444 <main+0x16c>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d11b      	bne.n	8000322 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ea:	f3bf 8f4f 	dsb	sy
}
 80002ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002f0:	f3bf 8f6f 	isb	sy
}
 80002f4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80002f6:	4b53      	ldr	r3, [pc, #332]	; (8000444 <main+0x16c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80002fe:	f3bf 8f4f 	dsb	sy
}
 8000302:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000304:	f3bf 8f6f 	isb	sy
}
 8000308:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800030a:	4b4e      	ldr	r3, [pc, #312]	; (8000444 <main+0x16c>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a4d      	ldr	r2, [pc, #308]	; (8000444 <main+0x16c>)
 8000310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000314:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000316:	f3bf 8f4f 	dsb	sy
}
 800031a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800031c:	f3bf 8f6f 	isb	sy
}
 8000320:	e000      	b.n	8000324 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000322:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000324:	4b47      	ldr	r3, [pc, #284]	; (8000444 <main+0x16c>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800032c:	2b00      	cmp	r3, #0
 800032e:	d138      	bne.n	80003a2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000330:	4b44      	ldr	r3, [pc, #272]	; (8000444 <main+0x16c>)
 8000332:	2200      	movs	r2, #0
 8000334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000338:	f3bf 8f4f 	dsb	sy
}
 800033c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800033e:	4b41      	ldr	r3, [pc, #260]	; (8000444 <main+0x16c>)
 8000340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000344:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	0b5b      	lsrs	r3, r3, #13
 800034a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800034e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	08db      	lsrs	r3, r3, #3
 8000354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000358:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	015a      	lsls	r2, r3, #5
 800035e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000362:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000368:	4936      	ldr	r1, [pc, #216]	; (8000444 <main+0x16c>)
 800036a:	4313      	orrs	r3, r2
 800036c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1ef      	bne.n	800035a <main+0x82>
    } while(sets-- != 0U);
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	1e5a      	subs	r2, r3, #1
 800037e:	60ba      	str	r2, [r7, #8]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d1e5      	bne.n	8000350 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000384:	f3bf 8f4f 	dsb	sy
}
 8000388:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800038a:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <main+0x16c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a2d      	ldr	r2, [pc, #180]	; (8000444 <main+0x16c>)
 8000390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000394:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	e000      	b.n	80003a4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003a2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 fda4 	bl	8000ef0 <HAL_Init>
 80003a8:	4b27      	ldr	r3, [pc, #156]	; (8000448 <main+0x170>)
 80003aa:	61fb      	str	r3, [r7, #28]
 80003ac:	23c8      	movs	r3, #200	; 0xc8
 80003ae:	61bb      	str	r3, [r7, #24]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80003b0:	69bb      	ldr	r3, [r7, #24]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	dd1d      	ble.n	80003f2 <main+0x11a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	f003 021f 	and.w	r2, r3, #31
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	4413      	add	r3, r2
 80003c0:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003cc:	4a1d      	ldr	r2, [pc, #116]	; (8000444 <main+0x16c>)
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	3320      	adds	r3, #32
 80003d8:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	3b20      	subs	r3, #32
 80003de:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	dcf2      	bgt.n	80003cc <main+0xf4>
  __ASM volatile ("dsb 0xF":::"memory");
 80003e6:	f3bf 8f4f 	dsb	sy
}
 80003ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ec:	f3bf 8f6f 	isb	sy
}
 80003f0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80003f2:	bf00      	nop
  /* USER CODE BEGIN Init */
  SCB_CleanDCache_by_Addr((uint32_t *) DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize );
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f830 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 fa90 	bl	800091c <MX_GPIO_Init>
  MX_DMA_Init();
 80003fc:	f000 fa5e 	bl	80008bc <MX_DMA_Init>
  MX_TIM1_Init();
 8000400:	f000 f8a6 	bl	8000550 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000404:	f000 f94e 	bl	80006a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000408:	f000 f9de 	bl	80007c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,(uint32_t *) DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize);
 800040c:	23c8      	movs	r3, #200	; 0xc8
 800040e:	4a0e      	ldr	r2, [pc, #56]	; (8000448 <main+0x170>)
 8000410:	2100      	movs	r1, #0
 8000412:	480e      	ldr	r0, [pc, #56]	; (800044c <main+0x174>)
 8000414:	f004 fb84 	bl	8004b20 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000418:	2104      	movs	r1, #4
 800041a:	480c      	ldr	r0, [pc, #48]	; (800044c <main+0x174>)
 800041c:	f004 fa1a 	bl	8004854 <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1,(uint32_t *) DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize);
 8000420:	23c8      	movs	r3, #200	; 0xc8
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <main+0x170>)
 8000424:	2100      	movs	r1, #0
 8000426:	480a      	ldr	r0, [pc, #40]	; (8000450 <main+0x178>)
 8000428:	f004 fb7a 	bl	8004b20 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 800042c:	2104      	movs	r1, #4
 800042e:	4808      	ldr	r0, [pc, #32]	; (8000450 <main+0x178>)
 8000430:	f004 fa10 	bl	8004854 <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize);
 8000434:	23c8      	movs	r3, #200	; 0xc8
 8000436:	4a04      	ldr	r2, [pc, #16]	; (8000448 <main+0x170>)
 8000438:	2100      	movs	r1, #0
 800043a:	4806      	ldr	r0, [pc, #24]	; (8000454 <main+0x17c>)
 800043c:	f004 fb70 	bl	8004b20 <HAL_TIM_PWM_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000440:	e7fe      	b.n	8000440 <main+0x168>
 8000442:	bf00      	nop
 8000444:	e000ed00 	.word	0xe000ed00
 8000448:	24000000 	.word	0x24000000
 800044c:	2400034c 	.word	0x2400034c
 8000450:	24000398 	.word	0x24000398
 8000454:	240003e4 	.word	0x240003e4

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b09c      	sub	sp, #112	; 0x70
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000462:	224c      	movs	r2, #76	; 0x4c
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f005 fe4a 	bl	8006100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2220      	movs	r2, #32
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f005 fe44 	bl	8006100 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000478:	2002      	movs	r0, #2
 800047a:	f003 f96f 	bl	800375c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800047e:	2300      	movs	r3, #0
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	4b31      	ldr	r3, [pc, #196]	; (8000548 <SystemClock_Config+0xf0>)
 8000484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000486:	4a30      	ldr	r2, [pc, #192]	; (8000548 <SystemClock_Config+0xf0>)
 8000488:	f023 0301 	bic.w	r3, r3, #1
 800048c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800048e:	4b2e      	ldr	r3, [pc, #184]	; (8000548 <SystemClock_Config+0xf0>)
 8000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	4b2c      	ldr	r3, [pc, #176]	; (800054c <SystemClock_Config+0xf4>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004a0:	4a2a      	ldr	r2, [pc, #168]	; (800054c <SystemClock_Config+0xf4>)
 80004a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b28      	ldr	r3, [pc, #160]	; (800054c <SystemClock_Config+0xf4>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004b4:	bf00      	nop
 80004b6:	4b25      	ldr	r3, [pc, #148]	; (800054c <SystemClock_Config+0xf4>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004c2:	d1f8      	bne.n	80004b6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c4:	2301      	movs	r3, #1
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ce:	2302      	movs	r3, #2
 80004d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d2:	2302      	movs	r3, #2
 80004d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80004d6:	2305      	movs	r3, #5
 80004d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80004da:	2360      	movs	r3, #96	; 0x60
 80004dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004de:	2302      	movs	r3, #2
 80004e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004e2:	2302      	movs	r3, #2
 80004e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004ea:	2308      	movs	r3, #8
 80004ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 f968 	bl	80037d0 <HAL_RCC_OscConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000506:	f000 fa41 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	233f      	movs	r3, #63	; 0x3f
 800050c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050e:	2303      	movs	r3, #3
 8000510:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000516:	2308      	movs	r3, #8
 8000518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2102      	movs	r1, #2
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fda8 	bl	8004084 <HAL_RCC_ClockConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800053a:	f000 fa27 	bl	800098c <Error_Handler>
  }
}
 800053e:	bf00      	nop
 8000540:	3770      	adds	r7, #112	; 0x70
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	58000400 	.word	0x58000400
 800054c:	58024800 	.word	0x58024800

08000550 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	; 0x58
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000556:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	222c      	movs	r2, #44	; 0x2c
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f005 fdbf 	bl	8006100 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <MX_TIM1_Init+0x14c>)
 8000584:	4a46      	ldr	r2, [pc, #280]	; (80006a0 <MX_TIM1_Init+0x150>)
 8000586:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000588:	4b44      	ldr	r3, [pc, #272]	; (800069c <MX_TIM1_Init+0x14c>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800058e:	4b43      	ldr	r3, [pc, #268]	; (800069c <MX_TIM1_Init+0x14c>)
 8000590:	2240      	movs	r2, #64	; 0x40
 8000592:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000-1;
 8000594:	4b41      	ldr	r3, [pc, #260]	; (800069c <MX_TIM1_Init+0x14c>)
 8000596:	f247 522f 	movw	r2, #29999	; 0x752f
 800059a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059c:	4b3f      	ldr	r3, [pc, #252]	; (800069c <MX_TIM1_Init+0x14c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005a2:	4b3e      	ldr	r3, [pc, #248]	; (800069c <MX_TIM1_Init+0x14c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005a8:	4b3c      	ldr	r3, [pc, #240]	; (800069c <MX_TIM1_Init+0x14c>)
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005ae:	483b      	ldr	r0, [pc, #236]	; (800069c <MX_TIM1_Init+0x14c>)
 80005b0:	f004 fa5e 	bl	8004a70 <HAL_TIM_PWM_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80005ba:	f000 f9e7 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80005be:	4837      	ldr	r0, [pc, #220]	; (800069c <MX_TIM1_Init+0x14c>)
 80005c0:	f004 f8e7 	bl	8004792 <HAL_TIM_OC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80005ca:	f000 f9df 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80005ce:	2350      	movs	r3, #80	; 0x50
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005d2:	2300      	movs	r3, #0
 80005d4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005de:	4619      	mov	r1, r3
 80005e0:	482e      	ldr	r0, [pc, #184]	; (800069c <MX_TIM1_Init+0x14c>)
 80005e2:	f005 fc81 	bl	8005ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80005ec:	f000 f9ce 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005f0:	2360      	movs	r3, #96	; 0x60
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 24000;
 80005f4:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005fa:	2300      	movs	r3, #0
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005fe:	2300      	movs	r3, #0
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000606:	2300      	movs	r3, #0
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800060a:	2300      	movs	r3, #0
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800060e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	4821      	ldr	r0, [pc, #132]	; (800069c <MX_TIM1_Init+0x14c>)
 8000618:	f004 fd22 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000622:	f000 f9b3 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000626:	2310      	movs	r3, #16
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000;
 800062a:	f241 3388 	movw	r3, #5000	; 0x1388
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000630:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000634:	2204      	movs	r2, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4818      	ldr	r0, [pc, #96]	; (800069c <MX_TIM1_Init+0x14c>)
 800063a:	f004 fc97 	bl	8004f6c <HAL_TIM_OC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000644:	f000 f9a2 	bl	800098c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800065c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000660:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800066a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4619      	mov	r1, r3
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <MX_TIM1_Init+0x14c>)
 800067e:	f005 fcc1 	bl	8006004 <HAL_TIMEx_ConfigBreakDeadTime>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000688:	f000 f980 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <MX_TIM1_Init+0x14c>)
 800068e:	f000 faab 	bl	8000be8 <HAL_TIM_MspPostInit>

}
 8000692:	bf00      	nop
 8000694:	3758      	adds	r7, #88	; 0x58
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2400034c 	.word	0x2400034c
 80006a0:	40010000 	.word	0x40010000

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b090      	sub	sp, #64	; 0x40
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
 80006d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d8:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <MX_TIM2_Init+0x120>)
 80006da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006e0:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <MX_TIM2_Init+0x120>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <MX_TIM2_Init+0x120>)
 80006e8:	2240      	movs	r2, #64	; 0x40
 80006ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000-1;
 80006ec:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <MX_TIM2_Init+0x120>)
 80006ee:	f247 522f 	movw	r2, #29999	; 0x752f
 80006f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <MX_TIM2_Init+0x120>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <MX_TIM2_Init+0x120>)
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000700:	4830      	ldr	r0, [pc, #192]	; (80007c4 <MX_TIM2_Init+0x120>)
 8000702:	f003 ffef 	bl	80046e4 <HAL_TIM_Base_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800070c:	f000 f93e 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000710:	482c      	ldr	r0, [pc, #176]	; (80007c4 <MX_TIM2_Init+0x120>)
 8000712:	f004 f9ad 	bl	8004a70 <HAL_TIM_PWM_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800071c:	f000 f936 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000720:	4828      	ldr	r0, [pc, #160]	; (80007c4 <MX_TIM2_Init+0x120>)
 8000722:	f004 f836 	bl	8004792 <HAL_TIM_OC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800072c:	f000 f92e 	bl	800098c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000730:	2306      	movs	r3, #6
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000734:	2300      	movs	r3, #0
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800073c:	4619      	mov	r1, r3
 800073e:	4821      	ldr	r0, [pc, #132]	; (80007c4 <MX_TIM2_Init+0x120>)
 8000740:	f004 fda2 	bl	8005288 <HAL_TIM_SlaveConfigSynchro>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800074a:	f000 f91f 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800074e:	2350      	movs	r3, #80	; 0x50
 8000750:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4619      	mov	r1, r3
 800075c:	4819      	ldr	r0, [pc, #100]	; (80007c4 <MX_TIM2_Init+0x120>)
 800075e:	f005 fbc3 	bl	8005ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000768:	f000 f910 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076c:	2360      	movs	r3, #96	; 0x60
 800076e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 24000;
 8000770:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	480f      	ldr	r0, [pc, #60]	; (80007c4 <MX_TIM2_Init+0x120>)
 8000786:	f004 fc6b 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000790:	f000 f8fc 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000794:	2310      	movs	r3, #16
 8000796:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6000;
 8000798:	f241 7370 	movw	r3, #6000	; 0x1770
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2204      	movs	r2, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MX_TIM2_Init+0x120>)
 80007a6:	f004 fbe1 	bl	8004f6c <HAL_TIM_OC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80007b0:	f000 f8ec 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <MX_TIM2_Init+0x120>)
 80007b6:	f000 fa17 	bl	8000be8 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3740      	adds	r7, #64	; 0x40
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000398 	.word	0x24000398

080007c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b090      	sub	sp, #64	; 0x40
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
 80007f8:	615a      	str	r2, [r3, #20]
 80007fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fc:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <MX_TIM3_Init+0xec>)
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <MX_TIM3_Init+0xf0>)
 8000800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000802:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <MX_TIM3_Init+0xec>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <MX_TIM3_Init+0xec>)
 800080a:	2240      	movs	r2, #64	; 0x40
 800080c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000-1;
 800080e:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_TIM3_Init+0xec>)
 8000810:	f247 522f 	movw	r2, #29999	; 0x752f
 8000814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <MX_TIM3_Init+0xec>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_TIM3_Init+0xec>)
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000822:	4824      	ldr	r0, [pc, #144]	; (80008b4 <MX_TIM3_Init+0xec>)
 8000824:	f003 ff5e 	bl	80046e4 <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800082e:	f000 f8ad 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000832:	4820      	ldr	r0, [pc, #128]	; (80008b4 <MX_TIM3_Init+0xec>)
 8000834:	f004 f91c 	bl	8004a70 <HAL_TIM_PWM_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800083e:	f000 f8a5 	bl	800098c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000842:	2306      	movs	r3, #6
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000846:	2310      	movs	r3, #16
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800084a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084e:	4619      	mov	r1, r3
 8000850:	4818      	ldr	r0, [pc, #96]	; (80008b4 <MX_TIM3_Init+0xec>)
 8000852:	f004 fd19 	bl	8005288 <HAL_TIM_SlaveConfigSynchro>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800085c:	f000 f896 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4619      	mov	r1, r3
 800086e:	4811      	ldr	r0, [pc, #68]	; (80008b4 <MX_TIM3_Init+0xec>)
 8000870:	f005 fb3a 	bl	8005ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800087a:	f000 f887 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	2360      	movs	r3, #96	; 0x60
 8000880:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 24000;
 8000882:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8000886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <MX_TIM3_Init+0xec>)
 8000898:	f004 fbe2 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80008a2:	f000 f873 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <MX_TIM3_Init+0xec>)
 80008a8:	f000 f99e 	bl	8000be8 <HAL_TIM_MspPostInit>

}
 80008ac:	bf00      	nop
 80008ae:	3740      	adds	r7, #64	; 0x40
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	240003e4 	.word	0x240003e4
 80008b8:	40000400 	.word	0x40000400

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_DMA_Init+0x5c>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_DMA_Init+0x5c>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_DMA_Init+0x5c>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	200b      	movs	r0, #11
 80008e6:	f000 fc7c 	bl	80011e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008ea:	200b      	movs	r0, #11
 80008ec:	f000 fc93 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	200c      	movs	r0, #12
 80008f6:	f000 fc74 	bl	80011e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008fa:	200c      	movs	r0, #12
 80008fc:	f000 fc8b 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	200d      	movs	r0, #13
 8000906:	f000 fc6c 	bl	80011e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800090a:	200d      	movs	r0, #13
 800090c:	f000 fc83 	bl	8001216 <HAL_NVIC_EnableIRQ>

}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	58024400 	.word	0x58024400

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_GPIO_Init+0x6c>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a17      	ldr	r2, [pc, #92]	; (8000988 <MX_GPIO_Init+0x6c>)
 800092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_GPIO_Init+0x6c>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_GPIO_Init+0x6c>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <MX_GPIO_Init+0x6c>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_GPIO_Init+0x6c>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_GPIO_Init+0x6c>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <MX_GPIO_Init+0x6c>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_GPIO_Init+0x6c>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	58024400 	.word	0x58024400

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_MspInit+0x30>)
 80009a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009a4:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x30>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x30>)
 80009b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	58024400 	.word	0x58024400

080009cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a27      	ldr	r2, [pc, #156]	; (8000a78 <HAL_TIM_PWM_MspInit+0xac>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d147      	bne.n	8000a6e <HAL_TIM_PWM_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <HAL_TIM_PWM_MspInit+0xb0>)
 80009e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009e4:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <HAL_TIM_PWM_MspInit+0xb0>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <HAL_TIM_PWM_MspInit+0xb0>)
 80009f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 80009fe:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <HAL_TIM_PWM_MspInit+0xb8>)
 8000a00:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a04:	220b      	movs	r2, #11
 8000a06:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a0a:	2240      	movs	r2, #64	; 0x40
 8000a0c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a1a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a22:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a32:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a42:	2203      	movs	r2, #3
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a54:	f000 fbfa 	bl	800124c <HAL_DMA_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_TIM_PWM_MspInit+0x96>
    {
      Error_Handler();
 8000a5e:	f7ff ff95 	bl	800098c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
 8000a68:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	58024400 	.word	0x58024400
 8000a80:	24000430 	.word	0x24000430
 8000a84:	40020010 	.word	0x40020010

08000a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a98:	d148      	bne.n	8000b2c <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9a:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <HAL_TIM_Base_MspInit+0x148>)
 8000a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aa0:	4a4b      	ldr	r2, [pc, #300]	; (8000bd0 <HAL_TIM_Base_MspInit+0x148>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000aaa:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <HAL_TIM_Base_MspInit+0x148>)
 8000aac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream1;
 8000ab8:	4b46      	ldr	r3, [pc, #280]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000aba:	4a47      	ldr	r2, [pc, #284]	; (8000bd8 <HAL_TIM_Base_MspInit+0x150>)
 8000abc:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000abe:	4b45      	ldr	r3, [pc, #276]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000ac0:	2212      	movs	r2, #18
 8000ac2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000ac6:	2240      	movs	r2, #64	; 0x40
 8000ac8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ad0:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000ada:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ade:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ae0:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000ae8:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aee:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000af0:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000af6:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000af8:	2204      	movs	r2, #4
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000afc:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b02:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000b0e:	4831      	ldr	r0, [pc, #196]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000b10:	f000 fb9c 	bl	800124c <HAL_DMA_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 8000b1a:	f7ff ff37 	bl	800098c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a2c      	ldr	r2, [pc, #176]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24
 8000b24:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b2a:	e04c      	b.n	8000bc6 <HAL_TIM_Base_MspInit+0x13e>
  else if(htim_base->Instance==TIM3)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a2a      	ldr	r2, [pc, #168]	; (8000bdc <HAL_TIM_Base_MspInit+0x154>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d147      	bne.n	8000bc6 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <HAL_TIM_Base_MspInit+0x148>)
 8000b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b3c:	4a24      	ldr	r2, [pc, #144]	; (8000bd0 <HAL_TIM_Base_MspInit+0x148>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_TIM_Base_MspInit+0x148>)
 8000b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Stream2;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <HAL_TIM_Base_MspInit+0x15c>)
 8000b58:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b5c:	2217      	movs	r2, #23
 8000b5e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b62:	2240      	movs	r2, #64	; 0x40
 8000b64:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b72:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b7a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b82:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b8a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b94:	2204      	movs	r2, #4
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim3_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim3_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim3_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000bac:	f000 fb4e 	bl	800124c <HAL_DMA_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_TIM_Base_MspInit+0x132>
      Error_Handler();
 8000bb6:	f7ff fee9 	bl	800098c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_TIM_Base_MspInit+0x158>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	240004a8 	.word	0x240004a8
 8000bd8:	40020028 	.word	0x40020028
 8000bdc:	40000400 	.word	0x40000400
 8000be0:	24000520 	.word	0x24000520
 8000be4:	40020040 	.word	0x40020040

08000be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a38      	ldr	r2, [pc, #224]	; (8000ce8 <HAL_TIM_MspPostInit+0x100>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d120      	bne.n	8000c4c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	4b38      	ldr	r3, [pc, #224]	; (8000cec <HAL_TIM_MspPostInit+0x104>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a36      	ldr	r2, [pc, #216]	; (8000cec <HAL_TIM_MspPostInit+0x104>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b34      	ldr	r3, [pc, #208]	; (8000cec <HAL_TIM_MspPostInit+0x104>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0310 	and.w	r3, r3, #16
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	482a      	ldr	r0, [pc, #168]	; (8000cf0 <HAL_TIM_MspPostInit+0x108>)
 8000c46:	f002 fbd9 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c4a:	e048      	b.n	8000cde <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c54:	d11f      	bne.n	8000c96 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <HAL_TIM_MspPostInit+0x104>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a23      	ldr	r2, [pc, #140]	; (8000cec <HAL_TIM_MspPostInit+0x104>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <HAL_TIM_MspPostInit+0x104>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c74:	2320      	movs	r3, #32
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c84:	2301      	movs	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <HAL_TIM_MspPostInit+0x10c>)
 8000c90:	f002 fbb4 	bl	80033fc <HAL_GPIO_Init>
}
 8000c94:	e023      	b.n	8000cde <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_TIM_MspPostInit+0x110>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d11e      	bne.n	8000cde <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_TIM_MspPostInit+0x104>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <HAL_TIM_MspPostInit+0x104>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_TIM_MspPostInit+0x104>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cbe:	2340      	movs	r3, #64	; 0x40
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_TIM_MspPostInit+0x10c>)
 8000cda:	f002 fb8f 	bl	80033fc <HAL_GPIO_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021000 	.word	0x58021000
 8000cf4:	58020000 	.word	0x58020000
 8000cf8:	40000400 	.word	0x40000400

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 f944 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <DMA1_Stream0_IRQHandler+0x10>)
 8000d56:	f001 f83f 	bl	8001dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	24000430 	.word	0x24000430

08000d64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <DMA1_Stream1_IRQHandler+0x10>)
 8000d6a:	f001 f835 	bl	8001dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	240004a8 	.word	0x240004a8

08000d78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <DMA1_Stream2_IRQHandler+0x10>)
 8000d7e:	f001 f82b 	bl	8001dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	24000520 	.word	0x24000520

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d90:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <SystemInit+0xe4>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a36      	ldr	r2, [pc, #216]	; (8000e70 <SystemInit+0xe4>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da0:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <SystemInit+0xe8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 030f 	and.w	r3, r3, #15
 8000da8:	2b06      	cmp	r3, #6
 8000daa:	d807      	bhi.n	8000dbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <SystemInit+0xe8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f023 030f 	bic.w	r3, r3, #15
 8000db4:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <SystemInit+0xe8>)
 8000db6:	f043 0307 	orr.w	r3, r3, #7
 8000dba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <SystemInit+0xec>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a2d      	ldr	r2, [pc, #180]	; (8000e78 <SystemInit+0xec>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <SystemInit+0xec>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <SystemInit+0xec>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4929      	ldr	r1, [pc, #164]	; (8000e78 <SystemInit+0xec>)
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <SystemInit+0xf0>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <SystemInit+0xe8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d007      	beq.n	8000df6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <SystemInit+0xe8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 030f 	bic.w	r3, r3, #15
 8000dee:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <SystemInit+0xe8>)
 8000df0:	f043 0307 	orr.w	r3, r3, #7
 8000df4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <SystemInit+0xec>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <SystemInit+0xec>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <SystemInit+0xec>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <SystemInit+0xec>)
 8000e0a:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <SystemInit+0xf4>)
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <SystemInit+0xec>)
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <SystemInit+0xf8>)
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <SystemInit+0xec>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <SystemInit+0xfc>)
 8000e18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <SystemInit+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <SystemInit+0xec>)
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <SystemInit+0xfc>)
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <SystemInit+0xec>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <SystemInit+0xec>)
 8000e2e:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <SystemInit+0xfc>)
 8000e30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <SystemInit+0xec>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <SystemInit+0xec>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <SystemInit+0xec>)
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <SystemInit+0xec>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <SystemInit+0x100>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <SystemInit+0x104>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e56:	d202      	bcs.n	8000e5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <SystemInit+0x108>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <SystemInit+0x10c>)
 8000e60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00
 8000e74:	52002000 	.word	0x52002000
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e80:	02020200 	.word	0x02020200
 8000e84:	01ff0000 	.word	0x01ff0000
 8000e88:	01010280 	.word	0x01010280
 8000e8c:	5c001000 	.word	0x5c001000
 8000e90:	ffff0000 	.word	0xffff0000
 8000e94:	51008108 	.word	0x51008108
 8000e98:	52004000 	.word	0x52004000

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea0:	f7ff ff74 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	; (8000ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f005 f921 	bl	8006110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fa03 	bl	80002d8 <main>
  bx  lr
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ed8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000edc:	24000330 	.word	0x24000330
  ldr r2, =_sidata
 8000ee0:	08006190 	.word	0x08006190
  ldr r2, =_sbss
 8000ee4:	24000330 	.word	0x24000330
  ldr r4, =_ebss
 8000ee8:	2400059c 	.word	0x2400059c

08000eec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC3_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f000 f968 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000efc:	f003 fa78 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_Init+0x68>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	4913      	ldr	r1, [pc, #76]	; (8000f5c <HAL_Init+0x6c>)
 8000f0e:	5ccb      	ldrb	r3, [r1, r3]
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_Init+0x68>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_Init+0x6c>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_Init+0x70>)
 8000f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f34:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_Init+0x74>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 f814 	bl	8000f68 <HAL_InitTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e002      	b.n	8000f50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff fd25 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	08006170 	.word	0x08006170
 8000f60:	24000324 	.word	0x24000324
 8000f64:	24000320 	.word	0x24000320

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_InitTick+0x60>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e021      	b.n	8000fc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <HAL_InitTick+0x64>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_InitTick+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f94d 	bl	8001232 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f917 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x68>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2400032c 	.word	0x2400032c
 8000fcc:	24000320 	.word	0x24000320
 8000fd0:	24000328 	.word	0x24000328

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2400032c 	.word	0x2400032c
 8000ff8:	24000598 	.word	0x24000598

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	24000598 	.word	0x24000598

08001014 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetREVID+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0c1b      	lsrs	r3, r3, #16
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	5c001000 	.word	0x5c001000

0800102c <__NVIC_SetPriorityGrouping>:
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	4313      	orrs	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	05fa0000 	.word	0x05fa0000

08001074 <__NVIC_GetPriorityGrouping>:
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff29 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff40 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff90 	bl	8001120 <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5f 	bl	80010cc <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff33 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa4 	bl	8001188 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff fed2 	bl	8000ffc <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e316      	b.n	8001892 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a66      	ldr	r2, [pc, #408]	; (8001404 <HAL_DMA_Init+0x1b8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d04a      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a65      	ldr	r2, [pc, #404]	; (8001408 <HAL_DMA_Init+0x1bc>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d045      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a63      	ldr	r2, [pc, #396]	; (800140c <HAL_DMA_Init+0x1c0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d040      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a62      	ldr	r2, [pc, #392]	; (8001410 <HAL_DMA_Init+0x1c4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d03b      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a60      	ldr	r2, [pc, #384]	; (8001414 <HAL_DMA_Init+0x1c8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d036      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a5f      	ldr	r2, [pc, #380]	; (8001418 <HAL_DMA_Init+0x1cc>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d031      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a5d      	ldr	r2, [pc, #372]	; (800141c <HAL_DMA_Init+0x1d0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d02c      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a5c      	ldr	r2, [pc, #368]	; (8001420 <HAL_DMA_Init+0x1d4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d027      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a5a      	ldr	r2, [pc, #360]	; (8001424 <HAL_DMA_Init+0x1d8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d022      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a59      	ldr	r2, [pc, #356]	; (8001428 <HAL_DMA_Init+0x1dc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d01d      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a57      	ldr	r2, [pc, #348]	; (800142c <HAL_DMA_Init+0x1e0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d018      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a56      	ldr	r2, [pc, #344]	; (8001430 <HAL_DMA_Init+0x1e4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d013      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a54      	ldr	r2, [pc, #336]	; (8001434 <HAL_DMA_Init+0x1e8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00e      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a53      	ldr	r2, [pc, #332]	; (8001438 <HAL_DMA_Init+0x1ec>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d009      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a51      	ldr	r2, [pc, #324]	; (800143c <HAL_DMA_Init+0x1f0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d004      	beq.n	8001304 <HAL_DMA_Init+0xb8>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a50      	ldr	r2, [pc, #320]	; (8001440 <HAL_DMA_Init+0x1f4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d101      	bne.n	8001308 <HAL_DMA_Init+0xbc>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_DMA_Init+0xbe>
 8001308:	2300      	movs	r3, #0
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 813b 	beq.w	8001586 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a37      	ldr	r2, [pc, #220]	; (8001404 <HAL_DMA_Init+0x1b8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d04a      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a36      	ldr	r2, [pc, #216]	; (8001408 <HAL_DMA_Init+0x1bc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d045      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a34      	ldr	r2, [pc, #208]	; (800140c <HAL_DMA_Init+0x1c0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d040      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a33      	ldr	r2, [pc, #204]	; (8001410 <HAL_DMA_Init+0x1c4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d03b      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a31      	ldr	r2, [pc, #196]	; (8001414 <HAL_DMA_Init+0x1c8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d036      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a30      	ldr	r2, [pc, #192]	; (8001418 <HAL_DMA_Init+0x1cc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d031      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2e      	ldr	r2, [pc, #184]	; (800141c <HAL_DMA_Init+0x1d0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d02c      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <HAL_DMA_Init+0x1d4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d027      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2b      	ldr	r2, [pc, #172]	; (8001424 <HAL_DMA_Init+0x1d8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d022      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <HAL_DMA_Init+0x1dc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d01d      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a28      	ldr	r2, [pc, #160]	; (800142c <HAL_DMA_Init+0x1e0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d018      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_DMA_Init+0x1e4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d013      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a25      	ldr	r2, [pc, #148]	; (8001434 <HAL_DMA_Init+0x1e8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00e      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a24      	ldr	r2, [pc, #144]	; (8001438 <HAL_DMA_Init+0x1ec>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d009      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a22      	ldr	r2, [pc, #136]	; (800143c <HAL_DMA_Init+0x1f0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d004      	beq.n	80013c0 <HAL_DMA_Init+0x174>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a21      	ldr	r2, [pc, #132]	; (8001440 <HAL_DMA_Init+0x1f4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d108      	bne.n	80013d2 <HAL_DMA_Init+0x186>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_DMA_Init+0x196>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013e2:	e02f      	b.n	8001444 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e4:	f7ff fe0a 	bl	8000ffc <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d928      	bls.n	8001444 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2203      	movs	r2, #3
 80013fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e246      	b.n	8001892 <HAL_DMA_Init+0x646>
 8001404:	40020010 	.word	0x40020010
 8001408:	40020028 	.word	0x40020028
 800140c:	40020040 	.word	0x40020040
 8001410:	40020058 	.word	0x40020058
 8001414:	40020070 	.word	0x40020070
 8001418:	40020088 	.word	0x40020088
 800141c:	400200a0 	.word	0x400200a0
 8001420:	400200b8 	.word	0x400200b8
 8001424:	40020410 	.word	0x40020410
 8001428:	40020428 	.word	0x40020428
 800142c:	40020440 	.word	0x40020440
 8001430:	40020458 	.word	0x40020458
 8001434:	40020470 	.word	0x40020470
 8001438:	40020488 	.word	0x40020488
 800143c:	400204a0 	.word	0x400204a0
 8001440:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1c8      	bne.n	80013e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4b83      	ldr	r3, [pc, #524]	; (800166c <HAL_DMA_Init+0x420>)
 800145e:	4013      	ands	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800146a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001476:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001482:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4313      	orrs	r3, r2
 800148e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	2b04      	cmp	r3, #4
 8001496:	d107      	bne.n	80014a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4313      	orrs	r3, r2
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80014a8:	4b71      	ldr	r3, [pc, #452]	; (8001670 <HAL_DMA_Init+0x424>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b71      	ldr	r3, [pc, #452]	; (8001674 <HAL_DMA_Init+0x428>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014b4:	d328      	bcc.n	8001508 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b28      	cmp	r3, #40	; 0x28
 80014bc:	d903      	bls.n	80014c6 <HAL_DMA_Init+0x27a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b2e      	cmp	r3, #46	; 0x2e
 80014c4:	d917      	bls.n	80014f6 <HAL_DMA_Init+0x2aa>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b3e      	cmp	r3, #62	; 0x3e
 80014cc:	d903      	bls.n	80014d6 <HAL_DMA_Init+0x28a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b42      	cmp	r3, #66	; 0x42
 80014d4:	d90f      	bls.n	80014f6 <HAL_DMA_Init+0x2aa>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b46      	cmp	r3, #70	; 0x46
 80014dc:	d903      	bls.n	80014e6 <HAL_DMA_Init+0x29a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b48      	cmp	r3, #72	; 0x48
 80014e4:	d907      	bls.n	80014f6 <HAL_DMA_Init+0x2aa>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b4e      	cmp	r3, #78	; 0x4e
 80014ec:	d905      	bls.n	80014fa <HAL_DMA_Init+0x2ae>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b52      	cmp	r3, #82	; 0x52
 80014f4:	d801      	bhi.n	80014fa <HAL_DMA_Init+0x2ae>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_DMA_Init+0x2b0>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001506:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f023 0307 	bic.w	r3, r3, #7
 800151e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	4313      	orrs	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	2b04      	cmp	r3, #4
 8001530:	d117      	bne.n	8001562 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00e      	beq.n	8001562 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f001 fdcf 	bl	80030e8 <DMA_CheckFifoParam>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e197      	b.n	8001892 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f001 fd0a 	bl	8002f84 <DMA_CalcBaseAndBitshift>
 8001570:	4603      	mov	r3, r0
 8001572:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	223f      	movs	r2, #63	; 0x3f
 800157e:	409a      	lsls	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e0cd      	b.n	8001722 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a3b      	ldr	r2, [pc, #236]	; (8001678 <HAL_DMA_Init+0x42c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d022      	beq.n	80015d6 <HAL_DMA_Init+0x38a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a39      	ldr	r2, [pc, #228]	; (800167c <HAL_DMA_Init+0x430>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d01d      	beq.n	80015d6 <HAL_DMA_Init+0x38a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a38      	ldr	r2, [pc, #224]	; (8001680 <HAL_DMA_Init+0x434>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d018      	beq.n	80015d6 <HAL_DMA_Init+0x38a>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a36      	ldr	r2, [pc, #216]	; (8001684 <HAL_DMA_Init+0x438>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_DMA_Init+0x38a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a35      	ldr	r2, [pc, #212]	; (8001688 <HAL_DMA_Init+0x43c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d00e      	beq.n	80015d6 <HAL_DMA_Init+0x38a>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a33      	ldr	r2, [pc, #204]	; (800168c <HAL_DMA_Init+0x440>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d009      	beq.n	80015d6 <HAL_DMA_Init+0x38a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a32      	ldr	r2, [pc, #200]	; (8001690 <HAL_DMA_Init+0x444>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d004      	beq.n	80015d6 <HAL_DMA_Init+0x38a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a30      	ldr	r2, [pc, #192]	; (8001694 <HAL_DMA_Init+0x448>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_DMA_Init+0x38e>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_DMA_Init+0x390>
 80015da:	2300      	movs	r3, #0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8097 	beq.w	8001710 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <HAL_DMA_Init+0x42c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d021      	beq.n	8001630 <HAL_DMA_Init+0x3e4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <HAL_DMA_Init+0x430>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01c      	beq.n	8001630 <HAL_DMA_Init+0x3e4>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a21      	ldr	r2, [pc, #132]	; (8001680 <HAL_DMA_Init+0x434>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d017      	beq.n	8001630 <HAL_DMA_Init+0x3e4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_DMA_Init+0x438>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d012      	beq.n	8001630 <HAL_DMA_Init+0x3e4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_DMA_Init+0x43c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00d      	beq.n	8001630 <HAL_DMA_Init+0x3e4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1c      	ldr	r2, [pc, #112]	; (800168c <HAL_DMA_Init+0x440>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d008      	beq.n	8001630 <HAL_DMA_Init+0x3e4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_DMA_Init+0x444>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d003      	beq.n	8001630 <HAL_DMA_Init+0x3e4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a19      	ldr	r2, [pc, #100]	; (8001694 <HAL_DMA_Init+0x448>)
 800162e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_DMA_Init+0x44c>)
 800164c:	4013      	ands	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b40      	cmp	r3, #64	; 0x40
 8001656:	d021      	beq.n	800169c <HAL_DMA_Init+0x450>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b80      	cmp	r3, #128	; 0x80
 800165e:	d102      	bne.n	8001666 <HAL_DMA_Init+0x41a>
 8001660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001664:	e01b      	b.n	800169e <HAL_DMA_Init+0x452>
 8001666:	2300      	movs	r3, #0
 8001668:	e019      	b.n	800169e <HAL_DMA_Init+0x452>
 800166a:	bf00      	nop
 800166c:	fe10803f 	.word	0xfe10803f
 8001670:	5c001000 	.word	0x5c001000
 8001674:	ffff0000 	.word	0xffff0000
 8001678:	58025408 	.word	0x58025408
 800167c:	5802541c 	.word	0x5802541c
 8001680:	58025430 	.word	0x58025430
 8001684:	58025444 	.word	0x58025444
 8001688:	58025458 	.word	0x58025458
 800168c:	5802546c 	.word	0x5802546c
 8001690:	58025480 	.word	0x58025480
 8001694:	58025494 	.word	0x58025494
 8001698:	fffe000f 	.word	0xfffe000f
 800169c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68d2      	ldr	r2, [r2, #12]
 80016a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b6e      	ldr	r3, [pc, #440]	; (800189c <HAL_DMA_Init+0x650>)
 80016e4:	4413      	add	r3, r2
 80016e6:	4a6e      	ldr	r2, [pc, #440]	; (80018a0 <HAL_DMA_Init+0x654>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	009a      	lsls	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f001 fc45 	bl	8002f84 <DMA_CalcBaseAndBitshift>
 80016fa:	4603      	mov	r3, r0
 80016fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	2201      	movs	r2, #1
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e008      	b.n	8001722 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2203      	movs	r2, #3
 800171a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0b7      	b.n	8001892 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a5f      	ldr	r2, [pc, #380]	; (80018a4 <HAL_DMA_Init+0x658>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d072      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a5d      	ldr	r2, [pc, #372]	; (80018a8 <HAL_DMA_Init+0x65c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d06d      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5c      	ldr	r2, [pc, #368]	; (80018ac <HAL_DMA_Init+0x660>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d068      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a5a      	ldr	r2, [pc, #360]	; (80018b0 <HAL_DMA_Init+0x664>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d063      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a59      	ldr	r2, [pc, #356]	; (80018b4 <HAL_DMA_Init+0x668>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d05e      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a57      	ldr	r2, [pc, #348]	; (80018b8 <HAL_DMA_Init+0x66c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d059      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_DMA_Init+0x670>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d054      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a54      	ldr	r2, [pc, #336]	; (80018c0 <HAL_DMA_Init+0x674>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d04f      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a53      	ldr	r2, [pc, #332]	; (80018c4 <HAL_DMA_Init+0x678>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d04a      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_DMA_Init+0x67c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d045      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_DMA_Init+0x680>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d040      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <HAL_DMA_Init+0x684>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d03b      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a4d      	ldr	r2, [pc, #308]	; (80018d4 <HAL_DMA_Init+0x688>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d036      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_DMA_Init+0x68c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d031      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a4a      	ldr	r2, [pc, #296]	; (80018dc <HAL_DMA_Init+0x690>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d02c      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <HAL_DMA_Init+0x694>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d027      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_DMA_Init+0x698>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d022      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <HAL_DMA_Init+0x69c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d01d      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a44      	ldr	r2, [pc, #272]	; (80018ec <HAL_DMA_Init+0x6a0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d018      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a42      	ldr	r2, [pc, #264]	; (80018f0 <HAL_DMA_Init+0x6a4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a41      	ldr	r2, [pc, #260]	; (80018f4 <HAL_DMA_Init+0x6a8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d00e      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a3f      	ldr	r2, [pc, #252]	; (80018f8 <HAL_DMA_Init+0x6ac>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d009      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <HAL_DMA_Init+0x6b0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d004      	beq.n	8001812 <HAL_DMA_Init+0x5c6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <HAL_DMA_Init+0x6b4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_DMA_Init+0x5ca>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_DMA_Init+0x5cc>
 8001816:	2300      	movs	r3, #0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d032      	beq.n	8001882 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f001 fcdf 	bl	80031e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b80      	cmp	r3, #128	; 0x80
 8001828:	d102      	bne.n	8001830 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001844:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <HAL_DMA_Init+0x624>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b08      	cmp	r3, #8
 8001854:	d80c      	bhi.n	8001870 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f001 fd5c 	bl	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	e008      	b.n	8001882 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	a7fdabf8 	.word	0xa7fdabf8
 80018a0:	cccccccd 	.word	0xcccccccd
 80018a4:	40020010 	.word	0x40020010
 80018a8:	40020028 	.word	0x40020028
 80018ac:	40020040 	.word	0x40020040
 80018b0:	40020058 	.word	0x40020058
 80018b4:	40020070 	.word	0x40020070
 80018b8:	40020088 	.word	0x40020088
 80018bc:	400200a0 	.word	0x400200a0
 80018c0:	400200b8 	.word	0x400200b8
 80018c4:	40020410 	.word	0x40020410
 80018c8:	40020428 	.word	0x40020428
 80018cc:	40020440 	.word	0x40020440
 80018d0:	40020458 	.word	0x40020458
 80018d4:	40020470 	.word	0x40020470
 80018d8:	40020488 	.word	0x40020488
 80018dc:	400204a0 	.word	0x400204a0
 80018e0:	400204b8 	.word	0x400204b8
 80018e4:	58025408 	.word	0x58025408
 80018e8:	5802541c 	.word	0x5802541c
 80018ec:	58025430 	.word	0x58025430
 80018f0:	58025444 	.word	0x58025444
 80018f4:	58025458 	.word	0x58025458
 80018f8:	5802546c 	.word	0x5802546c
 80018fc:	58025480 	.word	0x58025480
 8001900:	58025494 	.word	0x58025494

08001904 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e226      	b.n	8001d6e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_DMA_Start_IT+0x2a>
 800192a:	2302      	movs	r3, #2
 800192c:	e21f      	b.n	8001d6e <HAL_DMA_Start_IT+0x46a>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	f040 820a 	bne.w	8001d58 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a68      	ldr	r2, [pc, #416]	; (8001af8 <HAL_DMA_Start_IT+0x1f4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d04a      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a66      	ldr	r2, [pc, #408]	; (8001afc <HAL_DMA_Start_IT+0x1f8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d045      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a65      	ldr	r2, [pc, #404]	; (8001b00 <HAL_DMA_Start_IT+0x1fc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d040      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a63      	ldr	r2, [pc, #396]	; (8001b04 <HAL_DMA_Start_IT+0x200>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d03b      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a62      	ldr	r2, [pc, #392]	; (8001b08 <HAL_DMA_Start_IT+0x204>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d036      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <HAL_DMA_Start_IT+0x208>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d031      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a5f      	ldr	r2, [pc, #380]	; (8001b10 <HAL_DMA_Start_IT+0x20c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d02c      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a5d      	ldr	r2, [pc, #372]	; (8001b14 <HAL_DMA_Start_IT+0x210>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d027      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a5c      	ldr	r2, [pc, #368]	; (8001b18 <HAL_DMA_Start_IT+0x214>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d022      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5a      	ldr	r2, [pc, #360]	; (8001b1c <HAL_DMA_Start_IT+0x218>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01d      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a59      	ldr	r2, [pc, #356]	; (8001b20 <HAL_DMA_Start_IT+0x21c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d018      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a57      	ldr	r2, [pc, #348]	; (8001b24 <HAL_DMA_Start_IT+0x220>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a56      	ldr	r2, [pc, #344]	; (8001b28 <HAL_DMA_Start_IT+0x224>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00e      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a54      	ldr	r2, [pc, #336]	; (8001b2c <HAL_DMA_Start_IT+0x228>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d009      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a53      	ldr	r2, [pc, #332]	; (8001b30 <HAL_DMA_Start_IT+0x22c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d004      	beq.n	80019f2 <HAL_DMA_Start_IT+0xee>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <HAL_DMA_Start_IT+0x230>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d108      	bne.n	8001a04 <HAL_DMA_Start_IT+0x100>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e007      	b.n	8001a14 <HAL_DMA_Start_IT+0x110>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f001 f906 	bl	8002c2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a34      	ldr	r2, [pc, #208]	; (8001af8 <HAL_DMA_Start_IT+0x1f4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d04a      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a33      	ldr	r2, [pc, #204]	; (8001afc <HAL_DMA_Start_IT+0x1f8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d045      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <HAL_DMA_Start_IT+0x1fc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d040      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a30      	ldr	r2, [pc, #192]	; (8001b04 <HAL_DMA_Start_IT+0x200>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d03b      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2e      	ldr	r2, [pc, #184]	; (8001b08 <HAL_DMA_Start_IT+0x204>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d036      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2d      	ldr	r2, [pc, #180]	; (8001b0c <HAL_DMA_Start_IT+0x208>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d031      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <HAL_DMA_Start_IT+0x20c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d02c      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <HAL_DMA_Start_IT+0x210>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d027      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a28      	ldr	r2, [pc, #160]	; (8001b18 <HAL_DMA_Start_IT+0x214>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d022      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_DMA_Start_IT+0x218>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d01d      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <HAL_DMA_Start_IT+0x21c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d018      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <HAL_DMA_Start_IT+0x220>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d013      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_DMA_Start_IT+0x224>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00e      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <HAL_DMA_Start_IT+0x228>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d009      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_DMA_Start_IT+0x22c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d004      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x1bc>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_DMA_Start_IT+0x230>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_DMA_Start_IT+0x1c0>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_DMA_Start_IT+0x1c2>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d036      	beq.n	8001b38 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 021e 	bic.w	r2, r3, #30
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0216 	orr.w	r2, r2, #22
 8001adc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d03e      	beq.n	8001b64 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0208 	orr.w	r2, r2, #8
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e035      	b.n	8001b64 <HAL_DMA_Start_IT+0x260>
 8001af8:	40020010 	.word	0x40020010
 8001afc:	40020028 	.word	0x40020028
 8001b00:	40020040 	.word	0x40020040
 8001b04:	40020058 	.word	0x40020058
 8001b08:	40020070 	.word	0x40020070
 8001b0c:	40020088 	.word	0x40020088
 8001b10:	400200a0 	.word	0x400200a0
 8001b14:	400200b8 	.word	0x400200b8
 8001b18:	40020410 	.word	0x40020410
 8001b1c:	40020428 	.word	0x40020428
 8001b20:	40020440 	.word	0x40020440
 8001b24:	40020458 	.word	0x40020458
 8001b28:	40020470 	.word	0x40020470
 8001b2c:	40020488 	.word	0x40020488
 8001b30:	400204a0 	.word	0x400204a0
 8001b34:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 020e 	bic.w	r2, r3, #14
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 020a 	orr.w	r2, r2, #10
 8001b4a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0204 	orr.w	r2, r2, #4
 8001b62:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a83      	ldr	r2, [pc, #524]	; (8001d78 <HAL_DMA_Start_IT+0x474>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d072      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a82      	ldr	r2, [pc, #520]	; (8001d7c <HAL_DMA_Start_IT+0x478>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d06d      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a80      	ldr	r2, [pc, #512]	; (8001d80 <HAL_DMA_Start_IT+0x47c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d068      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7f      	ldr	r2, [pc, #508]	; (8001d84 <HAL_DMA_Start_IT+0x480>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d063      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a7d      	ldr	r2, [pc, #500]	; (8001d88 <HAL_DMA_Start_IT+0x484>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d05e      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7c      	ldr	r2, [pc, #496]	; (8001d8c <HAL_DMA_Start_IT+0x488>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d059      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a7a      	ldr	r2, [pc, #488]	; (8001d90 <HAL_DMA_Start_IT+0x48c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d054      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a79      	ldr	r2, [pc, #484]	; (8001d94 <HAL_DMA_Start_IT+0x490>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d04f      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a77      	ldr	r2, [pc, #476]	; (8001d98 <HAL_DMA_Start_IT+0x494>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d04a      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a76      	ldr	r2, [pc, #472]	; (8001d9c <HAL_DMA_Start_IT+0x498>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d045      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a74      	ldr	r2, [pc, #464]	; (8001da0 <HAL_DMA_Start_IT+0x49c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d040      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a73      	ldr	r2, [pc, #460]	; (8001da4 <HAL_DMA_Start_IT+0x4a0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d03b      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <HAL_DMA_Start_IT+0x4a4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d036      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a70      	ldr	r2, [pc, #448]	; (8001dac <HAL_DMA_Start_IT+0x4a8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d031      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a6e      	ldr	r2, [pc, #440]	; (8001db0 <HAL_DMA_Start_IT+0x4ac>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02c      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6d      	ldr	r2, [pc, #436]	; (8001db4 <HAL_DMA_Start_IT+0x4b0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d027      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a6b      	ldr	r2, [pc, #428]	; (8001db8 <HAL_DMA_Start_IT+0x4b4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d022      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6a      	ldr	r2, [pc, #424]	; (8001dbc <HAL_DMA_Start_IT+0x4b8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d01d      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a68      	ldr	r2, [pc, #416]	; (8001dc0 <HAL_DMA_Start_IT+0x4bc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d018      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a67      	ldr	r2, [pc, #412]	; (8001dc4 <HAL_DMA_Start_IT+0x4c0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d013      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a65      	ldr	r2, [pc, #404]	; (8001dc8 <HAL_DMA_Start_IT+0x4c4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00e      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a64      	ldr	r2, [pc, #400]	; (8001dcc <HAL_DMA_Start_IT+0x4c8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a62      	ldr	r2, [pc, #392]	; (8001dd0 <HAL_DMA_Start_IT+0x4cc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <HAL_DMA_Start_IT+0x350>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a61      	ldr	r2, [pc, #388]	; (8001dd4 <HAL_DMA_Start_IT+0x4d0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_DMA_Start_IT+0x354>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_DMA_Start_IT+0x356>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01a      	beq.n	8001c94 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c92:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a37      	ldr	r2, [pc, #220]	; (8001d78 <HAL_DMA_Start_IT+0x474>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d04a      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <HAL_DMA_Start_IT+0x478>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d045      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a34      	ldr	r2, [pc, #208]	; (8001d80 <HAL_DMA_Start_IT+0x47c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d040      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <HAL_DMA_Start_IT+0x480>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d03b      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a31      	ldr	r2, [pc, #196]	; (8001d88 <HAL_DMA_Start_IT+0x484>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d036      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <HAL_DMA_Start_IT+0x488>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d031      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <HAL_DMA_Start_IT+0x48c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d02c      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2d      	ldr	r2, [pc, #180]	; (8001d94 <HAL_DMA_Start_IT+0x490>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d027      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	; (8001d98 <HAL_DMA_Start_IT+0x494>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d022      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <HAL_DMA_Start_IT+0x498>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d01d      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <HAL_DMA_Start_IT+0x49c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d018      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_DMA_Start_IT+0x4a0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d013      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_DMA_Start_IT+0x4a4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00e      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_DMA_Start_IT+0x4a8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d009      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <HAL_DMA_Start_IT+0x4ac>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d004      	beq.n	8001d34 <HAL_DMA_Start_IT+0x430>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_DMA_Start_IT+0x4b0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d108      	bne.n	8001d46 <HAL_DMA_Start_IT+0x442>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e012      	b.n	8001d6c <HAL_DMA_Start_IT+0x468>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e009      	b.n	8001d6c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020010 	.word	0x40020010
 8001d7c:	40020028 	.word	0x40020028
 8001d80:	40020040 	.word	0x40020040
 8001d84:	40020058 	.word	0x40020058
 8001d88:	40020070 	.word	0x40020070
 8001d8c:	40020088 	.word	0x40020088
 8001d90:	400200a0 	.word	0x400200a0
 8001d94:	400200b8 	.word	0x400200b8
 8001d98:	40020410 	.word	0x40020410
 8001d9c:	40020428 	.word	0x40020428
 8001da0:	40020440 	.word	0x40020440
 8001da4:	40020458 	.word	0x40020458
 8001da8:	40020470 	.word	0x40020470
 8001dac:	40020488 	.word	0x40020488
 8001db0:	400204a0 	.word	0x400204a0
 8001db4:	400204b8 	.word	0x400204b8
 8001db8:	58025408 	.word	0x58025408
 8001dbc:	5802541c 	.word	0x5802541c
 8001dc0:	58025430 	.word	0x58025430
 8001dc4:	58025444 	.word	0x58025444
 8001dc8:	58025458 	.word	0x58025458
 8001dcc:	5802546c 	.word	0x5802546c
 8001dd0:	58025480 	.word	0x58025480
 8001dd4:	58025494 	.word	0x58025494

08001dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001de4:	4b67      	ldr	r3, [pc, #412]	; (8001f84 <HAL_DMA_IRQHandler+0x1ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a67      	ldr	r2, [pc, #412]	; (8001f88 <HAL_DMA_IRQHandler+0x1b0>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0a9b      	lsrs	r3, r3, #10
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a5f      	ldr	r2, [pc, #380]	; (8001f8c <HAL_DMA_IRQHandler+0x1b4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d04a      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5d      	ldr	r2, [pc, #372]	; (8001f90 <HAL_DMA_IRQHandler+0x1b8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d045      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <HAL_DMA_IRQHandler+0x1bc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d040      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a5a      	ldr	r2, [pc, #360]	; (8001f98 <HAL_DMA_IRQHandler+0x1c0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d03b      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a59      	ldr	r2, [pc, #356]	; (8001f9c <HAL_DMA_IRQHandler+0x1c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d036      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a57      	ldr	r2, [pc, #348]	; (8001fa0 <HAL_DMA_IRQHandler+0x1c8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d031      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a56      	ldr	r2, [pc, #344]	; (8001fa4 <HAL_DMA_IRQHandler+0x1cc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d02c      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_DMA_IRQHandler+0x1d0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d027      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a53      	ldr	r2, [pc, #332]	; (8001fac <HAL_DMA_IRQHandler+0x1d4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d022      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a51      	ldr	r2, [pc, #324]	; (8001fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01d      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a50      	ldr	r2, [pc, #320]	; (8001fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d018      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a4e      	ldr	r2, [pc, #312]	; (8001fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a4d      	ldr	r2, [pc, #308]	; (8001fbc <HAL_DMA_IRQHandler+0x1e4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00e      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a4b      	ldr	r2, [pc, #300]	; (8001fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a4a      	ldr	r2, [pc, #296]	; (8001fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d004      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xd2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a48      	ldr	r2, [pc, #288]	; (8001fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_DMA_IRQHandler+0xd6>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_DMA_IRQHandler+0xd8>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 842b 	beq.w	800270c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80a2 	beq.w	8002010 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a2e      	ldr	r2, [pc, #184]	; (8001f8c <HAL_DMA_IRQHandler+0x1b4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d04a      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a2d      	ldr	r2, [pc, #180]	; (8001f90 <HAL_DMA_IRQHandler+0x1b8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d045      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <HAL_DMA_IRQHandler+0x1bc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d040      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <HAL_DMA_IRQHandler+0x1c0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d03b      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <HAL_DMA_IRQHandler+0x1c4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d036      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <HAL_DMA_IRQHandler+0x1c8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d031      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <HAL_DMA_IRQHandler+0x1cc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d02c      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <HAL_DMA_IRQHandler+0x1d0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d027      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a22      	ldr	r2, [pc, #136]	; (8001fac <HAL_DMA_IRQHandler+0x1d4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d022      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01d      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d018      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_DMA_IRQHandler+0x1e4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00e      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x194>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d12f      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x1f4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	e02e      	b.n	8001fe0 <HAL_DMA_IRQHandler+0x208>
 8001f82:	bf00      	nop
 8001f84:	24000320 	.word	0x24000320
 8001f88:	1b4e81b5 	.word	0x1b4e81b5
 8001f8c:	40020010 	.word	0x40020010
 8001f90:	40020028 	.word	0x40020028
 8001f94:	40020040 	.word	0x40020040
 8001f98:	40020058 	.word	0x40020058
 8001f9c:	40020070 	.word	0x40020070
 8001fa0:	40020088 	.word	0x40020088
 8001fa4:	400200a0 	.word	0x400200a0
 8001fa8:	400200b8 	.word	0x400200b8
 8001fac:	40020410 	.word	0x40020410
 8001fb0:	40020428 	.word	0x40020428
 8001fb4:	40020440 	.word	0x40020440
 8001fb8:	40020458 	.word	0x40020458
 8001fbc:	40020470 	.word	0x40020470
 8001fc0:	40020488 	.word	0x40020488
 8001fc4:	400204a0 	.word	0x400204a0
 8001fc8:	400204b8 	.word	0x400204b8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d015      	beq.n	8002010 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0204 	bic.w	r2, r2, #4
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	409a      	lsls	r2, r3
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d06e      	beq.n	8002104 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a69      	ldr	r2, [pc, #420]	; (80021d0 <HAL_DMA_IRQHandler+0x3f8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d04a      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a67      	ldr	r2, [pc, #412]	; (80021d4 <HAL_DMA_IRQHandler+0x3fc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d045      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a66      	ldr	r2, [pc, #408]	; (80021d8 <HAL_DMA_IRQHandler+0x400>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d040      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a64      	ldr	r2, [pc, #400]	; (80021dc <HAL_DMA_IRQHandler+0x404>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d03b      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a63      	ldr	r2, [pc, #396]	; (80021e0 <HAL_DMA_IRQHandler+0x408>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d036      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_DMA_IRQHandler+0x40c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d031      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a60      	ldr	r2, [pc, #384]	; (80021e8 <HAL_DMA_IRQHandler+0x410>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d02c      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a5e      	ldr	r2, [pc, #376]	; (80021ec <HAL_DMA_IRQHandler+0x414>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d027      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5d      	ldr	r2, [pc, #372]	; (80021f0 <HAL_DMA_IRQHandler+0x418>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5b      	ldr	r2, [pc, #364]	; (80021f4 <HAL_DMA_IRQHandler+0x41c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5a      	ldr	r2, [pc, #360]	; (80021f8 <HAL_DMA_IRQHandler+0x420>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d018      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_DMA_IRQHandler+0x424>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a57      	ldr	r2, [pc, #348]	; (8002200 <HAL_DMA_IRQHandler+0x428>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a55      	ldr	r2, [pc, #340]	; (8002204 <HAL_DMA_IRQHandler+0x42c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a54      	ldr	r2, [pc, #336]	; (8002208 <HAL_DMA_IRQHandler+0x430>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2ee>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a52      	ldr	r2, [pc, #328]	; (800220c <HAL_DMA_IRQHandler+0x434>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10a      	bne.n	80020dc <HAL_DMA_IRQHandler+0x304>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e003      	b.n	80020e4 <HAL_DMA_IRQHandler+0x30c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00d      	beq.n	8002104 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2201      	movs	r2, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	f043 0202 	orr.w	r2, r3, #2
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2204      	movs	r2, #4
 800210e:	409a      	lsls	r2, r3
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 808f 	beq.w	8002238 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <HAL_DMA_IRQHandler+0x3f8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d04a      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <HAL_DMA_IRQHandler+0x3fc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d045      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <HAL_DMA_IRQHandler+0x400>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d040      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_DMA_IRQHandler+0x404>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d03b      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <HAL_DMA_IRQHandler+0x408>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d036      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_DMA_IRQHandler+0x40c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d031      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a23      	ldr	r2, [pc, #140]	; (80021e8 <HAL_DMA_IRQHandler+0x410>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d02c      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_DMA_IRQHandler+0x414>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d027      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a20      	ldr	r2, [pc, #128]	; (80021f0 <HAL_DMA_IRQHandler+0x418>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d022      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_DMA_IRQHandler+0x41c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_DMA_IRQHandler+0x420>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d018      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_DMA_IRQHandler+0x424>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1a      	ldr	r2, [pc, #104]	; (8002200 <HAL_DMA_IRQHandler+0x428>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00e      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_DMA_IRQHandler+0x42c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_DMA_IRQHandler+0x430>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d004      	beq.n	80021ba <HAL_DMA_IRQHandler+0x3e2>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_DMA_IRQHandler+0x434>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12a      	bne.n	8002210 <HAL_DMA_IRQHandler+0x438>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e023      	b.n	8002218 <HAL_DMA_IRQHandler+0x440>
 80021d0:	40020010 	.word	0x40020010
 80021d4:	40020028 	.word	0x40020028
 80021d8:	40020040 	.word	0x40020040
 80021dc:	40020058 	.word	0x40020058
 80021e0:	40020070 	.word	0x40020070
 80021e4:	40020088 	.word	0x40020088
 80021e8:	400200a0 	.word	0x400200a0
 80021ec:	400200b8 	.word	0x400200b8
 80021f0:	40020410 	.word	0x40020410
 80021f4:	40020428 	.word	0x40020428
 80021f8:	40020440 	.word	0x40020440
 80021fc:	40020458 	.word	0x40020458
 8002200:	40020470 	.word	0x40020470
 8002204:	40020488 	.word	0x40020488
 8002208:	400204a0 	.word	0x400204a0
 800220c:	400204b8 	.word	0x400204b8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	2204      	movs	r2, #4
 8002226:	409a      	lsls	r2, r3
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	f043 0204 	orr.w	r2, r3, #4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	2210      	movs	r2, #16
 8002242:	409a      	lsls	r2, r3
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80a6 	beq.w	800239a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a85      	ldr	r2, [pc, #532]	; (8002468 <HAL_DMA_IRQHandler+0x690>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d04a      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a83      	ldr	r2, [pc, #524]	; (800246c <HAL_DMA_IRQHandler+0x694>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d045      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a82      	ldr	r2, [pc, #520]	; (8002470 <HAL_DMA_IRQHandler+0x698>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d040      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a80      	ldr	r2, [pc, #512]	; (8002474 <HAL_DMA_IRQHandler+0x69c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d03b      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7f      	ldr	r2, [pc, #508]	; (8002478 <HAL_DMA_IRQHandler+0x6a0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d036      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a7d      	ldr	r2, [pc, #500]	; (800247c <HAL_DMA_IRQHandler+0x6a4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d031      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7c      	ldr	r2, [pc, #496]	; (8002480 <HAL_DMA_IRQHandler+0x6a8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d02c      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a7a      	ldr	r2, [pc, #488]	; (8002484 <HAL_DMA_IRQHandler+0x6ac>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d027      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a79      	ldr	r2, [pc, #484]	; (8002488 <HAL_DMA_IRQHandler+0x6b0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d022      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a77      	ldr	r2, [pc, #476]	; (800248c <HAL_DMA_IRQHandler+0x6b4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01d      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a76      	ldr	r2, [pc, #472]	; (8002490 <HAL_DMA_IRQHandler+0x6b8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d018      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a74      	ldr	r2, [pc, #464]	; (8002494 <HAL_DMA_IRQHandler+0x6bc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a73      	ldr	r2, [pc, #460]	; (8002498 <HAL_DMA_IRQHandler+0x6c0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00e      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a71      	ldr	r2, [pc, #452]	; (800249c <HAL_DMA_IRQHandler+0x6c4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a70      	ldr	r2, [pc, #448]	; (80024a0 <HAL_DMA_IRQHandler+0x6c8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_DMA_IRQHandler+0x516>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6e      	ldr	r2, [pc, #440]	; (80024a4 <HAL_DMA_IRQHandler+0x6cc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10a      	bne.n	8002304 <HAL_DMA_IRQHandler+0x52c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	e009      	b.n	8002318 <HAL_DMA_IRQHandler+0x540>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d03e      	beq.n	800239a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	2210      	movs	r2, #16
 8002326:	409a      	lsls	r2, r3
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d018      	beq.n	800236c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d108      	bne.n	800235a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d024      	beq.n	800239a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
 8002358:	e01f      	b.n	800239a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01b      	beq.n	800239a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
 800236a:	e016      	b.n	800239a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d107      	bne.n	800238a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0208 	bic.w	r2, r2, #8
 8002388:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2220      	movs	r2, #32
 80023a4:	409a      	lsls	r2, r3
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8110 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <HAL_DMA_IRQHandler+0x690>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d04a      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2b      	ldr	r2, [pc, #172]	; (800246c <HAL_DMA_IRQHandler+0x694>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d045      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a29      	ldr	r2, [pc, #164]	; (8002470 <HAL_DMA_IRQHandler+0x698>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d040      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <HAL_DMA_IRQHandler+0x69c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d03b      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <HAL_DMA_IRQHandler+0x6a0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d036      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a25      	ldr	r2, [pc, #148]	; (800247c <HAL_DMA_IRQHandler+0x6a4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d031      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a23      	ldr	r2, [pc, #140]	; (8002480 <HAL_DMA_IRQHandler+0x6a8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02c      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a22      	ldr	r2, [pc, #136]	; (8002484 <HAL_DMA_IRQHandler+0x6ac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d027      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a20      	ldr	r2, [pc, #128]	; (8002488 <HAL_DMA_IRQHandler+0x6b0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d022      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1f      	ldr	r2, [pc, #124]	; (800248c <HAL_DMA_IRQHandler+0x6b4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d01d      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_DMA_IRQHandler+0x6b8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d018      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <HAL_DMA_IRQHandler+0x6bc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d013      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_DMA_IRQHandler+0x6c0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a19      	ldr	r2, [pc, #100]	; (800249c <HAL_DMA_IRQHandler+0x6c4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_DMA_IRQHandler+0x6c8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_DMA_IRQHandler+0x678>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_DMA_IRQHandler+0x6cc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d12b      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x6d0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	e02a      	b.n	80024bc <HAL_DMA_IRQHandler+0x6e4>
 8002466:	bf00      	nop
 8002468:	40020010 	.word	0x40020010
 800246c:	40020028 	.word	0x40020028
 8002470:	40020040 	.word	0x40020040
 8002474:	40020058 	.word	0x40020058
 8002478:	40020070 	.word	0x40020070
 800247c:	40020088 	.word	0x40020088
 8002480:	400200a0 	.word	0x400200a0
 8002484:	400200b8 	.word	0x400200b8
 8002488:	40020410 	.word	0x40020410
 800248c:	40020428 	.word	0x40020428
 8002490:	40020440 	.word	0x40020440
 8002494:	40020458 	.word	0x40020458
 8002498:	40020470 	.word	0x40020470
 800249c:	40020488 	.word	0x40020488
 80024a0:	400204a0 	.word	0x400204a0
 80024a4:	400204b8 	.word	0x400204b8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8087 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2220      	movs	r2, #32
 80024cc:	409a      	lsls	r2, r3
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d139      	bne.n	8002552 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0216 	bic.w	r2, r2, #22
 80024ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_DMA_IRQHandler+0x736>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0208 	bic.w	r2, r2, #8
 800251c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	223f      	movs	r2, #63	; 0x3f
 8002528:	409a      	lsls	r2, r3
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 834a 	beq.w	8002bdc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
          }
          return;
 8002550:	e344      	b.n	8002bdc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d018      	beq.n	8002592 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d108      	bne.n	8002580 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	2b00      	cmp	r3, #0
 8002574:	d02c      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
 800257e:	e027      	b.n	80025d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e01e      	b.n	80025d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0210 	bic.w	r2, r2, #16
 80025ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8306 	beq.w	8002be6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8088 	beq.w	80026f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2204      	movs	r2, #4
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a7a      	ldr	r2, [pc, #488]	; (80027e0 <HAL_DMA_IRQHandler+0xa08>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04a      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a79      	ldr	r2, [pc, #484]	; (80027e4 <HAL_DMA_IRQHandler+0xa0c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d045      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a77      	ldr	r2, [pc, #476]	; (80027e8 <HAL_DMA_IRQHandler+0xa10>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d040      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a76      	ldr	r2, [pc, #472]	; (80027ec <HAL_DMA_IRQHandler+0xa14>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d03b      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a74      	ldr	r2, [pc, #464]	; (80027f0 <HAL_DMA_IRQHandler+0xa18>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d036      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a73      	ldr	r2, [pc, #460]	; (80027f4 <HAL_DMA_IRQHandler+0xa1c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d031      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a71      	ldr	r2, [pc, #452]	; (80027f8 <HAL_DMA_IRQHandler+0xa20>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02c      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a70      	ldr	r2, [pc, #448]	; (80027fc <HAL_DMA_IRQHandler+0xa24>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d027      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_DMA_IRQHandler+0xa28>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6d      	ldr	r2, [pc, #436]	; (8002804 <HAL_DMA_IRQHandler+0xa2c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01d      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a6b      	ldr	r2, [pc, #428]	; (8002808 <HAL_DMA_IRQHandler+0xa30>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6a      	ldr	r2, [pc, #424]	; (800280c <HAL_DMA_IRQHandler+0xa34>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_DMA_IRQHandler+0xa38>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a67      	ldr	r2, [pc, #412]	; (8002814 <HAL_DMA_IRQHandler+0xa3c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_DMA_IRQHandler+0xa40>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_DMA_IRQHandler+0x8b8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a64      	ldr	r2, [pc, #400]	; (800281c <HAL_DMA_IRQHandler+0xa44>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d108      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x8ca>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e007      	b.n	80026b2 <HAL_DMA_IRQHandler+0x8da>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3301      	adds	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d307      	bcc.n	80026ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f2      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x8da>
 80026cc:	e000      	b.n	80026d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80026ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2203      	movs	r2, #3
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80026e6:	e003      	b.n	80026f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8272 	beq.w	8002be6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
 800270a:	e26c      	b.n	8002be6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a43      	ldr	r2, [pc, #268]	; (8002820 <HAL_DMA_IRQHandler+0xa48>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d022      	beq.n	800275c <HAL_DMA_IRQHandler+0x984>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a42      	ldr	r2, [pc, #264]	; (8002824 <HAL_DMA_IRQHandler+0xa4c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d01d      	beq.n	800275c <HAL_DMA_IRQHandler+0x984>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_DMA_IRQHandler+0xa50>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d018      	beq.n	800275c <HAL_DMA_IRQHandler+0x984>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a3f      	ldr	r2, [pc, #252]	; (800282c <HAL_DMA_IRQHandler+0xa54>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <HAL_DMA_IRQHandler+0x984>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3d      	ldr	r2, [pc, #244]	; (8002830 <HAL_DMA_IRQHandler+0xa58>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00e      	beq.n	800275c <HAL_DMA_IRQHandler+0x984>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a3c      	ldr	r2, [pc, #240]	; (8002834 <HAL_DMA_IRQHandler+0xa5c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d009      	beq.n	800275c <HAL_DMA_IRQHandler+0x984>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_DMA_IRQHandler+0xa60>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_DMA_IRQHandler+0x984>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a39      	ldr	r2, [pc, #228]	; (800283c <HAL_DMA_IRQHandler+0xa64>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_DMA_IRQHandler+0x988>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_DMA_IRQHandler+0x98a>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 823f 	beq.w	8002be6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2204      	movs	r2, #4
 800277a:	409a      	lsls	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80cd 	beq.w	8002920 <HAL_DMA_IRQHandler+0xb48>
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80c7 	beq.w	8002920 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2204      	movs	r2, #4
 800279c:	409a      	lsls	r2, r3
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d049      	beq.n	8002840 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8210 	beq.w	8002be0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027c8:	e20a      	b.n	8002be0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8206 	beq.w	8002be0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027dc:	e200      	b.n	8002be0 <HAL_DMA_IRQHandler+0xe08>
 80027de:	bf00      	nop
 80027e0:	40020010 	.word	0x40020010
 80027e4:	40020028 	.word	0x40020028
 80027e8:	40020040 	.word	0x40020040
 80027ec:	40020058 	.word	0x40020058
 80027f0:	40020070 	.word	0x40020070
 80027f4:	40020088 	.word	0x40020088
 80027f8:	400200a0 	.word	0x400200a0
 80027fc:	400200b8 	.word	0x400200b8
 8002800:	40020410 	.word	0x40020410
 8002804:	40020428 	.word	0x40020428
 8002808:	40020440 	.word	0x40020440
 800280c:	40020458 	.word	0x40020458
 8002810:	40020470 	.word	0x40020470
 8002814:	40020488 	.word	0x40020488
 8002818:	400204a0 	.word	0x400204a0
 800281c:	400204b8 	.word	0x400204b8
 8002820:	58025408 	.word	0x58025408
 8002824:	5802541c 	.word	0x5802541c
 8002828:	58025430 	.word	0x58025430
 800282c:	58025444 	.word	0x58025444
 8002830:	58025458 	.word	0x58025458
 8002834:	5802546c 	.word	0x5802546c
 8002838:	58025480 	.word	0x58025480
 800283c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d160      	bne.n	800290c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7f      	ldr	r2, [pc, #508]	; (8002a4c <HAL_DMA_IRQHandler+0xc74>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d04a      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a7d      	ldr	r2, [pc, #500]	; (8002a50 <HAL_DMA_IRQHandler+0xc78>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d045      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7c      	ldr	r2, [pc, #496]	; (8002a54 <HAL_DMA_IRQHandler+0xc7c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d040      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7a      	ldr	r2, [pc, #488]	; (8002a58 <HAL_DMA_IRQHandler+0xc80>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d03b      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a79      	ldr	r2, [pc, #484]	; (8002a5c <HAL_DMA_IRQHandler+0xc84>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d036      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a77      	ldr	r2, [pc, #476]	; (8002a60 <HAL_DMA_IRQHandler+0xc88>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_DMA_IRQHandler+0xc8c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d02c      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a74      	ldr	r2, [pc, #464]	; (8002a68 <HAL_DMA_IRQHandler+0xc90>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d027      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	; (8002a6c <HAL_DMA_IRQHandler+0xc94>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d022      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a71      	ldr	r2, [pc, #452]	; (8002a70 <HAL_DMA_IRQHandler+0xc98>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01d      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a70      	ldr	r2, [pc, #448]	; (8002a74 <HAL_DMA_IRQHandler+0xc9c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d018      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6e      	ldr	r2, [pc, #440]	; (8002a78 <HAL_DMA_IRQHandler+0xca0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6d      	ldr	r2, [pc, #436]	; (8002a7c <HAL_DMA_IRQHandler+0xca4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00e      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6b      	ldr	r2, [pc, #428]	; (8002a80 <HAL_DMA_IRQHandler+0xca8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <HAL_DMA_IRQHandler+0xcac>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_DMA_IRQHandler+0xb12>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a68      	ldr	r2, [pc, #416]	; (8002a88 <HAL_DMA_IRQHandler+0xcb0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d108      	bne.n	80028fc <HAL_DMA_IRQHandler+0xb24>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0208 	bic.w	r2, r2, #8
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e007      	b.n	800290c <HAL_DMA_IRQHandler+0xb34>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0204 	bic.w	r2, r2, #4
 800290a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8165 	beq.w	8002be0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800291e:	e15f      	b.n	8002be0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	2202      	movs	r2, #2
 800292a:	409a      	lsls	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80c5 	beq.w	8002ac0 <HAL_DMA_IRQHandler+0xce8>
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80bf 	beq.w	8002ac0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2202      	movs	r2, #2
 800294c:	409a      	lsls	r2, r3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d018      	beq.n	800298e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 813a 	beq.w	8002be4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002978:	e134      	b.n	8002be4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8130 	beq.w	8002be4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800298c:	e12a      	b.n	8002be4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	f040 8089 	bne.w	8002aac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <HAL_DMA_IRQHandler+0xc74>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d04a      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a29      	ldr	r2, [pc, #164]	; (8002a50 <HAL_DMA_IRQHandler+0xc78>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d045      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <HAL_DMA_IRQHandler+0xc7c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d040      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <HAL_DMA_IRQHandler+0xc80>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d03b      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <HAL_DMA_IRQHandler+0xc84>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d036      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a23      	ldr	r2, [pc, #140]	; (8002a60 <HAL_DMA_IRQHandler+0xc88>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_DMA_IRQHandler+0xc8c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d02c      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a20      	ldr	r2, [pc, #128]	; (8002a68 <HAL_DMA_IRQHandler+0xc90>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d027      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <HAL_DMA_IRQHandler+0xc94>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <HAL_DMA_IRQHandler+0xc98>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01d      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <HAL_DMA_IRQHandler+0xc9c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d018      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <HAL_DMA_IRQHandler+0xca0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_DMA_IRQHandler+0xca4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_DMA_IRQHandler+0xca8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_DMA_IRQHandler+0xcac>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xc62>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <HAL_DMA_IRQHandler+0xcb0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d128      	bne.n	8002a8c <HAL_DMA_IRQHandler+0xcb4>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0214 	bic.w	r2, r2, #20
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e027      	b.n	8002a9c <HAL_DMA_IRQHandler+0xcc4>
 8002a4c:	40020010 	.word	0x40020010
 8002a50:	40020028 	.word	0x40020028
 8002a54:	40020040 	.word	0x40020040
 8002a58:	40020058 	.word	0x40020058
 8002a5c:	40020070 	.word	0x40020070
 8002a60:	40020088 	.word	0x40020088
 8002a64:	400200a0 	.word	0x400200a0
 8002a68:	400200b8 	.word	0x400200b8
 8002a6c:	40020410 	.word	0x40020410
 8002a70:	40020428 	.word	0x40020428
 8002a74:	40020440 	.word	0x40020440
 8002a78:	40020458 	.word	0x40020458
 8002a7c:	40020470 	.word	0x40020470
 8002a80:	40020488 	.word	0x40020488
 8002a84:	400204a0 	.word	0x400204a0
 8002a88:	400204b8 	.word	0x400204b8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 020a 	bic.w	r2, r2, #10
 8002a9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8097 	beq.w	8002be4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002abe:	e091      	b.n	8002be4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2208      	movs	r2, #8
 8002aca:	409a      	lsls	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8088 	beq.w	8002be6 <HAL_DMA_IRQHandler+0xe0e>
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8082 	beq.w	8002be6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a41      	ldr	r2, [pc, #260]	; (8002bec <HAL_DMA_IRQHandler+0xe14>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d04a      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a3f      	ldr	r2, [pc, #252]	; (8002bf0 <HAL_DMA_IRQHandler+0xe18>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d045      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a3e      	ldr	r2, [pc, #248]	; (8002bf4 <HAL_DMA_IRQHandler+0xe1c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d040      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a3c      	ldr	r2, [pc, #240]	; (8002bf8 <HAL_DMA_IRQHandler+0xe20>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d03b      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3b      	ldr	r2, [pc, #236]	; (8002bfc <HAL_DMA_IRQHandler+0xe24>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d036      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a39      	ldr	r2, [pc, #228]	; (8002c00 <HAL_DMA_IRQHandler+0xe28>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d031      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a38      	ldr	r2, [pc, #224]	; (8002c04 <HAL_DMA_IRQHandler+0xe2c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d02c      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a36      	ldr	r2, [pc, #216]	; (8002c08 <HAL_DMA_IRQHandler+0xe30>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d027      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a35      	ldr	r2, [pc, #212]	; (8002c0c <HAL_DMA_IRQHandler+0xe34>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a33      	ldr	r2, [pc, #204]	; (8002c10 <HAL_DMA_IRQHandler+0xe38>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a32      	ldr	r2, [pc, #200]	; (8002c14 <HAL_DMA_IRQHandler+0xe3c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d018      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a30      	ldr	r2, [pc, #192]	; (8002c18 <HAL_DMA_IRQHandler+0xe40>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2f      	ldr	r2, [pc, #188]	; (8002c1c <HAL_DMA_IRQHandler+0xe44>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2d      	ldr	r2, [pc, #180]	; (8002c20 <HAL_DMA_IRQHandler+0xe48>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2c      	ldr	r2, [pc, #176]	; (8002c24 <HAL_DMA_IRQHandler+0xe4c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xdaa>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <HAL_DMA_IRQHandler+0xe50>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d108      	bne.n	8002b94 <HAL_DMA_IRQHandler+0xdbc>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 021c 	bic.w	r2, r2, #28
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e007      	b.n	8002ba4 <HAL_DMA_IRQHandler+0xdcc>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 020e 	bic.w	r2, r2, #14
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2201      	movs	r2, #1
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
 8002bda:	e004      	b.n	8002be6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002bdc:	bf00      	nop
 8002bde:	e002      	b.n	8002be6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002be0:	bf00      	nop
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002be4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002be6:	3728      	adds	r7, #40	; 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40020010 	.word	0x40020010
 8002bf0:	40020028 	.word	0x40020028
 8002bf4:	40020040 	.word	0x40020040
 8002bf8:	40020058 	.word	0x40020058
 8002bfc:	40020070 	.word	0x40020070
 8002c00:	40020088 	.word	0x40020088
 8002c04:	400200a0 	.word	0x400200a0
 8002c08:	400200b8 	.word	0x400200b8
 8002c0c:	40020410 	.word	0x40020410
 8002c10:	40020428 	.word	0x40020428
 8002c14:	40020440 	.word	0x40020440
 8002c18:	40020458 	.word	0x40020458
 8002c1c:	40020470 	.word	0x40020470
 8002c20:	40020488 	.word	0x40020488
 8002c24:	400204a0 	.word	0x400204a0
 8002c28:	400204b8 	.word	0x400204b8

08002c2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7f      	ldr	r2, [pc, #508]	; (8002e48 <DMA_SetConfig+0x21c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d072      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a7d      	ldr	r2, [pc, #500]	; (8002e4c <DMA_SetConfig+0x220>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d06d      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7c      	ldr	r2, [pc, #496]	; (8002e50 <DMA_SetConfig+0x224>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d068      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a7a      	ldr	r2, [pc, #488]	; (8002e54 <DMA_SetConfig+0x228>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d063      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a79      	ldr	r2, [pc, #484]	; (8002e58 <DMA_SetConfig+0x22c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d05e      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a77      	ldr	r2, [pc, #476]	; (8002e5c <DMA_SetConfig+0x230>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d059      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a76      	ldr	r2, [pc, #472]	; (8002e60 <DMA_SetConfig+0x234>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d054      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a74      	ldr	r2, [pc, #464]	; (8002e64 <DMA_SetConfig+0x238>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d04f      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a73      	ldr	r2, [pc, #460]	; (8002e68 <DMA_SetConfig+0x23c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d04a      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a71      	ldr	r2, [pc, #452]	; (8002e6c <DMA_SetConfig+0x240>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d045      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a70      	ldr	r2, [pc, #448]	; (8002e70 <DMA_SetConfig+0x244>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d040      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6e      	ldr	r2, [pc, #440]	; (8002e74 <DMA_SetConfig+0x248>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d03b      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6d      	ldr	r2, [pc, #436]	; (8002e78 <DMA_SetConfig+0x24c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d036      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a6b      	ldr	r2, [pc, #428]	; (8002e7c <DMA_SetConfig+0x250>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d031      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6a      	ldr	r2, [pc, #424]	; (8002e80 <DMA_SetConfig+0x254>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d02c      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a68      	ldr	r2, [pc, #416]	; (8002e84 <DMA_SetConfig+0x258>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d027      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a67      	ldr	r2, [pc, #412]	; (8002e88 <DMA_SetConfig+0x25c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d022      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a65      	ldr	r2, [pc, #404]	; (8002e8c <DMA_SetConfig+0x260>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01d      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a64      	ldr	r2, [pc, #400]	; (8002e90 <DMA_SetConfig+0x264>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d018      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a62      	ldr	r2, [pc, #392]	; (8002e94 <DMA_SetConfig+0x268>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a61      	ldr	r2, [pc, #388]	; (8002e98 <DMA_SetConfig+0x26c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00e      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5f      	ldr	r2, [pc, #380]	; (8002e9c <DMA_SetConfig+0x270>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d009      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5e      	ldr	r2, [pc, #376]	; (8002ea0 <DMA_SetConfig+0x274>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <DMA_SetConfig+0x10a>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5c      	ldr	r2, [pc, #368]	; (8002ea4 <DMA_SetConfig+0x278>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <DMA_SetConfig+0x10e>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <DMA_SetConfig+0x110>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a39      	ldr	r2, [pc, #228]	; (8002e48 <DMA_SetConfig+0x21c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d04a      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <DMA_SetConfig+0x220>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d045      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a36      	ldr	r2, [pc, #216]	; (8002e50 <DMA_SetConfig+0x224>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d040      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a35      	ldr	r2, [pc, #212]	; (8002e54 <DMA_SetConfig+0x228>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d03b      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <DMA_SetConfig+0x22c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d036      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a32      	ldr	r2, [pc, #200]	; (8002e5c <DMA_SetConfig+0x230>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d031      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a30      	ldr	r2, [pc, #192]	; (8002e60 <DMA_SetConfig+0x234>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d02c      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <DMA_SetConfig+0x238>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d027      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <DMA_SetConfig+0x23c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d022      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <DMA_SetConfig+0x240>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d01d      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2a      	ldr	r2, [pc, #168]	; (8002e70 <DMA_SetConfig+0x244>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d018      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <DMA_SetConfig+0x248>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <DMA_SetConfig+0x24c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <DMA_SetConfig+0x250>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d009      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <DMA_SetConfig+0x254>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <DMA_SetConfig+0x1d0>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <DMA_SetConfig+0x258>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <DMA_SetConfig+0x1d4>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <DMA_SetConfig+0x1d6>
 8002e00:	2300      	movs	r3, #0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d059      	beq.n	8002eba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	223f      	movs	r2, #63	; 0x3f
 8002e10:	409a      	lsls	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b40      	cmp	r3, #64	; 0x40
 8002e34:	d138      	bne.n	8002ea8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e46:	e086      	b.n	8002f56 <DMA_SetConfig+0x32a>
 8002e48:	40020010 	.word	0x40020010
 8002e4c:	40020028 	.word	0x40020028
 8002e50:	40020040 	.word	0x40020040
 8002e54:	40020058 	.word	0x40020058
 8002e58:	40020070 	.word	0x40020070
 8002e5c:	40020088 	.word	0x40020088
 8002e60:	400200a0 	.word	0x400200a0
 8002e64:	400200b8 	.word	0x400200b8
 8002e68:	40020410 	.word	0x40020410
 8002e6c:	40020428 	.word	0x40020428
 8002e70:	40020440 	.word	0x40020440
 8002e74:	40020458 	.word	0x40020458
 8002e78:	40020470 	.word	0x40020470
 8002e7c:	40020488 	.word	0x40020488
 8002e80:	400204a0 	.word	0x400204a0
 8002e84:	400204b8 	.word	0x400204b8
 8002e88:	58025408 	.word	0x58025408
 8002e8c:	5802541c 	.word	0x5802541c
 8002e90:	58025430 	.word	0x58025430
 8002e94:	58025444 	.word	0x58025444
 8002e98:	58025458 	.word	0x58025458
 8002e9c:	5802546c 	.word	0x5802546c
 8002ea0:	58025480 	.word	0x58025480
 8002ea4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]
}
 8002eb8:	e04d      	b.n	8002f56 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <DMA_SetConfig+0x338>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d022      	beq.n	8002f0a <DMA_SetConfig+0x2de>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <DMA_SetConfig+0x33c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01d      	beq.n	8002f0a <DMA_SetConfig+0x2de>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <DMA_SetConfig+0x340>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d018      	beq.n	8002f0a <DMA_SetConfig+0x2de>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a24      	ldr	r2, [pc, #144]	; (8002f70 <DMA_SetConfig+0x344>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <DMA_SetConfig+0x2de>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <DMA_SetConfig+0x348>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00e      	beq.n	8002f0a <DMA_SetConfig+0x2de>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <DMA_SetConfig+0x34c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d009      	beq.n	8002f0a <DMA_SetConfig+0x2de>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <DMA_SetConfig+0x350>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <DMA_SetConfig+0x2de>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <DMA_SetConfig+0x354>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <DMA_SetConfig+0x2e2>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <DMA_SetConfig+0x2e4>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d108      	bne.n	8002f46 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	60da      	str	r2, [r3, #12]
}
 8002f44:	e007      	b.n	8002f56 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	60da      	str	r2, [r3, #12]
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	58025408 	.word	0x58025408
 8002f68:	5802541c 	.word	0x5802541c
 8002f6c:	58025430 	.word	0x58025430
 8002f70:	58025444 	.word	0x58025444
 8002f74:	58025458 	.word	0x58025458
 8002f78:	5802546c 	.word	0x5802546c
 8002f7c:	58025480 	.word	0x58025480
 8002f80:	58025494 	.word	0x58025494

08002f84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a42      	ldr	r2, [pc, #264]	; (800309c <DMA_CalcBaseAndBitshift+0x118>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d04a      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a41      	ldr	r2, [pc, #260]	; (80030a0 <DMA_CalcBaseAndBitshift+0x11c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d045      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3f      	ldr	r2, [pc, #252]	; (80030a4 <DMA_CalcBaseAndBitshift+0x120>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d040      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3e      	ldr	r2, [pc, #248]	; (80030a8 <DMA_CalcBaseAndBitshift+0x124>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d03b      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a3c      	ldr	r2, [pc, #240]	; (80030ac <DMA_CalcBaseAndBitshift+0x128>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d036      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a3b      	ldr	r2, [pc, #236]	; (80030b0 <DMA_CalcBaseAndBitshift+0x12c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d031      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a39      	ldr	r2, [pc, #228]	; (80030b4 <DMA_CalcBaseAndBitshift+0x130>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d02c      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a38      	ldr	r2, [pc, #224]	; (80030b8 <DMA_CalcBaseAndBitshift+0x134>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d027      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a36      	ldr	r2, [pc, #216]	; (80030bc <DMA_CalcBaseAndBitshift+0x138>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d022      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a35      	ldr	r2, [pc, #212]	; (80030c0 <DMA_CalcBaseAndBitshift+0x13c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d01d      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a33      	ldr	r2, [pc, #204]	; (80030c4 <DMA_CalcBaseAndBitshift+0x140>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d018      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a32      	ldr	r2, [pc, #200]	; (80030c8 <DMA_CalcBaseAndBitshift+0x144>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a30      	ldr	r2, [pc, #192]	; (80030cc <DMA_CalcBaseAndBitshift+0x148>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00e      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2f      	ldr	r2, [pc, #188]	; (80030d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d009      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2d      	ldr	r2, [pc, #180]	; (80030d4 <DMA_CalcBaseAndBitshift+0x150>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <DMA_CalcBaseAndBitshift+0xa8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a2c      	ldr	r2, [pc, #176]	; (80030d8 <DMA_CalcBaseAndBitshift+0x154>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <DMA_CalcBaseAndBitshift+0xac>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <DMA_CalcBaseAndBitshift+0xae>
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d024      	beq.n	8003080 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3b10      	subs	r3, #16
 800303e:	4a27      	ldr	r2, [pc, #156]	; (80030dc <DMA_CalcBaseAndBitshift+0x158>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003050:	5cd3      	ldrb	r3, [r2, r3]
 8003052:	461a      	mov	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d908      	bls.n	8003070 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <DMA_CalcBaseAndBitshift+0x160>)
 8003066:	4013      	ands	r3, r2
 8003068:	1d1a      	adds	r2, r3, #4
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	659a      	str	r2, [r3, #88]	; 0x58
 800306e:	e00d      	b.n	800308c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <DMA_CalcBaseAndBitshift+0x160>)
 8003078:	4013      	ands	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6593      	str	r3, [r2, #88]	; 0x58
 800307e:	e005      	b.n	800308c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40020010 	.word	0x40020010
 80030a0:	40020028 	.word	0x40020028
 80030a4:	40020040 	.word	0x40020040
 80030a8:	40020058 	.word	0x40020058
 80030ac:	40020070 	.word	0x40020070
 80030b0:	40020088 	.word	0x40020088
 80030b4:	400200a0 	.word	0x400200a0
 80030b8:	400200b8 	.word	0x400200b8
 80030bc:	40020410 	.word	0x40020410
 80030c0:	40020428 	.word	0x40020428
 80030c4:	40020440 	.word	0x40020440
 80030c8:	40020458 	.word	0x40020458
 80030cc:	40020470 	.word	0x40020470
 80030d0:	40020488 	.word	0x40020488
 80030d4:	400204a0 	.word	0x400204a0
 80030d8:	400204b8 	.word	0x400204b8
 80030dc:	aaaaaaab 	.word	0xaaaaaaab
 80030e0:	08006180 	.word	0x08006180
 80030e4:	fffffc00 	.word	0xfffffc00

080030e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d120      	bne.n	800313e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	2b03      	cmp	r3, #3
 8003102:	d858      	bhi.n	80031b6 <DMA_CheckFifoParam+0xce>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <DMA_CheckFifoParam+0x24>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	0800311d 	.word	0x0800311d
 8003110:	0800312f 	.word	0x0800312f
 8003114:	0800311d 	.word	0x0800311d
 8003118:	080031b7 	.word	0x080031b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d048      	beq.n	80031ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800312c:	e045      	b.n	80031ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003136:	d142      	bne.n	80031be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800313c:	e03f      	b.n	80031be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003146:	d123      	bne.n	8003190 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	2b03      	cmp	r3, #3
 800314e:	d838      	bhi.n	80031c2 <DMA_CheckFifoParam+0xda>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <DMA_CheckFifoParam+0x70>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	08003169 	.word	0x08003169
 800315c:	0800316f 	.word	0x0800316f
 8003160:	08003169 	.word	0x08003169
 8003164:	08003181 	.word	0x08003181
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
        break;
 800316c:	e030      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d025      	beq.n	80031c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800317e:	e022      	b.n	80031c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003188:	d11f      	bne.n	80031ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800318e:	e01c      	b.n	80031ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	2b02      	cmp	r3, #2
 8003196:	d902      	bls.n	800319e <DMA_CheckFifoParam+0xb6>
 8003198:	2b03      	cmp	r3, #3
 800319a:	d003      	beq.n	80031a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800319c:	e018      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
        break;
 80031a2:	e015      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00e      	beq.n	80031ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
    break;
 80031b4:	e00b      	b.n	80031ce <DMA_CheckFifoParam+0xe6>
        break;
 80031b6:	bf00      	nop
 80031b8:	e00a      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
        break;
 80031ba:	bf00      	nop
 80031bc:	e008      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
        break;
 80031be:	bf00      	nop
 80031c0:	e006      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
        break;
 80031c2:	bf00      	nop
 80031c4:	e004      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
        break;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
        break;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <DMA_CheckFifoParam+0xe8>
    break;
 80031ce:	bf00      	nop
    }
  }

  return status;
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop

080031e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a36      	ldr	r2, [pc, #216]	; (80032d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a35      	ldr	r2, [pc, #212]	; (80032dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a33      	ldr	r2, [pc, #204]	; (80032e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a32      	ldr	r2, [pc, #200]	; (80032e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a30      	ldr	r2, [pc, #192]	; (80032e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2f      	ldr	r2, [pc, #188]	; (80032ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2d      	ldr	r2, [pc, #180]	; (80032f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01a      	beq.n	800327e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	3b08      	subs	r3, #8
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a24      	ldr	r2, [pc, #144]	; (80032fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800326c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2201      	movs	r2, #1
 8003276:	409a      	lsls	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800327c:	e024      	b.n	80032c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3b10      	subs	r3, #16
 8003286:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d806      	bhi.n	80032a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d902      	bls.n	80032a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3308      	adds	r3, #8
 80032a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4b18      	ldr	r3, [pc, #96]	; (800330c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	461a      	mov	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a16      	ldr	r2, [pc, #88]	; (8003310 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80032b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	2201      	movs	r2, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	58025408 	.word	0x58025408
 80032d8:	5802541c 	.word	0x5802541c
 80032dc:	58025430 	.word	0x58025430
 80032e0:	58025444 	.word	0x58025444
 80032e4:	58025458 	.word	0x58025458
 80032e8:	5802546c 	.word	0x5802546c
 80032ec:	58025480 	.word	0x58025480
 80032f0:	58025494 	.word	0x58025494
 80032f4:	cccccccd 	.word	0xcccccccd
 80032f8:	16009600 	.word	0x16009600
 80032fc:	58025880 	.word	0x58025880
 8003300:	aaaaaaab 	.word	0xaaaaaaab
 8003304:	400204b8 	.word	0x400204b8
 8003308:	4002040f 	.word	0x4002040f
 800330c:	10008200 	.word	0x10008200
 8003310:	40020880 	.word	0x40020880

08003314 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d04a      	beq.n	80033c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d847      	bhi.n	80033c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a25      	ldr	r2, [pc, #148]	; (80033cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d022      	beq.n	8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a24      	ldr	r2, [pc, #144]	; (80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d01d      	beq.n	8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a22      	ldr	r2, [pc, #136]	; (80033d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d018      	beq.n	8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00e      	beq.n	8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d009      	beq.n	8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003384:	2300      	movs	r3, #0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	461a      	mov	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800339c:	671a      	str	r2, [r3, #112]	; 0x70
 800339e:	e009      	b.n	80033b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80033b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	2201      	movs	r2, #1
 80033ba:	409a      	lsls	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	58025408 	.word	0x58025408
 80033d0:	5802541c 	.word	0x5802541c
 80033d4:	58025430 	.word	0x58025430
 80033d8:	58025444 	.word	0x58025444
 80033dc:	58025458 	.word	0x58025458
 80033e0:	5802546c 	.word	0x5802546c
 80033e4:	58025480 	.word	0x58025480
 80033e8:	58025494 	.word	0x58025494
 80033ec:	1600963f 	.word	0x1600963f
 80033f0:	58025940 	.word	0x58025940
 80033f4:	1000823f 	.word	0x1000823f
 80033f8:	40020940 	.word	0x40020940

080033fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800340a:	4b89      	ldr	r3, [pc, #548]	; (8003630 <HAL_GPIO_Init+0x234>)
 800340c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800340e:	e194      	b.n	800373a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8186 	beq.w	8003734 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d005      	beq.n	8003440 <HAL_GPIO_Init+0x44>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d130      	bne.n	80034a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003476:	2201      	movs	r2, #1
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f003 0201 	and.w	r2, r3, #1
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d017      	beq.n	80034de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d123      	bne.n	8003532 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	69b9      	ldr	r1, [r7, #24]
 800352e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0203 	and.w	r2, r3, #3
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80e0 	beq.w	8003734 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_GPIO_Init+0x238>)
 8003576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800357a:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_GPIO_Init+0x238>)
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_GPIO_Init+0x238>)
 8003586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <HAL_GPIO_Init+0x23c>)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	3302      	adds	r3, #2
 800359a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	220f      	movs	r2, #15
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <HAL_GPIO_Init+0x240>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d052      	beq.n	8003664 <HAL_GPIO_Init+0x268>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a1f      	ldr	r2, [pc, #124]	; (8003640 <HAL_GPIO_Init+0x244>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d031      	beq.n	800362a <HAL_GPIO_Init+0x22e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1e      	ldr	r2, [pc, #120]	; (8003644 <HAL_GPIO_Init+0x248>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02b      	beq.n	8003626 <HAL_GPIO_Init+0x22a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <HAL_GPIO_Init+0x24c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d025      	beq.n	8003622 <HAL_GPIO_Init+0x226>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a1c      	ldr	r2, [pc, #112]	; (800364c <HAL_GPIO_Init+0x250>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01f      	beq.n	800361e <HAL_GPIO_Init+0x222>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <HAL_GPIO_Init+0x254>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d019      	beq.n	800361a <HAL_GPIO_Init+0x21e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <HAL_GPIO_Init+0x258>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x21a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_GPIO_Init+0x25c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x216>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_GPIO_Init+0x260>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x212>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <HAL_GPIO_Init+0x264>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x20e>
 8003606:	2309      	movs	r3, #9
 8003608:	e02d      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 800360a:	230a      	movs	r3, #10
 800360c:	e02b      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 800360e:	2308      	movs	r3, #8
 8003610:	e029      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 8003612:	2307      	movs	r3, #7
 8003614:	e027      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 8003616:	2306      	movs	r3, #6
 8003618:	e025      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 800361a:	2305      	movs	r3, #5
 800361c:	e023      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 800361e:	2304      	movs	r3, #4
 8003620:	e021      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 8003622:	2303      	movs	r3, #3
 8003624:	e01f      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 8003626:	2302      	movs	r3, #2
 8003628:	e01d      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 800362a:	2301      	movs	r3, #1
 800362c:	e01b      	b.n	8003666 <HAL_GPIO_Init+0x26a>
 800362e:	bf00      	nop
 8003630:	58000080 	.word	0x58000080
 8003634:	58024400 	.word	0x58024400
 8003638:	58000400 	.word	0x58000400
 800363c:	58020000 	.word	0x58020000
 8003640:	58020400 	.word	0x58020400
 8003644:	58020800 	.word	0x58020800
 8003648:	58020c00 	.word	0x58020c00
 800364c:	58021000 	.word	0x58021000
 8003650:	58021400 	.word	0x58021400
 8003654:	58021800 	.word	0x58021800
 8003658:	58021c00 	.word	0x58021c00
 800365c:	58022000 	.word	0x58022000
 8003660:	58022400 	.word	0x58022400
 8003664:	2300      	movs	r3, #0
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	f002 0203 	and.w	r2, r2, #3
 800366c:	0092      	lsls	r2, r2, #2
 800366e:	4093      	lsls	r3, r2
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003676:	4938      	ldr	r1, [pc, #224]	; (8003758 <HAL_GPIO_Init+0x35c>)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	3302      	adds	r3, #2
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80036aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80036d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	3301      	adds	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f ae63 	bne.w	8003410 <HAL_GPIO_Init+0x14>
  }
}
 800374a:	bf00      	nop
 800374c:	bf00      	nop
 800374e:	3724      	adds	r7, #36	; 0x24
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	58000400 	.word	0x58000400

0800375c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d00a      	beq.n	8003786 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003770:	4b16      	ldr	r3, [pc, #88]	; (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e01f      	b.n	80037c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e01d      	b.n	80037c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 0207 	bic.w	r2, r3, #7
 800378e:	490f      	ldr	r1, [pc, #60]	; (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4313      	orrs	r3, r2
 8003794:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003796:	f7fd fc31 	bl	8000ffc <HAL_GetTick>
 800379a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800379c:	e009      	b.n	80037b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800379e:	f7fd fc2d 	bl	8000ffc <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ac:	d901      	bls.n	80037b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e007      	b.n	80037c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037be:	d1ee      	bne.n	800379e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	58024800 	.word	0x58024800

080037d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	; 0x30
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f000 bc48 	b.w	8004074 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8088 	beq.w	8003902 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f2:	4b99      	ldr	r3, [pc, #612]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037fc:	4b96      	ldr	r3, [pc, #600]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	2b10      	cmp	r3, #16
 8003806:	d007      	beq.n	8003818 <HAL_RCC_OscConfig+0x48>
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	2b18      	cmp	r3, #24
 800380c:	d111      	bne.n	8003832 <HAL_RCC_OscConfig+0x62>
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d10c      	bne.n	8003832 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	4b8f      	ldr	r3, [pc, #572]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d06d      	beq.n	8003900 <HAL_RCC_OscConfig+0x130>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d169      	bne.n	8003900 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f000 bc21 	b.w	8004074 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x7a>
 800383c:	4b86      	ldr	r3, [pc, #536]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a85      	ldr	r2, [pc, #532]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	e02e      	b.n	80038a8 <HAL_RCC_OscConfig+0xd8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x9c>
 8003852:	4b81      	ldr	r3, [pc, #516]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a80      	ldr	r2, [pc, #512]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b7e      	ldr	r3, [pc, #504]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7d      	ldr	r2, [pc, #500]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e01d      	b.n	80038a8 <HAL_RCC_OscConfig+0xd8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0xc0>
 8003876:	4b78      	ldr	r3, [pc, #480]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a77      	ldr	r2, [pc, #476]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b75      	ldr	r3, [pc, #468]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a74      	ldr	r2, [pc, #464]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0xd8>
 8003890:	4b71      	ldr	r3, [pc, #452]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a70      	ldr	r2, [pc, #448]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b6e      	ldr	r3, [pc, #440]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a6d      	ldr	r2, [pc, #436]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fba4 	bl	8000ffc <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fd fba0 	bl	8000ffc <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e3d4      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038ca:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0xe8>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fb90 	bl	8000ffc <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fd fb8c 	bl	8000ffc <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e3c0      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038f2:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x110>
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80ca 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003910:	4b51      	ldr	r3, [pc, #324]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003918:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800391a:	4b4f      	ldr	r3, [pc, #316]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_RCC_OscConfig+0x166>
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2b18      	cmp	r3, #24
 800392a:	d156      	bne.n	80039da <HAL_RCC_OscConfig+0x20a>
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d151      	bne.n	80039da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003936:	4b48      	ldr	r3, [pc, #288]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_RCC_OscConfig+0x17e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e392      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800394e:	4b42      	ldr	r3, [pc, #264]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0219 	bic.w	r2, r3, #25
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	493f      	ldr	r1, [pc, #252]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fb4c 	bl	8000ffc <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003968:	f7fd fb48 	bl	8000ffc <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e37c      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800397a:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	f7fd fb45 	bl	8001014 <HAL_GetREVID>
 800398a:	4603      	mov	r3, r0
 800398c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003990:	4293      	cmp	r3, r2
 8003992:	d817      	bhi.n	80039c4 <HAL_RCC_OscConfig+0x1f4>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d108      	bne.n	80039ae <HAL_RCC_OscConfig+0x1de>
 800399c:	4b2e      	ldr	r3, [pc, #184]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039a4:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ac:	e07a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	031b      	lsls	r3, r3, #12
 80039bc:	4926      	ldr	r1, [pc, #152]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c2:	e06f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	4921      	ldr	r1, [pc, #132]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d8:	e064      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d047      	beq.n	8003a72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0219 	bic.w	r2, r3, #25
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	491a      	ldr	r1, [pc, #104]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fd fb02 	bl	8000ffc <HAL_GetTick>
 80039f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fc:	f7fd fafe 	bl	8000ffc <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e332      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1a:	f7fd fafb 	bl	8001014 <HAL_GetREVID>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d819      	bhi.n	8003a5c <HAL_RCC_OscConfig+0x28c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d108      	bne.n	8003a42 <HAL_RCC_OscConfig+0x272>
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a38:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3e:	6053      	str	r3, [r2, #4]
 8003a40:	e030      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	031b      	lsls	r3, r3, #12
 8003a50:	4901      	ldr	r1, [pc, #4]	; (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
 8003a56:	e025      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
 8003a58:	58024400 	.word	0x58024400
 8003a5c:	4b9a      	ldr	r3, [pc, #616]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	4997      	ldr	r1, [pc, #604]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	e018      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a72:	4b95      	ldr	r3, [pc, #596]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a94      	ldr	r2, [pc, #592]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fabd 	bl	8000ffc <HAL_GetTick>
 8003a82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fd fab9 	bl	8000ffc <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e2ed      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a98:	4b8b      	ldr	r3, [pc, #556]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f0      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80a9 	beq.w	8003c04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab2:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003abc:	4b82      	ldr	r3, [pc, #520]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d007      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x308>
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b18      	cmp	r3, #24
 8003acc:	d13a      	bne.n	8003b44 <HAL_RCC_OscConfig+0x374>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d135      	bne.n	8003b44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ad8:	4b7b      	ldr	r3, [pc, #492]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_OscConfig+0x320>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e2c1      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003af0:	f7fd fa90 	bl	8001014 <HAL_GetREVID>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d817      	bhi.n	8003b2e <HAL_RCC_OscConfig+0x35e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d108      	bne.n	8003b18 <HAL_RCC_OscConfig+0x348>
 8003b06:	4b70      	ldr	r3, [pc, #448]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b0e:	4a6e      	ldr	r2, [pc, #440]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b16:	e075      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b18:	4b6b      	ldr	r3, [pc, #428]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	069b      	lsls	r3, r3, #26
 8003b26:	4968      	ldr	r1, [pc, #416]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b2c:	e06a      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b2e:	4b66      	ldr	r3, [pc, #408]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	4962      	ldr	r1, [pc, #392]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b42:	e05f      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d042      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b4c:	4b5e      	ldr	r3, [pc, #376]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a5d      	ldr	r2, [pc, #372]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fa50 	bl	8000ffc <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b60:	f7fd fa4c 	bl	8000ffc <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e280      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b72:	4b55      	ldr	r3, [pc, #340]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b7e:	f7fd fa49 	bl	8001014 <HAL_GetREVID>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d817      	bhi.n	8003bbc <HAL_RCC_OscConfig+0x3ec>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d108      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x3d6>
 8003b94:	4b4c      	ldr	r3, [pc, #304]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b9c:	4a4a      	ldr	r2, [pc, #296]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ba2:	6053      	str	r3, [r2, #4]
 8003ba4:	e02e      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
 8003ba6:	4b48      	ldr	r3, [pc, #288]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	069b      	lsls	r3, r3, #26
 8003bb4:	4944      	ldr	r1, [pc, #272]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
 8003bba:	e023      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
 8003bbc:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	493f      	ldr	r1, [pc, #252]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60cb      	str	r3, [r1, #12]
 8003bd0:	e018      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a3c      	ldr	r2, [pc, #240]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd fa0d 	bl	8000ffc <HAL_GetTick>
 8003be2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003be6:	f7fd fa09 	bl	8000ffc <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e23d      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bf8:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d036      	beq.n	8003c7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d019      	beq.n	8003c4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c18:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1c:	4a2a      	ldr	r2, [pc, #168]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fd f9ea 	bl	8000ffc <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fd f9e6 	bl	8000ffc <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e21a      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c3e:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x45c>
 8003c4a:	e018      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fd f9d0 	bl	8000ffc <HAL_GetTick>
 8003c5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c60:	f7fd f9cc 	bl	8000ffc <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e200      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d039      	beq.n	8003cfe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c9e:	f7fd f9ad 	bl	8000ffc <HAL_GetTick>
 8003ca2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ca6:	f7fd f9a9 	bl	8000ffc <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e1dd      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x4d6>
 8003cc4:	e01b      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
 8003cc6:	bf00      	nop
 8003cc8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ccc:	4b9b      	ldr	r3, [pc, #620]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a9a      	ldr	r2, [pc, #616]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cd8:	f7fd f990 	bl	8000ffc <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce0:	f7fd f98c 	bl	8000ffc <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1c0      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cf2:	4b92      	ldr	r3, [pc, #584]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 8081 	beq.w	8003e0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d0c:	4b8c      	ldr	r3, [pc, #560]	; (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a8b      	ldr	r2, [pc, #556]	; (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d18:	f7fd f970 	bl	8000ffc <HAL_GetTick>
 8003d1c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d20:	f7fd f96c 	bl	8000ffc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1a0      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d32:	4b83      	ldr	r3, [pc, #524]	; (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d106      	bne.n	8003d54 <HAL_RCC_OscConfig+0x584>
 8003d46:	4b7d      	ldr	r3, [pc, #500]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
 8003d52:	e02d      	b.n	8003db0 <HAL_RCC_OscConfig+0x5e0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x5a6>
 8003d5c:	4b77      	ldr	r3, [pc, #476]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a76      	ldr	r2, [pc, #472]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	4b74      	ldr	r3, [pc, #464]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a73      	ldr	r2, [pc, #460]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d6e:	f023 0304 	bic.w	r3, r3, #4
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
 8003d74:	e01c      	b.n	8003db0 <HAL_RCC_OscConfig+0x5e0>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x5c8>
 8003d7e:	4b6f      	ldr	r3, [pc, #444]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a6e      	ldr	r2, [pc, #440]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	4b6c      	ldr	r3, [pc, #432]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a6b      	ldr	r2, [pc, #428]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_OscConfig+0x5e0>
 8003d98:	4b68      	ldr	r3, [pc, #416]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a67      	ldr	r2, [pc, #412]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	4b65      	ldr	r3, [pc, #404]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a64      	ldr	r2, [pc, #400]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003daa:	f023 0304 	bic.w	r3, r3, #4
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fd f920 	bl	8000ffc <HAL_GetTick>
 8003dbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fd f91c 	bl	8000ffc <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e14e      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dd6:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ee      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x5f0>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fd f90a 	bl	8000ffc <HAL_GetTick>
 8003de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fd f906 	bl	8000ffc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e138      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e02:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ee      	bne.n	8003dec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 812d 	beq.w	8004072 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e18:	4b48      	ldr	r3, [pc, #288]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e20:	2b18      	cmp	r3, #24
 8003e22:	f000 80bd 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	f040 809e 	bne.w	8003f6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e30:	4b42      	ldr	r3, [pc, #264]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a41      	ldr	r2, [pc, #260]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd f8de 	bl	8000ffc <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd f8da 	bl	8000ffc <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e10e      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e62:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e66:	4b37      	ldr	r3, [pc, #220]	; (8003f44 <HAL_RCC_OscConfig+0x774>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	430a      	orrs	r2, r1
 8003e76:	4931      	ldr	r1, [pc, #196]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	628b      	str	r3, [r1, #40]	; 0x28
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	3b01      	subs	r3, #1
 8003e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	025b      	lsls	r3, r3, #9
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	3b01      	subs	r3, #1
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	061b      	lsls	r3, r3, #24
 8003ea8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eac:	4923      	ldr	r1, [pc, #140]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ebe:	4b1f      	ldr	r3, [pc, #124]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_RCC_OscConfig+0x778>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003eca:	00d2      	lsls	r2, r2, #3
 8003ecc:	491b      	ldr	r1, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	f023 020c 	bic.w	r2, r3, #12
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	4917      	ldr	r1, [pc, #92]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ee4:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f023 0202 	bic.w	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef0:	4912      	ldr	r1, [pc, #72]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f02:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fd f863 	bl	8000ffc <HAL_GetTick>
 8003f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f38:	e011      	b.n	8003f5e <HAL_RCC_OscConfig+0x78e>
 8003f3a:	bf00      	nop
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	58024800 	.word	0x58024800
 8003f44:	fffffc0c 	.word	0xfffffc0c
 8003f48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fd f856 	bl	8000ffc <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e08a      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x77c>
 8003f6a:	e082      	b.n	8004072 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a42      	ldr	r2, [pc, #264]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd f840 	bl	8000ffc <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fd f83c 	bl	8000ffc <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e070      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f92:	4b3a      	ldr	r3, [pc, #232]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x7b0>
 8003f9e:	e068      	b.n	8004072 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fa0:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fa6:	4b35      	ldr	r3, [pc, #212]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d031      	beq.n	8004018 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f003 0203 	and.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d12a      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d122      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d11a      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	0a5b      	lsrs	r3, r3, #9
 8003fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d111      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d108      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	0e1b      	lsrs	r3, r3, #24
 800400a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e02b      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	08db      	lsrs	r3, r3, #3
 8004022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004026:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	429a      	cmp	r2, r3
 8004030:	d01f      	beq.n	8004072 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	4a11      	ldr	r2, [pc, #68]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800403e:	f7fc ffdd 	bl	8000ffc <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004044:	bf00      	nop
 8004046:	f7fc ffd9 	bl	8000ffc <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	4293      	cmp	r3, r2
 8004050:	d0f9      	beq.n	8004046 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004052:	4b0a      	ldr	r3, [pc, #40]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCC_OscConfig+0x8b0>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800405e:	00d2      	lsls	r2, r2, #3
 8004060:	4906      	ldr	r1, [pc, #24]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004062:	4313      	orrs	r3, r2
 8004064:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_RCC_OscConfig+0x8ac>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3730      	adds	r7, #48	; 0x30
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	58024400 	.word	0x58024400
 8004080:	ffff0007 	.word	0xffff0007

08004084 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e19c      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b8a      	ldr	r3, [pc, #552]	; (80042c4 <HAL_RCC_ClockConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d910      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b87      	ldr	r3, [pc, #540]	; (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 020f 	bic.w	r2, r3, #15
 80040ae:	4985      	ldr	r1, [pc, #532]	; (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b83      	ldr	r3, [pc, #524]	; (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e184      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d908      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040e4:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	4975      	ldr	r1, [pc, #468]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d010      	beq.n	8004124 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	4b70      	ldr	r3, [pc, #448]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800410e:	429a      	cmp	r2, r3
 8004110:	d908      	bls.n	8004124 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004112:	4b6d      	ldr	r3, [pc, #436]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	496a      	ldr	r1, [pc, #424]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004120:	4313      	orrs	r3, r2
 8004122:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699a      	ldr	r2, [r3, #24]
 8004134:	4b64      	ldr	r3, [pc, #400]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800413c:	429a      	cmp	r2, r3
 800413e:	d908      	bls.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004140:	4b61      	ldr	r3, [pc, #388]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	495e      	ldr	r1, [pc, #376]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 800414e:	4313      	orrs	r3, r2
 8004150:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800416a:	429a      	cmp	r2, r3
 800416c:	d908      	bls.n	8004180 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800416e:	4b56      	ldr	r3, [pc, #344]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4953      	ldr	r1, [pc, #332]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 800417c:	4313      	orrs	r3, r2
 800417e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	4b4d      	ldr	r3, [pc, #308]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800419c:	4b4a      	ldr	r3, [pc, #296]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f023 020f 	bic.w	r2, r3, #15
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4947      	ldr	r1, [pc, #284]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d055      	beq.n	8004266 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041ba:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	4940      	ldr	r1, [pc, #256]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041d4:	4b3c      	ldr	r3, [pc, #240]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d121      	bne.n	8004224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0f6      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d107      	bne.n	80041fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ec:	4b36      	ldr	r3, [pc, #216]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d115      	bne.n	8004224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0ea      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d107      	bne.n	8004214 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004204:	4b30      	ldr	r3, [pc, #192]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0de      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004214:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0d6      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004224:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f023 0207 	bic.w	r2, r3, #7
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4925      	ldr	r1, [pc, #148]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004232:	4313      	orrs	r3, r2
 8004234:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004236:	f7fc fee1 	bl	8000ffc <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423c:	e00a      	b.n	8004254 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423e:	f7fc fedd 	bl	8000ffc <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	; 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e0be      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004254:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	429a      	cmp	r2, r3
 8004264:	d1eb      	bne.n	800423e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	429a      	cmp	r2, r3
 8004280:	d208      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f023 020f 	bic.w	r2, r3, #15
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	490e      	ldr	r1, [pc, #56]	; (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004290:	4313      	orrs	r3, r2
 8004292:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_ClockConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d214      	bcs.n	80042cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 020f 	bic.w	r2, r3, #15
 80042aa:	4906      	ldr	r1, [pc, #24]	; (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e086      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
 80042c4:	52002000 	.word	0x52002000
 80042c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d208      	bcs.n	80042fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042e8:	4b3c      	ldr	r3, [pc, #240]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	4939      	ldr	r1, [pc, #228]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	4b34      	ldr	r3, [pc, #208]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004312:	429a      	cmp	r2, r3
 8004314:	d208      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004316:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	492e      	ldr	r1, [pc, #184]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004324:	4313      	orrs	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	4b28      	ldr	r3, [pc, #160]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004340:	429a      	cmp	r2, r3
 8004342:	d208      	bcs.n	8004356 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004344:	4b25      	ldr	r3, [pc, #148]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	4922      	ldr	r1, [pc, #136]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004352:	4313      	orrs	r3, r2
 8004354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436e:	429a      	cmp	r2, r3
 8004370:	d208      	bcs.n	8004384 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	4917      	ldr	r1, [pc, #92]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004380:	4313      	orrs	r3, r2
 8004382:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004384:	f000 f834 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	4912      	ldr	r1, [pc, #72]	; (80043e0 <HAL_RCC_ClockConfig+0x35c>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
 80043a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043a2:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <HAL_RCC_ClockConfig+0x358>)
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <HAL_RCC_ClockConfig+0x35c>)
 80043ac:	5cd3      	ldrb	r3, [r2, r3]
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
 80043b8:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <HAL_RCC_ClockConfig+0x360>)
 80043ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043bc:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <HAL_RCC_ClockConfig+0x364>)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_RCC_ClockConfig+0x368>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc fdce 	bl	8000f68 <HAL_InitTick>
 80043cc:	4603      	mov	r3, r0
 80043ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	58024400 	.word	0x58024400
 80043e0:	08006170 	.word	0x08006170
 80043e4:	24000324 	.word	0x24000324
 80043e8:	24000320 	.word	0x24000320
 80043ec:	24000328 	.word	0x24000328

080043f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	; 0x24
 80043f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f6:	4bb3      	ldr	r3, [pc, #716]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043fe:	2b18      	cmp	r3, #24
 8004400:	f200 8155 	bhi.w	80046ae <HAL_RCC_GetSysClockFreq+0x2be>
 8004404:	a201      	add	r2, pc, #4	; (adr r2, 800440c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	08004471 	.word	0x08004471
 8004410:	080046af 	.word	0x080046af
 8004414:	080046af 	.word	0x080046af
 8004418:	080046af 	.word	0x080046af
 800441c:	080046af 	.word	0x080046af
 8004420:	080046af 	.word	0x080046af
 8004424:	080046af 	.word	0x080046af
 8004428:	080046af 	.word	0x080046af
 800442c:	08004497 	.word	0x08004497
 8004430:	080046af 	.word	0x080046af
 8004434:	080046af 	.word	0x080046af
 8004438:	080046af 	.word	0x080046af
 800443c:	080046af 	.word	0x080046af
 8004440:	080046af 	.word	0x080046af
 8004444:	080046af 	.word	0x080046af
 8004448:	080046af 	.word	0x080046af
 800444c:	0800449d 	.word	0x0800449d
 8004450:	080046af 	.word	0x080046af
 8004454:	080046af 	.word	0x080046af
 8004458:	080046af 	.word	0x080046af
 800445c:	080046af 	.word	0x080046af
 8004460:	080046af 	.word	0x080046af
 8004464:	080046af 	.word	0x080046af
 8004468:	080046af 	.word	0x080046af
 800446c:	080044a3 	.word	0x080044a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004470:	4b94      	ldr	r3, [pc, #592]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800447c:	4b91      	ldr	r3, [pc, #580]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	08db      	lsrs	r3, r3, #3
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	4a90      	ldr	r2, [pc, #576]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
 800448c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800448e:	e111      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004490:	4b8d      	ldr	r3, [pc, #564]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004492:	61bb      	str	r3, [r7, #24]
      break;
 8004494:	e10e      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004496:	4b8d      	ldr	r3, [pc, #564]	; (80046cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004498:	61bb      	str	r3, [r7, #24]
      break;
 800449a:	e10b      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800449c:	4b8c      	ldr	r3, [pc, #560]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800449e:	61bb      	str	r3, [r7, #24]
      break;
 80044a0:	e108      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044a2:	4b88      	ldr	r3, [pc, #544]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044ac:	4b85      	ldr	r3, [pc, #532]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044b8:	4b82      	ldr	r3, [pc, #520]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044c2:	4b80      	ldr	r3, [pc, #512]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	08db      	lsrs	r3, r3, #3
 80044c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80e1 	beq.w	80046a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	f000 8083 	beq.w	80045f4 <HAL_RCC_GetSysClockFreq+0x204>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	f200 80a1 	bhi.w	8004638 <HAL_RCC_GetSysClockFreq+0x248>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x114>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d056      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004502:	e099      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004504:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02d      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004510:	4b6c      	ldr	r3, [pc, #432]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	4a6b      	ldr	r2, [pc, #428]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453a:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454a:	ed97 6a02 	vldr	s12, [r7, #8]
 800454e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800455e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004566:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800456a:	e087      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457e:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004592:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ae:	e065      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80045be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c2:	4b40      	ldr	r3, [pc, #256]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045f2:	e043      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004606:	4b2f      	ldr	r3, [pc, #188]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004616:	ed97 6a02 	vldr	s12, [r7, #8]
 800461a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800461e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004632:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004636:	e021      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465a:	ed97 6a02 	vldr	s12, [r7, #8]
 800465e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800467a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	0a5b      	lsrs	r3, r3, #9
 8004682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004686:	3301      	adds	r3, #1
 8004688:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004694:	edd7 6a07 	vldr	s13, [r7, #28]
 8004698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800469c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a0:	ee17 3a90 	vmov	r3, s15
 80046a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046a6:	e005      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
      break;
 80046ac:	e002      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046b0:	61bb      	str	r3, [r7, #24]
      break;
 80046b2:	bf00      	nop
  }

  return sysclockfreq;
 80046b4:	69bb      	ldr	r3, [r7, #24]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3724      	adds	r7, #36	; 0x24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	58024400 	.word	0x58024400
 80046c8:	03d09000 	.word	0x03d09000
 80046cc:	003d0900 	.word	0x003d0900
 80046d0:	017d7840 	.word	0x017d7840
 80046d4:	46000000 	.word	0x46000000
 80046d8:	4c742400 	.word	0x4c742400
 80046dc:	4a742400 	.word	0x4a742400
 80046e0:	4bbebc20 	.word	0x4bbebc20

080046e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e049      	b.n	800478a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc f9bc 	bl	8000a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f000 fee2 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e049      	b.n	8004838 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f841 	bl	8004840 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f000 fe8b 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_TIM_OC_Start+0x24>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	bf14      	ite	ne
 8004870:	2301      	movne	r3, #1
 8004872:	2300      	moveq	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e03c      	b.n	80048f2 <HAL_TIM_OC_Start+0x9e>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b04      	cmp	r3, #4
 800487c:	d109      	bne.n	8004892 <HAL_TIM_OC_Start+0x3e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	bf14      	ite	ne
 800488a:	2301      	movne	r3, #1
 800488c:	2300      	moveq	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	e02f      	b.n	80048f2 <HAL_TIM_OC_Start+0x9e>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d109      	bne.n	80048ac <HAL_TIM_OC_Start+0x58>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e022      	b.n	80048f2 <HAL_TIM_OC_Start+0x9e>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d109      	bne.n	80048c6 <HAL_TIM_OC_Start+0x72>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	e015      	b.n	80048f2 <HAL_TIM_OC_Start+0x9e>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d109      	bne.n	80048e0 <HAL_TIM_OC_Start+0x8c>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e008      	b.n	80048f2 <HAL_TIM_OC_Start+0x9e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0a1      	b.n	8004a3e <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <HAL_TIM_OC_Start+0xb6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004908:	e023      	b.n	8004952 <HAL_TIM_OC_Start+0xfe>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d104      	bne.n	800491a <HAL_TIM_OC_Start+0xc6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004918:	e01b      	b.n	8004952 <HAL_TIM_OC_Start+0xfe>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d104      	bne.n	800492a <HAL_TIM_OC_Start+0xd6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004928:	e013      	b.n	8004952 <HAL_TIM_OC_Start+0xfe>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b0c      	cmp	r3, #12
 800492e:	d104      	bne.n	800493a <HAL_TIM_OC_Start+0xe6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004938:	e00b      	b.n	8004952 <HAL_TIM_OC_Start+0xfe>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b10      	cmp	r3, #16
 800493e:	d104      	bne.n	800494a <HAL_TIM_OC_Start+0xf6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004948:	e003      	b.n	8004952 <HAL_TIM_OC_Start+0xfe>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2201      	movs	r2, #1
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f001 fa9f 	bl	8005e9e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a38      	ldr	r2, [pc, #224]	; (8004a48 <HAL_TIM_OC_Start+0x1f4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <HAL_TIM_OC_Start+0x13e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a37      	ldr	r2, [pc, #220]	; (8004a4c <HAL_TIM_OC_Start+0x1f8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00e      	beq.n	8004992 <HAL_TIM_OC_Start+0x13e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a35      	ldr	r2, [pc, #212]	; (8004a50 <HAL_TIM_OC_Start+0x1fc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d009      	beq.n	8004992 <HAL_TIM_OC_Start+0x13e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a34      	ldr	r2, [pc, #208]	; (8004a54 <HAL_TIM_OC_Start+0x200>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d004      	beq.n	8004992 <HAL_TIM_OC_Start+0x13e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a32      	ldr	r2, [pc, #200]	; (8004a58 <HAL_TIM_OC_Start+0x204>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d101      	bne.n	8004996 <HAL_TIM_OC_Start+0x142>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_TIM_OC_Start+0x144>
 8004996:	2300      	movs	r3, #0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <HAL_TIM_OC_Start+0x1f4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <HAL_TIM_OC_Start+0x1a8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049be:	d01d      	beq.n	80049fc <HAL_TIM_OC_Start+0x1a8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a25      	ldr	r2, [pc, #148]	; (8004a5c <HAL_TIM_OC_Start+0x208>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <HAL_TIM_OC_Start+0x1a8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a24      	ldr	r2, [pc, #144]	; (8004a60 <HAL_TIM_OC_Start+0x20c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <HAL_TIM_OC_Start+0x1a8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <HAL_TIM_OC_Start+0x210>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <HAL_TIM_OC_Start+0x1a8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1a      	ldr	r2, [pc, #104]	; (8004a4c <HAL_TIM_OC_Start+0x1f8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_TIM_OC_Start+0x1a8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1e      	ldr	r2, [pc, #120]	; (8004a68 <HAL_TIM_OC_Start+0x214>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_TIM_OC_Start+0x1a8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <HAL_TIM_OC_Start+0x1fc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d115      	bne.n	8004a28 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	4b1a      	ldr	r3, [pc, #104]	; (8004a6c <HAL_TIM_OC_Start+0x218>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d015      	beq.n	8004a3a <HAL_TIM_OC_Start+0x1e6>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d011      	beq.n	8004a3a <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	e008      	b.n	8004a3a <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e000      	b.n	8004a3c <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40010400 	.word	0x40010400
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40000c00 	.word	0x40000c00
 8004a68:	40001800 	.word	0x40001800
 8004a6c:	00010007 	.word	0x00010007

08004a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e049      	b.n	8004b16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fb ff98 	bl	80009cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f000 fd1c 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e03c      	b.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d109      	bne.n	8004b66 <HAL_TIM_PWM_Start_DMA+0x46>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e02f      	b.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d109      	bne.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x60>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e022      	b.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d109      	bne.n	8004b9a <HAL_TIM_PWM_Start_DMA+0x7a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	bf0c      	ite	eq
 8004b92:	2301      	moveq	r3, #1
 8004b94:	2300      	movne	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	e015      	b.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d109      	bne.n	8004bb4 <HAL_TIM_PWM_Start_DMA+0x94>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2300      	movne	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	e008      	b.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e1b0      	b.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e03c      	b.n	8004c62 <HAL_TIM_PWM_Start_DMA+0x142>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d109      	bne.n	8004c02 <HAL_TIM_PWM_Start_DMA+0xe2>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	e02f      	b.n	8004c62 <HAL_TIM_PWM_Start_DMA+0x142>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d109      	bne.n	8004c1c <HAL_TIM_PWM_Start_DMA+0xfc>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e022      	b.n	8004c62 <HAL_TIM_PWM_Start_DMA+0x142>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d109      	bne.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x116>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e015      	b.n	8004c62 <HAL_TIM_PWM_Start_DMA+0x142>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d109      	bne.n	8004c50 <HAL_TIM_PWM_Start_DMA+0x130>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e008      	b.n	8004c62 <HAL_TIM_PWM_Start_DMA+0x142>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d034      	beq.n	8004cd0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x152>
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e15c      	b.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x166>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c84:	e026      	b.n	8004cd4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIM_PWM_Start_DMA+0x176>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c94:	e01e      	b.n	8004cd4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PWM_Start_DMA+0x186>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca4:	e016      	b.n	8004cd4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b0c      	cmp	r3, #12
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x196>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cb4:	e00e      	b.n	8004cd4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc4:	e006      	b.n	8004cd4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cce:	e001      	b.n	8004cd4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e12d      	b.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	f200 80ae 	bhi.w	8004e38 <HAL_TIM_PWM_Start_DMA+0x318>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d19 	.word	0x08004d19
 8004ce8:	08004e39 	.word	0x08004e39
 8004cec:	08004e39 	.word	0x08004e39
 8004cf0:	08004e39 	.word	0x08004e39
 8004cf4:	08004d61 	.word	0x08004d61
 8004cf8:	08004e39 	.word	0x08004e39
 8004cfc:	08004e39 	.word	0x08004e39
 8004d00:	08004e39 	.word	0x08004e39
 8004d04:	08004da9 	.word	0x08004da9
 8004d08:	08004e39 	.word	0x08004e39
 8004d0c:	08004e39 	.word	0x08004e39
 8004d10:	08004e39 	.word	0x08004e39
 8004d14:	08004df1 	.word	0x08004df1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	4a86      	ldr	r2, [pc, #536]	; (8004f38 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	4a85      	ldr	r2, [pc, #532]	; (8004f3c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	4a84      	ldr	r2, [pc, #528]	; (8004f40 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004d2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3334      	adds	r3, #52	; 0x34
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	f7fc fde0 	bl	8001904 <HAL_DMA_Start_IT>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0f0      	b.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5c:	60da      	str	r2, [r3, #12]
      break;
 8004d5e:	e06e      	b.n	8004e3e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	4a74      	ldr	r2, [pc, #464]	; (8004f38 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004d66:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	4a73      	ldr	r2, [pc, #460]	; (8004f3c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	4a72      	ldr	r2, [pc, #456]	; (8004f40 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004d76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3338      	adds	r3, #56	; 0x38
 8004d84:	461a      	mov	r2, r3
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	f7fc fdbc 	bl	8001904 <HAL_DMA_Start_IT>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0cc      	b.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004da4:	60da      	str	r2, [r3, #12]
      break;
 8004da6:	e04a      	b.n	8004e3e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	4a62      	ldr	r2, [pc, #392]	; (8004f38 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004dae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a61      	ldr	r2, [pc, #388]	; (8004f3c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	4a60      	ldr	r2, [pc, #384]	; (8004f40 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004dbe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	333c      	adds	r3, #60	; 0x3c
 8004dcc:	461a      	mov	r2, r3
 8004dce:	887b      	ldrh	r3, [r7, #2]
 8004dd0:	f7fc fd98 	bl	8001904 <HAL_DMA_Start_IT>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e0a8      	b.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dec:	60da      	str	r2, [r3, #12]
      break;
 8004dee:	e026      	b.n	8004e3e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	4a50      	ldr	r2, [pc, #320]	; (8004f38 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004df6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	4a4f      	ldr	r2, [pc, #316]	; (8004f3c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	4a4e      	ldr	r2, [pc, #312]	; (8004f40 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004e06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3340      	adds	r3, #64	; 0x40
 8004e14:	461a      	mov	r2, r3
 8004e16:	887b      	ldrh	r3, [r7, #2]
 8004e18:	f7fc fd74 	bl	8001904 <HAL_DMA_Start_IT>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e084      	b.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e34:	60da      	str	r2, [r3, #12]
      break;
 8004e36:	e002      	b.n	8004e3e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d174      	bne.n	8004f2e <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 f826 	bl	8005e9e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3b      	ldr	r2, [pc, #236]	; (8004f44 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x364>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a39      	ldr	r2, [pc, #228]	; (8004f48 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x364>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x364>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a36      	ldr	r2, [pc, #216]	; (8004f50 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x364>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a35      	ldr	r2, [pc, #212]	; (8004f54 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <HAL_TIM_PWM_Start_DMA+0x368>
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <HAL_TIM_PWM_Start_DMA+0x36a>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a28      	ldr	r2, [pc, #160]	; (8004f44 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d022      	beq.n	8004eee <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d01d      	beq.n	8004eee <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a28      	ldr	r2, [pc, #160]	; (8004f58 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d018      	beq.n	8004eee <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a25      	ldr	r2, [pc, #148]	; (8004f60 <HAL_TIM_PWM_Start_DMA+0x440>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <HAL_TIM_PWM_Start_DMA+0x444>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d115      	bne.n	8004f1a <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <HAL_TIM_PWM_Start_DMA+0x448>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b06      	cmp	r3, #6
 8004efe:	d015      	beq.n	8004f2c <HAL_TIM_PWM_Start_DMA+0x40c>
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f06:	d011      	beq.n	8004f2c <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	e008      	b.n	8004f2c <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e000      	b.n	8004f2e <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	080053db 	.word	0x080053db
 8004f3c:	08005483 	.word	0x08005483
 8004f40:	08005349 	.word	0x08005349
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40010400 	.word	0x40010400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00
 8004f64:	40001800 	.word	0x40001800
 8004f68:	00010007 	.word	0x00010007

08004f6c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e066      	b.n	8005058 <HAL_TIM_OC_ConfigChannel+0xec>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b14      	cmp	r3, #20
 8004f96:	d857      	bhi.n	8005048 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004ff5 	.word	0x08004ff5
 8004fa4:	08005049 	.word	0x08005049
 8004fa8:	08005049 	.word	0x08005049
 8004fac:	08005049 	.word	0x08005049
 8004fb0:	08005003 	.word	0x08005003
 8004fb4:	08005049 	.word	0x08005049
 8004fb8:	08005049 	.word	0x08005049
 8004fbc:	08005049 	.word	0x08005049
 8004fc0:	08005011 	.word	0x08005011
 8004fc4:	08005049 	.word	0x08005049
 8004fc8:	08005049 	.word	0x08005049
 8004fcc:	08005049 	.word	0x08005049
 8004fd0:	0800501f 	.word	0x0800501f
 8004fd4:	08005049 	.word	0x08005049
 8004fd8:	08005049 	.word	0x08005049
 8004fdc:	08005049 	.word	0x08005049
 8004fe0:	0800502d 	.word	0x0800502d
 8004fe4:	08005049 	.word	0x08005049
 8004fe8:	08005049 	.word	0x08005049
 8004fec:	08005049 	.word	0x08005049
 8004ff0:	0800503b 	.word	0x0800503b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fb10 	bl	8005620 <TIM_OC1_SetConfig>
      break;
 8005000:	e025      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fb99 	bl	8005740 <TIM_OC2_SetConfig>
      break;
 800500e:	e01e      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fc1c 	bl	8005854 <TIM_OC3_SetConfig>
      break;
 800501c:	e017      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fc9d 	bl	8005964 <TIM_OC4_SetConfig>
      break;
 800502a:	e010      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fd00 	bl	8005a38 <TIM_OC5_SetConfig>
      break;
 8005038:	e009      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fd5d 	bl	8005b00 <TIM_OC6_SetConfig>
      break;
 8005046:	e002      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800507a:	2302      	movs	r3, #2
 800507c:	e0ff      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b14      	cmp	r3, #20
 800508a:	f200 80f0 	bhi.w	800526e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050e9 	.word	0x080050e9
 8005098:	0800526f 	.word	0x0800526f
 800509c:	0800526f 	.word	0x0800526f
 80050a0:	0800526f 	.word	0x0800526f
 80050a4:	08005129 	.word	0x08005129
 80050a8:	0800526f 	.word	0x0800526f
 80050ac:	0800526f 	.word	0x0800526f
 80050b0:	0800526f 	.word	0x0800526f
 80050b4:	0800516b 	.word	0x0800516b
 80050b8:	0800526f 	.word	0x0800526f
 80050bc:	0800526f 	.word	0x0800526f
 80050c0:	0800526f 	.word	0x0800526f
 80050c4:	080051ab 	.word	0x080051ab
 80050c8:	0800526f 	.word	0x0800526f
 80050cc:	0800526f 	.word	0x0800526f
 80050d0:	0800526f 	.word	0x0800526f
 80050d4:	080051ed 	.word	0x080051ed
 80050d8:	0800526f 	.word	0x0800526f
 80050dc:	0800526f 	.word	0x0800526f
 80050e0:	0800526f 	.word	0x0800526f
 80050e4:	0800522d 	.word	0x0800522d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fa96 	bl	8005620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0208 	orr.w	r2, r2, #8
 8005102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0204 	bic.w	r2, r2, #4
 8005112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	619a      	str	r2, [r3, #24]
      break;
 8005126:	e0a5      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fb06 	bl	8005740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	619a      	str	r2, [r3, #24]
      break;
 8005168:	e084      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fb6f 	bl	8005854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0208 	orr.w	r2, r2, #8
 8005184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0204 	bic.w	r2, r2, #4
 8005194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69d9      	ldr	r1, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	61da      	str	r2, [r3, #28]
      break;
 80051a8:	e064      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fbd7 	bl	8005964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69d9      	ldr	r1, [r3, #28]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	021a      	lsls	r2, r3, #8
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	61da      	str	r2, [r3, #28]
      break;
 80051ea:	e043      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fc20 	bl	8005a38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0208 	orr.w	r2, r2, #8
 8005206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0204 	bic.w	r2, r2, #4
 8005216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800522a:	e023      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fc64 	bl	8005b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005246:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800526c:	e002      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
      break;
 8005272:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop

08005288 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_TIM_SlaveConfigSynchro+0x18>
 800529c:	2302      	movs	r3, #2
 800529e:	e031      	b.n	8005304 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fc8a 	bl	8005bcc <TIM_SlaveTimer_SetConfig>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e018      	b.n	8005304 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052e0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052f0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d107      	bne.n	8005370 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800536e:	e02a      	b.n	80053c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d107      	bne.n	800538a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2202      	movs	r2, #2
 800537e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005388:	e01d      	b.n	80053c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d107      	bne.n	80053a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2204      	movs	r2, #4
 8005398:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a2:	e010      	b.n	80053c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d107      	bne.n	80053be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2208      	movs	r2, #8
 80053b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053bc:	e003      	b.n	80053c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff ffb4 	bl	8005334 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	771a      	strb	r2, [r3, #28]
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d10b      	bne.n	800540a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d136      	bne.n	800546e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005408:	e031      	b.n	800546e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d10b      	bne.n	800542c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2202      	movs	r2, #2
 8005418:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d125      	bne.n	800546e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800542a:	e020      	b.n	800546e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d10b      	bne.n	800544e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2204      	movs	r2, #4
 800543a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d114      	bne.n	800546e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544c:	e00f      	b.n	800546e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d10a      	bne.n	800546e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2208      	movs	r2, #8
 800545c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff ff4c 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	771a      	strb	r2, [r3, #28]
}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d103      	bne.n	80054a2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	771a      	strb	r2, [r3, #28]
 80054a0:	e019      	b.n	80054d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d103      	bne.n	80054b4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2202      	movs	r2, #2
 80054b0:	771a      	strb	r2, [r3, #28]
 80054b2:	e010      	b.n	80054d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d103      	bne.n	80054c6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2204      	movs	r2, #4
 80054c2:	771a      	strb	r2, [r3, #28]
 80054c4:	e007      	b.n	80054d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d102      	bne.n	80054d6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2208      	movs	r2, #8
 80054d4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff ff22 	bl	8005320 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	771a      	strb	r2, [r3, #28]
}
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a40      	ldr	r2, [pc, #256]	; (8005600 <TIM_Base_SetConfig+0x114>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d00f      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a3d      	ldr	r2, [pc, #244]	; (8005604 <TIM_Base_SetConfig+0x118>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3c      	ldr	r2, [pc, #240]	; (8005608 <TIM_Base_SetConfig+0x11c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3b      	ldr	r2, [pc, #236]	; (800560c <TIM_Base_SetConfig+0x120>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a3a      	ldr	r2, [pc, #232]	; (8005610 <TIM_Base_SetConfig+0x124>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d108      	bne.n	800553e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2f      	ldr	r2, [pc, #188]	; (8005600 <TIM_Base_SetConfig+0x114>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01f      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554c:	d01b      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2c      	ldr	r2, [pc, #176]	; (8005604 <TIM_Base_SetConfig+0x118>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d017      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2b      	ldr	r2, [pc, #172]	; (8005608 <TIM_Base_SetConfig+0x11c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2a      	ldr	r2, [pc, #168]	; (800560c <TIM_Base_SetConfig+0x120>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a29      	ldr	r2, [pc, #164]	; (8005610 <TIM_Base_SetConfig+0x124>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a28      	ldr	r2, [pc, #160]	; (8005614 <TIM_Base_SetConfig+0x128>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a27      	ldr	r2, [pc, #156]	; (8005618 <TIM_Base_SetConfig+0x12c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a26      	ldr	r2, [pc, #152]	; (800561c <TIM_Base_SetConfig+0x130>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a10      	ldr	r2, [pc, #64]	; (8005600 <TIM_Base_SetConfig+0x114>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00f      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a12      	ldr	r2, [pc, #72]	; (8005610 <TIM_Base_SetConfig+0x124>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a11      	ldr	r2, [pc, #68]	; (8005614 <TIM_Base_SetConfig+0x128>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a10      	ldr	r2, [pc, #64]	; (8005618 <TIM_Base_SetConfig+0x12c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a0f      	ldr	r2, [pc, #60]	; (800561c <TIM_Base_SetConfig+0x130>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d103      	bne.n	80055ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	615a      	str	r2, [r3, #20]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40010000 	.word	0x40010000
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800
 800560c:	40000c00 	.word	0x40000c00
 8005610:	40010400 	.word	0x40010400
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4b37      	ldr	r3, [pc, #220]	; (8005728 <TIM_OC1_SetConfig+0x108>)
 800564c:	4013      	ands	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 0302 	bic.w	r3, r3, #2
 8005668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a2d      	ldr	r2, [pc, #180]	; (800572c <TIM_OC1_SetConfig+0x10c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00f      	beq.n	800569c <TIM_OC1_SetConfig+0x7c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a2c      	ldr	r2, [pc, #176]	; (8005730 <TIM_OC1_SetConfig+0x110>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_OC1_SetConfig+0x7c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <TIM_OC1_SetConfig+0x114>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_OC1_SetConfig+0x7c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <TIM_OC1_SetConfig+0x118>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC1_SetConfig+0x7c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a29      	ldr	r2, [pc, #164]	; (800573c <TIM_OC1_SetConfig+0x11c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10c      	bne.n	80056b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0308 	bic.w	r3, r3, #8
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f023 0304 	bic.w	r3, r3, #4
 80056b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <TIM_OC1_SetConfig+0x10c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00f      	beq.n	80056de <TIM_OC1_SetConfig+0xbe>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <TIM_OC1_SetConfig+0x110>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00b      	beq.n	80056de <TIM_OC1_SetConfig+0xbe>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <TIM_OC1_SetConfig+0x114>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <TIM_OC1_SetConfig+0xbe>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <TIM_OC1_SetConfig+0x118>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC1_SetConfig+0xbe>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a18      	ldr	r2, [pc, #96]	; (800573c <TIM_OC1_SetConfig+0x11c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d111      	bne.n	8005702 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	621a      	str	r2, [r3, #32]
}
 800571c:	bf00      	nop
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	fffeff8f 	.word	0xfffeff8f
 800572c:	40010000 	.word	0x40010000
 8005730:	40010400 	.word	0x40010400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800

08005740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0210 	bic.w	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4b34      	ldr	r3, [pc, #208]	; (800583c <TIM_OC2_SetConfig+0xfc>)
 800576c:	4013      	ands	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0320 	bic.w	r3, r3, #32
 800578a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a29      	ldr	r2, [pc, #164]	; (8005840 <TIM_OC2_SetConfig+0x100>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC2_SetConfig+0x68>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a28      	ldr	r2, [pc, #160]	; (8005844 <TIM_OC2_SetConfig+0x104>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10d      	bne.n	80057c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a1e      	ldr	r2, [pc, #120]	; (8005840 <TIM_OC2_SetConfig+0x100>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00f      	beq.n	80057ec <TIM_OC2_SetConfig+0xac>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a1d      	ldr	r2, [pc, #116]	; (8005844 <TIM_OC2_SetConfig+0x104>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_OC2_SetConfig+0xac>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <TIM_OC2_SetConfig+0x108>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_OC2_SetConfig+0xac>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a1b      	ldr	r2, [pc, #108]	; (800584c <TIM_OC2_SetConfig+0x10c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC2_SetConfig+0xac>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <TIM_OC2_SetConfig+0x110>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d113      	bne.n	8005814 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	feff8fff 	.word	0xfeff8fff
 8005840:	40010000 	.word	0x40010000
 8005844:	40010400 	.word	0x40010400
 8005848:	40014000 	.word	0x40014000
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800

08005854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4b33      	ldr	r3, [pc, #204]	; (800594c <TIM_OC3_SetConfig+0xf8>)
 8005880:	4013      	ands	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800589c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a28      	ldr	r2, [pc, #160]	; (8005950 <TIM_OC3_SetConfig+0xfc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_OC3_SetConfig+0x66>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a27      	ldr	r2, [pc, #156]	; (8005954 <TIM_OC3_SetConfig+0x100>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d10d      	bne.n	80058d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1d      	ldr	r2, [pc, #116]	; (8005950 <TIM_OC3_SetConfig+0xfc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00f      	beq.n	80058fe <TIM_OC3_SetConfig+0xaa>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <TIM_OC3_SetConfig+0x100>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00b      	beq.n	80058fe <TIM_OC3_SetConfig+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <TIM_OC3_SetConfig+0x104>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d007      	beq.n	80058fe <TIM_OC3_SetConfig+0xaa>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1a      	ldr	r2, [pc, #104]	; (800595c <TIM_OC3_SetConfig+0x108>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_OC3_SetConfig+0xaa>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a19      	ldr	r2, [pc, #100]	; (8005960 <TIM_OC3_SetConfig+0x10c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d113      	bne.n	8005926 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	fffeff8f 	.word	0xfffeff8f
 8005950:	40010000 	.word	0x40010000
 8005954:	40010400 	.word	0x40010400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800

08005964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4b24      	ldr	r3, [pc, #144]	; (8005a20 <TIM_OC4_SetConfig+0xbc>)
 8005990:	4013      	ands	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	031b      	lsls	r3, r3, #12
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <TIM_OC4_SetConfig+0xc0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00f      	beq.n	80059e4 <TIM_OC4_SetConfig+0x80>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <TIM_OC4_SetConfig+0xc4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <TIM_OC4_SetConfig+0x80>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <TIM_OC4_SetConfig+0xc8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d007      	beq.n	80059e4 <TIM_OC4_SetConfig+0x80>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <TIM_OC4_SetConfig+0xcc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_OC4_SetConfig+0x80>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a15      	ldr	r2, [pc, #84]	; (8005a34 <TIM_OC4_SetConfig+0xd0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d109      	bne.n	80059f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	019b      	lsls	r3, r3, #6
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	feff8fff 	.word	0xfeff8fff
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40010400 	.word	0x40010400
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40014400 	.word	0x40014400
 8005a34:	40014800 	.word	0x40014800

08005a38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <TIM_OC5_SetConfig+0xb0>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	041b      	lsls	r3, r3, #16
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a18      	ldr	r2, [pc, #96]	; (8005aec <TIM_OC5_SetConfig+0xb4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00f      	beq.n	8005aae <TIM_OC5_SetConfig+0x76>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <TIM_OC5_SetConfig+0xb8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00b      	beq.n	8005aae <TIM_OC5_SetConfig+0x76>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a16      	ldr	r2, [pc, #88]	; (8005af4 <TIM_OC5_SetConfig+0xbc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d007      	beq.n	8005aae <TIM_OC5_SetConfig+0x76>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <TIM_OC5_SetConfig+0xc0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d003      	beq.n	8005aae <TIM_OC5_SetConfig+0x76>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a14      	ldr	r2, [pc, #80]	; (8005afc <TIM_OC5_SetConfig+0xc4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d109      	bne.n	8005ac2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	621a      	str	r2, [r3, #32]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	fffeff8f 	.word	0xfffeff8f
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	40014800 	.word	0x40014800

08005b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4b22      	ldr	r3, [pc, #136]	; (8005bb4 <TIM_OC6_SetConfig+0xb4>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	051b      	lsls	r3, r3, #20
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a19      	ldr	r2, [pc, #100]	; (8005bb8 <TIM_OC6_SetConfig+0xb8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00f      	beq.n	8005b78 <TIM_OC6_SetConfig+0x78>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <TIM_OC6_SetConfig+0xbc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_OC6_SetConfig+0x78>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <TIM_OC6_SetConfig+0xc0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_OC6_SetConfig+0x78>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <TIM_OC6_SetConfig+0xc4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC6_SetConfig+0x78>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <TIM_OC6_SetConfig+0xc8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d109      	bne.n	8005b8c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	feff8fff 	.word	0xfeff8fff
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40010400 	.word	0x40010400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800

08005bcc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4b65      	ldr	r3, [pc, #404]	; (8005d7c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4b62      	ldr	r3, [pc, #392]	; (8005d80 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a5c      	ldr	r2, [pc, #368]	; (8005d84 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	f000 80ab 	beq.w	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c1a:	4a5a      	ldr	r2, [pc, #360]	; (8005d84 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	f200 80a4 	bhi.w	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c26:	f000 80a3 	beq.w	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c2e:	f200 809c 	bhi.w	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005c32:	4a55      	ldr	r2, [pc, #340]	; (8005d88 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	f000 809b 	beq.w	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c3a:	4a53      	ldr	r2, [pc, #332]	; (8005d88 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	f200 8094 	bhi.w	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005c42:	4a52      	ldr	r2, [pc, #328]	; (8005d8c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	f000 8093 	beq.w	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c4a:	4a50      	ldr	r2, [pc, #320]	; (8005d8c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	f200 808c 	bhi.w	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005c52:	4a4f      	ldr	r2, [pc, #316]	; (8005d90 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	f000 808b 	beq.w	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c5a:	4a4d      	ldr	r2, [pc, #308]	; (8005d90 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	f200 8084 	bhi.w	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005c62:	4a4c      	ldr	r2, [pc, #304]	; (8005d94 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	f000 8083 	beq.w	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c6a:	4a4a      	ldr	r2, [pc, #296]	; (8005d94 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d87c      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005c70:	4a49      	ldr	r2, [pc, #292]	; (8005d98 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d07c      	beq.n	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c76:	4a48      	ldr	r2, [pc, #288]	; (8005d98 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d876      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005c7c:	4a47      	ldr	r2, [pc, #284]	; (8005d9c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d076      	beq.n	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c82:	4a46      	ldr	r2, [pc, #280]	; (8005d9c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d870      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005c88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c8c:	d070      	beq.n	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c8e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c92:	d86a      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c98:	d06a      	beq.n	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d864      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005ca0:	2b70      	cmp	r3, #112	; 0x70
 8005ca2:	d01a      	beq.n	8005cda <TIM_SlaveTimer_SetConfig+0x10e>
 8005ca4:	2b70      	cmp	r3, #112	; 0x70
 8005ca6:	d860      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005ca8:	2b60      	cmp	r3, #96	; 0x60
 8005caa:	d054      	beq.n	8005d56 <TIM_SlaveTimer_SetConfig+0x18a>
 8005cac:	2b60      	cmp	r3, #96	; 0x60
 8005cae:	d85c      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005cb0:	2b50      	cmp	r3, #80	; 0x50
 8005cb2:	d046      	beq.n	8005d42 <TIM_SlaveTimer_SetConfig+0x176>
 8005cb4:	2b50      	cmp	r3, #80	; 0x50
 8005cb6:	d858      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	d019      	beq.n	8005cf0 <TIM_SlaveTimer_SetConfig+0x124>
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d854      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005cc0:	2b30      	cmp	r3, #48	; 0x30
 8005cc2:	d055      	beq.n	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005cc4:	2b30      	cmp	r3, #48	; 0x30
 8005cc6:	d850      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d051      	beq.n	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d84c      	bhi.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d04d      	beq.n	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d04b      	beq.n	8005d70 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005cd8:	e047      	b.n	8005d6a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005cea:	f000 f8b8 	bl	8005e5e <TIM_ETR_SetConfig>
      break;
 8005cee:	e040      	b.n	8005d72 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b05      	cmp	r3, #5
 8005cf6:	d101      	bne.n	8005cfc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e03b      	b.n	8005d74 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6a1a      	ldr	r2, [r3, #32]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d22:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	621a      	str	r2, [r3, #32]
      break;
 8005d40:	e017      	b.n	8005d72 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 f826 	bl	8005da0 <TIM_TI1_ConfigInputStage>
      break;
 8005d54:	e00d      	b.n	8005d72 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d62:	461a      	mov	r2, r3
 8005d64:	f000 f84b 	bl	8005dfe <TIM_TI2_ConfigInputStage>
      break;
 8005d68:	e003      	b.n	8005d72 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d6e:	e000      	b.n	8005d72 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8005d70:	bf00      	nop
  }

  return status;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	ffcfff8f 	.word	0xffcfff8f
 8005d80:	fffefff8 	.word	0xfffefff8
 8005d84:	00200010 	.word	0x00200010
 8005d88:	00100070 	.word	0x00100070
 8005d8c:	00100060 	.word	0x00100060
 8005d90:	00100050 	.word	0x00100050
 8005d94:	00100040 	.word	0x00100040
 8005d98:	00100030 	.word	0x00100030
 8005d9c:	00100020 	.word	0x00100020

08005da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f023 0201 	bic.w	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 030a 	bic.w	r3, r3, #10
 8005ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b087      	sub	sp, #28
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f023 0210 	bic.w	r2, r3, #16
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	031b      	lsls	r3, r3, #12
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b087      	sub	sp, #28
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	021a      	lsls	r2, r3, #8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	609a      	str	r2, [r3, #8]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b087      	sub	sp, #28
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f003 031f 	and.w	r3, r3, #31
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a1a      	ldr	r2, [r3, #32]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	401a      	ands	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1a      	ldr	r2, [r3, #32]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e06d      	b.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a30      	ldr	r2, [pc, #192]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a2f      	ldr	r2, [pc, #188]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d108      	bne.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d01d      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1d      	ldr	r2, [pc, #116]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a15      	ldr	r2, [pc, #84]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a15      	ldr	r2, [pc, #84]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10c      	bne.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40010400 	.word	0x40010400
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40001800 	.word	0x40001800
 8006000:	40014000 	.word	0x40014000

08006004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800601c:	2302      	movs	r3, #2
 800601e:	e065      	b.n	80060ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a16      	ldr	r2, [pc, #88]	; (80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a14      	ldr	r2, [pc, #80]	; (80060fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d115      	bne.n	80060da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	051b      	lsls	r3, r3, #20
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40010400 	.word	0x40010400

08006100 <memset>:
 8006100:	4402      	add	r2, r0
 8006102:	4603      	mov	r3, r0
 8006104:	4293      	cmp	r3, r2
 8006106:	d100      	bne.n	800610a <memset+0xa>
 8006108:	4770      	bx	lr
 800610a:	f803 1b01 	strb.w	r1, [r3], #1
 800610e:	e7f9      	b.n	8006104 <memset+0x4>

08006110 <__libc_init_array>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4d0d      	ldr	r5, [pc, #52]	; (8006148 <__libc_init_array+0x38>)
 8006114:	4c0d      	ldr	r4, [pc, #52]	; (800614c <__libc_init_array+0x3c>)
 8006116:	1b64      	subs	r4, r4, r5
 8006118:	10a4      	asrs	r4, r4, #2
 800611a:	2600      	movs	r6, #0
 800611c:	42a6      	cmp	r6, r4
 800611e:	d109      	bne.n	8006134 <__libc_init_array+0x24>
 8006120:	4d0b      	ldr	r5, [pc, #44]	; (8006150 <__libc_init_array+0x40>)
 8006122:	4c0c      	ldr	r4, [pc, #48]	; (8006154 <__libc_init_array+0x44>)
 8006124:	f000 f818 	bl	8006158 <_init>
 8006128:	1b64      	subs	r4, r4, r5
 800612a:	10a4      	asrs	r4, r4, #2
 800612c:	2600      	movs	r6, #0
 800612e:	42a6      	cmp	r6, r4
 8006130:	d105      	bne.n	800613e <__libc_init_array+0x2e>
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	f855 3b04 	ldr.w	r3, [r5], #4
 8006138:	4798      	blx	r3
 800613a:	3601      	adds	r6, #1
 800613c:	e7ee      	b.n	800611c <__libc_init_array+0xc>
 800613e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006142:	4798      	blx	r3
 8006144:	3601      	adds	r6, #1
 8006146:	e7f2      	b.n	800612e <__libc_init_array+0x1e>
 8006148:	08006188 	.word	0x08006188
 800614c:	08006188 	.word	0x08006188
 8006150:	08006188 	.word	0x08006188
 8006154:	0800618c 	.word	0x0800618c

08006158 <_init>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr

08006164 <_fini>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr
