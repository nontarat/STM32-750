
bt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000982c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08009acc  08009acc  0000aacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009cec  08009cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009cf4  08009cf4  0000acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009cf8  08009cf8  0000acf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08009cfc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003fc  2400006c  08009d68  0000b06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000468  08009d68  0000b468  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016068  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027ec  00000000  00000000  00021102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001140  00000000  00000000  000238f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d83  00000000  00000000  00024a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038406  00000000  00000000  000257b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017bb7  00000000  00000000  0005dbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001667ff  00000000  00000000  00075770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dbf6f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005374  00000000  00000000  001dbfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000003a  00000000  00000000  001e1328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009ab4 	.word	0x08009ab4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08009ab4 	.word	0x08009ab4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SetRGB>:
    memset(Data_UART7, 0, sizeof(Data_UART7));

}*/

void SetRGB(uint8_t red, uint8_t green, uint8_t blue)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	460b      	mov	r3, r1
 800067c:	71bb      	strb	r3, [r7, #6]
 800067e:	4613      	mov	r3, r2
 8000680:	717b      	strb	r3, [r7, #5]
	/*
	 *    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  	  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  	  	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
	 */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, red);
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <SetRGB+0x38>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, green);
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <SetRGB+0x3c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	79ba      	ldrb	r2, [r7, #6]
 8000690:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, blue);
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <SetRGB+0x40>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	797a      	ldrb	r2, [r7, #5]
 8000698:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	24000088 	.word	0x24000088
 80006ac:	240000d4 	.word	0x240000d4
 80006b0:	24000120 	.word	0x24000120

080006b4 <ParseAndSetRGB>:

void ParseAndSetRGB(uint8_t *data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    char *token;
    uint8_t rgb[3];
    int i = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]

    token = strtok((char *)data, ",");
 80006c0:	4914      	ldr	r1, [pc, #80]	@ (8000714 <ParseAndSetRGB+0x60>)
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f008 fb08 	bl	8008cd8 <strtok>
 80006c8:	6178      	str	r0, [r7, #20]
    while (token != NULL && i < 3)
 80006ca:	e010      	b.n	80006ee <ParseAndSetRGB+0x3a>
    {
        rgb[i++] = atoi(token);
 80006cc:	6978      	ldr	r0, [r7, #20]
 80006ce:	f008 f96d 	bl	80089ac <atoi>
 80006d2:	4601      	mov	r1, r0
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	613a      	str	r2, [r7, #16]
 80006da:	b2ca      	uxtb	r2, r1
 80006dc:	3318      	adds	r3, #24
 80006de:	443b      	add	r3, r7
 80006e0:	f803 2c0c 	strb.w	r2, [r3, #-12]
        token = strtok(NULL, ",");
 80006e4:	490b      	ldr	r1, [pc, #44]	@ (8000714 <ParseAndSetRGB+0x60>)
 80006e6:	2000      	movs	r0, #0
 80006e8:	f008 faf6 	bl	8008cd8 <strtok>
 80006ec:	6178      	str	r0, [r7, #20]
    while (token != NULL && i < 3)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <ParseAndSetRGB+0x46>
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	dde8      	ble.n	80006cc <ParseAndSetRGB+0x18>
    }

    if (i == 3) // Ensure we have all three RGB values
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d105      	bne.n	800070c <ParseAndSetRGB+0x58>
    {
        SetRGB(rgb[0], rgb[1], rgb[2]);
 8000700:	7b3b      	ldrb	r3, [r7, #12]
 8000702:	7b79      	ldrb	r1, [r7, #13]
 8000704:	7bba      	ldrb	r2, [r7, #14]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffb2 	bl	8000670 <SetRGB>
    }
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	08009acc 	.word	0x08009acc

08000718 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART7) // UART7 connection with Bluetooth
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0c      	ldr	r2, [pc, #48]	@ (800075c <HAL_UARTEx_RxEventCallback+0x44>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d108      	bne.n	8000740 <HAL_UARTEx_RxEventCallback+0x28>
    {
        Data_UART7[Size] = '\0'; // Null-terminate the received string
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	4a0b      	ldr	r2, [pc, #44]	@ (8000760 <HAL_UARTEx_RxEventCallback+0x48>)
 8000732:	2100      	movs	r1, #0
 8000734:	54d1      	strb	r1, [r2, r3]

        // Continue receiving data in interrupt mode
        HAL_UARTEx_ReceiveToIdle_IT(&huart7, Data_UART7 , BUFFER_SIZE );
 8000736:	2240      	movs	r2, #64	@ 0x40
 8000738:	4909      	ldr	r1, [pc, #36]	@ (8000760 <HAL_UARTEx_RxEventCallback+0x48>)
 800073a:	480a      	ldr	r0, [pc, #40]	@ (8000764 <HAL_UARTEx_RxEventCallback+0x4c>)
 800073c:	f008 f897 	bl	800886e <HAL_UARTEx_ReceiveToIdle_IT>
    }

    if (huart->Instance == USART1) // UART7 connection with Bluetooth
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <HAL_UARTEx_RxEventCallback+0x50>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d104      	bne.n	8000754 <HAL_UARTEx_RxEventCallback+0x3c>
    {

        // Continue receiving data in interrupt mode
        HAL_UARTEx_ReceiveToIdle_IT(&huart1, Data_USART1 , BUFFER_SIZE );
 800074a:	2240      	movs	r2, #64	@ 0x40
 800074c:	4907      	ldr	r1, [pc, #28]	@ (800076c <HAL_UARTEx_RxEventCallback+0x54>)
 800074e:	4808      	ldr	r0, [pc, #32]	@ (8000770 <HAL_UARTEx_RxEventCallback+0x58>)
 8000750:	f008 f88d 	bl	800886e <HAL_UARTEx_ReceiveToIdle_IT>
    }

}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40007800 	.word	0x40007800
 8000760:	24000294 	.word	0x24000294
 8000764:	2400016c 	.word	0x2400016c
 8000768:	40011000 	.word	0x40011000
 800076c:	240002d4 	.word	0x240002d4
 8000770:	24000200 	.word	0x24000200

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f000 ff26 	bl	80015c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f834 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000780:	f000 faa2 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000784:	f000 fa54 	bl	8000c30 <MX_USART1_UART_Init>
  MX_UART7_Init();
 8000788:	f000 fa06 	bl	8000b98 <MX_UART7_Init>
  MX_TIM1_Init();
 800078c:	f000 f896 	bl	80008bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000790:	f000 f922 	bl	80009d8 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000794:	f000 f97a 	bl	8000a8c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */


  HAL_UARTEx_ReceiveToIdle_IT(&huart1, Data_USART1, BUFFER_SIZE);
 8000798:	2240      	movs	r2, #64	@ 0x40
 800079a:	490c      	ldr	r1, [pc, #48]	@ (80007cc <main+0x58>)
 800079c:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <main+0x5c>)
 800079e:	f008 f866 	bl	800886e <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart7, Data_UART7, BUFFER_SIZE);
 80007a2:	2240      	movs	r2, #64	@ 0x40
 80007a4:	490b      	ldr	r1, [pc, #44]	@ (80007d4 <main+0x60>)
 80007a6:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <main+0x64>)
 80007a8:	f008 f861 	bl	800886e <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007ac:	2100      	movs	r1, #0
 80007ae:	480b      	ldr	r0, [pc, #44]	@ (80007dc <main+0x68>)
 80007b0:	f004 fe8a 	bl	80054c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007b4:	2100      	movs	r1, #0
 80007b6:	480a      	ldr	r0, [pc, #40]	@ (80007e0 <main+0x6c>)
 80007b8:	f004 fe86 	bl	80054c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80007bc:	2104      	movs	r1, #4
 80007be:	4809      	ldr	r0, [pc, #36]	@ (80007e4 <main+0x70>)
 80007c0:	f004 fe82 	bl	80054c8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      ParseAndSetRGB(Data_UART7);
 80007c4:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <main+0x60>)
 80007c6:	f7ff ff75 	bl	80006b4 <ParseAndSetRGB>
 80007ca:	e7fb      	b.n	80007c4 <main+0x50>
 80007cc:	240002d4 	.word	0x240002d4
 80007d0:	24000200 	.word	0x24000200
 80007d4:	24000294 	.word	0x24000294
 80007d8:	2400016c 	.word	0x2400016c
 80007dc:	24000088 	.word	0x24000088
 80007e0:	240000d4 	.word	0x240000d4
 80007e4:	24000120 	.word	0x24000120

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09c      	sub	sp, #112	@ 0x70
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f2:	224c      	movs	r2, #76	@ 0x4c
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f008 fa65 	bl	8008cc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2220      	movs	r2, #32
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f008 fa5f 	bl	8008cc6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000808:	2002      	movs	r0, #2
 800080a:	f001 ffb9 	bl	8002780 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <SystemClock_Config+0xcc>)
 8000814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000816:	4a27      	ldr	r2, [pc, #156]	@ (80008b4 <SystemClock_Config+0xcc>)
 8000818:	f023 0301 	bic.w	r3, r3, #1
 800081c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800081e:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <SystemClock_Config+0xcc>)
 8000820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <SystemClock_Config+0xd0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000830:	4a21      	ldr	r2, [pc, #132]	@ (80008b8 <SystemClock_Config+0xd0>)
 8000832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <SystemClock_Config+0xd0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000844:	bf00      	nop
 8000846:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <SystemClock_Config+0xd0>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800084e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000852:	d1f8      	bne.n	8000846 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000858:	2301      	movs	r3, #1
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2340      	movs	r3, #64	@ 0x40
 800085e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000860:	2300      	movs	r3, #0
 8000862:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000868:	4618      	mov	r0, r3
 800086a:	f001 ffc3 	bl	80027f4 <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000874:	f000 fb02 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000878:	233f      	movs	r3, #63	@ 0x3f
 800087a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2101      	movs	r1, #1
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fc03 	bl	80030a8 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a8:	f000 fae8 	bl	8000e7c <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3770      	adds	r7, #112	@ 0x70
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	58000400 	.word	0x58000400
 80008b8:	58024800 	.word	0x58024800

080008bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b096      	sub	sp, #88	@ 0x58
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	222c      	movs	r2, #44	@ 0x2c
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f008 f9ec 	bl	8008cc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ee:	4b38      	ldr	r3, [pc, #224]	@ (80009d0 <MX_TIM1_Init+0x114>)
 80008f0:	4a38      	ldr	r2, [pc, #224]	@ (80009d4 <MX_TIM1_Init+0x118>)
 80008f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008f4:	4b36      	ldr	r3, [pc, #216]	@ (80009d0 <MX_TIM1_Init+0x114>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b35      	ldr	r3, [pc, #212]	@ (80009d0 <MX_TIM1_Init+0x114>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000900:	4b33      	ldr	r3, [pc, #204]	@ (80009d0 <MX_TIM1_Init+0x114>)
 8000902:	22ff      	movs	r2, #255	@ 0xff
 8000904:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000906:	4b32      	ldr	r3, [pc, #200]	@ (80009d0 <MX_TIM1_Init+0x114>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800090c:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <MX_TIM1_Init+0x114>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b2f      	ldr	r3, [pc, #188]	@ (80009d0 <MX_TIM1_Init+0x114>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000918:	482d      	ldr	r0, [pc, #180]	@ (80009d0 <MX_TIM1_Init+0x114>)
 800091a:	f004 fd7d 	bl	8005418 <HAL_TIM_PWM_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000924:	f000 faaa 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000934:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000938:	4619      	mov	r1, r3
 800093a:	4825      	ldr	r0, [pc, #148]	@ (80009d0 <MX_TIM1_Init+0x114>)
 800093c:	f005 fb88 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000946:	f000 fa99 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094a:	2360      	movs	r3, #96	@ 0x60
 800094c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000956:	2300      	movs	r3, #0
 8000958:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000966:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	4818      	ldr	r0, [pc, #96]	@ (80009d0 <MX_TIM1_Init+0x114>)
 8000970:	f004 feb8 	bl	80056e4 <HAL_TIM_PWM_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800097a:	f000 fa7f 	bl	8000e7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000992:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000996:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	@ (80009d0 <MX_TIM1_Init+0x114>)
 80009b4:	f005 fbda 	bl	800616c <HAL_TIMEx_ConfigBreakDeadTime>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80009be:	f000 fa5d 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009c2:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <MX_TIM1_Init+0x114>)
 80009c4:	f000 faca 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3758      	adds	r7, #88	@ 0x58
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000088 	.word	0x24000088
 80009d4:	40010000 	.word	0x40010000

080009d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fc:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <MX_TIM3_Init+0xac>)
 80009fe:	4a22      	ldr	r2, [pc, #136]	@ (8000a88 <MX_TIM3_Init+0xb0>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a02:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a10:	22ff      	movs	r2, #255	@ 0xff
 8000a12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a20:	4818      	ldr	r0, [pc, #96]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a22:	f004 fcf9 	bl	8005418 <HAL_TIM_PWM_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 fa26 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a40:	f005 fb06 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a4a:	f000 fa17 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4e:	2360      	movs	r3, #96	@ 0x60
 8000a50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a66:	f004 fe3d 	bl	80056e4 <HAL_TIM_PWM_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a70:	f000 fa04 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a74:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a76:	f000 fa71 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	@ 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	240000d4 	.word	0x240000d4
 8000a88:	40000400 	.word	0x40000400

08000a8c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b096      	sub	sp, #88	@ 0x58
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	222c      	movs	r2, #44	@ 0x2c
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f008 f904 	bl	8008cc6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000abe:	4b34      	ldr	r3, [pc, #208]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000ac0:	4a34      	ldr	r2, [pc, #208]	@ (8000b94 <MX_TIM15_Init+0x108>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000ac4:	4b32      	ldr	r3, [pc, #200]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 255;
 8000ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000ad2:	22ff      	movs	r2, #255	@ 0xff
 8000ad4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000ae8:	4829      	ldr	r0, [pc, #164]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000aea:	f004 fc95 	bl	8005418 <HAL_TIM_PWM_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 8000af4:	f000 f9c2 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b04:	4619      	mov	r1, r3
 8000b06:	4822      	ldr	r0, [pc, #136]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000b08:	f005 faa2 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 8000b12:	f000 f9b3 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b16:	2360      	movs	r3, #96	@ 0x60
 8000b18:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b36:	2204      	movs	r2, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4815      	ldr	r0, [pc, #84]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000b3c:	f004 fdd2 	bl	80056e4 <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 8000b46:	f000 f999 	bl	8000e7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000b72:	f005 fafb 	bl	800616c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8000b7c:	f000 f97e 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <MX_TIM15_Init+0x104>)
 8000b82:	f000 f9eb 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3758      	adds	r7, #88	@ 0x58
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000120 	.word	0x24000120
 8000b94:	40014000 	.word	0x40014000

08000b98 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000b9e:	4a23      	ldr	r2, [pc, #140]	@ (8000c2c <MX_UART7_Init+0x94>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000ba4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ba8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000be0:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000be2:	f005 fb41 	bl	8006268 <HAL_UART_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000bec:	f000 f946 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000bf4:	f007 fdbf 	bl	8008776 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000bfe:	f000 f93d 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000c06:	f007 fdf4 	bl	80087f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000c10:	f000 f934 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <MX_UART7_Init+0x90>)
 8000c16:	f007 fd75 	bl	8008704 <HAL_UARTEx_DisableFifoMode>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000c20:	f000 f92c 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2400016c 	.word	0x2400016c
 8000c2c:	40007800 	.word	0x40007800

08000c30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c36:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <MX_USART1_UART_Init+0x94>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c78:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c7a:	f005 faf5 	bl	8006268 <HAL_UART_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c84:	f000 f8fa 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c8c:	f007 fd73 	bl	8008776 <HAL_UARTEx_SetTxFifoThreshold>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c96:	f000 f8f1 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4808      	ldr	r0, [pc, #32]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c9e:	f007 fda8 	bl	80087f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca8:	f000 f8e8 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000cae:	f007 fd29 	bl	8008704 <HAL_UARTEx_DisableFifoMode>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb8:	f000 f8e0 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	24000200 	.word	0x24000200
 8000cc4:	40011000 	.word	0x40011000

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	@ 0x38
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	4b63      	ldr	r3, [pc, #396]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	4a61      	ldr	r2, [pc, #388]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cee:	4b5f      	ldr	r3, [pc, #380]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	623b      	str	r3, [r7, #32]
 8000cfa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	4a5a      	ldr	r2, [pc, #360]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0c:	4b57      	ldr	r3, [pc, #348]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	61fb      	str	r3, [r7, #28]
 8000d18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b54      	ldr	r3, [pc, #336]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	4a52      	ldr	r2, [pc, #328]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2a:	4b50      	ldr	r3, [pc, #320]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d38:	4b4c      	ldr	r3, [pc, #304]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	4a4b      	ldr	r2, [pc, #300]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d40:	f043 0310 	orr.w	r3, r3, #16
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d48:	4b48      	ldr	r3, [pc, #288]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b45      	ldr	r3, [pc, #276]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	4a43      	ldr	r2, [pc, #268]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d66:	4b41      	ldr	r3, [pc, #260]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d74:	4b3d      	ldr	r3, [pc, #244]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d84:	4b39      	ldr	r3, [pc, #228]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	4b36      	ldr	r3, [pc, #216]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	4a34      	ldr	r2, [pc, #208]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da2:	4b32      	ldr	r3, [pc, #200]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000db0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000db8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dce:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	4a25      	ldr	r2, [pc, #148]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dde:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <MX_GPIO_Init+0x1a4>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2108      	movs	r1, #8
 8000df0:	481f      	ldr	r0, [pc, #124]	@ (8000e70 <MX_GPIO_Init+0x1a8>)
 8000df2:	f001 fcab 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dfc:	481d      	ldr	r0, [pc, #116]	@ (8000e74 <MX_GPIO_Init+0x1ac>)
 8000dfe:	f001 fca5 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2104      	movs	r1, #4
 8000e06:	481c      	ldr	r0, [pc, #112]	@ (8000e78 <MX_GPIO_Init+0x1b0>)
 8000e08:	f001 fca0 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4813      	ldr	r0, [pc, #76]	@ (8000e70 <MX_GPIO_Init+0x1a8>)
 8000e24:	f001 fae2 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000e28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <MX_GPIO_Init+0x1ac>)
 8000e42:	f001 fad3 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000e46:	2304      	movs	r3, #4
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <MX_GPIO_Init+0x1b0>)
 8000e5e:	f001 fac5 	bl	80023ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e62:	bf00      	nop
 8000e64:	3738      	adds	r7, #56	@ 0x38
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020c00 	.word	0x58020c00
 8000e74:	58022000 	.word	0x58022000
 8000e78:	58022400 	.word	0x58022400

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <Error_Handler+0x8>

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_MspInit+0x30>)
 8000e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e94:	4a08      	ldr	r2, [pc, #32]	@ (8000eb8 <HAL_MspInit+0x30>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_MspInit+0x30>)
 8000ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	58024400 	.word	0x58024400

08000ebc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a20      	ldr	r2, [pc, #128]	@ (8000f4c <HAL_TIM_PWM_MspInit+0x90>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10f      	bne.n	8000eee <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <HAL_TIM_PWM_MspInit+0x94>)
 8000ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f50 <HAL_TIM_PWM_MspInit+0x94>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <HAL_TIM_PWM_MspInit+0x94>)
 8000ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000eec:	e028      	b.n	8000f40 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM3)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a18      	ldr	r2, [pc, #96]	@ (8000f54 <HAL_TIM_PWM_MspInit+0x98>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d10f      	bne.n	8000f18 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ef8:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <HAL_TIM_PWM_MspInit+0x94>)
 8000efa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000efe:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <HAL_TIM_PWM_MspInit+0x94>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <HAL_TIM_PWM_MspInit+0x94>)
 8000f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
}
 8000f16:	e013      	b.n	8000f40 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM15)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <HAL_TIM_PWM_MspInit+0x9c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10e      	bne.n	8000f40 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <HAL_TIM_PWM_MspInit+0x94>)
 8000f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f28:	4a09      	ldr	r2, [pc, #36]	@ (8000f50 <HAL_TIM_PWM_MspInit+0x94>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f32:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <HAL_TIM_PWM_MspInit+0x94>)
 8000f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	bf00      	nop
 8000f42:	371c      	adds	r7, #28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	58024400 	.word	0x58024400
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40014000 	.word	0x40014000

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a37      	ldr	r2, [pc, #220]	@ (8001058 <HAL_TIM_MspPostInit+0xfc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d11f      	bne.n	8000fbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f7e:	4b37      	ldr	r3, [pc, #220]	@ (800105c <HAL_TIM_MspPostInit+0x100>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	4a35      	ldr	r2, [pc, #212]	@ (800105c <HAL_TIM_MspPostInit+0x100>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8e:	4b33      	ldr	r3, [pc, #204]	@ (800105c <HAL_TIM_MspPostInit+0x100>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PK1     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	482a      	ldr	r0, [pc, #168]	@ (8001060 <HAL_TIM_MspPostInit+0x104>)
 8000fb8:	f001 fa18 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000fbc:	e048      	b.n	8001050 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a28      	ldr	r2, [pc, #160]	@ (8001064 <HAL_TIM_MspPostInit+0x108>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d11f      	bne.n	8001008 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b24      	ldr	r3, [pc, #144]	@ (800105c <HAL_TIM_MspPostInit+0x100>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	4a23      	ldr	r2, [pc, #140]	@ (800105c <HAL_TIM_MspPostInit+0x100>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd8:	4b20      	ldr	r3, [pc, #128]	@ (800105c <HAL_TIM_MspPostInit+0x100>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fe6:	2340      	movs	r3, #64	@ 0x40
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4819      	ldr	r0, [pc, #100]	@ (8001068 <HAL_TIM_MspPostInit+0x10c>)
 8001002:	f001 f9f3 	bl	80023ec <HAL_GPIO_Init>
}
 8001006:	e023      	b.n	8001050 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM15)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a17      	ldr	r2, [pc, #92]	@ (800106c <HAL_TIM_MspPostInit+0x110>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d11e      	bne.n	8001050 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_TIM_MspPostInit+0x100>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a10      	ldr	r2, [pc, #64]	@ (800105c <HAL_TIM_MspPostInit+0x100>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <HAL_TIM_MspPostInit+0x100>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001030:	2340      	movs	r3, #64	@ 0x40
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001040:	2304      	movs	r3, #4
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4809      	ldr	r0, [pc, #36]	@ (8001070 <HAL_TIM_MspPostInit+0x114>)
 800104c:	f001 f9ce 	bl	80023ec <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	@ 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40010000 	.word	0x40010000
 800105c:	58024400 	.word	0x58024400
 8001060:	58022800 	.word	0x58022800
 8001064:	40000400 	.word	0x40000400
 8001068:	58020000 	.word	0x58020000
 800106c:	40014000 	.word	0x40014000
 8001070:	58021000 	.word	0x58021000

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0be      	sub	sp, #248	@ 0xf8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	22c0      	movs	r2, #192	@ 0xc0
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f007 fe16 	bl	8008cc6 <memset>
  if(huart->Instance==UART7)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a67      	ldr	r2, [pc, #412]	@ (800123c <HAL_UART_MspInit+0x1c8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d173      	bne.n	800118c <HAL_UART_MspInit+0x118>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80010a4:	f04f 0202 	mov.w	r2, #2
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fb80 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010c6:	f7ff fed9 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80010ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80010cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d0:	4a5b      	ldr	r2, [pc, #364]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80010d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010da:	4b59      	ldr	r3, [pc, #356]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80010dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b55      	ldr	r3, [pc, #340]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	4a54      	ldr	r2, [pc, #336]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f8:	4b51      	ldr	r3, [pc, #324]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b4e      	ldr	r3, [pc, #312]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	4a4c      	ldr	r2, [pc, #304]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001116:	4b4a      	ldr	r3, [pc, #296]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PB4 (NJTRST)     ------> UART7_TX
    PA8     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001124:	2310      	movs	r3, #16
 8001126:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 800113c:	230b      	movs	r3, #11
 800113e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001146:	4619      	mov	r1, r3
 8001148:	483e      	ldr	r0, [pc, #248]	@ (8001244 <HAL_UART_MspInit+0x1d0>)
 800114a:	f001 f94f 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800114e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8001168:	230b      	movs	r3, #11
 800116a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001172:	4619      	mov	r1, r3
 8001174:	4834      	ldr	r0, [pc, #208]	@ (8001248 <HAL_UART_MspInit+0x1d4>)
 8001176:	f001 f939 	bl	80023ec <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2052      	movs	r0, #82	@ 0x52
 8001180:	f000 fb9b 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001184:	2052      	movs	r0, #82	@ 0x52
 8001186:	f000 fbb2 	bl	80018ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800118a:	e052      	b.n	8001232 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a2e      	ldr	r2, [pc, #184]	@ (800124c <HAL_UART_MspInit+0x1d8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d14d      	bne.n	8001232 <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001196:	f04f 0201 	mov.w	r2, #1
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fb07 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_UART_MspInit+0x148>
      Error_Handler();
 80011b8:	f7ff fe60 	bl	8000e7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80011bc:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80011be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80011c4:	f043 0310 	orr.w	r3, r3, #16
 80011c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80011ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e0:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <HAL_UART_MspInit+0x1cc>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f8:	23c0      	movs	r3, #192	@ 0xc0
 80011fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001210:	2307      	movs	r3, #7
 8001212:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800121a:	4619      	mov	r1, r3
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <HAL_UART_MspInit+0x1d0>)
 800121e:	f001 f8e5 	bl	80023ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2025      	movs	r0, #37	@ 0x25
 8001228:	f000 fb47 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800122c:	2025      	movs	r0, #37	@ 0x25
 800122e:	f000 fb5e 	bl	80018ee <HAL_NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	37f8      	adds	r7, #248	@ 0xf8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40007800 	.word	0x40007800
 8001240:	58024400 	.word	0x58024400
 8001244:	58020400 	.word	0x58020400
 8001248:	58020000 	.word	0x58020000
 800124c:	40011000 	.word	0x40011000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 fa01 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <USART1_IRQHandler+0x10>)
 80012b6:	f005 f827 	bl	8006308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000200 	.word	0x24000200

080012c4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <UART7_IRQHandler+0x10>)
 80012ca:	f005 f81d 	bl	8006308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400016c 	.word	0x2400016c

080012d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return 1;
 80012dc:	2301      	movs	r3, #1
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_kill>:

int _kill(int pid, int sig)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012f2:	f007 fd93 	bl	8008e1c <__errno>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2216      	movs	r2, #22
 80012fa:	601a      	str	r2, [r3, #0]
  return -1;
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_exit>:

void _exit (int status)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ffe7 	bl	80012e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800131a:	bf00      	nop
 800131c:	e7fd      	b.n	800131a <_exit+0x12>

0800131e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e00a      	b.n	8001346 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001330:	f3af 8000 	nop.w
 8001334:	4601      	mov	r1, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	60ba      	str	r2, [r7, #8]
 800133c:	b2ca      	uxtb	r2, r1
 800133e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	dbf0      	blt.n	8001330 <_read+0x12>
  }

  return len;
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e009      	b.n	800137e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	60ba      	str	r2, [r7, #8]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	dbf1      	blt.n	800136a <_write+0x12>
  }
  return len;
 8001386:	687b      	ldr	r3, [r7, #4]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_close>:

int _close(int file)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013b8:	605a      	str	r2, [r3, #4]
  return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_isatty>:

int _isatty(int file)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001400:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <_sbrk+0x5c>)
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <_sbrk+0x60>)
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <_sbrk+0x64>)
 8001416:	4a12      	ldr	r2, [pc, #72]	@ (8001460 <_sbrk+0x68>)
 8001418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001428:	f007 fcf8 	bl	8008e1c <__errno>
 800142c:	4603      	mov	r3, r0
 800142e:	220c      	movs	r2, #12
 8001430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e009      	b.n	800144c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <_sbrk+0x64>)
 8001448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	24080000 	.word	0x24080000
 8001458:	00000400 	.word	0x00000400
 800145c:	24000314 	.word	0x24000314
 8001460:	24000468 	.word	0x24000468

08001464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001468:	4b37      	ldr	r3, [pc, #220]	@ (8001548 <SystemInit+0xe4>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800146e:	4a36      	ldr	r2, [pc, #216]	@ (8001548 <SystemInit+0xe4>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001478:	4b34      	ldr	r3, [pc, #208]	@ (800154c <SystemInit+0xe8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	2b06      	cmp	r3, #6
 8001482:	d807      	bhi.n	8001494 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001484:	4b31      	ldr	r3, [pc, #196]	@ (800154c <SystemInit+0xe8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 030f 	bic.w	r3, r3, #15
 800148c:	4a2f      	ldr	r2, [pc, #188]	@ (800154c <SystemInit+0xe8>)
 800148e:	f043 0307 	orr.w	r3, r3, #7
 8001492:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001494:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <SystemInit+0xec>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2d      	ldr	r2, [pc, #180]	@ (8001550 <SystemInit+0xec>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <SystemInit+0xec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <SystemInit+0xec>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4929      	ldr	r1, [pc, #164]	@ (8001550 <SystemInit+0xec>)
 80014ac:	4b29      	ldr	r3, [pc, #164]	@ (8001554 <SystemInit+0xf0>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014b2:	4b26      	ldr	r3, [pc, #152]	@ (800154c <SystemInit+0xe8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014be:	4b23      	ldr	r3, [pc, #140]	@ (800154c <SystemInit+0xe8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 030f 	bic.w	r3, r3, #15
 80014c6:	4a21      	ldr	r2, [pc, #132]	@ (800154c <SystemInit+0xe8>)
 80014c8:	f043 0307 	orr.w	r3, r3, #7
 80014cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <SystemInit+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <SystemInit+0xec>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014da:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <SystemInit+0xec>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <SystemInit+0xec>)
 80014e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <SystemInit+0xf4>)
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <SystemInit+0xec>)
 80014e8:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <SystemInit+0xf8>)
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <SystemInit+0xec>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <SystemInit+0xfc>)
 80014f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <SystemInit+0xec>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <SystemInit+0xec>)
 80014fa:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <SystemInit+0xfc>)
 80014fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <SystemInit+0xec>)
 8001500:	2200      	movs	r2, #0
 8001502:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <SystemInit+0xec>)
 8001506:	4a16      	ldr	r2, [pc, #88]	@ (8001560 <SystemInit+0xfc>)
 8001508:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <SystemInit+0xec>)
 800150c:	2200      	movs	r2, #0
 800150e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <SystemInit+0xec>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0e      	ldr	r2, [pc, #56]	@ (8001550 <SystemInit+0xec>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <SystemInit+0xec>)
 800151e:	2200      	movs	r2, #0
 8001520:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <SystemInit+0x100>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <SystemInit+0x104>)
 8001528:	4013      	ands	r3, r2
 800152a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800152e:	d202      	bcs.n	8001536 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001530:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <SystemInit+0x108>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <SystemInit+0x10c>)
 8001538:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800153c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	52002000 	.word	0x52002000
 8001550:	58024400 	.word	0x58024400
 8001554:	eaf6ed7f 	.word	0xeaf6ed7f
 8001558:	02020200 	.word	0x02020200
 800155c:	01ff0000 	.word	0x01ff0000
 8001560:	01010280 	.word	0x01010280
 8001564:	5c001000 	.word	0x5c001000
 8001568:	ffff0000 	.word	0xffff0000
 800156c:	51008108 	.word	0x51008108
 8001570:	52004000 	.word	0x52004000

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001578:	f7ff ff74 	bl	8001464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157e:	490d      	ldr	r1, [pc, #52]	@ (80015b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001580:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001594:	4c0a      	ldr	r4, [pc, #40]	@ (80015c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a2:	f007 fc41 	bl	8008e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a6:	f7ff f8e5 	bl	8000774 <main>
  bx  lr
 80015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80015b8:	08009cfc 	.word	0x08009cfc
  ldr r2, =_sbss
 80015bc:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80015c0:	24000468 	.word	0x24000468

080015c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC3_IRQHandler>
	...

080015c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ce:	2003      	movs	r0, #3
 80015d0:	f000 f968 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015d4:	f001 ff1e 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_Init+0x68>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	4913      	ldr	r1, [pc, #76]	@ (8001634 <HAL_Init+0x6c>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
 80015f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <HAL_Init+0x68>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <HAL_Init+0x6c>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <HAL_Init+0x70>)
 800160a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800160c:	4a0b      	ldr	r2, [pc, #44]	@ (800163c <HAL_Init+0x74>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001612:	2000      	movs	r0, #0
 8001614:	f000 f814 	bl	8001640 <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e002      	b.n	8001628 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001622:	f7ff fc31 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	58024400 	.word	0x58024400
 8001634:	08009ad0 	.word	0x08009ad0
 8001638:	24000004 	.word	0x24000004
 800163c:	24000000 	.word	0x24000000

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_InitTick+0x60>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e021      	b.n	8001698 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_InitTick+0x64>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_InitTick+0x60>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f94d 	bl	800190a <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f917 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	@ (80016a8 <HAL_InitTick+0x68>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2400000c 	.word	0x2400000c
 80016a4:	24000000 	.word	0x24000000
 80016a8:	24000008 	.word	0x24000008

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_IncTick+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_IncTick+0x24>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <HAL_IncTick+0x24>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	2400000c 	.word	0x2400000c
 80016d0:	24000318 	.word	0x24000318

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	24000318 	.word	0x24000318

080016ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_GetREVID+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0c1b      	lsrs	r3, r3, #16
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	5c001000 	.word	0x5c001000

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <__NVIC_SetPriorityGrouping+0x40>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	4313      	orrs	r3, r2
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <__NVIC_SetPriorityGrouping+0x40>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	05fa0000 	.word	0x05fa0000

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	@ (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	@ (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	@ 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	@ 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff8e 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff29 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c8:	f7ff ff40 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7ff ff90 	bl	80017f8 <NVIC_EncodePriority>
 80018d8:	4602      	mov	r2, r0
 80018da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff5f 	bl	80017a4 <__NVIC_SetPriority>
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff33 	bl	8001768 <__NVIC_EnableIRQ>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffa4 	bl	8001860 <SysTick_Config>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff fed2 	bl	80016d4 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e2dc      	b.n	8001ef6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d008      	beq.n	800195a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e2cd      	b.n	8001ef6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a76      	ldr	r2, [pc, #472]	@ (8001b38 <HAL_DMA_Abort+0x214>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d04a      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a74      	ldr	r2, [pc, #464]	@ (8001b3c <HAL_DMA_Abort+0x218>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d045      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a73      	ldr	r2, [pc, #460]	@ (8001b40 <HAL_DMA_Abort+0x21c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d040      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a71      	ldr	r2, [pc, #452]	@ (8001b44 <HAL_DMA_Abort+0x220>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d03b      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a70      	ldr	r2, [pc, #448]	@ (8001b48 <HAL_DMA_Abort+0x224>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d036      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a6e      	ldr	r2, [pc, #440]	@ (8001b4c <HAL_DMA_Abort+0x228>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d031      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a6d      	ldr	r2, [pc, #436]	@ (8001b50 <HAL_DMA_Abort+0x22c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d02c      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a6b      	ldr	r2, [pc, #428]	@ (8001b54 <HAL_DMA_Abort+0x230>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d027      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6a      	ldr	r2, [pc, #424]	@ (8001b58 <HAL_DMA_Abort+0x234>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d022      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a68      	ldr	r2, [pc, #416]	@ (8001b5c <HAL_DMA_Abort+0x238>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01d      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a67      	ldr	r2, [pc, #412]	@ (8001b60 <HAL_DMA_Abort+0x23c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d018      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a65      	ldr	r2, [pc, #404]	@ (8001b64 <HAL_DMA_Abort+0x240>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a64      	ldr	r2, [pc, #400]	@ (8001b68 <HAL_DMA_Abort+0x244>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00e      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a62      	ldr	r2, [pc, #392]	@ (8001b6c <HAL_DMA_Abort+0x248>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d009      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a61      	ldr	r2, [pc, #388]	@ (8001b70 <HAL_DMA_Abort+0x24c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d004      	beq.n	80019fa <HAL_DMA_Abort+0xd6>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a5f      	ldr	r2, [pc, #380]	@ (8001b74 <HAL_DMA_Abort+0x250>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_DMA_Abort+0xda>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_DMA_Abort+0xdc>
 80019fe:	2300      	movs	r3, #0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 021e 	bic.w	r2, r2, #30
 8001a12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e00a      	b.n	8001a42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 020e 	bic.w	r2, r2, #14
 8001a3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3c      	ldr	r2, [pc, #240]	@ (8001b38 <HAL_DMA_Abort+0x214>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d072      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3a      	ldr	r2, [pc, #232]	@ (8001b3c <HAL_DMA_Abort+0x218>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d06d      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a39      	ldr	r2, [pc, #228]	@ (8001b40 <HAL_DMA_Abort+0x21c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d068      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a37      	ldr	r2, [pc, #220]	@ (8001b44 <HAL_DMA_Abort+0x220>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d063      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a36      	ldr	r2, [pc, #216]	@ (8001b48 <HAL_DMA_Abort+0x224>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d05e      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a34      	ldr	r2, [pc, #208]	@ (8001b4c <HAL_DMA_Abort+0x228>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d059      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a33      	ldr	r2, [pc, #204]	@ (8001b50 <HAL_DMA_Abort+0x22c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d054      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a31      	ldr	r2, [pc, #196]	@ (8001b54 <HAL_DMA_Abort+0x230>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d04f      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a30      	ldr	r2, [pc, #192]	@ (8001b58 <HAL_DMA_Abort+0x234>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04a      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2e      	ldr	r2, [pc, #184]	@ (8001b5c <HAL_DMA_Abort+0x238>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d045      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001b60 <HAL_DMA_Abort+0x23c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d040      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b64 <HAL_DMA_Abort+0x240>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d03b      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a2a      	ldr	r2, [pc, #168]	@ (8001b68 <HAL_DMA_Abort+0x244>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d036      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a28      	ldr	r2, [pc, #160]	@ (8001b6c <HAL_DMA_Abort+0x248>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a27      	ldr	r2, [pc, #156]	@ (8001b70 <HAL_DMA_Abort+0x24c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d02c      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a25      	ldr	r2, [pc, #148]	@ (8001b74 <HAL_DMA_Abort+0x250>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d027      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a24      	ldr	r2, [pc, #144]	@ (8001b78 <HAL_DMA_Abort+0x254>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d022      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a22      	ldr	r2, [pc, #136]	@ (8001b7c <HAL_DMA_Abort+0x258>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d01d      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a21      	ldr	r2, [pc, #132]	@ (8001b80 <HAL_DMA_Abort+0x25c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d018      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1f      	ldr	r2, [pc, #124]	@ (8001b84 <HAL_DMA_Abort+0x260>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b88 <HAL_DMA_Abort+0x264>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <HAL_DMA_Abort+0x268>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d009      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <HAL_DMA_Abort+0x26c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Abort+0x20e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a19      	ldr	r2, [pc, #100]	@ (8001b94 <HAL_DMA_Abort+0x270>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d132      	bne.n	8001b98 <HAL_DMA_Abort+0x274>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e031      	b.n	8001b9a <HAL_DMA_Abort+0x276>
 8001b36:	bf00      	nop
 8001b38:	40020010 	.word	0x40020010
 8001b3c:	40020028 	.word	0x40020028
 8001b40:	40020040 	.word	0x40020040
 8001b44:	40020058 	.word	0x40020058
 8001b48:	40020070 	.word	0x40020070
 8001b4c:	40020088 	.word	0x40020088
 8001b50:	400200a0 	.word	0x400200a0
 8001b54:	400200b8 	.word	0x400200b8
 8001b58:	40020410 	.word	0x40020410
 8001b5c:	40020428 	.word	0x40020428
 8001b60:	40020440 	.word	0x40020440
 8001b64:	40020458 	.word	0x40020458
 8001b68:	40020470 	.word	0x40020470
 8001b6c:	40020488 	.word	0x40020488
 8001b70:	400204a0 	.word	0x400204a0
 8001b74:	400204b8 	.word	0x400204b8
 8001b78:	58025408 	.word	0x58025408
 8001b7c:	5802541c 	.word	0x5802541c
 8001b80:	58025430 	.word	0x58025430
 8001b84:	58025444 	.word	0x58025444
 8001b88:	58025458 	.word	0x58025458
 8001b8c:	5802546c 	.word	0x5802546c
 8001b90:	58025480 	.word	0x58025480
 8001b94:	58025494 	.word	0x58025494
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6d      	ldr	r2, [pc, #436]	@ (8001d68 <HAL_DMA_Abort+0x444>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d04a      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6b      	ldr	r2, [pc, #428]	@ (8001d6c <HAL_DMA_Abort+0x448>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d045      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6a      	ldr	r2, [pc, #424]	@ (8001d70 <HAL_DMA_Abort+0x44c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d040      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a68      	ldr	r2, [pc, #416]	@ (8001d74 <HAL_DMA_Abort+0x450>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d03b      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a67      	ldr	r2, [pc, #412]	@ (8001d78 <HAL_DMA_Abort+0x454>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d036      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a65      	ldr	r2, [pc, #404]	@ (8001d7c <HAL_DMA_Abort+0x458>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d031      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a64      	ldr	r2, [pc, #400]	@ (8001d80 <HAL_DMA_Abort+0x45c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d02c      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a62      	ldr	r2, [pc, #392]	@ (8001d84 <HAL_DMA_Abort+0x460>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d027      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a61      	ldr	r2, [pc, #388]	@ (8001d88 <HAL_DMA_Abort+0x464>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a5f      	ldr	r2, [pc, #380]	@ (8001d8c <HAL_DMA_Abort+0x468>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01d      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5e      	ldr	r2, [pc, #376]	@ (8001d90 <HAL_DMA_Abort+0x46c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d018      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a5c      	ldr	r2, [pc, #368]	@ (8001d94 <HAL_DMA_Abort+0x470>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d98 <HAL_DMA_Abort+0x474>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00e      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a59      	ldr	r2, [pc, #356]	@ (8001d9c <HAL_DMA_Abort+0x478>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d009      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a58      	ldr	r2, [pc, #352]	@ (8001da0 <HAL_DMA_Abort+0x47c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d004      	beq.n	8001c4e <HAL_DMA_Abort+0x32a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a56      	ldr	r2, [pc, #344]	@ (8001da4 <HAL_DMA_Abort+0x480>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d108      	bne.n	8001c60 <HAL_DMA_Abort+0x33c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e007      	b.n	8001c70 <HAL_DMA_Abort+0x34c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c70:	e013      	b.n	8001c9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c72:	f7ff fd2f 	bl	80016d4 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d90c      	bls.n	8001c9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e12d      	b.n	8001ef6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1e5      	bne.n	8001c72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a2f      	ldr	r2, [pc, #188]	@ (8001d68 <HAL_DMA_Abort+0x444>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d04a      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8001d6c <HAL_DMA_Abort+0x448>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d045      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8001d70 <HAL_DMA_Abort+0x44c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d040      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d74 <HAL_DMA_Abort+0x450>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d03b      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a29      	ldr	r2, [pc, #164]	@ (8001d78 <HAL_DMA_Abort+0x454>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d036      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a27      	ldr	r2, [pc, #156]	@ (8001d7c <HAL_DMA_Abort+0x458>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d031      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a26      	ldr	r2, [pc, #152]	@ (8001d80 <HAL_DMA_Abort+0x45c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d02c      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a24      	ldr	r2, [pc, #144]	@ (8001d84 <HAL_DMA_Abort+0x460>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d027      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a23      	ldr	r2, [pc, #140]	@ (8001d88 <HAL_DMA_Abort+0x464>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d022      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <HAL_DMA_Abort+0x468>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01d      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a20      	ldr	r2, [pc, #128]	@ (8001d90 <HAL_DMA_Abort+0x46c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d018      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1e      	ldr	r2, [pc, #120]	@ (8001d94 <HAL_DMA_Abort+0x470>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	@ (8001d98 <HAL_DMA_Abort+0x474>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00e      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <HAL_DMA_Abort+0x478>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d009      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1a      	ldr	r2, [pc, #104]	@ (8001da0 <HAL_DMA_Abort+0x47c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d004      	beq.n	8001d46 <HAL_DMA_Abort+0x422>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a18      	ldr	r2, [pc, #96]	@ (8001da4 <HAL_DMA_Abort+0x480>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d101      	bne.n	8001d4a <HAL_DMA_Abort+0x426>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_DMA_Abort+0x428>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d02b      	beq.n	8001da8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	223f      	movs	r2, #63	@ 0x3f
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	e02a      	b.n	8001dbe <HAL_DMA_Abort+0x49a>
 8001d68:	40020010 	.word	0x40020010
 8001d6c:	40020028 	.word	0x40020028
 8001d70:	40020040 	.word	0x40020040
 8001d74:	40020058 	.word	0x40020058
 8001d78:	40020070 	.word	0x40020070
 8001d7c:	40020088 	.word	0x40020088
 8001d80:	400200a0 	.word	0x400200a0
 8001d84:	400200b8 	.word	0x400200b8
 8001d88:	40020410 	.word	0x40020410
 8001d8c:	40020428 	.word	0x40020428
 8001d90:	40020440 	.word	0x40020440
 8001d94:	40020458 	.word	0x40020458
 8001d98:	40020470 	.word	0x40020470
 8001d9c:	40020488 	.word	0x40020488
 8001da0:	400204a0 	.word	0x400204a0
 8001da4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2201      	movs	r2, #1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001f00 <HAL_DMA_Abort+0x5dc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d072      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f04 <HAL_DMA_Abort+0x5e0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d06d      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4c      	ldr	r2, [pc, #304]	@ (8001f08 <HAL_DMA_Abort+0x5e4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d068      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a4a      	ldr	r2, [pc, #296]	@ (8001f0c <HAL_DMA_Abort+0x5e8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d063      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a49      	ldr	r2, [pc, #292]	@ (8001f10 <HAL_DMA_Abort+0x5ec>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d05e      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a47      	ldr	r2, [pc, #284]	@ (8001f14 <HAL_DMA_Abort+0x5f0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d059      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a46      	ldr	r2, [pc, #280]	@ (8001f18 <HAL_DMA_Abort+0x5f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d054      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a44      	ldr	r2, [pc, #272]	@ (8001f1c <HAL_DMA_Abort+0x5f8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d04f      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a43      	ldr	r2, [pc, #268]	@ (8001f20 <HAL_DMA_Abort+0x5fc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d04a      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a41      	ldr	r2, [pc, #260]	@ (8001f24 <HAL_DMA_Abort+0x600>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d045      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a40      	ldr	r2, [pc, #256]	@ (8001f28 <HAL_DMA_Abort+0x604>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d040      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a3e      	ldr	r2, [pc, #248]	@ (8001f2c <HAL_DMA_Abort+0x608>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d03b      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f30 <HAL_DMA_Abort+0x60c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d036      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a3b      	ldr	r2, [pc, #236]	@ (8001f34 <HAL_DMA_Abort+0x610>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f38 <HAL_DMA_Abort+0x614>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d02c      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a38      	ldr	r2, [pc, #224]	@ (8001f3c <HAL_DMA_Abort+0x618>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d027      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a37      	ldr	r2, [pc, #220]	@ (8001f40 <HAL_DMA_Abort+0x61c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d022      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a35      	ldr	r2, [pc, #212]	@ (8001f44 <HAL_DMA_Abort+0x620>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01d      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a34      	ldr	r2, [pc, #208]	@ (8001f48 <HAL_DMA_Abort+0x624>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d018      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a32      	ldr	r2, [pc, #200]	@ (8001f4c <HAL_DMA_Abort+0x628>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a31      	ldr	r2, [pc, #196]	@ (8001f50 <HAL_DMA_Abort+0x62c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00e      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2f      	ldr	r2, [pc, #188]	@ (8001f54 <HAL_DMA_Abort+0x630>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d009      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001f58 <HAL_DMA_Abort+0x634>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d004      	beq.n	8001eae <HAL_DMA_Abort+0x58a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f5c <HAL_DMA_Abort+0x638>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d101      	bne.n	8001eb2 <HAL_DMA_Abort+0x58e>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_DMA_Abort+0x590>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d015      	beq.n	8001ee4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ec0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ee2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40020010 	.word	0x40020010
 8001f04:	40020028 	.word	0x40020028
 8001f08:	40020040 	.word	0x40020040
 8001f0c:	40020058 	.word	0x40020058
 8001f10:	40020070 	.word	0x40020070
 8001f14:	40020088 	.word	0x40020088
 8001f18:	400200a0 	.word	0x400200a0
 8001f1c:	400200b8 	.word	0x400200b8
 8001f20:	40020410 	.word	0x40020410
 8001f24:	40020428 	.word	0x40020428
 8001f28:	40020440 	.word	0x40020440
 8001f2c:	40020458 	.word	0x40020458
 8001f30:	40020470 	.word	0x40020470
 8001f34:	40020488 	.word	0x40020488
 8001f38:	400204a0 	.word	0x400204a0
 8001f3c:	400204b8 	.word	0x400204b8
 8001f40:	58025408 	.word	0x58025408
 8001f44:	5802541c 	.word	0x5802541c
 8001f48:	58025430 	.word	0x58025430
 8001f4c:	58025444 	.word	0x58025444
 8001f50:	58025458 	.word	0x58025458
 8001f54:	5802546c 	.word	0x5802546c
 8001f58:	58025480 	.word	0x58025480
 8001f5c:	58025494 	.word	0x58025494

08001f60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e237      	b.n	80023e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d004      	beq.n	8001f88 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2280      	movs	r2, #128	@ 0x80
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e22c      	b.n	80023e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a5c      	ldr	r2, [pc, #368]	@ (8002100 <HAL_DMA_Abort_IT+0x1a0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d04a      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a5b      	ldr	r2, [pc, #364]	@ (8002104 <HAL_DMA_Abort_IT+0x1a4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d045      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a59      	ldr	r2, [pc, #356]	@ (8002108 <HAL_DMA_Abort_IT+0x1a8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d040      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a58      	ldr	r2, [pc, #352]	@ (800210c <HAL_DMA_Abort_IT+0x1ac>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d03b      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a56      	ldr	r2, [pc, #344]	@ (8002110 <HAL_DMA_Abort_IT+0x1b0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d036      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a55      	ldr	r2, [pc, #340]	@ (8002114 <HAL_DMA_Abort_IT+0x1b4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d031      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a53      	ldr	r2, [pc, #332]	@ (8002118 <HAL_DMA_Abort_IT+0x1b8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d02c      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a52      	ldr	r2, [pc, #328]	@ (800211c <HAL_DMA_Abort_IT+0x1bc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d027      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a50      	ldr	r2, [pc, #320]	@ (8002120 <HAL_DMA_Abort_IT+0x1c0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d022      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a4f      	ldr	r2, [pc, #316]	@ (8002124 <HAL_DMA_Abort_IT+0x1c4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d01d      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a4d      	ldr	r2, [pc, #308]	@ (8002128 <HAL_DMA_Abort_IT+0x1c8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d018      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a4c      	ldr	r2, [pc, #304]	@ (800212c <HAL_DMA_Abort_IT+0x1cc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a4a      	ldr	r2, [pc, #296]	@ (8002130 <HAL_DMA_Abort_IT+0x1d0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00e      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a49      	ldr	r2, [pc, #292]	@ (8002134 <HAL_DMA_Abort_IT+0x1d4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a47      	ldr	r2, [pc, #284]	@ (8002138 <HAL_DMA_Abort_IT+0x1d8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a46      	ldr	r2, [pc, #280]	@ (800213c <HAL_DMA_Abort_IT+0x1dc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_DMA_Abort_IT+0xcc>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_DMA_Abort_IT+0xce>
 800202c:	2300      	movs	r3, #0
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8086 	beq.w	8002140 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2204      	movs	r2, #4
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2f      	ldr	r2, [pc, #188]	@ (8002100 <HAL_DMA_Abort_IT+0x1a0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d04a      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a2e      	ldr	r2, [pc, #184]	@ (8002104 <HAL_DMA_Abort_IT+0x1a4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d045      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2c      	ldr	r2, [pc, #176]	@ (8002108 <HAL_DMA_Abort_IT+0x1a8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d040      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2b      	ldr	r2, [pc, #172]	@ (800210c <HAL_DMA_Abort_IT+0x1ac>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d03b      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a29      	ldr	r2, [pc, #164]	@ (8002110 <HAL_DMA_Abort_IT+0x1b0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d036      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a28      	ldr	r2, [pc, #160]	@ (8002114 <HAL_DMA_Abort_IT+0x1b4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d031      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a26      	ldr	r2, [pc, #152]	@ (8002118 <HAL_DMA_Abort_IT+0x1b8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02c      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a25      	ldr	r2, [pc, #148]	@ (800211c <HAL_DMA_Abort_IT+0x1bc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d027      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a23      	ldr	r2, [pc, #140]	@ (8002120 <HAL_DMA_Abort_IT+0x1c0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d022      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <HAL_DMA_Abort_IT+0x1c4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d01d      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a20      	ldr	r2, [pc, #128]	@ (8002128 <HAL_DMA_Abort_IT+0x1c8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d018      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1f      	ldr	r2, [pc, #124]	@ (800212c <HAL_DMA_Abort_IT+0x1cc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002130 <HAL_DMA_Abort_IT+0x1d0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00e      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002134 <HAL_DMA_Abort_IT+0x1d4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d009      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002138 <HAL_DMA_Abort_IT+0x1d8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_DMA_Abort_IT+0x17c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a19      	ldr	r2, [pc, #100]	@ (800213c <HAL_DMA_Abort_IT+0x1dc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d108      	bne.n	80020ee <HAL_DMA_Abort_IT+0x18e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e178      	b.n	80023e0 <HAL_DMA_Abort_IT+0x480>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e16f      	b.n	80023e0 <HAL_DMA_Abort_IT+0x480>
 8002100:	40020010 	.word	0x40020010
 8002104:	40020028 	.word	0x40020028
 8002108:	40020040 	.word	0x40020040
 800210c:	40020058 	.word	0x40020058
 8002110:	40020070 	.word	0x40020070
 8002114:	40020088 	.word	0x40020088
 8002118:	400200a0 	.word	0x400200a0
 800211c:	400200b8 	.word	0x400200b8
 8002120:	40020410 	.word	0x40020410
 8002124:	40020428 	.word	0x40020428
 8002128:	40020440 	.word	0x40020440
 800212c:	40020458 	.word	0x40020458
 8002130:	40020470 	.word	0x40020470
 8002134:	40020488 	.word	0x40020488
 8002138:	400204a0 	.word	0x400204a0
 800213c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 020e 	bic.w	r2, r2, #14
 800214e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6c      	ldr	r2, [pc, #432]	@ (8002308 <HAL_DMA_Abort_IT+0x3a8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d04a      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6b      	ldr	r2, [pc, #428]	@ (800230c <HAL_DMA_Abort_IT+0x3ac>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d045      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a69      	ldr	r2, [pc, #420]	@ (8002310 <HAL_DMA_Abort_IT+0x3b0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d040      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a68      	ldr	r2, [pc, #416]	@ (8002314 <HAL_DMA_Abort_IT+0x3b4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d03b      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a66      	ldr	r2, [pc, #408]	@ (8002318 <HAL_DMA_Abort_IT+0x3b8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d036      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a65      	ldr	r2, [pc, #404]	@ (800231c <HAL_DMA_Abort_IT+0x3bc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d031      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a63      	ldr	r2, [pc, #396]	@ (8002320 <HAL_DMA_Abort_IT+0x3c0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02c      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a62      	ldr	r2, [pc, #392]	@ (8002324 <HAL_DMA_Abort_IT+0x3c4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d027      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a60      	ldr	r2, [pc, #384]	@ (8002328 <HAL_DMA_Abort_IT+0x3c8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5f      	ldr	r2, [pc, #380]	@ (800232c <HAL_DMA_Abort_IT+0x3cc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01d      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002330 <HAL_DMA_Abort_IT+0x3d0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d018      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002334 <HAL_DMA_Abort_IT+0x3d4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002338 <HAL_DMA_Abort_IT+0x3d8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00e      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a59      	ldr	r2, [pc, #356]	@ (800233c <HAL_DMA_Abort_IT+0x3dc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a57      	ldr	r2, [pc, #348]	@ (8002340 <HAL_DMA_Abort_IT+0x3e0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x290>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a56      	ldr	r2, [pc, #344]	@ (8002344 <HAL_DMA_Abort_IT+0x3e4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d108      	bne.n	8002202 <HAL_DMA_Abort_IT+0x2a2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e007      	b.n	8002212 <HAL_DMA_Abort_IT+0x2b2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a3c      	ldr	r2, [pc, #240]	@ (8002308 <HAL_DMA_Abort_IT+0x3a8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d072      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3a      	ldr	r2, [pc, #232]	@ (800230c <HAL_DMA_Abort_IT+0x3ac>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d06d      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a39      	ldr	r2, [pc, #228]	@ (8002310 <HAL_DMA_Abort_IT+0x3b0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d068      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a37      	ldr	r2, [pc, #220]	@ (8002314 <HAL_DMA_Abort_IT+0x3b4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d063      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a36      	ldr	r2, [pc, #216]	@ (8002318 <HAL_DMA_Abort_IT+0x3b8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d05e      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a34      	ldr	r2, [pc, #208]	@ (800231c <HAL_DMA_Abort_IT+0x3bc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d059      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a33      	ldr	r2, [pc, #204]	@ (8002320 <HAL_DMA_Abort_IT+0x3c0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d054      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a31      	ldr	r2, [pc, #196]	@ (8002324 <HAL_DMA_Abort_IT+0x3c4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d04f      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a30      	ldr	r2, [pc, #192]	@ (8002328 <HAL_DMA_Abort_IT+0x3c8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d04a      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a2e      	ldr	r2, [pc, #184]	@ (800232c <HAL_DMA_Abort_IT+0x3cc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d045      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a2d      	ldr	r2, [pc, #180]	@ (8002330 <HAL_DMA_Abort_IT+0x3d0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d040      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2b      	ldr	r2, [pc, #172]	@ (8002334 <HAL_DMA_Abort_IT+0x3d4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d03b      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2a      	ldr	r2, [pc, #168]	@ (8002338 <HAL_DMA_Abort_IT+0x3d8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d036      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a28      	ldr	r2, [pc, #160]	@ (800233c <HAL_DMA_Abort_IT+0x3dc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d031      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a27      	ldr	r2, [pc, #156]	@ (8002340 <HAL_DMA_Abort_IT+0x3e0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d02c      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a25      	ldr	r2, [pc, #148]	@ (8002344 <HAL_DMA_Abort_IT+0x3e4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d027      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a24      	ldr	r2, [pc, #144]	@ (8002348 <HAL_DMA_Abort_IT+0x3e8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a22      	ldr	r2, [pc, #136]	@ (800234c <HAL_DMA_Abort_IT+0x3ec>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01d      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a21      	ldr	r2, [pc, #132]	@ (8002350 <HAL_DMA_Abort_IT+0x3f0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002354 <HAL_DMA_Abort_IT+0x3f4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1e      	ldr	r2, [pc, #120]	@ (8002358 <HAL_DMA_Abort_IT+0x3f8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <HAL_DMA_Abort_IT+0x3fc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <HAL_DMA_Abort_IT+0x400>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_DMA_Abort_IT+0x3a2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <HAL_DMA_Abort_IT+0x404>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d132      	bne.n	8002368 <HAL_DMA_Abort_IT+0x408>
 8002302:	2301      	movs	r3, #1
 8002304:	e031      	b.n	800236a <HAL_DMA_Abort_IT+0x40a>
 8002306:	bf00      	nop
 8002308:	40020010 	.word	0x40020010
 800230c:	40020028 	.word	0x40020028
 8002310:	40020040 	.word	0x40020040
 8002314:	40020058 	.word	0x40020058
 8002318:	40020070 	.word	0x40020070
 800231c:	40020088 	.word	0x40020088
 8002320:	400200a0 	.word	0x400200a0
 8002324:	400200b8 	.word	0x400200b8
 8002328:	40020410 	.word	0x40020410
 800232c:	40020428 	.word	0x40020428
 8002330:	40020440 	.word	0x40020440
 8002334:	40020458 	.word	0x40020458
 8002338:	40020470 	.word	0x40020470
 800233c:	40020488 	.word	0x40020488
 8002340:	400204a0 	.word	0x400204a0
 8002344:	400204b8 	.word	0x400204b8
 8002348:	58025408 	.word	0x58025408
 800234c:	5802541c 	.word	0x5802541c
 8002350:	58025430 	.word	0x58025430
 8002354:	58025444 	.word	0x58025444
 8002358:	58025458 	.word	0x58025458
 800235c:	5802546c 	.word	0x5802546c
 8002360:	58025480 	.word	0x58025480
 8002364:	58025494 	.word	0x58025494
 8002368:	2300      	movs	r3, #0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d028      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800237c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002382:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	2201      	movs	r2, #1
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800239c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00c      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023fa:	4b89      	ldr	r3, [pc, #548]	@ (8002620 <HAL_GPIO_Init+0x234>)
 80023fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023fe:	e194      	b.n	800272a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8186 	beq.w	8002724 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d005      	beq.n	8002430 <HAL_GPIO_Init+0x44>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d130      	bne.n	8002492 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002466:	2201      	movs	r2, #1
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 0201 	and.w	r2, r3, #1
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b03      	cmp	r3, #3
 800249c:	d017      	beq.n	80024ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d123      	bne.n	8002522 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	69b9      	ldr	r1, [r7, #24]
 800251e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80e0 	beq.w	8002724 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002564:	4b2f      	ldr	r3, [pc, #188]	@ (8002624 <HAL_GPIO_Init+0x238>)
 8002566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800256a:	4a2e      	ldr	r2, [pc, #184]	@ (8002624 <HAL_GPIO_Init+0x238>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002574:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <HAL_GPIO_Init+0x238>)
 8002576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002582:	4a29      	ldr	r2, [pc, #164]	@ (8002628 <HAL_GPIO_Init+0x23c>)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a20      	ldr	r2, [pc, #128]	@ (800262c <HAL_GPIO_Init+0x240>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d052      	beq.n	8002654 <HAL_GPIO_Init+0x268>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002630 <HAL_GPIO_Init+0x244>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d031      	beq.n	800261a <HAL_GPIO_Init+0x22e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002634 <HAL_GPIO_Init+0x248>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02b      	beq.n	8002616 <HAL_GPIO_Init+0x22a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002638 <HAL_GPIO_Init+0x24c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d025      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a1c      	ldr	r2, [pc, #112]	@ (800263c <HAL_GPIO_Init+0x250>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002640 <HAL_GPIO_Init+0x254>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002644 <HAL_GPIO_Init+0x258>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x21a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a19      	ldr	r2, [pc, #100]	@ (8002648 <HAL_GPIO_Init+0x25c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x216>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a18      	ldr	r2, [pc, #96]	@ (800264c <HAL_GPIO_Init+0x260>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x212>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a17      	ldr	r2, [pc, #92]	@ (8002650 <HAL_GPIO_Init+0x264>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x20e>
 80025f6:	2309      	movs	r3, #9
 80025f8:	e02d      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 80025fa:	230a      	movs	r3, #10
 80025fc:	e02b      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 80025fe:	2308      	movs	r3, #8
 8002600:	e029      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 8002602:	2307      	movs	r3, #7
 8002604:	e027      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 8002606:	2306      	movs	r3, #6
 8002608:	e025      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 800260a:	2305      	movs	r3, #5
 800260c:	e023      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 800260e:	2304      	movs	r3, #4
 8002610:	e021      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 8002612:	2303      	movs	r3, #3
 8002614:	e01f      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 8002616:	2302      	movs	r3, #2
 8002618:	e01d      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 800261a:	2301      	movs	r3, #1
 800261c:	e01b      	b.n	8002656 <HAL_GPIO_Init+0x26a>
 800261e:	bf00      	nop
 8002620:	58000080 	.word	0x58000080
 8002624:	58024400 	.word	0x58024400
 8002628:	58000400 	.word	0x58000400
 800262c:	58020000 	.word	0x58020000
 8002630:	58020400 	.word	0x58020400
 8002634:	58020800 	.word	0x58020800
 8002638:	58020c00 	.word	0x58020c00
 800263c:	58021000 	.word	0x58021000
 8002640:	58021400 	.word	0x58021400
 8002644:	58021800 	.word	0x58021800
 8002648:	58021c00 	.word	0x58021c00
 800264c:	58022000 	.word	0x58022000
 8002650:	58022400 	.word	0x58022400
 8002654:	2300      	movs	r3, #0
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	f002 0203 	and.w	r2, r2, #3
 800265c:	0092      	lsls	r2, r2, #2
 800265e:	4093      	lsls	r3, r2
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002666:	4938      	ldr	r1, [pc, #224]	@ (8002748 <HAL_GPIO_Init+0x35c>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800269a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	3301      	adds	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	f47f ae63 	bne.w	8002400 <HAL_GPIO_Init+0x14>
  }
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	3724      	adds	r7, #36	@ 0x24
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	58000400 	.word	0x58000400

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	619a      	str	r2, [r3, #24]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <HAL_PWREx_ConfigSupply+0x70>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b04      	cmp	r3, #4
 8002792:	d00a      	beq.n	80027aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002794:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <HAL_PWREx_ConfigSupply+0x70>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d001      	beq.n	80027a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e01f      	b.n	80027e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e01d      	b.n	80027e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <HAL_PWREx_ConfigSupply+0x70>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	490f      	ldr	r1, [pc, #60]	@ (80027f0 <HAL_PWREx_ConfigSupply+0x70>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027ba:	f7fe ff8b 	bl	80016d4 <HAL_GetTick>
 80027be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027c0:	e009      	b.n	80027d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027c2:	f7fe ff87 	bl	80016d4 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027d0:	d901      	bls.n	80027d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e007      	b.n	80027e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_PWREx_ConfigSupply+0x70>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027e2:	d1ee      	bne.n	80027c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	58024800 	.word	0x58024800

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	@ 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	f000 bc48 	b.w	8003098 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8088 	beq.w	8002926 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002816:	4b99      	ldr	r3, [pc, #612]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002820:	4b96      	ldr	r3, [pc, #600]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002828:	2b10      	cmp	r3, #16
 800282a:	d007      	beq.n	800283c <HAL_RCC_OscConfig+0x48>
 800282c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282e:	2b18      	cmp	r3, #24
 8002830:	d111      	bne.n	8002856 <HAL_RCC_OscConfig+0x62>
 8002832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d10c      	bne.n	8002856 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d06d      	beq.n	8002924 <HAL_RCC_OscConfig+0x130>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d169      	bne.n	8002924 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f000 bc21 	b.w	8003098 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x7a>
 8002860:	4b86      	ldr	r3, [pc, #536]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a85      	ldr	r2, [pc, #532]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e02e      	b.n	80028cc <HAL_RCC_OscConfig+0xd8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x9c>
 8002876:	4b81      	ldr	r3, [pc, #516]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a80      	ldr	r2, [pc, #512]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b7e      	ldr	r3, [pc, #504]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a7d      	ldr	r2, [pc, #500]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002888:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e01d      	b.n	80028cc <HAL_RCC_OscConfig+0xd8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0xc0>
 800289a:	4b78      	ldr	r3, [pc, #480]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a77      	ldr	r2, [pc, #476]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b75      	ldr	r3, [pc, #468]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a74      	ldr	r2, [pc, #464]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0xd8>
 80028b4:	4b71      	ldr	r3, [pc, #452]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a70      	ldr	r2, [pc, #448]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a6d      	ldr	r2, [pc, #436]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fefe 	bl	80016d4 <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fefa 	bl	80016d4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e3d4      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ee:	4b63      	ldr	r3, [pc, #396]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0xe8>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe feea 	bl	80016d4 <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe fee6 	bl	80016d4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e3c0      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002916:	4b59      	ldr	r3, [pc, #356]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x110>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80ca 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002934:	4b51      	ldr	r3, [pc, #324]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800293c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800293e:	4b4f      	ldr	r3, [pc, #316]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002942:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_RCC_OscConfig+0x166>
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	2b18      	cmp	r3, #24
 800294e:	d156      	bne.n	80029fe <HAL_RCC_OscConfig+0x20a>
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d151      	bne.n	80029fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800295a:	4b48      	ldr	r3, [pc, #288]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x17e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e392      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002972:	4b42      	ldr	r3, [pc, #264]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0219 	bic.w	r2, r3, #25
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	493f      	ldr	r1, [pc, #252]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fea6 	bl	80016d4 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298c:	f7fe fea2 	bl	80016d4 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e37c      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299e:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	f7fe fe9f 	bl	80016ec <HAL_GetREVID>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d817      	bhi.n	80029e8 <HAL_RCC_OscConfig+0x1f4>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b40      	cmp	r3, #64	@ 0x40
 80029be:	d108      	bne.n	80029d2 <HAL_RCC_OscConfig+0x1de>
 80029c0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029c8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d0:	e07a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	031b      	lsls	r3, r3, #12
 80029e0:	4926      	ldr	r1, [pc, #152]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e6:	e06f      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	4921      	ldr	r1, [pc, #132]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029fc:	e064      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d047      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a06:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0219 	bic.w	r2, r3, #25
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	491a      	ldr	r1, [pc, #104]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fe5c 	bl	80016d4 <HAL_GetTick>
 8002a1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fe fe58 	bl	80016d4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e332      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a32:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3e:	f7fe fe55 	bl	80016ec <HAL_GetREVID>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d819      	bhi.n	8002a80 <HAL_RCC_OscConfig+0x28c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b40      	cmp	r3, #64	@ 0x40
 8002a52:	d108      	bne.n	8002a66 <HAL_RCC_OscConfig+0x272>
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a5c:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a62:	6053      	str	r3, [r2, #4]
 8002a64:	e030      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2d4>
 8002a66:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	031b      	lsls	r3, r3, #12
 8002a74:	4901      	ldr	r1, [pc, #4]	@ (8002a7c <HAL_RCC_OscConfig+0x288>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
 8002a7a:	e025      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2d4>
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	4b9a      	ldr	r3, [pc, #616]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	4997      	ldr	r1, [pc, #604]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
 8002a94:	e018      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a96:	4b95      	ldr	r3, [pc, #596]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a94      	ldr	r2, [pc, #592]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fe17 	bl	80016d4 <HAL_GetTick>
 8002aa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fe13 	bl	80016d4 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e2ed      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002abc:	4b8b      	ldr	r3, [pc, #556]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80a9 	beq.w	8002c28 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad6:	4b85      	ldr	r3, [pc, #532]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ade:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ae0:	4b82      	ldr	r3, [pc, #520]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d007      	beq.n	8002afc <HAL_RCC_OscConfig+0x308>
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b18      	cmp	r3, #24
 8002af0:	d13a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x374>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d135      	bne.n	8002b68 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002afc:	4b7b      	ldr	r3, [pc, #492]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_OscConfig+0x320>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b80      	cmp	r3, #128	@ 0x80
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e2c1      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b14:	f7fe fdea 	bl	80016ec <HAL_GetREVID>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d817      	bhi.n	8002b52 <HAL_RCC_OscConfig+0x35e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d108      	bne.n	8002b3c <HAL_RCC_OscConfig+0x348>
 8002b2a:	4b70      	ldr	r3, [pc, #448]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b32:	4a6e      	ldr	r2, [pc, #440]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002b34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b38:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b3a:	e075      	b.n	8002c28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	069b      	lsls	r3, r3, #26
 8002b4a:	4968      	ldr	r1, [pc, #416]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b50:	e06a      	b.n	8002c28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b52:	4b66      	ldr	r3, [pc, #408]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	4962      	ldr	r1, [pc, #392]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b66:	e05f      	b.n	8002c28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d042      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b70:	4b5e      	ldr	r3, [pc, #376]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a5d      	ldr	r2, [pc, #372]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fdaa 	bl	80016d4 <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b84:	f7fe fda6 	bl	80016d4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e280      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b96:	4b55      	ldr	r3, [pc, #340]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ba2:	f7fe fda3 	bl	80016ec <HAL_GetREVID>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d817      	bhi.n	8002be0 <HAL_RCC_OscConfig+0x3ec>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d108      	bne.n	8002bca <HAL_RCC_OscConfig+0x3d6>
 8002bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002bc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002bc6:	6053      	str	r3, [r2, #4]
 8002bc8:	e02e      	b.n	8002c28 <HAL_RCC_OscConfig+0x434>
 8002bca:	4b48      	ldr	r3, [pc, #288]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	069b      	lsls	r3, r3, #26
 8002bd8:	4944      	ldr	r1, [pc, #272]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
 8002bde:	e023      	b.n	8002c28 <HAL_RCC_OscConfig+0x434>
 8002be0:	4b42      	ldr	r3, [pc, #264]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	493f      	ldr	r1, [pc, #252]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
 8002bf4:	e018      	b.n	8002c28 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a3c      	ldr	r2, [pc, #240]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fe fd67 	bl	80016d4 <HAL_GetTick>
 8002c06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fd63 	bl	80016d4 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e23d      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c1c:	4b33      	ldr	r3, [pc, #204]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d036      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d019      	beq.n	8002c70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c40:	4a2a      	ldr	r2, [pc, #168]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fd44 	bl	80016d4 <HAL_GetTick>
 8002c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe fd40 	bl	80016d4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e21a      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c62:	4b22      	ldr	r3, [pc, #136]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x45c>
 8002c6e:	e018      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b1e      	ldr	r3, [pc, #120]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c74:	4a1d      	ldr	r2, [pc, #116]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fd2a 	bl	80016d4 <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe fd26 	bl	80016d4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e200      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c96:	4b15      	ldr	r3, [pc, #84]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d039      	beq.n	8002d22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a0c      	ldr	r2, [pc, #48]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002cbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fd07 	bl	80016d4 <HAL_GetTick>
 8002cc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cca:	f7fe fd03 	bl	80016d4 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e1dd      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <HAL_RCC_OscConfig+0x4f8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x4d6>
 8002ce8:	e01b      	b.n	8002d22 <HAL_RCC_OscConfig+0x52e>
 8002cea:	bf00      	nop
 8002cec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cf0:	4b9b      	ldr	r3, [pc, #620]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a9a      	ldr	r2, [pc, #616]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cfc:	f7fe fcea 	bl	80016d4 <HAL_GetTick>
 8002d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d04:	f7fe fce6 	bl	80016d4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1c0      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d16:	4b92      	ldr	r3, [pc, #584]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8081 	beq.w	8002e32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d30:	4b8c      	ldr	r3, [pc, #560]	@ (8002f64 <HAL_RCC_OscConfig+0x770>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a8b      	ldr	r2, [pc, #556]	@ (8002f64 <HAL_RCC_OscConfig+0x770>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d3c:	f7fe fcca 	bl	80016d4 <HAL_GetTick>
 8002d40:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d44:	f7fe fcc6 	bl	80016d4 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1a0      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d56:	4b83      	ldr	r3, [pc, #524]	@ (8002f64 <HAL_RCC_OscConfig+0x770>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d106      	bne.n	8002d78 <HAL_RCC_OscConfig+0x584>
 8002d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d76:	e02d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x5e0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x5a6>
 8002d80:	4b77      	ldr	r3, [pc, #476]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d84:	4a76      	ldr	r2, [pc, #472]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8c:	4b74      	ldr	r3, [pc, #464]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	4a73      	ldr	r2, [pc, #460]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002d92:	f023 0304 	bic.w	r3, r3, #4
 8002d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d98:	e01c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x5e0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5c8>
 8002da2:	4b6f      	ldr	r3, [pc, #444]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da6:	4a6e      	ldr	r2, [pc, #440]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dae:	4b6c      	ldr	r3, [pc, #432]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	4a6b      	ldr	r2, [pc, #428]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x5e0>
 8002dbc:	4b68      	ldr	r3, [pc, #416]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc0:	4a67      	ldr	r2, [pc, #412]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc8:	4b65      	ldr	r3, [pc, #404]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dcc:	4a64      	ldr	r2, [pc, #400]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d015      	beq.n	8002e08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fc7a 	bl	80016d4 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe fc76 	bl	80016d4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e14e      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dfa:	4b59      	ldr	r3, [pc, #356]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ee      	beq.n	8002de4 <HAL_RCC_OscConfig+0x5f0>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe fc64 	bl	80016d4 <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe fc60 	bl	80016d4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e138      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e26:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ee      	bne.n	8002e10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 812d 	beq.w	8003096 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e3c:	4b48      	ldr	r3, [pc, #288]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e44:	2b18      	cmp	r3, #24
 8002e46:	f000 80bd 	beq.w	8002fc4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	f040 809e 	bne.w	8002f90 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e54:	4b42      	ldr	r3, [pc, #264]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a41      	ldr	r2, [pc, #260]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe fc38 	bl	80016d4 <HAL_GetTick>
 8002e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe fc34 	bl	80016d4 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e10e      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e7a:	4b39      	ldr	r3, [pc, #228]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e86:	4b36      	ldr	r3, [pc, #216]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002e88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e8a:	4b37      	ldr	r3, [pc, #220]	@ (8002f68 <HAL_RCC_OscConfig+0x774>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	4931      	ldr	r1, [pc, #196]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	025b      	lsls	r3, r3, #9
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	061b      	lsls	r3, r3, #24
 8002ecc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ed0:	4923      	ldr	r1, [pc, #140]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ed6:	4b22      	ldr	r3, [pc, #136]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	4a21      	ldr	r2, [pc, #132]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee6:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_RCC_OscConfig+0x778>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eee:	00d2      	lsls	r2, r2, #3
 8002ef0:	491b      	ldr	r1, [pc, #108]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	f023 020c 	bic.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	4917      	ldr	r1, [pc, #92]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f08:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	f023 0202 	bic.w	r2, r3, #2
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f14:	4912      	ldr	r1, [pc, #72]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	4a10      	ldr	r2, [pc, #64]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f26:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f32:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	4a07      	ldr	r2, [pc, #28]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a04      	ldr	r2, [pc, #16]	@ (8002f60 <HAL_RCC_OscConfig+0x76c>)
 8002f50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fe fbbd 	bl	80016d4 <HAL_GetTick>
 8002f5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f5c:	e011      	b.n	8002f82 <HAL_RCC_OscConfig+0x78e>
 8002f5e:	bf00      	nop
 8002f60:	58024400 	.word	0x58024400
 8002f64:	58024800 	.word	0x58024800
 8002f68:	fffffc0c 	.word	0xfffffc0c
 8002f6c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe fbb0 	bl	80016d4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e08a      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f82:	4b47      	ldr	r3, [pc, #284]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x77c>
 8002f8e:	e082      	b.n	8003096 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b43      	ldr	r3, [pc, #268]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a42      	ldr	r2, [pc, #264]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8002f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fb9a 	bl	80016d4 <HAL_GetTick>
 8002fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe fb96 	bl	80016d4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e070      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x7b0>
 8002fc2:	e068      	b.n	8003096 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fc4:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fca:	4b35      	ldr	r3, [pc, #212]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d031      	beq.n	800303c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0203 	and.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d12a      	bne.n	800303c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d122      	bne.n	800303c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d11a      	bne.n	800303c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	0a5b      	lsrs	r3, r3, #9
 800300a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003012:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d111      	bne.n	800303c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003024:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d108      	bne.n	800303c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	0e1b      	lsrs	r3, r3, #24
 800302e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003036:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e02b      	b.n	8003098 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003040:	4b17      	ldr	r3, [pc, #92]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8003042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003044:	08db      	lsrs	r3, r3, #3
 8003046:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800304a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	429a      	cmp	r2, r3
 8003054:	d01f      	beq.n	8003096 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	4a11      	ldr	r2, [pc, #68]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003062:	f7fe fb37 	bl	80016d4 <HAL_GetTick>
 8003066:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003068:	bf00      	nop
 800306a:	f7fe fb33 	bl	80016d4 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	4293      	cmp	r3, r2
 8003074:	d0f9      	beq.n	800306a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003076:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8003078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800307a:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <HAL_RCC_OscConfig+0x8b0>)
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003082:	00d2      	lsls	r2, r2, #3
 8003084:	4906      	ldr	r1, [pc, #24]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8003086:	4313      	orrs	r3, r2
 8003088:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800308a:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 800308c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308e:	4a04      	ldr	r2, [pc, #16]	@ (80030a0 <HAL_RCC_OscConfig+0x8ac>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3730      	adds	r7, #48	@ 0x30
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	58024400 	.word	0x58024400
 80030a4:	ffff0007 	.word	0xffff0007

080030a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e19c      	b.n	80033f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b8a      	ldr	r3, [pc, #552]	@ (80032e8 <HAL_RCC_ClockConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d910      	bls.n	80030ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b87      	ldr	r3, [pc, #540]	@ (80032e8 <HAL_RCC_ClockConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 020f 	bic.w	r2, r3, #15
 80030d2:	4985      	ldr	r1, [pc, #532]	@ (80032e8 <HAL_RCC_ClockConfig+0x240>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b83      	ldr	r3, [pc, #524]	@ (80032e8 <HAL_RCC_ClockConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e184      	b.n	80033f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	4b7b      	ldr	r3, [pc, #492]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003104:	429a      	cmp	r2, r3
 8003106:	d908      	bls.n	800311a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003108:	4b78      	ldr	r3, [pc, #480]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	4975      	ldr	r1, [pc, #468]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 8003116:	4313      	orrs	r3, r2
 8003118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d010      	beq.n	8003148 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	4b70      	ldr	r3, [pc, #448]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003132:	429a      	cmp	r2, r3
 8003134:	d908      	bls.n	8003148 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003136:	4b6d      	ldr	r3, [pc, #436]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	496a      	ldr	r1, [pc, #424]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 8003144:	4313      	orrs	r3, r2
 8003146:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	4b64      	ldr	r3, [pc, #400]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003160:	429a      	cmp	r2, r3
 8003162:	d908      	bls.n	8003176 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003164:	4b61      	ldr	r3, [pc, #388]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	495e      	ldr	r1, [pc, #376]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 8003172:	4313      	orrs	r3, r2
 8003174:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d010      	beq.n	80031a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	4b59      	ldr	r3, [pc, #356]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800318e:	429a      	cmp	r2, r3
 8003190:	d908      	bls.n	80031a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003192:	4b56      	ldr	r3, [pc, #344]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	4953      	ldr	r1, [pc, #332]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d010      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	4b4d      	ldr	r3, [pc, #308]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	429a      	cmp	r2, r3
 80031be:	d908      	bls.n	80031d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c0:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f023 020f 	bic.w	r2, r3, #15
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4947      	ldr	r1, [pc, #284]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d055      	beq.n	800328a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031de:	4b43      	ldr	r3, [pc, #268]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4940      	ldr	r1, [pc, #256]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031f8:	4b3c      	ldr	r3, [pc, #240]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d121      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0f6      	b.n	80033f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d107      	bne.n	8003220 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003210:	4b36      	ldr	r3, [pc, #216]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d115      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0ea      	b.n	80033f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d107      	bne.n	8003238 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003228:	4b30      	ldr	r3, [pc, #192]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0de      	b.n	80033f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003238:	4b2c      	ldr	r3, [pc, #176]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0d6      	b.n	80033f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003248:	4b28      	ldr	r3, [pc, #160]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f023 0207 	bic.w	r2, r3, #7
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4925      	ldr	r1, [pc, #148]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 8003256:	4313      	orrs	r3, r2
 8003258:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325a:	f7fe fa3b 	bl	80016d4 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003260:	e00a      	b.n	8003278 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003262:	f7fe fa37 	bl	80016d4 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e0be      	b.n	80033f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003278:	4b1c      	ldr	r3, [pc, #112]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	429a      	cmp	r2, r3
 8003288:	d1eb      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d010      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d208      	bcs.n	80032b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a6:	4b11      	ldr	r3, [pc, #68]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f023 020f 	bic.w	r2, r3, #15
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	490e      	ldr	r1, [pc, #56]	@ (80032ec <HAL_RCC_ClockConfig+0x244>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_ClockConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d214      	bcs.n	80032f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <HAL_RCC_ClockConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 020f 	bic.w	r2, r3, #15
 80032ce:	4906      	ldr	r1, [pc, #24]	@ (80032e8 <HAL_RCC_ClockConfig+0x240>)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b04      	ldr	r3, [pc, #16]	@ (80032e8 <HAL_RCC_ClockConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e086      	b.n	80033f6 <HAL_RCC_ClockConfig+0x34e>
 80032e8:	52002000 	.word	0x52002000
 80032ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d010      	beq.n	800331e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	4b3f      	ldr	r3, [pc, #252]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003308:	429a      	cmp	r2, r3
 800330a:	d208      	bcs.n	800331e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800330c:	4b3c      	ldr	r3, [pc, #240]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	4939      	ldr	r1, [pc, #228]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 800331a:	4313      	orrs	r3, r2
 800331c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d010      	beq.n	800334c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	4b34      	ldr	r3, [pc, #208]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003336:	429a      	cmp	r2, r3
 8003338:	d208      	bcs.n	800334c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800333a:	4b31      	ldr	r3, [pc, #196]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	492e      	ldr	r1, [pc, #184]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 8003348:	4313      	orrs	r3, r2
 800334a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	4b28      	ldr	r3, [pc, #160]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003364:	429a      	cmp	r2, r3
 8003366:	d208      	bcs.n	800337a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003368:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4922      	ldr	r1, [pc, #136]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 8003376:	4313      	orrs	r3, r2
 8003378:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d010      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003392:	429a      	cmp	r2, r3
 8003394:	d208      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003396:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4917      	ldr	r1, [pc, #92]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033a8:	f000 f834 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b14      	ldr	r3, [pc, #80]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	4912      	ldr	r1, [pc, #72]	@ (8003404 <HAL_RCC_ClockConfig+0x35c>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003400 <HAL_RCC_ClockConfig+0x358>)
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003404 <HAL_RCC_ClockConfig+0x35c>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
 80033dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <HAL_RCC_ClockConfig+0x360>)
 80033de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033e0:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <HAL_RCC_ClockConfig+0x364>)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <HAL_RCC_ClockConfig+0x368>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe f928 	bl	8001640 <HAL_InitTick>
 80033f0:	4603      	mov	r3, r0
 80033f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	58024400 	.word	0x58024400
 8003404:	08009ad0 	.word	0x08009ad0
 8003408:	24000004 	.word	0x24000004
 800340c:	24000000 	.word	0x24000000
 8003410:	24000008 	.word	0x24000008

08003414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	@ 0x24
 8003418:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341a:	4bb3      	ldr	r3, [pc, #716]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003422:	2b18      	cmp	r3, #24
 8003424:	f200 8155 	bhi.w	80036d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003428:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <HAL_RCC_GetSysClockFreq+0x1c>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003495 	.word	0x08003495
 8003434:	080036d3 	.word	0x080036d3
 8003438:	080036d3 	.word	0x080036d3
 800343c:	080036d3 	.word	0x080036d3
 8003440:	080036d3 	.word	0x080036d3
 8003444:	080036d3 	.word	0x080036d3
 8003448:	080036d3 	.word	0x080036d3
 800344c:	080036d3 	.word	0x080036d3
 8003450:	080034bb 	.word	0x080034bb
 8003454:	080036d3 	.word	0x080036d3
 8003458:	080036d3 	.word	0x080036d3
 800345c:	080036d3 	.word	0x080036d3
 8003460:	080036d3 	.word	0x080036d3
 8003464:	080036d3 	.word	0x080036d3
 8003468:	080036d3 	.word	0x080036d3
 800346c:	080036d3 	.word	0x080036d3
 8003470:	080034c1 	.word	0x080034c1
 8003474:	080036d3 	.word	0x080036d3
 8003478:	080036d3 	.word	0x080036d3
 800347c:	080036d3 	.word	0x080036d3
 8003480:	080036d3 	.word	0x080036d3
 8003484:	080036d3 	.word	0x080036d3
 8003488:	080036d3 	.word	0x080036d3
 800348c:	080036d3 	.word	0x080036d3
 8003490:	080034c7 	.word	0x080034c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003494:	4b94      	ldr	r3, [pc, #592]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034a0:	4b91      	ldr	r3, [pc, #580]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	08db      	lsrs	r3, r3, #3
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	4a90      	ldr	r2, [pc, #576]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
 80034b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80034b2:	e111      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034b4:	4b8d      	ldr	r3, [pc, #564]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034b6:	61bb      	str	r3, [r7, #24]
      break;
 80034b8:	e10e      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80034ba:	4b8d      	ldr	r3, [pc, #564]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034bc:	61bb      	str	r3, [r7, #24]
      break;
 80034be:	e10b      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80034c0:	4b8c      	ldr	r3, [pc, #560]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034c2:	61bb      	str	r3, [r7, #24]
      break;
 80034c4:	e108      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034c6:	4b88      	ldr	r3, [pc, #544]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034d0:	4b85      	ldr	r3, [pc, #532]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034dc:	4b82      	ldr	r3, [pc, #520]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034e6:	4b80      	ldr	r3, [pc, #512]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ea:	08db      	lsrs	r3, r3, #3
 80034ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80e1 	beq.w	80036cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b02      	cmp	r3, #2
 800350e:	f000 8083 	beq.w	8003618 <HAL_RCC_GetSysClockFreq+0x204>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b02      	cmp	r3, #2
 8003516:	f200 80a1 	bhi.w	800365c <HAL_RCC_GetSysClockFreq+0x248>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x114>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d056      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003526:	e099      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003528:	4b6f      	ldr	r3, [pc, #444]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d02d      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003534:	4b6c      	ldr	r3, [pc, #432]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	08db      	lsrs	r3, r3, #3
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	4a6b      	ldr	r2, [pc, #428]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
 8003544:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355e:	4b62      	ldr	r3, [pc, #392]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003572:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80036f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800358e:	e087      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80036fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800359e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a2:	4b51      	ldr	r3, [pc, #324]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80036f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035d2:	e065      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003700 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035e6:	4b40      	ldr	r3, [pc, #256]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80036f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800360a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800360e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003612:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003616:	e043      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003622:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003704 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800362a:	4b2f      	ldr	r3, [pc, #188]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800363a:	ed97 6a02 	vldr	s12, [r7, #8]
 800363e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80036f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800364a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800364e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003656:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800365a:	e021      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003700 <HAL_RCC_GetSysClockFreq+0x2ec>
 800366a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366e:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003682:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80036f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800368a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800368e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800369e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80036a0:	4b11      	ldr	r3, [pc, #68]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a4:	0a5b      	lsrs	r3, r3, #9
 80036a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036aa:	3301      	adds	r3, #1
 80036ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c4:	ee17 3a90 	vmov	r3, s15
 80036c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80036ca:	e005      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61bb      	str	r3, [r7, #24]
      break;
 80036d0:	e002      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036d2:	4b07      	ldr	r3, [pc, #28]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036d4:	61bb      	str	r3, [r7, #24]
      break;
 80036d6:	bf00      	nop
  }

  return sysclockfreq;
 80036d8:	69bb      	ldr	r3, [r7, #24]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3724      	adds	r7, #36	@ 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	58024400 	.word	0x58024400
 80036ec:	03d09000 	.word	0x03d09000
 80036f0:	003d0900 	.word	0x003d0900
 80036f4:	017d7840 	.word	0x017d7840
 80036f8:	46000000 	.word	0x46000000
 80036fc:	4c742400 	.word	0x4c742400
 8003700:	4a742400 	.word	0x4a742400
 8003704:	4bbebc20 	.word	0x4bbebc20

08003708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800370e:	f7ff fe81 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 8003712:	4602      	mov	r2, r0
 8003714:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x50>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	490f      	ldr	r1, [pc, #60]	@ (800375c <HAL_RCC_GetHCLKFreq+0x54>)
 8003720:	5ccb      	ldrb	r3, [r1, r3]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800372c:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x50>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	4a09      	ldr	r2, [pc, #36]	@ (800375c <HAL_RCC_GetHCLKFreq+0x54>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	fa22 f303 	lsr.w	r3, r2, r3
 8003742:	4a07      	ldr	r2, [pc, #28]	@ (8003760 <HAL_RCC_GetHCLKFreq+0x58>)
 8003744:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003746:	4a07      	ldr	r2, [pc, #28]	@ (8003764 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800374c:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <HAL_RCC_GetHCLKFreq+0x58>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	58024400 	.word	0x58024400
 800375c:	08009ad0 	.word	0x08009ad0
 8003760:	24000004 	.word	0x24000004
 8003764:	24000000 	.word	0x24000000

08003768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800376c:	f7ff ffcc 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	4904      	ldr	r1, [pc, #16]	@ (8003790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	58024400 	.word	0x58024400
 8003790:	08009ad0 	.word	0x08009ad0

08003794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003798:	f7ff ffb6 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4904      	ldr	r1, [pc, #16]	@ (80037bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	58024400 	.word	0x58024400
 80037bc:	08009ad0 	.word	0x08009ad0

080037c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c4:	b0ca      	sub	sp, #296	@ 0x128
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80037e4:	2500      	movs	r5, #0
 80037e6:	ea54 0305 	orrs.w	r3, r4, r5
 80037ea:	d049      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037f6:	d02f      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037fc:	d828      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003802:	d01a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003804:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003808:	d822      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800380e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003812:	d007      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003814:	e01c      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003816:	4bb8      	ldr	r3, [pc, #736]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381a:	4ab7      	ldr	r2, [pc, #732]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800381c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003822:	e01a      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	3308      	adds	r3, #8
 800382a:	2102      	movs	r1, #2
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fc8f 	bl	8005150 <RCCEx_PLL2_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003838:	e00f      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	3328      	adds	r3, #40	@ 0x28
 8003840:	2102      	movs	r1, #2
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fd36 	bl	80052b4 <RCCEx_PLL3_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800384e:	e004      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003862:	4ba5      	ldr	r3, [pc, #660]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003866:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003870:	4aa1      	ldr	r2, [pc, #644]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003872:	430b      	orrs	r3, r1
 8003874:	6513      	str	r3, [r2, #80]	@ 0x50
 8003876:	e003      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800388c:	f04f 0900 	mov.w	r9, #0
 8003890:	ea58 0309 	orrs.w	r3, r8, r9
 8003894:	d047      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389c:	2b04      	cmp	r3, #4
 800389e:	d82a      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80038a0:	a201      	add	r2, pc, #4	@ (adr r2, 80038a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038bd 	.word	0x080038bd
 80038ac:	080038cb 	.word	0x080038cb
 80038b0:	080038e1 	.word	0x080038e1
 80038b4:	080038ff 	.word	0x080038ff
 80038b8:	080038ff 	.word	0x080038ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038bc:	4b8e      	ldr	r3, [pc, #568]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	4a8d      	ldr	r2, [pc, #564]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038c8:	e01a      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	3308      	adds	r3, #8
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 fc3c 	bl	8005150 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038de:	e00f      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	3328      	adds	r3, #40	@ 0x28
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 fce3 	bl	80052b4 <RCCEx_PLL3_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038f4:	e004      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038fc:	e000      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003908:	4b7b      	ldr	r3, [pc, #492]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800390a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390c:	f023 0107 	bic.w	r1, r3, #7
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003916:	4a78      	ldr	r2, [pc, #480]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003918:	430b      	orrs	r3, r1
 800391a:	6513      	str	r3, [r2, #80]	@ 0x50
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003932:	f04f 0b00 	mov.w	fp, #0
 8003936:	ea5a 030b 	orrs.w	r3, sl, fp
 800393a:	d04c      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003946:	d030      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800394c:	d829      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800394e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003950:	d02d      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003952:	2bc0      	cmp	r3, #192	@ 0xc0
 8003954:	d825      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003956:	2b80      	cmp	r3, #128	@ 0x80
 8003958:	d018      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800395a:	2b80      	cmp	r3, #128	@ 0x80
 800395c:	d821      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003962:	2b40      	cmp	r3, #64	@ 0x40
 8003964:	d007      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003966:	e01c      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4b63      	ldr	r3, [pc, #396]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	4a62      	ldr	r2, [pc, #392]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003974:	e01c      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	3308      	adds	r3, #8
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f001 fbe6 	bl	8005150 <RCCEx_PLL2_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800398a:	e011      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	3328      	adds	r3, #40	@ 0x28
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fc8d 	bl	80052b4 <RCCEx_PLL3_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039a0:	e006      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80039ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039b8:	4b4f      	ldr	r3, [pc, #316]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c6:	4a4c      	ldr	r2, [pc, #304]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80039cc:	e003      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039f0:	460b      	mov	r3, r1
 80039f2:	4313      	orrs	r3, r2
 80039f4:	d053      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a02:	d035      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003a04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a08:	d82e      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a0e:	d031      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a14:	d828      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a1a:	d01a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003a1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a20:	d822      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a2a:	d007      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2e:	4b32      	ldr	r3, [pc, #200]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	4a31      	ldr	r2, [pc, #196]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e01c      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	3308      	adds	r3, #8
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fb83 	bl	8005150 <RCCEx_PLL2_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a50:	e011      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a56:	3328      	adds	r3, #40	@ 0x28
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 fc2a 	bl	80052b4 <RCCEx_PLL3_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a66:	e006      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a70:	bf00      	nop
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003aaa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ab4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4313      	orrs	r3, r2
 8003abc:	d056      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ac6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aca:	d038      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003acc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ad0:	d831      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ad2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ad6:	d034      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ad8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003adc:	d82b      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae2:	d01d      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae8:	d825      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003af4:	e01f      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003af6:	bf00      	nop
 8003af8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afc:	4ba2      	ldr	r3, [pc, #648]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	4aa1      	ldr	r2, [pc, #644]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b08:	e01c      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	3308      	adds	r3, #8
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 fb1c 	bl	8005150 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b1e:	e011      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	3328      	adds	r3, #40	@ 0x28
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 fbc3 	bl	80052b4 <RCCEx_PLL3_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b34:	e006      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b3c:	e002      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b3e:	bf00      	nop
 8003b40:	e000      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b4c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b5c:	4a8a      	ldr	r2, [pc, #552]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b62:	e003      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d03a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b92:	2b30      	cmp	r3, #48	@ 0x30
 8003b94:	d01f      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b96:	2b30      	cmp	r3, #48	@ 0x30
 8003b98:	d819      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d815      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d019      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d111      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003baa:	4b77      	ldr	r3, [pc, #476]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	4a76      	ldr	r2, [pc, #472]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003bb6:	e011      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f001 fac5 	bl	8005150 <RCCEx_PLL2_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bd4:	e002      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003be4:	4b68      	ldr	r3, [pc, #416]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	4a65      	ldr	r2, [pc, #404]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bf8:	e003      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	d051      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c2c:	d035      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c32:	d82e      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c38:	d031      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c3e:	d828      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c44:	d01a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4a:	d822      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c54:	d007      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c56:	e01c      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c58:	4b4b      	ldr	r3, [pc, #300]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c64:	e01c      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 fa6e 	bl	8005150 <RCCEx_PLL2_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c7a:	e011      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	3328      	adds	r3, #40	@ 0x28
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 fb15 	bl	80052b4 <RCCEx_PLL3_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c90:	e006      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c98:	e002      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ca8:	4b37      	ldr	r3, [pc, #220]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb6:	4a34      	ldr	r2, [pc, #208]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cbc:	e003      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cdc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	d056      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf0:	d033      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cf2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf6:	d82c      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cfc:	d02f      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d02:	d826      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d08:	d02b      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003d0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d0e:	d820      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d14:	d012      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d1a:	d81a      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d022      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d24:	d115      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 fa0e 	bl	8005150 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d3a:	e015      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d40:	3328      	adds	r3, #40	@ 0x28
 8003d42:	2101      	movs	r1, #1
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 fab5 	bl	80052b4 <RCCEx_PLL3_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d50:	e00a      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e004      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d70:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d7e:	4a02      	ldr	r2, [pc, #8]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d86:	bf00      	nop
 8003d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003daa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d055      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dc0:	d033      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dc6:	d82c      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dcc:	d02f      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd2:	d826      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dd8:	d02b      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003dda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dde:	d820      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003de4:	d012      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dea:	d81a      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d022      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003df4:	d115      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 f9a6 	bl	8005150 <RCCEx_PLL2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e015      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	3328      	adds	r3, #40	@ 0x28
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 fa4d 	bl	80052b4 <RCCEx_PLL3_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e20:	e00a      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e28:	e006      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e004      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e40:	4ba3      	ldr	r3, [pc, #652]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e50:	4a9f      	ldr	r2, [pc, #636]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e52:	430b      	orrs	r3, r1
 8003e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	d037      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e8a:	d00e      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e90:	d816      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e9a:	d111      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9c:	4b8c      	ldr	r3, [pc, #560]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	4a8b      	ldr	r2, [pc, #556]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ea8:	e00f      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	3308      	adds	r3, #8
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 f94c 	bl	8005150 <RCCEx_PLL2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ebe:	e004      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ec6:	e000      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee0:	4a7b      	ldr	r2, [pc, #492]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ee6:	e003      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	d039      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d81c      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f20 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f5d 	.word	0x08003f5d
 8003f24:	08003f31 	.word	0x08003f31
 8003f28:	08003f3f 	.word	0x08003f3f
 8003f2c:	08003f5d 	.word	0x08003f5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f30:	4b67      	ldr	r3, [pc, #412]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	4a66      	ldr	r2, [pc, #408]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f3c:	e00f      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f42:	3308      	adds	r3, #8
 8003f44:	2102      	movs	r1, #2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f902 	bl	8005150 <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f66:	4b5a      	ldr	r3, [pc, #360]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6a:	f023 0103 	bic.w	r1, r3, #3
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f74:	4a56      	ldr	r2, [pc, #344]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f000 809f 	beq.w	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a4a      	ldr	r2, [pc, #296]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb2:	f7fd fb8f 	bl	80016d4 <HAL_GetTick>
 8003fb6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fba:	e00b      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fd fb8a 	bl	80016d4 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b64      	cmp	r3, #100	@ 0x64
 8003fca:	d903      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ed      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d179      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fe8:	4b39      	ldr	r3, [pc, #228]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ff4:	4053      	eors	r3, r2
 8003ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d015      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ffe:	4b34      	ldr	r3, [pc, #208]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004006:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800400a:	4b31      	ldr	r3, [pc, #196]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	4a30      	ldr	r2, [pc, #192]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004014:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004016:	4b2e      	ldr	r3, [pc, #184]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	4a2d      	ldr	r2, [pc, #180]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004020:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004022:	4a2b      	ldr	r2, [pc, #172]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004028:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004036:	d118      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd fb4c 	bl	80016d4 <HAL_GetTick>
 800403c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004040:	e00d      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fd fb47 	bl	80016d4 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800404c:	1ad2      	subs	r2, r2, r3
 800404e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004052:	429a      	cmp	r2, r3
 8004054:	d903      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800405c:	e005      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800405e:	4b1c      	ldr	r3, [pc, #112]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0eb      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800406a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406e:	2b00      	cmp	r3, #0
 8004070:	d129      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800407a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004082:	d10e      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004084:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004094:	091a      	lsrs	r2, r3, #4
 8004096:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004098:	4013      	ands	r3, r2
 800409a:	4a0d      	ldr	r2, [pc, #52]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409c:	430b      	orrs	r3, r1
 800409e:	6113      	str	r3, [r2, #16]
 80040a0:	e005      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80040a2:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	4a0a      	ldr	r2, [pc, #40]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040ac:	6113      	str	r3, [r2, #16]
 80040ae:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040be:	4a04      	ldr	r2, [pc, #16]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c4:	e00e      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80040ce:	e009      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80040d0:	58024400 	.word	0x58024400
 80040d4:	58024800 	.word	0x58024800
 80040d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f002 0301 	and.w	r3, r2, #1
 80040f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	f000 8089 	beq.w	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800410c:	2b28      	cmp	r3, #40	@ 0x28
 800410e:	d86b      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004110:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	080041f1 	.word	0x080041f1
 800411c:	080041e9 	.word	0x080041e9
 8004120:	080041e9 	.word	0x080041e9
 8004124:	080041e9 	.word	0x080041e9
 8004128:	080041e9 	.word	0x080041e9
 800412c:	080041e9 	.word	0x080041e9
 8004130:	080041e9 	.word	0x080041e9
 8004134:	080041e9 	.word	0x080041e9
 8004138:	080041bd 	.word	0x080041bd
 800413c:	080041e9 	.word	0x080041e9
 8004140:	080041e9 	.word	0x080041e9
 8004144:	080041e9 	.word	0x080041e9
 8004148:	080041e9 	.word	0x080041e9
 800414c:	080041e9 	.word	0x080041e9
 8004150:	080041e9 	.word	0x080041e9
 8004154:	080041e9 	.word	0x080041e9
 8004158:	080041d3 	.word	0x080041d3
 800415c:	080041e9 	.word	0x080041e9
 8004160:	080041e9 	.word	0x080041e9
 8004164:	080041e9 	.word	0x080041e9
 8004168:	080041e9 	.word	0x080041e9
 800416c:	080041e9 	.word	0x080041e9
 8004170:	080041e9 	.word	0x080041e9
 8004174:	080041e9 	.word	0x080041e9
 8004178:	080041f1 	.word	0x080041f1
 800417c:	080041e9 	.word	0x080041e9
 8004180:	080041e9 	.word	0x080041e9
 8004184:	080041e9 	.word	0x080041e9
 8004188:	080041e9 	.word	0x080041e9
 800418c:	080041e9 	.word	0x080041e9
 8004190:	080041e9 	.word	0x080041e9
 8004194:	080041e9 	.word	0x080041e9
 8004198:	080041f1 	.word	0x080041f1
 800419c:	080041e9 	.word	0x080041e9
 80041a0:	080041e9 	.word	0x080041e9
 80041a4:	080041e9 	.word	0x080041e9
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	080041e9 	.word	0x080041e9
 80041b0:	080041e9 	.word	0x080041e9
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	080041f1 	.word	0x080041f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c0:	3308      	adds	r3, #8
 80041c2:	2101      	movs	r1, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 ffc3 	bl	8005150 <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041d0:	e00f      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	3328      	adds	r3, #40	@ 0x28
 80041d8:	2101      	movs	r1, #1
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 f86a 	bl	80052b4 <RCCEx_PLL3_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041e6:	e004      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ee:	e000      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041fa:	4bbf      	ldr	r3, [pc, #764]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004208:	4abb      	ldr	r2, [pc, #748]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800420a:	430b      	orrs	r3, r1
 800420c:	6553      	str	r3, [r2, #84]	@ 0x54
 800420e:	e003      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004214:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f002 0302 	and.w	r3, r2, #2
 8004224:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004228:	2300      	movs	r3, #0
 800422a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800422e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004232:	460b      	mov	r3, r1
 8004234:	4313      	orrs	r3, r2
 8004236:	d041      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800423e:	2b05      	cmp	r3, #5
 8004240:	d824      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004242:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	08004295 	.word	0x08004295
 800424c:	08004261 	.word	0x08004261
 8004250:	08004277 	.word	0x08004277
 8004254:	08004295 	.word	0x08004295
 8004258:	08004295 	.word	0x08004295
 800425c:	08004295 	.word	0x08004295
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	3308      	adds	r3, #8
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f000 ff71 	bl	8005150 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004274:	e00f      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	3328      	adds	r3, #40	@ 0x28
 800427c:	2101      	movs	r1, #1
 800427e:	4618      	mov	r0, r3
 8004280:	f001 f818 	bl	80052b4 <RCCEx_PLL3_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800429e:	4b96      	ldr	r3, [pc, #600]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a2:	f023 0107 	bic.w	r1, r3, #7
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ac:	4a92      	ldr	r2, [pc, #584]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042ae:	430b      	orrs	r3, r1
 80042b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80042b2:	e003      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f002 0304 	and.w	r3, r2, #4
 80042c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4313      	orrs	r3, r2
 80042da:	d044      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d825      	bhi.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042e8:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	0800433d 	.word	0x0800433d
 80042f4:	08004309 	.word	0x08004309
 80042f8:	0800431f 	.word	0x0800431f
 80042fc:	0800433d 	.word	0x0800433d
 8004300:	0800433d 	.word	0x0800433d
 8004304:	0800433d 	.word	0x0800433d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430c:	3308      	adds	r3, #8
 800430e:	2101      	movs	r1, #1
 8004310:	4618      	mov	r0, r3
 8004312:	f000 ff1d 	bl	8005150 <RCCEx_PLL2_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800431c:	e00f      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	3328      	adds	r3, #40	@ 0x28
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ffc4 	bl	80052b4 <RCCEx_PLL3_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004332:	e004      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800433c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004346:	4b6c      	ldr	r3, [pc, #432]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434a:	f023 0107 	bic.w	r1, r3, #7
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004356:	4a68      	ldr	r2, [pc, #416]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004358:	430b      	orrs	r3, r1
 800435a:	6593      	str	r3, [r2, #88]	@ 0x58
 800435c:	e003      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f002 0320 	and.w	r3, r2, #32
 8004372:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004376:	2300      	movs	r3, #0
 8004378:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800437c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004380:	460b      	mov	r3, r1
 8004382:	4313      	orrs	r3, r2
 8004384:	d055      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004392:	d033      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004398:	d82c      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439e:	d02f      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a4:	d826      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043aa:	d02b      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80043ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043b0:	d820      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043b6:	d012      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80043b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043bc:	d81a      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d022      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80043c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043c6:	d115      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043cc:	3308      	adds	r3, #8
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 febd 	bl	8005150 <RCCEx_PLL2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043dc:	e015      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	3328      	adds	r3, #40	@ 0x28
 80043e4:	2102      	movs	r1, #2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 ff64 	bl	80052b4 <RCCEx_PLL3_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043f2:	e00a      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043fa:	e006      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043fc:	bf00      	nop
 80043fe:	e004      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004400:	bf00      	nop
 8004402:	e002      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10b      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004412:	4b39      	ldr	r3, [pc, #228]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004416:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	4a35      	ldr	r2, [pc, #212]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004424:	430b      	orrs	r3, r1
 8004426:	6553      	str	r3, [r2, #84]	@ 0x54
 8004428:	e003      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800443e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004442:	2300      	movs	r3, #0
 8004444:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004448:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800444c:	460b      	mov	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	d058      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800445a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800445e:	d033      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004460:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004464:	d82c      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800446a:	d02f      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004470:	d826      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004472:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004476:	d02b      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004478:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800447c:	d820      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800447e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004482:	d012      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004488:	d81a      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d022      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004492:	d115      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004498:	3308      	adds	r3, #8
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fe57 	bl	8005150 <RCCEx_PLL2_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044a8:	e015      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	3328      	adds	r3, #40	@ 0x28
 80044b0:	2102      	movs	r1, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fefe 	bl	80052b4 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044be:	e00a      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044c6:	e006      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044c8:	bf00      	nop
 80044ca:	e004      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044cc:	bf00      	nop
 80044ce:	e002      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044d0:	bf00      	nop
 80044d2:	e000      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10e      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044de:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ee:	4a02      	ldr	r2, [pc, #8]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f4:	e006      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044f6:	bf00      	nop
 80044f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004514:	2300      	movs	r3, #0
 8004516:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800451a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800451e:	460b      	mov	r3, r1
 8004520:	4313      	orrs	r3, r2
 8004522:	d055      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800452c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004530:	d033      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004532:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004536:	d82c      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453c:	d02f      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004542:	d826      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004544:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004548:	d02b      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800454a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800454e:	d820      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004554:	d012      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455a:	d81a      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d022      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004564:	d115      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456a:	3308      	adds	r3, #8
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fdee 	bl	8005150 <RCCEx_PLL2_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800457a:	e015      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004580:	3328      	adds	r3, #40	@ 0x28
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fe95 	bl	80052b4 <RCCEx_PLL3_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004590:	e00a      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004598:	e006      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800459a:	bf00      	nop
 800459c:	e004      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800459e:	bf00      	nop
 80045a0:	e002      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10b      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045b0:	4ba1      	ldr	r3, [pc, #644]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045c0:	4a9d      	ldr	r2, [pc, #628]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c2:	430b      	orrs	r3, r1
 80045c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c6:	e003      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f002 0308 	and.w	r3, r2, #8
 80045dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045ea:	460b      	mov	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	d01e      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fc:	d10c      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004602:	3328      	adds	r3, #40	@ 0x28
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fe54 	bl	80052b4 <RCCEx_PLL3_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004618:	4b87      	ldr	r3, [pc, #540]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004628:	4a83      	ldr	r2, [pc, #524]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800462a:	430b      	orrs	r3, r1
 800462c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f002 0310 	and.w	r3, r2, #16
 800463a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004644:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004648:	460b      	mov	r3, r1
 800464a:	4313      	orrs	r3, r2
 800464c:	d01e      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800465a:	d10c      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004660:	3328      	adds	r3, #40	@ 0x28
 8004662:	2102      	movs	r1, #2
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fe25 	bl	80052b4 <RCCEx_PLL3_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004676:	4b70      	ldr	r3, [pc, #448]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004686:	4a6c      	ldr	r2, [pc, #432]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004688:	430b      	orrs	r3, r1
 800468a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	d03e      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046b8:	d022      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80046ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046be:	d81b      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c8:	d00b      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80046ca:	e015      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	3308      	adds	r3, #8
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fd3b 	bl	8005150 <RCCEx_PLL2_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046e0:	e00f      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e6:	3328      	adds	r3, #40	@ 0x28
 80046e8:	2102      	movs	r1, #2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fde2 	bl	80052b4 <RCCEx_PLL3_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046f6:	e004      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046fe:	e000      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800470a:	4b4b      	ldr	r3, [pc, #300]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800471a:	4a47      	ldr	r2, [pc, #284]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800471c:	430b      	orrs	r3, r1
 800471e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004720:	e003      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004736:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004738:	2300      	movs	r3, #0
 800473a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800473c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004740:	460b      	mov	r3, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	d03b      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004752:	d01f      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004754:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004758:	d818      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800475e:	d003      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004760:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004764:	d007      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004766:	e011      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004768:	4b33      	ldr	r3, [pc, #204]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	4a32      	ldr	r2, [pc, #200]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004774:	e00f      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	3328      	adds	r3, #40	@ 0x28
 800477c:	2101      	movs	r1, #1
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fd98 	bl	80052b4 <RCCEx_PLL3_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800478a:	e004      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004792:	e000      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800479e:	4b26      	ldr	r3, [pc, #152]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	4a22      	ldr	r2, [pc, #136]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80047b4:	e003      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80047cc:	2300      	movs	r3, #0
 80047ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80047d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047d4:	460b      	mov	r3, r1
 80047d6:	4313      	orrs	r3, r2
 80047d8:	d034      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e8:	d007      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047ea:	e011      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ec:	4b12      	ldr	r3, [pc, #72]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	4a11      	ldr	r2, [pc, #68]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047f8:	e00e      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	3308      	adds	r3, #8
 8004800:	2102      	movs	r1, #2
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fca4 	bl	8005150 <RCCEx_PLL2_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800480e:	e003      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10d      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004820:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004824:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482e:	4a02      	ldr	r2, [pc, #8]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004830:	430b      	orrs	r3, r1
 8004832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004834:	e006      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004836:	bf00      	nop
 8004838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004852:	2300      	movs	r3, #0
 8004854:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004856:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800485a:	460b      	mov	r3, r1
 800485c:	4313      	orrs	r3, r2
 800485e:	d00c      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004864:	3328      	adds	r3, #40	@ 0x28
 8004866:	2102      	movs	r1, #2
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fd23 	bl	80052b4 <RCCEx_PLL3_Config>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004886:	663b      	str	r3, [r7, #96]	@ 0x60
 8004888:	2300      	movs	r3, #0
 800488a:	667b      	str	r3, [r7, #100]	@ 0x64
 800488c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d038      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800489e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a2:	d018      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80048a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a8:	d811      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ae:	d014      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80048b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b4:	d80b      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d011      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80048ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048be:	d106      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c0:	4bc3      	ldr	r3, [pc, #780]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	4ac2      	ldr	r2, [pc, #776]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048cc:	e008      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048d4:	e004      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048e8:	4bb9      	ldr	r3, [pc, #740]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f8:	4ab5      	ldr	r2, [pc, #724]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048fa:	430b      	orrs	r3, r1
 80048fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80048fe:	e003      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004914:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004916:	2300      	movs	r3, #0
 8004918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800491a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d009      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004924:	4baa      	ldr	r3, [pc, #680]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004928:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004932:	4aa7      	ldr	r2, [pc, #668]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004934:	430b      	orrs	r3, r1
 8004936:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004944:	653b      	str	r3, [r7, #80]	@ 0x50
 8004946:	2300      	movs	r3, #0
 8004948:	657b      	str	r3, [r7, #84]	@ 0x54
 800494a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800494e:	460b      	mov	r3, r1
 8004950:	4313      	orrs	r3, r2
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004954:	4b9e      	ldr	r3, [pc, #632]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004960:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004964:	4a9a      	ldr	r2, [pc, #616]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004966:	430b      	orrs	r3, r1
 8004968:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004978:	2300      	movs	r3, #0
 800497a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800497c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004980:	460b      	mov	r3, r1
 8004982:	4313      	orrs	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004986:	4b92      	ldr	r3, [pc, #584]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800498e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004994:	4a8e      	ldr	r2, [pc, #568]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004996:	430b      	orrs	r3, r1
 8004998:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800499a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80049a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80049a8:	2300      	movs	r3, #0
 80049aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80049b0:	460b      	mov	r3, r1
 80049b2:	4313      	orrs	r3, r2
 80049b4:	d00e      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049b6:	4b86      	ldr	r3, [pc, #536]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	4a85      	ldr	r2, [pc, #532]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049c0:	6113      	str	r3, [r2, #16]
 80049c2:	4b83      	ldr	r3, [pc, #524]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c4:	6919      	ldr	r1, [r3, #16]
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049ce:	4a80      	ldr	r2, [pc, #512]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049e2:	2300      	movs	r3, #0
 80049e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049ea:	460b      	mov	r3, r1
 80049ec:	4313      	orrs	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049f0:	4b77      	ldr	r3, [pc, #476]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fe:	4a74      	ldr	r2, [pc, #464]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a00:	430b      	orrs	r3, r1
 8004a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a12:	2300      	movs	r3, #0
 8004a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a20:	4b6b      	ldr	r3, [pc, #428]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a30:	4a67      	ldr	r2, [pc, #412]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a32:	430b      	orrs	r3, r1
 8004a34:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	2100      	movs	r1, #0
 8004a40:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	d011      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	3308      	adds	r3, #8
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fb78 	bl	8005150 <RCCEx_PLL2_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	2100      	movs	r1, #0
 8004a80:	6239      	str	r1, [r7, #32]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	d011      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a96:	3308      	adds	r3, #8
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fb58 	bl	8005150 <RCCEx_PLL2_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	61b9      	str	r1, [r7, #24]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004acc:	460b      	mov	r3, r1
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	d011      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	2102      	movs	r1, #2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fb38 	bl	8005150 <RCCEx_PLL2_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	2100      	movs	r1, #0
 8004b00:	6139      	str	r1, [r7, #16]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	d011      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b16:	3328      	adds	r3, #40	@ 0x28
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fbca 	bl	80052b4 <RCCEx_PLL3_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	2100      	movs	r1, #0
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	d011      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	3328      	adds	r3, #40	@ 0x28
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fbaa 	bl	80052b4 <RCCEx_PLL3_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	2100      	movs	r1, #0
 8004b80:	6039      	str	r1, [r7, #0]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	607b      	str	r3, [r7, #4]
 8004b88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	d011      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b96:	3328      	adds	r3, #40	@ 0x28
 8004b98:	2102      	movs	r1, #2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fb8a 	bl	80052b4 <RCCEx_PLL3_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004bb6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd0:	58024400 	.word	0x58024400

08004bd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bd8:	f7fe fd96 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4904      	ldr	r1, [pc, #16]	@ (8004bfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	08009ad0 	.word	0x08009ad0

08004c00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b089      	sub	sp, #36	@ 0x24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c08:	4ba1      	ldr	r3, [pc, #644]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c12:	4b9f      	ldr	r3, [pc, #636]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	0b1b      	lsrs	r3, r3, #12
 8004c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c1e:	4b9c      	ldr	r3, [pc, #624]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c2a:	4b99      	ldr	r3, [pc, #612]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2e:	08db      	lsrs	r3, r3, #3
 8004c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	fb02 f303 	mul.w	r3, r2, r3
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8111 	beq.w	8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	f000 8083 	beq.w	8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	f200 80a1 	bhi.w	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d056      	beq.n	8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c6a:	e099      	b.n	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c6c:	4b88      	ldr	r3, [pc, #544]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d02d      	beq.n	8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c78:	4b85      	ldr	r3, [pc, #532]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	08db      	lsrs	r3, r3, #3
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	4a84      	ldr	r2, [pc, #528]	@ (8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
 8004c88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cd2:	e087      	b.n	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d16:	e065      	b.n	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2a:	4b59      	ldr	r3, [pc, #356]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d5a:	e043      	b.n	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6e:	4b48      	ldr	r3, [pc, #288]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d9e:	e021      	b.n	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004daa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db2:	4b37      	ldr	r3, [pc, #220]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004de2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004de4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	0a5b      	lsrs	r3, r3, #9
 8004dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0a:	ee17 2a90 	vmov	r2, s15
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e12:	4b1f      	ldr	r3, [pc, #124]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	0c1b      	lsrs	r3, r3, #16
 8004e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e38:	ee17 2a90 	vmov	r2, s15
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e40:	4b13      	ldr	r3, [pc, #76]	@ (8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	0e1b      	lsrs	r3, r3, #24
 8004e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e66:	ee17 2a90 	vmov	r2, s15
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e6e:	e008      	b.n	8004e82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
}
 8004e82:	bf00      	nop
 8004e84:	3724      	adds	r7, #36	@ 0x24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	58024400 	.word	0x58024400
 8004e94:	03d09000 	.word	0x03d09000
 8004e98:	46000000 	.word	0x46000000
 8004e9c:	4c742400 	.word	0x4c742400
 8004ea0:	4a742400 	.word	0x4a742400
 8004ea4:	4bbebc20 	.word	0x4bbebc20

08004ea8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	@ 0x24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004eb0:	4ba1      	ldr	r3, [pc, #644]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004eba:	4b9f      	ldr	r3, [pc, #636]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	0d1b      	lsrs	r3, r3, #20
 8004ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ec6:	4b9c      	ldr	r3, [pc, #624]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ed2:	4b99      	ldr	r3, [pc, #612]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed6:	08db      	lsrs	r3, r3, #3
 8004ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8111 	beq.w	8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	f000 8083 	beq.w	8005004 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	f200 80a1 	bhi.w	8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d056      	beq.n	8004fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f12:	e099      	b.n	8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f14:	4b88      	ldr	r3, [pc, #544]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d02d      	beq.n	8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f20:	4b85      	ldr	r3, [pc, #532]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	08db      	lsrs	r3, r3, #3
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	4a84      	ldr	r2, [pc, #528]	@ (800513c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	ee07 3a90 	vmov	s15, r3
 8004f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f7a:	e087      	b.n	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005144 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fbe:	e065      	b.n	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd2:	4b59      	ldr	r3, [pc, #356]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005002:	e043      	b.n	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800514c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005016:	4b48      	ldr	r3, [pc, #288]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005026:	ed97 6a03 	vldr	s12, [r7, #12]
 800502a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800502e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005046:	e021      	b.n	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005052:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505a:	4b37      	ldr	r3, [pc, #220]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506a:	ed97 6a03 	vldr	s12, [r7, #12]
 800506e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800507e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800508a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800508c:	4b2a      	ldr	r3, [pc, #168]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	0a5b      	lsrs	r3, r3, #9
 8005092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80050aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b2:	ee17 2a90 	vmov	r2, s15
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80050ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	0c1b      	lsrs	r3, r3, #16
 80050c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e0:	ee17 2a90 	vmov	r2, s15
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050e8:	4b13      	ldr	r3, [pc, #76]	@ (8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	0e1b      	lsrs	r3, r3, #24
 80050ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005102:	edd7 6a07 	vldr	s13, [r7, #28]
 8005106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800510e:	ee17 2a90 	vmov	r2, s15
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005116:	e008      	b.n	800512a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
}
 800512a:	bf00      	nop
 800512c:	3724      	adds	r7, #36	@ 0x24
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	58024400 	.word	0x58024400
 800513c:	03d09000 	.word	0x03d09000
 8005140:	46000000 	.word	0x46000000
 8005144:	4c742400 	.word	0x4c742400
 8005148:	4a742400 	.word	0x4a742400
 800514c:	4bbebc20 	.word	0x4bbebc20

08005150 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800515e:	4b53      	ldr	r3, [pc, #332]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b03      	cmp	r3, #3
 8005168:	d101      	bne.n	800516e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e099      	b.n	80052a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800516e:	4b4f      	ldr	r3, [pc, #316]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a4e      	ldr	r2, [pc, #312]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005174:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517a:	f7fc faab 	bl	80016d4 <HAL_GetTick>
 800517e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005180:	e008      	b.n	8005194 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005182:	f7fc faa7 	bl	80016d4 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e086      	b.n	80052a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005194:	4b45      	ldr	r3, [pc, #276]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f0      	bne.n	8005182 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051a0:	4b42      	ldr	r3, [pc, #264]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	031b      	lsls	r3, r3, #12
 80051ae:	493f      	ldr	r1, [pc, #252]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	025b      	lsls	r3, r3, #9
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	3b01      	subs	r3, #1
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051e4:	4931      	ldr	r1, [pc, #196]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051ea:	4b30      	ldr	r3, [pc, #192]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	492d      	ldr	r1, [pc, #180]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051fc:	4b2b      	ldr	r3, [pc, #172]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	f023 0220 	bic.w	r2, r3, #32
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	4928      	ldr	r1, [pc, #160]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800520e:	4b27      	ldr	r3, [pc, #156]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	4a26      	ldr	r2, [pc, #152]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005214:	f023 0310 	bic.w	r3, r3, #16
 8005218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800521a:	4b24      	ldr	r3, [pc, #144]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 800521c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800521e:	4b24      	ldr	r3, [pc, #144]	@ (80052b0 <RCCEx_PLL2_Config+0x160>)
 8005220:	4013      	ands	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	69d2      	ldr	r2, [r2, #28]
 8005226:	00d2      	lsls	r2, r2, #3
 8005228:	4920      	ldr	r1, [pc, #128]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800522e:	4b1f      	ldr	r3, [pc, #124]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	4a1e      	ldr	r2, [pc, #120]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005234:	f043 0310 	orr.w	r3, r3, #16
 8005238:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005240:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	4a19      	ldr	r2, [pc, #100]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005246:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800524a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800524c:	e00f      	b.n	800526e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d106      	bne.n	8005262 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005254:	4b15      	ldr	r3, [pc, #84]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	4a14      	ldr	r2, [pc, #80]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 800525a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800525e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005260:	e005      	b.n	800526e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005262:	4b12      	ldr	r3, [pc, #72]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	4a11      	ldr	r2, [pc, #68]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800526c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800526e:	4b0f      	ldr	r3, [pc, #60]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a0e      	ldr	r2, [pc, #56]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527a:	f7fc fa2b 	bl	80016d4 <HAL_GetTick>
 800527e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005280:	e008      	b.n	8005294 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005282:	f7fc fa27 	bl	80016d4 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e006      	b.n	80052a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <RCCEx_PLL2_Config+0x15c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	58024400 	.word	0x58024400
 80052b0:	ffff0007 	.word	0xffff0007

080052b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052c2:	4b53      	ldr	r3, [pc, #332]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80052c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d101      	bne.n	80052d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e099      	b.n	8005406 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a4e      	ldr	r2, [pc, #312]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80052d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052de:	f7fc f9f9 	bl	80016d4 <HAL_GetTick>
 80052e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052e4:	e008      	b.n	80052f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052e6:	f7fc f9f5 	bl	80016d4 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e086      	b.n	8005406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052f8:	4b45      	ldr	r3, [pc, #276]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1f0      	bne.n	80052e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005304:	4b42      	ldr	r3, [pc, #264]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 8005306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005308:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	051b      	lsls	r3, r3, #20
 8005312:	493f      	ldr	r1, [pc, #252]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 8005314:	4313      	orrs	r3, r2
 8005316:	628b      	str	r3, [r1, #40]	@ 0x28
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	3b01      	subs	r3, #1
 800531e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	3b01      	subs	r3, #1
 8005328:	025b      	lsls	r3, r3, #9
 800532a:	b29b      	uxth	r3, r3
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	3b01      	subs	r3, #1
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	3b01      	subs	r3, #1
 8005342:	061b      	lsls	r3, r3, #24
 8005344:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005348:	4931      	ldr	r1, [pc, #196]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 800534a:	4313      	orrs	r3, r2
 800534c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800534e:	4b30      	ldr	r3, [pc, #192]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005352:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	492d      	ldr	r1, [pc, #180]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 800535c:	4313      	orrs	r3, r2
 800535e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005360:	4b2b      	ldr	r3, [pc, #172]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	4928      	ldr	r1, [pc, #160]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005372:	4b27      	ldr	r3, [pc, #156]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	4a26      	ldr	r2, [pc, #152]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 8005378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800537c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800537e:	4b24      	ldr	r3, [pc, #144]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 8005380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005382:	4b24      	ldr	r3, [pc, #144]	@ (8005414 <RCCEx_PLL3_Config+0x160>)
 8005384:	4013      	ands	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	69d2      	ldr	r2, [r2, #28]
 800538a:	00d2      	lsls	r2, r2, #3
 800538c:	4920      	ldr	r1, [pc, #128]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005392:	4b1f      	ldr	r3, [pc, #124]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 8005394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005396:	4a1e      	ldr	r2, [pc, #120]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 8005398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800539c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	4a19      	ldr	r2, [pc, #100]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80053aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053b0:	e00f      	b.n	80053d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d106      	bne.n	80053c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053b8:	4b15      	ldr	r3, [pc, #84]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	4a14      	ldr	r2, [pc, #80]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80053be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053c4:	e005      	b.n	80053d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053c6:	4b12      	ldr	r3, [pc, #72]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	4a11      	ldr	r2, [pc, #68]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80053cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80053d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053de:	f7fc f979 	bl	80016d4 <HAL_GetTick>
 80053e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053e4:	e008      	b.n	80053f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053e6:	f7fc f975 	bl	80016d4 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e006      	b.n	8005406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053f8:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <RCCEx_PLL3_Config+0x15c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f0      	beq.n	80053e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005404:	7bfb      	ldrb	r3, [r7, #15]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	58024400 	.word	0x58024400
 8005414:	ffff0007 	.word	0xffff0007

08005418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e049      	b.n	80054be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fb fd3c 	bl	8000ebc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f000 fa58 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d109      	bne.n	80054ec <HAL_TIM_PWM_Start+0x24>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	bf14      	ite	ne
 80054e4:	2301      	movne	r3, #1
 80054e6:	2300      	moveq	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	e03c      	b.n	8005566 <HAL_TIM_PWM_Start+0x9e>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d109      	bne.n	8005506 <HAL_TIM_PWM_Start+0x3e>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	bf14      	ite	ne
 80054fe:	2301      	movne	r3, #1
 8005500:	2300      	moveq	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	e02f      	b.n	8005566 <HAL_TIM_PWM_Start+0x9e>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b08      	cmp	r3, #8
 800550a:	d109      	bne.n	8005520 <HAL_TIM_PWM_Start+0x58>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	bf14      	ite	ne
 8005518:	2301      	movne	r3, #1
 800551a:	2300      	moveq	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	e022      	b.n	8005566 <HAL_TIM_PWM_Start+0x9e>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b0c      	cmp	r3, #12
 8005524:	d109      	bne.n	800553a <HAL_TIM_PWM_Start+0x72>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b01      	cmp	r3, #1
 8005530:	bf14      	ite	ne
 8005532:	2301      	movne	r3, #1
 8005534:	2300      	moveq	r3, #0
 8005536:	b2db      	uxtb	r3, r3
 8005538:	e015      	b.n	8005566 <HAL_TIM_PWM_Start+0x9e>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b10      	cmp	r3, #16
 800553e:	d109      	bne.n	8005554 <HAL_TIM_PWM_Start+0x8c>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b01      	cmp	r3, #1
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e008      	b.n	8005566 <HAL_TIM_PWM_Start+0x9e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e0a1      	b.n	80056b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <HAL_TIM_PWM_Start+0xb6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800557c:	e023      	b.n	80055c6 <HAL_TIM_PWM_Start+0xfe>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b04      	cmp	r3, #4
 8005582:	d104      	bne.n	800558e <HAL_TIM_PWM_Start+0xc6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800558c:	e01b      	b.n	80055c6 <HAL_TIM_PWM_Start+0xfe>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b08      	cmp	r3, #8
 8005592:	d104      	bne.n	800559e <HAL_TIM_PWM_Start+0xd6>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800559c:	e013      	b.n	80055c6 <HAL_TIM_PWM_Start+0xfe>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b0c      	cmp	r3, #12
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start+0xe6>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055ac:	e00b      	b.n	80055c6 <HAL_TIM_PWM_Start+0xfe>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start+0xf6>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055bc:	e003      	b.n	80055c6 <HAL_TIM_PWM_Start+0xfe>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fd18 	bl	8006004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a38      	ldr	r2, [pc, #224]	@ (80056bc <HAL_TIM_PWM_Start+0x1f4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_TIM_PWM_Start+0x13e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a37      	ldr	r2, [pc, #220]	@ (80056c0 <HAL_TIM_PWM_Start+0x1f8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_TIM_PWM_Start+0x13e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a35      	ldr	r2, [pc, #212]	@ (80056c4 <HAL_TIM_PWM_Start+0x1fc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIM_PWM_Start+0x13e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a34      	ldr	r2, [pc, #208]	@ (80056c8 <HAL_TIM_PWM_Start+0x200>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIM_PWM_Start+0x13e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a32      	ldr	r2, [pc, #200]	@ (80056cc <HAL_TIM_PWM_Start+0x204>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <HAL_TIM_PWM_Start+0x142>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_TIM_PWM_Start+0x144>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800561e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a25      	ldr	r2, [pc, #148]	@ (80056bc <HAL_TIM_PWM_Start+0x1f4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d022      	beq.n	8005670 <HAL_TIM_PWM_Start+0x1a8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005632:	d01d      	beq.n	8005670 <HAL_TIM_PWM_Start+0x1a8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a25      	ldr	r2, [pc, #148]	@ (80056d0 <HAL_TIM_PWM_Start+0x208>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d018      	beq.n	8005670 <HAL_TIM_PWM_Start+0x1a8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a24      	ldr	r2, [pc, #144]	@ (80056d4 <HAL_TIM_PWM_Start+0x20c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <HAL_TIM_PWM_Start+0x1a8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a22      	ldr	r2, [pc, #136]	@ (80056d8 <HAL_TIM_PWM_Start+0x210>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00e      	beq.n	8005670 <HAL_TIM_PWM_Start+0x1a8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1a      	ldr	r2, [pc, #104]	@ (80056c0 <HAL_TIM_PWM_Start+0x1f8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_TIM_PWM_Start+0x1a8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1e      	ldr	r2, [pc, #120]	@ (80056dc <HAL_TIM_PWM_Start+0x214>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_TIM_PWM_Start+0x1a8>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a16      	ldr	r2, [pc, #88]	@ (80056c4 <HAL_TIM_PWM_Start+0x1fc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d115      	bne.n	800569c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	4b1a      	ldr	r3, [pc, #104]	@ (80056e0 <HAL_TIM_PWM_Start+0x218>)
 8005678:	4013      	ands	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b06      	cmp	r3, #6
 8005680:	d015      	beq.n	80056ae <HAL_TIM_PWM_Start+0x1e6>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005688:	d011      	beq.n	80056ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569a:	e008      	b.n	80056ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e000      	b.n	80056b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40010000 	.word	0x40010000
 80056c0:	40010400 	.word	0x40010400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40014400 	.word	0x40014400
 80056cc:	40014800 	.word	0x40014800
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800
 80056d8:	40000c00 	.word	0x40000c00
 80056dc:	40001800 	.word	0x40001800
 80056e0:	00010007 	.word	0x00010007

080056e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056fe:	2302      	movs	r3, #2
 8005700:	e0ff      	b.n	8005902 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b14      	cmp	r3, #20
 800570e:	f200 80f0 	bhi.w	80058f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005712:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	0800576d 	.word	0x0800576d
 800571c:	080058f3 	.word	0x080058f3
 8005720:	080058f3 	.word	0x080058f3
 8005724:	080058f3 	.word	0x080058f3
 8005728:	080057ad 	.word	0x080057ad
 800572c:	080058f3 	.word	0x080058f3
 8005730:	080058f3 	.word	0x080058f3
 8005734:	080058f3 	.word	0x080058f3
 8005738:	080057ef 	.word	0x080057ef
 800573c:	080058f3 	.word	0x080058f3
 8005740:	080058f3 	.word	0x080058f3
 8005744:	080058f3 	.word	0x080058f3
 8005748:	0800582f 	.word	0x0800582f
 800574c:	080058f3 	.word	0x080058f3
 8005750:	080058f3 	.word	0x080058f3
 8005754:	080058f3 	.word	0x080058f3
 8005758:	08005871 	.word	0x08005871
 800575c:	080058f3 	.word	0x080058f3
 8005760:	080058f3 	.word	0x080058f3
 8005764:	080058f3 	.word	0x080058f3
 8005768:	080058b1 	.word	0x080058b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f970 	bl	8005a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0208 	orr.w	r2, r2, #8
 8005786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0204 	bic.w	r2, r2, #4
 8005796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6999      	ldr	r1, [r3, #24]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	619a      	str	r2, [r3, #24]
      break;
 80057aa:	e0a5      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 f9e0 	bl	8005b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6999      	ldr	r1, [r3, #24]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	021a      	lsls	r2, r3, #8
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	619a      	str	r2, [r3, #24]
      break;
 80057ec:	e084      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fa49 	bl	8005c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69da      	ldr	r2, [r3, #28]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0208 	orr.w	r2, r2, #8
 8005808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0204 	bic.w	r2, r2, #4
 8005818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69d9      	ldr	r1, [r3, #28]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	61da      	str	r2, [r3, #28]
      break;
 800582c:	e064      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fab1 	bl	8005d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69d9      	ldr	r1, [r3, #28]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	021a      	lsls	r2, r3, #8
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	61da      	str	r2, [r3, #28]
      break;
 800586e:	e043      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fafa 	bl	8005e70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0208 	orr.w	r2, r2, #8
 800588a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0204 	bic.w	r2, r2, #4
 800589a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058ae:	e023      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fb3e 	bl	8005f38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	021a      	lsls	r2, r3, #8
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058f0:	e002      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
      break;
 80058f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005900:	7dfb      	ldrb	r3, [r7, #23]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a46      	ldr	r2, [pc, #280]	@ (8005a38 <TIM_Base_SetConfig+0x12c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592a:	d00f      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a43      	ldr	r2, [pc, #268]	@ (8005a3c <TIM_Base_SetConfig+0x130>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00b      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a42      	ldr	r2, [pc, #264]	@ (8005a40 <TIM_Base_SetConfig+0x134>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a41      	ldr	r2, [pc, #260]	@ (8005a44 <TIM_Base_SetConfig+0x138>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a40      	ldr	r2, [pc, #256]	@ (8005a48 <TIM_Base_SetConfig+0x13c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d108      	bne.n	800595e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a35      	ldr	r2, [pc, #212]	@ (8005a38 <TIM_Base_SetConfig+0x12c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01f      	beq.n	80059a6 <TIM_Base_SetConfig+0x9a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596c:	d01b      	beq.n	80059a6 <TIM_Base_SetConfig+0x9a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a32      	ldr	r2, [pc, #200]	@ (8005a3c <TIM_Base_SetConfig+0x130>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d017      	beq.n	80059a6 <TIM_Base_SetConfig+0x9a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a31      	ldr	r2, [pc, #196]	@ (8005a40 <TIM_Base_SetConfig+0x134>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <TIM_Base_SetConfig+0x9a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a30      	ldr	r2, [pc, #192]	@ (8005a44 <TIM_Base_SetConfig+0x138>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00f      	beq.n	80059a6 <TIM_Base_SetConfig+0x9a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2f      	ldr	r2, [pc, #188]	@ (8005a48 <TIM_Base_SetConfig+0x13c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00b      	beq.n	80059a6 <TIM_Base_SetConfig+0x9a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2e      	ldr	r2, [pc, #184]	@ (8005a4c <TIM_Base_SetConfig+0x140>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d007      	beq.n	80059a6 <TIM_Base_SetConfig+0x9a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2d      	ldr	r2, [pc, #180]	@ (8005a50 <TIM_Base_SetConfig+0x144>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <TIM_Base_SetConfig+0x9a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005a54 <TIM_Base_SetConfig+0x148>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d108      	bne.n	80059b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <TIM_Base_SetConfig+0x12c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00f      	beq.n	8005a04 <TIM_Base_SetConfig+0xf8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a18      	ldr	r2, [pc, #96]	@ (8005a48 <TIM_Base_SetConfig+0x13c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00b      	beq.n	8005a04 <TIM_Base_SetConfig+0xf8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a17      	ldr	r2, [pc, #92]	@ (8005a4c <TIM_Base_SetConfig+0x140>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d007      	beq.n	8005a04 <TIM_Base_SetConfig+0xf8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a16      	ldr	r2, [pc, #88]	@ (8005a50 <TIM_Base_SetConfig+0x144>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_Base_SetConfig+0xf8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <TIM_Base_SetConfig+0x148>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d103      	bne.n	8005a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d105      	bne.n	8005a2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f023 0201 	bic.w	r2, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	611a      	str	r2, [r3, #16]
  }
}
 8005a2a:	bf00      	nop
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40010400 	.word	0x40010400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f023 0201 	bic.w	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4b37      	ldr	r3, [pc, #220]	@ (8005b60 <TIM_OC1_SetConfig+0x108>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0302 	bic.w	r3, r3, #2
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2d      	ldr	r2, [pc, #180]	@ (8005b64 <TIM_OC1_SetConfig+0x10c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00f      	beq.n	8005ad4 <TIM_OC1_SetConfig+0x7c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8005b68 <TIM_OC1_SetConfig+0x110>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <TIM_OC1_SetConfig+0x7c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a2b      	ldr	r2, [pc, #172]	@ (8005b6c <TIM_OC1_SetConfig+0x114>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d007      	beq.n	8005ad4 <TIM_OC1_SetConfig+0x7c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8005b70 <TIM_OC1_SetConfig+0x118>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC1_SetConfig+0x7c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a29      	ldr	r2, [pc, #164]	@ (8005b74 <TIM_OC1_SetConfig+0x11c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10c      	bne.n	8005aee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0308 	bic.w	r3, r3, #8
 8005ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 0304 	bic.w	r3, r3, #4
 8005aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b64 <TIM_OC1_SetConfig+0x10c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_OC1_SetConfig+0xbe>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b68 <TIM_OC1_SetConfig+0x110>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_OC1_SetConfig+0xbe>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <TIM_OC1_SetConfig+0x114>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_OC1_SetConfig+0xbe>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a19      	ldr	r2, [pc, #100]	@ (8005b70 <TIM_OC1_SetConfig+0x118>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC1_SetConfig+0xbe>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <TIM_OC1_SetConfig+0x11c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d111      	bne.n	8005b3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	621a      	str	r2, [r3, #32]
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	fffeff8f 	.word	0xfffeff8f
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40014400 	.word	0x40014400
 8005b74:	40014800 	.word	0x40014800

08005b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f023 0210 	bic.w	r2, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4b34      	ldr	r3, [pc, #208]	@ (8005c74 <TIM_OC2_SetConfig+0xfc>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0320 	bic.w	r3, r3, #32
 8005bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a29      	ldr	r2, [pc, #164]	@ (8005c78 <TIM_OC2_SetConfig+0x100>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC2_SetConfig+0x68>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a28      	ldr	r2, [pc, #160]	@ (8005c7c <TIM_OC2_SetConfig+0x104>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10d      	bne.n	8005bfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005c78 <TIM_OC2_SetConfig+0x100>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00f      	beq.n	8005c24 <TIM_OC2_SetConfig+0xac>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a1d      	ldr	r2, [pc, #116]	@ (8005c7c <TIM_OC2_SetConfig+0x104>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_OC2_SetConfig+0xac>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c80 <TIM_OC2_SetConfig+0x108>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_OC2_SetConfig+0xac>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1b      	ldr	r2, [pc, #108]	@ (8005c84 <TIM_OC2_SetConfig+0x10c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC2_SetConfig+0xac>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005c88 <TIM_OC2_SetConfig+0x110>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d113      	bne.n	8005c4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	feff8fff 	.word	0xfeff8fff
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40010400 	.word	0x40010400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4b33      	ldr	r3, [pc, #204]	@ (8005d84 <TIM_OC3_SetConfig+0xf8>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0303 	bic.w	r3, r3, #3
 8005cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a28      	ldr	r2, [pc, #160]	@ (8005d88 <TIM_OC3_SetConfig+0xfc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_OC3_SetConfig+0x66>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a27      	ldr	r2, [pc, #156]	@ (8005d8c <TIM_OC3_SetConfig+0x100>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10d      	bne.n	8005d0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a1d      	ldr	r2, [pc, #116]	@ (8005d88 <TIM_OC3_SetConfig+0xfc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <TIM_OC3_SetConfig+0xaa>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1c      	ldr	r2, [pc, #112]	@ (8005d8c <TIM_OC3_SetConfig+0x100>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_OC3_SetConfig+0xaa>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	@ (8005d90 <TIM_OC3_SetConfig+0x104>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_OC3_SetConfig+0xaa>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1a      	ldr	r2, [pc, #104]	@ (8005d94 <TIM_OC3_SetConfig+0x108>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC3_SetConfig+0xaa>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a19      	ldr	r2, [pc, #100]	@ (8005d98 <TIM_OC3_SetConfig+0x10c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d113      	bne.n	8005d5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	fffeff8f 	.word	0xfffeff8f
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800

08005d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4b24      	ldr	r3, [pc, #144]	@ (8005e58 <TIM_OC4_SetConfig+0xbc>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a19      	ldr	r2, [pc, #100]	@ (8005e5c <TIM_OC4_SetConfig+0xc0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_OC4_SetConfig+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <TIM_OC4_SetConfig+0xc4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_OC4_SetConfig+0x80>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a17      	ldr	r2, [pc, #92]	@ (8005e64 <TIM_OC4_SetConfig+0xc8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_OC4_SetConfig+0x80>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a16      	ldr	r2, [pc, #88]	@ (8005e68 <TIM_OC4_SetConfig+0xcc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC4_SetConfig+0x80>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a15      	ldr	r2, [pc, #84]	@ (8005e6c <TIM_OC4_SetConfig+0xd0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	019b      	lsls	r3, r3, #6
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	feff8fff 	.word	0xfeff8fff
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800

08005e70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4b21      	ldr	r3, [pc, #132]	@ (8005f20 <TIM_OC5_SetConfig+0xb0>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005eb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a18      	ldr	r2, [pc, #96]	@ (8005f24 <TIM_OC5_SetConfig+0xb4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00f      	beq.n	8005ee6 <TIM_OC5_SetConfig+0x76>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <TIM_OC5_SetConfig+0xb8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <TIM_OC5_SetConfig+0x76>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a16      	ldr	r2, [pc, #88]	@ (8005f2c <TIM_OC5_SetConfig+0xbc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_OC5_SetConfig+0x76>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a15      	ldr	r2, [pc, #84]	@ (8005f30 <TIM_OC5_SetConfig+0xc0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_OC5_SetConfig+0x76>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a14      	ldr	r2, [pc, #80]	@ (8005f34 <TIM_OC5_SetConfig+0xc4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d109      	bne.n	8005efa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	621a      	str	r2, [r3, #32]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	fffeff8f 	.word	0xfffeff8f
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40010400 	.word	0x40010400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800

08005f38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4b22      	ldr	r3, [pc, #136]	@ (8005fec <TIM_OC6_SetConfig+0xb4>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	051b      	lsls	r3, r3, #20
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a19      	ldr	r2, [pc, #100]	@ (8005ff0 <TIM_OC6_SetConfig+0xb8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00f      	beq.n	8005fb0 <TIM_OC6_SetConfig+0x78>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a18      	ldr	r2, [pc, #96]	@ (8005ff4 <TIM_OC6_SetConfig+0xbc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <TIM_OC6_SetConfig+0x78>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a17      	ldr	r2, [pc, #92]	@ (8005ff8 <TIM_OC6_SetConfig+0xc0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_OC6_SetConfig+0x78>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a16      	ldr	r2, [pc, #88]	@ (8005ffc <TIM_OC6_SetConfig+0xc4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC6_SetConfig+0x78>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a15      	ldr	r2, [pc, #84]	@ (8006000 <TIM_OC6_SetConfig+0xc8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d109      	bne.n	8005fc4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	029b      	lsls	r3, r3, #10
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	621a      	str	r2, [r3, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	feff8fff 	.word	0xfeff8fff
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	40010400 	.word	0x40010400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800

08006004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2201      	movs	r2, #1
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	431a      	orrs	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006064:	2302      	movs	r3, #2
 8006066:	e06d      	b.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a30      	ldr	r2, [pc, #192]	@ (8006150 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2f      	ldr	r2, [pc, #188]	@ (8006154 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d108      	bne.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80060a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a20      	ldr	r2, [pc, #128]	@ (8006150 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d022      	beq.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060da:	d01d      	beq.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d018      	beq.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	@ (800615c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00e      	beq.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a15      	ldr	r2, [pc, #84]	@ (8006154 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d009      	beq.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a16      	ldr	r2, [pc, #88]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a15      	ldr	r2, [pc, #84]	@ (8006168 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d10c      	bne.n	8006132 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800611e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	40010000 	.word	0x40010000
 8006154:	40010400 	.word	0x40010400
 8006158:	40000400 	.word	0x40000400
 800615c:	40000800 	.word	0x40000800
 8006160:	40000c00 	.word	0x40000c00
 8006164:	40001800 	.word	0x40001800
 8006168:	40014000 	.word	0x40014000

0800616c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006184:	2302      	movs	r3, #2
 8006186:	e065      	b.n	8006254 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a16      	ldr	r2, [pc, #88]	@ (8006260 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d004      	beq.n	8006216 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a14      	ldr	r2, [pc, #80]	@ (8006264 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d115      	bne.n	8006242 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	051b      	lsls	r3, r3, #20
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40010000 	.word	0x40010000
 8006264:	40010400 	.word	0x40010400

08006268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e042      	b.n	8006300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fa fef1 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2224      	movs	r2, #36	@ 0x24
 8006296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0201 	bic.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 f968 	bl	8007588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fbfd 	bl	8006ab8 <UART_SetConfig>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e01b      	b.n	8006300 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f9e7 	bl	80076cc <UART_CheckIdleState>
 80062fe:	4603      	mov	r3, r0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b0ba      	sub	sp, #232	@ 0xe8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800632e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006332:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006336:	4013      	ands	r3, r2
 8006338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800633c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11b      	bne.n	800637c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d015      	beq.n	800637c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	d105      	bne.n	8006368 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800635c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8377 	beq.w	8006a60 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
      }
      return;
 800637a:	e371      	b.n	8006a60 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800637c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 8123 	beq.w	80065cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006386:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800638a:	4b8d      	ldr	r3, [pc, #564]	@ (80065c0 <HAL_UART_IRQHandler+0x2b8>)
 800638c:	4013      	ands	r3, r2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006392:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006396:	4b8b      	ldr	r3, [pc, #556]	@ (80065c4 <HAL_UART_IRQHandler+0x2bc>)
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8116 	beq.w	80065cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d011      	beq.n	80063d0 <HAL_UART_IRQHandler+0xc8>
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2201      	movs	r2, #1
 80063be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d011      	beq.n	8006400 <HAL_UART_IRQHandler+0xf8>
 80063dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2202      	movs	r2, #2
 80063ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f6:	f043 0204 	orr.w	r2, r3, #4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d011      	beq.n	8006430 <HAL_UART_IRQHandler+0x128>
 800640c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2204      	movs	r2, #4
 800641e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006426:	f043 0202 	orr.w	r2, r3, #2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d017      	beq.n	800646c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006448:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800644c:	4b5c      	ldr	r3, [pc, #368]	@ (80065c0 <HAL_UART_IRQHandler+0x2b8>)
 800644e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2208      	movs	r2, #8
 800645a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006462:	f043 0208 	orr.w	r2, r3, #8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006474:	2b00      	cmp	r3, #0
 8006476:	d012      	beq.n	800649e <HAL_UART_IRQHandler+0x196>
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800647c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800648c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006494:	f043 0220 	orr.w	r2, r3, #32
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 82dd 	beq.w	8006a64 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d013      	beq.n	80064de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d105      	bne.n	80064ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f2:	2b40      	cmp	r3, #64	@ 0x40
 80064f4:	d005      	beq.n	8006502 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d054      	beq.n	80065ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fb1c 	bl	8007b40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006512:	2b40      	cmp	r3, #64	@ 0x40
 8006514:	d146      	bne.n	80065a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800652c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3308      	adds	r3, #8
 800653e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006542:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800654e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800655a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1d9      	bne.n	8006516 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006568:	2b00      	cmp	r3, #0
 800656a:	d017      	beq.n	800659c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006572:	4a15      	ldr	r2, [pc, #84]	@ (80065c8 <HAL_UART_IRQHandler+0x2c0>)
 8006574:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657c:	4618      	mov	r0, r3
 800657e:	f7fb fcef 	bl	8001f60 <HAL_DMA_Abort_IT>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d019      	beq.n	80065bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006596:	4610      	mov	r0, r2
 8006598:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659a:	e00f      	b.n	80065bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fa81 	bl	8006aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a2:	e00b      	b.n	80065bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fa7d 	bl	8006aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065aa:	e007      	b.n	80065bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa79 	bl	8006aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80065ba:	e253      	b.n	8006a64 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	bf00      	nop
    return;
 80065be:	e251      	b.n	8006a64 <HAL_UART_IRQHandler+0x75c>
 80065c0:	10000001 	.word	0x10000001
 80065c4:	04000120 	.word	0x04000120
 80065c8:	08007c0d 	.word	0x08007c0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	f040 81e7 	bne.w	80069a4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 81e0 	beq.w	80069a4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 81d9 	beq.w	80069a4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2210      	movs	r2, #16
 80065f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006604:	2b40      	cmp	r3, #64	@ 0x40
 8006606:	f040 8151 	bne.w	80068ac <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a96      	ldr	r2, [pc, #600]	@ (800686c <HAL_UART_IRQHandler+0x564>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d068      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a93      	ldr	r2, [pc, #588]	@ (8006870 <HAL_UART_IRQHandler+0x568>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d061      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a91      	ldr	r2, [pc, #580]	@ (8006874 <HAL_UART_IRQHandler+0x56c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d05a      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a8e      	ldr	r2, [pc, #568]	@ (8006878 <HAL_UART_IRQHandler+0x570>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d053      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a8c      	ldr	r2, [pc, #560]	@ (800687c <HAL_UART_IRQHandler+0x574>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d04c      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a89      	ldr	r2, [pc, #548]	@ (8006880 <HAL_UART_IRQHandler+0x578>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d045      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a87      	ldr	r2, [pc, #540]	@ (8006884 <HAL_UART_IRQHandler+0x57c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d03e      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a84      	ldr	r2, [pc, #528]	@ (8006888 <HAL_UART_IRQHandler+0x580>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d037      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a82      	ldr	r2, [pc, #520]	@ (800688c <HAL_UART_IRQHandler+0x584>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d030      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a7f      	ldr	r2, [pc, #508]	@ (8006890 <HAL_UART_IRQHandler+0x588>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d029      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a7d      	ldr	r2, [pc, #500]	@ (8006894 <HAL_UART_IRQHandler+0x58c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d022      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a7a      	ldr	r2, [pc, #488]	@ (8006898 <HAL_UART_IRQHandler+0x590>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01b      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a78      	ldr	r2, [pc, #480]	@ (800689c <HAL_UART_IRQHandler+0x594>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d014      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a75      	ldr	r2, [pc, #468]	@ (80068a0 <HAL_UART_IRQHandler+0x598>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00d      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a73      	ldr	r2, [pc, #460]	@ (80068a4 <HAL_UART_IRQHandler+0x59c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d006      	beq.n	80066ea <HAL_UART_IRQHandler+0x3e2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a70      	ldr	r2, [pc, #448]	@ (80068a8 <HAL_UART_IRQHandler+0x5a0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d106      	bne.n	80066f8 <HAL_UART_IRQHandler+0x3f0>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	e005      	b.n	8006704 <HAL_UART_IRQHandler+0x3fc>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	b29b      	uxth	r3, r3
 8006704:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006708:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 81ab 	beq.w	8006a68 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006718:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800671c:	429a      	cmp	r2, r3
 800671e:	f080 81a3 	bcs.w	8006a68 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006728:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006738:	f000 8087 	beq.w	800684a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006750:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800676a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006772:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800677e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1da      	bne.n	800673c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3308      	adds	r3, #8
 80067a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80067bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e1      	bne.n	8006786 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3308      	adds	r3, #8
 80067e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e3      	bne.n	80067c2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006818:	f023 0310 	bic.w	r3, r3, #16
 800681c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800682a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800682c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006830:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e4      	bne.n	8006808 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006844:	4618      	mov	r0, r3
 8006846:	f7fb f86d 	bl	8001924 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800685c:	b29b      	uxth	r3, r3
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	b29b      	uxth	r3, r3
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7f9 ff57 	bl	8000718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800686a:	e0fd      	b.n	8006a68 <HAL_UART_IRQHandler+0x760>
 800686c:	40020010 	.word	0x40020010
 8006870:	40020028 	.word	0x40020028
 8006874:	40020040 	.word	0x40020040
 8006878:	40020058 	.word	0x40020058
 800687c:	40020070 	.word	0x40020070
 8006880:	40020088 	.word	0x40020088
 8006884:	400200a0 	.word	0x400200a0
 8006888:	400200b8 	.word	0x400200b8
 800688c:	40020410 	.word	0x40020410
 8006890:	40020428 	.word	0x40020428
 8006894:	40020440 	.word	0x40020440
 8006898:	40020458 	.word	0x40020458
 800689c:	40020470 	.word	0x40020470
 80068a0:	40020488 	.word	0x40020488
 80068a4:	400204a0 	.word	0x400204a0
 80068a8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80cf 	beq.w	8006a6c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80068ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80ca 	beq.w	8006a6c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80068fc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e4      	bne.n	80068d8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	623b      	str	r3, [r7, #32]
   return(result);
 800691e:	6a3a      	ldr	r2, [r7, #32]
 8006920:	4b55      	ldr	r3, [pc, #340]	@ (8006a78 <HAL_UART_IRQHandler+0x770>)
 8006922:	4013      	ands	r3, r2
 8006924:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006932:	633a      	str	r2, [r7, #48]	@ 0x30
 8006934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e3      	bne.n	800690e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	60fb      	str	r3, [r7, #12]
   return(result);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0310 	bic.w	r3, r3, #16
 800696e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	69b9      	ldr	r1, [r7, #24]
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	617b      	str	r3, [r7, #20]
   return(result);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e4      	bne.n	800695a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006996:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7f9 febb 	bl	8000718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069a2:	e063      	b.n	8006a6c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00e      	beq.n	80069ce <HAL_UART_IRQHandler+0x6c6>
 80069b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80069c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fe7e 	bl	80086c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069cc:	e051      	b.n	8006a72 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80069ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d014      	beq.n	8006a04 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80069da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d105      	bne.n	80069f2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d03a      	beq.n	8006a70 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
    }
    return;
 8006a02:	e035      	b.n	8006a70 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <HAL_UART_IRQHandler+0x71c>
 8006a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 f90b 	bl	8007c38 <UART_EndTransmit_IT>
    return;
 8006a22:	e026      	b.n	8006a72 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <HAL_UART_IRQHandler+0x73c>
 8006a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fe57 	bl	80086f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a42:	e016      	b.n	8006a72 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <HAL_UART_IRQHandler+0x76a>
 8006a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	da0c      	bge.n	8006a72 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 fe3f 	bl	80086dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a5e:	e008      	b.n	8006a72 <HAL_UART_IRQHandler+0x76a>
      return;
 8006a60:	bf00      	nop
 8006a62:	e006      	b.n	8006a72 <HAL_UART_IRQHandler+0x76a>
    return;
 8006a64:	bf00      	nop
 8006a66:	e004      	b.n	8006a72 <HAL_UART_IRQHandler+0x76a>
      return;
 8006a68:	bf00      	nop
 8006a6a:	e002      	b.n	8006a72 <HAL_UART_IRQHandler+0x76a>
      return;
 8006a6c:	bf00      	nop
 8006a6e:	e000      	b.n	8006a72 <HAL_UART_IRQHandler+0x76a>
    return;
 8006a70:	bf00      	nop
  }
}
 8006a72:	37e8      	adds	r7, #232	@ 0xe8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	effffffe 	.word	0xeffffffe

08006a7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006abc:	b092      	sub	sp, #72	@ 0x48
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4bbe      	ldr	r3, [pc, #760]	@ (8006de0 <UART_SetConfig+0x328>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006af0:	430b      	orrs	r3, r1
 8006af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4ab3      	ldr	r2, [pc, #716]	@ (8006de4 <UART_SetConfig+0x32c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d004      	beq.n	8006b24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b20:	4313      	orrs	r3, r2
 8006b22:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	4baf      	ldr	r3, [pc, #700]	@ (8006de8 <UART_SetConfig+0x330>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3e:	f023 010f 	bic.w	r1, r3, #15
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4aa6      	ldr	r2, [pc, #664]	@ (8006dec <UART_SetConfig+0x334>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d177      	bne.n	8006c48 <UART_SetConfig+0x190>
 8006b58:	4ba5      	ldr	r3, [pc, #660]	@ (8006df0 <UART_SetConfig+0x338>)
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b60:	2b28      	cmp	r3, #40	@ 0x28
 8006b62:	d86d      	bhi.n	8006c40 <UART_SetConfig+0x188>
 8006b64:	a201      	add	r2, pc, #4	@ (adr r2, 8006b6c <UART_SetConfig+0xb4>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006c11 	.word	0x08006c11
 8006b70:	08006c41 	.word	0x08006c41
 8006b74:	08006c41 	.word	0x08006c41
 8006b78:	08006c41 	.word	0x08006c41
 8006b7c:	08006c41 	.word	0x08006c41
 8006b80:	08006c41 	.word	0x08006c41
 8006b84:	08006c41 	.word	0x08006c41
 8006b88:	08006c41 	.word	0x08006c41
 8006b8c:	08006c19 	.word	0x08006c19
 8006b90:	08006c41 	.word	0x08006c41
 8006b94:	08006c41 	.word	0x08006c41
 8006b98:	08006c41 	.word	0x08006c41
 8006b9c:	08006c41 	.word	0x08006c41
 8006ba0:	08006c41 	.word	0x08006c41
 8006ba4:	08006c41 	.word	0x08006c41
 8006ba8:	08006c41 	.word	0x08006c41
 8006bac:	08006c21 	.word	0x08006c21
 8006bb0:	08006c41 	.word	0x08006c41
 8006bb4:	08006c41 	.word	0x08006c41
 8006bb8:	08006c41 	.word	0x08006c41
 8006bbc:	08006c41 	.word	0x08006c41
 8006bc0:	08006c41 	.word	0x08006c41
 8006bc4:	08006c41 	.word	0x08006c41
 8006bc8:	08006c41 	.word	0x08006c41
 8006bcc:	08006c29 	.word	0x08006c29
 8006bd0:	08006c41 	.word	0x08006c41
 8006bd4:	08006c41 	.word	0x08006c41
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006c41 	.word	0x08006c41
 8006be0:	08006c41 	.word	0x08006c41
 8006be4:	08006c41 	.word	0x08006c41
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c31 	.word	0x08006c31
 8006bf0:	08006c41 	.word	0x08006c41
 8006bf4:	08006c41 	.word	0x08006c41
 8006bf8:	08006c41 	.word	0x08006c41
 8006bfc:	08006c41 	.word	0x08006c41
 8006c00:	08006c41 	.word	0x08006c41
 8006c04:	08006c41 	.word	0x08006c41
 8006c08:	08006c41 	.word	0x08006c41
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c16:	e222      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1e:	e21e      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c20:	2308      	movs	r3, #8
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c26:	e21a      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c28:	2310      	movs	r3, #16
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2e:	e216      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c30:	2320      	movs	r3, #32
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c36:	e212      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c38:	2340      	movs	r3, #64	@ 0x40
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e20e      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c40:	2380      	movs	r3, #128	@ 0x80
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e20a      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a69      	ldr	r2, [pc, #420]	@ (8006df4 <UART_SetConfig+0x33c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d130      	bne.n	8006cb4 <UART_SetConfig+0x1fc>
 8006c52:	4b67      	ldr	r3, [pc, #412]	@ (8006df0 <UART_SetConfig+0x338>)
 8006c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	2b05      	cmp	r3, #5
 8006c5c:	d826      	bhi.n	8006cac <UART_SetConfig+0x1f4>
 8006c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c64 <UART_SetConfig+0x1ac>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c7d 	.word	0x08006c7d
 8006c68:	08006c85 	.word	0x08006c85
 8006c6c:	08006c8d 	.word	0x08006c8d
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006ca5 	.word	0x08006ca5
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c82:	e1ec      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c84:	2304      	movs	r3, #4
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8a:	e1e8      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c92:	e1e4      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c94:	2310      	movs	r3, #16
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9a:	e1e0      	b.n	800705e <UART_SetConfig+0x5a6>
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	e1dc      	b.n	800705e <UART_SetConfig+0x5a6>
 8006ca4:	2340      	movs	r3, #64	@ 0x40
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e1d8      	b.n	800705e <UART_SetConfig+0x5a6>
 8006cac:	2380      	movs	r3, #128	@ 0x80
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e1d4      	b.n	800705e <UART_SetConfig+0x5a6>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a4f      	ldr	r2, [pc, #316]	@ (8006df8 <UART_SetConfig+0x340>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d130      	bne.n	8006d20 <UART_SetConfig+0x268>
 8006cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8006df0 <UART_SetConfig+0x338>)
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	d826      	bhi.n	8006d18 <UART_SetConfig+0x260>
 8006cca:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0x218>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006ce9 	.word	0x08006ce9
 8006cd4:	08006cf1 	.word	0x08006cf1
 8006cd8:	08006cf9 	.word	0x08006cf9
 8006cdc:	08006d01 	.word	0x08006d01
 8006ce0:	08006d09 	.word	0x08006d09
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e1b6      	b.n	800705e <UART_SetConfig+0x5a6>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e1b2      	b.n	800705e <UART_SetConfig+0x5a6>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e1ae      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d06:	e1aa      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d08:	2320      	movs	r3, #32
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0e:	e1a6      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d10:	2340      	movs	r3, #64	@ 0x40
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d16:	e1a2      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d18:	2380      	movs	r3, #128	@ 0x80
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1e:	e19e      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a35      	ldr	r2, [pc, #212]	@ (8006dfc <UART_SetConfig+0x344>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d130      	bne.n	8006d8c <UART_SetConfig+0x2d4>
 8006d2a:	4b31      	ldr	r3, [pc, #196]	@ (8006df0 <UART_SetConfig+0x338>)
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b05      	cmp	r3, #5
 8006d34:	d826      	bhi.n	8006d84 <UART_SetConfig+0x2cc>
 8006d36:	a201      	add	r2, pc, #4	@ (adr r2, 8006d3c <UART_SetConfig+0x284>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006d55 	.word	0x08006d55
 8006d40:	08006d5d 	.word	0x08006d5d
 8006d44:	08006d65 	.word	0x08006d65
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d75 	.word	0x08006d75
 8006d50:	08006d7d 	.word	0x08006d7d
 8006d54:	2300      	movs	r3, #0
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5a:	e180      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d62:	e17c      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d64:	2308      	movs	r3, #8
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6a:	e178      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d72:	e174      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d74:	2320      	movs	r3, #32
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7a:	e170      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d7c:	2340      	movs	r3, #64	@ 0x40
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d82:	e16c      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d84:	2380      	movs	r3, #128	@ 0x80
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e168      	b.n	800705e <UART_SetConfig+0x5a6>
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1b      	ldr	r2, [pc, #108]	@ (8006e00 <UART_SetConfig+0x348>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d142      	bne.n	8006e1c <UART_SetConfig+0x364>
 8006d96:	4b16      	ldr	r3, [pc, #88]	@ (8006df0 <UART_SetConfig+0x338>)
 8006d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b05      	cmp	r3, #5
 8006da0:	d838      	bhi.n	8006e14 <UART_SetConfig+0x35c>
 8006da2:	a201      	add	r2, pc, #4	@ (adr r2, 8006da8 <UART_SetConfig+0x2f0>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dc1 	.word	0x08006dc1
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006dd1 	.word	0x08006dd1
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006e05 	.word	0x08006e05
 8006dbc:	08006e0d 	.word	0x08006e0d
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e14a      	b.n	800705e <UART_SetConfig+0x5a6>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e146      	b.n	800705e <UART_SetConfig+0x5a6>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e142      	b.n	800705e <UART_SetConfig+0x5a6>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dde:	e13e      	b.n	800705e <UART_SetConfig+0x5a6>
 8006de0:	cfff69f3 	.word	0xcfff69f3
 8006de4:	58000c00 	.word	0x58000c00
 8006de8:	11fff4ff 	.word	0x11fff4ff
 8006dec:	40011000 	.word	0x40011000
 8006df0:	58024400 	.word	0x58024400
 8006df4:	40004400 	.word	0x40004400
 8006df8:	40004800 	.word	0x40004800
 8006dfc:	40004c00 	.word	0x40004c00
 8006e00:	40005000 	.word	0x40005000
 8006e04:	2320      	movs	r3, #32
 8006e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0a:	e128      	b.n	800705e <UART_SetConfig+0x5a6>
 8006e0c:	2340      	movs	r3, #64	@ 0x40
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e12:	e124      	b.n	800705e <UART_SetConfig+0x5a6>
 8006e14:	2380      	movs	r3, #128	@ 0x80
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1a:	e120      	b.n	800705e <UART_SetConfig+0x5a6>
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4acb      	ldr	r2, [pc, #812]	@ (8007150 <UART_SetConfig+0x698>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d176      	bne.n	8006f14 <UART_SetConfig+0x45c>
 8006e26:	4bcb      	ldr	r3, [pc, #812]	@ (8007154 <UART_SetConfig+0x69c>)
 8006e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e2e:	2b28      	cmp	r3, #40	@ 0x28
 8006e30:	d86c      	bhi.n	8006f0c <UART_SetConfig+0x454>
 8006e32:	a201      	add	r2, pc, #4	@ (adr r2, 8006e38 <UART_SetConfig+0x380>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006edd 	.word	0x08006edd
 8006e3c:	08006f0d 	.word	0x08006f0d
 8006e40:	08006f0d 	.word	0x08006f0d
 8006e44:	08006f0d 	.word	0x08006f0d
 8006e48:	08006f0d 	.word	0x08006f0d
 8006e4c:	08006f0d 	.word	0x08006f0d
 8006e50:	08006f0d 	.word	0x08006f0d
 8006e54:	08006f0d 	.word	0x08006f0d
 8006e58:	08006ee5 	.word	0x08006ee5
 8006e5c:	08006f0d 	.word	0x08006f0d
 8006e60:	08006f0d 	.word	0x08006f0d
 8006e64:	08006f0d 	.word	0x08006f0d
 8006e68:	08006f0d 	.word	0x08006f0d
 8006e6c:	08006f0d 	.word	0x08006f0d
 8006e70:	08006f0d 	.word	0x08006f0d
 8006e74:	08006f0d 	.word	0x08006f0d
 8006e78:	08006eed 	.word	0x08006eed
 8006e7c:	08006f0d 	.word	0x08006f0d
 8006e80:	08006f0d 	.word	0x08006f0d
 8006e84:	08006f0d 	.word	0x08006f0d
 8006e88:	08006f0d 	.word	0x08006f0d
 8006e8c:	08006f0d 	.word	0x08006f0d
 8006e90:	08006f0d 	.word	0x08006f0d
 8006e94:	08006f0d 	.word	0x08006f0d
 8006e98:	08006ef5 	.word	0x08006ef5
 8006e9c:	08006f0d 	.word	0x08006f0d
 8006ea0:	08006f0d 	.word	0x08006f0d
 8006ea4:	08006f0d 	.word	0x08006f0d
 8006ea8:	08006f0d 	.word	0x08006f0d
 8006eac:	08006f0d 	.word	0x08006f0d
 8006eb0:	08006f0d 	.word	0x08006f0d
 8006eb4:	08006f0d 	.word	0x08006f0d
 8006eb8:	08006efd 	.word	0x08006efd
 8006ebc:	08006f0d 	.word	0x08006f0d
 8006ec0:	08006f0d 	.word	0x08006f0d
 8006ec4:	08006f0d 	.word	0x08006f0d
 8006ec8:	08006f0d 	.word	0x08006f0d
 8006ecc:	08006f0d 	.word	0x08006f0d
 8006ed0:	08006f0d 	.word	0x08006f0d
 8006ed4:	08006f0d 	.word	0x08006f0d
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee2:	e0bc      	b.n	800705e <UART_SetConfig+0x5a6>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eea:	e0b8      	b.n	800705e <UART_SetConfig+0x5a6>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ef2:	e0b4      	b.n	800705e <UART_SetConfig+0x5a6>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efa:	e0b0      	b.n	800705e <UART_SetConfig+0x5a6>
 8006efc:	2320      	movs	r3, #32
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f02:	e0ac      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f04:	2340      	movs	r3, #64	@ 0x40
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0a:	e0a8      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f0c:	2380      	movs	r3, #128	@ 0x80
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f12:	e0a4      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a8f      	ldr	r2, [pc, #572]	@ (8007158 <UART_SetConfig+0x6a0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d130      	bne.n	8006f80 <UART_SetConfig+0x4c8>
 8006f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8007154 <UART_SetConfig+0x69c>)
 8006f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d826      	bhi.n	8006f78 <UART_SetConfig+0x4c0>
 8006f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <UART_SetConfig+0x478>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4e:	e086      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f56:	e082      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5e:	e07e      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f66:	e07a      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e076      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f70:	2340      	movs	r3, #64	@ 0x40
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f76:	e072      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f78:	2380      	movs	r3, #128	@ 0x80
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7e:	e06e      	b.n	800705e <UART_SetConfig+0x5a6>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a75      	ldr	r2, [pc, #468]	@ (800715c <UART_SetConfig+0x6a4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d130      	bne.n	8006fec <UART_SetConfig+0x534>
 8006f8a:	4b72      	ldr	r3, [pc, #456]	@ (8007154 <UART_SetConfig+0x69c>)
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	d826      	bhi.n	8006fe4 <UART_SetConfig+0x52c>
 8006f96:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <UART_SetConfig+0x4e4>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fb5 	.word	0x08006fb5
 8006fa0:	08006fbd 	.word	0x08006fbd
 8006fa4:	08006fc5 	.word	0x08006fc5
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fd5 	.word	0x08006fd5
 8006fb0:	08006fdd 	.word	0x08006fdd
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fba:	e050      	b.n	800705e <UART_SetConfig+0x5a6>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc2:	e04c      	b.n	800705e <UART_SetConfig+0x5a6>
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fca:	e048      	b.n	800705e <UART_SetConfig+0x5a6>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd2:	e044      	b.n	800705e <UART_SetConfig+0x5a6>
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fda:	e040      	b.n	800705e <UART_SetConfig+0x5a6>
 8006fdc:	2340      	movs	r3, #64	@ 0x40
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe2:	e03c      	b.n	800705e <UART_SetConfig+0x5a6>
 8006fe4:	2380      	movs	r3, #128	@ 0x80
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fea:	e038      	b.n	800705e <UART_SetConfig+0x5a6>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a5b      	ldr	r2, [pc, #364]	@ (8007160 <UART_SetConfig+0x6a8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d130      	bne.n	8007058 <UART_SetConfig+0x5a0>
 8006ff6:	4b57      	ldr	r3, [pc, #348]	@ (8007154 <UART_SetConfig+0x69c>)
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	2b05      	cmp	r3, #5
 8007000:	d826      	bhi.n	8007050 <UART_SetConfig+0x598>
 8007002:	a201      	add	r2, pc, #4	@ (adr r2, 8007008 <UART_SetConfig+0x550>)
 8007004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007008:	08007021 	.word	0x08007021
 800700c:	08007029 	.word	0x08007029
 8007010:	08007031 	.word	0x08007031
 8007014:	08007039 	.word	0x08007039
 8007018:	08007041 	.word	0x08007041
 800701c:	08007049 	.word	0x08007049
 8007020:	2302      	movs	r3, #2
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007026:	e01a      	b.n	800705e <UART_SetConfig+0x5a6>
 8007028:	2304      	movs	r3, #4
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702e:	e016      	b.n	800705e <UART_SetConfig+0x5a6>
 8007030:	2308      	movs	r3, #8
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007036:	e012      	b.n	800705e <UART_SetConfig+0x5a6>
 8007038:	2310      	movs	r3, #16
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703e:	e00e      	b.n	800705e <UART_SetConfig+0x5a6>
 8007040:	2320      	movs	r3, #32
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e00a      	b.n	800705e <UART_SetConfig+0x5a6>
 8007048:	2340      	movs	r3, #64	@ 0x40
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e006      	b.n	800705e <UART_SetConfig+0x5a6>
 8007050:	2380      	movs	r3, #128	@ 0x80
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007056:	e002      	b.n	800705e <UART_SetConfig+0x5a6>
 8007058:	2380      	movs	r3, #128	@ 0x80
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a3f      	ldr	r2, [pc, #252]	@ (8007160 <UART_SetConfig+0x6a8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	f040 80f8 	bne.w	800725a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800706a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800706e:	2b20      	cmp	r3, #32
 8007070:	dc46      	bgt.n	8007100 <UART_SetConfig+0x648>
 8007072:	2b02      	cmp	r3, #2
 8007074:	f2c0 8082 	blt.w	800717c <UART_SetConfig+0x6c4>
 8007078:	3b02      	subs	r3, #2
 800707a:	2b1e      	cmp	r3, #30
 800707c:	d87e      	bhi.n	800717c <UART_SetConfig+0x6c4>
 800707e:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <UART_SetConfig+0x5cc>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	08007107 	.word	0x08007107
 8007088:	0800717d 	.word	0x0800717d
 800708c:	0800710f 	.word	0x0800710f
 8007090:	0800717d 	.word	0x0800717d
 8007094:	0800717d 	.word	0x0800717d
 8007098:	0800717d 	.word	0x0800717d
 800709c:	0800711f 	.word	0x0800711f
 80070a0:	0800717d 	.word	0x0800717d
 80070a4:	0800717d 	.word	0x0800717d
 80070a8:	0800717d 	.word	0x0800717d
 80070ac:	0800717d 	.word	0x0800717d
 80070b0:	0800717d 	.word	0x0800717d
 80070b4:	0800717d 	.word	0x0800717d
 80070b8:	0800717d 	.word	0x0800717d
 80070bc:	0800712f 	.word	0x0800712f
 80070c0:	0800717d 	.word	0x0800717d
 80070c4:	0800717d 	.word	0x0800717d
 80070c8:	0800717d 	.word	0x0800717d
 80070cc:	0800717d 	.word	0x0800717d
 80070d0:	0800717d 	.word	0x0800717d
 80070d4:	0800717d 	.word	0x0800717d
 80070d8:	0800717d 	.word	0x0800717d
 80070dc:	0800717d 	.word	0x0800717d
 80070e0:	0800717d 	.word	0x0800717d
 80070e4:	0800717d 	.word	0x0800717d
 80070e8:	0800717d 	.word	0x0800717d
 80070ec:	0800717d 	.word	0x0800717d
 80070f0:	0800717d 	.word	0x0800717d
 80070f4:	0800717d 	.word	0x0800717d
 80070f8:	0800717d 	.word	0x0800717d
 80070fc:	0800716f 	.word	0x0800716f
 8007100:	2b40      	cmp	r3, #64	@ 0x40
 8007102:	d037      	beq.n	8007174 <UART_SetConfig+0x6bc>
 8007104:	e03a      	b.n	800717c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007106:	f7fd fd65 	bl	8004bd4 <HAL_RCCEx_GetD3PCLK1Freq>
 800710a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800710c:	e03c      	b.n	8007188 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007112:	4618      	mov	r0, r3
 8007114:	f7fd fd74 	bl	8004c00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800711c:	e034      	b.n	8007188 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800711e:	f107 0318 	add.w	r3, r7, #24
 8007122:	4618      	mov	r0, r3
 8007124:	f7fd fec0 	bl	8004ea8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800712c:	e02c      	b.n	8007188 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800712e:	4b09      	ldr	r3, [pc, #36]	@ (8007154 <UART_SetConfig+0x69c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d016      	beq.n	8007168 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800713a:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <UART_SetConfig+0x69c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	08db      	lsrs	r3, r3, #3
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	4a07      	ldr	r2, [pc, #28]	@ (8007164 <UART_SetConfig+0x6ac>)
 8007146:	fa22 f303 	lsr.w	r3, r2, r3
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800714c:	e01c      	b.n	8007188 <UART_SetConfig+0x6d0>
 800714e:	bf00      	nop
 8007150:	40011400 	.word	0x40011400
 8007154:	58024400 	.word	0x58024400
 8007158:	40007800 	.word	0x40007800
 800715c:	40007c00 	.word	0x40007c00
 8007160:	58000c00 	.word	0x58000c00
 8007164:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007168:	4b9d      	ldr	r3, [pc, #628]	@ (80073e0 <UART_SetConfig+0x928>)
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800716c:	e00c      	b.n	8007188 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800716e:	4b9d      	ldr	r3, [pc, #628]	@ (80073e4 <UART_SetConfig+0x92c>)
 8007170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007172:	e009      	b.n	8007188 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007174:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800717a:	e005      	b.n	8007188 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007186:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 81de 	beq.w	800754c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007194:	4a94      	ldr	r2, [pc, #592]	@ (80073e8 <UART_SetConfig+0x930>)
 8007196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800719a:	461a      	mov	r2, r3
 800719c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719e:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	4413      	add	r3, r2
 80071ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d305      	bcc.n	80071c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071bc:	429a      	cmp	r2, r3
 80071be:	d903      	bls.n	80071c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80071c6:	e1c1      	b.n	800754c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ca:	2200      	movs	r2, #0
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	60fa      	str	r2, [r7, #12]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	4a84      	ldr	r2, [pc, #528]	@ (80073e8 <UART_SetConfig+0x930>)
 80071d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2200      	movs	r2, #0
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071ea:	f7f9 f8c9 	bl	8000380 <__aeabi_uldivmod>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4610      	mov	r0, r2
 80071f4:	4619      	mov	r1, r3
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	020b      	lsls	r3, r1, #8
 8007200:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007204:	0202      	lsls	r2, r0, #8
 8007206:	6979      	ldr	r1, [r7, #20]
 8007208:	6849      	ldr	r1, [r1, #4]
 800720a:	0849      	lsrs	r1, r1, #1
 800720c:	2000      	movs	r0, #0
 800720e:	460c      	mov	r4, r1
 8007210:	4605      	mov	r5, r0
 8007212:	eb12 0804 	adds.w	r8, r2, r4
 8007216:	eb43 0905 	adc.w	r9, r3, r5
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	469a      	mov	sl, r3
 8007222:	4693      	mov	fp, r2
 8007224:	4652      	mov	r2, sl
 8007226:	465b      	mov	r3, fp
 8007228:	4640      	mov	r0, r8
 800722a:	4649      	mov	r1, r9
 800722c:	f7f9 f8a8 	bl	8000380 <__aeabi_uldivmod>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4613      	mov	r3, r2
 8007236:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800723e:	d308      	bcc.n	8007252 <UART_SetConfig+0x79a>
 8007240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007246:	d204      	bcs.n	8007252 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800724e:	60da      	str	r2, [r3, #12]
 8007250:	e17c      	b.n	800754c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007258:	e178      	b.n	800754c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007262:	f040 80c5 	bne.w	80073f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007266:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800726a:	2b20      	cmp	r3, #32
 800726c:	dc48      	bgt.n	8007300 <UART_SetConfig+0x848>
 800726e:	2b00      	cmp	r3, #0
 8007270:	db7b      	blt.n	800736a <UART_SetConfig+0x8b2>
 8007272:	2b20      	cmp	r3, #32
 8007274:	d879      	bhi.n	800736a <UART_SetConfig+0x8b2>
 8007276:	a201      	add	r2, pc, #4	@ (adr r2, 800727c <UART_SetConfig+0x7c4>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	08007307 	.word	0x08007307
 8007280:	0800730f 	.word	0x0800730f
 8007284:	0800736b 	.word	0x0800736b
 8007288:	0800736b 	.word	0x0800736b
 800728c:	08007317 	.word	0x08007317
 8007290:	0800736b 	.word	0x0800736b
 8007294:	0800736b 	.word	0x0800736b
 8007298:	0800736b 	.word	0x0800736b
 800729c:	08007327 	.word	0x08007327
 80072a0:	0800736b 	.word	0x0800736b
 80072a4:	0800736b 	.word	0x0800736b
 80072a8:	0800736b 	.word	0x0800736b
 80072ac:	0800736b 	.word	0x0800736b
 80072b0:	0800736b 	.word	0x0800736b
 80072b4:	0800736b 	.word	0x0800736b
 80072b8:	0800736b 	.word	0x0800736b
 80072bc:	08007337 	.word	0x08007337
 80072c0:	0800736b 	.word	0x0800736b
 80072c4:	0800736b 	.word	0x0800736b
 80072c8:	0800736b 	.word	0x0800736b
 80072cc:	0800736b 	.word	0x0800736b
 80072d0:	0800736b 	.word	0x0800736b
 80072d4:	0800736b 	.word	0x0800736b
 80072d8:	0800736b 	.word	0x0800736b
 80072dc:	0800736b 	.word	0x0800736b
 80072e0:	0800736b 	.word	0x0800736b
 80072e4:	0800736b 	.word	0x0800736b
 80072e8:	0800736b 	.word	0x0800736b
 80072ec:	0800736b 	.word	0x0800736b
 80072f0:	0800736b 	.word	0x0800736b
 80072f4:	0800736b 	.word	0x0800736b
 80072f8:	0800736b 	.word	0x0800736b
 80072fc:	0800735d 	.word	0x0800735d
 8007300:	2b40      	cmp	r3, #64	@ 0x40
 8007302:	d02e      	beq.n	8007362 <UART_SetConfig+0x8aa>
 8007304:	e031      	b.n	800736a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007306:	f7fc fa2f 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 800730a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800730c:	e033      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800730e:	f7fc fa41 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8007312:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007314:	e02f      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800731a:	4618      	mov	r0, r3
 800731c:	f7fd fc70 	bl	8004c00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007324:	e027      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007326:	f107 0318 	add.w	r3, r7, #24
 800732a:	4618      	mov	r0, r3
 800732c:	f7fd fdbc 	bl	8004ea8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007334:	e01f      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007336:	4b2d      	ldr	r3, [pc, #180]	@ (80073ec <UART_SetConfig+0x934>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007342:	4b2a      	ldr	r3, [pc, #168]	@ (80073ec <UART_SetConfig+0x934>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	08db      	lsrs	r3, r3, #3
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	4a24      	ldr	r2, [pc, #144]	@ (80073e0 <UART_SetConfig+0x928>)
 800734e:	fa22 f303 	lsr.w	r3, r2, r3
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007354:	e00f      	b.n	8007376 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007356:	4b22      	ldr	r3, [pc, #136]	@ (80073e0 <UART_SetConfig+0x928>)
 8007358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800735a:	e00c      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800735c:	4b21      	ldr	r3, [pc, #132]	@ (80073e4 <UART_SetConfig+0x92c>)
 800735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007360:	e009      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007368:	e005      	b.n	8007376 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007374:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 80e7 	beq.w	800754c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	4a19      	ldr	r2, [pc, #100]	@ (80073e8 <UART_SetConfig+0x930>)
 8007384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007388:	461a      	mov	r2, r3
 800738a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800738c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007390:	005a      	lsls	r2, r3, #1
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	085b      	lsrs	r3, r3, #1
 8007398:	441a      	add	r2, r3
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a6:	2b0f      	cmp	r3, #15
 80073a8:	d916      	bls.n	80073d8 <UART_SetConfig+0x920>
 80073aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b0:	d212      	bcs.n	80073d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f023 030f 	bic.w	r3, r3, #15
 80073ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073ca:	4313      	orrs	r3, r2
 80073cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80073d4:	60da      	str	r2, [r3, #12]
 80073d6:	e0b9      	b.n	800754c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80073de:	e0b5      	b.n	800754c <UART_SetConfig+0xa94>
 80073e0:	03d09000 	.word	0x03d09000
 80073e4:	003d0900 	.word	0x003d0900
 80073e8:	08009ae0 	.word	0x08009ae0
 80073ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80073f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	dc49      	bgt.n	800748c <UART_SetConfig+0x9d4>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	db7c      	blt.n	80074f6 <UART_SetConfig+0xa3e>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d87a      	bhi.n	80074f6 <UART_SetConfig+0xa3e>
 8007400:	a201      	add	r2, pc, #4	@ (adr r2, 8007408 <UART_SetConfig+0x950>)
 8007402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007406:	bf00      	nop
 8007408:	08007493 	.word	0x08007493
 800740c:	0800749b 	.word	0x0800749b
 8007410:	080074f7 	.word	0x080074f7
 8007414:	080074f7 	.word	0x080074f7
 8007418:	080074a3 	.word	0x080074a3
 800741c:	080074f7 	.word	0x080074f7
 8007420:	080074f7 	.word	0x080074f7
 8007424:	080074f7 	.word	0x080074f7
 8007428:	080074b3 	.word	0x080074b3
 800742c:	080074f7 	.word	0x080074f7
 8007430:	080074f7 	.word	0x080074f7
 8007434:	080074f7 	.word	0x080074f7
 8007438:	080074f7 	.word	0x080074f7
 800743c:	080074f7 	.word	0x080074f7
 8007440:	080074f7 	.word	0x080074f7
 8007444:	080074f7 	.word	0x080074f7
 8007448:	080074c3 	.word	0x080074c3
 800744c:	080074f7 	.word	0x080074f7
 8007450:	080074f7 	.word	0x080074f7
 8007454:	080074f7 	.word	0x080074f7
 8007458:	080074f7 	.word	0x080074f7
 800745c:	080074f7 	.word	0x080074f7
 8007460:	080074f7 	.word	0x080074f7
 8007464:	080074f7 	.word	0x080074f7
 8007468:	080074f7 	.word	0x080074f7
 800746c:	080074f7 	.word	0x080074f7
 8007470:	080074f7 	.word	0x080074f7
 8007474:	080074f7 	.word	0x080074f7
 8007478:	080074f7 	.word	0x080074f7
 800747c:	080074f7 	.word	0x080074f7
 8007480:	080074f7 	.word	0x080074f7
 8007484:	080074f7 	.word	0x080074f7
 8007488:	080074e9 	.word	0x080074e9
 800748c:	2b40      	cmp	r3, #64	@ 0x40
 800748e:	d02e      	beq.n	80074ee <UART_SetConfig+0xa36>
 8007490:	e031      	b.n	80074f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007492:	f7fc f969 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8007496:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007498:	e033      	b.n	8007502 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800749a:	f7fc f97b 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 800749e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074a0:	e02f      	b.n	8007502 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fd fbaa 	bl	8004c00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074b0:	e027      	b.n	8007502 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b2:	f107 0318 	add.w	r3, r7, #24
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fd fcf6 	bl	8004ea8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c0:	e01f      	b.n	8007502 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c2:	4b2d      	ldr	r3, [pc, #180]	@ (8007578 <UART_SetConfig+0xac0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007578 <UART_SetConfig+0xac0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	08db      	lsrs	r3, r3, #3
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	4a28      	ldr	r2, [pc, #160]	@ (800757c <UART_SetConfig+0xac4>)
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074e0:	e00f      	b.n	8007502 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80074e2:	4b26      	ldr	r3, [pc, #152]	@ (800757c <UART_SetConfig+0xac4>)
 80074e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e6:	e00c      	b.n	8007502 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074e8:	4b25      	ldr	r3, [pc, #148]	@ (8007580 <UART_SetConfig+0xac8>)
 80074ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ec:	e009      	b.n	8007502 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f4:	e005      	b.n	8007502 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007500:	bf00      	nop
    }

    if (pclk != 0U)
 8007502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007504:	2b00      	cmp	r3, #0
 8007506:	d021      	beq.n	800754c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	4a1d      	ldr	r2, [pc, #116]	@ (8007584 <UART_SetConfig+0xacc>)
 800750e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007512:	461a      	mov	r2, r3
 8007514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007516:	fbb3 f2f2 	udiv	r2, r3, r2
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	441a      	add	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	fbb2 f3f3 	udiv	r3, r2, r3
 800752a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	2b0f      	cmp	r3, #15
 8007530:	d909      	bls.n	8007546 <UART_SetConfig+0xa8e>
 8007532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007538:	d205      	bcs.n	8007546 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800753a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753c:	b29a      	uxth	r2, r3
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	e002      	b.n	800754c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2201      	movs	r2, #1
 8007550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2201      	movs	r2, #1
 8007558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2200      	movs	r2, #0
 8007560:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2200      	movs	r2, #0
 8007566:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007568:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800756c:	4618      	mov	r0, r3
 800756e:	3748      	adds	r7, #72	@ 0x48
 8007570:	46bd      	mov	sp, r7
 8007572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007576:	bf00      	nop
 8007578:	58024400 	.word	0x58024400
 800757c:	03d09000 	.word	0x03d09000
 8007580:	003d0900 	.word	0x003d0900
 8007584:	08009ae0 	.word	0x08009ae0

08007588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01a      	beq.n	800769e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007686:	d10a      	bne.n	800769e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	605a      	str	r2, [r3, #4]
  }
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b098      	sub	sp, #96	@ 0x60
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076dc:	f7f9 fffa 	bl	80016d4 <HAL_GetTick>
 80076e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d12f      	bne.n	8007750 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f8:	2200      	movs	r2, #0
 80076fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f88e 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d022      	beq.n	8007750 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800771a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800771e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007728:	647b      	str	r3, [r7, #68]	@ 0x44
 800772a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800772e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e6      	bne.n	800770a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2220      	movs	r2, #32
 8007740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e063      	b.n	8007818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b04      	cmp	r3, #4
 800775c:	d149      	bne.n	80077f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800775e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007766:	2200      	movs	r2, #0
 8007768:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f857 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d03c      	beq.n	80077f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	623b      	str	r3, [r7, #32]
   return(result);
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800778c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007796:	633b      	str	r3, [r7, #48]	@ 0x30
 8007798:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800779c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e6      	bne.n	8007778 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ca:	61fa      	str	r2, [r7, #28]
 80077cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	69b9      	ldr	r1, [r7, #24]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	617b      	str	r3, [r7, #20]
   return(result);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e5      	bne.n	80077aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e012      	b.n	8007818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3758      	adds	r7, #88	@ 0x58
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	e04f      	b.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d04b      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800783a:	f7f9 ff4b 	bl	80016d4 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	429a      	cmp	r2, r3
 8007848:	d302      	bcc.n	8007850 <UART_WaitOnFlagUntilTimeout+0x30>
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e04e      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d037      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b80      	cmp	r3, #128	@ 0x80
 8007866:	d034      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d031      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b08      	cmp	r3, #8
 800787a:	d110      	bne.n	800789e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2208      	movs	r2, #8
 8007882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f95b 	bl	8007b40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2208      	movs	r2, #8
 800788e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e029      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ac:	d111      	bne.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f941 	bl	8007b40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e00f      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69da      	ldr	r2, [r3, #28]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4013      	ands	r3, r2
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	bf0c      	ite	eq
 80078e2:	2301      	moveq	r3, #1
 80078e4:	2300      	movne	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	79fb      	ldrb	r3, [r7, #7]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d0a0      	beq.n	8007832 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b0a3      	sub	sp, #140	@ 0x8c
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800792e:	d10e      	bne.n	800794e <UART_Start_Receive_IT+0x52>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <UART_Start_Receive_IT+0x48>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800793e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007942:	e02d      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	22ff      	movs	r2, #255	@ 0xff
 8007948:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800794c:	e028      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <UART_Start_Receive_IT+0x76>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <UART_Start_Receive_IT+0x6c>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	22ff      	movs	r2, #255	@ 0xff
 8007962:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007966:	e01b      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	227f      	movs	r2, #127	@ 0x7f
 800796c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007970:	e016      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800797a:	d10d      	bne.n	8007998 <UART_Start_Receive_IT+0x9c>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <UART_Start_Receive_IT+0x92>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	227f      	movs	r2, #127	@ 0x7f
 8007988:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800798c:	e008      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	223f      	movs	r2, #63	@ 0x3f
 8007992:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007996:	e003      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2222      	movs	r2, #34	@ 0x22
 80079ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3308      	adds	r3, #8
 80079b6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80079c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079c2:	f043 0301 	orr.w	r3, r3, #1
 80079c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80079d4:	673a      	str	r2, [r7, #112]	@ 0x70
 80079d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80079da:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80079e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e3      	bne.n	80079b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f0:	d14f      	bne.n	8007a92 <UART_Start_Receive_IT+0x196>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079f8:	88fa      	ldrh	r2, [r7, #6]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d349      	bcc.n	8007a92 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a06:	d107      	bne.n	8007a18 <UART_Start_Receive_IT+0x11c>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d103      	bne.n	8007a18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4a47      	ldr	r2, [pc, #284]	@ (8007b30 <UART_Start_Receive_IT+0x234>)
 8007a14:	675a      	str	r2, [r3, #116]	@ 0x74
 8007a16:	e002      	b.n	8007a1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4a46      	ldr	r2, [pc, #280]	@ (8007b34 <UART_Start_Receive_IT+0x238>)
 8007a1c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01a      	beq.n	8007a5c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a4a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007a4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e4      	bne.n	8007a26 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3308      	adds	r3, #8
 8007a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007a7e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e5      	bne.n	8007a5c <UART_Start_Receive_IT+0x160>
 8007a90:	e046      	b.n	8007b20 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a9a:	d107      	bne.n	8007aac <UART_Start_Receive_IT+0x1b0>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4a24      	ldr	r2, [pc, #144]	@ (8007b38 <UART_Start_Receive_IT+0x23c>)
 8007aa8:	675a      	str	r2, [r3, #116]	@ 0x74
 8007aaa:	e002      	b.n	8007ab2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4a23      	ldr	r2, [pc, #140]	@ (8007b3c <UART_Start_Receive_IT+0x240>)
 8007ab0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d019      	beq.n	8007aee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007ace:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ada:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ade:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e6      	bne.n	8007aba <UART_Start_Receive_IT+0x1be>
 8007aec:	e018      	b.n	8007b20 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	613b      	str	r3, [r7, #16]
   return(result);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f043 0320 	orr.w	r3, r3, #32
 8007b02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b0c:	623b      	str	r3, [r7, #32]
 8007b0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	69f9      	ldr	r1, [r7, #28]
 8007b12:	6a3a      	ldr	r2, [r7, #32]
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	378c      	adds	r7, #140	@ 0x8c
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	08008361 	.word	0x08008361
 8007b34:	08008001 	.word	0x08008001
 8007b38:	08007e49 	.word	0x08007e49
 8007b3c:	08007c91 	.word	0x08007c91

08007b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b095      	sub	sp, #84	@ 0x54
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e6      	bne.n	8007b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007c08 <UART_EndRxTransfer+0xc8>)
 8007b8e:	4013      	ands	r3, r2
 8007b90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e5      	bne.n	8007b7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d118      	bne.n	8007be8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	e853 3f00 	ldrex	r3, [r3]
 8007bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f023 0310 	bic.w	r3, r3, #16
 8007bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	6979      	ldr	r1, [r7, #20]
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	613b      	str	r3, [r7, #16]
   return(result);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e6      	bne.n	8007bb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007bfc:	bf00      	nop
 8007bfe:	3754      	adds	r7, #84	@ 0x54
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	effffffe 	.word	0xeffffffe

08007c0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f7fe ff3a 	bl	8006aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6979      	ldr	r1, [r7, #20]
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e6      	bne.n	8007c40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7fe fefb 	bl	8006a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c86:	bf00      	nop
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b09c      	sub	sp, #112	@ 0x70
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ca8:	2b22      	cmp	r3, #34	@ 0x22
 8007caa:	f040 80be 	bne.w	8007e2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007cbc:	b2d9      	uxtb	r1, r3
 8007cbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc8:	400a      	ands	r2, r1
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f040 80a1 	bne.w	8007e3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e6      	bne.n	8007cf8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d3c:	f023 0301 	bic.w	r3, r3, #1
 8007d40:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3308      	adds	r3, #8
 8007d48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e5      	bne.n	8007d2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a33      	ldr	r2, [pc, #204]	@ (8007e44 <UART_RxISR_8BIT+0x1b4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d01f      	beq.n	8007dbc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d018      	beq.n	8007dbc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	623b      	str	r3, [r7, #32]
   return(result);
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	461a      	mov	r2, r3
 8007da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e6      	bne.n	8007d8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d12e      	bne.n	8007e22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0310 	bic.w	r3, r3, #16
 8007dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	69b9      	ldr	r1, [r7, #24]
 8007dee:	69fa      	ldr	r2, [r7, #28]
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	617b      	str	r3, [r7, #20]
   return(result);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e6      	bne.n	8007dca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d103      	bne.n	8007e12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2210      	movs	r2, #16
 8007e10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7f8 fc7c 	bl	8000718 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e20:	e00b      	b.n	8007e3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fe fe34 	bl	8006a90 <HAL_UART_RxCpltCallback>
}
 8007e28:	e007      	b.n	8007e3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	699a      	ldr	r2, [r3, #24]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0208 	orr.w	r2, r2, #8
 8007e38:	619a      	str	r2, [r3, #24]
}
 8007e3a:	bf00      	nop
 8007e3c:	3770      	adds	r7, #112	@ 0x70
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	58000c00 	.word	0x58000c00

08007e48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b09c      	sub	sp, #112	@ 0x70
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e60:	2b22      	cmp	r3, #34	@ 0x22
 8007e62:	f040 80be 	bne.w	8007fe2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e74:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007e7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007e7e:	4013      	ands	r3, r2
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e8a:	1c9a      	adds	r2, r3, #2
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f040 80a1 	bne.w	8007ff2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ec4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ed0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ed4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e6      	bne.n	8007eb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3308      	adds	r3, #8
 8007f00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f02:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e5      	bne.n	8007ee2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a33      	ldr	r2, [pc, #204]	@ (8007ffc <UART_RxISR_16BIT+0x1b4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d01f      	beq.n	8007f74 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d018      	beq.n	8007f74 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f62:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e6      	bne.n	8007f42 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d12e      	bne.n	8007fda <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f023 0310 	bic.w	r3, r3, #16
 8007f96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6979      	ldr	r1, [r7, #20]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	613b      	str	r3, [r7, #16]
   return(result);
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e6      	bne.n	8007f82 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b10      	cmp	r3, #16
 8007fc0:	d103      	bne.n	8007fca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7f8 fba0 	bl	8000718 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fd8:	e00b      	b.n	8007ff2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fe fd58 	bl	8006a90 <HAL_UART_RxCpltCallback>
}
 8007fe0:	e007      	b.n	8007ff2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	699a      	ldr	r2, [r3, #24]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0208 	orr.w	r2, r2, #8
 8007ff0:	619a      	str	r2, [r3, #24]
}
 8007ff2:	bf00      	nop
 8007ff4:	3770      	adds	r7, #112	@ 0x70
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	58000c00 	.word	0x58000c00

08008000 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b0ac      	sub	sp, #176	@ 0xb0
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800800e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008036:	2b22      	cmp	r3, #34	@ 0x22
 8008038:	f040 8180 	bne.w	800833c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008042:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008046:	e123      	b.n	8008290 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008052:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008056:	b2d9      	uxtb	r1, r3
 8008058:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800805c:	b2da      	uxtb	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008062:	400a      	ands	r2, r1
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b29a      	uxth	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800808e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	2b00      	cmp	r3, #0
 8008098:	d053      	beq.n	8008142 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800809a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d011      	beq.n	80080ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80080a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2201      	movs	r2, #1
 80080b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c0:	f043 0201 	orr.w	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d011      	beq.n	80080fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80080d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2202      	movs	r2, #2
 80080e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f0:	f043 0204 	orr.w	r2, r3, #4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d011      	beq.n	800812a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2204      	movs	r2, #4
 8008118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008120:	f043 0202 	orr.w	r2, r3, #2
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008130:	2b00      	cmp	r3, #0
 8008132:	d006      	beq.n	8008142 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7fe fcb5 	bl	8006aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	f040 80a0 	bne.w	8008290 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800815e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008172:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008174:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008178:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008180:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e4      	bne.n	8008150 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3308      	adds	r3, #8
 800818c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008196:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008198:	4b6e      	ldr	r3, [pc, #440]	@ (8008354 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800819a:	4013      	ands	r3, r2
 800819c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081aa:	66ba      	str	r2, [r7, #104]	@ 0x68
 80081ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80081b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80081b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e3      	bne.n	8008186 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a60      	ldr	r2, [pc, #384]	@ (8008358 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d021      	beq.n	8008220 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d01a      	beq.n	8008220 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80081f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800820c:	657b      	str	r3, [r7, #84]	@ 0x54
 800820e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008212:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800821a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e4      	bne.n	80081ea <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008224:	2b01      	cmp	r3, #1
 8008226:	d130      	bne.n	800828a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	f023 0310 	bic.w	r3, r3, #16
 8008242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008250:	643b      	str	r3, [r7, #64]	@ 0x40
 8008252:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008258:	e841 2300 	strex	r3, r2, [r1]
 800825c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e4      	bne.n	800822e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	f003 0310 	and.w	r3, r3, #16
 800826e:	2b10      	cmp	r3, #16
 8008270:	d103      	bne.n	800827a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2210      	movs	r2, #16
 8008278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7f8 fa48 	bl	8000718 <HAL_UARTEx_RxEventCallback>
 8008288:	e002      	b.n	8008290 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7fe fc00 	bl	8006a90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008290:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008294:	2b00      	cmp	r3, #0
 8008296:	d006      	beq.n	80082a6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f47f aed1 	bne.w	8008048 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d049      	beq.n	800834c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082be:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d242      	bcs.n	800834c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3308      	adds	r3, #8
 80082cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80082ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e3      	bne.n	80082c6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a16      	ldr	r2, [pc, #88]	@ (800835c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008302:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	60bb      	str	r3, [r7, #8]
   return(result);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f043 0320 	orr.w	r3, r3, #32
 8008318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008326:	61bb      	str	r3, [r7, #24]
 8008328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6979      	ldr	r1, [r7, #20]
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	613b      	str	r3, [r7, #16]
   return(result);
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e4      	bne.n	8008304 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800833a:	e007      	b.n	800834c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0208 	orr.w	r2, r2, #8
 800834a:	619a      	str	r2, [r3, #24]
}
 800834c:	bf00      	nop
 800834e:	37b0      	adds	r7, #176	@ 0xb0
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	effffffe 	.word	0xeffffffe
 8008358:	58000c00 	.word	0x58000c00
 800835c:	08007c91 	.word	0x08007c91

08008360 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b0ae      	sub	sp, #184	@ 0xb8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800836e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008396:	2b22      	cmp	r3, #34	@ 0x22
 8008398:	f040 8184 	bne.w	80086a4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80083a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083a6:	e127      	b.n	80085f8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80083ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80083be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80083c2:	4013      	ands	r3, r2
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083d0:	1c9a      	adds	r2, r3, #2
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d053      	beq.n	80084a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d011      	beq.n	800842e <UART_RxISR_16BIT_FIFOEN+0xce>
 800840a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800840e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00b      	beq.n	800842e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2201      	movs	r2, #1
 800841c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008424:	f043 0201 	orr.w	r2, r3, #1
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800842e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d011      	beq.n	800845e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800843a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2202      	movs	r2, #2
 800844c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008454:	f043 0204 	orr.w	r2, r3, #4
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800845e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	d011      	beq.n	800848e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800846a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00b      	beq.n	800848e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2204      	movs	r2, #4
 800847c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008484:	f043 0202 	orr.w	r2, r3, #2
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008494:	2b00      	cmp	r3, #0
 8008496:	d006      	beq.n	80084a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7fe fb03 	bl	8006aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f040 80a2 	bne.w	80085f8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084da:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e2      	bne.n	80084b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3308      	adds	r3, #8
 80084f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008500:	4b6e      	ldr	r3, [pc, #440]	@ (80086bc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008502:	4013      	ands	r3, r2
 8008504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008512:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008514:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008518:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e3      	bne.n	80084ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a60      	ldr	r2, [pc, #384]	@ (80086c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d021      	beq.n	8008588 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d01a      	beq.n	8008588 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008566:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008574:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008576:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800857a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e4      	bne.n	8008552 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d130      	bne.n	80085f2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859e:	e853 3f00 	ldrex	r3, [r3]
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a6:	f023 0310 	bic.w	r3, r3, #16
 80085aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085c0:	e841 2300 	strex	r3, r2, [r1]
 80085c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e4      	bne.n	8008596 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	f003 0310 	and.w	r3, r3, #16
 80085d6:	2b10      	cmp	r3, #16
 80085d8:	d103      	bne.n	80085e2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2210      	movs	r2, #16
 80085e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7f8 f894 	bl	8000718 <HAL_UARTEx_RxEventCallback>
 80085f0:	e002      	b.n	80085f8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7fe fa4c 	bl	8006a90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d006      	beq.n	800860e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008600:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	f47f aecd 	bne.w	80083a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008614:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008618:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800861c:	2b00      	cmp	r3, #0
 800861e:	d049      	beq.n	80086b4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008626:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800862a:	429a      	cmp	r2, r3
 800862c:	d242      	bcs.n	80086b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3308      	adds	r3, #8
 8008634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	623b      	str	r3, [r7, #32]
   return(result);
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3308      	adds	r3, #8
 800864e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008652:	633a      	str	r2, [r7, #48]	@ 0x30
 8008654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e3      	bne.n	800862e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a16      	ldr	r2, [pc, #88]	@ (80086c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800866a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	60fb      	str	r3, [r7, #12]
   return(result);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f043 0320 	orr.w	r3, r3, #32
 8008680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800868e:	61fb      	str	r3, [r7, #28]
 8008690:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	69b9      	ldr	r1, [r7, #24]
 8008694:	69fa      	ldr	r2, [r7, #28]
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	617b      	str	r3, [r7, #20]
   return(result);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e4      	bne.n	800866c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086a2:	e007      	b.n	80086b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	699a      	ldr	r2, [r3, #24]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0208 	orr.w	r2, r2, #8
 80086b2:	619a      	str	r2, [r3, #24]
}
 80086b4:	bf00      	nop
 80086b6:	37b8      	adds	r7, #184	@ 0xb8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	effffffe 	.word	0xeffffffe
 80086c0:	58000c00 	.word	0x58000c00
 80086c4:	08007e49 	.word	0x08007e49

080086c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_UARTEx_DisableFifoMode+0x16>
 8008716:	2302      	movs	r3, #2
 8008718:	e027      	b.n	800876a <HAL_UARTEx_DisableFifoMode+0x66>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2224      	movs	r2, #36	@ 0x24
 8008726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0201 	bic.w	r2, r2, #1
 8008740:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008748:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2220      	movs	r2, #32
 800875c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800878a:	2302      	movs	r3, #2
 800878c:	e02d      	b.n	80087ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2224      	movs	r2, #36	@ 0x24
 800879a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f8a0 	bl	8008910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008806:	2302      	movs	r3, #2
 8008808:	e02d      	b.n	8008866 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2224      	movs	r2, #36	@ 0x24
 8008816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0201 	bic.w	r2, r2, #1
 8008830:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f862 	bl	8008910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b08c      	sub	sp, #48	@ 0x30
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	4613      	mov	r3, r2
 800887a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008888:	2b20      	cmp	r3, #32
 800888a:	d13b      	bne.n	8008904 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8008892:	88fb      	ldrh	r3, [r7, #6]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e034      	b.n	8008906 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80088a8:	88fb      	ldrh	r3, [r7, #6]
 80088aa:	461a      	mov	r2, r3
 80088ac:	68b9      	ldr	r1, [r7, #8]
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f7ff f824 	bl	80078fc <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d11d      	bne.n	80088f8 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2210      	movs	r2, #16
 80088c2:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	617b      	str	r3, [r7, #20]
   return(result);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f043 0310 	orr.w	r3, r3, #16
 80088d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088e4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6a39      	ldr	r1, [r7, #32]
 80088e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e6      	bne.n	80088c4 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80088f6:	e002      	b.n	80088fe <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80088fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008902:	e000      	b.n	8008906 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8008904:	2302      	movs	r3, #2
  }
}
 8008906:	4618      	mov	r0, r3
 8008908:	3730      	adds	r7, #48	@ 0x30
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800891c:	2b00      	cmp	r3, #0
 800891e:	d108      	bne.n	8008932 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008930:	e031      	b.n	8008996 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008932:	2310      	movs	r3, #16
 8008934:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008936:	2310      	movs	r3, #16
 8008938:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	0e5b      	lsrs	r3, r3, #25
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	0f5b      	lsrs	r3, r3, #29
 8008952:	b2db      	uxtb	r3, r3
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	7b3a      	ldrb	r2, [r7, #12]
 800895e:	4911      	ldr	r1, [pc, #68]	@ (80089a4 <UARTEx_SetNbDataToProcess+0x94>)
 8008960:	5c8a      	ldrb	r2, [r1, r2]
 8008962:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008966:	7b3a      	ldrb	r2, [r7, #12]
 8008968:	490f      	ldr	r1, [pc, #60]	@ (80089a8 <UARTEx_SetNbDataToProcess+0x98>)
 800896a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800896c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008970:	b29a      	uxth	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	7b7a      	ldrb	r2, [r7, #13]
 800897c:	4909      	ldr	r1, [pc, #36]	@ (80089a4 <UARTEx_SetNbDataToProcess+0x94>)
 800897e:	5c8a      	ldrb	r2, [r1, r2]
 8008980:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008984:	7b7a      	ldrb	r2, [r7, #13]
 8008986:	4908      	ldr	r1, [pc, #32]	@ (80089a8 <UARTEx_SetNbDataToProcess+0x98>)
 8008988:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800898a:	fb93 f3f2 	sdiv	r3, r3, r2
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008996:	bf00      	nop
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	08009af8 	.word	0x08009af8
 80089a8:	08009b00 	.word	0x08009b00

080089ac <atoi>:
 80089ac:	220a      	movs	r2, #10
 80089ae:	2100      	movs	r1, #0
 80089b0:	f000 b87a 	b.w	8008aa8 <strtol>

080089b4 <_strtol_l.constprop.0>:
 80089b4:	2b24      	cmp	r3, #36	@ 0x24
 80089b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ba:	4686      	mov	lr, r0
 80089bc:	4690      	mov	r8, r2
 80089be:	d801      	bhi.n	80089c4 <_strtol_l.constprop.0+0x10>
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d106      	bne.n	80089d2 <_strtol_l.constprop.0+0x1e>
 80089c4:	f000 fa2a 	bl	8008e1c <__errno>
 80089c8:	2316      	movs	r3, #22
 80089ca:	6003      	str	r3, [r0, #0]
 80089cc:	2000      	movs	r0, #0
 80089ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d2:	4834      	ldr	r0, [pc, #208]	@ (8008aa4 <_strtol_l.constprop.0+0xf0>)
 80089d4:	460d      	mov	r5, r1
 80089d6:	462a      	mov	r2, r5
 80089d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089dc:	5d06      	ldrb	r6, [r0, r4]
 80089de:	f016 0608 	ands.w	r6, r6, #8
 80089e2:	d1f8      	bne.n	80089d6 <_strtol_l.constprop.0+0x22>
 80089e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80089e6:	d12d      	bne.n	8008a44 <_strtol_l.constprop.0+0x90>
 80089e8:	782c      	ldrb	r4, [r5, #0]
 80089ea:	2601      	movs	r6, #1
 80089ec:	1c95      	adds	r5, r2, #2
 80089ee:	f033 0210 	bics.w	r2, r3, #16
 80089f2:	d109      	bne.n	8008a08 <_strtol_l.constprop.0+0x54>
 80089f4:	2c30      	cmp	r4, #48	@ 0x30
 80089f6:	d12a      	bne.n	8008a4e <_strtol_l.constprop.0+0x9a>
 80089f8:	782a      	ldrb	r2, [r5, #0]
 80089fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80089fe:	2a58      	cmp	r2, #88	@ 0x58
 8008a00:	d125      	bne.n	8008a4e <_strtol_l.constprop.0+0x9a>
 8008a02:	786c      	ldrb	r4, [r5, #1]
 8008a04:	2310      	movs	r3, #16
 8008a06:	3502      	adds	r5, #2
 8008a08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008a0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a10:	2200      	movs	r2, #0
 8008a12:	fbbc f9f3 	udiv	r9, ip, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008a20:	2f09      	cmp	r7, #9
 8008a22:	d81b      	bhi.n	8008a5c <_strtol_l.constprop.0+0xa8>
 8008a24:	463c      	mov	r4, r7
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	dd27      	ble.n	8008a7a <_strtol_l.constprop.0+0xc6>
 8008a2a:	1c57      	adds	r7, r2, #1
 8008a2c:	d007      	beq.n	8008a3e <_strtol_l.constprop.0+0x8a>
 8008a2e:	4581      	cmp	r9, r0
 8008a30:	d320      	bcc.n	8008a74 <_strtol_l.constprop.0+0xc0>
 8008a32:	d101      	bne.n	8008a38 <_strtol_l.constprop.0+0x84>
 8008a34:	45a2      	cmp	sl, r4
 8008a36:	db1d      	blt.n	8008a74 <_strtol_l.constprop.0+0xc0>
 8008a38:	fb00 4003 	mla	r0, r0, r3, r4
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a42:	e7eb      	b.n	8008a1c <_strtol_l.constprop.0+0x68>
 8008a44:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a46:	bf04      	itt	eq
 8008a48:	782c      	ldrbeq	r4, [r5, #0]
 8008a4a:	1c95      	addeq	r5, r2, #2
 8008a4c:	e7cf      	b.n	80089ee <_strtol_l.constprop.0+0x3a>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1da      	bne.n	8008a08 <_strtol_l.constprop.0+0x54>
 8008a52:	2c30      	cmp	r4, #48	@ 0x30
 8008a54:	bf0c      	ite	eq
 8008a56:	2308      	moveq	r3, #8
 8008a58:	230a      	movne	r3, #10
 8008a5a:	e7d5      	b.n	8008a08 <_strtol_l.constprop.0+0x54>
 8008a5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008a60:	2f19      	cmp	r7, #25
 8008a62:	d801      	bhi.n	8008a68 <_strtol_l.constprop.0+0xb4>
 8008a64:	3c37      	subs	r4, #55	@ 0x37
 8008a66:	e7de      	b.n	8008a26 <_strtol_l.constprop.0+0x72>
 8008a68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008a6c:	2f19      	cmp	r7, #25
 8008a6e:	d804      	bhi.n	8008a7a <_strtol_l.constprop.0+0xc6>
 8008a70:	3c57      	subs	r4, #87	@ 0x57
 8008a72:	e7d8      	b.n	8008a26 <_strtol_l.constprop.0+0x72>
 8008a74:	f04f 32ff 	mov.w	r2, #4294967295
 8008a78:	e7e1      	b.n	8008a3e <_strtol_l.constprop.0+0x8a>
 8008a7a:	1c53      	adds	r3, r2, #1
 8008a7c:	d108      	bne.n	8008a90 <_strtol_l.constprop.0+0xdc>
 8008a7e:	2322      	movs	r3, #34	@ 0x22
 8008a80:	f8ce 3000 	str.w	r3, [lr]
 8008a84:	4660      	mov	r0, ip
 8008a86:	f1b8 0f00 	cmp.w	r8, #0
 8008a8a:	d0a0      	beq.n	80089ce <_strtol_l.constprop.0+0x1a>
 8008a8c:	1e69      	subs	r1, r5, #1
 8008a8e:	e006      	b.n	8008a9e <_strtol_l.constprop.0+0xea>
 8008a90:	b106      	cbz	r6, 8008a94 <_strtol_l.constprop.0+0xe0>
 8008a92:	4240      	negs	r0, r0
 8008a94:	f1b8 0f00 	cmp.w	r8, #0
 8008a98:	d099      	beq.n	80089ce <_strtol_l.constprop.0+0x1a>
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	d1f6      	bne.n	8008a8c <_strtol_l.constprop.0+0xd8>
 8008a9e:	f8c8 1000 	str.w	r1, [r8]
 8008aa2:	e794      	b.n	80089ce <_strtol_l.constprop.0+0x1a>
 8008aa4:	08009b09 	.word	0x08009b09

08008aa8 <strtol>:
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	460a      	mov	r2, r1
 8008aac:	4601      	mov	r1, r0
 8008aae:	4802      	ldr	r0, [pc, #8]	@ (8008ab8 <strtol+0x10>)
 8008ab0:	6800      	ldr	r0, [r0, #0]
 8008ab2:	f7ff bf7f 	b.w	80089b4 <_strtol_l.constprop.0>
 8008ab6:	bf00      	nop
 8008ab8:	2400001c 	.word	0x2400001c

08008abc <std>:
 8008abc:	2300      	movs	r3, #0
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aca:	6083      	str	r3, [r0, #8]
 8008acc:	8181      	strh	r1, [r0, #12]
 8008ace:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ad0:	81c2      	strh	r2, [r0, #14]
 8008ad2:	6183      	str	r3, [r0, #24]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	2208      	movs	r2, #8
 8008ad8:	305c      	adds	r0, #92	@ 0x5c
 8008ada:	f000 f8f4 	bl	8008cc6 <memset>
 8008ade:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <std+0x58>)
 8008ae0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <std+0x5c>)
 8008ae4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b1c <std+0x60>)
 8008ae8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008aea:	4b0d      	ldr	r3, [pc, #52]	@ (8008b20 <std+0x64>)
 8008aec:	6323      	str	r3, [r4, #48]	@ 0x30
 8008aee:	4b0d      	ldr	r3, [pc, #52]	@ (8008b24 <std+0x68>)
 8008af0:	6224      	str	r4, [r4, #32]
 8008af2:	429c      	cmp	r4, r3
 8008af4:	d006      	beq.n	8008b04 <std+0x48>
 8008af6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008afa:	4294      	cmp	r4, r2
 8008afc:	d002      	beq.n	8008b04 <std+0x48>
 8008afe:	33d0      	adds	r3, #208	@ 0xd0
 8008b00:	429c      	cmp	r4, r3
 8008b02:	d105      	bne.n	8008b10 <std+0x54>
 8008b04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b0c:	f000 b9b0 	b.w	8008e70 <__retarget_lock_init_recursive>
 8008b10:	bd10      	pop	{r4, pc}
 8008b12:	bf00      	nop
 8008b14:	08008c41 	.word	0x08008c41
 8008b18:	08008c63 	.word	0x08008c63
 8008b1c:	08008c9b 	.word	0x08008c9b
 8008b20:	08008cbf 	.word	0x08008cbf
 8008b24:	2400031c 	.word	0x2400031c

08008b28 <stdio_exit_handler>:
 8008b28:	4a02      	ldr	r2, [pc, #8]	@ (8008b34 <stdio_exit_handler+0xc>)
 8008b2a:	4903      	ldr	r1, [pc, #12]	@ (8008b38 <stdio_exit_handler+0x10>)
 8008b2c:	4803      	ldr	r0, [pc, #12]	@ (8008b3c <stdio_exit_handler+0x14>)
 8008b2e:	f000 b869 	b.w	8008c04 <_fwalk_sglue>
 8008b32:	bf00      	nop
 8008b34:	24000010 	.word	0x24000010
 8008b38:	080091bd 	.word	0x080091bd
 8008b3c:	24000020 	.word	0x24000020

08008b40 <cleanup_stdio>:
 8008b40:	6841      	ldr	r1, [r0, #4]
 8008b42:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <cleanup_stdio+0x34>)
 8008b44:	4299      	cmp	r1, r3
 8008b46:	b510      	push	{r4, lr}
 8008b48:	4604      	mov	r4, r0
 8008b4a:	d001      	beq.n	8008b50 <cleanup_stdio+0x10>
 8008b4c:	f000 fb36 	bl	80091bc <_fflush_r>
 8008b50:	68a1      	ldr	r1, [r4, #8]
 8008b52:	4b09      	ldr	r3, [pc, #36]	@ (8008b78 <cleanup_stdio+0x38>)
 8008b54:	4299      	cmp	r1, r3
 8008b56:	d002      	beq.n	8008b5e <cleanup_stdio+0x1e>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 fb2f 	bl	80091bc <_fflush_r>
 8008b5e:	68e1      	ldr	r1, [r4, #12]
 8008b60:	4b06      	ldr	r3, [pc, #24]	@ (8008b7c <cleanup_stdio+0x3c>)
 8008b62:	4299      	cmp	r1, r3
 8008b64:	d004      	beq.n	8008b70 <cleanup_stdio+0x30>
 8008b66:	4620      	mov	r0, r4
 8008b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b6c:	f000 bb26 	b.w	80091bc <_fflush_r>
 8008b70:	bd10      	pop	{r4, pc}
 8008b72:	bf00      	nop
 8008b74:	2400031c 	.word	0x2400031c
 8008b78:	24000384 	.word	0x24000384
 8008b7c:	240003ec 	.word	0x240003ec

08008b80 <global_stdio_init.part.0>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb0 <global_stdio_init.part.0+0x30>)
 8008b84:	4c0b      	ldr	r4, [pc, #44]	@ (8008bb4 <global_stdio_init.part.0+0x34>)
 8008b86:	4a0c      	ldr	r2, [pc, #48]	@ (8008bb8 <global_stdio_init.part.0+0x38>)
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2104      	movs	r1, #4
 8008b90:	f7ff ff94 	bl	8008abc <std>
 8008b94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b98:	2201      	movs	r2, #1
 8008b9a:	2109      	movs	r1, #9
 8008b9c:	f7ff ff8e 	bl	8008abc <std>
 8008ba0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008baa:	2112      	movs	r1, #18
 8008bac:	f7ff bf86 	b.w	8008abc <std>
 8008bb0:	24000454 	.word	0x24000454
 8008bb4:	2400031c 	.word	0x2400031c
 8008bb8:	08008b29 	.word	0x08008b29

08008bbc <__sfp_lock_acquire>:
 8008bbc:	4801      	ldr	r0, [pc, #4]	@ (8008bc4 <__sfp_lock_acquire+0x8>)
 8008bbe:	f000 b958 	b.w	8008e72 <__retarget_lock_acquire_recursive>
 8008bc2:	bf00      	nop
 8008bc4:	2400045d 	.word	0x2400045d

08008bc8 <__sfp_lock_release>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	@ (8008bd0 <__sfp_lock_release+0x8>)
 8008bca:	f000 b953 	b.w	8008e74 <__retarget_lock_release_recursive>
 8008bce:	bf00      	nop
 8008bd0:	2400045d 	.word	0x2400045d

08008bd4 <__sinit>:
 8008bd4:	b510      	push	{r4, lr}
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	f7ff fff0 	bl	8008bbc <__sfp_lock_acquire>
 8008bdc:	6a23      	ldr	r3, [r4, #32]
 8008bde:	b11b      	cbz	r3, 8008be8 <__sinit+0x14>
 8008be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008be4:	f7ff bff0 	b.w	8008bc8 <__sfp_lock_release>
 8008be8:	4b04      	ldr	r3, [pc, #16]	@ (8008bfc <__sinit+0x28>)
 8008bea:	6223      	str	r3, [r4, #32]
 8008bec:	4b04      	ldr	r3, [pc, #16]	@ (8008c00 <__sinit+0x2c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1f5      	bne.n	8008be0 <__sinit+0xc>
 8008bf4:	f7ff ffc4 	bl	8008b80 <global_stdio_init.part.0>
 8008bf8:	e7f2      	b.n	8008be0 <__sinit+0xc>
 8008bfa:	bf00      	nop
 8008bfc:	08008b41 	.word	0x08008b41
 8008c00:	24000454 	.word	0x24000454

08008c04 <_fwalk_sglue>:
 8008c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c08:	4607      	mov	r7, r0
 8008c0a:	4688      	mov	r8, r1
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	2600      	movs	r6, #0
 8008c10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c14:	f1b9 0901 	subs.w	r9, r9, #1
 8008c18:	d505      	bpl.n	8008c26 <_fwalk_sglue+0x22>
 8008c1a:	6824      	ldr	r4, [r4, #0]
 8008c1c:	2c00      	cmp	r4, #0
 8008c1e:	d1f7      	bne.n	8008c10 <_fwalk_sglue+0xc>
 8008c20:	4630      	mov	r0, r6
 8008c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c26:	89ab      	ldrh	r3, [r5, #12]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d907      	bls.n	8008c3c <_fwalk_sglue+0x38>
 8008c2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c30:	3301      	adds	r3, #1
 8008c32:	d003      	beq.n	8008c3c <_fwalk_sglue+0x38>
 8008c34:	4629      	mov	r1, r5
 8008c36:	4638      	mov	r0, r7
 8008c38:	47c0      	blx	r8
 8008c3a:	4306      	orrs	r6, r0
 8008c3c:	3568      	adds	r5, #104	@ 0x68
 8008c3e:	e7e9      	b.n	8008c14 <_fwalk_sglue+0x10>

08008c40 <__sread>:
 8008c40:	b510      	push	{r4, lr}
 8008c42:	460c      	mov	r4, r1
 8008c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c48:	f000 f8c4 	bl	8008dd4 <_read_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	bfab      	itete	ge
 8008c50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c52:	89a3      	ldrhlt	r3, [r4, #12]
 8008c54:	181b      	addge	r3, r3, r0
 8008c56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c5a:	bfac      	ite	ge
 8008c5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c5e:	81a3      	strhlt	r3, [r4, #12]
 8008c60:	bd10      	pop	{r4, pc}

08008c62 <__swrite>:
 8008c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c66:	461f      	mov	r7, r3
 8008c68:	898b      	ldrh	r3, [r1, #12]
 8008c6a:	05db      	lsls	r3, r3, #23
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	460c      	mov	r4, r1
 8008c70:	4616      	mov	r6, r2
 8008c72:	d505      	bpl.n	8008c80 <__swrite+0x1e>
 8008c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c78:	2302      	movs	r3, #2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f000 f898 	bl	8008db0 <_lseek_r>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	463b      	mov	r3, r7
 8008c90:	4628      	mov	r0, r5
 8008c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c96:	f000 b8af 	b.w	8008df8 <_write_r>

08008c9a <__sseek>:
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca2:	f000 f885 	bl	8008db0 <_lseek_r>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	bf15      	itete	ne
 8008cac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cb6:	81a3      	strheq	r3, [r4, #12]
 8008cb8:	bf18      	it	ne
 8008cba:	81a3      	strhne	r3, [r4, #12]
 8008cbc:	bd10      	pop	{r4, pc}

08008cbe <__sclose>:
 8008cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc2:	f000 b865 	b.w	8008d90 <_close_r>

08008cc6 <memset>:
 8008cc6:	4402      	add	r2, r0
 8008cc8:	4603      	mov	r3, r0
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d100      	bne.n	8008cd0 <memset+0xa>
 8008cce:	4770      	bx	lr
 8008cd0:	f803 1b01 	strb.w	r1, [r3], #1
 8008cd4:	e7f9      	b.n	8008cca <memset+0x4>
	...

08008cd8 <strtok>:
 8008cd8:	4b16      	ldr	r3, [pc, #88]	@ (8008d34 <strtok+0x5c>)
 8008cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cde:	681f      	ldr	r7, [r3, #0]
 8008ce0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	460e      	mov	r6, r1
 8008ce6:	b9ec      	cbnz	r4, 8008d24 <strtok+0x4c>
 8008ce8:	2050      	movs	r0, #80	@ 0x50
 8008cea:	f000 f92d 	bl	8008f48 <malloc>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	6478      	str	r0, [r7, #68]	@ 0x44
 8008cf2:	b920      	cbnz	r0, 8008cfe <strtok+0x26>
 8008cf4:	4b10      	ldr	r3, [pc, #64]	@ (8008d38 <strtok+0x60>)
 8008cf6:	4811      	ldr	r0, [pc, #68]	@ (8008d3c <strtok+0x64>)
 8008cf8:	215b      	movs	r1, #91	@ 0x5b
 8008cfa:	f000 f8bd 	bl	8008e78 <__assert_func>
 8008cfe:	e9c0 4400 	strd	r4, r4, [r0]
 8008d02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008d06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008d0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008d0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008d12:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008d16:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008d1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008d1e:	6184      	str	r4, [r0, #24]
 8008d20:	7704      	strb	r4, [r0, #28]
 8008d22:	6244      	str	r4, [r0, #36]	@ 0x24
 8008d24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d30:	f000 b806 	b.w	8008d40 <__strtok_r>
 8008d34:	2400001c 	.word	0x2400001c
 8008d38:	08009c09 	.word	0x08009c09
 8008d3c:	08009c20 	.word	0x08009c20

08008d40 <__strtok_r>:
 8008d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d42:	4604      	mov	r4, r0
 8008d44:	b908      	cbnz	r0, 8008d4a <__strtok_r+0xa>
 8008d46:	6814      	ldr	r4, [r2, #0]
 8008d48:	b144      	cbz	r4, 8008d5c <__strtok_r+0x1c>
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008d50:	460f      	mov	r7, r1
 8008d52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008d56:	b91e      	cbnz	r6, 8008d60 <__strtok_r+0x20>
 8008d58:	b965      	cbnz	r5, 8008d74 <__strtok_r+0x34>
 8008d5a:	6015      	str	r5, [r2, #0]
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e005      	b.n	8008d6c <__strtok_r+0x2c>
 8008d60:	42b5      	cmp	r5, r6
 8008d62:	d1f6      	bne.n	8008d52 <__strtok_r+0x12>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1f0      	bne.n	8008d4a <__strtok_r+0xa>
 8008d68:	6014      	str	r4, [r2, #0]
 8008d6a:	7003      	strb	r3, [r0, #0]
 8008d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d6e:	461c      	mov	r4, r3
 8008d70:	e00c      	b.n	8008d8c <__strtok_r+0x4c>
 8008d72:	b915      	cbnz	r5, 8008d7a <__strtok_r+0x3a>
 8008d74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d78:	460e      	mov	r6, r1
 8008d7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008d7e:	42ab      	cmp	r3, r5
 8008d80:	d1f7      	bne.n	8008d72 <__strtok_r+0x32>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0f3      	beq.n	8008d6e <__strtok_r+0x2e>
 8008d86:	2300      	movs	r3, #0
 8008d88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008d8c:	6014      	str	r4, [r2, #0]
 8008d8e:	e7ed      	b.n	8008d6c <__strtok_r+0x2c>

08008d90 <_close_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d06      	ldr	r5, [pc, #24]	@ (8008dac <_close_r+0x1c>)
 8008d94:	2300      	movs	r3, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	f7f8 faf8 	bl	8001390 <_close>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d102      	bne.n	8008daa <_close_r+0x1a>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	b103      	cbz	r3, 8008daa <_close_r+0x1a>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	24000458 	.word	0x24000458

08008db0 <_lseek_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d07      	ldr	r5, [pc, #28]	@ (8008dd0 <_lseek_r+0x20>)
 8008db4:	4604      	mov	r4, r0
 8008db6:	4608      	mov	r0, r1
 8008db8:	4611      	mov	r1, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	602a      	str	r2, [r5, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f7f8 fb0d 	bl	80013de <_lseek>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_lseek_r+0x1e>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_lseek_r+0x1e>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	24000458 	.word	0x24000458

08008dd4 <_read_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d07      	ldr	r5, [pc, #28]	@ (8008df4 <_read_r+0x20>)
 8008dd8:	4604      	mov	r4, r0
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	2200      	movs	r2, #0
 8008de0:	602a      	str	r2, [r5, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f7f8 fa9b 	bl	800131e <_read>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_read_r+0x1e>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_read_r+0x1e>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	24000458 	.word	0x24000458

08008df8 <_write_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	@ (8008e18 <_write_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7f8 faa6 	bl	8001358 <_write>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_write_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_write_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	24000458 	.word	0x24000458

08008e1c <__errno>:
 8008e1c:	4b01      	ldr	r3, [pc, #4]	@ (8008e24 <__errno+0x8>)
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	2400001c 	.word	0x2400001c

08008e28 <__libc_init_array>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	4d0d      	ldr	r5, [pc, #52]	@ (8008e60 <__libc_init_array+0x38>)
 8008e2c:	4c0d      	ldr	r4, [pc, #52]	@ (8008e64 <__libc_init_array+0x3c>)
 8008e2e:	1b64      	subs	r4, r4, r5
 8008e30:	10a4      	asrs	r4, r4, #2
 8008e32:	2600      	movs	r6, #0
 8008e34:	42a6      	cmp	r6, r4
 8008e36:	d109      	bne.n	8008e4c <__libc_init_array+0x24>
 8008e38:	4d0b      	ldr	r5, [pc, #44]	@ (8008e68 <__libc_init_array+0x40>)
 8008e3a:	4c0c      	ldr	r4, [pc, #48]	@ (8008e6c <__libc_init_array+0x44>)
 8008e3c:	f000 fe3a 	bl	8009ab4 <_init>
 8008e40:	1b64      	subs	r4, r4, r5
 8008e42:	10a4      	asrs	r4, r4, #2
 8008e44:	2600      	movs	r6, #0
 8008e46:	42a6      	cmp	r6, r4
 8008e48:	d105      	bne.n	8008e56 <__libc_init_array+0x2e>
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e50:	4798      	blx	r3
 8008e52:	3601      	adds	r6, #1
 8008e54:	e7ee      	b.n	8008e34 <__libc_init_array+0xc>
 8008e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5a:	4798      	blx	r3
 8008e5c:	3601      	adds	r6, #1
 8008e5e:	e7f2      	b.n	8008e46 <__libc_init_array+0x1e>
 8008e60:	08009cf4 	.word	0x08009cf4
 8008e64:	08009cf4 	.word	0x08009cf4
 8008e68:	08009cf4 	.word	0x08009cf4
 8008e6c:	08009cf8 	.word	0x08009cf8

08008e70 <__retarget_lock_init_recursive>:
 8008e70:	4770      	bx	lr

08008e72 <__retarget_lock_acquire_recursive>:
 8008e72:	4770      	bx	lr

08008e74 <__retarget_lock_release_recursive>:
 8008e74:	4770      	bx	lr
	...

08008e78 <__assert_func>:
 8008e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4b09      	ldr	r3, [pc, #36]	@ (8008ea4 <__assert_func+0x2c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4605      	mov	r5, r0
 8008e84:	68d8      	ldr	r0, [r3, #12]
 8008e86:	b954      	cbnz	r4, 8008e9e <__assert_func+0x26>
 8008e88:	4b07      	ldr	r3, [pc, #28]	@ (8008ea8 <__assert_func+0x30>)
 8008e8a:	461c      	mov	r4, r3
 8008e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e90:	9100      	str	r1, [sp, #0]
 8008e92:	462b      	mov	r3, r5
 8008e94:	4905      	ldr	r1, [pc, #20]	@ (8008eac <__assert_func+0x34>)
 8008e96:	f000 f9b9 	bl	800920c <fiprintf>
 8008e9a:	f000 f9d9 	bl	8009250 <abort>
 8008e9e:	4b04      	ldr	r3, [pc, #16]	@ (8008eb0 <__assert_func+0x38>)
 8008ea0:	e7f4      	b.n	8008e8c <__assert_func+0x14>
 8008ea2:	bf00      	nop
 8008ea4:	2400001c 	.word	0x2400001c
 8008ea8:	08009cb5 	.word	0x08009cb5
 8008eac:	08009c87 	.word	0x08009c87
 8008eb0:	08009c7a 	.word	0x08009c7a

08008eb4 <_free_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	d041      	beq.n	8008f40 <_free_r+0x8c>
 8008ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec0:	1f0c      	subs	r4, r1, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bfb8      	it	lt
 8008ec6:	18e4      	addlt	r4, r4, r3
 8008ec8:	f000 f8e8 	bl	800909c <__malloc_lock>
 8008ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8008f44 <_free_r+0x90>)
 8008ece:	6813      	ldr	r3, [r2, #0]
 8008ed0:	b933      	cbnz	r3, 8008ee0 <_free_r+0x2c>
 8008ed2:	6063      	str	r3, [r4, #4]
 8008ed4:	6014      	str	r4, [r2, #0]
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008edc:	f000 b8e4 	b.w	80090a8 <__malloc_unlock>
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	d908      	bls.n	8008ef6 <_free_r+0x42>
 8008ee4:	6820      	ldr	r0, [r4, #0]
 8008ee6:	1821      	adds	r1, r4, r0
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf01      	itttt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	1809      	addeq	r1, r1, r0
 8008ef2:	6021      	streq	r1, [r4, #0]
 8008ef4:	e7ed      	b.n	8008ed2 <_free_r+0x1e>
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	b10b      	cbz	r3, 8008f00 <_free_r+0x4c>
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d9fa      	bls.n	8008ef6 <_free_r+0x42>
 8008f00:	6811      	ldr	r1, [r2, #0]
 8008f02:	1850      	adds	r0, r2, r1
 8008f04:	42a0      	cmp	r0, r4
 8008f06:	d10b      	bne.n	8008f20 <_free_r+0x6c>
 8008f08:	6820      	ldr	r0, [r4, #0]
 8008f0a:	4401      	add	r1, r0
 8008f0c:	1850      	adds	r0, r2, r1
 8008f0e:	4283      	cmp	r3, r0
 8008f10:	6011      	str	r1, [r2, #0]
 8008f12:	d1e0      	bne.n	8008ed6 <_free_r+0x22>
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	6053      	str	r3, [r2, #4]
 8008f1a:	4408      	add	r0, r1
 8008f1c:	6010      	str	r0, [r2, #0]
 8008f1e:	e7da      	b.n	8008ed6 <_free_r+0x22>
 8008f20:	d902      	bls.n	8008f28 <_free_r+0x74>
 8008f22:	230c      	movs	r3, #12
 8008f24:	602b      	str	r3, [r5, #0]
 8008f26:	e7d6      	b.n	8008ed6 <_free_r+0x22>
 8008f28:	6820      	ldr	r0, [r4, #0]
 8008f2a:	1821      	adds	r1, r4, r0
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf04      	itt	eq
 8008f30:	6819      	ldreq	r1, [r3, #0]
 8008f32:	685b      	ldreq	r3, [r3, #4]
 8008f34:	6063      	str	r3, [r4, #4]
 8008f36:	bf04      	itt	eq
 8008f38:	1809      	addeq	r1, r1, r0
 8008f3a:	6021      	streq	r1, [r4, #0]
 8008f3c:	6054      	str	r4, [r2, #4]
 8008f3e:	e7ca      	b.n	8008ed6 <_free_r+0x22>
 8008f40:	bd38      	pop	{r3, r4, r5, pc}
 8008f42:	bf00      	nop
 8008f44:	24000464 	.word	0x24000464

08008f48 <malloc>:
 8008f48:	4b02      	ldr	r3, [pc, #8]	@ (8008f54 <malloc+0xc>)
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	6818      	ldr	r0, [r3, #0]
 8008f4e:	f000 b825 	b.w	8008f9c <_malloc_r>
 8008f52:	bf00      	nop
 8008f54:	2400001c 	.word	0x2400001c

08008f58 <sbrk_aligned>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8008f98 <sbrk_aligned+0x40>)
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	6831      	ldr	r1, [r6, #0]
 8008f60:	4605      	mov	r5, r0
 8008f62:	b911      	cbnz	r1, 8008f6a <sbrk_aligned+0x12>
 8008f64:	f000 f964 	bl	8009230 <_sbrk_r>
 8008f68:	6030      	str	r0, [r6, #0]
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f000 f95f 	bl	8009230 <_sbrk_r>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	d103      	bne.n	8008f7e <sbrk_aligned+0x26>
 8008f76:	f04f 34ff 	mov.w	r4, #4294967295
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	bd70      	pop	{r4, r5, r6, pc}
 8008f7e:	1cc4      	adds	r4, r0, #3
 8008f80:	f024 0403 	bic.w	r4, r4, #3
 8008f84:	42a0      	cmp	r0, r4
 8008f86:	d0f8      	beq.n	8008f7a <sbrk_aligned+0x22>
 8008f88:	1a21      	subs	r1, r4, r0
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f000 f950 	bl	8009230 <_sbrk_r>
 8008f90:	3001      	adds	r0, #1
 8008f92:	d1f2      	bne.n	8008f7a <sbrk_aligned+0x22>
 8008f94:	e7ef      	b.n	8008f76 <sbrk_aligned+0x1e>
 8008f96:	bf00      	nop
 8008f98:	24000460 	.word	0x24000460

08008f9c <_malloc_r>:
 8008f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa0:	1ccd      	adds	r5, r1, #3
 8008fa2:	f025 0503 	bic.w	r5, r5, #3
 8008fa6:	3508      	adds	r5, #8
 8008fa8:	2d0c      	cmp	r5, #12
 8008faa:	bf38      	it	cc
 8008fac:	250c      	movcc	r5, #12
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	db01      	blt.n	8008fb8 <_malloc_r+0x1c>
 8008fb4:	42a9      	cmp	r1, r5
 8008fb6:	d904      	bls.n	8008fc2 <_malloc_r+0x26>
 8008fb8:	230c      	movs	r3, #12
 8008fba:	6033      	str	r3, [r6, #0]
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009098 <_malloc_r+0xfc>
 8008fc6:	f000 f869 	bl	800909c <__malloc_lock>
 8008fca:	f8d8 3000 	ldr.w	r3, [r8]
 8008fce:	461c      	mov	r4, r3
 8008fd0:	bb44      	cbnz	r4, 8009024 <_malloc_r+0x88>
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7ff ffbf 	bl	8008f58 <sbrk_aligned>
 8008fda:	1c43      	adds	r3, r0, #1
 8008fdc:	4604      	mov	r4, r0
 8008fde:	d158      	bne.n	8009092 <_malloc_r+0xf6>
 8008fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8008fe4:	4627      	mov	r7, r4
 8008fe6:	2f00      	cmp	r7, #0
 8008fe8:	d143      	bne.n	8009072 <_malloc_r+0xd6>
 8008fea:	2c00      	cmp	r4, #0
 8008fec:	d04b      	beq.n	8009086 <_malloc_r+0xea>
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	eb04 0903 	add.w	r9, r4, r3
 8008ff8:	f000 f91a 	bl	8009230 <_sbrk_r>
 8008ffc:	4581      	cmp	r9, r0
 8008ffe:	d142      	bne.n	8009086 <_malloc_r+0xea>
 8009000:	6821      	ldr	r1, [r4, #0]
 8009002:	1a6d      	subs	r5, r5, r1
 8009004:	4629      	mov	r1, r5
 8009006:	4630      	mov	r0, r6
 8009008:	f7ff ffa6 	bl	8008f58 <sbrk_aligned>
 800900c:	3001      	adds	r0, #1
 800900e:	d03a      	beq.n	8009086 <_malloc_r+0xea>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	442b      	add	r3, r5
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	f8d8 3000 	ldr.w	r3, [r8]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	bb62      	cbnz	r2, 8009078 <_malloc_r+0xdc>
 800901e:	f8c8 7000 	str.w	r7, [r8]
 8009022:	e00f      	b.n	8009044 <_malloc_r+0xa8>
 8009024:	6822      	ldr	r2, [r4, #0]
 8009026:	1b52      	subs	r2, r2, r5
 8009028:	d420      	bmi.n	800906c <_malloc_r+0xd0>
 800902a:	2a0b      	cmp	r2, #11
 800902c:	d917      	bls.n	800905e <_malloc_r+0xc2>
 800902e:	1961      	adds	r1, r4, r5
 8009030:	42a3      	cmp	r3, r4
 8009032:	6025      	str	r5, [r4, #0]
 8009034:	bf18      	it	ne
 8009036:	6059      	strne	r1, [r3, #4]
 8009038:	6863      	ldr	r3, [r4, #4]
 800903a:	bf08      	it	eq
 800903c:	f8c8 1000 	streq.w	r1, [r8]
 8009040:	5162      	str	r2, [r4, r5]
 8009042:	604b      	str	r3, [r1, #4]
 8009044:	4630      	mov	r0, r6
 8009046:	f000 f82f 	bl	80090a8 <__malloc_unlock>
 800904a:	f104 000b 	add.w	r0, r4, #11
 800904e:	1d23      	adds	r3, r4, #4
 8009050:	f020 0007 	bic.w	r0, r0, #7
 8009054:	1ac2      	subs	r2, r0, r3
 8009056:	bf1c      	itt	ne
 8009058:	1a1b      	subne	r3, r3, r0
 800905a:	50a3      	strne	r3, [r4, r2]
 800905c:	e7af      	b.n	8008fbe <_malloc_r+0x22>
 800905e:	6862      	ldr	r2, [r4, #4]
 8009060:	42a3      	cmp	r3, r4
 8009062:	bf0c      	ite	eq
 8009064:	f8c8 2000 	streq.w	r2, [r8]
 8009068:	605a      	strne	r2, [r3, #4]
 800906a:	e7eb      	b.n	8009044 <_malloc_r+0xa8>
 800906c:	4623      	mov	r3, r4
 800906e:	6864      	ldr	r4, [r4, #4]
 8009070:	e7ae      	b.n	8008fd0 <_malloc_r+0x34>
 8009072:	463c      	mov	r4, r7
 8009074:	687f      	ldr	r7, [r7, #4]
 8009076:	e7b6      	b.n	8008fe6 <_malloc_r+0x4a>
 8009078:	461a      	mov	r2, r3
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	42a3      	cmp	r3, r4
 800907e:	d1fb      	bne.n	8009078 <_malloc_r+0xdc>
 8009080:	2300      	movs	r3, #0
 8009082:	6053      	str	r3, [r2, #4]
 8009084:	e7de      	b.n	8009044 <_malloc_r+0xa8>
 8009086:	230c      	movs	r3, #12
 8009088:	6033      	str	r3, [r6, #0]
 800908a:	4630      	mov	r0, r6
 800908c:	f000 f80c 	bl	80090a8 <__malloc_unlock>
 8009090:	e794      	b.n	8008fbc <_malloc_r+0x20>
 8009092:	6005      	str	r5, [r0, #0]
 8009094:	e7d6      	b.n	8009044 <_malloc_r+0xa8>
 8009096:	bf00      	nop
 8009098:	24000464 	.word	0x24000464

0800909c <__malloc_lock>:
 800909c:	4801      	ldr	r0, [pc, #4]	@ (80090a4 <__malloc_lock+0x8>)
 800909e:	f7ff bee8 	b.w	8008e72 <__retarget_lock_acquire_recursive>
 80090a2:	bf00      	nop
 80090a4:	2400045c 	.word	0x2400045c

080090a8 <__malloc_unlock>:
 80090a8:	4801      	ldr	r0, [pc, #4]	@ (80090b0 <__malloc_unlock+0x8>)
 80090aa:	f7ff bee3 	b.w	8008e74 <__retarget_lock_release_recursive>
 80090ae:	bf00      	nop
 80090b0:	2400045c 	.word	0x2400045c

080090b4 <__sflush_r>:
 80090b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090bc:	0716      	lsls	r6, r2, #28
 80090be:	4605      	mov	r5, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	d454      	bmi.n	800916e <__sflush_r+0xba>
 80090c4:	684b      	ldr	r3, [r1, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	dc02      	bgt.n	80090d0 <__sflush_r+0x1c>
 80090ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	dd48      	ble.n	8009162 <__sflush_r+0xae>
 80090d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090d2:	2e00      	cmp	r6, #0
 80090d4:	d045      	beq.n	8009162 <__sflush_r+0xae>
 80090d6:	2300      	movs	r3, #0
 80090d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090dc:	682f      	ldr	r7, [r5, #0]
 80090de:	6a21      	ldr	r1, [r4, #32]
 80090e0:	602b      	str	r3, [r5, #0]
 80090e2:	d030      	beq.n	8009146 <__sflush_r+0x92>
 80090e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	0759      	lsls	r1, r3, #29
 80090ea:	d505      	bpl.n	80090f8 <__sflush_r+0x44>
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090f2:	b10b      	cbz	r3, 80090f8 <__sflush_r+0x44>
 80090f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	2300      	movs	r3, #0
 80090fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090fc:	6a21      	ldr	r1, [r4, #32]
 80090fe:	4628      	mov	r0, r5
 8009100:	47b0      	blx	r6
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	d106      	bne.n	8009116 <__sflush_r+0x62>
 8009108:	6829      	ldr	r1, [r5, #0]
 800910a:	291d      	cmp	r1, #29
 800910c:	d82b      	bhi.n	8009166 <__sflush_r+0xb2>
 800910e:	4a2a      	ldr	r2, [pc, #168]	@ (80091b8 <__sflush_r+0x104>)
 8009110:	410a      	asrs	r2, r1
 8009112:	07d6      	lsls	r6, r2, #31
 8009114:	d427      	bmi.n	8009166 <__sflush_r+0xb2>
 8009116:	2200      	movs	r2, #0
 8009118:	6062      	str	r2, [r4, #4]
 800911a:	04d9      	lsls	r1, r3, #19
 800911c:	6922      	ldr	r2, [r4, #16]
 800911e:	6022      	str	r2, [r4, #0]
 8009120:	d504      	bpl.n	800912c <__sflush_r+0x78>
 8009122:	1c42      	adds	r2, r0, #1
 8009124:	d101      	bne.n	800912a <__sflush_r+0x76>
 8009126:	682b      	ldr	r3, [r5, #0]
 8009128:	b903      	cbnz	r3, 800912c <__sflush_r+0x78>
 800912a:	6560      	str	r0, [r4, #84]	@ 0x54
 800912c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800912e:	602f      	str	r7, [r5, #0]
 8009130:	b1b9      	cbz	r1, 8009162 <__sflush_r+0xae>
 8009132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009136:	4299      	cmp	r1, r3
 8009138:	d002      	beq.n	8009140 <__sflush_r+0x8c>
 800913a:	4628      	mov	r0, r5
 800913c:	f7ff feba 	bl	8008eb4 <_free_r>
 8009140:	2300      	movs	r3, #0
 8009142:	6363      	str	r3, [r4, #52]	@ 0x34
 8009144:	e00d      	b.n	8009162 <__sflush_r+0xae>
 8009146:	2301      	movs	r3, #1
 8009148:	4628      	mov	r0, r5
 800914a:	47b0      	blx	r6
 800914c:	4602      	mov	r2, r0
 800914e:	1c50      	adds	r0, r2, #1
 8009150:	d1c9      	bne.n	80090e6 <__sflush_r+0x32>
 8009152:	682b      	ldr	r3, [r5, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0c6      	beq.n	80090e6 <__sflush_r+0x32>
 8009158:	2b1d      	cmp	r3, #29
 800915a:	d001      	beq.n	8009160 <__sflush_r+0xac>
 800915c:	2b16      	cmp	r3, #22
 800915e:	d11e      	bne.n	800919e <__sflush_r+0xea>
 8009160:	602f      	str	r7, [r5, #0]
 8009162:	2000      	movs	r0, #0
 8009164:	e022      	b.n	80091ac <__sflush_r+0xf8>
 8009166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800916a:	b21b      	sxth	r3, r3
 800916c:	e01b      	b.n	80091a6 <__sflush_r+0xf2>
 800916e:	690f      	ldr	r7, [r1, #16]
 8009170:	2f00      	cmp	r7, #0
 8009172:	d0f6      	beq.n	8009162 <__sflush_r+0xae>
 8009174:	0793      	lsls	r3, r2, #30
 8009176:	680e      	ldr	r6, [r1, #0]
 8009178:	bf08      	it	eq
 800917a:	694b      	ldreq	r3, [r1, #20]
 800917c:	600f      	str	r7, [r1, #0]
 800917e:	bf18      	it	ne
 8009180:	2300      	movne	r3, #0
 8009182:	eba6 0807 	sub.w	r8, r6, r7
 8009186:	608b      	str	r3, [r1, #8]
 8009188:	f1b8 0f00 	cmp.w	r8, #0
 800918c:	dde9      	ble.n	8009162 <__sflush_r+0xae>
 800918e:	6a21      	ldr	r1, [r4, #32]
 8009190:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009192:	4643      	mov	r3, r8
 8009194:	463a      	mov	r2, r7
 8009196:	4628      	mov	r0, r5
 8009198:	47b0      	blx	r6
 800919a:	2800      	cmp	r0, #0
 800919c:	dc08      	bgt.n	80091b0 <__sflush_r+0xfc>
 800919e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b0:	4407      	add	r7, r0
 80091b2:	eba8 0800 	sub.w	r8, r8, r0
 80091b6:	e7e7      	b.n	8009188 <__sflush_r+0xd4>
 80091b8:	dfbffffe 	.word	0xdfbffffe

080091bc <_fflush_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	690b      	ldr	r3, [r1, #16]
 80091c0:	4605      	mov	r5, r0
 80091c2:	460c      	mov	r4, r1
 80091c4:	b913      	cbnz	r3, 80091cc <_fflush_r+0x10>
 80091c6:	2500      	movs	r5, #0
 80091c8:	4628      	mov	r0, r5
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	b118      	cbz	r0, 80091d6 <_fflush_r+0x1a>
 80091ce:	6a03      	ldr	r3, [r0, #32]
 80091d0:	b90b      	cbnz	r3, 80091d6 <_fflush_r+0x1a>
 80091d2:	f7ff fcff 	bl	8008bd4 <__sinit>
 80091d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0f3      	beq.n	80091c6 <_fflush_r+0xa>
 80091de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091e0:	07d0      	lsls	r0, r2, #31
 80091e2:	d404      	bmi.n	80091ee <_fflush_r+0x32>
 80091e4:	0599      	lsls	r1, r3, #22
 80091e6:	d402      	bmi.n	80091ee <_fflush_r+0x32>
 80091e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ea:	f7ff fe42 	bl	8008e72 <__retarget_lock_acquire_recursive>
 80091ee:	4628      	mov	r0, r5
 80091f0:	4621      	mov	r1, r4
 80091f2:	f7ff ff5f 	bl	80090b4 <__sflush_r>
 80091f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091f8:	07da      	lsls	r2, r3, #31
 80091fa:	4605      	mov	r5, r0
 80091fc:	d4e4      	bmi.n	80091c8 <_fflush_r+0xc>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	059b      	lsls	r3, r3, #22
 8009202:	d4e1      	bmi.n	80091c8 <_fflush_r+0xc>
 8009204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009206:	f7ff fe35 	bl	8008e74 <__retarget_lock_release_recursive>
 800920a:	e7dd      	b.n	80091c8 <_fflush_r+0xc>

0800920c <fiprintf>:
 800920c:	b40e      	push	{r1, r2, r3}
 800920e:	b503      	push	{r0, r1, lr}
 8009210:	4601      	mov	r1, r0
 8009212:	ab03      	add	r3, sp, #12
 8009214:	4805      	ldr	r0, [pc, #20]	@ (800922c <fiprintf+0x20>)
 8009216:	f853 2b04 	ldr.w	r2, [r3], #4
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	f000 f847 	bl	80092b0 <_vfiprintf_r>
 8009222:	b002      	add	sp, #8
 8009224:	f85d eb04 	ldr.w	lr, [sp], #4
 8009228:	b003      	add	sp, #12
 800922a:	4770      	bx	lr
 800922c:	2400001c 	.word	0x2400001c

08009230 <_sbrk_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4d06      	ldr	r5, [pc, #24]	@ (800924c <_sbrk_r+0x1c>)
 8009234:	2300      	movs	r3, #0
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	602b      	str	r3, [r5, #0]
 800923c:	f7f8 f8dc 	bl	80013f8 <_sbrk>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_sbrk_r+0x1a>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_sbrk_r+0x1a>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	24000458 	.word	0x24000458

08009250 <abort>:
 8009250:	b508      	push	{r3, lr}
 8009252:	2006      	movs	r0, #6
 8009254:	f000 fb8e 	bl	8009974 <raise>
 8009258:	2001      	movs	r0, #1
 800925a:	f7f8 f855 	bl	8001308 <_exit>

0800925e <__sfputc_r>:
 800925e:	6893      	ldr	r3, [r2, #8]
 8009260:	3b01      	subs	r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	b410      	push	{r4}
 8009266:	6093      	str	r3, [r2, #8]
 8009268:	da08      	bge.n	800927c <__sfputc_r+0x1e>
 800926a:	6994      	ldr	r4, [r2, #24]
 800926c:	42a3      	cmp	r3, r4
 800926e:	db01      	blt.n	8009274 <__sfputc_r+0x16>
 8009270:	290a      	cmp	r1, #10
 8009272:	d103      	bne.n	800927c <__sfputc_r+0x1e>
 8009274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009278:	f000 bac0 	b.w	80097fc <__swbuf_r>
 800927c:	6813      	ldr	r3, [r2, #0]
 800927e:	1c58      	adds	r0, r3, #1
 8009280:	6010      	str	r0, [r2, #0]
 8009282:	7019      	strb	r1, [r3, #0]
 8009284:	4608      	mov	r0, r1
 8009286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800928a:	4770      	bx	lr

0800928c <__sfputs_r>:
 800928c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928e:	4606      	mov	r6, r0
 8009290:	460f      	mov	r7, r1
 8009292:	4614      	mov	r4, r2
 8009294:	18d5      	adds	r5, r2, r3
 8009296:	42ac      	cmp	r4, r5
 8009298:	d101      	bne.n	800929e <__sfputs_r+0x12>
 800929a:	2000      	movs	r0, #0
 800929c:	e007      	b.n	80092ae <__sfputs_r+0x22>
 800929e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a2:	463a      	mov	r2, r7
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff ffda 	bl	800925e <__sfputc_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	d1f3      	bne.n	8009296 <__sfputs_r+0xa>
 80092ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092b0 <_vfiprintf_r>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	460d      	mov	r5, r1
 80092b6:	b09d      	sub	sp, #116	@ 0x74
 80092b8:	4614      	mov	r4, r2
 80092ba:	4698      	mov	r8, r3
 80092bc:	4606      	mov	r6, r0
 80092be:	b118      	cbz	r0, 80092c8 <_vfiprintf_r+0x18>
 80092c0:	6a03      	ldr	r3, [r0, #32]
 80092c2:	b90b      	cbnz	r3, 80092c8 <_vfiprintf_r+0x18>
 80092c4:	f7ff fc86 	bl	8008bd4 <__sinit>
 80092c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092ca:	07d9      	lsls	r1, r3, #31
 80092cc:	d405      	bmi.n	80092da <_vfiprintf_r+0x2a>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	059a      	lsls	r2, r3, #22
 80092d2:	d402      	bmi.n	80092da <_vfiprintf_r+0x2a>
 80092d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092d6:	f7ff fdcc 	bl	8008e72 <__retarget_lock_acquire_recursive>
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	071b      	lsls	r3, r3, #28
 80092de:	d501      	bpl.n	80092e4 <_vfiprintf_r+0x34>
 80092e0:	692b      	ldr	r3, [r5, #16]
 80092e2:	b99b      	cbnz	r3, 800930c <_vfiprintf_r+0x5c>
 80092e4:	4629      	mov	r1, r5
 80092e6:	4630      	mov	r0, r6
 80092e8:	f000 fac6 	bl	8009878 <__swsetup_r>
 80092ec:	b170      	cbz	r0, 800930c <_vfiprintf_r+0x5c>
 80092ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092f0:	07dc      	lsls	r4, r3, #31
 80092f2:	d504      	bpl.n	80092fe <_vfiprintf_r+0x4e>
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	b01d      	add	sp, #116	@ 0x74
 80092fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	89ab      	ldrh	r3, [r5, #12]
 8009300:	0598      	lsls	r0, r3, #22
 8009302:	d4f7      	bmi.n	80092f4 <_vfiprintf_r+0x44>
 8009304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009306:	f7ff fdb5 	bl	8008e74 <__retarget_lock_release_recursive>
 800930a:	e7f3      	b.n	80092f4 <_vfiprintf_r+0x44>
 800930c:	2300      	movs	r3, #0
 800930e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009310:	2320      	movs	r3, #32
 8009312:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009316:	f8cd 800c 	str.w	r8, [sp, #12]
 800931a:	2330      	movs	r3, #48	@ 0x30
 800931c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094cc <_vfiprintf_r+0x21c>
 8009320:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009324:	f04f 0901 	mov.w	r9, #1
 8009328:	4623      	mov	r3, r4
 800932a:	469a      	mov	sl, r3
 800932c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009330:	b10a      	cbz	r2, 8009336 <_vfiprintf_r+0x86>
 8009332:	2a25      	cmp	r2, #37	@ 0x25
 8009334:	d1f9      	bne.n	800932a <_vfiprintf_r+0x7a>
 8009336:	ebba 0b04 	subs.w	fp, sl, r4
 800933a:	d00b      	beq.n	8009354 <_vfiprintf_r+0xa4>
 800933c:	465b      	mov	r3, fp
 800933e:	4622      	mov	r2, r4
 8009340:	4629      	mov	r1, r5
 8009342:	4630      	mov	r0, r6
 8009344:	f7ff ffa2 	bl	800928c <__sfputs_r>
 8009348:	3001      	adds	r0, #1
 800934a:	f000 80a7 	beq.w	800949c <_vfiprintf_r+0x1ec>
 800934e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009350:	445a      	add	r2, fp
 8009352:	9209      	str	r2, [sp, #36]	@ 0x24
 8009354:	f89a 3000 	ldrb.w	r3, [sl]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 809f 	beq.w	800949c <_vfiprintf_r+0x1ec>
 800935e:	2300      	movs	r3, #0
 8009360:	f04f 32ff 	mov.w	r2, #4294967295
 8009364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009368:	f10a 0a01 	add.w	sl, sl, #1
 800936c:	9304      	str	r3, [sp, #16]
 800936e:	9307      	str	r3, [sp, #28]
 8009370:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009374:	931a      	str	r3, [sp, #104]	@ 0x68
 8009376:	4654      	mov	r4, sl
 8009378:	2205      	movs	r2, #5
 800937a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937e:	4853      	ldr	r0, [pc, #332]	@ (80094cc <_vfiprintf_r+0x21c>)
 8009380:	f7f6 ffae 	bl	80002e0 <memchr>
 8009384:	9a04      	ldr	r2, [sp, #16]
 8009386:	b9d8      	cbnz	r0, 80093c0 <_vfiprintf_r+0x110>
 8009388:	06d1      	lsls	r1, r2, #27
 800938a:	bf44      	itt	mi
 800938c:	2320      	movmi	r3, #32
 800938e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009392:	0713      	lsls	r3, r2, #28
 8009394:	bf44      	itt	mi
 8009396:	232b      	movmi	r3, #43	@ 0x2b
 8009398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800939c:	f89a 3000 	ldrb.w	r3, [sl]
 80093a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093a2:	d015      	beq.n	80093d0 <_vfiprintf_r+0x120>
 80093a4:	9a07      	ldr	r2, [sp, #28]
 80093a6:	4654      	mov	r4, sl
 80093a8:	2000      	movs	r0, #0
 80093aa:	f04f 0c0a 	mov.w	ip, #10
 80093ae:	4621      	mov	r1, r4
 80093b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093b4:	3b30      	subs	r3, #48	@ 0x30
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d94b      	bls.n	8009452 <_vfiprintf_r+0x1a2>
 80093ba:	b1b0      	cbz	r0, 80093ea <_vfiprintf_r+0x13a>
 80093bc:	9207      	str	r2, [sp, #28]
 80093be:	e014      	b.n	80093ea <_vfiprintf_r+0x13a>
 80093c0:	eba0 0308 	sub.w	r3, r0, r8
 80093c4:	fa09 f303 	lsl.w	r3, r9, r3
 80093c8:	4313      	orrs	r3, r2
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	46a2      	mov	sl, r4
 80093ce:	e7d2      	b.n	8009376 <_vfiprintf_r+0xc6>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	1d19      	adds	r1, r3, #4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	9103      	str	r1, [sp, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bfbb      	ittet	lt
 80093dc:	425b      	neglt	r3, r3
 80093de:	f042 0202 	orrlt.w	r2, r2, #2
 80093e2:	9307      	strge	r3, [sp, #28]
 80093e4:	9307      	strlt	r3, [sp, #28]
 80093e6:	bfb8      	it	lt
 80093e8:	9204      	strlt	r2, [sp, #16]
 80093ea:	7823      	ldrb	r3, [r4, #0]
 80093ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80093ee:	d10a      	bne.n	8009406 <_vfiprintf_r+0x156>
 80093f0:	7863      	ldrb	r3, [r4, #1]
 80093f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80093f4:	d132      	bne.n	800945c <_vfiprintf_r+0x1ac>
 80093f6:	9b03      	ldr	r3, [sp, #12]
 80093f8:	1d1a      	adds	r2, r3, #4
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	9203      	str	r2, [sp, #12]
 80093fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009402:	3402      	adds	r4, #2
 8009404:	9305      	str	r3, [sp, #20]
 8009406:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094dc <_vfiprintf_r+0x22c>
 800940a:	7821      	ldrb	r1, [r4, #0]
 800940c:	2203      	movs	r2, #3
 800940e:	4650      	mov	r0, sl
 8009410:	f7f6 ff66 	bl	80002e0 <memchr>
 8009414:	b138      	cbz	r0, 8009426 <_vfiprintf_r+0x176>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	eba0 000a 	sub.w	r0, r0, sl
 800941c:	2240      	movs	r2, #64	@ 0x40
 800941e:	4082      	lsls	r2, r0
 8009420:	4313      	orrs	r3, r2
 8009422:	3401      	adds	r4, #1
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800942a:	4829      	ldr	r0, [pc, #164]	@ (80094d0 <_vfiprintf_r+0x220>)
 800942c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009430:	2206      	movs	r2, #6
 8009432:	f7f6 ff55 	bl	80002e0 <memchr>
 8009436:	2800      	cmp	r0, #0
 8009438:	d03f      	beq.n	80094ba <_vfiprintf_r+0x20a>
 800943a:	4b26      	ldr	r3, [pc, #152]	@ (80094d4 <_vfiprintf_r+0x224>)
 800943c:	bb1b      	cbnz	r3, 8009486 <_vfiprintf_r+0x1d6>
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	3307      	adds	r3, #7
 8009442:	f023 0307 	bic.w	r3, r3, #7
 8009446:	3308      	adds	r3, #8
 8009448:	9303      	str	r3, [sp, #12]
 800944a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800944c:	443b      	add	r3, r7
 800944e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009450:	e76a      	b.n	8009328 <_vfiprintf_r+0x78>
 8009452:	fb0c 3202 	mla	r2, ip, r2, r3
 8009456:	460c      	mov	r4, r1
 8009458:	2001      	movs	r0, #1
 800945a:	e7a8      	b.n	80093ae <_vfiprintf_r+0xfe>
 800945c:	2300      	movs	r3, #0
 800945e:	3401      	adds	r4, #1
 8009460:	9305      	str	r3, [sp, #20]
 8009462:	4619      	mov	r1, r3
 8009464:	f04f 0c0a 	mov.w	ip, #10
 8009468:	4620      	mov	r0, r4
 800946a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800946e:	3a30      	subs	r2, #48	@ 0x30
 8009470:	2a09      	cmp	r2, #9
 8009472:	d903      	bls.n	800947c <_vfiprintf_r+0x1cc>
 8009474:	2b00      	cmp	r3, #0
 8009476:	d0c6      	beq.n	8009406 <_vfiprintf_r+0x156>
 8009478:	9105      	str	r1, [sp, #20]
 800947a:	e7c4      	b.n	8009406 <_vfiprintf_r+0x156>
 800947c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009480:	4604      	mov	r4, r0
 8009482:	2301      	movs	r3, #1
 8009484:	e7f0      	b.n	8009468 <_vfiprintf_r+0x1b8>
 8009486:	ab03      	add	r3, sp, #12
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	462a      	mov	r2, r5
 800948c:	4b12      	ldr	r3, [pc, #72]	@ (80094d8 <_vfiprintf_r+0x228>)
 800948e:	a904      	add	r1, sp, #16
 8009490:	4630      	mov	r0, r6
 8009492:	f3af 8000 	nop.w
 8009496:	4607      	mov	r7, r0
 8009498:	1c78      	adds	r0, r7, #1
 800949a:	d1d6      	bne.n	800944a <_vfiprintf_r+0x19a>
 800949c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800949e:	07d9      	lsls	r1, r3, #31
 80094a0:	d405      	bmi.n	80094ae <_vfiprintf_r+0x1fe>
 80094a2:	89ab      	ldrh	r3, [r5, #12]
 80094a4:	059a      	lsls	r2, r3, #22
 80094a6:	d402      	bmi.n	80094ae <_vfiprintf_r+0x1fe>
 80094a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094aa:	f7ff fce3 	bl	8008e74 <__retarget_lock_release_recursive>
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	065b      	lsls	r3, r3, #25
 80094b2:	f53f af1f 	bmi.w	80092f4 <_vfiprintf_r+0x44>
 80094b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094b8:	e71e      	b.n	80092f8 <_vfiprintf_r+0x48>
 80094ba:	ab03      	add	r3, sp, #12
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	462a      	mov	r2, r5
 80094c0:	4b05      	ldr	r3, [pc, #20]	@ (80094d8 <_vfiprintf_r+0x228>)
 80094c2:	a904      	add	r1, sp, #16
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 f879 	bl	80095bc <_printf_i>
 80094ca:	e7e4      	b.n	8009496 <_vfiprintf_r+0x1e6>
 80094cc:	08009cb6 	.word	0x08009cb6
 80094d0:	08009cc0 	.word	0x08009cc0
 80094d4:	00000000 	.word	0x00000000
 80094d8:	0800928d 	.word	0x0800928d
 80094dc:	08009cbc 	.word	0x08009cbc

080094e0 <_printf_common>:
 80094e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e4:	4616      	mov	r6, r2
 80094e6:	4698      	mov	r8, r3
 80094e8:	688a      	ldr	r2, [r1, #8]
 80094ea:	690b      	ldr	r3, [r1, #16]
 80094ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094f0:	4293      	cmp	r3, r2
 80094f2:	bfb8      	it	lt
 80094f4:	4613      	movlt	r3, r2
 80094f6:	6033      	str	r3, [r6, #0]
 80094f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094fc:	4607      	mov	r7, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	b10a      	cbz	r2, 8009506 <_printf_common+0x26>
 8009502:	3301      	adds	r3, #1
 8009504:	6033      	str	r3, [r6, #0]
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	0699      	lsls	r1, r3, #26
 800950a:	bf42      	ittt	mi
 800950c:	6833      	ldrmi	r3, [r6, #0]
 800950e:	3302      	addmi	r3, #2
 8009510:	6033      	strmi	r3, [r6, #0]
 8009512:	6825      	ldr	r5, [r4, #0]
 8009514:	f015 0506 	ands.w	r5, r5, #6
 8009518:	d106      	bne.n	8009528 <_printf_common+0x48>
 800951a:	f104 0a19 	add.w	sl, r4, #25
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	6832      	ldr	r2, [r6, #0]
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	42ab      	cmp	r3, r5
 8009526:	dc26      	bgt.n	8009576 <_printf_common+0x96>
 8009528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800952c:	6822      	ldr	r2, [r4, #0]
 800952e:	3b00      	subs	r3, #0
 8009530:	bf18      	it	ne
 8009532:	2301      	movne	r3, #1
 8009534:	0692      	lsls	r2, r2, #26
 8009536:	d42b      	bmi.n	8009590 <_printf_common+0xb0>
 8009538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800953c:	4641      	mov	r1, r8
 800953e:	4638      	mov	r0, r7
 8009540:	47c8      	blx	r9
 8009542:	3001      	adds	r0, #1
 8009544:	d01e      	beq.n	8009584 <_printf_common+0xa4>
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	6922      	ldr	r2, [r4, #16]
 800954a:	f003 0306 	and.w	r3, r3, #6
 800954e:	2b04      	cmp	r3, #4
 8009550:	bf02      	ittt	eq
 8009552:	68e5      	ldreq	r5, [r4, #12]
 8009554:	6833      	ldreq	r3, [r6, #0]
 8009556:	1aed      	subeq	r5, r5, r3
 8009558:	68a3      	ldr	r3, [r4, #8]
 800955a:	bf0c      	ite	eq
 800955c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009560:	2500      	movne	r5, #0
 8009562:	4293      	cmp	r3, r2
 8009564:	bfc4      	itt	gt
 8009566:	1a9b      	subgt	r3, r3, r2
 8009568:	18ed      	addgt	r5, r5, r3
 800956a:	2600      	movs	r6, #0
 800956c:	341a      	adds	r4, #26
 800956e:	42b5      	cmp	r5, r6
 8009570:	d11a      	bne.n	80095a8 <_printf_common+0xc8>
 8009572:	2000      	movs	r0, #0
 8009574:	e008      	b.n	8009588 <_printf_common+0xa8>
 8009576:	2301      	movs	r3, #1
 8009578:	4652      	mov	r2, sl
 800957a:	4641      	mov	r1, r8
 800957c:	4638      	mov	r0, r7
 800957e:	47c8      	blx	r9
 8009580:	3001      	adds	r0, #1
 8009582:	d103      	bne.n	800958c <_printf_common+0xac>
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958c:	3501      	adds	r5, #1
 800958e:	e7c6      	b.n	800951e <_printf_common+0x3e>
 8009590:	18e1      	adds	r1, r4, r3
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	2030      	movs	r0, #48	@ 0x30
 8009596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800959a:	4422      	add	r2, r4
 800959c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095a4:	3302      	adds	r3, #2
 80095a6:	e7c7      	b.n	8009538 <_printf_common+0x58>
 80095a8:	2301      	movs	r3, #1
 80095aa:	4622      	mov	r2, r4
 80095ac:	4641      	mov	r1, r8
 80095ae:	4638      	mov	r0, r7
 80095b0:	47c8      	blx	r9
 80095b2:	3001      	adds	r0, #1
 80095b4:	d0e6      	beq.n	8009584 <_printf_common+0xa4>
 80095b6:	3601      	adds	r6, #1
 80095b8:	e7d9      	b.n	800956e <_printf_common+0x8e>
	...

080095bc <_printf_i>:
 80095bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	7e0f      	ldrb	r7, [r1, #24]
 80095c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095c4:	2f78      	cmp	r7, #120	@ 0x78
 80095c6:	4691      	mov	r9, r2
 80095c8:	4680      	mov	r8, r0
 80095ca:	460c      	mov	r4, r1
 80095cc:	469a      	mov	sl, r3
 80095ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095d2:	d807      	bhi.n	80095e4 <_printf_i+0x28>
 80095d4:	2f62      	cmp	r7, #98	@ 0x62
 80095d6:	d80a      	bhi.n	80095ee <_printf_i+0x32>
 80095d8:	2f00      	cmp	r7, #0
 80095da:	f000 80d2 	beq.w	8009782 <_printf_i+0x1c6>
 80095de:	2f58      	cmp	r7, #88	@ 0x58
 80095e0:	f000 80b9 	beq.w	8009756 <_printf_i+0x19a>
 80095e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095ec:	e03a      	b.n	8009664 <_printf_i+0xa8>
 80095ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095f2:	2b15      	cmp	r3, #21
 80095f4:	d8f6      	bhi.n	80095e4 <_printf_i+0x28>
 80095f6:	a101      	add	r1, pc, #4	@ (adr r1, 80095fc <_printf_i+0x40>)
 80095f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095fc:	08009655 	.word	0x08009655
 8009600:	08009669 	.word	0x08009669
 8009604:	080095e5 	.word	0x080095e5
 8009608:	080095e5 	.word	0x080095e5
 800960c:	080095e5 	.word	0x080095e5
 8009610:	080095e5 	.word	0x080095e5
 8009614:	08009669 	.word	0x08009669
 8009618:	080095e5 	.word	0x080095e5
 800961c:	080095e5 	.word	0x080095e5
 8009620:	080095e5 	.word	0x080095e5
 8009624:	080095e5 	.word	0x080095e5
 8009628:	08009769 	.word	0x08009769
 800962c:	08009693 	.word	0x08009693
 8009630:	08009723 	.word	0x08009723
 8009634:	080095e5 	.word	0x080095e5
 8009638:	080095e5 	.word	0x080095e5
 800963c:	0800978b 	.word	0x0800978b
 8009640:	080095e5 	.word	0x080095e5
 8009644:	08009693 	.word	0x08009693
 8009648:	080095e5 	.word	0x080095e5
 800964c:	080095e5 	.word	0x080095e5
 8009650:	0800972b 	.word	0x0800972b
 8009654:	6833      	ldr	r3, [r6, #0]
 8009656:	1d1a      	adds	r2, r3, #4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6032      	str	r2, [r6, #0]
 800965c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009664:	2301      	movs	r3, #1
 8009666:	e09d      	b.n	80097a4 <_printf_i+0x1e8>
 8009668:	6833      	ldr	r3, [r6, #0]
 800966a:	6820      	ldr	r0, [r4, #0]
 800966c:	1d19      	adds	r1, r3, #4
 800966e:	6031      	str	r1, [r6, #0]
 8009670:	0606      	lsls	r6, r0, #24
 8009672:	d501      	bpl.n	8009678 <_printf_i+0xbc>
 8009674:	681d      	ldr	r5, [r3, #0]
 8009676:	e003      	b.n	8009680 <_printf_i+0xc4>
 8009678:	0645      	lsls	r5, r0, #25
 800967a:	d5fb      	bpl.n	8009674 <_printf_i+0xb8>
 800967c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009680:	2d00      	cmp	r5, #0
 8009682:	da03      	bge.n	800968c <_printf_i+0xd0>
 8009684:	232d      	movs	r3, #45	@ 0x2d
 8009686:	426d      	negs	r5, r5
 8009688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800968c:	4859      	ldr	r0, [pc, #356]	@ (80097f4 <_printf_i+0x238>)
 800968e:	230a      	movs	r3, #10
 8009690:	e011      	b.n	80096b6 <_printf_i+0xfa>
 8009692:	6821      	ldr	r1, [r4, #0]
 8009694:	6833      	ldr	r3, [r6, #0]
 8009696:	0608      	lsls	r0, r1, #24
 8009698:	f853 5b04 	ldr.w	r5, [r3], #4
 800969c:	d402      	bmi.n	80096a4 <_printf_i+0xe8>
 800969e:	0649      	lsls	r1, r1, #25
 80096a0:	bf48      	it	mi
 80096a2:	b2ad      	uxthmi	r5, r5
 80096a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80096a6:	4853      	ldr	r0, [pc, #332]	@ (80097f4 <_printf_i+0x238>)
 80096a8:	6033      	str	r3, [r6, #0]
 80096aa:	bf14      	ite	ne
 80096ac:	230a      	movne	r3, #10
 80096ae:	2308      	moveq	r3, #8
 80096b0:	2100      	movs	r1, #0
 80096b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096b6:	6866      	ldr	r6, [r4, #4]
 80096b8:	60a6      	str	r6, [r4, #8]
 80096ba:	2e00      	cmp	r6, #0
 80096bc:	bfa2      	ittt	ge
 80096be:	6821      	ldrge	r1, [r4, #0]
 80096c0:	f021 0104 	bicge.w	r1, r1, #4
 80096c4:	6021      	strge	r1, [r4, #0]
 80096c6:	b90d      	cbnz	r5, 80096cc <_printf_i+0x110>
 80096c8:	2e00      	cmp	r6, #0
 80096ca:	d04b      	beq.n	8009764 <_printf_i+0x1a8>
 80096cc:	4616      	mov	r6, r2
 80096ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80096d2:	fb03 5711 	mls	r7, r3, r1, r5
 80096d6:	5dc7      	ldrb	r7, [r0, r7]
 80096d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096dc:	462f      	mov	r7, r5
 80096de:	42bb      	cmp	r3, r7
 80096e0:	460d      	mov	r5, r1
 80096e2:	d9f4      	bls.n	80096ce <_printf_i+0x112>
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d10b      	bne.n	8009700 <_printf_i+0x144>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	07df      	lsls	r7, r3, #31
 80096ec:	d508      	bpl.n	8009700 <_printf_i+0x144>
 80096ee:	6923      	ldr	r3, [r4, #16]
 80096f0:	6861      	ldr	r1, [r4, #4]
 80096f2:	4299      	cmp	r1, r3
 80096f4:	bfde      	ittt	le
 80096f6:	2330      	movle	r3, #48	@ 0x30
 80096f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009700:	1b92      	subs	r2, r2, r6
 8009702:	6122      	str	r2, [r4, #16]
 8009704:	f8cd a000 	str.w	sl, [sp]
 8009708:	464b      	mov	r3, r9
 800970a:	aa03      	add	r2, sp, #12
 800970c:	4621      	mov	r1, r4
 800970e:	4640      	mov	r0, r8
 8009710:	f7ff fee6 	bl	80094e0 <_printf_common>
 8009714:	3001      	adds	r0, #1
 8009716:	d14a      	bne.n	80097ae <_printf_i+0x1f2>
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	b004      	add	sp, #16
 800971e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	f043 0320 	orr.w	r3, r3, #32
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	4833      	ldr	r0, [pc, #204]	@ (80097f8 <_printf_i+0x23c>)
 800972c:	2778      	movs	r7, #120	@ 0x78
 800972e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	6831      	ldr	r1, [r6, #0]
 8009736:	061f      	lsls	r7, r3, #24
 8009738:	f851 5b04 	ldr.w	r5, [r1], #4
 800973c:	d402      	bmi.n	8009744 <_printf_i+0x188>
 800973e:	065f      	lsls	r7, r3, #25
 8009740:	bf48      	it	mi
 8009742:	b2ad      	uxthmi	r5, r5
 8009744:	6031      	str	r1, [r6, #0]
 8009746:	07d9      	lsls	r1, r3, #31
 8009748:	bf44      	itt	mi
 800974a:	f043 0320 	orrmi.w	r3, r3, #32
 800974e:	6023      	strmi	r3, [r4, #0]
 8009750:	b11d      	cbz	r5, 800975a <_printf_i+0x19e>
 8009752:	2310      	movs	r3, #16
 8009754:	e7ac      	b.n	80096b0 <_printf_i+0xf4>
 8009756:	4827      	ldr	r0, [pc, #156]	@ (80097f4 <_printf_i+0x238>)
 8009758:	e7e9      	b.n	800972e <_printf_i+0x172>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	f023 0320 	bic.w	r3, r3, #32
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	e7f6      	b.n	8009752 <_printf_i+0x196>
 8009764:	4616      	mov	r6, r2
 8009766:	e7bd      	b.n	80096e4 <_printf_i+0x128>
 8009768:	6833      	ldr	r3, [r6, #0]
 800976a:	6825      	ldr	r5, [r4, #0]
 800976c:	6961      	ldr	r1, [r4, #20]
 800976e:	1d18      	adds	r0, r3, #4
 8009770:	6030      	str	r0, [r6, #0]
 8009772:	062e      	lsls	r6, r5, #24
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	d501      	bpl.n	800977c <_printf_i+0x1c0>
 8009778:	6019      	str	r1, [r3, #0]
 800977a:	e002      	b.n	8009782 <_printf_i+0x1c6>
 800977c:	0668      	lsls	r0, r5, #25
 800977e:	d5fb      	bpl.n	8009778 <_printf_i+0x1bc>
 8009780:	8019      	strh	r1, [r3, #0]
 8009782:	2300      	movs	r3, #0
 8009784:	6123      	str	r3, [r4, #16]
 8009786:	4616      	mov	r6, r2
 8009788:	e7bc      	b.n	8009704 <_printf_i+0x148>
 800978a:	6833      	ldr	r3, [r6, #0]
 800978c:	1d1a      	adds	r2, r3, #4
 800978e:	6032      	str	r2, [r6, #0]
 8009790:	681e      	ldr	r6, [r3, #0]
 8009792:	6862      	ldr	r2, [r4, #4]
 8009794:	2100      	movs	r1, #0
 8009796:	4630      	mov	r0, r6
 8009798:	f7f6 fda2 	bl	80002e0 <memchr>
 800979c:	b108      	cbz	r0, 80097a2 <_printf_i+0x1e6>
 800979e:	1b80      	subs	r0, r0, r6
 80097a0:	6060      	str	r0, [r4, #4]
 80097a2:	6863      	ldr	r3, [r4, #4]
 80097a4:	6123      	str	r3, [r4, #16]
 80097a6:	2300      	movs	r3, #0
 80097a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097ac:	e7aa      	b.n	8009704 <_printf_i+0x148>
 80097ae:	6923      	ldr	r3, [r4, #16]
 80097b0:	4632      	mov	r2, r6
 80097b2:	4649      	mov	r1, r9
 80097b4:	4640      	mov	r0, r8
 80097b6:	47d0      	blx	sl
 80097b8:	3001      	adds	r0, #1
 80097ba:	d0ad      	beq.n	8009718 <_printf_i+0x15c>
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	079b      	lsls	r3, r3, #30
 80097c0:	d413      	bmi.n	80097ea <_printf_i+0x22e>
 80097c2:	68e0      	ldr	r0, [r4, #12]
 80097c4:	9b03      	ldr	r3, [sp, #12]
 80097c6:	4298      	cmp	r0, r3
 80097c8:	bfb8      	it	lt
 80097ca:	4618      	movlt	r0, r3
 80097cc:	e7a6      	b.n	800971c <_printf_i+0x160>
 80097ce:	2301      	movs	r3, #1
 80097d0:	4632      	mov	r2, r6
 80097d2:	4649      	mov	r1, r9
 80097d4:	4640      	mov	r0, r8
 80097d6:	47d0      	blx	sl
 80097d8:	3001      	adds	r0, #1
 80097da:	d09d      	beq.n	8009718 <_printf_i+0x15c>
 80097dc:	3501      	adds	r5, #1
 80097de:	68e3      	ldr	r3, [r4, #12]
 80097e0:	9903      	ldr	r1, [sp, #12]
 80097e2:	1a5b      	subs	r3, r3, r1
 80097e4:	42ab      	cmp	r3, r5
 80097e6:	dcf2      	bgt.n	80097ce <_printf_i+0x212>
 80097e8:	e7eb      	b.n	80097c2 <_printf_i+0x206>
 80097ea:	2500      	movs	r5, #0
 80097ec:	f104 0619 	add.w	r6, r4, #25
 80097f0:	e7f5      	b.n	80097de <_printf_i+0x222>
 80097f2:	bf00      	nop
 80097f4:	08009cc7 	.word	0x08009cc7
 80097f8:	08009cd8 	.word	0x08009cd8

080097fc <__swbuf_r>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	460e      	mov	r6, r1
 8009800:	4614      	mov	r4, r2
 8009802:	4605      	mov	r5, r0
 8009804:	b118      	cbz	r0, 800980e <__swbuf_r+0x12>
 8009806:	6a03      	ldr	r3, [r0, #32]
 8009808:	b90b      	cbnz	r3, 800980e <__swbuf_r+0x12>
 800980a:	f7ff f9e3 	bl	8008bd4 <__sinit>
 800980e:	69a3      	ldr	r3, [r4, #24]
 8009810:	60a3      	str	r3, [r4, #8]
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	071a      	lsls	r2, r3, #28
 8009816:	d501      	bpl.n	800981c <__swbuf_r+0x20>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	b943      	cbnz	r3, 800982e <__swbuf_r+0x32>
 800981c:	4621      	mov	r1, r4
 800981e:	4628      	mov	r0, r5
 8009820:	f000 f82a 	bl	8009878 <__swsetup_r>
 8009824:	b118      	cbz	r0, 800982e <__swbuf_r+0x32>
 8009826:	f04f 37ff 	mov.w	r7, #4294967295
 800982a:	4638      	mov	r0, r7
 800982c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	6922      	ldr	r2, [r4, #16]
 8009832:	1a98      	subs	r0, r3, r2
 8009834:	6963      	ldr	r3, [r4, #20]
 8009836:	b2f6      	uxtb	r6, r6
 8009838:	4283      	cmp	r3, r0
 800983a:	4637      	mov	r7, r6
 800983c:	dc05      	bgt.n	800984a <__swbuf_r+0x4e>
 800983e:	4621      	mov	r1, r4
 8009840:	4628      	mov	r0, r5
 8009842:	f7ff fcbb 	bl	80091bc <_fflush_r>
 8009846:	2800      	cmp	r0, #0
 8009848:	d1ed      	bne.n	8009826 <__swbuf_r+0x2a>
 800984a:	68a3      	ldr	r3, [r4, #8]
 800984c:	3b01      	subs	r3, #1
 800984e:	60a3      	str	r3, [r4, #8]
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	6022      	str	r2, [r4, #0]
 8009856:	701e      	strb	r6, [r3, #0]
 8009858:	6962      	ldr	r2, [r4, #20]
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	429a      	cmp	r2, r3
 800985e:	d004      	beq.n	800986a <__swbuf_r+0x6e>
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	07db      	lsls	r3, r3, #31
 8009864:	d5e1      	bpl.n	800982a <__swbuf_r+0x2e>
 8009866:	2e0a      	cmp	r6, #10
 8009868:	d1df      	bne.n	800982a <__swbuf_r+0x2e>
 800986a:	4621      	mov	r1, r4
 800986c:	4628      	mov	r0, r5
 800986e:	f7ff fca5 	bl	80091bc <_fflush_r>
 8009872:	2800      	cmp	r0, #0
 8009874:	d0d9      	beq.n	800982a <__swbuf_r+0x2e>
 8009876:	e7d6      	b.n	8009826 <__swbuf_r+0x2a>

08009878 <__swsetup_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4b29      	ldr	r3, [pc, #164]	@ (8009920 <__swsetup_r+0xa8>)
 800987c:	4605      	mov	r5, r0
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	460c      	mov	r4, r1
 8009882:	b118      	cbz	r0, 800988c <__swsetup_r+0x14>
 8009884:	6a03      	ldr	r3, [r0, #32]
 8009886:	b90b      	cbnz	r3, 800988c <__swsetup_r+0x14>
 8009888:	f7ff f9a4 	bl	8008bd4 <__sinit>
 800988c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009890:	0719      	lsls	r1, r3, #28
 8009892:	d422      	bmi.n	80098da <__swsetup_r+0x62>
 8009894:	06da      	lsls	r2, r3, #27
 8009896:	d407      	bmi.n	80098a8 <__swsetup_r+0x30>
 8009898:	2209      	movs	r2, #9
 800989a:	602a      	str	r2, [r5, #0]
 800989c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295
 80098a6:	e033      	b.n	8009910 <__swsetup_r+0x98>
 80098a8:	0758      	lsls	r0, r3, #29
 80098aa:	d512      	bpl.n	80098d2 <__swsetup_r+0x5a>
 80098ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098ae:	b141      	cbz	r1, 80098c2 <__swsetup_r+0x4a>
 80098b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098b4:	4299      	cmp	r1, r3
 80098b6:	d002      	beq.n	80098be <__swsetup_r+0x46>
 80098b8:	4628      	mov	r0, r5
 80098ba:	f7ff fafb 	bl	8008eb4 <_free_r>
 80098be:	2300      	movs	r3, #0
 80098c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	2300      	movs	r3, #0
 80098cc:	6063      	str	r3, [r4, #4]
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	f043 0308 	orr.w	r3, r3, #8
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	b94b      	cbnz	r3, 80098f2 <__swsetup_r+0x7a>
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e8:	d003      	beq.n	80098f2 <__swsetup_r+0x7a>
 80098ea:	4621      	mov	r1, r4
 80098ec:	4628      	mov	r0, r5
 80098ee:	f000 f883 	bl	80099f8 <__smakebuf_r>
 80098f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f6:	f013 0201 	ands.w	r2, r3, #1
 80098fa:	d00a      	beq.n	8009912 <__swsetup_r+0x9a>
 80098fc:	2200      	movs	r2, #0
 80098fe:	60a2      	str	r2, [r4, #8]
 8009900:	6962      	ldr	r2, [r4, #20]
 8009902:	4252      	negs	r2, r2
 8009904:	61a2      	str	r2, [r4, #24]
 8009906:	6922      	ldr	r2, [r4, #16]
 8009908:	b942      	cbnz	r2, 800991c <__swsetup_r+0xa4>
 800990a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800990e:	d1c5      	bne.n	800989c <__swsetup_r+0x24>
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	0799      	lsls	r1, r3, #30
 8009914:	bf58      	it	pl
 8009916:	6962      	ldrpl	r2, [r4, #20]
 8009918:	60a2      	str	r2, [r4, #8]
 800991a:	e7f4      	b.n	8009906 <__swsetup_r+0x8e>
 800991c:	2000      	movs	r0, #0
 800991e:	e7f7      	b.n	8009910 <__swsetup_r+0x98>
 8009920:	2400001c 	.word	0x2400001c

08009924 <_raise_r>:
 8009924:	291f      	cmp	r1, #31
 8009926:	b538      	push	{r3, r4, r5, lr}
 8009928:	4605      	mov	r5, r0
 800992a:	460c      	mov	r4, r1
 800992c:	d904      	bls.n	8009938 <_raise_r+0x14>
 800992e:	2316      	movs	r3, #22
 8009930:	6003      	str	r3, [r0, #0]
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800993a:	b112      	cbz	r2, 8009942 <_raise_r+0x1e>
 800993c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009940:	b94b      	cbnz	r3, 8009956 <_raise_r+0x32>
 8009942:	4628      	mov	r0, r5
 8009944:	f000 f830 	bl	80099a8 <_getpid_r>
 8009948:	4622      	mov	r2, r4
 800994a:	4601      	mov	r1, r0
 800994c:	4628      	mov	r0, r5
 800994e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009952:	f000 b817 	b.w	8009984 <_kill_r>
 8009956:	2b01      	cmp	r3, #1
 8009958:	d00a      	beq.n	8009970 <_raise_r+0x4c>
 800995a:	1c59      	adds	r1, r3, #1
 800995c:	d103      	bne.n	8009966 <_raise_r+0x42>
 800995e:	2316      	movs	r3, #22
 8009960:	6003      	str	r3, [r0, #0]
 8009962:	2001      	movs	r0, #1
 8009964:	e7e7      	b.n	8009936 <_raise_r+0x12>
 8009966:	2100      	movs	r1, #0
 8009968:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800996c:	4620      	mov	r0, r4
 800996e:	4798      	blx	r3
 8009970:	2000      	movs	r0, #0
 8009972:	e7e0      	b.n	8009936 <_raise_r+0x12>

08009974 <raise>:
 8009974:	4b02      	ldr	r3, [pc, #8]	@ (8009980 <raise+0xc>)
 8009976:	4601      	mov	r1, r0
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f7ff bfd3 	b.w	8009924 <_raise_r>
 800997e:	bf00      	nop
 8009980:	2400001c 	.word	0x2400001c

08009984 <_kill_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d07      	ldr	r5, [pc, #28]	@ (80099a4 <_kill_r+0x20>)
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	4611      	mov	r1, r2
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	f7f7 fca9 	bl	80012e8 <_kill>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d102      	bne.n	80099a0 <_kill_r+0x1c>
 800999a:	682b      	ldr	r3, [r5, #0]
 800999c:	b103      	cbz	r3, 80099a0 <_kill_r+0x1c>
 800999e:	6023      	str	r3, [r4, #0]
 80099a0:	bd38      	pop	{r3, r4, r5, pc}
 80099a2:	bf00      	nop
 80099a4:	24000458 	.word	0x24000458

080099a8 <_getpid_r>:
 80099a8:	f7f7 bc96 	b.w	80012d8 <_getpid>

080099ac <__swhatbuf_r>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	460c      	mov	r4, r1
 80099b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b4:	2900      	cmp	r1, #0
 80099b6:	b096      	sub	sp, #88	@ 0x58
 80099b8:	4615      	mov	r5, r2
 80099ba:	461e      	mov	r6, r3
 80099bc:	da0d      	bge.n	80099da <__swhatbuf_r+0x2e>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099c4:	f04f 0100 	mov.w	r1, #0
 80099c8:	bf14      	ite	ne
 80099ca:	2340      	movne	r3, #64	@ 0x40
 80099cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099d0:	2000      	movs	r0, #0
 80099d2:	6031      	str	r1, [r6, #0]
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	b016      	add	sp, #88	@ 0x58
 80099d8:	bd70      	pop	{r4, r5, r6, pc}
 80099da:	466a      	mov	r2, sp
 80099dc:	f000 f848 	bl	8009a70 <_fstat_r>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	dbec      	blt.n	80099be <__swhatbuf_r+0x12>
 80099e4:	9901      	ldr	r1, [sp, #4]
 80099e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099ee:	4259      	negs	r1, r3
 80099f0:	4159      	adcs	r1, r3
 80099f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099f6:	e7eb      	b.n	80099d0 <__swhatbuf_r+0x24>

080099f8 <__smakebuf_r>:
 80099f8:	898b      	ldrh	r3, [r1, #12]
 80099fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099fc:	079d      	lsls	r5, r3, #30
 80099fe:	4606      	mov	r6, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	d507      	bpl.n	8009a14 <__smakebuf_r+0x1c>
 8009a04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	6163      	str	r3, [r4, #20]
 8009a10:	b003      	add	sp, #12
 8009a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a14:	ab01      	add	r3, sp, #4
 8009a16:	466a      	mov	r2, sp
 8009a18:	f7ff ffc8 	bl	80099ac <__swhatbuf_r>
 8009a1c:	9f00      	ldr	r7, [sp, #0]
 8009a1e:	4605      	mov	r5, r0
 8009a20:	4639      	mov	r1, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7ff faba 	bl	8008f9c <_malloc_r>
 8009a28:	b948      	cbnz	r0, 8009a3e <__smakebuf_r+0x46>
 8009a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2e:	059a      	lsls	r2, r3, #22
 8009a30:	d4ee      	bmi.n	8009a10 <__smakebuf_r+0x18>
 8009a32:	f023 0303 	bic.w	r3, r3, #3
 8009a36:	f043 0302 	orr.w	r3, r3, #2
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	e7e2      	b.n	8009a04 <__smakebuf_r+0xc>
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	6020      	str	r0, [r4, #0]
 8009a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a4e:	b15b      	cbz	r3, 8009a68 <__smakebuf_r+0x70>
 8009a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 f81d 	bl	8009a94 <_isatty_r>
 8009a5a:	b128      	cbz	r0, 8009a68 <__smakebuf_r+0x70>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	431d      	orrs	r5, r3
 8009a6c:	81a5      	strh	r5, [r4, #12]
 8009a6e:	e7cf      	b.n	8009a10 <__smakebuf_r+0x18>

08009a70 <_fstat_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d07      	ldr	r5, [pc, #28]	@ (8009a90 <_fstat_r+0x20>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	602b      	str	r3, [r5, #0]
 8009a7e:	f7f7 fc93 	bl	80013a8 <_fstat>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	d102      	bne.n	8009a8c <_fstat_r+0x1c>
 8009a86:	682b      	ldr	r3, [r5, #0]
 8009a88:	b103      	cbz	r3, 8009a8c <_fstat_r+0x1c>
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	bf00      	nop
 8009a90:	24000458 	.word	0x24000458

08009a94 <_isatty_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d06      	ldr	r5, [pc, #24]	@ (8009ab0 <_isatty_r+0x1c>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f7f7 fc92 	bl	80013c8 <_isatty>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_isatty_r+0x1a>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_isatty_r+0x1a>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	24000458 	.word	0x24000458

08009ab4 <_init>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	bf00      	nop
 8009ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aba:	bc08      	pop	{r3}
 8009abc:	469e      	mov	lr, r3
 8009abe:	4770      	bx	lr

08009ac0 <_fini>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	bf00      	nop
 8009ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac6:	bc08      	pop	{r3}
 8009ac8:	469e      	mov	lr, r3
 8009aca:	4770      	bx	lr
