
bt_723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d770  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  0800da40  0800da40  0000ea40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800de40  0800de40  0000ee40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800de48  0800de48  0000ee48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800de4c  0800de4c  0000ee4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800de50  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000057c  2400006c  0800debc  0000f06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240005e8  0800debc  0000f5e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001692b  00000000  00000000  0000f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002890  00000000  00000000  000259c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011d8  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dfc  00000000  00000000  00029430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000339ea  00000000  00000000  0002a22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018453  00000000  00000000  0005dc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e124  00000000  00000000  00076069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  001c418d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057b8  00000000  00000000  001c4214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000003e  00000000  00000000  001c99cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800da28 	.word	0x0800da28

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800da28 	.word	0x0800da28

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]


	if (huart->Instance == UART4) // UART connection with Bluetooth
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a40      	ldr	r2, [pc, #256]	@ (80007b4 <HAL_UARTEx_RxEventCallback+0x114>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d179      	bne.n	80007aa <HAL_UARTEx_RxEventCallback+0x10a>
	{
		Data_USART[Size] = '\0'; // Null-terminate the received string
 80006b6:	887b      	ldrh	r3, [r7, #2]
 80006b8:	4a3f      	ldr	r2, [pc, #252]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x118>)
 80006ba:	2100      	movs	r1, #0
 80006bc:	54d1      	strb	r1, [r2, r3]
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, Data_USART , BUFFER_SIZE );
 80006be:	2240      	movs	r2, #64	@ 0x40
 80006c0:	493d      	ldr	r1, [pc, #244]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x118>)
 80006c2:	483e      	ldr	r0, [pc, #248]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x11c>)
 80006c4:	f00b fa7d 	bl	800bbc2 <HAL_UARTEx_ReceiveToIdle_IT>
		ParseAndSetRGB(Data_USART);
 80006c8:	483b      	ldr	r0, [pc, #236]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x118>)
 80006ca:	f000 f9f1 	bl	8000ab0 <ParseAndSetRGB>
		// Continue receiving data in interrupt mode
		if(Data_USART[0]>0 && Data_USART[0]<=84 ){
 80006ce:	4b3a      	ldr	r3, [pc, #232]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x118>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d014      	beq.n	8000700 <HAL_UARTEx_RxEventCallback+0x60>
 80006d6:	4b38      	ldr	r3, [pc, #224]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x118>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b54      	cmp	r3, #84	@ 0x54
 80006dc:	d810      	bhi.n	8000700 <HAL_UARTEx_RxEventCallback+0x60>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2101      	movs	r1, #1
 80006e2:	4837      	ldr	r0, [pc, #220]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 80006e4:	f004 fa40 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2102      	movs	r1, #2
 80006ec:	4835      	ldr	r0, [pc, #212]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x124>)
 80006ee:	f004 fa3b 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f8:	4831      	ldr	r0, [pc, #196]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 80006fa:	f004 fa35 	bl	8004b68 <HAL_GPIO_WritePin>
 80006fe:	e054      	b.n	80007aa <HAL_UARTEx_RxEventCallback+0x10a>
		}
		else if(Data_USART[0]>=85 && Data_USART[0]<=169 )
 8000700:	4b2d      	ldr	r3, [pc, #180]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b54      	cmp	r3, #84	@ 0x54
 8000706:	d914      	bls.n	8000732 <HAL_UARTEx_RxEventCallback+0x92>
 8000708:	4b2b      	ldr	r3, [pc, #172]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x118>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2ba9      	cmp	r3, #169	@ 0xa9
 800070e:	d810      	bhi.n	8000732 <HAL_UARTEx_RxEventCallback+0x92>
		{
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2101      	movs	r1, #1
 8000714:	482a      	ldr	r0, [pc, #168]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000716:	f004 fa27 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2102      	movs	r1, #2
 800071e:	4829      	ldr	r0, [pc, #164]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x124>)
 8000720:	f004 fa22 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072a:	4825      	ldr	r0, [pc, #148]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 800072c:	f004 fa1c 	bl	8004b68 <HAL_GPIO_WritePin>
 8000730:	e03b      	b.n	80007aa <HAL_UARTEx_RxEventCallback+0x10a>
		}
		else if(Data_USART[0]>=170 && Data_USART[0]<=255 ){
 8000732:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x118>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2ba9      	cmp	r3, #169	@ 0xa9
 8000738:	d910      	bls.n	800075c <HAL_UARTEx_RxEventCallback+0xbc>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2101      	movs	r1, #1
 800073e:	4820      	ldr	r0, [pc, #128]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000740:	f004 fa12 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2102      	movs	r1, #2
 8000748:	481e      	ldr	r0, [pc, #120]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x124>)
 800074a:	f004 fa0d 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000754:	481a      	ldr	r0, [pc, #104]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000756:	f004 fa07 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_Delay(250);
		}
	}


}
 800075a:	e026      	b.n	80007aa <HAL_UARTEx_RxEventCallback+0x10a>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	4817      	ldr	r0, [pc, #92]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000762:	f004 fa01 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2102      	movs	r1, #2
 800076a:	4816      	ldr	r0, [pc, #88]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x124>)
 800076c:	f004 f9fc 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000776:	4812      	ldr	r0, [pc, #72]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000778:	f004 f9f6 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_Delay(250);
 800077c:	20fa      	movs	r0, #250	@ 0xfa
 800077e:	f001 f8df 	bl	8001940 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000788:	f004 f9ee 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2102      	movs	r1, #2
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x124>)
 8000792:	f004 f9e9 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800079c:	4808      	ldr	r0, [pc, #32]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x120>)
 800079e:	f004 f9e3 	bl	8004b68 <HAL_GPIO_WritePin>
			HAL_Delay(250);
 80007a2:	20fa      	movs	r0, #250	@ 0xfa
 80007a4:	f001 f8cc 	bl	8001940 <HAL_Delay>
}
 80007a8:	e7ff      	b.n	80007aa <HAL_UARTEx_RxEventCallback+0x10a>
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40004c00 	.word	0x40004c00
 80007b8:	2400022c 	.word	0x2400022c
 80007bc:	24000198 	.word	0x24000198
 80007c0:	58020400 	.word	0x58020400
 80007c4:	58021000 	.word	0x58021000

080007c8 <SetRGB>:
{
	HAL_UART_Transmit(&huart4, data, size, HAL_MAX_DELAY);
}

void SetRGB(uint8_t red, uint8_t green, uint8_t blue)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	460b      	mov	r3, r1
 80007d4:	71bb      	strb	r3, [r7, #6]
 80007d6:	4613      	mov	r3, r2
 80007d8:	717b      	strb	r3, [r7, #5]
	/*
	 *    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  	  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  	  	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
	 */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, red);
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <SetRGB+0x38>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, green);
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <SetRGB+0x38>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	79ba      	ldrb	r2, [r7, #6]
 80007e8:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, blue);
 80007ea:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <SetRGB+0x38>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	797a      	ldrb	r2, [r7, #5]
 80007f0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	24000088 	.word	0x24000088

08000804 <HAL_TIM_PWM_PulseFinishedCallback>:



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_3);
 800080c:	2108      	movs	r1, #8
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000810:	f007 fb24 	bl	8007e5c <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000816:	2201      	movs	r2, #1
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	240000d4 	.word	0x240000d4
 8000828:	24000490 	.word	0x24000490

0800082c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)//int LEDnum, int Red, int Green, int Blue
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	b2d9      	uxtb	r1, r3
 800083e:	4a11      	ldr	r2, [pc, #68]	@ (8000884 <Set_LED+0x58>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	b2d9      	uxtb	r1, r3
 800084a:	4a0e      	ldr	r2, [pc, #56]	@ (8000884 <Set_LED+0x58>)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	460a      	mov	r2, r1
 8000854:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	b2d9      	uxtb	r1, r3
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <Set_LED+0x58>)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	460a      	mov	r2, r1
 8000864:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2d9      	uxtb	r1, r3
 800086a:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <Set_LED+0x58>)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	460a      	mov	r2, r1
 8000874:	70da      	strb	r2, [r3, #3]
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	2400026c 	.word	0x2400026c

08000888 <Set_Brightness>:



void Set_Brightness (int brightness)  // 0-45
{
 8000888:	b580      	push	{r7, lr}
 800088a:	ed2d 8b02 	vpush	{d8}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b2d      	cmp	r3, #45	@ 0x2d
 8000898:	dd01      	ble.n	800089e <Set_Brightness+0x16>
 800089a:	232d      	movs	r3, #45	@ 0x2d
 800089c:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e051      	b.n	8000948 <Set_Brightness+0xc0>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 80008a4:	4a32      	ldr	r2, [pc, #200]	@ (8000970 <Set_Brightness+0xe8>)
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80008ac:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <Set_Brightness+0xec>)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	e040      	b.n	800093c <Set_Brightness+0xb4>
		{
			float angle = 90-brightness;  // in degrees
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80008c0:	ee07 3a90 	vmov	s15, r3
 80008c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c8:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80008cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d4:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000960 <Set_Brightness+0xd8>
 80008d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008dc:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8000968 <Set_Brightness+0xe0>
 80008e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e8:	edc7 7a03 	vstr	s15, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 80008ec:	4a20      	ldr	r2, [pc, #128]	@ (8000970 <Set_Brightness+0xe8>)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	441a      	add	r2, r3
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	4413      	add	r3, r2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	ee07 3a90 	vmov	s15, r3
 80008fe:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000902:	edd7 7a03 	vldr	s15, [r7, #12]
 8000906:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800090a:	eeb0 0b47 	vmov.f64	d0, d7
 800090e:	f00c fa7b 	bl	800ce08 <tan>
 8000912:	eeb0 6b40 	vmov.f64	d6, d0
 8000916:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800091a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800091e:	edc7 7a00 	vstr	s15, [r7]
 8000922:	783b      	ldrb	r3, [r7, #0]
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	4a13      	ldr	r2, [pc, #76]	@ (8000974 <Set_Brightness+0xec>)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	441a      	add	r2, r3
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	4413      	add	r3, r2
 8000932:	460a      	mov	r2, r1
 8000934:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	3301      	adds	r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	2b03      	cmp	r3, #3
 8000940:	ddbb      	ble.n	80008ba <Set_Brightness+0x32>
	for (int i=0; i<MAX_LED; i++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	2b07      	cmp	r3, #7
 800094c:	ddaa      	ble.n	80008a4 <Set_Brightness+0x1c>
		}
	}

#endif

}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	ecbd 8b02 	vpop	{d8}
 800095a:	bd80      	pop	{r7, pc}
 800095c:	f3af 8000 	nop.w
 8000960:	53c8d4f1 	.word	0x53c8d4f1
 8000964:	400921fb 	.word	0x400921fb
 8000968:	00000000 	.word	0x00000000
 800096c:	40668000 	.word	0x40668000
 8000970:	2400026c 	.word	0x2400026c
 8000974:	2400028c 	.word	0x2400028c

08000978 <WS2812_Send>:


void WS2812_Send (void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	e036      	b.n	80009f6 <WS2812_Send+0x7e>
	{
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000988:	4a2e      	ldr	r2, [pc, #184]	@ (8000a44 <WS2812_Send+0xcc>)
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	785b      	ldrb	r3, [r3, #1]
 8000992:	041a      	lsls	r2, r3, #16
 8000994:	492b      	ldr	r1, [pc, #172]	@ (8000a44 <WS2812_Send+0xcc>)
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	440b      	add	r3, r1
 800099c:	789b      	ldrb	r3, [r3, #2]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	431a      	orrs	r2, r3
 80009a2:	4928      	ldr	r1, [pc, #160]	@ (8000a44 <WS2812_Send+0xcc>)
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	607b      	str	r3, [r7, #4]

		for (int j=23; j>=0; j--)
 80009b0:	2317      	movs	r3, #23
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	e019      	b.n	80009ea <WS2812_Send+0x72>
		{
			if (color & (1<<j))
 80009b6:	2201      	movs	r2, #1
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4013      	ands	r3, r2
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d005      	beq.n	80009d4 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 40;
 80009c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a48 <WS2812_Send+0xd0>)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	2128      	movs	r1, #40	@ 0x28
 80009ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009d2:	e004      	b.n	80009de <WS2812_Send+0x66>
			}
			else
			{
				pwmData[indx] = 20;
 80009d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a48 <WS2812_Send+0xd0>)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	2114      	movs	r1, #20
 80009da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3301      	adds	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
		for (int j=23; j>=0; j--)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	dae2      	bge.n	80009b6 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	3301      	adds	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	2b07      	cmp	r3, #7
 80009fa:	ddc5      	ble.n	8000988 <WS2812_Send+0x10>
		}
	}

	for (int i=0; i<50; i++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	e00a      	b.n	8000a18 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8000a02:	4a11      	ldr	r2, [pc, #68]	@ (8000a48 <WS2812_Send+0xd0>)
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2100      	movs	r1, #0
 8000a08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	2b31      	cmp	r3, #49	@ 0x31
 8000a1c:	ddf1      	ble.n	8000a02 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4a09      	ldr	r2, [pc, #36]	@ (8000a48 <WS2812_Send+0xd0>)
 8000a24:	2108      	movs	r1, #8
 8000a26:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <WS2812_Send+0xd4>)
 8000a28:	f006 ffe4 	bl	80079f4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {};
 8000a2c:	bf00      	nop
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <WS2812_Send+0xd8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0fb      	beq.n	8000a2e <WS2812_Send+0xb6>
	datasentflag = 0;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <WS2812_Send+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2400026c 	.word	0x2400026c
 8000a48:	240002ac 	.word	0x240002ac
 8000a4c:	240000d4 	.word	0x240000d4
 8000a50:	24000490 	.word	0x24000490

08000a54 <Reset_LED>:

void Reset_LED (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED; i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	e01a      	b.n	8000a96 <Reset_LED+0x42>
	{
		LED_Data[i][0] = i;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	b2d9      	uxtb	r1, r3
 8000a64:	4a11      	ldr	r2, [pc, #68]	@ (8000aac <Reset_LED+0x58>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <Reset_LED+0x58>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 8000a78:	4a0c      	ldr	r2, [pc, #48]	@ (8000aac <Reset_LED+0x58>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	2200      	movs	r2, #0
 8000a82:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 8000a84:	4a09      	ldr	r2, [pc, #36]	@ (8000aac <Reset_LED+0x58>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	70da      	strb	r2, [r3, #3]
	for (int i=0; i<MAX_LED; i++)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3301      	adds	r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b07      	cmp	r3, #7
 8000a9a:	dde1      	ble.n	8000a60 <Reset_LED+0xc>
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	2400026c 	.word	0x2400026c

08000ab0 <ParseAndSetRGB>:
	  return 0x01;

}

void ParseAndSetRGB(uint8_t *data)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	char *token;
	uint8_t rgb[3];
	int i = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]

	token = strtok((char *)data, ",");
 8000abc:	491e      	ldr	r1, [pc, #120]	@ (8000b38 <ParseAndSetRGB+0x88>)
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f00b fab4 	bl	800c02c <strtok>
 8000ac4:	6178      	str	r0, [r7, #20]
	while (token != NULL && i < 3)
 8000ac6:	e010      	b.n	8000aea <ParseAndSetRGB+0x3a>
	{
		rgb[i++] = atoi(token);
 8000ac8:	6978      	ldr	r0, [r7, #20]
 8000aca:	f00b f919 	bl	800bd00 <atoi>
 8000ace:	4601      	mov	r1, r0
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	613a      	str	r2, [r7, #16]
 8000ad6:	b2ca      	uxtb	r2, r1
 8000ad8:	3318      	adds	r3, #24
 8000ada:	443b      	add	r3, r7
 8000adc:	f803 2c10 	strb.w	r2, [r3, #-16]
		token = strtok(NULL, ",");
 8000ae0:	4915      	ldr	r1, [pc, #84]	@ (8000b38 <ParseAndSetRGB+0x88>)
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f00b faa2 	bl	800c02c <strtok>
 8000ae8:	6178      	str	r0, [r7, #20]
	while (token != NULL && i < 3)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <ParseAndSetRGB+0x46>
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	dde8      	ble.n	8000ac8 <ParseAndSetRGB+0x18>
	}

	if (i == 3) // Ensure we have all three RGB values
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d118      	bne.n	8000b2e <ParseAndSetRGB+0x7e>
	{
		SetRGB(rgb[0], rgb[1], rgb[2]);
 8000afc:	7a3b      	ldrb	r3, [r7, #8]
 8000afe:	7a79      	ldrb	r1, [r7, #9]
 8000b00:	7aba      	ldrb	r2, [r7, #10]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe60 	bl	80007c8 <SetRGB>
		for(int k=0;k<9;k++){
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	e00a      	b.n	8000b24 <ParseAndSetRGB+0x74>
		Set_LED(k,rgb[0], rgb[1], rgb[2]);
 8000b0e:	7a3b      	ldrb	r3, [r7, #8]
 8000b10:	4619      	mov	r1, r3
 8000b12:	7a7b      	ldrb	r3, [r7, #9]
 8000b14:	461a      	mov	r2, r3
 8000b16:	7abb      	ldrb	r3, [r7, #10]
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f7ff fe87 	bl	800082c <Set_LED>
		for(int k=0;k<9;k++){
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	ddf1      	ble.n	8000b0e <ParseAndSetRGB+0x5e>
		}
		WS2812_Send();
 8000b2a:	f7ff ff25 	bl	8000978 <WS2812_Send>
	}
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	0800da40 	.word	0x0800da40

08000b3c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
 int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	 /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	 HAL_Init();
 8000b40:	f000 fe6c 	bl	800181c <HAL_Init>
	 /* USER CODE BEGIN Init */

	 /* USER CODE END Init */

	 /* Configure the system clock */
	 SystemClock_Config();
 8000b44:	f000 f830 	bl	8000ba8 <SystemClock_Config>
	 /* USER CODE BEGIN SysInit */

	 /* USER CODE END SysInit */

	 /* Initialize all configured peripherals */
	 MX_GPIO_Init();
 8000b48:	f000 fa26 	bl	8000f98 <MX_GPIO_Init>
	 MX_DMA_Init();
 8000b4c:	f000 fa04 	bl	8000f58 <MX_DMA_Init>
	 MX_TIM4_Init();
 8000b50:	f000 f940 	bl	8000dd4 <MX_TIM4_Init>
	 MX_TIM1_Init();
 8000b54:	f000 f898 	bl	8000c88 <MX_TIM1_Init>
	 MX_UART4_Init();
 8000b58:	f000 f9b2 	bl	8000ec0 <MX_UART4_Init>
	 /* USER CODE BEGIN 2 */
	 HAL_UARTEx_ReceiveToIdle_IT(&huart4, Data_USART, BUFFER_SIZE);
 8000b5c:	2240      	movs	r2, #64	@ 0x40
 8000b5e:	490f      	ldr	r1, [pc, #60]	@ (8000b9c <main+0x60>)
 8000b60:	480f      	ldr	r0, [pc, #60]	@ (8000ba0 <main+0x64>)
 8000b62:	f00b f82e 	bl	800bbc2 <HAL_UARTEx_ReceiveToIdle_IT>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b66:	2100      	movs	r1, #0
 8000b68:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <main+0x68>)
 8000b6a:	f006 fe27 	bl	80077bc <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b6e:	2104      	movs	r1, #4
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <main+0x68>)
 8000b72:	f006 fe23 	bl	80077bc <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000b76:	2108      	movs	r1, #8
 8000b78:	480a      	ldr	r0, [pc, #40]	@ (8000ba4 <main+0x68>)
 8000b7a:	f006 fe1f 	bl	80077bc <HAL_TIM_PWM_Start>
	 Reset_LED();
 8000b7e:	f7ff ff69 	bl	8000a54 <Reset_LED>
//	  Set_LED(5, 102, 0, 235);
//	  Set_LED(6, 47, 38, 77);
//
//	  Set_LED(7, 255, 200, 0);

	 Set_Brightness(5);  // 0-45
 8000b82:	2005      	movs	r0, #5
 8000b84:	f7ff fe80 	bl	8000888 <Set_Brightness>
	 WS2812_Send();
 8000b88:	f7ff fef6 	bl	8000978 <WS2812_Send>
		 //led_green();
		 //led_blue();
		// led_magenta();
	//led_fade();
		 /* USER CODE BEGIN 3 */
		 ParseAndSetRGB(Data_USART);
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <main+0x60>)
 8000b8e:	f7ff ff8f 	bl	8000ab0 <ParseAndSetRGB>
		 Reset_LED();
 8000b92:	f7ff ff5f 	bl	8000a54 <Reset_LED>
		 ParseAndSetRGB(Data_USART);
 8000b96:	bf00      	nop
 8000b98:	e7f8      	b.n	8000b8c <main+0x50>
 8000b9a:	bf00      	nop
 8000b9c:	2400022c 	.word	0x2400022c
 8000ba0:	24000198 	.word	0x24000198
 8000ba4:	24000088 	.word	0x24000088

08000ba8 <SystemClock_Config>:
 /**
  * @brief System Clock Configuration
  * @retval None
  */
 void SystemClock_Config(void)
 {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09c      	sub	sp, #112	@ 0x70
 8000bac:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb2:	224c      	movs	r2, #76	@ 0x4c
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00b fa2f 	bl	800c01a <memset>
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00b fa29 	bl	800c01a <memset>

	 /** Supply configuration update enable
	  */
	 HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f003 ffe7 	bl	8004b9c <HAL_PWREx_ConfigSupply>

	 /** Configure the main internal regulator output voltage
	  */
	 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c84 <SystemClock_Config+0xdc>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bda:	4a2a      	ldr	r2, [pc, #168]	@ (8000c84 <SystemClock_Config+0xdc>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <SystemClock_Config+0xdc>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

	 while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bee:	bf00      	nop
 8000bf0:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <SystemClock_Config+0xdc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bfc:	d1f8      	bne.n	8000bf0 <SystemClock_Config+0x48>

	 /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
	 RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
	 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
	 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	 RCC_OscInitStruct.PLL.PLLM = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	653b      	str	r3, [r7, #80]	@ 0x50
	 RCC_OscInitStruct.PLL.PLLN = 48;
 8000c14:	2330      	movs	r3, #48	@ 0x30
 8000c16:	657b      	str	r3, [r7, #84]	@ 0x54
	 RCC_OscInitStruct.PLL.PLLP = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	65bb      	str	r3, [r7, #88]	@ 0x58
	 RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	 RCC_OscInitStruct.PLL.PLLR = 2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	663b      	str	r3, [r7, #96]	@ 0x60
	 RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c24:	2308      	movs	r3, #8
 8000c26:	667b      	str	r3, [r7, #100]	@ 0x64
	 RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
	 RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 ffeb 	bl	8004c10 <HAL_RCC_OscConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x9c>
	 {
		 Error_Handler();
 8000c40:	f000 fa96 	bl	8001170 <Error_Handler>
	 }

	 /** Initializes the CPU, AHB and APB buses clocks
	  */
	 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c44:	233f      	movs	r3, #63	@ 0x3f
 8000c46:	607b      	str	r3, [r7, #4]
			 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			 |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	60bb      	str	r3, [r7, #8]
	 RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000c4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c50:	60fb      	str	r3, [r7, #12]
	 RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c52:	2308      	movs	r3, #8
 8000c54:	613b      	str	r3, [r7, #16]
	 RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c56:	2340      	movs	r3, #64	@ 0x40
 8000c58:	617b      	str	r3, [r7, #20]
	 RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c5a:	2340      	movs	r3, #64	@ 0x40
 8000c5c:	61bb      	str	r3, [r7, #24]
	 RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c62:	61fb      	str	r3, [r7, #28]
	 RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c64:	2340      	movs	r3, #64	@ 0x40
 8000c66:	623b      	str	r3, [r7, #32]

	 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 fba9 	bl	80053c4 <HAL_RCC_ClockConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xd4>
	 {
		 Error_Handler();
 8000c78:	f000 fa7a 	bl	8001170 <Error_Handler>
	 }
 }
 8000c7c:	bf00      	nop
 8000c7e:	3770      	adds	r7, #112	@ 0x70
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58024800 	.word	0x58024800

08000c88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
 static void MX_TIM1_Init(void)
 {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b098      	sub	sp, #96	@ 0x60
 8000c8c:	af00      	add	r7, sp, #0

	 /* USER CODE BEGIN TIM1_Init 0 */

	 /* USER CODE END TIM1_Init 0 */

	 TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
	 TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]
	 TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2234      	movs	r2, #52	@ 0x34
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00b f9b0 	bl	800c01a <memset>

	 /* USER CODE BEGIN TIM1_Init 1 */

	 /* USER CODE END TIM1_Init 1 */
	 htim1.Instance = TIM1;
 8000cba:	4b44      	ldr	r3, [pc, #272]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000cbc:	4a44      	ldr	r2, [pc, #272]	@ (8000dd0 <MX_TIM1_Init+0x148>)
 8000cbe:	601a      	str	r2, [r3, #0]
	 htim1.Init.Prescaler = 0;
 8000cc0:	4b42      	ldr	r3, [pc, #264]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
	 htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b41      	ldr	r3, [pc, #260]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
	 htim1.Init.Period = 255;
 8000ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000cce:	22ff      	movs	r2, #255	@ 0xff
 8000cd0:	60da      	str	r2, [r3, #12]
	 htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
	 htim1.Init.RepetitionCounter = 0;
 8000cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
	 htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b3b      	ldr	r3, [pc, #236]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ce4:	4839      	ldr	r0, [pc, #228]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000ce6:	f006 fd12 	bl	800770e <HAL_TIM_PWM_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0x6c>
	 {
		 Error_Handler();
 8000cf0:	f000 fa3e 	bl	8001170 <Error_Handler>
	 }
	 sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	657b      	str	r3, [r7, #84]	@ 0x54
	 sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	65bb      	str	r3, [r7, #88]	@ 0x58
	 sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
	 if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d04:	4619      	mov	r1, r3
 8000d06:	4831      	ldr	r0, [pc, #196]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000d08:	f008 fa0e 	bl	8009128 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x8e>
	 {
		 Error_Handler();
 8000d12:	f000 fa2d 	bl	8001170 <Error_Handler>
	 }
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	@ 0x60
 8000d18:	63bb      	str	r3, [r7, #56]	@ 0x38
	 sConfigOC.Pulse = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	643b      	str	r3, [r7, #64]	@ 0x40
	 sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d22:	2300      	movs	r3, #0
 8000d24:	647b      	str	r3, [r7, #68]	@ 0x44
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	64bb      	str	r3, [r7, #72]	@ 0x48
	 sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	 sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	653b      	str	r3, [r7, #80]	@ 0x50
	 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d36:	2200      	movs	r2, #0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4824      	ldr	r0, [pc, #144]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000d3c:	f007 fa8e 	bl	800825c <HAL_TIM_PWM_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0xc2>
	 {
		 Error_Handler();
 8000d46:	f000 fa13 	bl	8001170 <Error_Handler>
	 }
	 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d4e:	2204      	movs	r2, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	481e      	ldr	r0, [pc, #120]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000d54:	f007 fa82 	bl	800825c <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM1_Init+0xda>
	 {
		 Error_Handler();
 8000d5e:	f000 fa07 	bl	8001170 <Error_Handler>
	 }
	 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d66:	2208      	movs	r2, #8
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4818      	ldr	r0, [pc, #96]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000d6c:	f007 fa76 	bl	800825c <HAL_TIM_PWM_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM1_Init+0xf2>
	 {
		 Error_Handler();
 8000d76:	f000 f9fb 	bl	8001170 <Error_Handler>
	 }
	 sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
	 sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
	 sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
	 sBreakDeadTimeConfig.DeadTime = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
	 sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
	 sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d92:	61bb      	str	r3, [r7, #24]
	 sBreakDeadTimeConfig.BreakFilter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
	 sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
	 sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
	 sBreakDeadTimeConfig.Break2Filter = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	@ 0x34
	 if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000db0:	f008 fa56 	bl	8009260 <HAL_TIMEx_ConfigBreakDeadTime>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM1_Init+0x136>
	 {
		 Error_Handler();
 8000dba:	f000 f9d9 	bl	8001170 <Error_Handler>
	 }
	 /* USER CODE BEGIN TIM1_Init 2 */

	 /* USER CODE END TIM1_Init 2 */
	 HAL_TIM_MspPostInit(&htim1);
 8000dbe:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <MX_TIM1_Init+0x144>)
 8000dc0:	f000 fa9e 	bl	8001300 <HAL_TIM_MspPostInit>

 }
 8000dc4:	bf00      	nop
 8000dc6:	3760      	adds	r7, #96	@ 0x60
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	24000088 	.word	0x24000088
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
 static void MX_TIM4_Init(void)
 {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	@ 0x38
 8000dd8:	af00      	add	r7, sp, #0

	 /* USER CODE BEGIN TIM4_Init 0 */

	 /* USER CODE END TIM4_Init 0 */

	 TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
	 TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
	 TIM_OC_InitTypeDef sConfigOC = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	619a      	str	r2, [r3, #24]

	 htim4.Instance = TIM4;
 8000e06:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e08:	4a2c      	ldr	r2, [pc, #176]	@ (8000ebc <MX_TIM4_Init+0xe8>)
 8000e0a:	601a      	str	r2, [r3, #0]
	 htim4.Init.Prescaler = 0; // Prescaler = 0
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
	 htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
	 htim4.Init.Period = 60-1; // Period = 100 (10 MHz)
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e1a:	223b      	movs	r2, #59	@ 0x3b
 8000e1c:	60da      	str	r2, [r3, #12]
	 htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
	 htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e2a:	4823      	ldr	r0, [pc, #140]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e2c:	f006 fc18 	bl	8007660 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0x66>
	 {
		 Error_Handler();
 8000e36:	f000 f99b 	bl	8001170 <Error_Handler>
	 }
	 sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	 if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e44:	4619      	mov	r1, r3
 8000e46:	481c      	ldr	r0, [pc, #112]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e48:	f007 fb1c 	bl	8008484 <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM4_Init+0x82>
	 {
		 Error_Handler();
 8000e52:	f000 f98d 	bl	8001170 <Error_Handler>
	 }
	 if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e56:	4818      	ldr	r0, [pc, #96]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e58:	f006 fc59 	bl	800770e <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM4_Init+0x92>
	 {
		 Error_Handler();
 8000e62:	f000 f985 	bl	8001170 <Error_Handler>
	 }
	 sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
	 sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
	 if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4810      	ldr	r0, [pc, #64]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e76:	f008 f957 	bl	8009128 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM4_Init+0xb0>
	 {
		 Error_Handler();
 8000e80:	f000 f976 	bl	8001170 <Error_Handler>
	 }
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e84:	2360      	movs	r3, #96	@ 0x60
 8000e86:	603b      	str	r3, [r7, #0]
	 sConfigOC.Pulse = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
	 if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	2208      	movs	r2, #8
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4807      	ldr	r0, [pc, #28]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000e9c:	f007 f9de 	bl	800825c <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0xd6>
	 {
		 Error_Handler();
 8000ea6:	f000 f963 	bl	8001170 <Error_Handler>
	 }
	 HAL_TIM_MspPostInit(&htim4);
 8000eaa:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <MX_TIM4_Init+0xe4>)
 8000eac:	f000 fa28 	bl	8001300 <HAL_TIM_MspPostInit>

 }
 8000eb0:	bf00      	nop
 8000eb2:	3738      	adds	r7, #56	@ 0x38
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	240000d4 	.word	0x240000d4
 8000ebc:	40000800 	.word	0x40000800

08000ec0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
 static void MX_UART4_Init(void)
 {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	 /* USER CODE END UART4_Init 0 */

	 /* USER CODE BEGIN UART4_Init 1 */

	 /* USER CODE END UART4_Init 1 */
	 huart4.Instance = UART4;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000ec6:	4a23      	ldr	r2, [pc, #140]	@ (8000f54 <MX_UART4_Init+0x94>)
 8000ec8:	601a      	str	r2, [r3, #0]
	 huart4.Init.BaudRate = 9600;
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000ecc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ed0:	605a      	str	r2, [r3, #4]
	 huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
	 huart4.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
	 huart4.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
	 huart4.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
	 huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
	 huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
	 huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
	 huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
	 huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	@ 0x28
	 if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f08:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000f0a:	f008 fa53 	bl	80093b4 <HAL_UART_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_UART4_Init+0x58>
	 {
		 Error_Handler();
 8000f14:	f000 f92c 	bl	8001170 <Error_Handler>
	 }
	 if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000f1c:	f00a fdd5 	bl	800baca <HAL_UARTEx_SetTxFifoThreshold>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_UART4_Init+0x6a>
	 {
		 Error_Handler();
 8000f26:	f000 f923 	bl	8001170 <Error_Handler>
	 }
	 if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000f2e:	f00a fe0a 	bl	800bb46 <HAL_UARTEx_SetRxFifoThreshold>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_UART4_Init+0x7c>
	 {
		 Error_Handler();
 8000f38:	f000 f91a 	bl	8001170 <Error_Handler>
	 }
	 if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <MX_UART4_Init+0x90>)
 8000f3e:	f00a fd8b 	bl	800ba58 <HAL_UARTEx_DisableFifoMode>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_UART4_Init+0x8c>
	 {
		 Error_Handler();
 8000f48:	f000 f912 	bl	8001170 <Error_Handler>
	 }
	 /* USER CODE BEGIN UART4_Init 2 */

	 /* USER CODE END UART4_Init 2 */

 }
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	24000198 	.word	0x24000198
 8000f54:	40004c00 	.word	0x40004c00

08000f58 <MX_DMA_Init>:

 /**
  * Enable DMA controller clock
  */
 static void MX_DMA_Init(void)
 {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

	 /* DMA controller clock enable */
	 __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <MX_DMA_Init+0x3c>)
 8000f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f64:	4a0b      	ldr	r2, [pc, #44]	@ (8000f94 <MX_DMA_Init+0x3c>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_DMA_Init+0x3c>)
 8000f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

	 /* DMA interrupt init */
	 /* DMA1_Stream0_IRQn interrupt configuration */
	 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	200b      	movs	r0, #11
 8000f82:	f000 fddc 	bl	8001b3e <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f86:	200b      	movs	r0, #11
 8000f88:	f000 fdf3 	bl	8001b72 <HAL_NVIC_EnableIRQ>

 }
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	58024400 	.word	0x58024400

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 static void MX_GPIO_Init(void)
 {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	@ 0x30
 8000f9c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
	 /* USER CODE BEGIN MX_GPIO_Init_1 */
	 /* USER CODE END MX_GPIO_Init_1 */

	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b6a      	ldr	r3, [pc, #424]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb4:	4a68      	ldr	r2, [pc, #416]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fbe:	4b66      	ldr	r3, [pc, #408]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	69bb      	ldr	r3, [r7, #24]
	 __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fcc:	4b62      	ldr	r3, [pc, #392]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd2:	4a61      	ldr	r2, [pc, #388]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b5b      	ldr	r3, [pc, #364]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff0:	4a59      	ldr	r2, [pc, #356]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ffa:	4b57      	ldr	r3, [pc, #348]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOE_CLK_ENABLE();
 8001008:	4b53      	ldr	r3, [pc, #332]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100e:	4a52      	ldr	r2, [pc, #328]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001018:	4b4f      	ldr	r3, [pc, #316]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b4c      	ldr	r3, [pc, #304]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102c:	4a4a      	ldr	r2, [pc, #296]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001036:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOG_CLK_ENABLE();
 8001044:	4b44      	ldr	r3, [pc, #272]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104a:	4a43      	ldr	r2, [pc, #268]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 800104c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001054:	4b40      	ldr	r3, [pc, #256]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b3d      	ldr	r3, [pc, #244]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001068:	4a3b      	ldr	r2, [pc, #236]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001072:	4b39      	ldr	r3, [pc, #228]	@ (8001158 <MX_GPIO_Init+0x1c0>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]

	 /*Configure GPIO pin Output Level */
	 HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001086:	4835      	ldr	r0, [pc, #212]	@ (800115c <MX_GPIO_Init+0x1c4>)
 8001088:	f003 fd6e 	bl	8004b68 <HAL_GPIO_WritePin>

	 /*Configure GPIO pin Output Level */
	 HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001092:	4833      	ldr	r0, [pc, #204]	@ (8001160 <MX_GPIO_Init+0x1c8>)
 8001094:	f003 fd68 	bl	8004b68 <HAL_GPIO_WritePin>

	 /*Configure GPIO pin Output Level */
	 HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	4831      	ldr	r0, [pc, #196]	@ (8001164 <MX_GPIO_Init+0x1cc>)
 800109e:	f003 fd63 	bl	8004b68 <HAL_GPIO_WritePin>

	 /*Configure GPIO pin : B1_Pin */
	 GPIO_InitStruct.Pin = B1_Pin;
 80010a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a6:	61fb      	str	r3, [r7, #28]
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
	 HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	482c      	ldr	r0, [pc, #176]	@ (8001168 <MX_GPIO_Init+0x1d0>)
 80010b8:	f003 fbae 	bl	8004818 <HAL_GPIO_Init>

	 /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
	 GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80010bc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80010c0:	61fb      	str	r3, [r7, #28]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4821      	ldr	r0, [pc, #132]	@ (800115c <MX_GPIO_Init+0x1c4>)
 80010d6:	f003 fb9f 	bl	8004818 <HAL_GPIO_Init>

	 /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	 GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80010da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010de:	61fb      	str	r3, [r7, #28]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	623b      	str	r3, [r7, #32]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	 HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	481b      	ldr	r0, [pc, #108]	@ (8001160 <MX_GPIO_Init+0x1c8>)
 80010f4:	f003 fb90 	bl	8004818 <HAL_GPIO_Init>

	 /*Configure GPIO pin : USB_FS_OVCR_Pin */
	 GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	61fb      	str	r3, [r7, #28]
	 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001100:	623b      	str	r3, [r7, #32]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
	 HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4817      	ldr	r0, [pc, #92]	@ (800116c <MX_GPIO_Init+0x1d4>)
 800110e:	f003 fb83 	bl	8004818 <HAL_GPIO_Init>

	 /*Configure GPIO pin : PG12 */
	 GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001112:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001116:	61fb      	str	r3, [r7, #28]
	 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	623b      	str	r3, [r7, #32]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
	 GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8001124:	2304      	movs	r3, #4
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	480f      	ldr	r0, [pc, #60]	@ (800116c <MX_GPIO_Init+0x1d4>)
 8001130:	f003 fb72 	bl	8004818 <HAL_GPIO_Init>

	 /*Configure GPIO pin : LED_YELLOW_Pin */
	 GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
	 HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <MX_GPIO_Init+0x1cc>)
 800114c:	f003 fb64 	bl	8004818 <HAL_GPIO_Init>

	 /* USER CODE BEGIN MX_GPIO_Init_2 */
	 /* USER CODE END MX_GPIO_Init_2 */
 }
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	@ 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	58024400 	.word	0x58024400
 800115c:	58020400 	.word	0x58020400
 8001160:	58020c00 	.word	0x58020c00
 8001164:	58021000 	.word	0x58021000
 8001168:	58020800 	.word	0x58020800
 800116c:	58021800 	.word	0x58021800

08001170 <Error_Handler>:
 /**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
 void Error_Handler(void)
 {
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
	 /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */
	 __disable_irq();
	 while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <Error_Handler+0x8>

0800117c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_MspInit+0x30>)
 8001184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001188:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <HAL_MspInit+0x30>)
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_MspInit+0x30>)
 8001194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	58024400 	.word	0x58024400

080011b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <HAL_TIM_PWM_MspInit+0x3c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10e      	bne.n	80011e0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_TIM_PWM_MspInit+0x40>)
 80011c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011c8:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <HAL_TIM_PWM_MspInit+0x40>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <HAL_TIM_PWM_MspInit+0x40>)
 80011d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	40010000 	.word	0x40010000
 80011f0:	58024400 	.word	0x58024400

080011f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a36      	ldr	r2, [pc, #216]	@ (80012ec <HAL_TIM_Base_MspInit+0xf8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d165      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001216:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <HAL_TIM_Base_MspInit+0xfc>)
 8001218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800121c:	4a34      	ldr	r2, [pc, #208]	@ (80012f0 <HAL_TIM_Base_MspInit+0xfc>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001226:	4b32      	ldr	r3, [pc, #200]	@ (80012f0 <HAL_TIM_Base_MspInit+0xfc>)
 8001228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <HAL_TIM_Base_MspInit+0xfc>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	4a2d      	ldr	r2, [pc, #180]	@ (80012f0 <HAL_TIM_Base_MspInit+0xfc>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001244:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <HAL_TIM_Base_MspInit+0xfc>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001264:	2302      	movs	r3, #2
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4821      	ldr	r0, [pc, #132]	@ (80012f4 <HAL_TIM_Base_MspInit+0x100>)
 8001270:	f003 fad2 	bl	8004818 <HAL_GPIO_Init>

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 8001276:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <HAL_TIM_Base_MspInit+0x108>)
 8001278:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800127a:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 800127c:	221f      	movs	r2, #31
 800127e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 8001282:	2240      	movs	r2, #64	@ 0x40
 8001284:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 800128e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001292:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 8001296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800129a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 800129e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80012b6:	4810      	ldr	r0, [pc, #64]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 80012b8:	f000 fc76 	bl	8001ba8 <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 80012c2:	f7ff ff55 	bl	8001170 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 80012ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <HAL_TIM_Base_MspInit+0x104>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	201e      	movs	r0, #30
 80012d8:	f000 fc31 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012dc:	201e      	movs	r0, #30
 80012de:	f000 fc48 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40000800 	.word	0x40000800
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020c00 	.word	0x58020c00
 80012f8:	24000120 	.word	0x24000120
 80012fc:	40020010 	.word	0x40020010

08001300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a26      	ldr	r2, [pc, #152]	@ (80013b8 <HAL_TIM_MspPostInit+0xb8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d120      	bne.n	8001364 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <HAL_TIM_MspPostInit+0xbc>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	4a24      	ldr	r2, [pc, #144]	@ (80013bc <HAL_TIM_MspPostInit+0xbc>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001332:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <HAL_TIM_MspPostInit+0xbc>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001340:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001352:	2301      	movs	r3, #1
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4818      	ldr	r0, [pc, #96]	@ (80013c0 <HAL_TIM_MspPostInit+0xc0>)
 800135e:	f003 fa5b 	bl	8004818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001362:	e024      	b.n	80013ae <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a16      	ldr	r2, [pc, #88]	@ (80013c4 <HAL_TIM_MspPostInit+0xc4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d11f      	bne.n	80013ae <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <HAL_TIM_MspPostInit+0xbc>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001374:	4a11      	ldr	r2, [pc, #68]	@ (80013bc <HAL_TIM_MspPostInit+0xbc>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_TIM_MspPostInit+0xbc>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800138c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800139e:	2302      	movs	r3, #2
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <HAL_TIM_MspPostInit+0xc8>)
 80013aa:	f003 fa35 	bl	8004818 <HAL_GPIO_Init>
}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	@ 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010000 	.word	0x40010000
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58021000 	.word	0x58021000
 80013c4:	40000800 	.word	0x40000800
 80013c8:	58020c00 	.word	0x58020c00

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0b8      	sub	sp, #224	@ 0xe0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	22b8      	movs	r2, #184	@ 0xb8
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f00a fe14 	bl	800c01a <memset>
  if(huart->Instance==UART4)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a2b      	ldr	r2, [pc, #172]	@ (80014a4 <HAL_UART_MspInit+0xd8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d14e      	bne.n	800149a <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013fc:	f04f 0202 	mov.w	r2, #2
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fb62 	bl	8005adc <HAL_RCCEx_PeriphCLKConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800141e:	f7ff fea7 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <HAL_UART_MspInit+0xdc>)
 8001424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001428:	4a1f      	ldr	r2, [pc, #124]	@ (80014a8 <HAL_UART_MspInit+0xdc>)
 800142a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800142e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_UART_MspInit+0xdc>)
 8001434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_UART_MspInit+0xdc>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	4a18      	ldr	r2, [pc, #96]	@ (80014a8 <HAL_UART_MspInit+0xdc>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_UART_MspInit+0xdc>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800145e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001462:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001478:	2308      	movs	r3, #8
 800147a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001482:	4619      	mov	r1, r3
 8001484:	4809      	ldr	r0, [pc, #36]	@ (80014ac <HAL_UART_MspInit+0xe0>)
 8001486:	f003 f9c7 	bl	8004818 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2034      	movs	r0, #52	@ 0x34
 8001490:	f000 fb55 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001494:	2034      	movs	r0, #52	@ 0x34
 8001496:	f000 fb6c 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	37e0      	adds	r7, #224	@ 0xe0
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40004c00 	.word	0x40004c00
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020400 	.word	0x58020400

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <NMI_Handler+0x4>

080014b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <MemManage_Handler+0x4>

080014c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f000 f9fb 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <DMA1_Stream0_IRQHandler+0x10>)
 8001516:	f001 fe6d 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	24000120 	.word	0x24000120

08001524 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <TIM4_IRQHandler+0x10>)
 800152a:	f006 fd8f 	bl	800804c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	240000d4 	.word	0x240000d4

08001538 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <UART4_IRQHandler+0x10>)
 800153e:	f007 ff89 	bl	8009454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	24000198 	.word	0x24000198

0800154c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_kill>:

int _kill(int pid, int sig)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001566:	f00a fe03 	bl	800c170 <__errno>
 800156a:	4603      	mov	r3, r0
 800156c:	2216      	movs	r2, #22
 800156e:	601a      	str	r2, [r3, #0]
  return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_exit>:

void _exit (int status)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ffe7 	bl	800155c <_kill>
  while (1) {}    /* Make sure we hang here */
 800158e:	bf00      	nop
 8001590:	e7fd      	b.n	800158e <_exit+0x12>

08001592 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e00a      	b.n	80015ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015a4:	f3af 8000 	nop.w
 80015a8:	4601      	mov	r1, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	60ba      	str	r2, [r7, #8]
 80015b0:	b2ca      	uxtb	r2, r1
 80015b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dbf0      	blt.n	80015a4 <_read+0x12>
  }

  return len;
 80015c2:	687b      	ldr	r3, [r7, #4]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e009      	b.n	80015f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	60ba      	str	r2, [r7, #8]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dbf1      	blt.n	80015de <_write+0x12>
  }
  return len;
 80015fa:	687b      	ldr	r3, [r7, #4]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_close>:

int _close(int file)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162c:	605a      	str	r2, [r3, #4]
  return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_isatty>:

int _isatty(int file)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f00a fd68 	bl	800c170 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	24050000 	.word	0x24050000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	24000494 	.word	0x24000494
 80016d4:	240005e8 	.word	0x240005e8

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016dc:	4b32      	ldr	r3, [pc, #200]	@ (80017a8 <SystemInit+0xd0>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e2:	4a31      	ldr	r2, [pc, #196]	@ (80017a8 <SystemInit+0xd0>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016ec:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <SystemInit+0xd4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d807      	bhi.n	8001708 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f8:	4b2c      	ldr	r3, [pc, #176]	@ (80017ac <SystemInit+0xd4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 030f 	bic.w	r3, r3, #15
 8001700:	4a2a      	ldr	r2, [pc, #168]	@ (80017ac <SystemInit+0xd4>)
 8001702:	f043 0307 	orr.w	r3, r3, #7
 8001706:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <SystemInit+0xd8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a28      	ldr	r2, [pc, #160]	@ (80017b0 <SystemInit+0xd8>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001714:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <SystemInit+0xd8>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800171a:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <SystemInit+0xd8>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4924      	ldr	r1, [pc, #144]	@ (80017b0 <SystemInit+0xd8>)
 8001720:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <SystemInit+0xdc>)
 8001722:	4013      	ands	r3, r2
 8001724:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <SystemInit+0xd4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001732:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <SystemInit+0xd4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 030f 	bic.w	r3, r3, #15
 800173a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <SystemInit+0xd4>)
 800173c:	f043 0307 	orr.w	r3, r3, #7
 8001740:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001742:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <SystemInit+0xd8>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001748:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <SystemInit+0xd8>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800174e:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <SystemInit+0xd8>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <SystemInit+0xd8>)
 8001756:	4a18      	ldr	r2, [pc, #96]	@ (80017b8 <SystemInit+0xe0>)
 8001758:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800175a:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <SystemInit+0xd8>)
 800175c:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <SystemInit+0xe4>)
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <SystemInit+0xd8>)
 8001762:	4a17      	ldr	r2, [pc, #92]	@ (80017c0 <SystemInit+0xe8>)
 8001764:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001766:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <SystemInit+0xd8>)
 8001768:	2200      	movs	r2, #0
 800176a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800176c:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <SystemInit+0xd8>)
 800176e:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <SystemInit+0xe8>)
 8001770:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <SystemInit+0xd8>)
 8001774:	2200      	movs	r2, #0
 8001776:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001778:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <SystemInit+0xd8>)
 800177a:	4a11      	ldr	r2, [pc, #68]	@ (80017c0 <SystemInit+0xe8>)
 800177c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <SystemInit+0xd8>)
 8001780:	2200      	movs	r2, #0
 8001782:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <SystemInit+0xd8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a09      	ldr	r2, [pc, #36]	@ (80017b0 <SystemInit+0xd8>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001790:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <SystemInit+0xd8>)
 8001792:	2200      	movs	r2, #0
 8001794:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <SystemInit+0xec>)
 8001798:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800179c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00
 80017ac:	52002000 	.word	0x52002000
 80017b0:	58024400 	.word	0x58024400
 80017b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017b8:	02020200 	.word	0x02020200
 80017bc:	01ff0000 	.word	0x01ff0000
 80017c0:	01010280 	.word	0x01010280
 80017c4:	52004000 	.word	0x52004000

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001800 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017cc:	f7ff ff84 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d0:	480c      	ldr	r0, [pc, #48]	@ (8001804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017d2:	490d      	ldr	r1, [pc, #52]	@ (8001808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f6:	f00a fcc1 	bl	800c17c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff f99f 	bl	8000b3c <main>
  bx  lr
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001800:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001804:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001808:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800180c:	0800de50 	.word	0x0800de50
  ldr r2, =_sbss
 8001810:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001814:	240005e8 	.word	0x240005e8

08001818 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC3_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001822:	2003      	movs	r0, #3
 8001824:	f000 f980 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001828:	f003 ff82 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 800182c:	4602      	mov	r2, r0
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <HAL_Init+0x68>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	4913      	ldr	r1, [pc, #76]	@ (8001888 <HAL_Init+0x6c>)
 800183a:	5ccb      	ldrb	r3, [r1, r3]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
 8001844:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <HAL_Init+0x68>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	4a0e      	ldr	r2, [pc, #56]	@ (8001888 <HAL_Init+0x6c>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <HAL_Init+0x70>)
 800185e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001860:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <HAL_Init+0x74>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001866:	2000      	movs	r0, #0
 8001868:	f000 f814 	bl	8001894 <HAL_InitTick>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e002      	b.n	800187c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001876:	f7ff fc81 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	58024400 	.word	0x58024400
 8001888:	0800da44 	.word	0x0800da44
 800188c:	24000004 	.word	0x24000004
 8001890:	24000000 	.word	0x24000000

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800189c:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_InitTick+0x60>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e021      	b.n	80018ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_InitTick+0x64>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HAL_InitTick+0x60>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f965 	bl	8001b8e <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 f92f 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <HAL_InitTick+0x68>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2400000c 	.word	0x2400000c
 80018f8:	24000000 	.word	0x24000000
 80018fc:	24000008 	.word	0x24000008

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2400000c 	.word	0x2400000c
 8001924:	24000498 	.word	0x24000498

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	24000498 	.word	0x24000498

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2400000c 	.word	0x2400000c

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	05fa0000 	.word	0x05fa0000

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff40 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff90 	bl	8001a7c <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5f 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff33 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa4 	bl	8001ae4 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff feba 	bl	8001928 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e312      	b.n	80021e6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a66      	ldr	r2, [pc, #408]	@ (8001d60 <HAL_DMA_Init+0x1b8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d04a      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a65      	ldr	r2, [pc, #404]	@ (8001d64 <HAL_DMA_Init+0x1bc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d045      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a63      	ldr	r2, [pc, #396]	@ (8001d68 <HAL_DMA_Init+0x1c0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d040      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a62      	ldr	r2, [pc, #392]	@ (8001d6c <HAL_DMA_Init+0x1c4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d03b      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a60      	ldr	r2, [pc, #384]	@ (8001d70 <HAL_DMA_Init+0x1c8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d036      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5f      	ldr	r2, [pc, #380]	@ (8001d74 <HAL_DMA_Init+0x1cc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d031      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5d      	ldr	r2, [pc, #372]	@ (8001d78 <HAL_DMA_Init+0x1d0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02c      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001d7c <HAL_DMA_Init+0x1d4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d027      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5a      	ldr	r2, [pc, #360]	@ (8001d80 <HAL_DMA_Init+0x1d8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d022      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a59      	ldr	r2, [pc, #356]	@ (8001d84 <HAL_DMA_Init+0x1dc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d01d      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a57      	ldr	r2, [pc, #348]	@ (8001d88 <HAL_DMA_Init+0x1e0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d018      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a56      	ldr	r2, [pc, #344]	@ (8001d8c <HAL_DMA_Init+0x1e4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a54      	ldr	r2, [pc, #336]	@ (8001d90 <HAL_DMA_Init+0x1e8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00e      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a53      	ldr	r2, [pc, #332]	@ (8001d94 <HAL_DMA_Init+0x1ec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a51      	ldr	r2, [pc, #324]	@ (8001d98 <HAL_DMA_Init+0x1f0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a50      	ldr	r2, [pc, #320]	@ (8001d9c <HAL_DMA_Init+0x1f4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_DMA_Init+0xbc>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_DMA_Init+0xbe>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 813c 	beq.w	8001ee4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a37      	ldr	r2, [pc, #220]	@ (8001d60 <HAL_DMA_Init+0x1b8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d04a      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a36      	ldr	r2, [pc, #216]	@ (8001d64 <HAL_DMA_Init+0x1bc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d045      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a34      	ldr	r2, [pc, #208]	@ (8001d68 <HAL_DMA_Init+0x1c0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d040      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a33      	ldr	r2, [pc, #204]	@ (8001d6c <HAL_DMA_Init+0x1c4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d03b      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a31      	ldr	r2, [pc, #196]	@ (8001d70 <HAL_DMA_Init+0x1c8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d036      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a30      	ldr	r2, [pc, #192]	@ (8001d74 <HAL_DMA_Init+0x1cc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d031      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001d78 <HAL_DMA_Init+0x1d0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d02c      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d7c <HAL_DMA_Init+0x1d4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d027      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d80 <HAL_DMA_Init+0x1d8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d022      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a2a      	ldr	r2, [pc, #168]	@ (8001d84 <HAL_DMA_Init+0x1dc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d01d      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a28      	ldr	r2, [pc, #160]	@ (8001d88 <HAL_DMA_Init+0x1e0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d018      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <HAL_DMA_Init+0x1e4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	@ (8001d90 <HAL_DMA_Init+0x1e8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a24      	ldr	r2, [pc, #144]	@ (8001d94 <HAL_DMA_Init+0x1ec>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	@ (8001d98 <HAL_DMA_Init+0x1f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a21      	ldr	r2, [pc, #132]	@ (8001d9c <HAL_DMA_Init+0x1f4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d108      	bne.n	8001d2e <HAL_DMA_Init+0x186>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e007      	b.n	8001d3e <HAL_DMA_Init+0x196>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d3e:	e02f      	b.n	8001da0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d40:	f7ff fdf2 	bl	8001928 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d928      	bls.n	8001da0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2203      	movs	r2, #3
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e242      	b.n	80021e6 <HAL_DMA_Init+0x63e>
 8001d60:	40020010 	.word	0x40020010
 8001d64:	40020028 	.word	0x40020028
 8001d68:	40020040 	.word	0x40020040
 8001d6c:	40020058 	.word	0x40020058
 8001d70:	40020070 	.word	0x40020070
 8001d74:	40020088 	.word	0x40020088
 8001d78:	400200a0 	.word	0x400200a0
 8001d7c:	400200b8 	.word	0x400200b8
 8001d80:	40020410 	.word	0x40020410
 8001d84:	40020428 	.word	0x40020428
 8001d88:	40020440 	.word	0x40020440
 8001d8c:	40020458 	.word	0x40020458
 8001d90:	40020470 	.word	0x40020470
 8001d94:	40020488 	.word	0x40020488
 8001d98:	400204a0 	.word	0x400204a0
 8001d9c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1c8      	bne.n	8001d40 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4b83      	ldr	r3, [pc, #524]	@ (8001fc8 <HAL_DMA_Init+0x420>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001dc6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b28      	cmp	r3, #40	@ 0x28
 8001e0a:	d903      	bls.n	8001e14 <HAL_DMA_Init+0x26c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e12:	d91f      	bls.n	8001e54 <HAL_DMA_Init+0x2ac>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e1a:	d903      	bls.n	8001e24 <HAL_DMA_Init+0x27c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b42      	cmp	r3, #66	@ 0x42
 8001e22:	d917      	bls.n	8001e54 <HAL_DMA_Init+0x2ac>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b46      	cmp	r3, #70	@ 0x46
 8001e2a:	d903      	bls.n	8001e34 <HAL_DMA_Init+0x28c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b48      	cmp	r3, #72	@ 0x48
 8001e32:	d90f      	bls.n	8001e54 <HAL_DMA_Init+0x2ac>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b4e      	cmp	r3, #78	@ 0x4e
 8001e3a:	d903      	bls.n	8001e44 <HAL_DMA_Init+0x29c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b52      	cmp	r3, #82	@ 0x52
 8001e42:	d907      	bls.n	8001e54 <HAL_DMA_Init+0x2ac>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b73      	cmp	r3, #115	@ 0x73
 8001e4a:	d905      	bls.n	8001e58 <HAL_DMA_Init+0x2b0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b77      	cmp	r3, #119	@ 0x77
 8001e52:	d801      	bhi.n	8001e58 <HAL_DMA_Init+0x2b0>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_DMA_Init+0x2b2>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e64:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f023 0307 	bic.w	r3, r3, #7
 8001e7c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d117      	bne.n	8001ec0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f002 fb2e 	bl	8004504 <DMA_CheckFifoParam>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2240      	movs	r2, #64	@ 0x40
 8001eb2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e192      	b.n	80021e6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f002 fa69 	bl	80043a0 <DMA_CalcBaseAndBitshift>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	223f      	movs	r2, #63	@ 0x3f
 8001edc:	409a      	lsls	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	e0c8      	b.n	8002076 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a38      	ldr	r2, [pc, #224]	@ (8001fcc <HAL_DMA_Init+0x424>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d022      	beq.n	8001f34 <HAL_DMA_Init+0x38c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a37      	ldr	r2, [pc, #220]	@ (8001fd0 <HAL_DMA_Init+0x428>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d01d      	beq.n	8001f34 <HAL_DMA_Init+0x38c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a35      	ldr	r2, [pc, #212]	@ (8001fd4 <HAL_DMA_Init+0x42c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d018      	beq.n	8001f34 <HAL_DMA_Init+0x38c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a34      	ldr	r2, [pc, #208]	@ (8001fd8 <HAL_DMA_Init+0x430>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <HAL_DMA_Init+0x38c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <HAL_DMA_Init+0x434>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00e      	beq.n	8001f34 <HAL_DMA_Init+0x38c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a31      	ldr	r2, [pc, #196]	@ (8001fe0 <HAL_DMA_Init+0x438>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d009      	beq.n	8001f34 <HAL_DMA_Init+0x38c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe4 <HAL_DMA_Init+0x43c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d004      	beq.n	8001f34 <HAL_DMA_Init+0x38c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe8 <HAL_DMA_Init+0x440>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA_Init+0x390>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_DMA_Init+0x392>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8092 	beq.w	8002064 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a21      	ldr	r2, [pc, #132]	@ (8001fcc <HAL_DMA_Init+0x424>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d021      	beq.n	8001f8e <HAL_DMA_Init+0x3e6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a20      	ldr	r2, [pc, #128]	@ (8001fd0 <HAL_DMA_Init+0x428>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d01c      	beq.n	8001f8e <HAL_DMA_Init+0x3e6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <HAL_DMA_Init+0x42c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d017      	beq.n	8001f8e <HAL_DMA_Init+0x3e6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd8 <HAL_DMA_Init+0x430>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d012      	beq.n	8001f8e <HAL_DMA_Init+0x3e6>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fdc <HAL_DMA_Init+0x434>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00d      	beq.n	8001f8e <HAL_DMA_Init+0x3e6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe0 <HAL_DMA_Init+0x438>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Init+0x3e6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <HAL_DMA_Init+0x43c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d003      	beq.n	8001f8e <HAL_DMA_Init+0x3e6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <HAL_DMA_Init+0x440>)
 8001f8c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <HAL_DMA_Init+0x444>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b40      	cmp	r3, #64	@ 0x40
 8001fb4:	d01c      	beq.n	8001ff0 <HAL_DMA_Init+0x448>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b80      	cmp	r3, #128	@ 0x80
 8001fbc:	d102      	bne.n	8001fc4 <HAL_DMA_Init+0x41c>
 8001fbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fc2:	e016      	b.n	8001ff2 <HAL_DMA_Init+0x44a>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e014      	b.n	8001ff2 <HAL_DMA_Init+0x44a>
 8001fc8:	fe10803f 	.word	0xfe10803f
 8001fcc:	58025408 	.word	0x58025408
 8001fd0:	5802541c 	.word	0x5802541c
 8001fd4:	58025430 	.word	0x58025430
 8001fd8:	58025444 	.word	0x58025444
 8001fdc:	58025458 	.word	0x58025458
 8001fe0:	5802546c 	.word	0x5802546c
 8001fe4:	58025480 	.word	0x58025480
 8001fe8:	58025494 	.word	0x58025494
 8001fec:	fffe000f 	.word	0xfffe000f
 8001ff0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68d2      	ldr	r2, [r2, #12]
 8001ff6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002020:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b6e      	ldr	r3, [pc, #440]	@ (80021f0 <HAL_DMA_Init+0x648>)
 8002038:	4413      	add	r3, r2
 800203a:	4a6e      	ldr	r2, [pc, #440]	@ (80021f4 <HAL_DMA_Init+0x64c>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	009a      	lsls	r2, r3, #2
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f002 f9a9 	bl	80043a0 <DMA_CalcBaseAndBitshift>
 800204e:	4603      	mov	r3, r0
 8002050:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e008      	b.n	8002076 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2240      	movs	r2, #64	@ 0x40
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0b7      	b.n	80021e6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5f      	ldr	r2, [pc, #380]	@ (80021f8 <HAL_DMA_Init+0x650>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d072      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5d      	ldr	r2, [pc, #372]	@ (80021fc <HAL_DMA_Init+0x654>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d06d      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5c      	ldr	r2, [pc, #368]	@ (8002200 <HAL_DMA_Init+0x658>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d068      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5a      	ldr	r2, [pc, #360]	@ (8002204 <HAL_DMA_Init+0x65c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d063      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a59      	ldr	r2, [pc, #356]	@ (8002208 <HAL_DMA_Init+0x660>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d05e      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_DMA_Init+0x664>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d059      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a56      	ldr	r2, [pc, #344]	@ (8002210 <HAL_DMA_Init+0x668>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d054      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a54      	ldr	r2, [pc, #336]	@ (8002214 <HAL_DMA_Init+0x66c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d04f      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a53      	ldr	r2, [pc, #332]	@ (8002218 <HAL_DMA_Init+0x670>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04a      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a51      	ldr	r2, [pc, #324]	@ (800221c <HAL_DMA_Init+0x674>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d045      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a50      	ldr	r2, [pc, #320]	@ (8002220 <HAL_DMA_Init+0x678>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d040      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002224 <HAL_DMA_Init+0x67c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d03b      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002228 <HAL_DMA_Init+0x680>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d036      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	@ (800222c <HAL_DMA_Init+0x684>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d031      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a4a      	ldr	r2, [pc, #296]	@ (8002230 <HAL_DMA_Init+0x688>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d02c      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a48      	ldr	r2, [pc, #288]	@ (8002234 <HAL_DMA_Init+0x68c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d027      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a47      	ldr	r2, [pc, #284]	@ (8002238 <HAL_DMA_Init+0x690>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d022      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a45      	ldr	r2, [pc, #276]	@ (800223c <HAL_DMA_Init+0x694>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01d      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a44      	ldr	r2, [pc, #272]	@ (8002240 <HAL_DMA_Init+0x698>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d018      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a42      	ldr	r2, [pc, #264]	@ (8002244 <HAL_DMA_Init+0x69c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a41      	ldr	r2, [pc, #260]	@ (8002248 <HAL_DMA_Init+0x6a0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a3f      	ldr	r2, [pc, #252]	@ (800224c <HAL_DMA_Init+0x6a4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3e      	ldr	r2, [pc, #248]	@ (8002250 <HAL_DMA_Init+0x6a8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_DMA_Init+0x5be>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3c      	ldr	r2, [pc, #240]	@ (8002254 <HAL_DMA_Init+0x6ac>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_DMA_Init+0x5c2>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_DMA_Init+0x5c4>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d032      	beq.n	80021d6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f002 fa43 	bl	80045fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b80      	cmp	r3, #128	@ 0x80
 800217c:	d102      	bne.n	8002184 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002198:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_DMA_Init+0x61c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d80c      	bhi.n	80021c4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f002 fac0 	bl	8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	e008      	b.n	80021d6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	a7fdabf8 	.word	0xa7fdabf8
 80021f4:	cccccccd 	.word	0xcccccccd
 80021f8:	40020010 	.word	0x40020010
 80021fc:	40020028 	.word	0x40020028
 8002200:	40020040 	.word	0x40020040
 8002204:	40020058 	.word	0x40020058
 8002208:	40020070 	.word	0x40020070
 800220c:	40020088 	.word	0x40020088
 8002210:	400200a0 	.word	0x400200a0
 8002214:	400200b8 	.word	0x400200b8
 8002218:	40020410 	.word	0x40020410
 800221c:	40020428 	.word	0x40020428
 8002220:	40020440 	.word	0x40020440
 8002224:	40020458 	.word	0x40020458
 8002228:	40020470 	.word	0x40020470
 800222c:	40020488 	.word	0x40020488
 8002230:	400204a0 	.word	0x400204a0
 8002234:	400204b8 	.word	0x400204b8
 8002238:	58025408 	.word	0x58025408
 800223c:	5802541c 	.word	0x5802541c
 8002240:	58025430 	.word	0x58025430
 8002244:	58025444 	.word	0x58025444
 8002248:	58025458 	.word	0x58025458
 800224c:	5802546c 	.word	0x5802546c
 8002250:	58025480 	.word	0x58025480
 8002254:	58025494 	.word	0x58025494

08002258 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e226      	b.n	80026c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_DMA_Start_IT+0x2a>
 800227e:	2302      	movs	r3, #2
 8002280:	e21f      	b.n	80026c2 <HAL_DMA_Start_IT+0x46a>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	f040 820a 	bne.w	80026ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a68      	ldr	r2, [pc, #416]	@ (800244c <HAL_DMA_Start_IT+0x1f4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d04a      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a66      	ldr	r2, [pc, #408]	@ (8002450 <HAL_DMA_Start_IT+0x1f8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d045      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a65      	ldr	r2, [pc, #404]	@ (8002454 <HAL_DMA_Start_IT+0x1fc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d040      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a63      	ldr	r2, [pc, #396]	@ (8002458 <HAL_DMA_Start_IT+0x200>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d03b      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a62      	ldr	r2, [pc, #392]	@ (800245c <HAL_DMA_Start_IT+0x204>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d036      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a60      	ldr	r2, [pc, #384]	@ (8002460 <HAL_DMA_Start_IT+0x208>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d031      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5f      	ldr	r2, [pc, #380]	@ (8002464 <HAL_DMA_Start_IT+0x20c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d02c      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002468 <HAL_DMA_Start_IT+0x210>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d027      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5c      	ldr	r2, [pc, #368]	@ (800246c <HAL_DMA_Start_IT+0x214>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d022      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5a      	ldr	r2, [pc, #360]	@ (8002470 <HAL_DMA_Start_IT+0x218>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01d      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a59      	ldr	r2, [pc, #356]	@ (8002474 <HAL_DMA_Start_IT+0x21c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d018      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a57      	ldr	r2, [pc, #348]	@ (8002478 <HAL_DMA_Start_IT+0x220>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a56      	ldr	r2, [pc, #344]	@ (800247c <HAL_DMA_Start_IT+0x224>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a54      	ldr	r2, [pc, #336]	@ (8002480 <HAL_DMA_Start_IT+0x228>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a53      	ldr	r2, [pc, #332]	@ (8002484 <HAL_DMA_Start_IT+0x22c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a51      	ldr	r2, [pc, #324]	@ (8002488 <HAL_DMA_Start_IT+0x230>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d108      	bne.n	8002358 <HAL_DMA_Start_IT+0x100>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	e007      	b.n	8002368 <HAL_DMA_Start_IT+0x110>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f001 fe6a 	bl	8004048 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a34      	ldr	r2, [pc, #208]	@ (800244c <HAL_DMA_Start_IT+0x1f4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d04a      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a33      	ldr	r2, [pc, #204]	@ (8002450 <HAL_DMA_Start_IT+0x1f8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d045      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a31      	ldr	r2, [pc, #196]	@ (8002454 <HAL_DMA_Start_IT+0x1fc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d040      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a30      	ldr	r2, [pc, #192]	@ (8002458 <HAL_DMA_Start_IT+0x200>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d03b      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	@ (800245c <HAL_DMA_Start_IT+0x204>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d036      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002460 <HAL_DMA_Start_IT+0x208>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d031      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002464 <HAL_DMA_Start_IT+0x20c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02c      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2a      	ldr	r2, [pc, #168]	@ (8002468 <HAL_DMA_Start_IT+0x210>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d027      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a28      	ldr	r2, [pc, #160]	@ (800246c <HAL_DMA_Start_IT+0x214>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d022      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a27      	ldr	r2, [pc, #156]	@ (8002470 <HAL_DMA_Start_IT+0x218>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01d      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a25      	ldr	r2, [pc, #148]	@ (8002474 <HAL_DMA_Start_IT+0x21c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d018      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a24      	ldr	r2, [pc, #144]	@ (8002478 <HAL_DMA_Start_IT+0x220>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a22      	ldr	r2, [pc, #136]	@ (800247c <HAL_DMA_Start_IT+0x224>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <HAL_DMA_Start_IT+0x228>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1f      	ldr	r2, [pc, #124]	@ (8002484 <HAL_DMA_Start_IT+0x22c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1e      	ldr	r2, [pc, #120]	@ (8002488 <HAL_DMA_Start_IT+0x230>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Start_IT+0x1c0>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_DMA_Start_IT+0x1c2>
 8002418:	2300      	movs	r3, #0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d036      	beq.n	800248c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 021e 	bic.w	r2, r3, #30
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0216 	orr.w	r2, r2, #22
 8002430:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03e      	beq.n	80024b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0208 	orr.w	r2, r2, #8
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e035      	b.n	80024b8 <HAL_DMA_Start_IT+0x260>
 800244c:	40020010 	.word	0x40020010
 8002450:	40020028 	.word	0x40020028
 8002454:	40020040 	.word	0x40020040
 8002458:	40020058 	.word	0x40020058
 800245c:	40020070 	.word	0x40020070
 8002460:	40020088 	.word	0x40020088
 8002464:	400200a0 	.word	0x400200a0
 8002468:	400200b8 	.word	0x400200b8
 800246c:	40020410 	.word	0x40020410
 8002470:	40020428 	.word	0x40020428
 8002474:	40020440 	.word	0x40020440
 8002478:	40020458 	.word	0x40020458
 800247c:	40020470 	.word	0x40020470
 8002480:	40020488 	.word	0x40020488
 8002484:	400204a0 	.word	0x400204a0
 8002488:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 020e 	bic.w	r2, r3, #14
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 020a 	orr.w	r2, r2, #10
 800249e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0204 	orr.w	r2, r2, #4
 80024b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a83      	ldr	r2, [pc, #524]	@ (80026cc <HAL_DMA_Start_IT+0x474>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d072      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a82      	ldr	r2, [pc, #520]	@ (80026d0 <HAL_DMA_Start_IT+0x478>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d06d      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a80      	ldr	r2, [pc, #512]	@ (80026d4 <HAL_DMA_Start_IT+0x47c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d068      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7f      	ldr	r2, [pc, #508]	@ (80026d8 <HAL_DMA_Start_IT+0x480>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d063      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a7d      	ldr	r2, [pc, #500]	@ (80026dc <HAL_DMA_Start_IT+0x484>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d05e      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7c      	ldr	r2, [pc, #496]	@ (80026e0 <HAL_DMA_Start_IT+0x488>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d059      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a7a      	ldr	r2, [pc, #488]	@ (80026e4 <HAL_DMA_Start_IT+0x48c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d054      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a79      	ldr	r2, [pc, #484]	@ (80026e8 <HAL_DMA_Start_IT+0x490>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d04f      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a77      	ldr	r2, [pc, #476]	@ (80026ec <HAL_DMA_Start_IT+0x494>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04a      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a76      	ldr	r2, [pc, #472]	@ (80026f0 <HAL_DMA_Start_IT+0x498>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d045      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a74      	ldr	r2, [pc, #464]	@ (80026f4 <HAL_DMA_Start_IT+0x49c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d040      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a73      	ldr	r2, [pc, #460]	@ (80026f8 <HAL_DMA_Start_IT+0x4a0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d03b      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a71      	ldr	r2, [pc, #452]	@ (80026fc <HAL_DMA_Start_IT+0x4a4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d036      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a70      	ldr	r2, [pc, #448]	@ (8002700 <HAL_DMA_Start_IT+0x4a8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d031      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6e      	ldr	r2, [pc, #440]	@ (8002704 <HAL_DMA_Start_IT+0x4ac>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02c      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6d      	ldr	r2, [pc, #436]	@ (8002708 <HAL_DMA_Start_IT+0x4b0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d027      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6b      	ldr	r2, [pc, #428]	@ (800270c <HAL_DMA_Start_IT+0x4b4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d022      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6a      	ldr	r2, [pc, #424]	@ (8002710 <HAL_DMA_Start_IT+0x4b8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01d      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	@ (8002714 <HAL_DMA_Start_IT+0x4bc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d018      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a67      	ldr	r2, [pc, #412]	@ (8002718 <HAL_DMA_Start_IT+0x4c0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a65      	ldr	r2, [pc, #404]	@ (800271c <HAL_DMA_Start_IT+0x4c4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00e      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a64      	ldr	r2, [pc, #400]	@ (8002720 <HAL_DMA_Start_IT+0x4c8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a62      	ldr	r2, [pc, #392]	@ (8002724 <HAL_DMA_Start_IT+0x4cc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a61      	ldr	r2, [pc, #388]	@ (8002728 <HAL_DMA_Start_IT+0x4d0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d101      	bne.n	80025ac <HAL_DMA_Start_IT+0x354>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_DMA_Start_IT+0x356>
 80025ac:	2300      	movs	r3, #0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01a      	beq.n	80025e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a37      	ldr	r2, [pc, #220]	@ (80026cc <HAL_DMA_Start_IT+0x474>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a36      	ldr	r2, [pc, #216]	@ (80026d0 <HAL_DMA_Start_IT+0x478>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a34      	ldr	r2, [pc, #208]	@ (80026d4 <HAL_DMA_Start_IT+0x47c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a33      	ldr	r2, [pc, #204]	@ (80026d8 <HAL_DMA_Start_IT+0x480>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a31      	ldr	r2, [pc, #196]	@ (80026dc <HAL_DMA_Start_IT+0x484>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a30      	ldr	r2, [pc, #192]	@ (80026e0 <HAL_DMA_Start_IT+0x488>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2e      	ldr	r2, [pc, #184]	@ (80026e4 <HAL_DMA_Start_IT+0x48c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2d      	ldr	r2, [pc, #180]	@ (80026e8 <HAL_DMA_Start_IT+0x490>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2b      	ldr	r2, [pc, #172]	@ (80026ec <HAL_DMA_Start_IT+0x494>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2a      	ldr	r2, [pc, #168]	@ (80026f0 <HAL_DMA_Start_IT+0x498>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a28      	ldr	r2, [pc, #160]	@ (80026f4 <HAL_DMA_Start_IT+0x49c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <HAL_DMA_Start_IT+0x4a0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a25      	ldr	r2, [pc, #148]	@ (80026fc <HAL_DMA_Start_IT+0x4a4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a24      	ldr	r2, [pc, #144]	@ (8002700 <HAL_DMA_Start_IT+0x4a8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a22      	ldr	r2, [pc, #136]	@ (8002704 <HAL_DMA_Start_IT+0x4ac>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a21      	ldr	r2, [pc, #132]	@ (8002708 <HAL_DMA_Start_IT+0x4b0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <HAL_DMA_Start_IT+0x442>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e012      	b.n	80026c0 <HAL_DMA_Start_IT+0x468>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e009      	b.n	80026c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40020010 	.word	0x40020010
 80026d0:	40020028 	.word	0x40020028
 80026d4:	40020040 	.word	0x40020040
 80026d8:	40020058 	.word	0x40020058
 80026dc:	40020070 	.word	0x40020070
 80026e0:	40020088 	.word	0x40020088
 80026e4:	400200a0 	.word	0x400200a0
 80026e8:	400200b8 	.word	0x400200b8
 80026ec:	40020410 	.word	0x40020410
 80026f0:	40020428 	.word	0x40020428
 80026f4:	40020440 	.word	0x40020440
 80026f8:	40020458 	.word	0x40020458
 80026fc:	40020470 	.word	0x40020470
 8002700:	40020488 	.word	0x40020488
 8002704:	400204a0 	.word	0x400204a0
 8002708:	400204b8 	.word	0x400204b8
 800270c:	58025408 	.word	0x58025408
 8002710:	5802541c 	.word	0x5802541c
 8002714:	58025430 	.word	0x58025430
 8002718:	58025444 	.word	0x58025444
 800271c:	58025458 	.word	0x58025458
 8002720:	5802546c 	.word	0x5802546c
 8002724:	58025480 	.word	0x58025480
 8002728:	58025494 	.word	0x58025494

0800272c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff f8f8 	bl	8001928 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e2dc      	b.n	8002cfe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d008      	beq.n	8002762 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2280      	movs	r2, #128	@ 0x80
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e2cd      	b.n	8002cfe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a76      	ldr	r2, [pc, #472]	@ (8002940 <HAL_DMA_Abort+0x214>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04a      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a74      	ldr	r2, [pc, #464]	@ (8002944 <HAL_DMA_Abort+0x218>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d045      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a73      	ldr	r2, [pc, #460]	@ (8002948 <HAL_DMA_Abort+0x21c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d040      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a71      	ldr	r2, [pc, #452]	@ (800294c <HAL_DMA_Abort+0x220>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d03b      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a70      	ldr	r2, [pc, #448]	@ (8002950 <HAL_DMA_Abort+0x224>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d036      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <HAL_DMA_Abort+0x228>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6d      	ldr	r2, [pc, #436]	@ (8002958 <HAL_DMA_Abort+0x22c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d02c      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6b      	ldr	r2, [pc, #428]	@ (800295c <HAL_DMA_Abort+0x230>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d027      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6a      	ldr	r2, [pc, #424]	@ (8002960 <HAL_DMA_Abort+0x234>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a68      	ldr	r2, [pc, #416]	@ (8002964 <HAL_DMA_Abort+0x238>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a67      	ldr	r2, [pc, #412]	@ (8002968 <HAL_DMA_Abort+0x23c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a65      	ldr	r2, [pc, #404]	@ (800296c <HAL_DMA_Abort+0x240>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a64      	ldr	r2, [pc, #400]	@ (8002970 <HAL_DMA_Abort+0x244>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a62      	ldr	r2, [pc, #392]	@ (8002974 <HAL_DMA_Abort+0x248>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a61      	ldr	r2, [pc, #388]	@ (8002978 <HAL_DMA_Abort+0x24c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a5f      	ldr	r2, [pc, #380]	@ (800297c <HAL_DMA_Abort+0x250>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_DMA_Abort+0xda>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_DMA_Abort+0xdc>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 021e 	bic.w	r2, r2, #30
 800281a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800282a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e00a      	b.n	800284a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 020e 	bic.w	r2, r2, #14
 8002842:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3c      	ldr	r2, [pc, #240]	@ (8002940 <HAL_DMA_Abort+0x214>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d072      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3a      	ldr	r2, [pc, #232]	@ (8002944 <HAL_DMA_Abort+0x218>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d06d      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a39      	ldr	r2, [pc, #228]	@ (8002948 <HAL_DMA_Abort+0x21c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d068      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a37      	ldr	r2, [pc, #220]	@ (800294c <HAL_DMA_Abort+0x220>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d063      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a36      	ldr	r2, [pc, #216]	@ (8002950 <HAL_DMA_Abort+0x224>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d05e      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a34      	ldr	r2, [pc, #208]	@ (8002954 <HAL_DMA_Abort+0x228>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d059      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a33      	ldr	r2, [pc, #204]	@ (8002958 <HAL_DMA_Abort+0x22c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d054      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a31      	ldr	r2, [pc, #196]	@ (800295c <HAL_DMA_Abort+0x230>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d04f      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a30      	ldr	r2, [pc, #192]	@ (8002960 <HAL_DMA_Abort+0x234>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d04a      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002964 <HAL_DMA_Abort+0x238>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d045      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002968 <HAL_DMA_Abort+0x23c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d040      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2b      	ldr	r2, [pc, #172]	@ (800296c <HAL_DMA_Abort+0x240>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d03b      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_DMA_Abort+0x244>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d036      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a28      	ldr	r2, [pc, #160]	@ (8002974 <HAL_DMA_Abort+0x248>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a27      	ldr	r2, [pc, #156]	@ (8002978 <HAL_DMA_Abort+0x24c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02c      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a25      	ldr	r2, [pc, #148]	@ (800297c <HAL_DMA_Abort+0x250>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d027      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a24      	ldr	r2, [pc, #144]	@ (8002980 <HAL_DMA_Abort+0x254>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a22      	ldr	r2, [pc, #136]	@ (8002984 <HAL_DMA_Abort+0x258>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a21      	ldr	r2, [pc, #132]	@ (8002988 <HAL_DMA_Abort+0x25c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1f      	ldr	r2, [pc, #124]	@ (800298c <HAL_DMA_Abort+0x260>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	@ (8002990 <HAL_DMA_Abort+0x264>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1c      	ldr	r2, [pc, #112]	@ (8002994 <HAL_DMA_Abort+0x268>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1b      	ldr	r2, [pc, #108]	@ (8002998 <HAL_DMA_Abort+0x26c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_DMA_Abort+0x270>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d132      	bne.n	80029a0 <HAL_DMA_Abort+0x274>
 800293a:	2301      	movs	r3, #1
 800293c:	e031      	b.n	80029a2 <HAL_DMA_Abort+0x276>
 800293e:	bf00      	nop
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
 8002980:	58025408 	.word	0x58025408
 8002984:	5802541c 	.word	0x5802541c
 8002988:	58025430 	.word	0x58025430
 800298c:	58025444 	.word	0x58025444
 8002990:	58025458 	.word	0x58025458
 8002994:	5802546c 	.word	0x5802546c
 8002998:	58025480 	.word	0x58025480
 800299c:	58025494 	.word	0x58025494
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002b70 <HAL_DMA_Abort+0x444>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04a      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b74 <HAL_DMA_Abort+0x448>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d045      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6a      	ldr	r2, [pc, #424]	@ (8002b78 <HAL_DMA_Abort+0x44c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d040      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a68      	ldr	r2, [pc, #416]	@ (8002b7c <HAL_DMA_Abort+0x450>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d03b      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a67      	ldr	r2, [pc, #412]	@ (8002b80 <HAL_DMA_Abort+0x454>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d036      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a65      	ldr	r2, [pc, #404]	@ (8002b84 <HAL_DMA_Abort+0x458>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a64      	ldr	r2, [pc, #400]	@ (8002b88 <HAL_DMA_Abort+0x45c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a62      	ldr	r2, [pc, #392]	@ (8002b8c <HAL_DMA_Abort+0x460>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a61      	ldr	r2, [pc, #388]	@ (8002b90 <HAL_DMA_Abort+0x464>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5f      	ldr	r2, [pc, #380]	@ (8002b94 <HAL_DMA_Abort+0x468>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002b98 <HAL_DMA_Abort+0x46c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5c      	ldr	r2, [pc, #368]	@ (8002b9c <HAL_DMA_Abort+0x470>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba0 <HAL_DMA_Abort+0x474>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a59      	ldr	r2, [pc, #356]	@ (8002ba4 <HAL_DMA_Abort+0x478>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a58      	ldr	r2, [pc, #352]	@ (8002ba8 <HAL_DMA_Abort+0x47c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a56      	ldr	r2, [pc, #344]	@ (8002bac <HAL_DMA_Abort+0x480>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <HAL_DMA_Abort+0x33c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e007      	b.n	8002a78 <HAL_DMA_Abort+0x34c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a78:	e013      	b.n	8002aa2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7a:	f7fe ff55 	bl	8001928 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d90c      	bls.n	8002aa2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e12d      	b.n	8002cfe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e5      	bne.n	8002a7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b70 <HAL_DMA_Abort+0x444>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d04a      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b74 <HAL_DMA_Abort+0x448>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d045      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b78 <HAL_DMA_Abort+0x44c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d040      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b7c <HAL_DMA_Abort+0x450>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d03b      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a29      	ldr	r2, [pc, #164]	@ (8002b80 <HAL_DMA_Abort+0x454>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d036      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a27      	ldr	r2, [pc, #156]	@ (8002b84 <HAL_DMA_Abort+0x458>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d031      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a26      	ldr	r2, [pc, #152]	@ (8002b88 <HAL_DMA_Abort+0x45c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d02c      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a24      	ldr	r2, [pc, #144]	@ (8002b8c <HAL_DMA_Abort+0x460>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d027      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a23      	ldr	r2, [pc, #140]	@ (8002b90 <HAL_DMA_Abort+0x464>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a21      	ldr	r2, [pc, #132]	@ (8002b94 <HAL_DMA_Abort+0x468>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01d      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a20      	ldr	r2, [pc, #128]	@ (8002b98 <HAL_DMA_Abort+0x46c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d018      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1e      	ldr	r2, [pc, #120]	@ (8002b9c <HAL_DMA_Abort+0x470>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba0 <HAL_DMA_Abort+0x474>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba4 <HAL_DMA_Abort+0x478>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba8 <HAL_DMA_Abort+0x47c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <HAL_DMA_Abort+0x480>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_DMA_Abort+0x426>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_DMA_Abort+0x428>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02b      	beq.n	8002bb0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	223f      	movs	r2, #63	@ 0x3f
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	e02a      	b.n	8002bc6 <HAL_DMA_Abort+0x49a>
 8002b70:	40020010 	.word	0x40020010
 8002b74:	40020028 	.word	0x40020028
 8002b78:	40020040 	.word	0x40020040
 8002b7c:	40020058 	.word	0x40020058
 8002b80:	40020070 	.word	0x40020070
 8002b84:	40020088 	.word	0x40020088
 8002b88:	400200a0 	.word	0x400200a0
 8002b8c:	400200b8 	.word	0x400200b8
 8002b90:	40020410 	.word	0x40020410
 8002b94:	40020428 	.word	0x40020428
 8002b98:	40020440 	.word	0x40020440
 8002b9c:	40020458 	.word	0x40020458
 8002ba0:	40020470 	.word	0x40020470
 8002ba4:	40020488 	.word	0x40020488
 8002ba8:	400204a0 	.word	0x400204a0
 8002bac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a4f      	ldr	r2, [pc, #316]	@ (8002d08 <HAL_DMA_Abort+0x5dc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d072      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a4d      	ldr	r2, [pc, #308]	@ (8002d0c <HAL_DMA_Abort+0x5e0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d06d      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a4c      	ldr	r2, [pc, #304]	@ (8002d10 <HAL_DMA_Abort+0x5e4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d068      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4a      	ldr	r2, [pc, #296]	@ (8002d14 <HAL_DMA_Abort+0x5e8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d063      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a49      	ldr	r2, [pc, #292]	@ (8002d18 <HAL_DMA_Abort+0x5ec>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d05e      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a47      	ldr	r2, [pc, #284]	@ (8002d1c <HAL_DMA_Abort+0x5f0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d059      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a46      	ldr	r2, [pc, #280]	@ (8002d20 <HAL_DMA_Abort+0x5f4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d054      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a44      	ldr	r2, [pc, #272]	@ (8002d24 <HAL_DMA_Abort+0x5f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04f      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a43      	ldr	r2, [pc, #268]	@ (8002d28 <HAL_DMA_Abort+0x5fc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04a      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a41      	ldr	r2, [pc, #260]	@ (8002d2c <HAL_DMA_Abort+0x600>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d045      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a40      	ldr	r2, [pc, #256]	@ (8002d30 <HAL_DMA_Abort+0x604>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d040      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a3e      	ldr	r2, [pc, #248]	@ (8002d34 <HAL_DMA_Abort+0x608>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d03b      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a3d      	ldr	r2, [pc, #244]	@ (8002d38 <HAL_DMA_Abort+0x60c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d3c <HAL_DMA_Abort+0x610>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3a      	ldr	r2, [pc, #232]	@ (8002d40 <HAL_DMA_Abort+0x614>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d02c      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a38      	ldr	r2, [pc, #224]	@ (8002d44 <HAL_DMA_Abort+0x618>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a37      	ldr	r2, [pc, #220]	@ (8002d48 <HAL_DMA_Abort+0x61c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a35      	ldr	r2, [pc, #212]	@ (8002d4c <HAL_DMA_Abort+0x620>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a34      	ldr	r2, [pc, #208]	@ (8002d50 <HAL_DMA_Abort+0x624>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a32      	ldr	r2, [pc, #200]	@ (8002d54 <HAL_DMA_Abort+0x628>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a31      	ldr	r2, [pc, #196]	@ (8002d58 <HAL_DMA_Abort+0x62c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8002d5c <HAL_DMA_Abort+0x630>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8002d60 <HAL_DMA_Abort+0x634>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d64 <HAL_DMA_Abort+0x638>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_DMA_Abort+0x58e>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_DMA_Abort+0x590>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cc8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40020010 	.word	0x40020010
 8002d0c:	40020028 	.word	0x40020028
 8002d10:	40020040 	.word	0x40020040
 8002d14:	40020058 	.word	0x40020058
 8002d18:	40020070 	.word	0x40020070
 8002d1c:	40020088 	.word	0x40020088
 8002d20:	400200a0 	.word	0x400200a0
 8002d24:	400200b8 	.word	0x400200b8
 8002d28:	40020410 	.word	0x40020410
 8002d2c:	40020428 	.word	0x40020428
 8002d30:	40020440 	.word	0x40020440
 8002d34:	40020458 	.word	0x40020458
 8002d38:	40020470 	.word	0x40020470
 8002d3c:	40020488 	.word	0x40020488
 8002d40:	400204a0 	.word	0x400204a0
 8002d44:	400204b8 	.word	0x400204b8
 8002d48:	58025408 	.word	0x58025408
 8002d4c:	5802541c 	.word	0x5802541c
 8002d50:	58025430 	.word	0x58025430
 8002d54:	58025444 	.word	0x58025444
 8002d58:	58025458 	.word	0x58025458
 8002d5c:	5802546c 	.word	0x5802546c
 8002d60:	58025480 	.word	0x58025480
 8002d64:	58025494 	.word	0x58025494

08002d68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e237      	b.n	80031ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d004      	beq.n	8002d90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2280      	movs	r2, #128	@ 0x80
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e22c      	b.n	80031ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5c      	ldr	r2, [pc, #368]	@ (8002f08 <HAL_DMA_Abort_IT+0x1a0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d04a      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8002f0c <HAL_DMA_Abort_IT+0x1a4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d045      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a59      	ldr	r2, [pc, #356]	@ (8002f10 <HAL_DMA_Abort_IT+0x1a8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d040      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a58      	ldr	r2, [pc, #352]	@ (8002f14 <HAL_DMA_Abort_IT+0x1ac>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d03b      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a56      	ldr	r2, [pc, #344]	@ (8002f18 <HAL_DMA_Abort_IT+0x1b0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d036      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a55      	ldr	r2, [pc, #340]	@ (8002f1c <HAL_DMA_Abort_IT+0x1b4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d031      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a53      	ldr	r2, [pc, #332]	@ (8002f20 <HAL_DMA_Abort_IT+0x1b8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d02c      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a52      	ldr	r2, [pc, #328]	@ (8002f24 <HAL_DMA_Abort_IT+0x1bc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d027      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a50      	ldr	r2, [pc, #320]	@ (8002f28 <HAL_DMA_Abort_IT+0x1c0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d022      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4f      	ldr	r2, [pc, #316]	@ (8002f2c <HAL_DMA_Abort_IT+0x1c4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d01d      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4d      	ldr	r2, [pc, #308]	@ (8002f30 <HAL_DMA_Abort_IT+0x1c8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d018      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4c      	ldr	r2, [pc, #304]	@ (8002f34 <HAL_DMA_Abort_IT+0x1cc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f38 <HAL_DMA_Abort_IT+0x1d0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00e      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a49      	ldr	r2, [pc, #292]	@ (8002f3c <HAL_DMA_Abort_IT+0x1d4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a47      	ldr	r2, [pc, #284]	@ (8002f40 <HAL_DMA_Abort_IT+0x1d8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	@ (8002f44 <HAL_DMA_Abort_IT+0x1dc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Abort_IT+0xcc>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_DMA_Abort_IT+0xce>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8086 	beq.w	8002f48 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2204      	movs	r2, #4
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2f      	ldr	r2, [pc, #188]	@ (8002f08 <HAL_DMA_Abort_IT+0x1a0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2e      	ldr	r2, [pc, #184]	@ (8002f0c <HAL_DMA_Abort_IT+0x1a4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d045      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f10 <HAL_DMA_Abort_IT+0x1a8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2b      	ldr	r2, [pc, #172]	@ (8002f14 <HAL_DMA_Abort_IT+0x1ac>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d03b      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a29      	ldr	r2, [pc, #164]	@ (8002f18 <HAL_DMA_Abort_IT+0x1b0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a28      	ldr	r2, [pc, #160]	@ (8002f1c <HAL_DMA_Abort_IT+0x1b4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a26      	ldr	r2, [pc, #152]	@ (8002f20 <HAL_DMA_Abort_IT+0x1b8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a25      	ldr	r2, [pc, #148]	@ (8002f24 <HAL_DMA_Abort_IT+0x1bc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a23      	ldr	r2, [pc, #140]	@ (8002f28 <HAL_DMA_Abort_IT+0x1c0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a22      	ldr	r2, [pc, #136]	@ (8002f2c <HAL_DMA_Abort_IT+0x1c4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a20      	ldr	r2, [pc, #128]	@ (8002f30 <HAL_DMA_Abort_IT+0x1c8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f34 <HAL_DMA_Abort_IT+0x1cc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f38 <HAL_DMA_Abort_IT+0x1d0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1c      	ldr	r2, [pc, #112]	@ (8002f3c <HAL_DMA_Abort_IT+0x1d4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f40 <HAL_DMA_Abort_IT+0x1d8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a19      	ldr	r2, [pc, #100]	@ (8002f44 <HAL_DMA_Abort_IT+0x1dc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DMA_Abort_IT+0x18e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e178      	b.n	80031e8 <HAL_DMA_Abort_IT+0x480>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e16f      	b.n	80031e8 <HAL_DMA_Abort_IT+0x480>
 8002f08:	40020010 	.word	0x40020010
 8002f0c:	40020028 	.word	0x40020028
 8002f10:	40020040 	.word	0x40020040
 8002f14:	40020058 	.word	0x40020058
 8002f18:	40020070 	.word	0x40020070
 8002f1c:	40020088 	.word	0x40020088
 8002f20:	400200a0 	.word	0x400200a0
 8002f24:	400200b8 	.word	0x400200b8
 8002f28:	40020410 	.word	0x40020410
 8002f2c:	40020428 	.word	0x40020428
 8002f30:	40020440 	.word	0x40020440
 8002f34:	40020458 	.word	0x40020458
 8002f38:	40020470 	.word	0x40020470
 8002f3c:	40020488 	.word	0x40020488
 8002f40:	400204a0 	.word	0x400204a0
 8002f44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 020e 	bic.w	r2, r2, #14
 8002f56:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6c      	ldr	r2, [pc, #432]	@ (8003110 <HAL_DMA_Abort_IT+0x3a8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d04a      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6b      	ldr	r2, [pc, #428]	@ (8003114 <HAL_DMA_Abort_IT+0x3ac>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d045      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a69      	ldr	r2, [pc, #420]	@ (8003118 <HAL_DMA_Abort_IT+0x3b0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d040      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a68      	ldr	r2, [pc, #416]	@ (800311c <HAL_DMA_Abort_IT+0x3b4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d03b      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a66      	ldr	r2, [pc, #408]	@ (8003120 <HAL_DMA_Abort_IT+0x3b8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d036      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a65      	ldr	r2, [pc, #404]	@ (8003124 <HAL_DMA_Abort_IT+0x3bc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d031      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a63      	ldr	r2, [pc, #396]	@ (8003128 <HAL_DMA_Abort_IT+0x3c0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02c      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a62      	ldr	r2, [pc, #392]	@ (800312c <HAL_DMA_Abort_IT+0x3c4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d027      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a60      	ldr	r2, [pc, #384]	@ (8003130 <HAL_DMA_Abort_IT+0x3c8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d022      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8003134 <HAL_DMA_Abort_IT+0x3cc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d01d      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003138 <HAL_DMA_Abort_IT+0x3d0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5c      	ldr	r2, [pc, #368]	@ (800313c <HAL_DMA_Abort_IT+0x3d4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8003140 <HAL_DMA_Abort_IT+0x3d8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a59      	ldr	r2, [pc, #356]	@ (8003144 <HAL_DMA_Abort_IT+0x3dc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a57      	ldr	r2, [pc, #348]	@ (8003148 <HAL_DMA_Abort_IT+0x3e0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a56      	ldr	r2, [pc, #344]	@ (800314c <HAL_DMA_Abort_IT+0x3e4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d108      	bne.n	800300a <HAL_DMA_Abort_IT+0x2a2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e007      	b.n	800301a <HAL_DMA_Abort_IT+0x2b2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3c      	ldr	r2, [pc, #240]	@ (8003110 <HAL_DMA_Abort_IT+0x3a8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d072      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a3a      	ldr	r2, [pc, #232]	@ (8003114 <HAL_DMA_Abort_IT+0x3ac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d06d      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a39      	ldr	r2, [pc, #228]	@ (8003118 <HAL_DMA_Abort_IT+0x3b0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d068      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a37      	ldr	r2, [pc, #220]	@ (800311c <HAL_DMA_Abort_IT+0x3b4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d063      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a36      	ldr	r2, [pc, #216]	@ (8003120 <HAL_DMA_Abort_IT+0x3b8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d05e      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a34      	ldr	r2, [pc, #208]	@ (8003124 <HAL_DMA_Abort_IT+0x3bc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d059      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a33      	ldr	r2, [pc, #204]	@ (8003128 <HAL_DMA_Abort_IT+0x3c0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d054      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a31      	ldr	r2, [pc, #196]	@ (800312c <HAL_DMA_Abort_IT+0x3c4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d04f      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a30      	ldr	r2, [pc, #192]	@ (8003130 <HAL_DMA_Abort_IT+0x3c8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d04a      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2e      	ldr	r2, [pc, #184]	@ (8003134 <HAL_DMA_Abort_IT+0x3cc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d045      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2d      	ldr	r2, [pc, #180]	@ (8003138 <HAL_DMA_Abort_IT+0x3d0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d040      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2b      	ldr	r2, [pc, #172]	@ (800313c <HAL_DMA_Abort_IT+0x3d4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d03b      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2a      	ldr	r2, [pc, #168]	@ (8003140 <HAL_DMA_Abort_IT+0x3d8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d036      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a28      	ldr	r2, [pc, #160]	@ (8003144 <HAL_DMA_Abort_IT+0x3dc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d031      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a27      	ldr	r2, [pc, #156]	@ (8003148 <HAL_DMA_Abort_IT+0x3e0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d02c      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a25      	ldr	r2, [pc, #148]	@ (800314c <HAL_DMA_Abort_IT+0x3e4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d027      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a24      	ldr	r2, [pc, #144]	@ (8003150 <HAL_DMA_Abort_IT+0x3e8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a22      	ldr	r2, [pc, #136]	@ (8003154 <HAL_DMA_Abort_IT+0x3ec>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01d      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a21      	ldr	r2, [pc, #132]	@ (8003158 <HAL_DMA_Abort_IT+0x3f0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1f      	ldr	r2, [pc, #124]	@ (800315c <HAL_DMA_Abort_IT+0x3f4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003160 <HAL_DMA_Abort_IT+0x3f8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003164 <HAL_DMA_Abort_IT+0x3fc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003168 <HAL_DMA_Abort_IT+0x400>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	@ (800316c <HAL_DMA_Abort_IT+0x404>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d132      	bne.n	8003170 <HAL_DMA_Abort_IT+0x408>
 800310a:	2301      	movs	r3, #1
 800310c:	e031      	b.n	8003172 <HAL_DMA_Abort_IT+0x40a>
 800310e:	bf00      	nop
 8003110:	40020010 	.word	0x40020010
 8003114:	40020028 	.word	0x40020028
 8003118:	40020040 	.word	0x40020040
 800311c:	40020058 	.word	0x40020058
 8003120:	40020070 	.word	0x40020070
 8003124:	40020088 	.word	0x40020088
 8003128:	400200a0 	.word	0x400200a0
 800312c:	400200b8 	.word	0x400200b8
 8003130:	40020410 	.word	0x40020410
 8003134:	40020428 	.word	0x40020428
 8003138:	40020440 	.word	0x40020440
 800313c:	40020458 	.word	0x40020458
 8003140:	40020470 	.word	0x40020470
 8003144:	40020488 	.word	0x40020488
 8003148:	400204a0 	.word	0x400204a0
 800314c:	400204b8 	.word	0x400204b8
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d028      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003180:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003184:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop

080031f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	@ 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003200:	4b67      	ldr	r3, [pc, #412]	@ (80033a0 <HAL_DMA_IRQHandler+0x1ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a67      	ldr	r2, [pc, #412]	@ (80033a4 <HAL_DMA_IRQHandler+0x1b0>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003212:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003218:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a5f      	ldr	r2, [pc, #380]	@ (80033a8 <HAL_DMA_IRQHandler+0x1b4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d04a      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a5d      	ldr	r2, [pc, #372]	@ (80033ac <HAL_DMA_IRQHandler+0x1b8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d045      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5c      	ldr	r2, [pc, #368]	@ (80033b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d040      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5a      	ldr	r2, [pc, #360]	@ (80033b4 <HAL_DMA_IRQHandler+0x1c0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d03b      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a59      	ldr	r2, [pc, #356]	@ (80033b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d036      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a57      	ldr	r2, [pc, #348]	@ (80033bc <HAL_DMA_IRQHandler+0x1c8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d031      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a56      	ldr	r2, [pc, #344]	@ (80033c0 <HAL_DMA_IRQHandler+0x1cc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d02c      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a54      	ldr	r2, [pc, #336]	@ (80033c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d027      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a53      	ldr	r2, [pc, #332]	@ (80033c8 <HAL_DMA_IRQHandler+0x1d4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a51      	ldr	r2, [pc, #324]	@ (80033cc <HAL_DMA_IRQHandler+0x1d8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01d      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a50      	ldr	r2, [pc, #320]	@ (80033d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a4e      	ldr	r2, [pc, #312]	@ (80033d4 <HAL_DMA_IRQHandler+0x1e0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a4d      	ldr	r2, [pc, #308]	@ (80033d8 <HAL_DMA_IRQHandler+0x1e4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a4b      	ldr	r2, [pc, #300]	@ (80033dc <HAL_DMA_IRQHandler+0x1e8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4a      	ldr	r2, [pc, #296]	@ (80033e0 <HAL_DMA_IRQHandler+0x1ec>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a48      	ldr	r2, [pc, #288]	@ (80033e4 <HAL_DMA_IRQHandler+0x1f0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_DMA_IRQHandler+0xd6>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_DMA_IRQHandler+0xd8>
 80032ca:	2300      	movs	r3, #0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 842b 	beq.w	8003b28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2208      	movs	r2, #8
 80032dc:	409a      	lsls	r2, r3
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80a2 	beq.w	800342c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2e      	ldr	r2, [pc, #184]	@ (80033a8 <HAL_DMA_IRQHandler+0x1b4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d04a      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2d      	ldr	r2, [pc, #180]	@ (80033ac <HAL_DMA_IRQHandler+0x1b8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d045      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2b      	ldr	r2, [pc, #172]	@ (80033b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d040      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2a      	ldr	r2, [pc, #168]	@ (80033b4 <HAL_DMA_IRQHandler+0x1c0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d03b      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a28      	ldr	r2, [pc, #160]	@ (80033b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d036      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <HAL_DMA_IRQHandler+0x1c8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d031      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a25      	ldr	r2, [pc, #148]	@ (80033c0 <HAL_DMA_IRQHandler+0x1cc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02c      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a24      	ldr	r2, [pc, #144]	@ (80033c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d027      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a22      	ldr	r2, [pc, #136]	@ (80033c8 <HAL_DMA_IRQHandler+0x1d4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d022      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a21      	ldr	r2, [pc, #132]	@ (80033cc <HAL_DMA_IRQHandler+0x1d8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d01d      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1f      	ldr	r2, [pc, #124]	@ (80033d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d018      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1e      	ldr	r2, [pc, #120]	@ (80033d4 <HAL_DMA_IRQHandler+0x1e0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1c      	ldr	r2, [pc, #112]	@ (80033d8 <HAL_DMA_IRQHandler+0x1e4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00e      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1b      	ldr	r2, [pc, #108]	@ (80033dc <HAL_DMA_IRQHandler+0x1e8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a19      	ldr	r2, [pc, #100]	@ (80033e0 <HAL_DMA_IRQHandler+0x1ec>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a18      	ldr	r2, [pc, #96]	@ (80033e4 <HAL_DMA_IRQHandler+0x1f0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d12f      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x1f4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e02e      	b.n	80033fc <HAL_DMA_IRQHandler+0x208>
 800339e:	bf00      	nop
 80033a0:	24000000 	.word	0x24000000
 80033a4:	1b4e81b5 	.word	0x1b4e81b5
 80033a8:	40020010 	.word	0x40020010
 80033ac:	40020028 	.word	0x40020028
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020070 	.word	0x40020070
 80033bc:	40020088 	.word	0x40020088
 80033c0:	400200a0 	.word	0x400200a0
 80033c4:	400200b8 	.word	0x400200b8
 80033c8:	40020410 	.word	0x40020410
 80033cc:	40020428 	.word	0x40020428
 80033d0:	40020440 	.word	0x40020440
 80033d4:	40020458 	.word	0x40020458
 80033d8:	40020470 	.word	0x40020470
 80033dc:	40020488 	.word	0x40020488
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	400204b8 	.word	0x400204b8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0204 	bic.w	r2, r2, #4
 800340e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	2208      	movs	r2, #8
 800341a:	409a      	lsls	r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d06e      	beq.n	8003520 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a69      	ldr	r2, [pc, #420]	@ (80035ec <HAL_DMA_IRQHandler+0x3f8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d04a      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a67      	ldr	r2, [pc, #412]	@ (80035f0 <HAL_DMA_IRQHandler+0x3fc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d045      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a66      	ldr	r2, [pc, #408]	@ (80035f4 <HAL_DMA_IRQHandler+0x400>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d040      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a64      	ldr	r2, [pc, #400]	@ (80035f8 <HAL_DMA_IRQHandler+0x404>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d03b      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a63      	ldr	r2, [pc, #396]	@ (80035fc <HAL_DMA_IRQHandler+0x408>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d036      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a61      	ldr	r2, [pc, #388]	@ (8003600 <HAL_DMA_IRQHandler+0x40c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d031      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a60      	ldr	r2, [pc, #384]	@ (8003604 <HAL_DMA_IRQHandler+0x410>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d02c      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5e      	ldr	r2, [pc, #376]	@ (8003608 <HAL_DMA_IRQHandler+0x414>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d027      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5d      	ldr	r2, [pc, #372]	@ (800360c <HAL_DMA_IRQHandler+0x418>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d022      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003610 <HAL_DMA_IRQHandler+0x41c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003614 <HAL_DMA_IRQHandler+0x420>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d018      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a58      	ldr	r2, [pc, #352]	@ (8003618 <HAL_DMA_IRQHandler+0x424>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a57      	ldr	r2, [pc, #348]	@ (800361c <HAL_DMA_IRQHandler+0x428>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00e      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a55      	ldr	r2, [pc, #340]	@ (8003620 <HAL_DMA_IRQHandler+0x42c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a54      	ldr	r2, [pc, #336]	@ (8003624 <HAL_DMA_IRQHandler+0x430>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a52      	ldr	r2, [pc, #328]	@ (8003628 <HAL_DMA_IRQHandler+0x434>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10a      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x304>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e003      	b.n	8003500 <HAL_DMA_IRQHandler+0x30c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	2201      	movs	r2, #1
 800350e:	409a      	lsls	r2, r3
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003518:	f043 0202 	orr.w	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2204      	movs	r2, #4
 800352a:	409a      	lsls	r2, r3
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 808f 	beq.w	8003654 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2c      	ldr	r2, [pc, #176]	@ (80035ec <HAL_DMA_IRQHandler+0x3f8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d04a      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2a      	ldr	r2, [pc, #168]	@ (80035f0 <HAL_DMA_IRQHandler+0x3fc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d045      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a29      	ldr	r2, [pc, #164]	@ (80035f4 <HAL_DMA_IRQHandler+0x400>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d040      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a27      	ldr	r2, [pc, #156]	@ (80035f8 <HAL_DMA_IRQHandler+0x404>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d03b      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a26      	ldr	r2, [pc, #152]	@ (80035fc <HAL_DMA_IRQHandler+0x408>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d036      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a24      	ldr	r2, [pc, #144]	@ (8003600 <HAL_DMA_IRQHandler+0x40c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a23      	ldr	r2, [pc, #140]	@ (8003604 <HAL_DMA_IRQHandler+0x410>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d02c      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a21      	ldr	r2, [pc, #132]	@ (8003608 <HAL_DMA_IRQHandler+0x414>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d027      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a20      	ldr	r2, [pc, #128]	@ (800360c <HAL_DMA_IRQHandler+0x418>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1e      	ldr	r2, [pc, #120]	@ (8003610 <HAL_DMA_IRQHandler+0x41c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01d      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1d      	ldr	r2, [pc, #116]	@ (8003614 <HAL_DMA_IRQHandler+0x420>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003618 <HAL_DMA_IRQHandler+0x424>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	@ (800361c <HAL_DMA_IRQHandler+0x428>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a18      	ldr	r2, [pc, #96]	@ (8003620 <HAL_DMA_IRQHandler+0x42c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a17      	ldr	r2, [pc, #92]	@ (8003624 <HAL_DMA_IRQHandler+0x430>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <HAL_DMA_IRQHandler+0x434>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d12a      	bne.n	800362c <HAL_DMA_IRQHandler+0x438>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e023      	b.n	8003634 <HAL_DMA_IRQHandler+0x440>
 80035ec:	40020010 	.word	0x40020010
 80035f0:	40020028 	.word	0x40020028
 80035f4:	40020040 	.word	0x40020040
 80035f8:	40020058 	.word	0x40020058
 80035fc:	40020070 	.word	0x40020070
 8003600:	40020088 	.word	0x40020088
 8003604:	400200a0 	.word	0x400200a0
 8003608:	400200b8 	.word	0x400200b8
 800360c:	40020410 	.word	0x40020410
 8003610:	40020428 	.word	0x40020428
 8003614:	40020440 	.word	0x40020440
 8003618:	40020458 	.word	0x40020458
 800361c:	40020470 	.word	0x40020470
 8003620:	40020488 	.word	0x40020488
 8003624:	400204a0 	.word	0x400204a0
 8003628:	400204b8 	.word	0x400204b8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00d      	beq.n	8003654 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	2204      	movs	r2, #4
 8003642:	409a      	lsls	r2, r3
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2210      	movs	r2, #16
 800365e:	409a      	lsls	r2, r3
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a6 	beq.w	80037b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a85      	ldr	r2, [pc, #532]	@ (8003884 <HAL_DMA_IRQHandler+0x690>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04a      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a83      	ldr	r2, [pc, #524]	@ (8003888 <HAL_DMA_IRQHandler+0x694>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d045      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a82      	ldr	r2, [pc, #520]	@ (800388c <HAL_DMA_IRQHandler+0x698>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d040      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a80      	ldr	r2, [pc, #512]	@ (8003890 <HAL_DMA_IRQHandler+0x69c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d03b      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7f      	ldr	r2, [pc, #508]	@ (8003894 <HAL_DMA_IRQHandler+0x6a0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d036      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7d      	ldr	r2, [pc, #500]	@ (8003898 <HAL_DMA_IRQHandler+0x6a4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d031      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7c      	ldr	r2, [pc, #496]	@ (800389c <HAL_DMA_IRQHandler+0x6a8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02c      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7a      	ldr	r2, [pc, #488]	@ (80038a0 <HAL_DMA_IRQHandler+0x6ac>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d027      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a79      	ldr	r2, [pc, #484]	@ (80038a4 <HAL_DMA_IRQHandler+0x6b0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a77      	ldr	r2, [pc, #476]	@ (80038a8 <HAL_DMA_IRQHandler+0x6b4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01d      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a76      	ldr	r2, [pc, #472]	@ (80038ac <HAL_DMA_IRQHandler+0x6b8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a74      	ldr	r2, [pc, #464]	@ (80038b0 <HAL_DMA_IRQHandler+0x6bc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a73      	ldr	r2, [pc, #460]	@ (80038b4 <HAL_DMA_IRQHandler+0x6c0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a71      	ldr	r2, [pc, #452]	@ (80038b8 <HAL_DMA_IRQHandler+0x6c4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a70      	ldr	r2, [pc, #448]	@ (80038bc <HAL_DMA_IRQHandler+0x6c8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6e      	ldr	r2, [pc, #440]	@ (80038c0 <HAL_DMA_IRQHandler+0x6cc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d10a      	bne.n	8003720 <HAL_DMA_IRQHandler+0x52c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e009      	b.n	8003734 <HAL_DMA_IRQHandler+0x540>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	bf14      	ite	ne
 800372e:	2301      	movne	r3, #1
 8003730:	2300      	moveq	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03e      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2210      	movs	r2, #16
 8003742:	409a      	lsls	r2, r3
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d108      	bne.n	8003776 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d024      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
 8003774:	e01f      	b.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01b      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
 8003786:	e016      	b.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0208 	bic.w	r2, r2, #8
 80037a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2220      	movs	r2, #32
 80037c0:	409a      	lsls	r2, r3
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8110 	beq.w	80039ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003884 <HAL_DMA_IRQHandler+0x690>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d04a      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2b      	ldr	r2, [pc, #172]	@ (8003888 <HAL_DMA_IRQHandler+0x694>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d045      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a29      	ldr	r2, [pc, #164]	@ (800388c <HAL_DMA_IRQHandler+0x698>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d040      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a28      	ldr	r2, [pc, #160]	@ (8003890 <HAL_DMA_IRQHandler+0x69c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d03b      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a26      	ldr	r2, [pc, #152]	@ (8003894 <HAL_DMA_IRQHandler+0x6a0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d036      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a25      	ldr	r2, [pc, #148]	@ (8003898 <HAL_DMA_IRQHandler+0x6a4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d031      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a23      	ldr	r2, [pc, #140]	@ (800389c <HAL_DMA_IRQHandler+0x6a8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02c      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a22      	ldr	r2, [pc, #136]	@ (80038a0 <HAL_DMA_IRQHandler+0x6ac>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d027      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a20      	ldr	r2, [pc, #128]	@ (80038a4 <HAL_DMA_IRQHandler+0x6b0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d022      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1f      	ldr	r2, [pc, #124]	@ (80038a8 <HAL_DMA_IRQHandler+0x6b4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d01d      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1d      	ldr	r2, [pc, #116]	@ (80038ac <HAL_DMA_IRQHandler+0x6b8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d018      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1c      	ldr	r2, [pc, #112]	@ (80038b0 <HAL_DMA_IRQHandler+0x6bc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1a      	ldr	r2, [pc, #104]	@ (80038b4 <HAL_DMA_IRQHandler+0x6c0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00e      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a19      	ldr	r2, [pc, #100]	@ (80038b8 <HAL_DMA_IRQHandler+0x6c4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d009      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a17      	ldr	r2, [pc, #92]	@ (80038bc <HAL_DMA_IRQHandler+0x6c8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a16      	ldr	r2, [pc, #88]	@ (80038c0 <HAL_DMA_IRQHandler+0x6cc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d12b      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x6d0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e02a      	b.n	80038d8 <HAL_DMA_IRQHandler+0x6e4>
 8003882:	bf00      	nop
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	40020040 	.word	0x40020040
 8003890:	40020058 	.word	0x40020058
 8003894:	40020070 	.word	0x40020070
 8003898:	40020088 	.word	0x40020088
 800389c:	400200a0 	.word	0x400200a0
 80038a0:	400200b8 	.word	0x400200b8
 80038a4:	40020410 	.word	0x40020410
 80038a8:	40020428 	.word	0x40020428
 80038ac:	40020440 	.word	0x40020440
 80038b0:	40020458 	.word	0x40020458
 80038b4:	40020470 	.word	0x40020470
 80038b8:	40020488 	.word	0x40020488
 80038bc:	400204a0 	.word	0x400204a0
 80038c0:	400204b8 	.word	0x400204b8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8087 	beq.w	80039ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	2220      	movs	r2, #32
 80038e8:	409a      	lsls	r2, r3
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d139      	bne.n	800396e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0216 	bic.w	r2, r2, #22
 8003908:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003918:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <HAL_DMA_IRQHandler+0x736>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0208 	bic.w	r2, r2, #8
 8003938:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	223f      	movs	r2, #63	@ 0x3f
 8003944:	409a      	lsls	r2, r3
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 834a 	beq.w	8003ff8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
          }
          return;
 800396c:	e344      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d018      	beq.n	80039ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	2b00      	cmp	r3, #0
 8003990:	d02c      	beq.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
 800399a:	e027      	b.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d023      	beq.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e01e      	b.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10f      	bne.n	80039dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0210 	bic.w	r2, r2, #16
 80039ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8306 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8088 	beq.w	8003b14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a7a      	ldr	r2, [pc, #488]	@ (8003bfc <HAL_DMA_IRQHandler+0xa08>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d04a      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a79      	ldr	r2, [pc, #484]	@ (8003c00 <HAL_DMA_IRQHandler+0xa0c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d045      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a77      	ldr	r2, [pc, #476]	@ (8003c04 <HAL_DMA_IRQHandler+0xa10>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d040      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a76      	ldr	r2, [pc, #472]	@ (8003c08 <HAL_DMA_IRQHandler+0xa14>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d03b      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a74      	ldr	r2, [pc, #464]	@ (8003c0c <HAL_DMA_IRQHandler+0xa18>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d036      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a73      	ldr	r2, [pc, #460]	@ (8003c10 <HAL_DMA_IRQHandler+0xa1c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d031      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a71      	ldr	r2, [pc, #452]	@ (8003c14 <HAL_DMA_IRQHandler+0xa20>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02c      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a70      	ldr	r2, [pc, #448]	@ (8003c18 <HAL_DMA_IRQHandler+0xa24>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d027      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6e      	ldr	r2, [pc, #440]	@ (8003c1c <HAL_DMA_IRQHandler+0xa28>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d022      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6d      	ldr	r2, [pc, #436]	@ (8003c20 <HAL_DMA_IRQHandler+0xa2c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d01d      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6b      	ldr	r2, [pc, #428]	@ (8003c24 <HAL_DMA_IRQHandler+0xa30>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d018      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a6a      	ldr	r2, [pc, #424]	@ (8003c28 <HAL_DMA_IRQHandler+0xa34>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a68      	ldr	r2, [pc, #416]	@ (8003c2c <HAL_DMA_IRQHandler+0xa38>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a67      	ldr	r2, [pc, #412]	@ (8003c30 <HAL_DMA_IRQHandler+0xa3c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a65      	ldr	r2, [pc, #404]	@ (8003c34 <HAL_DMA_IRQHandler+0xa40>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a64      	ldr	r2, [pc, #400]	@ (8003c38 <HAL_DMA_IRQHandler+0xa44>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d108      	bne.n	8003abe <HAL_DMA_IRQHandler+0x8ca>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e007      	b.n	8003ace <HAL_DMA_IRQHandler+0x8da>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d307      	bcc.n	8003aea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f2      	bne.n	8003ace <HAL_DMA_IRQHandler+0x8da>
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003aea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b02:	e003      	b.n	8003b0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8272 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
 8003b26:	e26c      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a43      	ldr	r2, [pc, #268]	@ (8003c3c <HAL_DMA_IRQHandler+0xa48>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a42      	ldr	r2, [pc, #264]	@ (8003c40 <HAL_DMA_IRQHandler+0xa4c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a40      	ldr	r2, [pc, #256]	@ (8003c44 <HAL_DMA_IRQHandler+0xa50>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c48 <HAL_DMA_IRQHandler+0xa54>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a3d      	ldr	r2, [pc, #244]	@ (8003c4c <HAL_DMA_IRQHandler+0xa58>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3c      	ldr	r2, [pc, #240]	@ (8003c50 <HAL_DMA_IRQHandler+0xa5c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3a      	ldr	r2, [pc, #232]	@ (8003c54 <HAL_DMA_IRQHandler+0xa60>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a39      	ldr	r2, [pc, #228]	@ (8003c58 <HAL_DMA_IRQHandler+0xa64>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_IRQHandler+0x988>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_DMA_IRQHandler+0x98a>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 823f 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2204      	movs	r2, #4
 8003b96:	409a      	lsls	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80cd 	beq.w	8003d3c <HAL_DMA_IRQHandler+0xb48>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80c7 	beq.w	8003d3c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d049      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8210 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be4:	e20a      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8206 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf8:	e200      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe08>
 8003bfa:	bf00      	nop
 8003bfc:	40020010 	.word	0x40020010
 8003c00:	40020028 	.word	0x40020028
 8003c04:	40020040 	.word	0x40020040
 8003c08:	40020058 	.word	0x40020058
 8003c0c:	40020070 	.word	0x40020070
 8003c10:	40020088 	.word	0x40020088
 8003c14:	400200a0 	.word	0x400200a0
 8003c18:	400200b8 	.word	0x400200b8
 8003c1c:	40020410 	.word	0x40020410
 8003c20:	40020428 	.word	0x40020428
 8003c24:	40020440 	.word	0x40020440
 8003c28:	40020458 	.word	0x40020458
 8003c2c:	40020470 	.word	0x40020470
 8003c30:	40020488 	.word	0x40020488
 8003c34:	400204a0 	.word	0x400204a0
 8003c38:	400204b8 	.word	0x400204b8
 8003c3c:	58025408 	.word	0x58025408
 8003c40:	5802541c 	.word	0x5802541c
 8003c44:	58025430 	.word	0x58025430
 8003c48:	58025444 	.word	0x58025444
 8003c4c:	58025458 	.word	0x58025458
 8003c50:	5802546c 	.word	0x5802546c
 8003c54:	58025480 	.word	0x58025480
 8003c58:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d160      	bne.n	8003d28 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e68 <HAL_DMA_IRQHandler+0xc74>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d04a      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a7d      	ldr	r2, [pc, #500]	@ (8003e6c <HAL_DMA_IRQHandler+0xc78>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d045      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e70 <HAL_DMA_IRQHandler+0xc7c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d040      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a7a      	ldr	r2, [pc, #488]	@ (8003e74 <HAL_DMA_IRQHandler+0xc80>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a79      	ldr	r2, [pc, #484]	@ (8003e78 <HAL_DMA_IRQHandler+0xc84>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a77      	ldr	r2, [pc, #476]	@ (8003e7c <HAL_DMA_IRQHandler+0xc88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a76      	ldr	r2, [pc, #472]	@ (8003e80 <HAL_DMA_IRQHandler+0xc8c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d02c      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a74      	ldr	r2, [pc, #464]	@ (8003e84 <HAL_DMA_IRQHandler+0xc90>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d027      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a73      	ldr	r2, [pc, #460]	@ (8003e88 <HAL_DMA_IRQHandler+0xc94>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a71      	ldr	r2, [pc, #452]	@ (8003e8c <HAL_DMA_IRQHandler+0xc98>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a70      	ldr	r2, [pc, #448]	@ (8003e90 <HAL_DMA_IRQHandler+0xc9c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6e      	ldr	r2, [pc, #440]	@ (8003e94 <HAL_DMA_IRQHandler+0xca0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6d      	ldr	r2, [pc, #436]	@ (8003e98 <HAL_DMA_IRQHandler+0xca4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6b      	ldr	r2, [pc, #428]	@ (8003e9c <HAL_DMA_IRQHandler+0xca8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6a      	ldr	r2, [pc, #424]	@ (8003ea0 <HAL_DMA_IRQHandler+0xcac>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a68      	ldr	r2, [pc, #416]	@ (8003ea4 <HAL_DMA_IRQHandler+0xcb0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <HAL_DMA_IRQHandler+0xb24>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0208 	bic.w	r2, r2, #8
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e007      	b.n	8003d28 <HAL_DMA_IRQHandler+0xb34>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0204 	bic.w	r2, r2, #4
 8003d26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8165 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d3a:	e15f      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2202      	movs	r2, #2
 8003d46:	409a      	lsls	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80c5 	beq.w	8003edc <HAL_DMA_IRQHandler+0xce8>
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80bf 	beq.w	8003edc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2202      	movs	r2, #2
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 813a 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d94:	e134      	b.n	8004000 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8130 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da8:	e12a      	b.n	8004000 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 8089 	bne.w	8003ec8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2b      	ldr	r2, [pc, #172]	@ (8003e68 <HAL_DMA_IRQHandler+0xc74>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d04a      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a29      	ldr	r2, [pc, #164]	@ (8003e6c <HAL_DMA_IRQHandler+0xc78>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d045      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a28      	ldr	r2, [pc, #160]	@ (8003e70 <HAL_DMA_IRQHandler+0xc7c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d040      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a26      	ldr	r2, [pc, #152]	@ (8003e74 <HAL_DMA_IRQHandler+0xc80>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d03b      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a25      	ldr	r2, [pc, #148]	@ (8003e78 <HAL_DMA_IRQHandler+0xc84>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d036      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a23      	ldr	r2, [pc, #140]	@ (8003e7c <HAL_DMA_IRQHandler+0xc88>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d031      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a22      	ldr	r2, [pc, #136]	@ (8003e80 <HAL_DMA_IRQHandler+0xc8c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d02c      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a20      	ldr	r2, [pc, #128]	@ (8003e84 <HAL_DMA_IRQHandler+0xc90>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d027      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e88 <HAL_DMA_IRQHandler+0xc94>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1d      	ldr	r2, [pc, #116]	@ (8003e8c <HAL_DMA_IRQHandler+0xc98>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01d      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e90 <HAL_DMA_IRQHandler+0xc9c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d018      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1a      	ldr	r2, [pc, #104]	@ (8003e94 <HAL_DMA_IRQHandler+0xca0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a19      	ldr	r2, [pc, #100]	@ (8003e98 <HAL_DMA_IRQHandler+0xca4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	@ (8003e9c <HAL_DMA_IRQHandler+0xca8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a16      	ldr	r2, [pc, #88]	@ (8003ea0 <HAL_DMA_IRQHandler+0xcac>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a14      	ldr	r2, [pc, #80]	@ (8003ea4 <HAL_DMA_IRQHandler+0xcb0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d128      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0xcb4>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0214 	bic.w	r2, r2, #20
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e027      	b.n	8003eb8 <HAL_DMA_IRQHandler+0xcc4>
 8003e68:	40020010 	.word	0x40020010
 8003e6c:	40020028 	.word	0x40020028
 8003e70:	40020040 	.word	0x40020040
 8003e74:	40020058 	.word	0x40020058
 8003e78:	40020070 	.word	0x40020070
 8003e7c:	40020088 	.word	0x40020088
 8003e80:	400200a0 	.word	0x400200a0
 8003e84:	400200b8 	.word	0x400200b8
 8003e88:	40020410 	.word	0x40020410
 8003e8c:	40020428 	.word	0x40020428
 8003e90:	40020440 	.word	0x40020440
 8003e94:	40020458 	.word	0x40020458
 8003e98:	40020470 	.word	0x40020470
 8003e9c:	40020488 	.word	0x40020488
 8003ea0:	400204a0 	.word	0x400204a0
 8003ea4:	400204b8 	.word	0x400204b8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 020a 	bic.w	r2, r2, #10
 8003eb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8097 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eda:	e091      	b.n	8004000 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8088 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8082 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a41      	ldr	r2, [pc, #260]	@ (8004008 <HAL_DMA_IRQHandler+0xe14>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d04a      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800400c <HAL_DMA_IRQHandler+0xe18>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d045      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a3e      	ldr	r2, [pc, #248]	@ (8004010 <HAL_DMA_IRQHandler+0xe1c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d040      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a3c      	ldr	r2, [pc, #240]	@ (8004014 <HAL_DMA_IRQHandler+0xe20>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d03b      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3b      	ldr	r2, [pc, #236]	@ (8004018 <HAL_DMA_IRQHandler+0xe24>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d036      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a39      	ldr	r2, [pc, #228]	@ (800401c <HAL_DMA_IRQHandler+0xe28>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d031      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a38      	ldr	r2, [pc, #224]	@ (8004020 <HAL_DMA_IRQHandler+0xe2c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d02c      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a36      	ldr	r2, [pc, #216]	@ (8004024 <HAL_DMA_IRQHandler+0xe30>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d027      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a35      	ldr	r2, [pc, #212]	@ (8004028 <HAL_DMA_IRQHandler+0xe34>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d022      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a33      	ldr	r2, [pc, #204]	@ (800402c <HAL_DMA_IRQHandler+0xe38>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01d      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a32      	ldr	r2, [pc, #200]	@ (8004030 <HAL_DMA_IRQHandler+0xe3c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a30      	ldr	r2, [pc, #192]	@ (8004034 <HAL_DMA_IRQHandler+0xe40>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004038 <HAL_DMA_IRQHandler+0xe44>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2d      	ldr	r2, [pc, #180]	@ (800403c <HAL_DMA_IRQHandler+0xe48>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004040 <HAL_DMA_IRQHandler+0xe4c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	@ (8004044 <HAL_DMA_IRQHandler+0xe50>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0xdbc>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 021c 	bic.w	r2, r2, #28
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e007      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xdcc>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 020e 	bic.w	r2, r2, #14
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2201      	movs	r2, #1
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
 8003ff6:	e004      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ff8:	bf00      	nop
 8003ffa:	e002      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ffc:	bf00      	nop
 8003ffe:	e000      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004000:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004002:	3728      	adds	r7, #40	@ 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40020010 	.word	0x40020010
 800400c:	40020028 	.word	0x40020028
 8004010:	40020040 	.word	0x40020040
 8004014:	40020058 	.word	0x40020058
 8004018:	40020070 	.word	0x40020070
 800401c:	40020088 	.word	0x40020088
 8004020:	400200a0 	.word	0x400200a0
 8004024:	400200b8 	.word	0x400200b8
 8004028:	40020410 	.word	0x40020410
 800402c:	40020428 	.word	0x40020428
 8004030:	40020440 	.word	0x40020440
 8004034:	40020458 	.word	0x40020458
 8004038:	40020470 	.word	0x40020470
 800403c:	40020488 	.word	0x40020488
 8004040:	400204a0 	.word	0x400204a0
 8004044:	400204b8 	.word	0x400204b8

08004048 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7f      	ldr	r2, [pc, #508]	@ (8004264 <DMA_SetConfig+0x21c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d072      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a7d      	ldr	r2, [pc, #500]	@ (8004268 <DMA_SetConfig+0x220>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d06d      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7c      	ldr	r2, [pc, #496]	@ (800426c <DMA_SetConfig+0x224>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d068      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a7a      	ldr	r2, [pc, #488]	@ (8004270 <DMA_SetConfig+0x228>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d063      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a79      	ldr	r2, [pc, #484]	@ (8004274 <DMA_SetConfig+0x22c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d05e      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a77      	ldr	r2, [pc, #476]	@ (8004278 <DMA_SetConfig+0x230>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d059      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a76      	ldr	r2, [pc, #472]	@ (800427c <DMA_SetConfig+0x234>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d054      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a74      	ldr	r2, [pc, #464]	@ (8004280 <DMA_SetConfig+0x238>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04f      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a73      	ldr	r2, [pc, #460]	@ (8004284 <DMA_SetConfig+0x23c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d04a      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a71      	ldr	r2, [pc, #452]	@ (8004288 <DMA_SetConfig+0x240>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d045      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a70      	ldr	r2, [pc, #448]	@ (800428c <DMA_SetConfig+0x244>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d040      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004290 <DMA_SetConfig+0x248>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d03b      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6d      	ldr	r2, [pc, #436]	@ (8004294 <DMA_SetConfig+0x24c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d036      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004298 <DMA_SetConfig+0x250>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d031      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6a      	ldr	r2, [pc, #424]	@ (800429c <DMA_SetConfig+0x254>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d02c      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a68      	ldr	r2, [pc, #416]	@ (80042a0 <DMA_SetConfig+0x258>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d027      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a67      	ldr	r2, [pc, #412]	@ (80042a4 <DMA_SetConfig+0x25c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d022      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a65      	ldr	r2, [pc, #404]	@ (80042a8 <DMA_SetConfig+0x260>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01d      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a64      	ldr	r2, [pc, #400]	@ (80042ac <DMA_SetConfig+0x264>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d018      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a62      	ldr	r2, [pc, #392]	@ (80042b0 <DMA_SetConfig+0x268>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a61      	ldr	r2, [pc, #388]	@ (80042b4 <DMA_SetConfig+0x26c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a5f      	ldr	r2, [pc, #380]	@ (80042b8 <DMA_SetConfig+0x270>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a5e      	ldr	r2, [pc, #376]	@ (80042bc <DMA_SetConfig+0x274>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a5c      	ldr	r2, [pc, #368]	@ (80042c0 <DMA_SetConfig+0x278>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <DMA_SetConfig+0x10e>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <DMA_SetConfig+0x110>
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004164:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d004      	beq.n	8004178 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004176:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a39      	ldr	r2, [pc, #228]	@ (8004264 <DMA_SetConfig+0x21c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a38      	ldr	r2, [pc, #224]	@ (8004268 <DMA_SetConfig+0x220>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a36      	ldr	r2, [pc, #216]	@ (800426c <DMA_SetConfig+0x224>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a35      	ldr	r2, [pc, #212]	@ (8004270 <DMA_SetConfig+0x228>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a33      	ldr	r2, [pc, #204]	@ (8004274 <DMA_SetConfig+0x22c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a32      	ldr	r2, [pc, #200]	@ (8004278 <DMA_SetConfig+0x230>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a30      	ldr	r2, [pc, #192]	@ (800427c <DMA_SetConfig+0x234>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004280 <DMA_SetConfig+0x238>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004284 <DMA_SetConfig+0x23c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004288 <DMA_SetConfig+0x240>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	@ (800428c <DMA_SetConfig+0x244>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a29      	ldr	r2, [pc, #164]	@ (8004290 <DMA_SetConfig+0x248>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a27      	ldr	r2, [pc, #156]	@ (8004294 <DMA_SetConfig+0x24c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a26      	ldr	r2, [pc, #152]	@ (8004298 <DMA_SetConfig+0x250>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a24      	ldr	r2, [pc, #144]	@ (800429c <DMA_SetConfig+0x254>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a23      	ldr	r2, [pc, #140]	@ (80042a0 <DMA_SetConfig+0x258>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <DMA_SetConfig+0x1d4>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <DMA_SetConfig+0x1d6>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d059      	beq.n	80042d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	223f      	movs	r2, #63	@ 0x3f
 800422c:	409a      	lsls	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004240:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b40      	cmp	r3, #64	@ 0x40
 8004250:	d138      	bne.n	80042c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004262:	e086      	b.n	8004372 <DMA_SetConfig+0x32a>
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
 80042a4:	58025408 	.word	0x58025408
 80042a8:	5802541c 	.word	0x5802541c
 80042ac:	58025430 	.word	0x58025430
 80042b0:	58025444 	.word	0x58025444
 80042b4:	58025458 	.word	0x58025458
 80042b8:	5802546c 	.word	0x5802546c
 80042bc:	58025480 	.word	0x58025480
 80042c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]
}
 80042d4:	e04d      	b.n	8004372 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a29      	ldr	r2, [pc, #164]	@ (8004380 <DMA_SetConfig+0x338>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a27      	ldr	r2, [pc, #156]	@ (8004384 <DMA_SetConfig+0x33c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01d      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a26      	ldr	r2, [pc, #152]	@ (8004388 <DMA_SetConfig+0x340>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a24      	ldr	r2, [pc, #144]	@ (800438c <DMA_SetConfig+0x344>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a23      	ldr	r2, [pc, #140]	@ (8004390 <DMA_SetConfig+0x348>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <DMA_SetConfig+0x2de>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a21      	ldr	r2, [pc, #132]	@ (8004394 <DMA_SetConfig+0x34c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <DMA_SetConfig+0x2de>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a20      	ldr	r2, [pc, #128]	@ (8004398 <DMA_SetConfig+0x350>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <DMA_SetConfig+0x2de>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1e      	ldr	r2, [pc, #120]	@ (800439c <DMA_SetConfig+0x354>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <DMA_SetConfig+0x2e2>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <DMA_SetConfig+0x2e4>
 800432a:	2300      	movs	r3, #0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2201      	movs	r2, #1
 800433a:	409a      	lsls	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	d108      	bne.n	8004362 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	60da      	str	r2, [r3, #12]
}
 8004360:	e007      	b.n	8004372 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	60da      	str	r2, [r3, #12]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	58025408 	.word	0x58025408
 8004384:	5802541c 	.word	0x5802541c
 8004388:	58025430 	.word	0x58025430
 800438c:	58025444 	.word	0x58025444
 8004390:	58025458 	.word	0x58025458
 8004394:	5802546c 	.word	0x5802546c
 8004398:	58025480 	.word	0x58025480
 800439c:	58025494 	.word	0x58025494

080043a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a42      	ldr	r2, [pc, #264]	@ (80044b8 <DMA_CalcBaseAndBitshift+0x118>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d04a      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a41      	ldr	r2, [pc, #260]	@ (80044bc <DMA_CalcBaseAndBitshift+0x11c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d045      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3f      	ldr	r2, [pc, #252]	@ (80044c0 <DMA_CalcBaseAndBitshift+0x120>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d040      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3e      	ldr	r2, [pc, #248]	@ (80044c4 <DMA_CalcBaseAndBitshift+0x124>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d03b      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3c      	ldr	r2, [pc, #240]	@ (80044c8 <DMA_CalcBaseAndBitshift+0x128>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d036      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a3b      	ldr	r2, [pc, #236]	@ (80044cc <DMA_CalcBaseAndBitshift+0x12c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d031      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a39      	ldr	r2, [pc, #228]	@ (80044d0 <DMA_CalcBaseAndBitshift+0x130>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02c      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a38      	ldr	r2, [pc, #224]	@ (80044d4 <DMA_CalcBaseAndBitshift+0x134>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d027      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a36      	ldr	r2, [pc, #216]	@ (80044d8 <DMA_CalcBaseAndBitshift+0x138>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a35      	ldr	r2, [pc, #212]	@ (80044dc <DMA_CalcBaseAndBitshift+0x13c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a33      	ldr	r2, [pc, #204]	@ (80044e0 <DMA_CalcBaseAndBitshift+0x140>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a32      	ldr	r2, [pc, #200]	@ (80044e4 <DMA_CalcBaseAndBitshift+0x144>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a30      	ldr	r2, [pc, #192]	@ (80044e8 <DMA_CalcBaseAndBitshift+0x148>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	@ (80044ec <DMA_CalcBaseAndBitshift+0x14c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2d      	ldr	r2, [pc, #180]	@ (80044f0 <DMA_CalcBaseAndBitshift+0x150>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2c      	ldr	r2, [pc, #176]	@ (80044f4 <DMA_CalcBaseAndBitshift+0x154>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <DMA_CalcBaseAndBitshift+0xac>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <DMA_CalcBaseAndBitshift+0xae>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d024      	beq.n	800449c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	3b10      	subs	r3, #16
 800445a:	4a27      	ldr	r2, [pc, #156]	@ (80044f8 <DMA_CalcBaseAndBitshift+0x158>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	4a24      	ldr	r2, [pc, #144]	@ (80044fc <DMA_CalcBaseAndBitshift+0x15c>)
 800446c:	5cd3      	ldrb	r3, [r2, r3]
 800446e:	461a      	mov	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d908      	bls.n	800448c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	4b1f      	ldr	r3, [pc, #124]	@ (8004500 <DMA_CalcBaseAndBitshift+0x160>)
 8004482:	4013      	ands	r3, r2
 8004484:	1d1a      	adds	r2, r3, #4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	659a      	str	r2, [r3, #88]	@ 0x58
 800448a:	e00d      	b.n	80044a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <DMA_CalcBaseAndBitshift+0x160>)
 8004494:	4013      	ands	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6593      	str	r3, [r2, #88]	@ 0x58
 800449a:	e005      	b.n	80044a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40020010 	.word	0x40020010
 80044bc:	40020028 	.word	0x40020028
 80044c0:	40020040 	.word	0x40020040
 80044c4:	40020058 	.word	0x40020058
 80044c8:	40020070 	.word	0x40020070
 80044cc:	40020088 	.word	0x40020088
 80044d0:	400200a0 	.word	0x400200a0
 80044d4:	400200b8 	.word	0x400200b8
 80044d8:	40020410 	.word	0x40020410
 80044dc:	40020428 	.word	0x40020428
 80044e0:	40020440 	.word	0x40020440
 80044e4:	40020458 	.word	0x40020458
 80044e8:	40020470 	.word	0x40020470
 80044ec:	40020488 	.word	0x40020488
 80044f0:	400204a0 	.word	0x400204a0
 80044f4:	400204b8 	.word	0x400204b8
 80044f8:	aaaaaaab 	.word	0xaaaaaaab
 80044fc:	0800da54 	.word	0x0800da54
 8004500:	fffffc00 	.word	0xfffffc00

08004504 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d120      	bne.n	800455a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451c:	2b03      	cmp	r3, #3
 800451e:	d858      	bhi.n	80045d2 <DMA_CheckFifoParam+0xce>
 8004520:	a201      	add	r2, pc, #4	@ (adr r2, 8004528 <DMA_CheckFifoParam+0x24>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	08004539 	.word	0x08004539
 800452c:	0800454b 	.word	0x0800454b
 8004530:	08004539 	.word	0x08004539
 8004534:	080045d3 	.word	0x080045d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d048      	beq.n	80045d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004548:	e045      	b.n	80045d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004552:	d142      	bne.n	80045da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004558:	e03f      	b.n	80045da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004562:	d123      	bne.n	80045ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	2b03      	cmp	r3, #3
 800456a:	d838      	bhi.n	80045de <DMA_CheckFifoParam+0xda>
 800456c:	a201      	add	r2, pc, #4	@ (adr r2, 8004574 <DMA_CheckFifoParam+0x70>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004585 	.word	0x08004585
 8004578:	0800458b 	.word	0x0800458b
 800457c:	08004585 	.word	0x08004585
 8004580:	0800459d 	.word	0x0800459d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
        break;
 8004588:	e030      	b.n	80045ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d025      	beq.n	80045e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800459a:	e022      	b.n	80045e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045a4:	d11f      	bne.n	80045e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045aa:	e01c      	b.n	80045e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d902      	bls.n	80045ba <DMA_CheckFifoParam+0xb6>
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d003      	beq.n	80045c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045b8:	e018      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
        break;
 80045be:	e015      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
    break;
 80045d0:	e00b      	b.n	80045ea <DMA_CheckFifoParam+0xe6>
        break;
 80045d2:	bf00      	nop
 80045d4:	e00a      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045d6:	bf00      	nop
 80045d8:	e008      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045da:	bf00      	nop
 80045dc:	e006      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045de:	bf00      	nop
 80045e0:	e004      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
    break;
 80045ea:	bf00      	nop
    }
  }

  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop

080045fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a38      	ldr	r2, [pc, #224]	@ (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d022      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a36      	ldr	r2, [pc, #216]	@ (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01d      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a35      	ldr	r2, [pc, #212]	@ (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a33      	ldr	r2, [pc, #204]	@ (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a32      	ldr	r2, [pc, #200]	@ (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a30      	ldr	r2, [pc, #192]	@ (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2f      	ldr	r2, [pc, #188]	@ (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2d      	ldr	r2, [pc, #180]	@ (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d101      	bne.n	800465e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01a      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	3b08      	subs	r3, #8
 800466c:	4a28      	ldr	r2, [pc, #160]	@ (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4b26      	ldr	r3, [pc, #152]	@ (8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a24      	ldr	r2, [pc, #144]	@ (8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004688:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	2201      	movs	r2, #1
 8004692:	409a      	lsls	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004698:	e024      	b.n	80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3b10      	subs	r3, #16
 80046a2:	4a1e      	ldr	r2, [pc, #120]	@ (800471c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004720 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d806      	bhi.n	80046c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d902      	bls.n	80046c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3308      	adds	r3, #8
 80046c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4b18      	ldr	r3, [pc, #96]	@ (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	461a      	mov	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a16      	ldr	r2, [pc, #88]	@ (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	58025408 	.word	0x58025408
 80046f4:	5802541c 	.word	0x5802541c
 80046f8:	58025430 	.word	0x58025430
 80046fc:	58025444 	.word	0x58025444
 8004700:	58025458 	.word	0x58025458
 8004704:	5802546c 	.word	0x5802546c
 8004708:	58025480 	.word	0x58025480
 800470c:	58025494 	.word	0x58025494
 8004710:	cccccccd 	.word	0xcccccccd
 8004714:	16009600 	.word	0x16009600
 8004718:	58025880 	.word	0x58025880
 800471c:	aaaaaaab 	.word	0xaaaaaaab
 8004720:	400204b8 	.word	0x400204b8
 8004724:	4002040f 	.word	0x4002040f
 8004728:	10008200 	.word	0x10008200
 800472c:	40020880 	.word	0x40020880

08004730 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04a      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d847      	bhi.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a25      	ldr	r2, [pc, #148]	@ (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a24      	ldr	r2, [pc, #144]	@ (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d01d      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a22      	ldr	r2, [pc, #136]	@ (80047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a21      	ldr	r2, [pc, #132]	@ (80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1f      	ldr	r2, [pc, #124]	@ (80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1e      	ldr	r2, [pc, #120]	@ (80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1c      	ldr	r2, [pc, #112]	@ (8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1b      	ldr	r2, [pc, #108]	@ (8004804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d101      	bne.n	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047a0:	2300      	movs	r3, #0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4b17      	ldr	r3, [pc, #92]	@ (8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a15      	ldr	r2, [pc, #84]	@ (800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80047ba:	e009      	b.n	80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4b14      	ldr	r3, [pc, #80]	@ (8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	461a      	mov	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a11      	ldr	r2, [pc, #68]	@ (8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047ce:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	2201      	movs	r2, #1
 80047d6:	409a      	lsls	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	58025408 	.word	0x58025408
 80047ec:	5802541c 	.word	0x5802541c
 80047f0:	58025430 	.word	0x58025430
 80047f4:	58025444 	.word	0x58025444
 80047f8:	58025458 	.word	0x58025458
 80047fc:	5802546c 	.word	0x5802546c
 8004800:	58025480 	.word	0x58025480
 8004804:	58025494 	.word	0x58025494
 8004808:	1600963f 	.word	0x1600963f
 800480c:	58025940 	.word	0x58025940
 8004810:	1000823f 	.word	0x1000823f
 8004814:	40020940 	.word	0x40020940

08004818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004826:	4b86      	ldr	r3, [pc, #536]	@ (8004a40 <HAL_GPIO_Init+0x228>)
 8004828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800482a:	e18c      	b.n	8004b46 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 817e 	beq.w	8004b40 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d005      	beq.n	800485c <HAL_GPIO_Init+0x44>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d130      	bne.n	80048be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004892:	2201      	movs	r2, #1
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0201 	and.w	r2, r3, #1
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d017      	beq.n	80048fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d123      	bne.n	800494e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	08da      	lsrs	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3208      	adds	r2, #8
 800490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	220f      	movs	r2, #15
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	08da      	lsrs	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3208      	adds	r2, #8
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	2203      	movs	r2, #3
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43db      	mvns	r3, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4013      	ands	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0203 	and.w	r2, r3, #3
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80d8 	beq.w	8004b40 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004990:	4b2c      	ldr	r3, [pc, #176]	@ (8004a44 <HAL_GPIO_Init+0x22c>)
 8004992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004996:	4a2b      	ldr	r2, [pc, #172]	@ (8004a44 <HAL_GPIO_Init+0x22c>)
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80049a0:	4b28      	ldr	r3, [pc, #160]	@ (8004a44 <HAL_GPIO_Init+0x22c>)
 80049a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ae:	4a26      	ldr	r2, [pc, #152]	@ (8004a48 <HAL_GPIO_Init+0x230>)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	3302      	adds	r3, #2
 80049b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	220f      	movs	r2, #15
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a4c <HAL_GPIO_Init+0x234>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d04a      	beq.n	8004a70 <HAL_GPIO_Init+0x258>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a50 <HAL_GPIO_Init+0x238>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <HAL_GPIO_Init+0x222>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a54 <HAL_GPIO_Init+0x23c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d025      	beq.n	8004a36 <HAL_GPIO_Init+0x21e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004a58 <HAL_GPIO_Init+0x240>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01f      	beq.n	8004a32 <HAL_GPIO_Init+0x21a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a19      	ldr	r2, [pc, #100]	@ (8004a5c <HAL_GPIO_Init+0x244>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d019      	beq.n	8004a2e <HAL_GPIO_Init+0x216>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a18      	ldr	r2, [pc, #96]	@ (8004a60 <HAL_GPIO_Init+0x248>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_GPIO_Init+0x212>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <HAL_GPIO_Init+0x24c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00d      	beq.n	8004a26 <HAL_GPIO_Init+0x20e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <HAL_GPIO_Init+0x250>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <HAL_GPIO_Init+0x20a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <HAL_GPIO_Init+0x254>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_GPIO_Init+0x206>
 8004a1a:	2309      	movs	r3, #9
 8004a1c:	e029      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a1e:	230a      	movs	r3, #10
 8004a20:	e027      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a22:	2307      	movs	r3, #7
 8004a24:	e025      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a26:	2306      	movs	r3, #6
 8004a28:	e023      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a2a:	2305      	movs	r3, #5
 8004a2c:	e021      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a2e:	2304      	movs	r3, #4
 8004a30:	e01f      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a32:	2303      	movs	r3, #3
 8004a34:	e01d      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e01b      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e019      	b.n	8004a72 <HAL_GPIO_Init+0x25a>
 8004a3e:	bf00      	nop
 8004a40:	58000080 	.word	0x58000080
 8004a44:	58024400 	.word	0x58024400
 8004a48:	58000400 	.word	0x58000400
 8004a4c:	58020000 	.word	0x58020000
 8004a50:	58020400 	.word	0x58020400
 8004a54:	58020800 	.word	0x58020800
 8004a58:	58020c00 	.word	0x58020c00
 8004a5c:	58021000 	.word	0x58021000
 8004a60:	58021400 	.word	0x58021400
 8004a64:	58021800 	.word	0x58021800
 8004a68:	58021c00 	.word	0x58021c00
 8004a6c:	58022400 	.word	0x58022400
 8004a70:	2300      	movs	r3, #0
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	f002 0203 	and.w	r2, r2, #3
 8004a78:	0092      	lsls	r2, r2, #2
 8004a7a:	4093      	lsls	r3, r2
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a82:	4938      	ldr	r1, [pc, #224]	@ (8004b64 <HAL_GPIO_Init+0x34c>)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	3302      	adds	r3, #2
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ab6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ae4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3301      	adds	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f ae6b 	bne.w	800482c <HAL_GPIO_Init+0x14>
  }
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	3724      	adds	r7, #36	@ 0x24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	58000400 	.word	0x58000400

08004b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	807b      	strh	r3, [r7, #2]
 8004b74:	4613      	mov	r3, r2
 8004b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b78:	787b      	ldrb	r3, [r7, #1]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b7e:	887a      	ldrh	r2, [r7, #2]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b84:	e003      	b.n	8004b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b86:	887b      	ldrh	r3, [r7, #2]
 8004b88:	041a      	lsls	r2, r3, #16
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	619a      	str	r2, [r3, #24]
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ba4:	4b19      	ldr	r3, [pc, #100]	@ (8004c0c <HAL_PWREx_ConfigSupply+0x70>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d00a      	beq.n	8004bc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bb0:	4b16      	ldr	r3, [pc, #88]	@ (8004c0c <HAL_PWREx_ConfigSupply+0x70>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d001      	beq.n	8004bc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e01f      	b.n	8004c02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e01d      	b.n	8004c02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bc6:	4b11      	ldr	r3, [pc, #68]	@ (8004c0c <HAL_PWREx_ConfigSupply+0x70>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f023 0207 	bic.w	r2, r3, #7
 8004bce:	490f      	ldr	r1, [pc, #60]	@ (8004c0c <HAL_PWREx_ConfigSupply+0x70>)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bd6:	f7fc fea7 	bl	8001928 <HAL_GetTick>
 8004bda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bdc:	e009      	b.n	8004bf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bde:	f7fc fea3 	bl	8001928 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bec:	d901      	bls.n	8004bf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e007      	b.n	8004c02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_PWREx_ConfigSupply+0x70>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bfe:	d1ee      	bne.n	8004bde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	58024800 	.word	0x58024800

08004c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	@ 0x30
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e3c8      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8087 	beq.w	8004d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c30:	4b88      	ldr	r3, [pc, #544]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c3a:	4b86      	ldr	r3, [pc, #536]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d007      	beq.n	8004c56 <HAL_RCC_OscConfig+0x46>
 8004c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c48:	2b18      	cmp	r3, #24
 8004c4a:	d110      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5e>
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d10b      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c56:	4b7f      	ldr	r3, [pc, #508]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d06c      	beq.n	8004d3c <HAL_RCC_OscConfig+0x12c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d168      	bne.n	8004d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e3a2      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c76:	d106      	bne.n	8004c86 <HAL_RCC_OscConfig+0x76>
 8004c78:	4b76      	ldr	r3, [pc, #472]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a75      	ldr	r2, [pc, #468]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e02e      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd4>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x98>
 8004c8e:	4b71      	ldr	r3, [pc, #452]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a70      	ldr	r2, [pc, #448]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	4b6e      	ldr	r3, [pc, #440]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a6d      	ldr	r2, [pc, #436]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	e01d      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd4>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0xbc>
 8004cb2:	4b68      	ldr	r3, [pc, #416]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a67      	ldr	r2, [pc, #412]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b65      	ldr	r3, [pc, #404]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a64      	ldr	r2, [pc, #400]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd4>
 8004ccc:	4b61      	ldr	r3, [pc, #388]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a60      	ldr	r2, [pc, #384]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a5d      	ldr	r2, [pc, #372]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fc fe1c 	bl	8001928 <HAL_GetTick>
 8004cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fc fe18 	bl	8001928 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	@ 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e356      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d06:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0xe4>
 8004d12:	e014      	b.n	8004d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fc fe08 	bl	8001928 <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fc fe04 	bl	8001928 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	@ 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e342      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d2e:	4b49      	ldr	r3, [pc, #292]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x10c>
 8004d3a:	e000      	b.n	8004d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 808c 	beq.w	8004e64 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4c:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d56:	4b3f      	ldr	r3, [pc, #252]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_RCC_OscConfig+0x162>
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	2b18      	cmp	r3, #24
 8004d66:	d137      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x1c8>
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d132      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d72:	4b38      	ldr	r3, [pc, #224]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e314      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d8a:	4b32      	ldr	r3, [pc, #200]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 0219 	bic.w	r2, r3, #25
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	492f      	ldr	r1, [pc, #188]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fdc4 	bl	8001928 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da4:	f7fc fdc0 	bl	8001928 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e2fe      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db6:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc2:	4b24      	ldr	r3, [pc, #144]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	061b      	lsls	r3, r3, #24
 8004dd0:	4920      	ldr	r1, [pc, #128]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd6:	e045      	b.n	8004e64 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d026      	beq.n	8004e2e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004de0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f023 0219 	bic.w	r2, r3, #25
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4919      	ldr	r1, [pc, #100]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df2:	f7fc fd99 	bl	8001928 <HAL_GetTick>
 8004df6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fc fd95 	bl	8001928 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e2d3      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e0c:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e18:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	490b      	ldr	r1, [pc, #44]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	604b      	str	r3, [r1, #4]
 8004e2c:	e01a      	b.n	8004e64 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2e:	4b09      	ldr	r3, [pc, #36]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a08      	ldr	r2, [pc, #32]	@ (8004e54 <HAL_RCC_OscConfig+0x244>)
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3a:	f7fc fd75 	bl	8001928 <HAL_GetTick>
 8004e3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e40:	e00a      	b.n	8004e58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e42:	f7fc fd71 	bl	8001928 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d903      	bls.n	8004e58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e2af      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
 8004e54:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e58:	4b96      	ldr	r3, [pc, #600]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ee      	bne.n	8004e42 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d06a      	beq.n	8004f46 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e70:	4b90      	ldr	r3, [pc, #576]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e78:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e7a:	4b8e      	ldr	r3, [pc, #568]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d007      	beq.n	8004e96 <HAL_RCC_OscConfig+0x286>
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b18      	cmp	r3, #24
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x2b4>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d116      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e96:	4b87      	ldr	r3, [pc, #540]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_RCC_OscConfig+0x29e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	2b80      	cmp	r3, #128	@ 0x80
 8004ea8:	d001      	beq.n	8004eae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e282      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eae:	4b81      	ldr	r3, [pc, #516]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	061b      	lsls	r3, r3, #24
 8004ebc:	497d      	ldr	r1, [pc, #500]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ec2:	e040      	b.n	8004f46 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d023      	beq.n	8004f14 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ecc:	4b79      	ldr	r3, [pc, #484]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a78      	ldr	r2, [pc, #480]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fc fd26 	bl	8001928 <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ee0:	f7fc fd22 	bl	8001928 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e260      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ef2:	4b70      	ldr	r3, [pc, #448]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004efe:	4b6d      	ldr	r3, [pc, #436]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	4969      	ldr	r1, [pc, #420]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60cb      	str	r3, [r1, #12]
 8004f12:	e018      	b.n	8004f46 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f14:	4b67      	ldr	r3, [pc, #412]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a66      	ldr	r2, [pc, #408]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fc fd02 	bl	8001928 <HAL_GetTick>
 8004f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f28:	f7fc fcfe 	bl	8001928 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e23c      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f3a:	4b5e      	ldr	r3, [pc, #376]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d036      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d019      	beq.n	8004f8e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f5a:	4b56      	ldr	r3, [pc, #344]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5e:	4a55      	ldr	r2, [pc, #340]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f66:	f7fc fcdf 	bl	8001928 <HAL_GetTick>
 8004f6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fc fcdb 	bl	8001928 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e219      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f80:	4b4c      	ldr	r3, [pc, #304]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x35e>
 8004f8c:	e018      	b.n	8004fc0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f8e:	4b49      	ldr	r3, [pc, #292]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f92:	4a48      	ldr	r2, [pc, #288]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9a:	f7fc fcc5 	bl	8001928 <HAL_GetTick>
 8004f9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa2:	f7fc fcc1 	bl	8001928 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e1ff      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f0      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d036      	beq.n	800503a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d019      	beq.n	8005008 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fd4:	4b37      	ldr	r3, [pc, #220]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a36      	ldr	r2, [pc, #216]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004fda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fe0:	f7fc fca2 	bl	8001928 <HAL_GetTick>
 8004fe4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fe8:	f7fc fc9e 	bl	8001928 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e1dc      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x3d8>
 8005006:	e018      	b.n	800503a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005008:	4b2a      	ldr	r3, [pc, #168]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a29      	ldr	r2, [pc, #164]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 800500e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005012:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005014:	f7fc fc88 	bl	8001928 <HAL_GetTick>
 8005018:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800501c:	f7fc fc84 	bl	8001928 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1c2      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800502e:	4b21      	ldr	r3, [pc, #132]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8086 	beq.w	8005154 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005048:	4b1b      	ldr	r3, [pc, #108]	@ (80050b8 <HAL_RCC_OscConfig+0x4a8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1a      	ldr	r2, [pc, #104]	@ (80050b8 <HAL_RCC_OscConfig+0x4a8>)
 800504e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005052:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005054:	f7fc fc68 	bl	8001928 <HAL_GetTick>
 8005058:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505c:	f7fc fc64 	bl	8001928 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	@ 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e1a2      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800506e:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <HAL_RCC_OscConfig+0x4a8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d106      	bne.n	8005090 <HAL_RCC_OscConfig+0x480>
 8005082:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	4a0b      	ldr	r2, [pc, #44]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	6713      	str	r3, [r2, #112]	@ 0x70
 800508e:	e032      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d111      	bne.n	80050bc <HAL_RCC_OscConfig+0x4ac>
 8005098:	4b06      	ldr	r3, [pc, #24]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509c:	4a05      	ldr	r2, [pc, #20]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a4:	4b03      	ldr	r3, [pc, #12]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a8:	4a02      	ldr	r2, [pc, #8]	@ (80050b4 <HAL_RCC_OscConfig+0x4a4>)
 80050aa:	f023 0304 	bic.w	r3, r3, #4
 80050ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b0:	e021      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e6>
 80050b2:	bf00      	nop
 80050b4:	58024400 	.word	0x58024400
 80050b8:	58024800 	.word	0x58024800
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d10c      	bne.n	80050de <HAL_RCC_OscConfig+0x4ce>
 80050c4:	4b83      	ldr	r3, [pc, #524]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c8:	4a82      	ldr	r2, [pc, #520]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80050ca:	f043 0304 	orr.w	r3, r3, #4
 80050ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d0:	4b80      	ldr	r3, [pc, #512]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d4:	4a7f      	ldr	r2, [pc, #508]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6713      	str	r3, [r2, #112]	@ 0x70
 80050dc:	e00b      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e6>
 80050de:	4b7d      	ldr	r3, [pc, #500]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	4a7c      	ldr	r2, [pc, #496]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ea:	4b7a      	ldr	r3, [pc, #488]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	4a79      	ldr	r2, [pc, #484]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80050f0:	f023 0304 	bic.w	r3, r3, #4
 80050f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d015      	beq.n	800512a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fe:	f7fc fc13 	bl	8001928 <HAL_GetTick>
 8005102:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005104:	e00a      	b.n	800511c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fc fc0f 	bl	8001928 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e14b      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800511c:	4b6d      	ldr	r3, [pc, #436]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0ee      	beq.n	8005106 <HAL_RCC_OscConfig+0x4f6>
 8005128:	e014      	b.n	8005154 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512a:	f7fc fbfd 	bl	8001928 <HAL_GetTick>
 800512e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005130:	e00a      	b.n	8005148 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fc fbf9 	bl	8001928 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005140:	4293      	cmp	r3, r2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e135      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005148:	4b62      	ldr	r3, [pc, #392]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ee      	bne.n	8005132 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 812a 	beq.w	80053b2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800515e:	4b5d      	ldr	r3, [pc, #372]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005166:	2b18      	cmp	r3, #24
 8005168:	f000 80ba 	beq.w	80052e0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	2b02      	cmp	r3, #2
 8005172:	f040 8095 	bne.w	80052a0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b57      	ldr	r3, [pc, #348]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a56      	ldr	r2, [pc, #344]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800517c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005182:	f7fc fbd1 	bl	8001928 <HAL_GetTick>
 8005186:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518a:	f7fc fbcd 	bl	8001928 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e10b      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800519c:	4b4d      	ldr	r3, [pc, #308]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051a8:	4b4a      	ldr	r3, [pc, #296]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80051aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051ac:	4b4a      	ldr	r3, [pc, #296]	@ (80052d8 <HAL_RCC_OscConfig+0x6c8>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051b8:	0112      	lsls	r2, r2, #4
 80051ba:	430a      	orrs	r2, r1
 80051bc:	4945      	ldr	r1, [pc, #276]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	628b      	str	r3, [r1, #40]	@ 0x28
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c6:	3b01      	subs	r3, #1
 80051c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d0:	3b01      	subs	r3, #1
 80051d2:	025b      	lsls	r3, r3, #9
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051dc:	3b01      	subs	r3, #1
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ea:	3b01      	subs	r3, #1
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051f2:	4938      	ldr	r1, [pc, #224]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051f8:	4b36      	ldr	r3, [pc, #216]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	4a35      	ldr	r2, [pc, #212]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005204:	4b33      	ldr	r3, [pc, #204]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005208:	4b34      	ldr	r3, [pc, #208]	@ (80052dc <HAL_RCC_OscConfig+0x6cc>)
 800520a:	4013      	ands	r3, r2
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005210:	00d2      	lsls	r2, r2, #3
 8005212:	4930      	ldr	r1, [pc, #192]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005214:	4313      	orrs	r3, r2
 8005216:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005218:	4b2e      	ldr	r3, [pc, #184]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	f023 020c 	bic.w	r2, r3, #12
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	492b      	ldr	r1, [pc, #172]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005226:	4313      	orrs	r3, r2
 8005228:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800522a:	4b2a      	ldr	r3, [pc, #168]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800522c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522e:	f023 0202 	bic.w	r2, r3, #2
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005236:	4927      	ldr	r1, [pc, #156]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005238:	4313      	orrs	r3, r2
 800523a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800523c:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	4a24      	ldr	r2, [pc, #144]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005248:	4b22      	ldr	r3, [pc, #136]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	4a21      	ldr	r2, [pc, #132]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800524e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005254:	4b1f      	ldr	r3, [pc, #124]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	4a1e      	ldr	r2, [pc, #120]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800525a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800525e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005260:	4b1c      	ldr	r3, [pc, #112]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	4a1b      	ldr	r2, [pc, #108]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800526c:	4b19      	ldr	r3, [pc, #100]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a18      	ldr	r2, [pc, #96]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005272:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fc fb56 	bl	8001928 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fc fb52 	bl	8001928 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e090      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005292:	4b10      	ldr	r3, [pc, #64]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x670>
 800529e:	e088      	b.n	80053b2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a0:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a0b      	ldr	r2, [pc, #44]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80052a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fc fb3c 	bl	8001928 <HAL_GetTick>
 80052b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b4:	f7fc fb38 	bl	8001928 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e076      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052c6:	4b03      	ldr	r3, [pc, #12]	@ (80052d4 <HAL_RCC_OscConfig+0x6c4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x6a4>
 80052d2:	e06e      	b.n	80053b2 <HAL_RCC_OscConfig+0x7a2>
 80052d4:	58024400 	.word	0x58024400
 80052d8:	fffffc0c 	.word	0xfffffc0c
 80052dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052e0:	4b36      	ldr	r3, [pc, #216]	@ (80053bc <HAL_RCC_OscConfig+0x7ac>)
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052e6:	4b35      	ldr	r3, [pc, #212]	@ (80053bc <HAL_RCC_OscConfig+0x7ac>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d031      	beq.n	8005358 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f003 0203 	and.w	r2, r3, #3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d12a      	bne.n	8005358 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d122      	bne.n	8005358 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d11a      	bne.n	8005358 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	0a5b      	lsrs	r3, r3, #9
 8005326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d111      	bne.n	8005358 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	0c1b      	lsrs	r3, r3, #16
 8005338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d108      	bne.n	8005358 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	0e1b      	lsrs	r3, r3, #24
 800534a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005352:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e02b      	b.n	80053b4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800535c:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <HAL_RCC_OscConfig+0x7ac>)
 800535e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005360:	08db      	lsrs	r3, r3, #3
 8005362:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005366:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	d01f      	beq.n	80053b2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005372:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <HAL_RCC_OscConfig+0x7ac>)
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	4a11      	ldr	r2, [pc, #68]	@ (80053bc <HAL_RCC_OscConfig+0x7ac>)
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800537e:	f7fc fad3 	bl	8001928 <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005384:	bf00      	nop
 8005386:	f7fc facf 	bl	8001928 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	4293      	cmp	r3, r2
 8005390:	d0f9      	beq.n	8005386 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005392:	4b0a      	ldr	r3, [pc, #40]	@ (80053bc <HAL_RCC_OscConfig+0x7ac>)
 8005394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005396:	4b0a      	ldr	r3, [pc, #40]	@ (80053c0 <HAL_RCC_OscConfig+0x7b0>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800539e:	00d2      	lsls	r2, r2, #3
 80053a0:	4906      	ldr	r1, [pc, #24]	@ (80053bc <HAL_RCC_OscConfig+0x7ac>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053a6:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <HAL_RCC_OscConfig+0x7ac>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	4a04      	ldr	r2, [pc, #16]	@ (80053bc <HAL_RCC_OscConfig+0x7ac>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3730      	adds	r7, #48	@ 0x30
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	58024400 	.word	0x58024400
 80053c0:	ffff0007 	.word	0xffff0007

080053c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e19c      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d8:	4b8a      	ldr	r3, [pc, #552]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d910      	bls.n	8005408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e6:	4b87      	ldr	r3, [pc, #540]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f023 020f 	bic.w	r2, r3, #15
 80053ee:	4985      	ldr	r1, [pc, #532]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f6:	4b83      	ldr	r3, [pc, #524]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e184      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d010      	beq.n	8005436 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	4b7b      	ldr	r3, [pc, #492]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005420:	429a      	cmp	r2, r3
 8005422:	d908      	bls.n	8005436 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005424:	4b78      	ldr	r3, [pc, #480]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	4975      	ldr	r1, [pc, #468]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005432:	4313      	orrs	r3, r2
 8005434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	4b70      	ldr	r3, [pc, #448]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800544e:	429a      	cmp	r2, r3
 8005450:	d908      	bls.n	8005464 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005452:	4b6d      	ldr	r3, [pc, #436]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	496a      	ldr	r1, [pc, #424]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005460:	4313      	orrs	r3, r2
 8005462:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	4b64      	ldr	r3, [pc, #400]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800547c:	429a      	cmp	r2, r3
 800547e:	d908      	bls.n	8005492 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005480:	4b61      	ldr	r3, [pc, #388]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	495e      	ldr	r1, [pc, #376]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 800548e:	4313      	orrs	r3, r2
 8005490:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d010      	beq.n	80054c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69da      	ldr	r2, [r3, #28]
 80054a2:	4b59      	ldr	r3, [pc, #356]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d908      	bls.n	80054c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054ae:	4b56      	ldr	r3, [pc, #344]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	4953      	ldr	r1, [pc, #332]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d010      	beq.n	80054ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	429a      	cmp	r2, r3
 80054da:	d908      	bls.n	80054ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f023 020f 	bic.w	r2, r3, #15
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4947      	ldr	r1, [pc, #284]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d055      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054fa:	4b43      	ldr	r3, [pc, #268]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	4940      	ldr	r1, [pc, #256]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005508:	4313      	orrs	r3, r2
 800550a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d107      	bne.n	8005524 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005514:	4b3c      	ldr	r3, [pc, #240]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d121      	bne.n	8005564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0f6      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d107      	bne.n	800553c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800552c:	4b36      	ldr	r3, [pc, #216]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d115      	bne.n	8005564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0ea      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d107      	bne.n	8005554 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005544:	4b30      	ldr	r3, [pc, #192]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0de      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005554:	4b2c      	ldr	r3, [pc, #176]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0d6      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005564:	4b28      	ldr	r3, [pc, #160]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f023 0207 	bic.w	r2, r3, #7
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4925      	ldr	r1, [pc, #148]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005572:	4313      	orrs	r3, r2
 8005574:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005576:	f7fc f9d7 	bl	8001928 <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557c:	e00a      	b.n	8005594 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800557e:	f7fc f9d3 	bl	8001928 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558c:	4293      	cmp	r3, r2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e0be      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005594:	4b1c      	ldr	r3, [pc, #112]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d1eb      	bne.n	800557e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d010      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	4b14      	ldr	r3, [pc, #80]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	429a      	cmp	r2, r3
 80055c0:	d208      	bcs.n	80055d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c2:	4b11      	ldr	r3, [pc, #68]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f023 020f 	bic.w	r2, r3, #15
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	490e      	ldr	r1, [pc, #56]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d214      	bcs.n	800560c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e2:	4b08      	ldr	r3, [pc, #32]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 020f 	bic.w	r2, r3, #15
 80055ea:	4906      	ldr	r1, [pc, #24]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f2:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d005      	beq.n	800560c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e086      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
 8005604:	52002000 	.word	0x52002000
 8005608:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d010      	beq.n	800563a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	4b3f      	ldr	r3, [pc, #252]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005624:	429a      	cmp	r2, r3
 8005626:	d208      	bcs.n	800563a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005628:	4b3c      	ldr	r3, [pc, #240]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	4939      	ldr	r1, [pc, #228]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005636:	4313      	orrs	r3, r2
 8005638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d010      	beq.n	8005668 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	4b34      	ldr	r3, [pc, #208]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005652:	429a      	cmp	r2, r3
 8005654:	d208      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005656:	4b31      	ldr	r3, [pc, #196]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	492e      	ldr	r1, [pc, #184]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005664:	4313      	orrs	r3, r2
 8005666:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	4b28      	ldr	r3, [pc, #160]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005680:	429a      	cmp	r2, r3
 8005682:	d208      	bcs.n	8005696 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005684:	4b25      	ldr	r3, [pc, #148]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	4922      	ldr	r1, [pc, #136]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005692:	4313      	orrs	r3, r2
 8005694:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d010      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69da      	ldr	r2, [r3, #28]
 80056a6:	4b1d      	ldr	r3, [pc, #116]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d208      	bcs.n	80056c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056b2:	4b1a      	ldr	r3, [pc, #104]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	4917      	ldr	r1, [pc, #92]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056c4:	f000 f834 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4b14      	ldr	r3, [pc, #80]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	4912      	ldr	r1, [pc, #72]	@ (8005720 <HAL_RCC_ClockConfig+0x35c>)
 80056d6:	5ccb      	ldrb	r3, [r1, r3]
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056e2:	4b0e      	ldr	r3, [pc, #56]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005720 <HAL_RCC_ClockConfig+0x35c>)
 80056ec:	5cd3      	ldrb	r3, [r2, r3]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
 80056f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005724 <HAL_RCC_ClockConfig+0x360>)
 80056fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <HAL_RCC_ClockConfig+0x364>)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005702:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <HAL_RCC_ClockConfig+0x368>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fc f8c4 	bl	8001894 <HAL_InitTick>
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400
 8005720:	0800da44 	.word	0x0800da44
 8005724:	24000004 	.word	0x24000004
 8005728:	24000000 	.word	0x24000000
 800572c:	24000008 	.word	0x24000008

08005730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	@ 0x24
 8005734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005736:	4bb3      	ldr	r3, [pc, #716]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800573e:	2b18      	cmp	r3, #24
 8005740:	f200 8155 	bhi.w	80059ee <HAL_RCC_GetSysClockFreq+0x2be>
 8005744:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	080057b1 	.word	0x080057b1
 8005750:	080059ef 	.word	0x080059ef
 8005754:	080059ef 	.word	0x080059ef
 8005758:	080059ef 	.word	0x080059ef
 800575c:	080059ef 	.word	0x080059ef
 8005760:	080059ef 	.word	0x080059ef
 8005764:	080059ef 	.word	0x080059ef
 8005768:	080059ef 	.word	0x080059ef
 800576c:	080057d7 	.word	0x080057d7
 8005770:	080059ef 	.word	0x080059ef
 8005774:	080059ef 	.word	0x080059ef
 8005778:	080059ef 	.word	0x080059ef
 800577c:	080059ef 	.word	0x080059ef
 8005780:	080059ef 	.word	0x080059ef
 8005784:	080059ef 	.word	0x080059ef
 8005788:	080059ef 	.word	0x080059ef
 800578c:	080057dd 	.word	0x080057dd
 8005790:	080059ef 	.word	0x080059ef
 8005794:	080059ef 	.word	0x080059ef
 8005798:	080059ef 	.word	0x080059ef
 800579c:	080059ef 	.word	0x080059ef
 80057a0:	080059ef 	.word	0x080059ef
 80057a4:	080059ef 	.word	0x080059ef
 80057a8:	080059ef 	.word	0x080059ef
 80057ac:	080057e3 	.word	0x080057e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b0:	4b94      	ldr	r3, [pc, #592]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057bc:	4b91      	ldr	r3, [pc, #580]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	08db      	lsrs	r3, r3, #3
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	4a90      	ldr	r2, [pc, #576]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057c8:	fa22 f303 	lsr.w	r3, r2, r3
 80057cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80057ce:	e111      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057d0:	4b8d      	ldr	r3, [pc, #564]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057d2:	61bb      	str	r3, [r7, #24]
      break;
 80057d4:	e10e      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057d6:	4b8d      	ldr	r3, [pc, #564]	@ (8005a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057d8:	61bb      	str	r3, [r7, #24]
      break;
 80057da:	e10b      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057de:	61bb      	str	r3, [r7, #24]
      break;
 80057e0:	e108      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057e2:	4b88      	ldr	r3, [pc, #544]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057ec:	4b85      	ldr	r3, [pc, #532]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057f8:	4b82      	ldr	r3, [pc, #520]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005802:	4b80      	ldr	r3, [pc, #512]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005806:	08db      	lsrs	r3, r3, #3
 8005808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80e1 	beq.w	80059e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b02      	cmp	r3, #2
 800582a:	f000 8083 	beq.w	8005934 <HAL_RCC_GetSysClockFreq+0x204>
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b02      	cmp	r3, #2
 8005832:	f200 80a1 	bhi.w	8005978 <HAL_RCC_GetSysClockFreq+0x248>
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x114>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d056      	beq.n	80058f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005842:	e099      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005844:	4b6f      	ldr	r3, [pc, #444]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02d      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005850:	4b6c      	ldr	r3, [pc, #432]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	08db      	lsrs	r3, r3, #3
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	4a6b      	ldr	r2, [pc, #428]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
 8005860:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	ee07 3a90 	vmov	s15, r3
 8005868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587a:	4b62      	ldr	r3, [pc, #392]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588a:	ed97 6a02 	vldr	s12, [r7, #8]
 800588e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80058aa:	e087      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058be:	4b51      	ldr	r3, [pc, #324]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ee:	e065      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80058fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005902:	4b40      	ldr	r3, [pc, #256]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005912:	ed97 6a02 	vldr	s12, [r7, #8]
 8005916:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800591a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800592a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005932:	e043      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005946:	4b2f      	ldr	r3, [pc, #188]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005956:	ed97 6a02 	vldr	s12, [r7, #8]
 800595a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800595e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800596a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005976:	e021      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800598a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599a:	ed97 6a02 	vldr	s12, [r7, #8]
 800599e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059bc:	4b11      	ldr	r3, [pc, #68]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	0a5b      	lsrs	r3, r3, #9
 80059c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059c6:	3301      	adds	r3, #1
 80059c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059e0:	ee17 3a90 	vmov	r3, s15
 80059e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059e6:	e005      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
      break;
 80059ec:	e002      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059ee:	4b07      	ldr	r3, [pc, #28]	@ (8005a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059f0:	61bb      	str	r3, [r7, #24]
      break;
 80059f2:	bf00      	nop
  }

  return sysclockfreq;
 80059f4:	69bb      	ldr	r3, [r7, #24]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3724      	adds	r7, #36	@ 0x24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	58024400 	.word	0x58024400
 8005a08:	03d09000 	.word	0x03d09000
 8005a0c:	003d0900 	.word	0x003d0900
 8005a10:	007a1200 	.word	0x007a1200
 8005a14:	46000000 	.word	0x46000000
 8005a18:	4c742400 	.word	0x4c742400
 8005a1c:	4a742400 	.word	0x4a742400
 8005a20:	4af42400 	.word	0x4af42400

08005a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a2a:	f7ff fe81 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	4b10      	ldr	r3, [pc, #64]	@ (8005a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	490f      	ldr	r1, [pc, #60]	@ (8005a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a3c:	5ccb      	ldrb	r3, [r1, r3]
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	fa22 f303 	lsr.w	r3, r2, r3
 8005a46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a48:	4b0a      	ldr	r3, [pc, #40]	@ (8005a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	4a09      	ldr	r2, [pc, #36]	@ (8005a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5e:	4a07      	ldr	r2, [pc, #28]	@ (8005a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a62:	4a07      	ldr	r2, [pc, #28]	@ (8005a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a68:	4b04      	ldr	r3, [pc, #16]	@ (8005a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	58024400 	.word	0x58024400
 8005a78:	0800da44 	.word	0x0800da44
 8005a7c:	24000004 	.word	0x24000004
 8005a80:	24000000 	.word	0x24000000

08005a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a88:	f7ff ffcc 	bl	8005a24 <HAL_RCC_GetHCLKFreq>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4b06      	ldr	r3, [pc, #24]	@ (8005aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	091b      	lsrs	r3, r3, #4
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	4904      	ldr	r1, [pc, #16]	@ (8005aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a9a:	5ccb      	ldrb	r3, [r1, r3]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	58024400 	.word	0x58024400
 8005aac:	0800da44 	.word	0x0800da44

08005ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ab4:	f7ff ffb6 	bl	8005a24 <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b06      	ldr	r3, [pc, #24]	@ (8005ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4904      	ldr	r1, [pc, #16]	@ (8005ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	0800da44 	.word	0x0800da44

08005adc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae0:	b0c6      	sub	sp, #280	@ 0x118
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b00:	2500      	movs	r5, #0
 8005b02:	ea54 0305 	orrs.w	r3, r4, r5
 8005b06:	d049      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b12:	d02f      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b18:	d828      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b1e:	d01a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b24:	d822      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b2e:	d007      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b30:	e01c      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b32:	4bab      	ldr	r3, [pc, #684]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	4aaa      	ldr	r2, [pc, #680]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b3e:	e01a      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b44:	3308      	adds	r3, #8
 8005b46:	2102      	movs	r1, #2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f001 fc25 	bl	8007398 <RCCEx_PLL2_Config>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b54:	e00f      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5a:	3328      	adds	r3, #40	@ 0x28
 8005b5c:	2102      	movs	r1, #2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 fccc 	bl	80074fc <RCCEx_PLL3_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b6a:	e004      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b72:	e000      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b7e:	4b98      	ldr	r3, [pc, #608]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b8c:	4a94      	ldr	r2, [pc, #592]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b92:	e003      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005ba8:	f04f 0900 	mov.w	r9, #0
 8005bac:	ea58 0309 	orrs.w	r3, r8, r9
 8005bb0:	d047      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d82a      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005bd9 	.word	0x08005bd9
 8005bc8:	08005be7 	.word	0x08005be7
 8005bcc:	08005bfd 	.word	0x08005bfd
 8005bd0:	08005c1b 	.word	0x08005c1b
 8005bd4:	08005c1b 	.word	0x08005c1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd8:	4b81      	ldr	r3, [pc, #516]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	4a80      	ldr	r2, [pc, #512]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be4:	e01a      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bea:	3308      	adds	r3, #8
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fbd2 	bl	8007398 <RCCEx_PLL2_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bfa:	e00f      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	3328      	adds	r3, #40	@ 0x28
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 fc79 	bl	80074fc <RCCEx_PLL3_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c10:	e004      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c24:	4b6e      	ldr	r3, [pc, #440]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c28:	f023 0107 	bic.w	r1, r3, #7
 8005c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c32:	4a6b      	ldr	r2, [pc, #428]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c38:	e003      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005c4e:	f04f 0b00 	mov.w	fp, #0
 8005c52:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c56:	d05b      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c60:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c64:	d03b      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c66:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c6a:	d834      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c70:	d037      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c76:	d82e      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c7c:	d033      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c82:	d828      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c88:	d01a      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c8e:	d822      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c98:	d007      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c9a:	e01c      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b50      	ldr	r3, [pc, #320]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ca8:	e01e      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cae:	3308      	adds	r3, #8
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 fb70 	bl	8007398 <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cbe:	e013      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc4:	3328      	adds	r3, #40	@ 0x28
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 fc17 	bl	80074fc <RCCEx_PLL3_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cdc:	e004      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10b      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d00:	4a37      	ldr	r2, [pc, #220]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d02:	430b      	orrs	r3, r1
 8005d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d06:	e003      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d20:	2300      	movs	r3, #0
 8005d22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	d05d      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d38:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d3c:	d03b      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d3e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d42:	d834      	bhi.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d48:	d037      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d4e:	d82e      	bhi.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d54:	d033      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d5a:	d828      	bhi.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d60:	d01a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d66:	d822      	bhi.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d70:	d007      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d72:	e01c      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d74:	4b1a      	ldr	r3, [pc, #104]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	4a19      	ldr	r2, [pc, #100]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d80:	e01e      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d86:	3308      	adds	r3, #8
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fb04 	bl	8007398 <RCCEx_PLL2_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d96:	e013      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9c:	3328      	adds	r3, #40	@ 0x28
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 fbab 	bl	80074fc <RCCEx_PLL3_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dac:	e008      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005db4:	e004      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10d      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005dc8:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dcc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005dd8:	4a01      	ldr	r2, [pc, #4]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dde:	e005      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005df8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e02:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	d03a      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e12:	2b30      	cmp	r3, #48	@ 0x30
 8005e14:	d01f      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e16:	2b30      	cmp	r3, #48	@ 0x30
 8005e18:	d819      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d00c      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d815      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d019      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d111      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e2a:	4baa      	ldr	r3, [pc, #680]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2e:	4aa9      	ldr	r2, [pc, #676]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e36:	e011      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	2102      	movs	r1, #2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 faa9 	bl	8007398 <RCCEx_PLL2_Config>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e4c:	e006      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e54:	e002      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e56:	bf00      	nop
 8005e58:	e000      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e64:	4b9b      	ldr	r3, [pc, #620]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e72:	4a98      	ldr	r2, [pc, #608]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e74:	430b      	orrs	r3, r1
 8005e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e78:	e003      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e92:	2300      	movs	r3, #0
 8005e94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	d051      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eac:	d035      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005eae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eb2:	d82e      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005eb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eb8:	d031      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005eba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ebe:	d828      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec4:	d01a      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eca:	d822      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed4:	d007      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005ed6:	e01c      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005edc:	4a7d      	ldr	r2, [pc, #500]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ee4:	e01c      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	3308      	adds	r3, #8
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f001 fa52 	bl	8007398 <RCCEx_PLL2_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005efa:	e011      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	3328      	adds	r3, #40	@ 0x28
 8005f02:	2100      	movs	r1, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 faf9 	bl	80074fc <RCCEx_PLL3_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f10:	e006      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f18:	e002      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f28:	4b6a      	ldr	r3, [pc, #424]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f36:	4a67      	ldr	r2, [pc, #412]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f3c:	e003      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f56:	2300      	movs	r3, #0
 8005f58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f5c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4313      	orrs	r3, r2
 8005f64:	d053      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f70:	d033      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f76:	d82c      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f7c:	d02f      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f82:	d826      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f88:	d02b      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f8e:	d820      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f94:	d012      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f9a:	d81a      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d022      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa4:	d115      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005faa:	3308      	adds	r3, #8
 8005fac:	2101      	movs	r1, #1
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 f9f2 	bl	8007398 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fba:	e015      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	3328      	adds	r3, #40	@ 0x28
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 fa99 	bl	80074fc <RCCEx_PLL3_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fda:	bf00      	nop
 8005fdc:	e004      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ff0:	4b38      	ldr	r3, [pc, #224]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffe:	4a35      	ldr	r2, [pc, #212]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006000:	430b      	orrs	r3, r1
 8006002:	6513      	str	r3, [r2, #80]	@ 0x50
 8006004:	e003      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006006:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800600a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800601a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800601e:	2300      	movs	r3, #0
 8006020:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006024:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006028:	460b      	mov	r3, r1
 800602a:	4313      	orrs	r3, r2
 800602c:	d058      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800603a:	d033      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800603c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006040:	d82c      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006046:	d02f      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604c:	d826      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800604e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006052:	d02b      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006054:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006058:	d820      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800605a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605e:	d012      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006064:	d81a      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d022      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800606a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800606e:	d115      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006074:	3308      	adds	r3, #8
 8006076:	2101      	movs	r1, #1
 8006078:	4618      	mov	r0, r3
 800607a:	f001 f98d 	bl	8007398 <RCCEx_PLL2_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006084:	e015      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608a:	3328      	adds	r3, #40	@ 0x28
 800608c:	2101      	movs	r1, #1
 800608e:	4618      	mov	r0, r3
 8006090:	f001 fa34 	bl	80074fc <RCCEx_PLL3_Config>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800609a:	e00a      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060a2:	e006      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060a4:	bf00      	nop
 80060a6:	e004      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060a8:	bf00      	nop
 80060aa:	e002      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060ac:	bf00      	nop
 80060ae:	e000      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10e      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060ba:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060ca:	4a02      	ldr	r2, [pc, #8]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060cc:	430b      	orrs	r3, r1
 80060ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80060d0:	e006      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80060d2:	bf00      	nop
 80060d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4313      	orrs	r3, r2
 80060fe:	d037      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800610a:	d00e      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800610c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006110:	d816      	bhi.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d018      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800611a:	d111      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611c:	4bc4      	ldr	r3, [pc, #784]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006120:	4ac3      	ldr	r2, [pc, #780]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006128:	e00f      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800612a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612e:	3308      	adds	r3, #8
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f001 f930 	bl	8007398 <RCCEx_PLL2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800613e:	e004      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006146:	e000      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800614a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006152:	4bb7      	ldr	r3, [pc, #732]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006156:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006160:	4ab3      	ldr	r2, [pc, #716]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006162:	430b      	orrs	r3, r1
 8006164:	6513      	str	r3, [r2, #80]	@ 0x50
 8006166:	e003      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800616c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800617c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006180:	2300      	movs	r3, #0
 8006182:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006186:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800618a:	460b      	mov	r3, r1
 800618c:	4313      	orrs	r3, r2
 800618e:	d039      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006196:	2b03      	cmp	r3, #3
 8006198:	d81c      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800619a:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061dd 	.word	0x080061dd
 80061a4:	080061b1 	.word	0x080061b1
 80061a8:	080061bf 	.word	0x080061bf
 80061ac:	080061dd 	.word	0x080061dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b0:	4b9f      	ldr	r3, [pc, #636]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b4:	4a9e      	ldr	r2, [pc, #632]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061bc:	e00f      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c2:	3308      	adds	r3, #8
 80061c4:	2102      	movs	r1, #2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 f8e6 	bl	8007398 <RCCEx_PLL2_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061d2:	e004      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061da:	e000      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80061dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061e6:	4b92      	ldr	r3, [pc, #584]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ea:	f023 0103 	bic.w	r1, r3, #3
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f4:	4a8e      	ldr	r2, [pc, #568]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f6:	430b      	orrs	r3, r1
 80061f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061fa:	e003      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006200:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006214:	2300      	movs	r3, #0
 8006216:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800621a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800621e:	460b      	mov	r3, r1
 8006220:	4313      	orrs	r3, r2
 8006222:	f000 8099 	beq.w	8006358 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006226:	4b83      	ldr	r3, [pc, #524]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a82      	ldr	r2, [pc, #520]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800622c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006230:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006232:	f7fb fb79 	bl	8001928 <HAL_GetTick>
 8006236:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800623a:	e00b      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800623c:	f7fb fb74 	bl	8001928 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b64      	cmp	r3, #100	@ 0x64
 800624a:	d903      	bls.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006252:	e005      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006254:	4b77      	ldr	r3, [pc, #476]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ed      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006264:	2b00      	cmp	r3, #0
 8006266:	d173      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006268:	4b71      	ldr	r3, [pc, #452]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800626a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006274:	4053      	eors	r3, r2
 8006276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800627a:	2b00      	cmp	r3, #0
 800627c:	d015      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800627e:	4b6c      	ldr	r3, [pc, #432]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006286:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800628a:	4b69      	ldr	r3, [pc, #420]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628e:	4a68      	ldr	r2, [pc, #416]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006294:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006296:	4b66      	ldr	r3, [pc, #408]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629a:	4a65      	ldr	r2, [pc, #404]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800629c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062a2:	4a63      	ldr	r2, [pc, #396]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b6:	d118      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fb fb36 	bl	8001928 <HAL_GetTick>
 80062bc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062c0:	e00d      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fb fb31 	bl	8001928 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062cc:	1ad2      	subs	r2, r2, r3
 80062ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d903      	bls.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80062dc:	e005      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062de:	4b54      	ldr	r3, [pc, #336]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0eb      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d129      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006302:	d10e      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006304:	4b4a      	ldr	r3, [pc, #296]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006310:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006314:	091a      	lsrs	r2, r3, #4
 8006316:	4b48      	ldr	r3, [pc, #288]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006318:	4013      	ands	r3, r2
 800631a:	4a45      	ldr	r2, [pc, #276]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800631c:	430b      	orrs	r3, r1
 800631e:	6113      	str	r3, [r2, #16]
 8006320:	e005      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006322:	4b43      	ldr	r3, [pc, #268]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	4a42      	ldr	r2, [pc, #264]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006328:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800632c:	6113      	str	r3, [r2, #16]
 800632e:	4b40      	ldr	r3, [pc, #256]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006330:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006336:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800633a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633e:	4a3c      	ldr	r2, [pc, #240]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006340:	430b      	orrs	r3, r1
 8006342:	6713      	str	r3, [r2, #112]	@ 0x70
 8006344:	e008      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006346:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800634a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800634e:	e003      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	f002 0301 	and.w	r3, r2, #1
 8006364:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006368:	2300      	movs	r3, #0
 800636a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800636e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006372:	460b      	mov	r3, r1
 8006374:	4313      	orrs	r3, r2
 8006376:	f000 808f 	beq.w	8006498 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006380:	2b28      	cmp	r3, #40	@ 0x28
 8006382:	d871      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006384:	a201      	add	r2, pc, #4	@ (adr r2, 800638c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	08006471 	.word	0x08006471
 8006390:	08006469 	.word	0x08006469
 8006394:	08006469 	.word	0x08006469
 8006398:	08006469 	.word	0x08006469
 800639c:	08006469 	.word	0x08006469
 80063a0:	08006469 	.word	0x08006469
 80063a4:	08006469 	.word	0x08006469
 80063a8:	08006469 	.word	0x08006469
 80063ac:	0800643d 	.word	0x0800643d
 80063b0:	08006469 	.word	0x08006469
 80063b4:	08006469 	.word	0x08006469
 80063b8:	08006469 	.word	0x08006469
 80063bc:	08006469 	.word	0x08006469
 80063c0:	08006469 	.word	0x08006469
 80063c4:	08006469 	.word	0x08006469
 80063c8:	08006469 	.word	0x08006469
 80063cc:	08006453 	.word	0x08006453
 80063d0:	08006469 	.word	0x08006469
 80063d4:	08006469 	.word	0x08006469
 80063d8:	08006469 	.word	0x08006469
 80063dc:	08006469 	.word	0x08006469
 80063e0:	08006469 	.word	0x08006469
 80063e4:	08006469 	.word	0x08006469
 80063e8:	08006469 	.word	0x08006469
 80063ec:	08006471 	.word	0x08006471
 80063f0:	08006469 	.word	0x08006469
 80063f4:	08006469 	.word	0x08006469
 80063f8:	08006469 	.word	0x08006469
 80063fc:	08006469 	.word	0x08006469
 8006400:	08006469 	.word	0x08006469
 8006404:	08006469 	.word	0x08006469
 8006408:	08006469 	.word	0x08006469
 800640c:	08006471 	.word	0x08006471
 8006410:	08006469 	.word	0x08006469
 8006414:	08006469 	.word	0x08006469
 8006418:	08006469 	.word	0x08006469
 800641c:	08006469 	.word	0x08006469
 8006420:	08006469 	.word	0x08006469
 8006424:	08006469 	.word	0x08006469
 8006428:	08006469 	.word	0x08006469
 800642c:	08006471 	.word	0x08006471
 8006430:	58024400 	.word	0x58024400
 8006434:	58024800 	.word	0x58024800
 8006438:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800643c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006440:	3308      	adds	r3, #8
 8006442:	2101      	movs	r1, #1
 8006444:	4618      	mov	r0, r3
 8006446:	f000 ffa7 	bl	8007398 <RCCEx_PLL2_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006450:	e00f      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006456:	3328      	adds	r3, #40	@ 0x28
 8006458:	2101      	movs	r1, #1
 800645a:	4618      	mov	r0, r3
 800645c:	f001 f84e 	bl	80074fc <RCCEx_PLL3_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006466:	e004      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800647a:	4bbf      	ldr	r3, [pc, #764]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006486:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006488:	4abb      	ldr	r2, [pc, #748]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800648a:	430b      	orrs	r3, r1
 800648c:	6553      	str	r3, [r2, #84]	@ 0x54
 800648e:	e003      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006494:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f002 0302 	and.w	r3, r2, #2
 80064a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	d041      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064be:	2b05      	cmp	r3, #5
 80064c0:	d824      	bhi.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80064c2:	a201      	add	r2, pc, #4	@ (adr r2, 80064c8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	08006515 	.word	0x08006515
 80064cc:	080064e1 	.word	0x080064e1
 80064d0:	080064f7 	.word	0x080064f7
 80064d4:	08006515 	.word	0x08006515
 80064d8:	08006515 	.word	0x08006515
 80064dc:	08006515 	.word	0x08006515
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e4:	3308      	adds	r3, #8
 80064e6:	2101      	movs	r1, #1
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 ff55 	bl	8007398 <RCCEx_PLL2_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064f4:	e00f      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fa:	3328      	adds	r3, #40	@ 0x28
 80064fc:	2101      	movs	r1, #1
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fffc 	bl	80074fc <RCCEx_PLL3_Config>
 8006504:	4603      	mov	r3, r0
 8006506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800650a:	e004      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006512:	e000      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800651e:	4b96      	ldr	r3, [pc, #600]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006522:	f023 0107 	bic.w	r1, r3, #7
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800652c:	4a92      	ldr	r2, [pc, #584]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800652e:	430b      	orrs	r3, r1
 8006530:	6553      	str	r3, [r2, #84]	@ 0x54
 8006532:	e003      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006538:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f002 0304 	and.w	r3, r2, #4
 8006548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800654c:	2300      	movs	r3, #0
 800654e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006552:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006556:	460b      	mov	r3, r1
 8006558:	4313      	orrs	r3, r2
 800655a:	d044      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006564:	2b05      	cmp	r3, #5
 8006566:	d825      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006568:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800656a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656e:	bf00      	nop
 8006570:	080065bd 	.word	0x080065bd
 8006574:	08006589 	.word	0x08006589
 8006578:	0800659f 	.word	0x0800659f
 800657c:	080065bd 	.word	0x080065bd
 8006580:	080065bd 	.word	0x080065bd
 8006584:	080065bd 	.word	0x080065bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658c:	3308      	adds	r3, #8
 800658e:	2101      	movs	r1, #1
 8006590:	4618      	mov	r0, r3
 8006592:	f000 ff01 	bl	8007398 <RCCEx_PLL2_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800659c:	e00f      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	3328      	adds	r3, #40	@ 0x28
 80065a4:	2101      	movs	r1, #1
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 ffa8 	bl	80074fc <RCCEx_PLL3_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065b2:	e004      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065ba:	e000      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80065bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10b      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ca:	f023 0107 	bic.w	r1, r3, #7
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d6:	4a68      	ldr	r2, [pc, #416]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065d8:	430b      	orrs	r3, r1
 80065da:	6593      	str	r3, [r2, #88]	@ 0x58
 80065dc:	e003      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f002 0320 	and.w	r3, r2, #32
 80065f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065f6:	2300      	movs	r3, #0
 80065f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006600:	460b      	mov	r3, r1
 8006602:	4313      	orrs	r3, r2
 8006604:	d055      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800660e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006612:	d033      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006618:	d82c      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661e:	d02f      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006624:	d826      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800662a:	d02b      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800662c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006630:	d820      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006636:	d012      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800663c:	d81a      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d022      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006646:	d115      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664c:	3308      	adds	r3, #8
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fea1 	bl	8007398 <RCCEx_PLL2_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800665c:	e015      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006662:	3328      	adds	r3, #40	@ 0x28
 8006664:	2102      	movs	r1, #2
 8006666:	4618      	mov	r0, r3
 8006668:	f000 ff48 	bl	80074fc <RCCEx_PLL3_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006672:	e00a      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800667a:	e006      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800667c:	bf00      	nop
 800667e:	e004      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006680:	bf00      	nop
 8006682:	e002      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006684:	bf00      	nop
 8006686:	e000      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006692:	4b39      	ldr	r3, [pc, #228]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006696:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800669a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066a2:	4a35      	ldr	r2, [pc, #212]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80066a8:	e003      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066c2:	2300      	movs	r3, #0
 80066c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066c8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066cc:	460b      	mov	r3, r1
 80066ce:	4313      	orrs	r3, r2
 80066d0:	d058      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066de:	d033      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80066e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066e4:	d82c      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ea:	d02f      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066f0:	d826      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066f6:	d02b      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80066f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066fc:	d820      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006702:	d012      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006708:	d81a      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d022      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800670e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006712:	d115      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006718:	3308      	adds	r3, #8
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fe3b 	bl	8007398 <RCCEx_PLL2_Config>
 8006722:	4603      	mov	r3, r0
 8006724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006728:	e015      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672e:	3328      	adds	r3, #40	@ 0x28
 8006730:	2102      	movs	r1, #2
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fee2 	bl	80074fc <RCCEx_PLL3_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800673e:	e00a      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006746:	e006      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006748:	bf00      	nop
 800674a:	e004      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800674c:	bf00      	nop
 800674e:	e002      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006750:	bf00      	nop
 8006752:	e000      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006756:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10e      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800675e:	4b06      	ldr	r3, [pc, #24]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006762:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800676e:	4a02      	ldr	r2, [pc, #8]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006770:	430b      	orrs	r3, r1
 8006772:	6593      	str	r3, [r2, #88]	@ 0x58
 8006774:	e006      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006776:	bf00      	nop
 8006778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006780:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006790:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006794:	2300      	movs	r3, #0
 8006796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800679a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800679e:	460b      	mov	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	d055      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80067a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067b0:	d033      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80067b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067b6:	d82c      	bhi.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067bc:	d02f      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80067be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067c2:	d826      	bhi.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067c8:	d02b      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80067ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067ce:	d820      	bhi.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067d4:	d012      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80067d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067da:	d81a      	bhi.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d022      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80067e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067e4:	d115      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ea:	3308      	adds	r3, #8
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fdd2 	bl	8007398 <RCCEx_PLL2_Config>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067fa:	e015      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006800:	3328      	adds	r3, #40	@ 0x28
 8006802:	2102      	movs	r1, #2
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fe79 	bl	80074fc <RCCEx_PLL3_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006810:	e00a      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006818:	e006      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800681a:	bf00      	nop
 800681c:	e004      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800681e:	bf00      	nop
 8006820:	e002      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006822:	bf00      	nop
 8006824:	e000      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10b      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006830:	4ba0      	ldr	r3, [pc, #640]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006834:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006840:	4a9c      	ldr	r2, [pc, #624]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006842:	430b      	orrs	r3, r1
 8006844:	6593      	str	r3, [r2, #88]	@ 0x58
 8006846:	e003      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800684c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f002 0308 	and.w	r3, r2, #8
 800685c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006860:	2300      	movs	r3, #0
 8006862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006866:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800686a:	460b      	mov	r3, r1
 800686c:	4313      	orrs	r3, r2
 800686e:	d01e      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800687c:	d10c      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006882:	3328      	adds	r3, #40	@ 0x28
 8006884:	2102      	movs	r1, #2
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fe38 	bl	80074fc <RCCEx_PLL3_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006898:	4b86      	ldr	r3, [pc, #536]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800689a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a8:	4a82      	ldr	r2, [pc, #520]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068aa:	430b      	orrs	r3, r1
 80068ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f002 0310 	and.w	r3, r2, #16
 80068ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068be:	2300      	movs	r3, #0
 80068c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068c8:	460b      	mov	r3, r1
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d01e      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068da:	d10c      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e0:	3328      	adds	r3, #40	@ 0x28
 80068e2:	2102      	movs	r1, #2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fe09 	bl	80074fc <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068f6:	4b6f      	ldr	r3, [pc, #444]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006906:	4a6b      	ldr	r2, [pc, #428]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006908:	430b      	orrs	r3, r1
 800690a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006918:	67bb      	str	r3, [r7, #120]	@ 0x78
 800691a:	2300      	movs	r3, #0
 800691c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800691e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006922:	460b      	mov	r3, r1
 8006924:	4313      	orrs	r3, r2
 8006926:	d03e      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006934:	d022      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800693a:	d81b      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006944:	d00b      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006946:	e015      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694c:	3308      	adds	r3, #8
 800694e:	2100      	movs	r1, #0
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fd21 	bl	8007398 <RCCEx_PLL2_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800695c:	e00f      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006962:	3328      	adds	r3, #40	@ 0x28
 8006964:	2102      	movs	r1, #2
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fdc8 	bl	80074fc <RCCEx_PLL3_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006972:	e004      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800697a:	e000      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800697c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800697e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006986:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800698a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006996:	4a47      	ldr	r2, [pc, #284]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006998:	430b      	orrs	r3, r1
 800699a:	6593      	str	r3, [r2, #88]	@ 0x58
 800699c:	e003      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80069b4:	2300      	movs	r3, #0
 80069b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069bc:	460b      	mov	r3, r1
 80069be:	4313      	orrs	r3, r2
 80069c0:	d03b      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069ce:	d01f      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80069d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069d4:	d818      	bhi.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80069d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069da:	d003      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80069dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069e0:	d007      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80069e2:	e011      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e4:	4b33      	ldr	r3, [pc, #204]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e8:	4a32      	ldr	r2, [pc, #200]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069f0:	e00f      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f6:	3328      	adds	r3, #40	@ 0x28
 80069f8:	2101      	movs	r1, #1
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fd7e 	bl	80074fc <RCCEx_PLL3_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a06:	e004      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a0e:	e000      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a1a:	4b26      	ldr	r3, [pc, #152]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a2a:	4a22      	ldr	r2, [pc, #136]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a30:	e003      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a48:	2300      	movs	r3, #0
 8006a4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a4c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a50:	460b      	mov	r3, r1
 8006a52:	4313      	orrs	r3, r2
 8006a54:	d034      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a64:	d007      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a66:	e011      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a68:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	4a11      	ldr	r2, [pc, #68]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a74:	e00e      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fc8a 	bl	8007398 <RCCEx_PLL2_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a8a:	e003      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10d      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a9c:	4b05      	ldr	r3, [pc, #20]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aaa:	4a02      	ldr	r2, [pc, #8]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aac:	430b      	orrs	r3, r1
 8006aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ab0:	e006      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006ab2:	bf00      	nop
 8006ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006abc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006acc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ace:	2300      	movs	r3, #0
 8006ad0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ad2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	d00c      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae0:	3328      	adds	r3, #40	@ 0x28
 8006ae2:	2102      	movs	r1, #2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fd09 	bl	80074fc <RCCEx_PLL3_Config>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b04:	2300      	movs	r3, #0
 8006b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b08:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	d036      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b1c:	d018      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b22:	d811      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b28:	d014      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b2e:	d80b      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d011      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b38:	d106      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b3a:	4bb7      	ldr	r3, [pc, #732]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3e:	4ab6      	ldr	r2, [pc, #728]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b46:	e008      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b4e:	e004      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b50:	bf00      	nop
 8006b52:	e002      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b62:	4bad      	ldr	r3, [pc, #692]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b70:	4aa9      	ldr	r2, [pc, #676]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b76:	e003      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b8e:	2300      	movs	r3, #0
 8006b90:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b96:	460b      	mov	r3, r1
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b9c:	4b9e      	ldr	r3, [pc, #632]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006baa:	4a9b      	ldr	r2, [pc, #620]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d009      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bcc:	4b92      	ldr	r3, [pc, #584]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bda:	4a8f      	ldr	r2, [pc, #572]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bee:	2300      	movs	r3, #0
 8006bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bfc:	4b86      	ldr	r3, [pc, #536]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	4a85      	ldr	r2, [pc, #532]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c06:	6113      	str	r3, [r2, #16]
 8006c08:	4b83      	ldr	r3, [pc, #524]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c0a:	6919      	ldr	r1, [r3, #16]
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c14:	4a80      	ldr	r2, [pc, #512]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c16:	430b      	orrs	r3, r1
 8006c18:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c2c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c30:	460b      	mov	r3, r1
 8006c32:	4313      	orrs	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c36:	4b78      	ldr	r3, [pc, #480]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c44:	4a74      	ldr	r2, [pc, #464]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c46:	430b      	orrs	r3, r1
 8006c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c56:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c58:	2300      	movs	r3, #0
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c5c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c60:	460b      	mov	r3, r1
 8006c62:	4313      	orrs	r3, r2
 8006c64:	d00a      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c66:	4b6c      	ldr	r3, [pc, #432]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c76:	4a68      	ldr	r2, [pc, #416]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	2100      	movs	r1, #0
 8006c86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c8e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c92:	460b      	mov	r3, r1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	d011      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fb79 	bl	8007398 <RCCEx_PLL2_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	6239      	str	r1, [r7, #32]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	d011      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cdc:	3308      	adds	r3, #8
 8006cde:	2101      	movs	r1, #1
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fb59 	bl	8007398 <RCCEx_PLL2_Config>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	2100      	movs	r1, #0
 8006d06:	61b9      	str	r1, [r7, #24]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d12:	460b      	mov	r3, r1
 8006d14:	4313      	orrs	r3, r2
 8006d16:	d011      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	2102      	movs	r1, #2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fb39 	bl	8007398 <RCCEx_PLL2_Config>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	2100      	movs	r1, #0
 8006d46:	6139      	str	r1, [r7, #16]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d52:	460b      	mov	r3, r1
 8006d54:	4313      	orrs	r3, r2
 8006d56:	d011      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5c:	3328      	adds	r3, #40	@ 0x28
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fbcb 	bl	80074fc <RCCEx_PLL3_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	2100      	movs	r1, #0
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	f003 0310 	and.w	r3, r3, #16
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d92:	460b      	mov	r3, r1
 8006d94:	4313      	orrs	r3, r2
 8006d96:	d011      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9c:	3328      	adds	r3, #40	@ 0x28
 8006d9e:	2101      	movs	r1, #1
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fbab 	bl	80074fc <RCCEx_PLL3_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6039      	str	r1, [r7, #0]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	607b      	str	r3, [r7, #4]
 8006dce:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	d011      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ddc:	3328      	adds	r3, #40	@ 0x28
 8006dde:	2102      	movs	r1, #2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fb8b 	bl	80074fc <RCCEx_PLL3_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006dfc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e000      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006e10:	46bd      	mov	sp, r7
 8006e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e16:	bf00      	nop
 8006e18:	58024400 	.word	0x58024400

08006e1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e20:	f7fe fe00 	bl	8005a24 <HAL_RCC_GetHCLKFreq>
 8006e24:	4602      	mov	r2, r0
 8006e26:	4b06      	ldr	r3, [pc, #24]	@ (8006e40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	091b      	lsrs	r3, r3, #4
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	4904      	ldr	r1, [pc, #16]	@ (8006e44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e32:	5ccb      	ldrb	r3, [r1, r3]
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	58024400 	.word	0x58024400
 8006e44:	0800da44 	.word	0x0800da44

08006e48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b089      	sub	sp, #36	@ 0x24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e50:	4ba1      	ldr	r3, [pc, #644]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e5a:	4b9f      	ldr	r3, [pc, #636]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5e:	0b1b      	lsrs	r3, r3, #12
 8006e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e66:	4b9c      	ldr	r3, [pc, #624]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6a:	091b      	lsrs	r3, r3, #4
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e72:	4b99      	ldr	r3, [pc, #612]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 8111 	beq.w	80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	f000 8083 	beq.w	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	f200 80a1 	bhi.w	8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d056      	beq.n	8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006eb2:	e099      	b.n	8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eb4:	4b88      	ldr	r3, [pc, #544]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d02d      	beq.n	8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ec0:	4b85      	ldr	r3, [pc, #532]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	08db      	lsrs	r3, r3, #3
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	4a84      	ldr	r2, [pc, #528]	@ (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	ee07 3a90 	vmov	s15, r3
 8006ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eea:	4b7b      	ldr	r3, [pc, #492]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f1a:	e087      	b.n	800702c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f5e:	e065      	b.n	800702c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f72:	4b59      	ldr	r3, [pc, #356]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fa2:	e043      	b.n	800702c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb6:	4b48      	ldr	r3, [pc, #288]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe6:	e021      	b.n	800702c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	4b37      	ldr	r3, [pc, #220]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	ed97 6a03 	vldr	s12, [r7, #12]
 800700e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800702a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800702c:	4b2a      	ldr	r3, [pc, #168]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007030:	0a5b      	lsrs	r3, r3, #9
 8007032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007046:	edd7 6a07 	vldr	s13, [r7, #28]
 800704a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007052:	ee17 2a90 	vmov	r2, s15
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800705a:	4b1f      	ldr	r3, [pc, #124]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007064:	ee07 3a90 	vmov	s15, r3
 8007068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007074:	edd7 6a07 	vldr	s13, [r7, #28]
 8007078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800707c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007080:	ee17 2a90 	vmov	r2, s15
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007088:	4b13      	ldr	r3, [pc, #76]	@ (80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708c:	0e1b      	lsrs	r3, r3, #24
 800708e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800709e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ae:	ee17 2a90 	vmov	r2, s15
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070b6:	e008      	b.n	80070ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	609a      	str	r2, [r3, #8]
}
 80070ca:	bf00      	nop
 80070cc:	3724      	adds	r7, #36	@ 0x24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	58024400 	.word	0x58024400
 80070dc:	03d09000 	.word	0x03d09000
 80070e0:	46000000 	.word	0x46000000
 80070e4:	4c742400 	.word	0x4c742400
 80070e8:	4a742400 	.word	0x4a742400
 80070ec:	4af42400 	.word	0x4af42400

080070f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b089      	sub	sp, #36	@ 0x24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070f8:	4ba1      	ldr	r3, [pc, #644]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007102:	4b9f      	ldr	r3, [pc, #636]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007106:	0d1b      	lsrs	r3, r3, #20
 8007108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800710c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800710e:	4b9c      	ldr	r3, [pc, #624]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800711a:	4b99      	ldr	r3, [pc, #612]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800711c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711e:	08db      	lsrs	r3, r3, #3
 8007120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	fb02 f303 	mul.w	r3, r2, r3
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8111 	beq.w	8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b02      	cmp	r3, #2
 8007142:	f000 8083 	beq.w	800724c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b02      	cmp	r3, #2
 800714a:	f200 80a1 	bhi.w	8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d056      	beq.n	8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800715a:	e099      	b.n	8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800715c:	4b88      	ldr	r3, [pc, #544]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b00      	cmp	r3, #0
 8007166:	d02d      	beq.n	80071c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007168:	4b85      	ldr	r3, [pc, #532]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	08db      	lsrs	r3, r3, #3
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	4a84      	ldr	r2, [pc, #528]	@ (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007174:	fa22 f303 	lsr.w	r3, r2, r3
 8007178:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b7b      	ldr	r3, [pc, #492]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071c2:	e087      	b.n	80072d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007206:	e065      	b.n	80072d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721a:	4b59      	ldr	r3, [pc, #356]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722a:	ed97 6a03 	vldr	s12, [r7, #12]
 800722e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800724a:	e043      	b.n	80072d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800725a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725e:	4b48      	ldr	r3, [pc, #288]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007272:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800728e:	e021      	b.n	80072d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800729e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a2:	4b37      	ldr	r3, [pc, #220]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072d4:	4b2a      	ldr	r3, [pc, #168]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	0a5b      	lsrs	r3, r3, #9
 80072da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fa:	ee17 2a90 	vmov	r2, s15
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007302:	4b1f      	ldr	r3, [pc, #124]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	0c1b      	lsrs	r3, r3, #16
 8007308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007314:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007328:	ee17 2a90 	vmov	r2, s15
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007330:	4b13      	ldr	r3, [pc, #76]	@ (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	0e1b      	lsrs	r3, r3, #24
 8007336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007346:	ee37 7a87 	vadd.f32	s14, s15, s14
 800734a:	edd7 6a07 	vldr	s13, [r7, #28]
 800734e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007356:	ee17 2a90 	vmov	r2, s15
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800735e:	e008      	b.n	8007372 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	609a      	str	r2, [r3, #8]
}
 8007372:	bf00      	nop
 8007374:	3724      	adds	r7, #36	@ 0x24
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	58024400 	.word	0x58024400
 8007384:	03d09000 	.word	0x03d09000
 8007388:	46000000 	.word	0x46000000
 800738c:	4c742400 	.word	0x4c742400
 8007390:	4a742400 	.word	0x4a742400
 8007394:	4af42400 	.word	0x4af42400

08007398 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073a6:	4b53      	ldr	r3, [pc, #332]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d101      	bne.n	80073b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e099      	b.n	80074ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073b6:	4b4f      	ldr	r3, [pc, #316]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a4e      	ldr	r2, [pc, #312]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80073bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073c2:	f7fa fab1 	bl	8001928 <HAL_GetTick>
 80073c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073c8:	e008      	b.n	80073dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073ca:	f7fa faad 	bl	8001928 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e086      	b.n	80074ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073dc:	4b45      	ldr	r3, [pc, #276]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1f0      	bne.n	80073ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073e8:	4b42      	ldr	r3, [pc, #264]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80073ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	031b      	lsls	r3, r3, #12
 80073f6:	493f      	ldr	r1, [pc, #252]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	3b01      	subs	r3, #1
 8007402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	3b01      	subs	r3, #1
 800740c:	025b      	lsls	r3, r3, #9
 800740e:	b29b      	uxth	r3, r3
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	3b01      	subs	r3, #1
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	3b01      	subs	r3, #1
 8007426:	061b      	lsls	r3, r3, #24
 8007428:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800742c:	4931      	ldr	r1, [pc, #196]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 800742e:	4313      	orrs	r3, r2
 8007430:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007432:	4b30      	ldr	r3, [pc, #192]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	492d      	ldr	r1, [pc, #180]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 8007440:	4313      	orrs	r3, r2
 8007442:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007444:	4b2b      	ldr	r3, [pc, #172]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 8007446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007448:	f023 0220 	bic.w	r2, r3, #32
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	4928      	ldr	r1, [pc, #160]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 8007452:	4313      	orrs	r3, r2
 8007454:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007456:	4b27      	ldr	r3, [pc, #156]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 8007458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745a:	4a26      	ldr	r2, [pc, #152]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 800745c:	f023 0310 	bic.w	r3, r3, #16
 8007460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007462:	4b24      	ldr	r3, [pc, #144]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 8007464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007466:	4b24      	ldr	r3, [pc, #144]	@ (80074f8 <RCCEx_PLL2_Config+0x160>)
 8007468:	4013      	ands	r3, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	69d2      	ldr	r2, [r2, #28]
 800746e:	00d2      	lsls	r2, r2, #3
 8007470:	4920      	ldr	r1, [pc, #128]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 8007472:	4313      	orrs	r3, r2
 8007474:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007476:	4b1f      	ldr	r3, [pc, #124]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	4a1e      	ldr	r2, [pc, #120]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 800747c:	f043 0310 	orr.w	r3, r3, #16
 8007480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d106      	bne.n	8007496 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007488:	4b1a      	ldr	r3, [pc, #104]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	4a19      	ldr	r2, [pc, #100]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 800748e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007494:	e00f      	b.n	80074b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d106      	bne.n	80074aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800749c:	4b15      	ldr	r3, [pc, #84]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 800749e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a0:	4a14      	ldr	r2, [pc, #80]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80074a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074a8:	e005      	b.n	80074b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074aa:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ae:	4a11      	ldr	r2, [pc, #68]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80074b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074b6:	4b0f      	ldr	r3, [pc, #60]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a0e      	ldr	r2, [pc, #56]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c2:	f7fa fa31 	bl	8001928 <HAL_GetTick>
 80074c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074c8:	e008      	b.n	80074dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074ca:	f7fa fa2d 	bl	8001928 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e006      	b.n	80074ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074dc:	4b05      	ldr	r3, [pc, #20]	@ (80074f4 <RCCEx_PLL2_Config+0x15c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0f0      	beq.n	80074ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	58024400 	.word	0x58024400
 80074f8:	ffff0007 	.word	0xffff0007

080074fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800750a:	4b53      	ldr	r3, [pc, #332]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 800750c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	2b03      	cmp	r3, #3
 8007514:	d101      	bne.n	800751a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e099      	b.n	800764e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800751a:	4b4f      	ldr	r3, [pc, #316]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a4e      	ldr	r2, [pc, #312]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007526:	f7fa f9ff 	bl	8001928 <HAL_GetTick>
 800752a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800752c:	e008      	b.n	8007540 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800752e:	f7fa f9fb 	bl	8001928 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d901      	bls.n	8007540 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e086      	b.n	800764e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007540:	4b45      	ldr	r3, [pc, #276]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1f0      	bne.n	800752e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800754c:	4b42      	ldr	r3, [pc, #264]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 800754e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007550:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	051b      	lsls	r3, r3, #20
 800755a:	493f      	ldr	r1, [pc, #252]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 800755c:	4313      	orrs	r3, r2
 800755e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	3b01      	subs	r3, #1
 8007566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	3b01      	subs	r3, #1
 8007570:	025b      	lsls	r3, r3, #9
 8007572:	b29b      	uxth	r3, r3
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	3b01      	subs	r3, #1
 800757c:	041b      	lsls	r3, r3, #16
 800757e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	3b01      	subs	r3, #1
 800758a:	061b      	lsls	r3, r3, #24
 800758c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007590:	4931      	ldr	r1, [pc, #196]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007596:	4b30      	ldr	r3, [pc, #192]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	492d      	ldr	r1, [pc, #180]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	4928      	ldr	r1, [pc, #160]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075ba:	4b27      	ldr	r3, [pc, #156]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075be:	4a26      	ldr	r2, [pc, #152]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075c6:	4b24      	ldr	r3, [pc, #144]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075ca:	4b24      	ldr	r3, [pc, #144]	@ (800765c <RCCEx_PLL3_Config+0x160>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	69d2      	ldr	r2, [r2, #28]
 80075d2:	00d2      	lsls	r2, r2, #3
 80075d4:	4920      	ldr	r1, [pc, #128]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075da:	4b1f      	ldr	r3, [pc, #124]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	4a1e      	ldr	r2, [pc, #120]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d106      	bne.n	80075fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f0:	4a19      	ldr	r2, [pc, #100]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 80075f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075f8:	e00f      	b.n	800761a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d106      	bne.n	800760e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007600:	4b15      	ldr	r3, [pc, #84]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	4a14      	ldr	r2, [pc, #80]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800760a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800760c:	e005      	b.n	800761a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800760e:	4b12      	ldr	r3, [pc, #72]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007612:	4a11      	ldr	r2, [pc, #68]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007618:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800761a:	4b0f      	ldr	r3, [pc, #60]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a0e      	ldr	r2, [pc, #56]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007626:	f7fa f97f 	bl	8001928 <HAL_GetTick>
 800762a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800762c:	e008      	b.n	8007640 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800762e:	f7fa f97b 	bl	8001928 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d901      	bls.n	8007640 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e006      	b.n	800764e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007640:	4b05      	ldr	r3, [pc, #20]	@ (8007658 <RCCEx_PLL3_Config+0x15c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0f0      	beq.n	800762e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	58024400 	.word	0x58024400
 800765c:	ffff0007 	.word	0xffff0007

08007660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e049      	b.n	8007706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7f9 fdb4 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f001 f8f6 	bl	8008890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e049      	b.n	80077b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d106      	bne.n	800773a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7f9 fd3b 	bl	80011b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3304      	adds	r3, #4
 800774a:	4619      	mov	r1, r3
 800774c:	4610      	mov	r0, r2
 800774e:	f001 f89f 	bl	8008890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <HAL_TIM_PWM_Start+0x24>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	bf14      	ite	ne
 80077d8:	2301      	movne	r3, #1
 80077da:	2300      	moveq	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e03c      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d109      	bne.n	80077fa <HAL_TIM_PWM_Start+0x3e>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	bf14      	ite	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	2300      	moveq	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	e02f      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d109      	bne.n	8007814 <HAL_TIM_PWM_Start+0x58>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b01      	cmp	r3, #1
 800780a:	bf14      	ite	ne
 800780c:	2301      	movne	r3, #1
 800780e:	2300      	moveq	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	e022      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b0c      	cmp	r3, #12
 8007818:	d109      	bne.n	800782e <HAL_TIM_PWM_Start+0x72>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b01      	cmp	r3, #1
 8007824:	bf14      	ite	ne
 8007826:	2301      	movne	r3, #1
 8007828:	2300      	moveq	r3, #0
 800782a:	b2db      	uxtb	r3, r3
 800782c:	e015      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b10      	cmp	r3, #16
 8007832:	d109      	bne.n	8007848 <HAL_TIM_PWM_Start+0x8c>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b01      	cmp	r3, #1
 800783e:	bf14      	ite	ne
 8007840:	2301      	movne	r3, #1
 8007842:	2300      	moveq	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	e008      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b01      	cmp	r3, #1
 8007852:	bf14      	ite	ne
 8007854:	2301      	movne	r3, #1
 8007856:	2300      	moveq	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e0ab      	b.n	80079ba <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d104      	bne.n	8007872 <HAL_TIM_PWM_Start+0xb6>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007870:	e023      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b04      	cmp	r3, #4
 8007876:	d104      	bne.n	8007882 <HAL_TIM_PWM_Start+0xc6>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007880:	e01b      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b08      	cmp	r3, #8
 8007886:	d104      	bne.n	8007892 <HAL_TIM_PWM_Start+0xd6>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007890:	e013      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b0c      	cmp	r3, #12
 8007896:	d104      	bne.n	80078a2 <HAL_TIM_PWM_Start+0xe6>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078a0:	e00b      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d104      	bne.n	80078b2 <HAL_TIM_PWM_Start+0xf6>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078b0:	e003      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2201      	movs	r2, #1
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 fc0a 	bl	80090dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a3d      	ldr	r2, [pc, #244]	@ (80079c4 <HAL_TIM_PWM_Start+0x208>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d013      	beq.n	80078fa <HAL_TIM_PWM_Start+0x13e>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a3c      	ldr	r2, [pc, #240]	@ (80079c8 <HAL_TIM_PWM_Start+0x20c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00e      	beq.n	80078fa <HAL_TIM_PWM_Start+0x13e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a3a      	ldr	r2, [pc, #232]	@ (80079cc <HAL_TIM_PWM_Start+0x210>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d009      	beq.n	80078fa <HAL_TIM_PWM_Start+0x13e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a39      	ldr	r2, [pc, #228]	@ (80079d0 <HAL_TIM_PWM_Start+0x214>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d004      	beq.n	80078fa <HAL_TIM_PWM_Start+0x13e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a37      	ldr	r2, [pc, #220]	@ (80079d4 <HAL_TIM_PWM_Start+0x218>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_PWM_Start+0x142>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <HAL_TIM_PWM_Start+0x144>
 80078fe:	2300      	movs	r3, #0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007912:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2a      	ldr	r2, [pc, #168]	@ (80079c4 <HAL_TIM_PWM_Start+0x208>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d02c      	beq.n	8007978 <HAL_TIM_PWM_Start+0x1bc>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007926:	d027      	beq.n	8007978 <HAL_TIM_PWM_Start+0x1bc>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a2a      	ldr	r2, [pc, #168]	@ (80079d8 <HAL_TIM_PWM_Start+0x21c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d022      	beq.n	8007978 <HAL_TIM_PWM_Start+0x1bc>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a29      	ldr	r2, [pc, #164]	@ (80079dc <HAL_TIM_PWM_Start+0x220>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d01d      	beq.n	8007978 <HAL_TIM_PWM_Start+0x1bc>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a27      	ldr	r2, [pc, #156]	@ (80079e0 <HAL_TIM_PWM_Start+0x224>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d018      	beq.n	8007978 <HAL_TIM_PWM_Start+0x1bc>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1f      	ldr	r2, [pc, #124]	@ (80079c8 <HAL_TIM_PWM_Start+0x20c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d013      	beq.n	8007978 <HAL_TIM_PWM_Start+0x1bc>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a23      	ldr	r2, [pc, #140]	@ (80079e4 <HAL_TIM_PWM_Start+0x228>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00e      	beq.n	8007978 <HAL_TIM_PWM_Start+0x1bc>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a1b      	ldr	r2, [pc, #108]	@ (80079cc <HAL_TIM_PWM_Start+0x210>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d009      	beq.n	8007978 <HAL_TIM_PWM_Start+0x1bc>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1f      	ldr	r2, [pc, #124]	@ (80079e8 <HAL_TIM_PWM_Start+0x22c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_TIM_PWM_Start+0x1bc>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1e      	ldr	r2, [pc, #120]	@ (80079ec <HAL_TIM_PWM_Start+0x230>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d115      	bne.n	80079a4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	4b1c      	ldr	r3, [pc, #112]	@ (80079f0 <HAL_TIM_PWM_Start+0x234>)
 8007980:	4013      	ands	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b06      	cmp	r3, #6
 8007988:	d015      	beq.n	80079b6 <HAL_TIM_PWM_Start+0x1fa>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007990:	d011      	beq.n	80079b6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0201 	orr.w	r2, r2, #1
 80079a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a2:	e008      	b.n	80079b6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e000      	b.n	80079b8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40010400 	.word	0x40010400
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40001800 	.word	0x40001800
 80079e8:	4000e000 	.word	0x4000e000
 80079ec:	4000e400 	.word	0x4000e400
 80079f0:	00010007 	.word	0x00010007

080079f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d109      	bne.n	8007a20 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	bf0c      	ite	eq
 8007a18:	2301      	moveq	r3, #1
 8007a1a:	2300      	movne	r3, #0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	e03c      	b.n	8007a9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d109      	bne.n	8007a3a <HAL_TIM_PWM_Start_DMA+0x46>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	bf0c      	ite	eq
 8007a32:	2301      	moveq	r3, #1
 8007a34:	2300      	movne	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	e02f      	b.n	8007a9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d109      	bne.n	8007a54 <HAL_TIM_PWM_Start_DMA+0x60>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	bf0c      	ite	eq
 8007a4c:	2301      	moveq	r3, #1
 8007a4e:	2300      	movne	r3, #0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	e022      	b.n	8007a9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b0c      	cmp	r3, #12
 8007a58:	d109      	bne.n	8007a6e <HAL_TIM_PWM_Start_DMA+0x7a>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	bf0c      	ite	eq
 8007a66:	2301      	moveq	r3, #1
 8007a68:	2300      	movne	r3, #0
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	e015      	b.n	8007a9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b10      	cmp	r3, #16
 8007a72:	d109      	bne.n	8007a88 <HAL_TIM_PWM_Start_DMA+0x94>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	bf0c      	ite	eq
 8007a80:	2301      	moveq	r3, #1
 8007a82:	2300      	movne	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	e008      	b.n	8007a9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	bf0c      	ite	eq
 8007a94:	2301      	moveq	r3, #1
 8007a96:	2300      	movne	r3, #0
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e1ba      	b.n	8007e18 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <HAL_TIM_PWM_Start_DMA+0xc8>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	bf0c      	ite	eq
 8007ab4:	2301      	moveq	r3, #1
 8007ab6:	2300      	movne	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	e03c      	b.n	8007b36 <HAL_TIM_PWM_Start_DMA+0x142>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d109      	bne.n	8007ad6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	bf0c      	ite	eq
 8007ace:	2301      	moveq	r3, #1
 8007ad0:	2300      	movne	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	e02f      	b.n	8007b36 <HAL_TIM_PWM_Start_DMA+0x142>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d109      	bne.n	8007af0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	bf0c      	ite	eq
 8007ae8:	2301      	moveq	r3, #1
 8007aea:	2300      	movne	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	e022      	b.n	8007b36 <HAL_TIM_PWM_Start_DMA+0x142>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b0c      	cmp	r3, #12
 8007af4:	d109      	bne.n	8007b0a <HAL_TIM_PWM_Start_DMA+0x116>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	bf0c      	ite	eq
 8007b02:	2301      	moveq	r3, #1
 8007b04:	2300      	movne	r3, #0
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	e015      	b.n	8007b36 <HAL_TIM_PWM_Start_DMA+0x142>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b10      	cmp	r3, #16
 8007b0e:	d109      	bne.n	8007b24 <HAL_TIM_PWM_Start_DMA+0x130>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	bf0c      	ite	eq
 8007b1c:	2301      	moveq	r3, #1
 8007b1e:	2300      	movne	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	e008      	b.n	8007b36 <HAL_TIM_PWM_Start_DMA+0x142>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	bf0c      	ite	eq
 8007b30:	2301      	moveq	r3, #1
 8007b32:	2300      	movne	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d034      	beq.n	8007ba4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <HAL_TIM_PWM_Start_DMA+0x152>
 8007b40:	887b      	ldrh	r3, [r7, #2]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e166      	b.n	8007e18 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_PWM_Start_DMA+0x166>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b58:	e026      	b.n	8007ba8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b04      	cmp	r3, #4
 8007b5e:	d104      	bne.n	8007b6a <HAL_TIM_PWM_Start_DMA+0x176>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b68:	e01e      	b.n	8007ba8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d104      	bne.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x186>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b78:	e016      	b.n	8007ba8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b0c      	cmp	r3, #12
 8007b7e:	d104      	bne.n	8007b8a <HAL_TIM_PWM_Start_DMA+0x196>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b88:	e00e      	b.n	8007ba8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b10      	cmp	r3, #16
 8007b8e:	d104      	bne.n	8007b9a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b98:	e006      	b.n	8007ba8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ba2:	e001      	b.n	8007ba8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e137      	b.n	8007e18 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b0c      	cmp	r3, #12
 8007bac:	f200 80ae 	bhi.w	8007d0c <HAL_TIM_PWM_Start_DMA+0x318>
 8007bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bed 	.word	0x08007bed
 8007bbc:	08007d0d 	.word	0x08007d0d
 8007bc0:	08007d0d 	.word	0x08007d0d
 8007bc4:	08007d0d 	.word	0x08007d0d
 8007bc8:	08007c35 	.word	0x08007c35
 8007bcc:	08007d0d 	.word	0x08007d0d
 8007bd0:	08007d0d 	.word	0x08007d0d
 8007bd4:	08007d0d 	.word	0x08007d0d
 8007bd8:	08007c7d 	.word	0x08007c7d
 8007bdc:	08007d0d 	.word	0x08007d0d
 8007be0:	08007d0d 	.word	0x08007d0d
 8007be4:	08007d0d 	.word	0x08007d0d
 8007be8:	08007cc5 	.word	0x08007cc5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf0:	4a8b      	ldr	r2, [pc, #556]	@ (8007e20 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf8:	4a8a      	ldr	r2, [pc, #552]	@ (8007e24 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007bfa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c00:	4a89      	ldr	r2, [pc, #548]	@ (8007e28 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007c02:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3334      	adds	r3, #52	@ 0x34
 8007c10:	461a      	mov	r2, r3
 8007c12:	887b      	ldrh	r3, [r7, #2]
 8007c14:	f7fa fb20 	bl	8002258 <HAL_DMA_Start_IT>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e0fa      	b.n	8007e18 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c30:	60da      	str	r2, [r3, #12]
      break;
 8007c32:	e06e      	b.n	8007d12 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c38:	4a79      	ldr	r2, [pc, #484]	@ (8007e20 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c40:	4a78      	ldr	r2, [pc, #480]	@ (8007e24 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007c42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c48:	4a77      	ldr	r2, [pc, #476]	@ (8007e28 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007c4a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3338      	adds	r3, #56	@ 0x38
 8007c58:	461a      	mov	r2, r3
 8007c5a:	887b      	ldrh	r3, [r7, #2]
 8007c5c:	f7fa fafc 	bl	8002258 <HAL_DMA_Start_IT>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e0d6      	b.n	8007e18 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c78:	60da      	str	r2, [r3, #12]
      break;
 8007c7a:	e04a      	b.n	8007d12 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c80:	4a67      	ldr	r2, [pc, #412]	@ (8007e20 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007c82:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4a66      	ldr	r2, [pc, #408]	@ (8007e24 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	4a65      	ldr	r2, [pc, #404]	@ (8007e28 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007c92:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	333c      	adds	r3, #60	@ 0x3c
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	887b      	ldrh	r3, [r7, #2]
 8007ca4:	f7fa fad8 	bl	8002258 <HAL_DMA_Start_IT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e0b2      	b.n	8007e18 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cc0:	60da      	str	r2, [r3, #12]
      break;
 8007cc2:	e026      	b.n	8007d12 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc8:	4a55      	ldr	r2, [pc, #340]	@ (8007e20 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007cca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd0:	4a54      	ldr	r2, [pc, #336]	@ (8007e24 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007cd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd8:	4a53      	ldr	r2, [pc, #332]	@ (8007e28 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007cda:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3340      	adds	r3, #64	@ 0x40
 8007ce8:	461a      	mov	r2, r3
 8007cea:	887b      	ldrh	r3, [r7, #2]
 8007cec:	f7fa fab4 	bl	8002258 <HAL_DMA_Start_IT>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e08e      	b.n	8007e18 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d08:	60da      	str	r2, [r3, #12]
      break;
 8007d0a:	e002      	b.n	8007d12 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d10:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d17e      	bne.n	8007e16 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	68b9      	ldr	r1, [r7, #8]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 f9db 	bl	80090dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a40      	ldr	r2, [pc, #256]	@ (8007e2c <HAL_TIM_PWM_Start_DMA+0x438>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d013      	beq.n	8007d58 <HAL_TIM_PWM_Start_DMA+0x364>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a3e      	ldr	r2, [pc, #248]	@ (8007e30 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d00e      	beq.n	8007d58 <HAL_TIM_PWM_Start_DMA+0x364>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a3d      	ldr	r2, [pc, #244]	@ (8007e34 <HAL_TIM_PWM_Start_DMA+0x440>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d009      	beq.n	8007d58 <HAL_TIM_PWM_Start_DMA+0x364>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a3b      	ldr	r2, [pc, #236]	@ (8007e38 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <HAL_TIM_PWM_Start_DMA+0x364>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a3a      	ldr	r2, [pc, #232]	@ (8007e3c <HAL_TIM_PWM_Start_DMA+0x448>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d101      	bne.n	8007d5c <HAL_TIM_PWM_Start_DMA+0x368>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <HAL_TIM_PWM_Start_DMA+0x36a>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a2d      	ldr	r2, [pc, #180]	@ (8007e2c <HAL_TIM_PWM_Start_DMA+0x438>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d02c      	beq.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d84:	d027      	beq.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8007e40 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d022      	beq.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a2b      	ldr	r2, [pc, #172]	@ (8007e44 <HAL_TIM_PWM_Start_DMA+0x450>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01d      	beq.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8007e48 <HAL_TIM_PWM_Start_DMA+0x454>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d018      	beq.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a21      	ldr	r2, [pc, #132]	@ (8007e30 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a26      	ldr	r2, [pc, #152]	@ (8007e4c <HAL_TIM_PWM_Start_DMA+0x458>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e34 <HAL_TIM_PWM_Start_DMA+0x440>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a22      	ldr	r2, [pc, #136]	@ (8007e50 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a20      	ldr	r2, [pc, #128]	@ (8007e54 <HAL_TIM_PWM_Start_DMA+0x460>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d115      	bne.n	8007e02 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8007e58 <HAL_TIM_PWM_Start_DMA+0x464>)
 8007dde:	4013      	ands	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	2b06      	cmp	r3, #6
 8007de6:	d015      	beq.n	8007e14 <HAL_TIM_PWM_Start_DMA+0x420>
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dee:	d011      	beq.n	8007e14 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e00:	e008      	b.n	8007e14 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0201 	orr.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	e000      	b.n	8007e16 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e14:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	0800877f 	.word	0x0800877f
 8007e24:	08008827 	.word	0x08008827
 8007e28:	080086ed 	.word	0x080086ed
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40010400 	.word	0x40010400
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40014400 	.word	0x40014400
 8007e3c:	40014800 	.word	0x40014800
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	40001800 	.word	0x40001800
 8007e50:	4000e000 	.word	0x4000e000
 8007e54:	4000e400 	.word	0x4000e400
 8007e58:	00010007 	.word	0x00010007

08007e5c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b0c      	cmp	r3, #12
 8007e6e:	d855      	bhi.n	8007f1c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007e70:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007ead 	.word	0x08007ead
 8007e7c:	08007f1d 	.word	0x08007f1d
 8007e80:	08007f1d 	.word	0x08007f1d
 8007e84:	08007f1d 	.word	0x08007f1d
 8007e88:	08007ec9 	.word	0x08007ec9
 8007e8c:	08007f1d 	.word	0x08007f1d
 8007e90:	08007f1d 	.word	0x08007f1d
 8007e94:	08007f1d 	.word	0x08007f1d
 8007e98:	08007ee5 	.word	0x08007ee5
 8007e9c:	08007f1d 	.word	0x08007f1d
 8007ea0:	08007f1d 	.word	0x08007f1d
 8007ea4:	08007f1d 	.word	0x08007f1d
 8007ea8:	08007f01 	.word	0x08007f01
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007eba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fa ff51 	bl	8002d68 <HAL_DMA_Abort_IT>
      break;
 8007ec6:	e02c      	b.n	8007f22 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ed6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fa ff43 	bl	8002d68 <HAL_DMA_Abort_IT>
      break;
 8007ee2:	e01e      	b.n	8007f22 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ef2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fa ff35 	bl	8002d68 <HAL_DMA_Abort_IT>
      break;
 8007efe:	e010      	b.n	8007f22 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fa ff27 	bl	8002d68 <HAL_DMA_Abort_IT>
      break;
 8007f1a:	e002      	b.n	8007f22 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f20:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f040 8081 	bne.w	800802c <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 f8d2 	bl	80090dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a3e      	ldr	r2, [pc, #248]	@ (8008038 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d013      	beq.n	8007f6a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a3d      	ldr	r2, [pc, #244]	@ (800803c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d00e      	beq.n	8007f6a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a3b      	ldr	r2, [pc, #236]	@ (8008040 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d009      	beq.n	8007f6a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a3a      	ldr	r2, [pc, #232]	@ (8008044 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a38      	ldr	r2, [pc, #224]	@ (8008048 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d101      	bne.n	8007f6e <HAL_TIM_PWM_Stop_DMA+0x112>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e000      	b.n	8007f70 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d017      	beq.n	8007fa4 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6a1a      	ldr	r2, [r3, #32]
 8007f7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007f7e:	4013      	ands	r3, r2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10f      	bne.n	8007fa4 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6a1a      	ldr	r2, [r3, #32]
 8007f8a:	f240 4344 	movw	r3, #1092	@ 0x444
 8007f8e:	4013      	ands	r3, r2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d107      	bne.n	8007fa4 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007fa2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6a1a      	ldr	r2, [r3, #32]
 8007faa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007fae:	4013      	ands	r3, r2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10f      	bne.n	8007fd4 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6a1a      	ldr	r2, [r3, #32]
 8007fba:	f240 4344 	movw	r3, #1092	@ 0x444
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d107      	bne.n	8007fd4 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0201 	bic.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d104      	bne.n	8007fe4 <HAL_TIM_PWM_Stop_DMA+0x188>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fe2:	e023      	b.n	800802c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d104      	bne.n	8007ff4 <HAL_TIM_PWM_Stop_DMA+0x198>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ff2:	e01b      	b.n	800802c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	d104      	bne.n	8008004 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008002:	e013      	b.n	800802c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b0c      	cmp	r3, #12
 8008008:	d104      	bne.n	8008014 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008012:	e00b      	b.n	800802c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b10      	cmp	r3, #16
 8008018:	d104      	bne.n	8008024 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008022:	e003      	b.n	800802c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40010000 	.word	0x40010000
 800803c:	40010400 	.word	0x40010400
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400
 8008048:	40014800 	.word	0x40014800

0800804c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d020      	beq.n	80080b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01b      	beq.n	80080b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f06f 0202 	mvn.w	r2, #2
 8008080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fb00 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 800809c:	e005      	b.n	80080aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 faf2 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7f8 fbad 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f003 0304 	and.w	r3, r3, #4
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d020      	beq.n	80080fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d01b      	beq.n	80080fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f06f 0204 	mvn.w	r2, #4
 80080cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2202      	movs	r2, #2
 80080d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fada 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 80080e8:	e005      	b.n	80080f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 facc 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7f8 fb87 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d020      	beq.n	8008148 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01b      	beq.n	8008148 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f06f 0208 	mvn.w	r2, #8
 8008118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2204      	movs	r2, #4
 800811e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fab4 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 8008134:	e005      	b.n	8008142 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 faa6 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7f8 fb61 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b00      	cmp	r3, #0
 8008150:	d020      	beq.n	8008194 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f003 0310 	and.w	r3, r3, #16
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01b      	beq.n	8008194 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0210 	mvn.w	r2, #16
 8008164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2208      	movs	r2, #8
 800816a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa8e 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 8008180:	e005      	b.n	800818e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa80 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7f8 fb3b 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f06f 0201 	mvn.w	r2, #1
 80081b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fa5e 	bl	8008674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d104      	bne.n	80081cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00c      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d007      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80081de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 f8d3 	bl	800938c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 f8cb 	bl	80093a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00c      	beq.n	800822e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fa4b 	bl	80086c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f06f 0220 	mvn.w	r2, #32
 800824a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 f893 	bl	8009378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008276:	2302      	movs	r3, #2
 8008278:	e0ff      	b.n	800847a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b14      	cmp	r3, #20
 8008286:	f200 80f0 	bhi.w	800846a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082e5 	.word	0x080082e5
 8008294:	0800846b 	.word	0x0800846b
 8008298:	0800846b 	.word	0x0800846b
 800829c:	0800846b 	.word	0x0800846b
 80082a0:	08008325 	.word	0x08008325
 80082a4:	0800846b 	.word	0x0800846b
 80082a8:	0800846b 	.word	0x0800846b
 80082ac:	0800846b 	.word	0x0800846b
 80082b0:	08008367 	.word	0x08008367
 80082b4:	0800846b 	.word	0x0800846b
 80082b8:	0800846b 	.word	0x0800846b
 80082bc:	0800846b 	.word	0x0800846b
 80082c0:	080083a7 	.word	0x080083a7
 80082c4:	0800846b 	.word	0x0800846b
 80082c8:	0800846b 	.word	0x0800846b
 80082cc:	0800846b 	.word	0x0800846b
 80082d0:	080083e9 	.word	0x080083e9
 80082d4:	0800846b 	.word	0x0800846b
 80082d8:	0800846b 	.word	0x0800846b
 80082dc:	0800846b 	.word	0x0800846b
 80082e0:	08008429 	.word	0x08008429
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fb82 	bl	80089f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0208 	orr.w	r2, r2, #8
 80082fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0204 	bic.w	r2, r2, #4
 800830e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6999      	ldr	r1, [r3, #24]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	691a      	ldr	r2, [r3, #16]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	619a      	str	r2, [r3, #24]
      break;
 8008322:	e0a5      	b.n	8008470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fbf2 	bl	8008b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800833e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800834e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6999      	ldr	r1, [r3, #24]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	021a      	lsls	r2, r3, #8
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	619a      	str	r2, [r3, #24]
      break;
 8008364:	e084      	b.n	8008470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fc5b 	bl	8008c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69da      	ldr	r2, [r3, #28]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0208 	orr.w	r2, r2, #8
 8008380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69da      	ldr	r2, [r3, #28]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0204 	bic.w	r2, r2, #4
 8008390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69d9      	ldr	r1, [r3, #28]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	61da      	str	r2, [r3, #28]
      break;
 80083a4:	e064      	b.n	8008470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68b9      	ldr	r1, [r7, #8]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 fcc3 	bl	8008d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69da      	ldr	r2, [r3, #28]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69da      	ldr	r2, [r3, #28]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69d9      	ldr	r1, [r3, #28]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	021a      	lsls	r2, r3, #8
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	61da      	str	r2, [r3, #28]
      break;
 80083e6:	e043      	b.n	8008470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68b9      	ldr	r1, [r7, #8]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 fd0c 	bl	8008e0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0208 	orr.w	r2, r2, #8
 8008402:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0204 	bic.w	r2, r2, #4
 8008412:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	691a      	ldr	r2, [r3, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	430a      	orrs	r2, r1
 8008424:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008426:	e023      	b.n	8008470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fd50 	bl	8008ed4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008442:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008452:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	021a      	lsls	r2, r3, #8
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008468:	e002      	b.n	8008470 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	75fb      	strb	r3, [r7, #23]
      break;
 800846e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008478:	7dfb      	ldrb	r3, [r7, #23]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop

08008484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_TIM_ConfigClockSource+0x1c>
 800849c:	2302      	movs	r3, #2
 800849e:	e0dc      	b.n	800865a <HAL_TIM_ConfigClockSource+0x1d6>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	4b6a      	ldr	r3, [pc, #424]	@ (8008664 <HAL_TIM_ConfigClockSource+0x1e0>)
 80084bc:	4013      	ands	r3, r2
 80084be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a64      	ldr	r2, [pc, #400]	@ (8008668 <HAL_TIM_ConfigClockSource+0x1e4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	f000 80a9 	beq.w	800862e <HAL_TIM_ConfigClockSource+0x1aa>
 80084dc:	4a62      	ldr	r2, [pc, #392]	@ (8008668 <HAL_TIM_ConfigClockSource+0x1e4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	f200 80ae 	bhi.w	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 80084e4:	4a61      	ldr	r2, [pc, #388]	@ (800866c <HAL_TIM_ConfigClockSource+0x1e8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	f000 80a1 	beq.w	800862e <HAL_TIM_ConfigClockSource+0x1aa>
 80084ec:	4a5f      	ldr	r2, [pc, #380]	@ (800866c <HAL_TIM_ConfigClockSource+0x1e8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	f200 80a6 	bhi.w	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 80084f4:	4a5e      	ldr	r2, [pc, #376]	@ (8008670 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	f000 8099 	beq.w	800862e <HAL_TIM_ConfigClockSource+0x1aa>
 80084fc:	4a5c      	ldr	r2, [pc, #368]	@ (8008670 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	f200 809e 	bhi.w	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008504:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008508:	f000 8091 	beq.w	800862e <HAL_TIM_ConfigClockSource+0x1aa>
 800850c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008510:	f200 8096 	bhi.w	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008518:	f000 8089 	beq.w	800862e <HAL_TIM_ConfigClockSource+0x1aa>
 800851c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008520:	f200 808e 	bhi.w	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008528:	d03e      	beq.n	80085a8 <HAL_TIM_ConfigClockSource+0x124>
 800852a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800852e:	f200 8087 	bhi.w	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008536:	f000 8086 	beq.w	8008646 <HAL_TIM_ConfigClockSource+0x1c2>
 800853a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800853e:	d87f      	bhi.n	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008540:	2b70      	cmp	r3, #112	@ 0x70
 8008542:	d01a      	beq.n	800857a <HAL_TIM_ConfigClockSource+0xf6>
 8008544:	2b70      	cmp	r3, #112	@ 0x70
 8008546:	d87b      	bhi.n	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008548:	2b60      	cmp	r3, #96	@ 0x60
 800854a:	d050      	beq.n	80085ee <HAL_TIM_ConfigClockSource+0x16a>
 800854c:	2b60      	cmp	r3, #96	@ 0x60
 800854e:	d877      	bhi.n	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008550:	2b50      	cmp	r3, #80	@ 0x50
 8008552:	d03c      	beq.n	80085ce <HAL_TIM_ConfigClockSource+0x14a>
 8008554:	2b50      	cmp	r3, #80	@ 0x50
 8008556:	d873      	bhi.n	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008558:	2b40      	cmp	r3, #64	@ 0x40
 800855a:	d058      	beq.n	800860e <HAL_TIM_ConfigClockSource+0x18a>
 800855c:	2b40      	cmp	r3, #64	@ 0x40
 800855e:	d86f      	bhi.n	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008560:	2b30      	cmp	r3, #48	@ 0x30
 8008562:	d064      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x1aa>
 8008564:	2b30      	cmp	r3, #48	@ 0x30
 8008566:	d86b      	bhi.n	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008568:	2b20      	cmp	r3, #32
 800856a:	d060      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x1aa>
 800856c:	2b20      	cmp	r3, #32
 800856e:	d867      	bhi.n	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d05c      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x1aa>
 8008574:	2b10      	cmp	r3, #16
 8008576:	d05a      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x1aa>
 8008578:	e062      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800858a:	f000 fd87 	bl	800909c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800859c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	609a      	str	r2, [r3, #8]
      break;
 80085a6:	e04f      	b.n	8008648 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085b8:	f000 fd70 	bl	800909c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085ca:	609a      	str	r2, [r3, #8]
      break;
 80085cc:	e03c      	b.n	8008648 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085da:	461a      	mov	r2, r3
 80085dc:	f000 fce0 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2150      	movs	r1, #80	@ 0x50
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fd3a 	bl	8009060 <TIM_ITRx_SetConfig>
      break;
 80085ec:	e02c      	b.n	8008648 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085fa:	461a      	mov	r2, r3
 80085fc:	f000 fcff 	bl	8008ffe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2160      	movs	r1, #96	@ 0x60
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fd2a 	bl	8009060 <TIM_ITRx_SetConfig>
      break;
 800860c:	e01c      	b.n	8008648 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800861a:	461a      	mov	r2, r3
 800861c:	f000 fcc0 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2140      	movs	r1, #64	@ 0x40
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fd1a 	bl	8009060 <TIM_ITRx_SetConfig>
      break;
 800862c:	e00c      	b.n	8008648 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f000 fd11 	bl	8009060 <TIM_ITRx_SetConfig>
      break;
 800863e:	e003      	b.n	8008648 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	73fb      	strb	r3, [r7, #15]
      break;
 8008644:	e000      	b.n	8008648 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008658:	7bfb      	ldrb	r3, [r7, #15]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	ffceff88 	.word	0xffceff88
 8008668:	00100040 	.word	0x00100040
 800866c:	00100030 	.word	0x00100030
 8008670:	00100020 	.word	0x00100020

08008674 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	429a      	cmp	r2, r3
 8008702:	d107      	bne.n	8008714 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008712:	e02a      	b.n	800876a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d107      	bne.n	800872e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2202      	movs	r2, #2
 8008722:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800872c:	e01d      	b.n	800876a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	d107      	bne.n	8008748 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2204      	movs	r2, #4
 800873c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008746:	e010      	b.n	800876a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	429a      	cmp	r2, r3
 8008750:	d107      	bne.n	8008762 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2208      	movs	r2, #8
 8008756:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008760:	e003      	b.n	800876a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff ffb4 	bl	80086d8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	771a      	strb	r2, [r3, #28]
}
 8008776:	bf00      	nop
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	429a      	cmp	r2, r3
 8008794:	d10b      	bne.n	80087ae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d136      	bne.n	8008812 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087ac:	e031      	b.n	8008812 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d10b      	bne.n	80087d0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2202      	movs	r2, #2
 80087bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d125      	bne.n	8008812 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087ce:	e020      	b.n	8008812 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d10b      	bne.n	80087f2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2204      	movs	r2, #4
 80087de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d114      	bne.n	8008812 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087f0:	e00f      	b.n	8008812 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d10a      	bne.n	8008812 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2208      	movs	r2, #8
 8008800:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d103      	bne.n	8008812 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7f7 fff6 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	771a      	strb	r2, [r3, #28]
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008832:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	429a      	cmp	r2, r3
 800883c:	d103      	bne.n	8008846 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	771a      	strb	r2, [r3, #28]
 8008844:	e019      	b.n	800887a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d103      	bne.n	8008858 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2202      	movs	r2, #2
 8008854:	771a      	strb	r2, [r3, #28]
 8008856:	e010      	b.n	800887a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	429a      	cmp	r2, r3
 8008860:	d103      	bne.n	800886a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2204      	movs	r2, #4
 8008866:	771a      	strb	r2, [r3, #28]
 8008868:	e007      	b.n	800887a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	d102      	bne.n	800887a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2208      	movs	r2, #8
 8008878:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7ff ff18 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	771a      	strb	r2, [r3, #28]
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a4a      	ldr	r2, [pc, #296]	@ (80089cc <TIM_Base_SetConfig+0x13c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d013      	beq.n	80088d0 <TIM_Base_SetConfig+0x40>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ae:	d00f      	beq.n	80088d0 <TIM_Base_SetConfig+0x40>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a47      	ldr	r2, [pc, #284]	@ (80089d0 <TIM_Base_SetConfig+0x140>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d00b      	beq.n	80088d0 <TIM_Base_SetConfig+0x40>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a46      	ldr	r2, [pc, #280]	@ (80089d4 <TIM_Base_SetConfig+0x144>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d007      	beq.n	80088d0 <TIM_Base_SetConfig+0x40>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a45      	ldr	r2, [pc, #276]	@ (80089d8 <TIM_Base_SetConfig+0x148>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d003      	beq.n	80088d0 <TIM_Base_SetConfig+0x40>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a44      	ldr	r2, [pc, #272]	@ (80089dc <TIM_Base_SetConfig+0x14c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d108      	bne.n	80088e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a39      	ldr	r2, [pc, #228]	@ (80089cc <TIM_Base_SetConfig+0x13c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d027      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088f0:	d023      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a36      	ldr	r2, [pc, #216]	@ (80089d0 <TIM_Base_SetConfig+0x140>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01f      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a35      	ldr	r2, [pc, #212]	@ (80089d4 <TIM_Base_SetConfig+0x144>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d01b      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a34      	ldr	r2, [pc, #208]	@ (80089d8 <TIM_Base_SetConfig+0x148>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d017      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a33      	ldr	r2, [pc, #204]	@ (80089dc <TIM_Base_SetConfig+0x14c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d013      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a32      	ldr	r2, [pc, #200]	@ (80089e0 <TIM_Base_SetConfig+0x150>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00f      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a31      	ldr	r2, [pc, #196]	@ (80089e4 <TIM_Base_SetConfig+0x154>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d00b      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a30      	ldr	r2, [pc, #192]	@ (80089e8 <TIM_Base_SetConfig+0x158>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d007      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a2f      	ldr	r2, [pc, #188]	@ (80089ec <TIM_Base_SetConfig+0x15c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d003      	beq.n	800893a <TIM_Base_SetConfig+0xaa>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a2e      	ldr	r2, [pc, #184]	@ (80089f0 <TIM_Base_SetConfig+0x160>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d108      	bne.n	800894c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a16      	ldr	r2, [pc, #88]	@ (80089cc <TIM_Base_SetConfig+0x13c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00f      	beq.n	8008998 <TIM_Base_SetConfig+0x108>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a18      	ldr	r2, [pc, #96]	@ (80089dc <TIM_Base_SetConfig+0x14c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00b      	beq.n	8008998 <TIM_Base_SetConfig+0x108>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a17      	ldr	r2, [pc, #92]	@ (80089e0 <TIM_Base_SetConfig+0x150>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d007      	beq.n	8008998 <TIM_Base_SetConfig+0x108>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a16      	ldr	r2, [pc, #88]	@ (80089e4 <TIM_Base_SetConfig+0x154>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d003      	beq.n	8008998 <TIM_Base_SetConfig+0x108>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a15      	ldr	r2, [pc, #84]	@ (80089e8 <TIM_Base_SetConfig+0x158>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d103      	bne.n	80089a0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d105      	bne.n	80089be <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f023 0201 	bic.w	r2, r3, #1
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	611a      	str	r2, [r3, #16]
  }
}
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40000400 	.word	0x40000400
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40000c00 	.word	0x40000c00
 80089dc:	40010400 	.word	0x40010400
 80089e0:	40014000 	.word	0x40014000
 80089e4:	40014400 	.word	0x40014400
 80089e8:	40014800 	.word	0x40014800
 80089ec:	4000e000 	.word	0x4000e000
 80089f0:	4000e400 	.word	0x4000e400

080089f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	f023 0201 	bic.w	r2, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4b37      	ldr	r3, [pc, #220]	@ (8008afc <TIM_OC1_SetConfig+0x108>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0303 	bic.w	r3, r3, #3
 8008a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f023 0302 	bic.w	r3, r3, #2
 8008a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8008b00 <TIM_OC1_SetConfig+0x10c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00f      	beq.n	8008a70 <TIM_OC1_SetConfig+0x7c>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a2c      	ldr	r2, [pc, #176]	@ (8008b04 <TIM_OC1_SetConfig+0x110>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00b      	beq.n	8008a70 <TIM_OC1_SetConfig+0x7c>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8008b08 <TIM_OC1_SetConfig+0x114>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d007      	beq.n	8008a70 <TIM_OC1_SetConfig+0x7c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a2a      	ldr	r2, [pc, #168]	@ (8008b0c <TIM_OC1_SetConfig+0x118>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_OC1_SetConfig+0x7c>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a29      	ldr	r2, [pc, #164]	@ (8008b10 <TIM_OC1_SetConfig+0x11c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10c      	bne.n	8008a8a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f023 0308 	bic.w	r3, r3, #8
 8008a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f023 0304 	bic.w	r3, r3, #4
 8008a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8008b00 <TIM_OC1_SetConfig+0x10c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00f      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xbe>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a1b      	ldr	r2, [pc, #108]	@ (8008b04 <TIM_OC1_SetConfig+0x110>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00b      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xbe>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008b08 <TIM_OC1_SetConfig+0x114>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d007      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xbe>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a19      	ldr	r2, [pc, #100]	@ (8008b0c <TIM_OC1_SetConfig+0x118>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d003      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xbe>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a18      	ldr	r2, [pc, #96]	@ (8008b10 <TIM_OC1_SetConfig+0x11c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d111      	bne.n	8008ad6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	621a      	str	r2, [r3, #32]
}
 8008af0:	bf00      	nop
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	fffeff8f 	.word	0xfffeff8f
 8008b00:	40010000 	.word	0x40010000
 8008b04:	40010400 	.word	0x40010400
 8008b08:	40014000 	.word	0x40014000
 8008b0c:	40014400 	.word	0x40014400
 8008b10:	40014800 	.word	0x40014800

08008b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	f023 0210 	bic.w	r2, r3, #16
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4b34      	ldr	r3, [pc, #208]	@ (8008c10 <TIM_OC2_SetConfig+0xfc>)
 8008b40:	4013      	ands	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f023 0320 	bic.w	r3, r3, #32
 8008b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a29      	ldr	r2, [pc, #164]	@ (8008c14 <TIM_OC2_SetConfig+0x100>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d003      	beq.n	8008b7c <TIM_OC2_SetConfig+0x68>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a28      	ldr	r2, [pc, #160]	@ (8008c18 <TIM_OC2_SetConfig+0x104>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d10d      	bne.n	8008b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8008c14 <TIM_OC2_SetConfig+0x100>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00f      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xac>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8008c18 <TIM_OC2_SetConfig+0x104>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d00b      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xac>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a1c      	ldr	r2, [pc, #112]	@ (8008c1c <TIM_OC2_SetConfig+0x108>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d007      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xac>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8008c20 <TIM_OC2_SetConfig+0x10c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d003      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xac>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a1a      	ldr	r2, [pc, #104]	@ (8008c24 <TIM_OC2_SetConfig+0x110>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d113      	bne.n	8008be8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	feff8fff 	.word	0xfeff8fff
 8008c14:	40010000 	.word	0x40010000
 8008c18:	40010400 	.word	0x40010400
 8008c1c:	40014000 	.word	0x40014000
 8008c20:	40014400 	.word	0x40014400
 8008c24:	40014800 	.word	0x40014800

08008c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4b33      	ldr	r3, [pc, #204]	@ (8008d20 <TIM_OC3_SetConfig+0xf8>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a28      	ldr	r2, [pc, #160]	@ (8008d24 <TIM_OC3_SetConfig+0xfc>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d003      	beq.n	8008c8e <TIM_OC3_SetConfig+0x66>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a27      	ldr	r2, [pc, #156]	@ (8008d28 <TIM_OC3_SetConfig+0x100>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d10d      	bne.n	8008caa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a1d      	ldr	r2, [pc, #116]	@ (8008d24 <TIM_OC3_SetConfig+0xfc>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00f      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xaa>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d28 <TIM_OC3_SetConfig+0x100>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00b      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xaa>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8008d2c <TIM_OC3_SetConfig+0x104>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d007      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xaa>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8008d30 <TIM_OC3_SetConfig+0x108>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d003      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xaa>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a19      	ldr	r2, [pc, #100]	@ (8008d34 <TIM_OC3_SetConfig+0x10c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d113      	bne.n	8008cfa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	621a      	str	r2, [r3, #32]
}
 8008d14:	bf00      	nop
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	fffeff8f 	.word	0xfffeff8f
 8008d24:	40010000 	.word	0x40010000
 8008d28:	40010400 	.word	0x40010400
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40014400 	.word	0x40014400
 8008d34:	40014800 	.word	0x40014800

08008d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4b24      	ldr	r3, [pc, #144]	@ (8008df4 <TIM_OC4_SetConfig+0xbc>)
 8008d64:	4013      	ands	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	031b      	lsls	r3, r3, #12
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a19      	ldr	r2, [pc, #100]	@ (8008df8 <TIM_OC4_SetConfig+0xc0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d00f      	beq.n	8008db8 <TIM_OC4_SetConfig+0x80>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a18      	ldr	r2, [pc, #96]	@ (8008dfc <TIM_OC4_SetConfig+0xc4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00b      	beq.n	8008db8 <TIM_OC4_SetConfig+0x80>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a17      	ldr	r2, [pc, #92]	@ (8008e00 <TIM_OC4_SetConfig+0xc8>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d007      	beq.n	8008db8 <TIM_OC4_SetConfig+0x80>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a16      	ldr	r2, [pc, #88]	@ (8008e04 <TIM_OC4_SetConfig+0xcc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_OC4_SetConfig+0x80>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a15      	ldr	r2, [pc, #84]	@ (8008e08 <TIM_OC4_SetConfig+0xd0>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d109      	bne.n	8008dcc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	019b      	lsls	r3, r3, #6
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	621a      	str	r2, [r3, #32]
}
 8008de6:	bf00      	nop
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	feff8fff 	.word	0xfeff8fff
 8008df8:	40010000 	.word	0x40010000
 8008dfc:	40010400 	.word	0x40010400
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40014400 	.word	0x40014400
 8008e08:	40014800 	.word	0x40014800

08008e0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4b21      	ldr	r3, [pc, #132]	@ (8008ebc <TIM_OC5_SetConfig+0xb0>)
 8008e38:	4013      	ands	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	041b      	lsls	r3, r3, #16
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a18      	ldr	r2, [pc, #96]	@ (8008ec0 <TIM_OC5_SetConfig+0xb4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00f      	beq.n	8008e82 <TIM_OC5_SetConfig+0x76>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a17      	ldr	r2, [pc, #92]	@ (8008ec4 <TIM_OC5_SetConfig+0xb8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00b      	beq.n	8008e82 <TIM_OC5_SetConfig+0x76>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a16      	ldr	r2, [pc, #88]	@ (8008ec8 <TIM_OC5_SetConfig+0xbc>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d007      	beq.n	8008e82 <TIM_OC5_SetConfig+0x76>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a15      	ldr	r2, [pc, #84]	@ (8008ecc <TIM_OC5_SetConfig+0xc0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d003      	beq.n	8008e82 <TIM_OC5_SetConfig+0x76>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a14      	ldr	r2, [pc, #80]	@ (8008ed0 <TIM_OC5_SetConfig+0xc4>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d109      	bne.n	8008e96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	621a      	str	r2, [r3, #32]
}
 8008eb0:	bf00      	nop
 8008eb2:	371c      	adds	r7, #28
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	fffeff8f 	.word	0xfffeff8f
 8008ec0:	40010000 	.word	0x40010000
 8008ec4:	40010400 	.word	0x40010400
 8008ec8:	40014000 	.word	0x40014000
 8008ecc:	40014400 	.word	0x40014400
 8008ed0:	40014800 	.word	0x40014800

08008ed4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4b22      	ldr	r3, [pc, #136]	@ (8008f88 <TIM_OC6_SetConfig+0xb4>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	021b      	lsls	r3, r3, #8
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	051b      	lsls	r3, r3, #20
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a19      	ldr	r2, [pc, #100]	@ (8008f8c <TIM_OC6_SetConfig+0xb8>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00f      	beq.n	8008f4c <TIM_OC6_SetConfig+0x78>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a18      	ldr	r2, [pc, #96]	@ (8008f90 <TIM_OC6_SetConfig+0xbc>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00b      	beq.n	8008f4c <TIM_OC6_SetConfig+0x78>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a17      	ldr	r2, [pc, #92]	@ (8008f94 <TIM_OC6_SetConfig+0xc0>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d007      	beq.n	8008f4c <TIM_OC6_SetConfig+0x78>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a16      	ldr	r2, [pc, #88]	@ (8008f98 <TIM_OC6_SetConfig+0xc4>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d003      	beq.n	8008f4c <TIM_OC6_SetConfig+0x78>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a15      	ldr	r2, [pc, #84]	@ (8008f9c <TIM_OC6_SetConfig+0xc8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d109      	bne.n	8008f60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	029b      	lsls	r3, r3, #10
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	621a      	str	r2, [r3, #32]
}
 8008f7a:	bf00      	nop
 8008f7c:	371c      	adds	r7, #28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	feff8fff 	.word	0xfeff8fff
 8008f8c:	40010000 	.word	0x40010000
 8008f90:	40010400 	.word	0x40010400
 8008f94:	40014000 	.word	0x40014000
 8008f98:	40014400 	.word	0x40014400
 8008f9c:	40014800 	.word	0x40014800

08008fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f023 0201 	bic.w	r2, r3, #1
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f023 030a 	bic.w	r3, r3, #10
 8008fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	621a      	str	r2, [r3, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b087      	sub	sp, #28
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	f023 0210 	bic.w	r2, r3, #16
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	031b      	lsls	r3, r3, #12
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	4313      	orrs	r3, r2
 8009032:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800903a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	4313      	orrs	r3, r2
 8009044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	621a      	str	r2, [r3, #32]
}
 8009052:	bf00      	nop
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
	...

08009060 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4b09      	ldr	r3, [pc, #36]	@ (8009098 <TIM_ITRx_SetConfig+0x38>)
 8009074:	4013      	ands	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4313      	orrs	r3, r2
 800907e:	f043 0307 	orr.w	r3, r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	609a      	str	r2, [r3, #8]
}
 800908a:	bf00      	nop
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	ffcfff8f 	.word	0xffcfff8f

0800909c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	021a      	lsls	r2, r3, #8
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	431a      	orrs	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	609a      	str	r2, [r3, #8]
}
 80090d0:	bf00      	nop
 80090d2:	371c      	adds	r7, #28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f003 031f 	and.w	r3, r3, #31
 80090ee:	2201      	movs	r2, #1
 80090f0:	fa02 f303 	lsl.w	r3, r2, r3
 80090f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a1a      	ldr	r2, [r3, #32]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	43db      	mvns	r3, r3
 80090fe:	401a      	ands	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6a1a      	ldr	r2, [r3, #32]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	f003 031f 	and.w	r3, r3, #31
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	fa01 f303 	lsl.w	r3, r1, r3
 8009114:	431a      	orrs	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
	...

08009128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800913c:	2302      	movs	r3, #2
 800913e:	e077      	b.n	8009230 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a35      	ldr	r2, [pc, #212]	@ (800923c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d004      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a34      	ldr	r2, [pc, #208]	@ (8009240 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d108      	bne.n	8009186 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800917a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800918c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	4313      	orrs	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a25      	ldr	r2, [pc, #148]	@ (800923c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d02c      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091b2:	d027      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a22      	ldr	r2, [pc, #136]	@ (8009244 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d022      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a21      	ldr	r2, [pc, #132]	@ (8009248 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d01d      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1f      	ldr	r2, [pc, #124]	@ (800924c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d018      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009240 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d013      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009250 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00e      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009254 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d009      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a18      	ldr	r2, [pc, #96]	@ (8009258 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a17      	ldr	r2, [pc, #92]	@ (800925c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d10c      	bne.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800920a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	4313      	orrs	r3, r2
 8009214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	40010000 	.word	0x40010000
 8009240:	40010400 	.word	0x40010400
 8009244:	40000400 	.word	0x40000400
 8009248:	40000800 	.word	0x40000800
 800924c:	40000c00 	.word	0x40000c00
 8009250:	40001800 	.word	0x40001800
 8009254:	40014000 	.word	0x40014000
 8009258:	4000e000 	.word	0x4000e000
 800925c:	4000e400 	.word	0x4000e400

08009260 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009278:	2302      	movs	r3, #2
 800927a:	e073      	b.n	8009364 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	4313      	orrs	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	4313      	orrs	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	041b      	lsls	r3, r3, #16
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a19      	ldr	r2, [pc, #100]	@ (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d004      	beq.n	8009318 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a18      	ldr	r2, [pc, #96]	@ (8009374 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d11c      	bne.n	8009352 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009322:	051b      	lsls	r3, r3, #20
 8009324:	4313      	orrs	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	4313      	orrs	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	40010000 	.word	0x40010000
 8009374:	40010400 	.word	0x40010400

08009378 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e042      	b.n	800944c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d106      	bne.n	80093de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7f7 fff7 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2224      	movs	r2, #36	@ 0x24
 80093e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0201 	bic.w	r2, r2, #1
 80093f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 fa6c 	bl	800a8dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fbfd 	bl	8009c04 <UART_SetConfig>
 800940a:	4603      	mov	r3, r0
 800940c:	2b01      	cmp	r3, #1
 800940e:	d101      	bne.n	8009414 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e01b      	b.n	800944c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685a      	ldr	r2, [r3, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0201 	orr.w	r2, r2, #1
 8009442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 faeb 	bl	800aa20 <UART_CheckIdleState>
 800944a:	4603      	mov	r3, r0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b0ba      	sub	sp, #232	@ 0xe8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800947a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800947e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009482:	4013      	ands	r3, r2
 8009484:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800948c:	2b00      	cmp	r3, #0
 800948e:	d11b      	bne.n	80094c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009494:	f003 0320 	and.w	r3, r3, #32
 8009498:	2b00      	cmp	r3, #0
 800949a:	d015      	beq.n	80094c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800949c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094a0:	f003 0320 	and.w	r3, r3, #32
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d105      	bne.n	80094b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d009      	beq.n	80094c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 8377 	beq.w	8009bac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	4798      	blx	r3
      }
      return;
 80094c6:	e371      	b.n	8009bac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 8123 	beq.w	8009718 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80094d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80094d6:	4b8d      	ldr	r3, [pc, #564]	@ (800970c <HAL_UART_IRQHandler+0x2b8>)
 80094d8:	4013      	ands	r3, r2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80094de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80094e2:	4b8b      	ldr	r3, [pc, #556]	@ (8009710 <HAL_UART_IRQHandler+0x2bc>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 8116 	beq.w	8009718 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d011      	beq.n	800951c <HAL_UART_IRQHandler+0xc8>
 80094f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2201      	movs	r2, #1
 800950a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009512:	f043 0201 	orr.w	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800951c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b00      	cmp	r3, #0
 8009526:	d011      	beq.n	800954c <HAL_UART_IRQHandler+0xf8>
 8009528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00b      	beq.n	800954c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2202      	movs	r2, #2
 800953a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009542:	f043 0204 	orr.w	r2, r3, #4
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800954c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009550:	f003 0304 	and.w	r3, r3, #4
 8009554:	2b00      	cmp	r3, #0
 8009556:	d011      	beq.n	800957c <HAL_UART_IRQHandler+0x128>
 8009558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00b      	beq.n	800957c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2204      	movs	r2, #4
 800956a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009572:	f043 0202 	orr.w	r2, r3, #2
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800957c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d017      	beq.n	80095b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d105      	bne.n	80095a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009594:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009598:	4b5c      	ldr	r3, [pc, #368]	@ (800970c <HAL_UART_IRQHandler+0x2b8>)
 800959a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00b      	beq.n	80095b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2208      	movs	r2, #8
 80095a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ae:	f043 0208 	orr.w	r2, r3, #8
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d012      	beq.n	80095ea <HAL_UART_IRQHandler+0x196>
 80095c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00c      	beq.n	80095ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e0:	f043 0220 	orr.w	r2, r3, #32
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 82dd 	beq.w	8009bb0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d013      	beq.n	800962a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b00      	cmp	r3, #0
 800960c:	d105      	bne.n	800961a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800960e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d007      	beq.n	800962a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800961e:	2b00      	cmp	r3, #0
 8009620:	d003      	beq.n	800962a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009630:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800963e:	2b40      	cmp	r3, #64	@ 0x40
 8009640:	d005      	beq.n	800964e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009646:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800964a:	2b00      	cmp	r3, #0
 800964c:	d054      	beq.n	80096f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 fc20 	bl	800ae94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965e:	2b40      	cmp	r3, #64	@ 0x40
 8009660:	d146      	bne.n	80096f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3308      	adds	r3, #8
 8009668:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009678:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800967c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009680:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800968e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009692:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800969a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80096a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1d9      	bne.n	8009662 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d017      	beq.n	80096e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096be:	4a15      	ldr	r2, [pc, #84]	@ (8009714 <HAL_UART_IRQHandler+0x2c0>)
 80096c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7f9 fb4d 	bl	8002d68 <HAL_DMA_Abort_IT>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d019      	beq.n	8009708 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80096e2:	4610      	mov	r0, r2
 80096e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e6:	e00f      	b.n	8009708 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa81 	bl	8009bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ee:	e00b      	b.n	8009708 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fa7d 	bl	8009bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f6:	e007      	b.n	8009708 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fa79 	bl	8009bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009706:	e253      	b.n	8009bb0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009708:	bf00      	nop
    return;
 800970a:	e251      	b.n	8009bb0 <HAL_UART_IRQHandler+0x75c>
 800970c:	10000001 	.word	0x10000001
 8009710:	04000120 	.word	0x04000120
 8009714:	0800af61 	.word	0x0800af61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800971c:	2b01      	cmp	r3, #1
 800971e:	f040 81e7 	bne.w	8009af0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009726:	f003 0310 	and.w	r3, r3, #16
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 81e0 	beq.w	8009af0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009734:	f003 0310 	and.w	r3, r3, #16
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 81d9 	beq.w	8009af0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2210      	movs	r2, #16
 8009744:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009750:	2b40      	cmp	r3, #64	@ 0x40
 8009752:	f040 8151 	bne.w	80099f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a96      	ldr	r2, [pc, #600]	@ (80099b8 <HAL_UART_IRQHandler+0x564>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d068      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a93      	ldr	r2, [pc, #588]	@ (80099bc <HAL_UART_IRQHandler+0x568>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d061      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a91      	ldr	r2, [pc, #580]	@ (80099c0 <HAL_UART_IRQHandler+0x56c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d05a      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a8e      	ldr	r2, [pc, #568]	@ (80099c4 <HAL_UART_IRQHandler+0x570>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d053      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a8c      	ldr	r2, [pc, #560]	@ (80099c8 <HAL_UART_IRQHandler+0x574>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d04c      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a89      	ldr	r2, [pc, #548]	@ (80099cc <HAL_UART_IRQHandler+0x578>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d045      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a87      	ldr	r2, [pc, #540]	@ (80099d0 <HAL_UART_IRQHandler+0x57c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d03e      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a84      	ldr	r2, [pc, #528]	@ (80099d4 <HAL_UART_IRQHandler+0x580>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d037      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a82      	ldr	r2, [pc, #520]	@ (80099d8 <HAL_UART_IRQHandler+0x584>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d030      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a7f      	ldr	r2, [pc, #508]	@ (80099dc <HAL_UART_IRQHandler+0x588>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d029      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a7d      	ldr	r2, [pc, #500]	@ (80099e0 <HAL_UART_IRQHandler+0x58c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d022      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a7a      	ldr	r2, [pc, #488]	@ (80099e4 <HAL_UART_IRQHandler+0x590>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d01b      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a78      	ldr	r2, [pc, #480]	@ (80099e8 <HAL_UART_IRQHandler+0x594>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d014      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a75      	ldr	r2, [pc, #468]	@ (80099ec <HAL_UART_IRQHandler+0x598>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00d      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a73      	ldr	r2, [pc, #460]	@ (80099f0 <HAL_UART_IRQHandler+0x59c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d006      	beq.n	8009836 <HAL_UART_IRQHandler+0x3e2>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a70      	ldr	r2, [pc, #448]	@ (80099f4 <HAL_UART_IRQHandler+0x5a0>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d106      	bne.n	8009844 <HAL_UART_IRQHandler+0x3f0>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	b29b      	uxth	r3, r3
 8009842:	e005      	b.n	8009850 <HAL_UART_IRQHandler+0x3fc>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	b29b      	uxth	r3, r3
 8009850:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 81ab 	beq.w	8009bb4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009864:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009868:	429a      	cmp	r2, r3
 800986a:	f080 81a3 	bcs.w	8009bb4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009874:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009884:	f000 8087 	beq.w	8009996 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009894:	e853 3f00 	ldrex	r3, [r3]
 8009898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800989c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	461a      	mov	r2, r3
 80098ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80098be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80098ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1da      	bne.n	8009888 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3308      	adds	r3, #8
 80098d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098dc:	e853 3f00 	ldrex	r3, [r3]
 80098e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098e4:	f023 0301 	bic.w	r3, r3, #1
 80098e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3308      	adds	r3, #8
 80098f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80098f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80098fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80098fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e1      	bne.n	80098d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3308      	adds	r3, #8
 8009914:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800991e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3308      	adds	r3, #8
 800992e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009932:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009934:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009938:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e3      	bne.n	800990e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2220      	movs	r2, #32
 800994a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009964:	f023 0310 	bic.w	r3, r3, #16
 8009968:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	461a      	mov	r2, r3
 8009972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009976:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009978:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800997c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e4      	bne.n	8009954 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009990:	4618      	mov	r0, r3
 8009992:	f7f8 fecb 	bl	800272c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2202      	movs	r2, #2
 800999a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7f6 fe75 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099b6:	e0fd      	b.n	8009bb4 <HAL_UART_IRQHandler+0x760>
 80099b8:	40020010 	.word	0x40020010
 80099bc:	40020028 	.word	0x40020028
 80099c0:	40020040 	.word	0x40020040
 80099c4:	40020058 	.word	0x40020058
 80099c8:	40020070 	.word	0x40020070
 80099cc:	40020088 	.word	0x40020088
 80099d0:	400200a0 	.word	0x400200a0
 80099d4:	400200b8 	.word	0x400200b8
 80099d8:	40020410 	.word	0x40020410
 80099dc:	40020428 	.word	0x40020428
 80099e0:	40020440 	.word	0x40020440
 80099e4:	40020458 	.word	0x40020458
 80099e8:	40020470 	.word	0x40020470
 80099ec:	40020488 	.word	0x40020488
 80099f0:	400204a0 	.word	0x400204a0
 80099f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 80cf 	beq.w	8009bb8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009a1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 80ca 	beq.w	8009bb8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a48:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e4      	bne.n	8009a24 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3308      	adds	r3, #8
 8009a60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a64:	e853 3f00 	ldrex	r3, [r3]
 8009a68:	623b      	str	r3, [r7, #32]
   return(result);
 8009a6a:	6a3a      	ldr	r2, [r7, #32]
 8009a6c:	4b55      	ldr	r3, [pc, #340]	@ (8009bc4 <HAL_UART_IRQHandler+0x770>)
 8009a6e:	4013      	ands	r3, r2
 8009a70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3308      	adds	r3, #8
 8009a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e3      	bne.n	8009a5a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0310 	bic.w	r3, r3, #16
 8009aba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ac8:	61fb      	str	r3, [r7, #28]
 8009aca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	69b9      	ldr	r1, [r7, #24]
 8009ace:	69fa      	ldr	r2, [r7, #28]
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e4      	bne.n	8009aa6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ae2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7f6 fdd9 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009aee:	e063      	b.n	8009bb8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00e      	beq.n	8009b1a <HAL_UART_IRQHandler+0x6c6>
 8009afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d008      	beq.n	8009b1a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 ff82 	bl	800ba1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b18:	e051      	b.n	8009bbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d014      	beq.n	8009b50 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d105      	bne.n	8009b3e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d008      	beq.n	8009b50 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d03a      	beq.n	8009bbc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	4798      	blx	r3
    }
    return;
 8009b4e:	e035      	b.n	8009bbc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d009      	beq.n	8009b70 <HAL_UART_IRQHandler+0x71c>
 8009b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d003      	beq.n	8009b70 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f001 fa0f 	bl	800af8c <UART_EndTransmit_IT>
    return;
 8009b6e:	e026      	b.n	8009bbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d009      	beq.n	8009b90 <HAL_UART_IRQHandler+0x73c>
 8009b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 ff5b 	bl	800ba44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b8e:	e016      	b.n	8009bbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d010      	beq.n	8009bbe <HAL_UART_IRQHandler+0x76a>
 8009b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	da0c      	bge.n	8009bbe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f001 ff43 	bl	800ba30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009baa:	e008      	b.n	8009bbe <HAL_UART_IRQHandler+0x76a>
      return;
 8009bac:	bf00      	nop
 8009bae:	e006      	b.n	8009bbe <HAL_UART_IRQHandler+0x76a>
    return;
 8009bb0:	bf00      	nop
 8009bb2:	e004      	b.n	8009bbe <HAL_UART_IRQHandler+0x76a>
      return;
 8009bb4:	bf00      	nop
 8009bb6:	e002      	b.n	8009bbe <HAL_UART_IRQHandler+0x76a>
      return;
 8009bb8:	bf00      	nop
 8009bba:	e000      	b.n	8009bbe <HAL_UART_IRQHandler+0x76a>
    return;
 8009bbc:	bf00      	nop
  }
}
 8009bbe:	37e8      	adds	r7, #232	@ 0xe8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	effffffe 	.word	0xeffffffe

08009bc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c08:	b092      	sub	sp, #72	@ 0x48
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	431a      	orrs	r2, r3
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4bbe      	ldr	r3, [pc, #760]	@ (8009f2c <UART_SetConfig+0x328>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	6812      	ldr	r2, [r2, #0]
 8009c3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c3c:	430b      	orrs	r3, r1
 8009c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4ab3      	ldr	r2, [pc, #716]	@ (8009f30 <UART_SetConfig+0x32c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d004      	beq.n	8009c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	4baf      	ldr	r3, [pc, #700]	@ (8009f34 <UART_SetConfig+0x330>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	6812      	ldr	r2, [r2, #0]
 8009c7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8a:	f023 010f 	bic.w	r1, r3, #15
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4aa6      	ldr	r2, [pc, #664]	@ (8009f38 <UART_SetConfig+0x334>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d177      	bne.n	8009d94 <UART_SetConfig+0x190>
 8009ca4:	4ba5      	ldr	r3, [pc, #660]	@ (8009f3c <UART_SetConfig+0x338>)
 8009ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cac:	2b28      	cmp	r3, #40	@ 0x28
 8009cae:	d86d      	bhi.n	8009d8c <UART_SetConfig+0x188>
 8009cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb8 <UART_SetConfig+0xb4>)
 8009cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb6:	bf00      	nop
 8009cb8:	08009d5d 	.word	0x08009d5d
 8009cbc:	08009d8d 	.word	0x08009d8d
 8009cc0:	08009d8d 	.word	0x08009d8d
 8009cc4:	08009d8d 	.word	0x08009d8d
 8009cc8:	08009d8d 	.word	0x08009d8d
 8009ccc:	08009d8d 	.word	0x08009d8d
 8009cd0:	08009d8d 	.word	0x08009d8d
 8009cd4:	08009d8d 	.word	0x08009d8d
 8009cd8:	08009d65 	.word	0x08009d65
 8009cdc:	08009d8d 	.word	0x08009d8d
 8009ce0:	08009d8d 	.word	0x08009d8d
 8009ce4:	08009d8d 	.word	0x08009d8d
 8009ce8:	08009d8d 	.word	0x08009d8d
 8009cec:	08009d8d 	.word	0x08009d8d
 8009cf0:	08009d8d 	.word	0x08009d8d
 8009cf4:	08009d8d 	.word	0x08009d8d
 8009cf8:	08009d6d 	.word	0x08009d6d
 8009cfc:	08009d8d 	.word	0x08009d8d
 8009d00:	08009d8d 	.word	0x08009d8d
 8009d04:	08009d8d 	.word	0x08009d8d
 8009d08:	08009d8d 	.word	0x08009d8d
 8009d0c:	08009d8d 	.word	0x08009d8d
 8009d10:	08009d8d 	.word	0x08009d8d
 8009d14:	08009d8d 	.word	0x08009d8d
 8009d18:	08009d75 	.word	0x08009d75
 8009d1c:	08009d8d 	.word	0x08009d8d
 8009d20:	08009d8d 	.word	0x08009d8d
 8009d24:	08009d8d 	.word	0x08009d8d
 8009d28:	08009d8d 	.word	0x08009d8d
 8009d2c:	08009d8d 	.word	0x08009d8d
 8009d30:	08009d8d 	.word	0x08009d8d
 8009d34:	08009d8d 	.word	0x08009d8d
 8009d38:	08009d7d 	.word	0x08009d7d
 8009d3c:	08009d8d 	.word	0x08009d8d
 8009d40:	08009d8d 	.word	0x08009d8d
 8009d44:	08009d8d 	.word	0x08009d8d
 8009d48:	08009d8d 	.word	0x08009d8d
 8009d4c:	08009d8d 	.word	0x08009d8d
 8009d50:	08009d8d 	.word	0x08009d8d
 8009d54:	08009d8d 	.word	0x08009d8d
 8009d58:	08009d85 	.word	0x08009d85
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e326      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009d64:	2304      	movs	r3, #4
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6a:	e322      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d72:	e31e      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009d74:	2310      	movs	r3, #16
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7a:	e31a      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009d7c:	2320      	movs	r3, #32
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d82:	e316      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009d84:	2340      	movs	r3, #64	@ 0x40
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8a:	e312      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009d8c:	2380      	movs	r3, #128	@ 0x80
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d92:	e30e      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a69      	ldr	r2, [pc, #420]	@ (8009f40 <UART_SetConfig+0x33c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d130      	bne.n	8009e00 <UART_SetConfig+0x1fc>
 8009d9e:	4b67      	ldr	r3, [pc, #412]	@ (8009f3c <UART_SetConfig+0x338>)
 8009da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da2:	f003 0307 	and.w	r3, r3, #7
 8009da6:	2b05      	cmp	r3, #5
 8009da8:	d826      	bhi.n	8009df8 <UART_SetConfig+0x1f4>
 8009daa:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <UART_SetConfig+0x1ac>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009dc9 	.word	0x08009dc9
 8009db4:	08009dd1 	.word	0x08009dd1
 8009db8:	08009dd9 	.word	0x08009dd9
 8009dbc:	08009de1 	.word	0x08009de1
 8009dc0:	08009de9 	.word	0x08009de9
 8009dc4:	08009df1 	.word	0x08009df1
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e2f0      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd6:	e2ec      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009dd8:	2308      	movs	r3, #8
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dde:	e2e8      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009de0:	2310      	movs	r3, #16
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de6:	e2e4      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009de8:	2320      	movs	r3, #32
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dee:	e2e0      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009df0:	2340      	movs	r3, #64	@ 0x40
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df6:	e2dc      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009df8:	2380      	movs	r3, #128	@ 0x80
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfe:	e2d8      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a4f      	ldr	r2, [pc, #316]	@ (8009f44 <UART_SetConfig+0x340>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d130      	bne.n	8009e6c <UART_SetConfig+0x268>
 8009e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8009f3c <UART_SetConfig+0x338>)
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	d826      	bhi.n	8009e64 <UART_SetConfig+0x260>
 8009e16:	a201      	add	r2, pc, #4	@ (adr r2, 8009e1c <UART_SetConfig+0x218>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e35 	.word	0x08009e35
 8009e20:	08009e3d 	.word	0x08009e3d
 8009e24:	08009e45 	.word	0x08009e45
 8009e28:	08009e4d 	.word	0x08009e4d
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	2300      	movs	r3, #0
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3a:	e2ba      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009e3c:	2304      	movs	r3, #4
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e42:	e2b6      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009e44:	2308      	movs	r3, #8
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4a:	e2b2      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e52:	e2ae      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009e54:	2320      	movs	r3, #32
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5a:	e2aa      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009e5c:	2340      	movs	r3, #64	@ 0x40
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e62:	e2a6      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009e64:	2380      	movs	r3, #128	@ 0x80
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e2a2      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a35      	ldr	r2, [pc, #212]	@ (8009f48 <UART_SetConfig+0x344>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d130      	bne.n	8009ed8 <UART_SetConfig+0x2d4>
 8009e76:	4b31      	ldr	r3, [pc, #196]	@ (8009f3c <UART_SetConfig+0x338>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	2b05      	cmp	r3, #5
 8009e80:	d826      	bhi.n	8009ed0 <UART_SetConfig+0x2cc>
 8009e82:	a201      	add	r2, pc, #4	@ (adr r2, 8009e88 <UART_SetConfig+0x284>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ea1 	.word	0x08009ea1
 8009e8c:	08009ea9 	.word	0x08009ea9
 8009e90:	08009eb1 	.word	0x08009eb1
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ec1 	.word	0x08009ec1
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e284      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eae:	e280      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb6:	e27c      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009eb8:	2310      	movs	r3, #16
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ebe:	e278      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec6:	e274      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009ec8:	2340      	movs	r3, #64	@ 0x40
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ece:	e270      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009ed0:	2380      	movs	r3, #128	@ 0x80
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	e26c      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a1b      	ldr	r2, [pc, #108]	@ (8009f4c <UART_SetConfig+0x348>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d142      	bne.n	8009f68 <UART_SetConfig+0x364>
 8009ee2:	4b16      	ldr	r3, [pc, #88]	@ (8009f3c <UART_SetConfig+0x338>)
 8009ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d838      	bhi.n	8009f60 <UART_SetConfig+0x35c>
 8009eee:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef4 <UART_SetConfig+0x2f0>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f0d 	.word	0x08009f0d
 8009ef8:	08009f15 	.word	0x08009f15
 8009efc:	08009f1d 	.word	0x08009f1d
 8009f00:	08009f25 	.word	0x08009f25
 8009f04:	08009f51 	.word	0x08009f51
 8009f08:	08009f59 	.word	0x08009f59
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f12:	e24e      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009f14:	2304      	movs	r3, #4
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1a:	e24a      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009f1c:	2308      	movs	r3, #8
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f22:	e246      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009f24:	2310      	movs	r3, #16
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2a:	e242      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009f2c:	cfff69f3 	.word	0xcfff69f3
 8009f30:	58000c00 	.word	0x58000c00
 8009f34:	11fff4ff 	.word	0x11fff4ff
 8009f38:	40011000 	.word	0x40011000
 8009f3c:	58024400 	.word	0x58024400
 8009f40:	40004400 	.word	0x40004400
 8009f44:	40004800 	.word	0x40004800
 8009f48:	40004c00 	.word	0x40004c00
 8009f4c:	40005000 	.word	0x40005000
 8009f50:	2320      	movs	r3, #32
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f56:	e22c      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009f58:	2340      	movs	r3, #64	@ 0x40
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5e:	e228      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009f60:	2380      	movs	r3, #128	@ 0x80
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f66:	e224      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4ab1      	ldr	r2, [pc, #708]	@ (800a234 <UART_SetConfig+0x630>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d176      	bne.n	800a060 <UART_SetConfig+0x45c>
 8009f72:	4bb1      	ldr	r3, [pc, #708]	@ (800a238 <UART_SetConfig+0x634>)
 8009f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f7a:	2b28      	cmp	r3, #40	@ 0x28
 8009f7c:	d86c      	bhi.n	800a058 <UART_SetConfig+0x454>
 8009f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f84 <UART_SetConfig+0x380>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	0800a029 	.word	0x0800a029
 8009f88:	0800a059 	.word	0x0800a059
 8009f8c:	0800a059 	.word	0x0800a059
 8009f90:	0800a059 	.word	0x0800a059
 8009f94:	0800a059 	.word	0x0800a059
 8009f98:	0800a059 	.word	0x0800a059
 8009f9c:	0800a059 	.word	0x0800a059
 8009fa0:	0800a059 	.word	0x0800a059
 8009fa4:	0800a031 	.word	0x0800a031
 8009fa8:	0800a059 	.word	0x0800a059
 8009fac:	0800a059 	.word	0x0800a059
 8009fb0:	0800a059 	.word	0x0800a059
 8009fb4:	0800a059 	.word	0x0800a059
 8009fb8:	0800a059 	.word	0x0800a059
 8009fbc:	0800a059 	.word	0x0800a059
 8009fc0:	0800a059 	.word	0x0800a059
 8009fc4:	0800a039 	.word	0x0800a039
 8009fc8:	0800a059 	.word	0x0800a059
 8009fcc:	0800a059 	.word	0x0800a059
 8009fd0:	0800a059 	.word	0x0800a059
 8009fd4:	0800a059 	.word	0x0800a059
 8009fd8:	0800a059 	.word	0x0800a059
 8009fdc:	0800a059 	.word	0x0800a059
 8009fe0:	0800a059 	.word	0x0800a059
 8009fe4:	0800a041 	.word	0x0800a041
 8009fe8:	0800a059 	.word	0x0800a059
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a059 	.word	0x0800a059
 8009ff4:	0800a059 	.word	0x0800a059
 8009ff8:	0800a059 	.word	0x0800a059
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a049 	.word	0x0800a049
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	0800a059 	.word	0x0800a059
 800a010:	0800a059 	.word	0x0800a059
 800a014:	0800a059 	.word	0x0800a059
 800a018:	0800a059 	.word	0x0800a059
 800a01c:	0800a059 	.word	0x0800a059
 800a020:	0800a059 	.word	0x0800a059
 800a024:	0800a051 	.word	0x0800a051
 800a028:	2301      	movs	r3, #1
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02e:	e1c0      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a030:	2304      	movs	r3, #4
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a036:	e1bc      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a038:	2308      	movs	r3, #8
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03e:	e1b8      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a040:	2310      	movs	r3, #16
 800a042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a046:	e1b4      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a048:	2320      	movs	r3, #32
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04e:	e1b0      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a050:	2340      	movs	r3, #64	@ 0x40
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a056:	e1ac      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a058:	2380      	movs	r3, #128	@ 0x80
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05e:	e1a8      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a75      	ldr	r2, [pc, #468]	@ (800a23c <UART_SetConfig+0x638>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d130      	bne.n	800a0cc <UART_SetConfig+0x4c8>
 800a06a:	4b73      	ldr	r3, [pc, #460]	@ (800a238 <UART_SetConfig+0x634>)
 800a06c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06e:	f003 0307 	and.w	r3, r3, #7
 800a072:	2b05      	cmp	r3, #5
 800a074:	d826      	bhi.n	800a0c4 <UART_SetConfig+0x4c0>
 800a076:	a201      	add	r2, pc, #4	@ (adr r2, 800a07c <UART_SetConfig+0x478>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a095 	.word	0x0800a095
 800a080:	0800a09d 	.word	0x0800a09d
 800a084:	0800a0a5 	.word	0x0800a0a5
 800a088:	0800a0ad 	.word	0x0800a0ad
 800a08c:	0800a0b5 	.word	0x0800a0b5
 800a090:	0800a0bd 	.word	0x0800a0bd
 800a094:	2300      	movs	r3, #0
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09a:	e18a      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a09c:	2304      	movs	r3, #4
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a2:	e186      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a0a4:	2308      	movs	r3, #8
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0aa:	e182      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a0ac:	2310      	movs	r3, #16
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b2:	e17e      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a0b4:	2320      	movs	r3, #32
 800a0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ba:	e17a      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a0bc:	2340      	movs	r3, #64	@ 0x40
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	e176      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a0c4:	2380      	movs	r3, #128	@ 0x80
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ca:	e172      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a5b      	ldr	r2, [pc, #364]	@ (800a240 <UART_SetConfig+0x63c>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d130      	bne.n	800a138 <UART_SetConfig+0x534>
 800a0d6:	4b58      	ldr	r3, [pc, #352]	@ (800a238 <UART_SetConfig+0x634>)
 800a0d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0da:	f003 0307 	and.w	r3, r3, #7
 800a0de:	2b05      	cmp	r3, #5
 800a0e0:	d826      	bhi.n	800a130 <UART_SetConfig+0x52c>
 800a0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e8 <UART_SetConfig+0x4e4>)
 800a0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e8:	0800a101 	.word	0x0800a101
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a111 	.word	0x0800a111
 800a0f4:	0800a119 	.word	0x0800a119
 800a0f8:	0800a121 	.word	0x0800a121
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	2300      	movs	r3, #0
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a106:	e154      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a108:	2304      	movs	r3, #4
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10e:	e150      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a110:	2308      	movs	r3, #8
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a116:	e14c      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a118:	2310      	movs	r3, #16
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11e:	e148      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a120:	2320      	movs	r3, #32
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a126:	e144      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a128:	2340      	movs	r3, #64	@ 0x40
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e140      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a130:	2380      	movs	r3, #128	@ 0x80
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a136:	e13c      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a41      	ldr	r2, [pc, #260]	@ (800a244 <UART_SetConfig+0x640>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	f040 8082 	bne.w	800a248 <UART_SetConfig+0x644>
 800a144:	4b3c      	ldr	r3, [pc, #240]	@ (800a238 <UART_SetConfig+0x634>)
 800a146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a148:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a14c:	2b28      	cmp	r3, #40	@ 0x28
 800a14e:	d86d      	bhi.n	800a22c <UART_SetConfig+0x628>
 800a150:	a201      	add	r2, pc, #4	@ (adr r2, 800a158 <UART_SetConfig+0x554>)
 800a152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a156:	bf00      	nop
 800a158:	0800a1fd 	.word	0x0800a1fd
 800a15c:	0800a22d 	.word	0x0800a22d
 800a160:	0800a22d 	.word	0x0800a22d
 800a164:	0800a22d 	.word	0x0800a22d
 800a168:	0800a22d 	.word	0x0800a22d
 800a16c:	0800a22d 	.word	0x0800a22d
 800a170:	0800a22d 	.word	0x0800a22d
 800a174:	0800a22d 	.word	0x0800a22d
 800a178:	0800a205 	.word	0x0800a205
 800a17c:	0800a22d 	.word	0x0800a22d
 800a180:	0800a22d 	.word	0x0800a22d
 800a184:	0800a22d 	.word	0x0800a22d
 800a188:	0800a22d 	.word	0x0800a22d
 800a18c:	0800a22d 	.word	0x0800a22d
 800a190:	0800a22d 	.word	0x0800a22d
 800a194:	0800a22d 	.word	0x0800a22d
 800a198:	0800a20d 	.word	0x0800a20d
 800a19c:	0800a22d 	.word	0x0800a22d
 800a1a0:	0800a22d 	.word	0x0800a22d
 800a1a4:	0800a22d 	.word	0x0800a22d
 800a1a8:	0800a22d 	.word	0x0800a22d
 800a1ac:	0800a22d 	.word	0x0800a22d
 800a1b0:	0800a22d 	.word	0x0800a22d
 800a1b4:	0800a22d 	.word	0x0800a22d
 800a1b8:	0800a215 	.word	0x0800a215
 800a1bc:	0800a22d 	.word	0x0800a22d
 800a1c0:	0800a22d 	.word	0x0800a22d
 800a1c4:	0800a22d 	.word	0x0800a22d
 800a1c8:	0800a22d 	.word	0x0800a22d
 800a1cc:	0800a22d 	.word	0x0800a22d
 800a1d0:	0800a22d 	.word	0x0800a22d
 800a1d4:	0800a22d 	.word	0x0800a22d
 800a1d8:	0800a21d 	.word	0x0800a21d
 800a1dc:	0800a22d 	.word	0x0800a22d
 800a1e0:	0800a22d 	.word	0x0800a22d
 800a1e4:	0800a22d 	.word	0x0800a22d
 800a1e8:	0800a22d 	.word	0x0800a22d
 800a1ec:	0800a22d 	.word	0x0800a22d
 800a1f0:	0800a22d 	.word	0x0800a22d
 800a1f4:	0800a22d 	.word	0x0800a22d
 800a1f8:	0800a225 	.word	0x0800a225
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a202:	e0d6      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a204:	2304      	movs	r3, #4
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20a:	e0d2      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a20c:	2308      	movs	r3, #8
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a212:	e0ce      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a214:	2310      	movs	r3, #16
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21a:	e0ca      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a21c:	2320      	movs	r3, #32
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a222:	e0c6      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a224:	2340      	movs	r3, #64	@ 0x40
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22a:	e0c2      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a22c:	2380      	movs	r3, #128	@ 0x80
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a232:	e0be      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a234:	40011400 	.word	0x40011400
 800a238:	58024400 	.word	0x58024400
 800a23c:	40007800 	.word	0x40007800
 800a240:	40007c00 	.word	0x40007c00
 800a244:	40011800 	.word	0x40011800
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4aad      	ldr	r2, [pc, #692]	@ (800a504 <UART_SetConfig+0x900>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d176      	bne.n	800a340 <UART_SetConfig+0x73c>
 800a252:	4bad      	ldr	r3, [pc, #692]	@ (800a508 <UART_SetConfig+0x904>)
 800a254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a25a:	2b28      	cmp	r3, #40	@ 0x28
 800a25c:	d86c      	bhi.n	800a338 <UART_SetConfig+0x734>
 800a25e:	a201      	add	r2, pc, #4	@ (adr r2, 800a264 <UART_SetConfig+0x660>)
 800a260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a264:	0800a309 	.word	0x0800a309
 800a268:	0800a339 	.word	0x0800a339
 800a26c:	0800a339 	.word	0x0800a339
 800a270:	0800a339 	.word	0x0800a339
 800a274:	0800a339 	.word	0x0800a339
 800a278:	0800a339 	.word	0x0800a339
 800a27c:	0800a339 	.word	0x0800a339
 800a280:	0800a339 	.word	0x0800a339
 800a284:	0800a311 	.word	0x0800a311
 800a288:	0800a339 	.word	0x0800a339
 800a28c:	0800a339 	.word	0x0800a339
 800a290:	0800a339 	.word	0x0800a339
 800a294:	0800a339 	.word	0x0800a339
 800a298:	0800a339 	.word	0x0800a339
 800a29c:	0800a339 	.word	0x0800a339
 800a2a0:	0800a339 	.word	0x0800a339
 800a2a4:	0800a319 	.word	0x0800a319
 800a2a8:	0800a339 	.word	0x0800a339
 800a2ac:	0800a339 	.word	0x0800a339
 800a2b0:	0800a339 	.word	0x0800a339
 800a2b4:	0800a339 	.word	0x0800a339
 800a2b8:	0800a339 	.word	0x0800a339
 800a2bc:	0800a339 	.word	0x0800a339
 800a2c0:	0800a339 	.word	0x0800a339
 800a2c4:	0800a321 	.word	0x0800a321
 800a2c8:	0800a339 	.word	0x0800a339
 800a2cc:	0800a339 	.word	0x0800a339
 800a2d0:	0800a339 	.word	0x0800a339
 800a2d4:	0800a339 	.word	0x0800a339
 800a2d8:	0800a339 	.word	0x0800a339
 800a2dc:	0800a339 	.word	0x0800a339
 800a2e0:	0800a339 	.word	0x0800a339
 800a2e4:	0800a329 	.word	0x0800a329
 800a2e8:	0800a339 	.word	0x0800a339
 800a2ec:	0800a339 	.word	0x0800a339
 800a2f0:	0800a339 	.word	0x0800a339
 800a2f4:	0800a339 	.word	0x0800a339
 800a2f8:	0800a339 	.word	0x0800a339
 800a2fc:	0800a339 	.word	0x0800a339
 800a300:	0800a339 	.word	0x0800a339
 800a304:	0800a331 	.word	0x0800a331
 800a308:	2301      	movs	r3, #1
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30e:	e050      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a310:	2304      	movs	r3, #4
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	e04c      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a318:	2308      	movs	r3, #8
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31e:	e048      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a320:	2310      	movs	r3, #16
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a326:	e044      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a328:	2320      	movs	r3, #32
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32e:	e040      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a330:	2340      	movs	r3, #64	@ 0x40
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a336:	e03c      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a338:	2380      	movs	r3, #128	@ 0x80
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33e:	e038      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a71      	ldr	r2, [pc, #452]	@ (800a50c <UART_SetConfig+0x908>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d130      	bne.n	800a3ac <UART_SetConfig+0x7a8>
 800a34a:	4b6f      	ldr	r3, [pc, #444]	@ (800a508 <UART_SetConfig+0x904>)
 800a34c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	2b05      	cmp	r3, #5
 800a354:	d826      	bhi.n	800a3a4 <UART_SetConfig+0x7a0>
 800a356:	a201      	add	r2, pc, #4	@ (adr r2, 800a35c <UART_SetConfig+0x758>)
 800a358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35c:	0800a375 	.word	0x0800a375
 800a360:	0800a37d 	.word	0x0800a37d
 800a364:	0800a385 	.word	0x0800a385
 800a368:	0800a38d 	.word	0x0800a38d
 800a36c:	0800a395 	.word	0x0800a395
 800a370:	0800a39d 	.word	0x0800a39d
 800a374:	2302      	movs	r3, #2
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e01a      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a37c:	2304      	movs	r3, #4
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e016      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a384:	2308      	movs	r3, #8
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38a:	e012      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a38c:	2310      	movs	r3, #16
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a392:	e00e      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a394:	2320      	movs	r3, #32
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39a:	e00a      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a39c:	2340      	movs	r3, #64	@ 0x40
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e006      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a3a4:	2380      	movs	r3, #128	@ 0x80
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e002      	b.n	800a3b2 <UART_SetConfig+0x7ae>
 800a3ac:	2380      	movs	r3, #128	@ 0x80
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a55      	ldr	r2, [pc, #340]	@ (800a50c <UART_SetConfig+0x908>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	f040 80f8 	bne.w	800a5ae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a3be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a3c2:	2b20      	cmp	r3, #32
 800a3c4:	dc46      	bgt.n	800a454 <UART_SetConfig+0x850>
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	db75      	blt.n	800a4b6 <UART_SetConfig+0x8b2>
 800a3ca:	3b02      	subs	r3, #2
 800a3cc:	2b1e      	cmp	r3, #30
 800a3ce:	d872      	bhi.n	800a4b6 <UART_SetConfig+0x8b2>
 800a3d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d8 <UART_SetConfig+0x7d4>)
 800a3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d6:	bf00      	nop
 800a3d8:	0800a45b 	.word	0x0800a45b
 800a3dc:	0800a4b7 	.word	0x0800a4b7
 800a3e0:	0800a463 	.word	0x0800a463
 800a3e4:	0800a4b7 	.word	0x0800a4b7
 800a3e8:	0800a4b7 	.word	0x0800a4b7
 800a3ec:	0800a4b7 	.word	0x0800a4b7
 800a3f0:	0800a473 	.word	0x0800a473
 800a3f4:	0800a4b7 	.word	0x0800a4b7
 800a3f8:	0800a4b7 	.word	0x0800a4b7
 800a3fc:	0800a4b7 	.word	0x0800a4b7
 800a400:	0800a4b7 	.word	0x0800a4b7
 800a404:	0800a4b7 	.word	0x0800a4b7
 800a408:	0800a4b7 	.word	0x0800a4b7
 800a40c:	0800a4b7 	.word	0x0800a4b7
 800a410:	0800a483 	.word	0x0800a483
 800a414:	0800a4b7 	.word	0x0800a4b7
 800a418:	0800a4b7 	.word	0x0800a4b7
 800a41c:	0800a4b7 	.word	0x0800a4b7
 800a420:	0800a4b7 	.word	0x0800a4b7
 800a424:	0800a4b7 	.word	0x0800a4b7
 800a428:	0800a4b7 	.word	0x0800a4b7
 800a42c:	0800a4b7 	.word	0x0800a4b7
 800a430:	0800a4b7 	.word	0x0800a4b7
 800a434:	0800a4b7 	.word	0x0800a4b7
 800a438:	0800a4b7 	.word	0x0800a4b7
 800a43c:	0800a4b7 	.word	0x0800a4b7
 800a440:	0800a4b7 	.word	0x0800a4b7
 800a444:	0800a4b7 	.word	0x0800a4b7
 800a448:	0800a4b7 	.word	0x0800a4b7
 800a44c:	0800a4b7 	.word	0x0800a4b7
 800a450:	0800a4a9 	.word	0x0800a4a9
 800a454:	2b40      	cmp	r3, #64	@ 0x40
 800a456:	d02a      	beq.n	800a4ae <UART_SetConfig+0x8aa>
 800a458:	e02d      	b.n	800a4b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a45a:	f7fc fcdf 	bl	8006e1c <HAL_RCCEx_GetD3PCLK1Freq>
 800a45e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a460:	e02f      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a466:	4618      	mov	r0, r3
 800a468:	f7fc fcee 	bl	8006e48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a470:	e027      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a472:	f107 0318 	add.w	r3, r7, #24
 800a476:	4618      	mov	r0, r3
 800a478:	f7fc fe3a 	bl	80070f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a480:	e01f      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a482:	4b21      	ldr	r3, [pc, #132]	@ (800a508 <UART_SetConfig+0x904>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d009      	beq.n	800a4a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a48e:	4b1e      	ldr	r3, [pc, #120]	@ (800a508 <UART_SetConfig+0x904>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	08db      	lsrs	r3, r3, #3
 800a494:	f003 0303 	and.w	r3, r3, #3
 800a498:	4a1d      	ldr	r2, [pc, #116]	@ (800a510 <UART_SetConfig+0x90c>)
 800a49a:	fa22 f303 	lsr.w	r3, r2, r3
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4a0:	e00f      	b.n	800a4c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a4a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a510 <UART_SetConfig+0x90c>)
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a6:	e00c      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a514 <UART_SetConfig+0x910>)
 800a4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ac:	e009      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b4:	e005      	b.n	800a4c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a4c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 81ee 	beq.w	800a8a6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ce:	4a12      	ldr	r2, [pc, #72]	@ (800a518 <UART_SetConfig+0x914>)
 800a4d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4dc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	005b      	lsls	r3, r3, #1
 800a4e6:	4413      	add	r3, r2
 800a4e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d305      	bcc.n	800a4fa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d910      	bls.n	800a51c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a500:	e1d1      	b.n	800a8a6 <UART_SetConfig+0xca2>
 800a502:	bf00      	nop
 800a504:	40011c00 	.word	0x40011c00
 800a508:	58024400 	.word	0x58024400
 800a50c:	58000c00 	.word	0x58000c00
 800a510:	03d09000 	.word	0x03d09000
 800a514:	003d0900 	.word	0x003d0900
 800a518:	0800da5c 	.word	0x0800da5c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a51e:	2200      	movs	r2, #0
 800a520:	60bb      	str	r3, [r7, #8]
 800a522:	60fa      	str	r2, [r7, #12]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a528:	4ac0      	ldr	r2, [pc, #768]	@ (800a82c <UART_SetConfig+0xc28>)
 800a52a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a52e:	b29b      	uxth	r3, r3
 800a530:	2200      	movs	r2, #0
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	607a      	str	r2, [r7, #4]
 800a536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a53a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a53e:	f7f5 ff37 	bl	80003b0 <__aeabi_uldivmod>
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	4610      	mov	r0, r2
 800a548:	4619      	mov	r1, r3
 800a54a:	f04f 0200 	mov.w	r2, #0
 800a54e:	f04f 0300 	mov.w	r3, #0
 800a552:	020b      	lsls	r3, r1, #8
 800a554:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a558:	0202      	lsls	r2, r0, #8
 800a55a:	6979      	ldr	r1, [r7, #20]
 800a55c:	6849      	ldr	r1, [r1, #4]
 800a55e:	0849      	lsrs	r1, r1, #1
 800a560:	2000      	movs	r0, #0
 800a562:	460c      	mov	r4, r1
 800a564:	4605      	mov	r5, r0
 800a566:	eb12 0804 	adds.w	r8, r2, r4
 800a56a:	eb43 0905 	adc.w	r9, r3, r5
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	469a      	mov	sl, r3
 800a576:	4693      	mov	fp, r2
 800a578:	4652      	mov	r2, sl
 800a57a:	465b      	mov	r3, fp
 800a57c:	4640      	mov	r0, r8
 800a57e:	4649      	mov	r1, r9
 800a580:	f7f5 ff16 	bl	80003b0 <__aeabi_uldivmod>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4613      	mov	r3, r2
 800a58a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a592:	d308      	bcc.n	800a5a6 <UART_SetConfig+0x9a2>
 800a594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a59a:	d204      	bcs.n	800a5a6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5a2:	60da      	str	r2, [r3, #12]
 800a5a4:	e17f      	b.n	800a8a6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a5ac:	e17b      	b.n	800a8a6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5b6:	f040 80bd 	bne.w	800a734 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a5ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a5be:	2b20      	cmp	r3, #32
 800a5c0:	dc48      	bgt.n	800a654 <UART_SetConfig+0xa50>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	db7b      	blt.n	800a6be <UART_SetConfig+0xaba>
 800a5c6:	2b20      	cmp	r3, #32
 800a5c8:	d879      	bhi.n	800a6be <UART_SetConfig+0xaba>
 800a5ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d0 <UART_SetConfig+0x9cc>)
 800a5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d0:	0800a65b 	.word	0x0800a65b
 800a5d4:	0800a663 	.word	0x0800a663
 800a5d8:	0800a6bf 	.word	0x0800a6bf
 800a5dc:	0800a6bf 	.word	0x0800a6bf
 800a5e0:	0800a66b 	.word	0x0800a66b
 800a5e4:	0800a6bf 	.word	0x0800a6bf
 800a5e8:	0800a6bf 	.word	0x0800a6bf
 800a5ec:	0800a6bf 	.word	0x0800a6bf
 800a5f0:	0800a67b 	.word	0x0800a67b
 800a5f4:	0800a6bf 	.word	0x0800a6bf
 800a5f8:	0800a6bf 	.word	0x0800a6bf
 800a5fc:	0800a6bf 	.word	0x0800a6bf
 800a600:	0800a6bf 	.word	0x0800a6bf
 800a604:	0800a6bf 	.word	0x0800a6bf
 800a608:	0800a6bf 	.word	0x0800a6bf
 800a60c:	0800a6bf 	.word	0x0800a6bf
 800a610:	0800a68b 	.word	0x0800a68b
 800a614:	0800a6bf 	.word	0x0800a6bf
 800a618:	0800a6bf 	.word	0x0800a6bf
 800a61c:	0800a6bf 	.word	0x0800a6bf
 800a620:	0800a6bf 	.word	0x0800a6bf
 800a624:	0800a6bf 	.word	0x0800a6bf
 800a628:	0800a6bf 	.word	0x0800a6bf
 800a62c:	0800a6bf 	.word	0x0800a6bf
 800a630:	0800a6bf 	.word	0x0800a6bf
 800a634:	0800a6bf 	.word	0x0800a6bf
 800a638:	0800a6bf 	.word	0x0800a6bf
 800a63c:	0800a6bf 	.word	0x0800a6bf
 800a640:	0800a6bf 	.word	0x0800a6bf
 800a644:	0800a6bf 	.word	0x0800a6bf
 800a648:	0800a6bf 	.word	0x0800a6bf
 800a64c:	0800a6bf 	.word	0x0800a6bf
 800a650:	0800a6b1 	.word	0x0800a6b1
 800a654:	2b40      	cmp	r3, #64	@ 0x40
 800a656:	d02e      	beq.n	800a6b6 <UART_SetConfig+0xab2>
 800a658:	e031      	b.n	800a6be <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a65a:	f7fb fa13 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 800a65e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a660:	e033      	b.n	800a6ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a662:	f7fb fa25 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 800a666:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a668:	e02f      	b.n	800a6ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a66a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fc fbea 	bl	8006e48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a678:	e027      	b.n	800a6ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a67a:	f107 0318 	add.w	r3, r7, #24
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fc fd36 	bl	80070f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a688:	e01f      	b.n	800a6ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a68a:	4b69      	ldr	r3, [pc, #420]	@ (800a830 <UART_SetConfig+0xc2c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 0320 	and.w	r3, r3, #32
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a696:	4b66      	ldr	r3, [pc, #408]	@ (800a830 <UART_SetConfig+0xc2c>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	08db      	lsrs	r3, r3, #3
 800a69c:	f003 0303 	and.w	r3, r3, #3
 800a6a0:	4a64      	ldr	r2, [pc, #400]	@ (800a834 <UART_SetConfig+0xc30>)
 800a6a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6a8:	e00f      	b.n	800a6ca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a6aa:	4b62      	ldr	r3, [pc, #392]	@ (800a834 <UART_SetConfig+0xc30>)
 800a6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ae:	e00c      	b.n	800a6ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6b0:	4b61      	ldr	r3, [pc, #388]	@ (800a838 <UART_SetConfig+0xc34>)
 800a6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b4:	e009      	b.n	800a6ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6bc:	e005      	b.n	800a6ca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a6c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 80ea 	beq.w	800a8a6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d6:	4a55      	ldr	r2, [pc, #340]	@ (800a82c <UART_SetConfig+0xc28>)
 800a6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6e4:	005a      	lsls	r2, r3, #1
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	085b      	lsrs	r3, r3, #1
 800a6ec:	441a      	add	r2, r3
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fa:	2b0f      	cmp	r3, #15
 800a6fc:	d916      	bls.n	800a72c <UART_SetConfig+0xb28>
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a704:	d212      	bcs.n	800a72c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a708:	b29b      	uxth	r3, r3
 800a70a:	f023 030f 	bic.w	r3, r3, #15
 800a70e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a712:	085b      	lsrs	r3, r3, #1
 800a714:	b29b      	uxth	r3, r3
 800a716:	f003 0307 	and.w	r3, r3, #7
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a71e:	4313      	orrs	r3, r2
 800a720:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a728:	60da      	str	r2, [r3, #12]
 800a72a:	e0bc      	b.n	800a8a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a732:	e0b8      	b.n	800a8a6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a734:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a738:	2b20      	cmp	r3, #32
 800a73a:	dc4b      	bgt.n	800a7d4 <UART_SetConfig+0xbd0>
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f2c0 8087 	blt.w	800a850 <UART_SetConfig+0xc4c>
 800a742:	2b20      	cmp	r3, #32
 800a744:	f200 8084 	bhi.w	800a850 <UART_SetConfig+0xc4c>
 800a748:	a201      	add	r2, pc, #4	@ (adr r2, 800a750 <UART_SetConfig+0xb4c>)
 800a74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74e:	bf00      	nop
 800a750:	0800a7db 	.word	0x0800a7db
 800a754:	0800a7e3 	.word	0x0800a7e3
 800a758:	0800a851 	.word	0x0800a851
 800a75c:	0800a851 	.word	0x0800a851
 800a760:	0800a7eb 	.word	0x0800a7eb
 800a764:	0800a851 	.word	0x0800a851
 800a768:	0800a851 	.word	0x0800a851
 800a76c:	0800a851 	.word	0x0800a851
 800a770:	0800a7fb 	.word	0x0800a7fb
 800a774:	0800a851 	.word	0x0800a851
 800a778:	0800a851 	.word	0x0800a851
 800a77c:	0800a851 	.word	0x0800a851
 800a780:	0800a851 	.word	0x0800a851
 800a784:	0800a851 	.word	0x0800a851
 800a788:	0800a851 	.word	0x0800a851
 800a78c:	0800a851 	.word	0x0800a851
 800a790:	0800a80b 	.word	0x0800a80b
 800a794:	0800a851 	.word	0x0800a851
 800a798:	0800a851 	.word	0x0800a851
 800a79c:	0800a851 	.word	0x0800a851
 800a7a0:	0800a851 	.word	0x0800a851
 800a7a4:	0800a851 	.word	0x0800a851
 800a7a8:	0800a851 	.word	0x0800a851
 800a7ac:	0800a851 	.word	0x0800a851
 800a7b0:	0800a851 	.word	0x0800a851
 800a7b4:	0800a851 	.word	0x0800a851
 800a7b8:	0800a851 	.word	0x0800a851
 800a7bc:	0800a851 	.word	0x0800a851
 800a7c0:	0800a851 	.word	0x0800a851
 800a7c4:	0800a851 	.word	0x0800a851
 800a7c8:	0800a851 	.word	0x0800a851
 800a7cc:	0800a851 	.word	0x0800a851
 800a7d0:	0800a843 	.word	0x0800a843
 800a7d4:	2b40      	cmp	r3, #64	@ 0x40
 800a7d6:	d037      	beq.n	800a848 <UART_SetConfig+0xc44>
 800a7d8:	e03a      	b.n	800a850 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7da:	f7fb f953 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 800a7de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7e0:	e03c      	b.n	800a85c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7e2:	f7fb f965 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 800a7e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7e8:	e038      	b.n	800a85c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fc fb2a 	bl	8006e48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f8:	e030      	b.n	800a85c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7fa:	f107 0318 	add.w	r3, r7, #24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fc fc76 	bl	80070f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a808:	e028      	b.n	800a85c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a80a:	4b09      	ldr	r3, [pc, #36]	@ (800a830 <UART_SetConfig+0xc2c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 0320 	and.w	r3, r3, #32
 800a812:	2b00      	cmp	r3, #0
 800a814:	d012      	beq.n	800a83c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a816:	4b06      	ldr	r3, [pc, #24]	@ (800a830 <UART_SetConfig+0xc2c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	08db      	lsrs	r3, r3, #3
 800a81c:	f003 0303 	and.w	r3, r3, #3
 800a820:	4a04      	ldr	r2, [pc, #16]	@ (800a834 <UART_SetConfig+0xc30>)
 800a822:	fa22 f303 	lsr.w	r3, r2, r3
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a828:	e018      	b.n	800a85c <UART_SetConfig+0xc58>
 800a82a:	bf00      	nop
 800a82c:	0800da5c 	.word	0x0800da5c
 800a830:	58024400 	.word	0x58024400
 800a834:	03d09000 	.word	0x03d09000
 800a838:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a83c:	4b24      	ldr	r3, [pc, #144]	@ (800a8d0 <UART_SetConfig+0xccc>)
 800a83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a840:	e00c      	b.n	800a85c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a842:	4b24      	ldr	r3, [pc, #144]	@ (800a8d4 <UART_SetConfig+0xcd0>)
 800a844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a846:	e009      	b.n	800a85c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84e:	e005      	b.n	800a85c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a85a:	bf00      	nop
    }

    if (pclk != 0U)
 800a85c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d021      	beq.n	800a8a6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a866:	4a1c      	ldr	r2, [pc, #112]	@ (800a8d8 <UART_SetConfig+0xcd4>)
 800a868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a86c:	461a      	mov	r2, r3
 800a86e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a870:	fbb3 f2f2 	udiv	r2, r3, r2
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	085b      	lsrs	r3, r3, #1
 800a87a:	441a      	add	r2, r3
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	fbb2 f3f3 	udiv	r3, r2, r3
 800a884:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a888:	2b0f      	cmp	r3, #15
 800a88a:	d909      	bls.n	800a8a0 <UART_SetConfig+0xc9c>
 800a88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a892:	d205      	bcs.n	800a8a0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a896:	b29a      	uxth	r2, r3
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60da      	str	r2, [r3, #12]
 800a89e:	e002      	b.n	800a8a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a8c2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3748      	adds	r7, #72	@ 0x48
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8d0:	03d09000 	.word	0x03d09000
 800a8d4:	003d0900 	.word	0x003d0900
 800a8d8:	0800da5c 	.word	0x0800da5c

0800a8dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e8:	f003 0308 	and.w	r3, r3, #8
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00a      	beq.n	800a906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	430a      	orrs	r2, r1
 800a904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00a      	beq.n	800a928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92c:	f003 0302 	and.w	r3, r3, #2
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00a      	beq.n	800a94a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	430a      	orrs	r2, r1
 800a948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94e:	f003 0304 	and.w	r3, r3, #4
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00a      	beq.n	800a96c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	430a      	orrs	r2, r1
 800a96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a970:	f003 0310 	and.w	r3, r3, #16
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00a      	beq.n	800a98e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a992:	f003 0320 	and.w	r3, r3, #32
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d01a      	beq.n	800a9f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9da:	d10a      	bne.n	800a9f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	605a      	str	r2, [r3, #4]
  }
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b098      	sub	sp, #96	@ 0x60
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa30:	f7f6 ff7a 	bl	8001928 <HAL_GetTick>
 800aa34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0308 	and.w	r3, r3, #8
 800aa40:	2b08      	cmp	r3, #8
 800aa42:	d12f      	bne.n	800aaa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f88e 	bl	800ab74 <UART_WaitOnFlagUntilTimeout>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d022      	beq.n	800aaa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa72:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e6      	bne.n	800aa5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2220      	movs	r2, #32
 800aa94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e063      	b.n	800ab6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b04      	cmp	r3, #4
 800aab0:	d149      	bne.n	800ab46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aab2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaba:	2200      	movs	r2, #0
 800aabc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f857 	bl	800ab74 <UART_WaitOnFlagUntilTimeout>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d03c      	beq.n	800ab46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	623b      	str	r3, [r7, #32]
   return(result);
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaea:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aaf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaf2:	e841 2300 	strex	r3, r2, [r1]
 800aaf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aaf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1e6      	bne.n	800aacc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3308      	adds	r3, #8
 800ab04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	e853 3f00 	ldrex	r3, [r3]
 800ab0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f023 0301 	bic.w	r3, r3, #1
 800ab14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab1e:	61fa      	str	r2, [r7, #28]
 800ab20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	69b9      	ldr	r1, [r7, #24]
 800ab24:	69fa      	ldr	r2, [r7, #28]
 800ab26:	e841 2300 	strex	r3, r2, [r1]
 800ab2a:	617b      	str	r3, [r7, #20]
   return(result);
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1e5      	bne.n	800aafe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e012      	b.n	800ab6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2220      	movs	r2, #32
 800ab4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2220      	movs	r2, #32
 800ab52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3758      	adds	r7, #88	@ 0x58
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	603b      	str	r3, [r7, #0]
 800ab80:	4613      	mov	r3, r2
 800ab82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab84:	e04f      	b.n	800ac26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8c:	d04b      	beq.n	800ac26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab8e:	f7f6 fecb 	bl	8001928 <HAL_GetTick>
 800ab92:	4602      	mov	r2, r0
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	69ba      	ldr	r2, [r7, #24]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d302      	bcc.n	800aba4 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e04e      	b.n	800ac46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 0304 	and.w	r3, r3, #4
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d037      	beq.n	800ac26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	2b80      	cmp	r3, #128	@ 0x80
 800abba:	d034      	beq.n	800ac26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b40      	cmp	r3, #64	@ 0x40
 800abc0:	d031      	beq.n	800ac26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	f003 0308 	and.w	r3, r3, #8
 800abcc:	2b08      	cmp	r3, #8
 800abce:	d110      	bne.n	800abf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2208      	movs	r2, #8
 800abd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f000 f95b 	bl	800ae94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2208      	movs	r2, #8
 800abe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e029      	b.n	800ac46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac00:	d111      	bne.n	800ac26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 f941 	bl	800ae94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e00f      	b.n	800ac46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	69da      	ldr	r2, [r3, #28]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	4013      	ands	r3, r2
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	bf0c      	ite	eq
 800ac36:	2301      	moveq	r3, #1
 800ac38:	2300      	movne	r3, #0
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d0a0      	beq.n	800ab86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b0a3      	sub	sp, #140	@ 0x8c
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	88fa      	ldrh	r2, [r7, #6]
 800ac68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	88fa      	ldrh	r2, [r7, #6]
 800ac70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2200      	movs	r2, #0
 800ac78:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac82:	d10e      	bne.n	800aca2 <UART_Start_Receive_IT+0x52>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d105      	bne.n	800ac98 <UART_Start_Receive_IT+0x48>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ac92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ac96:	e02d      	b.n	800acf4 <UART_Start_Receive_IT+0xa4>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	22ff      	movs	r2, #255	@ 0xff
 800ac9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aca0:	e028      	b.n	800acf4 <UART_Start_Receive_IT+0xa4>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10d      	bne.n	800acc6 <UART_Start_Receive_IT+0x76>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d104      	bne.n	800acbc <UART_Start_Receive_IT+0x6c>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	22ff      	movs	r2, #255	@ 0xff
 800acb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800acba:	e01b      	b.n	800acf4 <UART_Start_Receive_IT+0xa4>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	227f      	movs	r2, #127	@ 0x7f
 800acc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800acc4:	e016      	b.n	800acf4 <UART_Start_Receive_IT+0xa4>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acce:	d10d      	bne.n	800acec <UART_Start_Receive_IT+0x9c>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d104      	bne.n	800ace2 <UART_Start_Receive_IT+0x92>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	227f      	movs	r2, #127	@ 0x7f
 800acdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ace0:	e008      	b.n	800acf4 <UART_Start_Receive_IT+0xa4>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	223f      	movs	r2, #63	@ 0x3f
 800ace6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800acea:	e003      	b.n	800acf4 <UART_Start_Receive_IT+0xa4>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2222      	movs	r2, #34	@ 0x22
 800ad00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3308      	adds	r3, #8
 800ad0a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad0e:	e853 3f00 	ldrex	r3, [r3]
 800ad12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ad14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad16:	f043 0301 	orr.w	r3, r3, #1
 800ad1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3308      	adds	r3, #8
 800ad24:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad28:	673a      	str	r2, [r7, #112]	@ 0x70
 800ad2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ad2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ad30:	e841 2300 	strex	r3, r2, [r1]
 800ad34:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ad36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e3      	bne.n	800ad04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad44:	d14f      	bne.n	800ade6 <UART_Start_Receive_IT+0x196>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad4c:	88fa      	ldrh	r2, [r7, #6]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d349      	bcc.n	800ade6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad5a:	d107      	bne.n	800ad6c <UART_Start_Receive_IT+0x11c>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d103      	bne.n	800ad6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	4a47      	ldr	r2, [pc, #284]	@ (800ae84 <UART_Start_Receive_IT+0x234>)
 800ad68:	675a      	str	r2, [r3, #116]	@ 0x74
 800ad6a:	e002      	b.n	800ad72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4a46      	ldr	r2, [pc, #280]	@ (800ae88 <UART_Start_Receive_IT+0x238>)
 800ad70:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d01a      	beq.n	800adb0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad82:	e853 3f00 	ldrex	r3, [r3]
 800ad86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ad88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ad9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad9e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ada2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ada4:	e841 2300 	strex	r3, r2, [r1]
 800ada8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800adaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e4      	bne.n	800ad7a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3308      	adds	r3, #8
 800adb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3308      	adds	r3, #8
 800adce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800add0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800add2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800add6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800add8:	e841 2300 	strex	r3, r2, [r1]
 800addc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800adde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e5      	bne.n	800adb0 <UART_Start_Receive_IT+0x160>
 800ade4:	e046      	b.n	800ae74 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adee:	d107      	bne.n	800ae00 <UART_Start_Receive_IT+0x1b0>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d103      	bne.n	800ae00 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	4a24      	ldr	r2, [pc, #144]	@ (800ae8c <UART_Start_Receive_IT+0x23c>)
 800adfc:	675a      	str	r2, [r3, #116]	@ 0x74
 800adfe:	e002      	b.n	800ae06 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4a23      	ldr	r2, [pc, #140]	@ (800ae90 <UART_Start_Receive_IT+0x240>)
 800ae04:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d019      	beq.n	800ae42 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae16:	e853 3f00 	ldrex	r3, [r3]
 800ae1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ae22:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae2e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae34:	e841 2300 	strex	r3, r2, [r1]
 800ae38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ae3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e6      	bne.n	800ae0e <UART_Start_Receive_IT+0x1be>
 800ae40:	e018      	b.n	800ae74 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	e853 3f00 	ldrex	r3, [r3]
 800ae4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	f043 0320 	orr.w	r3, r3, #32
 800ae56:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae60:	623b      	str	r3, [r7, #32]
 800ae62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae64:	69f9      	ldr	r1, [r7, #28]
 800ae66:	6a3a      	ldr	r2, [r7, #32]
 800ae68:	e841 2300 	strex	r3, r2, [r1]
 800ae6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1e6      	bne.n	800ae42 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	378c      	adds	r7, #140	@ 0x8c
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	0800b6b5 	.word	0x0800b6b5
 800ae88:	0800b355 	.word	0x0800b355
 800ae8c:	0800b19d 	.word	0x0800b19d
 800ae90:	0800afe5 	.word	0x0800afe5

0800ae94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b095      	sub	sp, #84	@ 0x54
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aeb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeba:	643b      	str	r3, [r7, #64]	@ 0x40
 800aebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aec2:	e841 2300 	strex	r3, r2, [r1]
 800aec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e6      	bne.n	800ae9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3308      	adds	r3, #8
 800aed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	e853 3f00 	ldrex	r3, [r3]
 800aedc:	61fb      	str	r3, [r7, #28]
   return(result);
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	4b1e      	ldr	r3, [pc, #120]	@ (800af5c <UART_EndRxTransfer+0xc8>)
 800aee2:	4013      	ands	r3, r2
 800aee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3308      	adds	r3, #8
 800aeec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aeee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aef0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aef6:	e841 2300 	strex	r3, r2, [r1]
 800aefa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1e5      	bne.n	800aece <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af06:	2b01      	cmp	r3, #1
 800af08:	d118      	bne.n	800af3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	e853 3f00 	ldrex	r3, [r3]
 800af16:	60bb      	str	r3, [r7, #8]
   return(result);
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	f023 0310 	bic.w	r3, r3, #16
 800af1e:	647b      	str	r3, [r7, #68]	@ 0x44
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	461a      	mov	r2, r3
 800af26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af28:	61bb      	str	r3, [r7, #24]
 800af2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2c:	6979      	ldr	r1, [r7, #20]
 800af2e:	69ba      	ldr	r2, [r7, #24]
 800af30:	e841 2300 	strex	r3, r2, [r1]
 800af34:	613b      	str	r3, [r7, #16]
   return(result);
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e6      	bne.n	800af0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2220      	movs	r2, #32
 800af40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af50:	bf00      	nop
 800af52:	3754      	adds	r7, #84	@ 0x54
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	effffffe 	.word	0xeffffffe

0800af60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7fe fe36 	bl	8009bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af84:	bf00      	nop
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	e853 3f00 	ldrex	r3, [r3]
 800afa0:	60bb      	str	r3, [r7, #8]
   return(result);
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afa8:	61fb      	str	r3, [r7, #28]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	61bb      	str	r3, [r7, #24]
 800afb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb6:	6979      	ldr	r1, [r7, #20]
 800afb8:	69ba      	ldr	r2, [r7, #24]
 800afba:	e841 2300 	strex	r3, r2, [r1]
 800afbe:	613b      	str	r3, [r7, #16]
   return(result);
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1e6      	bne.n	800af94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2220      	movs	r2, #32
 800afca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7fe fdf7 	bl	8009bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afda:	bf00      	nop
 800afdc:	3720      	adds	r7, #32
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b09c      	sub	sp, #112	@ 0x70
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aff2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800affc:	2b22      	cmp	r3, #34	@ 0x22
 800affe:	f040 80be 	bne.w	800b17e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b008:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b00c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b010:	b2d9      	uxtb	r1, r3
 800b012:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b016:	b2da      	uxtb	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b01c:	400a      	ands	r2, r1
 800b01e:	b2d2      	uxtb	r2, r2
 800b020:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b032:	b29b      	uxth	r3, r3
 800b034:	3b01      	subs	r3, #1
 800b036:	b29a      	uxth	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b044:	b29b      	uxth	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	f040 80a1 	bne.w	800b18e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b05a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b05c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b060:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b06a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b06c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b070:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b072:	e841 2300 	strex	r3, r2, [r1]
 800b076:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1e6      	bne.n	800b04c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3308      	adds	r3, #8
 800b084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b090:	f023 0301 	bic.w	r3, r3, #1
 800b094:	667b      	str	r3, [r7, #100]	@ 0x64
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3308      	adds	r3, #8
 800b09c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b09e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b0a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0a6:	e841 2300 	strex	r3, r2, [r1]
 800b0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e5      	bne.n	800b07e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a33      	ldr	r2, [pc, #204]	@ (800b198 <UART_RxISR_8BIT+0x1b4>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d01f      	beq.n	800b110 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d018      	beq.n	800b110 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ec:	6a3b      	ldr	r3, [r7, #32]
 800b0ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0f2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b100:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b104:	e841 2300 	strex	r3, r2, [r1]
 800b108:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1e6      	bne.n	800b0de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b114:	2b01      	cmp	r3, #1
 800b116:	d12e      	bne.n	800b176 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 0310 	bic.w	r3, r3, #16
 800b132:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	461a      	mov	r2, r3
 800b13a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b13c:	61fb      	str	r3, [r7, #28]
 800b13e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	69b9      	ldr	r1, [r7, #24]
 800b142:	69fa      	ldr	r2, [r7, #28]
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	617b      	str	r3, [r7, #20]
   return(result);
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e6      	bne.n	800b11e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	69db      	ldr	r3, [r3, #28]
 800b156:	f003 0310 	and.w	r3, r3, #16
 800b15a:	2b10      	cmp	r3, #16
 800b15c:	d103      	bne.n	800b166 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2210      	movs	r2, #16
 800b164:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b16c:	4619      	mov	r1, r3
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7f5 fa96 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b174:	e00b      	b.n	800b18e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7fe fd30 	bl	8009bdc <HAL_UART_RxCpltCallback>
}
 800b17c:	e007      	b.n	800b18e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	699a      	ldr	r2, [r3, #24]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f042 0208 	orr.w	r2, r2, #8
 800b18c:	619a      	str	r2, [r3, #24]
}
 800b18e:	bf00      	nop
 800b190:	3770      	adds	r7, #112	@ 0x70
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	58000c00 	.word	0x58000c00

0800b19c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b09c      	sub	sp, #112	@ 0x70
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b1aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1b4:	2b22      	cmp	r3, #34	@ 0x22
 800b1b6:	f040 80be 	bne.w	800b336 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b1ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b1ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1de:	1c9a      	adds	r2, r3, #2
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f040 80a1 	bne.w	800b346 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b20c:	e853 3f00 	ldrex	r3, [r3]
 800b210:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b218:	667b      	str	r3, [r7, #100]	@ 0x64
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b222:	657b      	str	r3, [r7, #84]	@ 0x54
 800b224:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b228:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b22a:	e841 2300 	strex	r3, r2, [r1]
 800b22e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e6      	bne.n	800b204 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3308      	adds	r3, #8
 800b23c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	f023 0301 	bic.w	r3, r3, #1
 800b24c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3308      	adds	r3, #8
 800b254:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b256:	643a      	str	r2, [r7, #64]	@ 0x40
 800b258:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b25c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b25e:	e841 2300 	strex	r3, r2, [r1]
 800b262:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e5      	bne.n	800b236 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2220      	movs	r2, #32
 800b26e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a33      	ldr	r2, [pc, #204]	@ (800b350 <UART_RxISR_16BIT+0x1b4>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d01f      	beq.n	800b2c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d018      	beq.n	800b2c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	e853 3f00 	ldrex	r3, [r3]
 800b2a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b2aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2bc:	e841 2300 	strex	r3, r2, [r1]
 800b2c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1e6      	bne.n	800b296 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d12e      	bne.n	800b32e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	e853 3f00 	ldrex	r3, [r3]
 800b2e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f023 0310 	bic.w	r3, r3, #16
 800b2ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2f4:	61bb      	str	r3, [r7, #24]
 800b2f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	6979      	ldr	r1, [r7, #20]
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	613b      	str	r3, [r7, #16]
   return(result);
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e6      	bne.n	800b2d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	f003 0310 	and.w	r3, r3, #16
 800b312:	2b10      	cmp	r3, #16
 800b314:	d103      	bne.n	800b31e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2210      	movs	r2, #16
 800b31c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7f5 f9ba 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b32c:	e00b      	b.n	800b346 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7fe fc54 	bl	8009bdc <HAL_UART_RxCpltCallback>
}
 800b334:	e007      	b.n	800b346 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	699a      	ldr	r2, [r3, #24]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f042 0208 	orr.w	r2, r2, #8
 800b344:	619a      	str	r2, [r3, #24]
}
 800b346:	bf00      	nop
 800b348:	3770      	adds	r7, #112	@ 0x70
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	58000c00 	.word	0x58000c00

0800b354 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b0ac      	sub	sp, #176	@ 0xb0
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b362:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b38a:	2b22      	cmp	r3, #34	@ 0x22
 800b38c:	f040 8180 	bne.w	800b690 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b396:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b39a:	e123      	b.n	800b5e4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b3a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b3aa:	b2d9      	uxtb	r1, r3
 800b3ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3b6:	400a      	ands	r2, r1
 800b3b8:	b2d2      	uxtb	r2, r2
 800b3ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	69db      	ldr	r3, [r3, #28]
 800b3de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b3e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d053      	beq.n	800b496 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d011      	beq.n	800b41e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b3fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b3fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00b      	beq.n	800b41e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2201      	movs	r2, #1
 800b40c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b414:	f043 0201 	orr.w	r2, r3, #1
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b41e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b422:	f003 0302 	and.w	r3, r3, #2
 800b426:	2b00      	cmp	r3, #0
 800b428:	d011      	beq.n	800b44e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b42a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00b      	beq.n	800b44e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2202      	movs	r2, #2
 800b43c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b444:	f043 0204 	orr.w	r2, r3, #4
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b44e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b452:	f003 0304 	and.w	r3, r3, #4
 800b456:	2b00      	cmp	r3, #0
 800b458:	d011      	beq.n	800b47e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b45a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00b      	beq.n	800b47e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2204      	movs	r2, #4
 800b46c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b474:	f043 0202 	orr.w	r2, r3, #2
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b484:	2b00      	cmp	r3, #0
 800b486:	d006      	beq.n	800b496 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7fe fbb1 	bl	8009bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f040 80a0 	bne.w	800b5e4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b4b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b4c8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b4cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b4d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e4      	bne.n	800b4a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b4ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b4ec:	4b6e      	ldr	r3, [pc, #440]	@ (800b6a8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b4fe:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b500:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b504:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b50c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e3      	bne.n	800b4da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2220      	movs	r2, #32
 800b516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a60      	ldr	r2, [pc, #384]	@ (800b6ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d021      	beq.n	800b574 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d01a      	beq.n	800b574 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b546:	e853 3f00 	ldrex	r3, [r3]
 800b54a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b54c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b54e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	461a      	mov	r2, r3
 800b55c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b560:	657b      	str	r3, [r7, #84]	@ 0x54
 800b562:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b564:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b566:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b568:	e841 2300 	strex	r3, r2, [r1]
 800b56c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b56e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1e4      	bne.n	800b53e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d130      	bne.n	800b5de <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b58a:	e853 3f00 	ldrex	r3, [r3]
 800b58e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b592:	f023 0310 	bic.w	r3, r3, #16
 800b596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b5a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b5aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5ac:	e841 2300 	strex	r3, r2, [r1]
 800b5b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e4      	bne.n	800b582 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	69db      	ldr	r3, [r3, #28]
 800b5be:	f003 0310 	and.w	r3, r3, #16
 800b5c2:	2b10      	cmp	r3, #16
 800b5c4:	d103      	bne.n	800b5ce <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2210      	movs	r2, #16
 800b5cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7f5 f862 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
 800b5dc:	e002      	b.n	800b5e4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7fe fafc 	bl	8009bdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d006      	beq.n	800b5fa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b5ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5f0:	f003 0320 	and.w	r3, r3, #32
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f47f aed1 	bne.w	800b39c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b600:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b604:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d049      	beq.n	800b6a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b612:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b616:	429a      	cmp	r2, r3
 800b618:	d242      	bcs.n	800b6a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3308      	adds	r3, #8
 800b620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	e853 3f00 	ldrex	r3, [r3]
 800b628:	61fb      	str	r3, [r7, #28]
   return(result);
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3308      	adds	r3, #8
 800b63a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b63e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b640:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b646:	e841 2300 	strex	r3, r2, [r1]
 800b64a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1e3      	bne.n	800b61a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a16      	ldr	r2, [pc, #88]	@ (800b6b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b656:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	e853 3f00 	ldrex	r3, [r3]
 800b664:	60bb      	str	r3, [r7, #8]
   return(result);
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f043 0320 	orr.w	r3, r3, #32
 800b66c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	461a      	mov	r2, r3
 800b676:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b67a:	61bb      	str	r3, [r7, #24]
 800b67c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67e:	6979      	ldr	r1, [r7, #20]
 800b680:	69ba      	ldr	r2, [r7, #24]
 800b682:	e841 2300 	strex	r3, r2, [r1]
 800b686:	613b      	str	r3, [r7, #16]
   return(result);
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1e4      	bne.n	800b658 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b68e:	e007      	b.n	800b6a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	699a      	ldr	r2, [r3, #24]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0208 	orr.w	r2, r2, #8
 800b69e:	619a      	str	r2, [r3, #24]
}
 800b6a0:	bf00      	nop
 800b6a2:	37b0      	adds	r7, #176	@ 0xb0
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	effffffe 	.word	0xeffffffe
 800b6ac:	58000c00 	.word	0x58000c00
 800b6b0:	0800afe5 	.word	0x0800afe5

0800b6b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b0ae      	sub	sp, #184	@ 0xb8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b6c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	69db      	ldr	r3, [r3, #28]
 800b6cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6ea:	2b22      	cmp	r3, #34	@ 0x22
 800b6ec:	f040 8184 	bne.w	800b9f8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b6f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b6fa:	e127      	b.n	800b94c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b702:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b70a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b70e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b712:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b716:	4013      	ands	r3, r2
 800b718:	b29a      	uxth	r2, r3
 800b71a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b71e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b724:	1c9a      	adds	r2, r3, #2
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b730:	b29b      	uxth	r3, r3
 800b732:	3b01      	subs	r3, #1
 800b734:	b29a      	uxth	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	69db      	ldr	r3, [r3, #28]
 800b742:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b74a:	f003 0307 	and.w	r3, r3, #7
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d053      	beq.n	800b7fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d011      	beq.n	800b782 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b75e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00b      	beq.n	800b782 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2201      	movs	r2, #1
 800b770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b778:	f043 0201 	orr.w	r2, r3, #1
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b786:	f003 0302 	and.w	r3, r3, #2
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d011      	beq.n	800b7b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b78e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00b      	beq.n	800b7b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2202      	movs	r2, #2
 800b7a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7a8:	f043 0204 	orr.w	r2, r3, #4
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7b6:	f003 0304 	and.w	r3, r3, #4
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d011      	beq.n	800b7e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b7be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00b      	beq.n	800b7e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2204      	movs	r2, #4
 800b7d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7d8:	f043 0202 	orr.w	r2, r3, #2
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d006      	beq.n	800b7fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7fe f9ff 	bl	8009bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b800:	b29b      	uxth	r3, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	f040 80a2 	bne.w	800b94c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b810:	e853 3f00 	ldrex	r3, [r3]
 800b814:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b816:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b81c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	461a      	mov	r2, r3
 800b826:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b82a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b82e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b830:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b832:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b836:	e841 2300 	strex	r3, r2, [r1]
 800b83a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b83c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1e2      	bne.n	800b808 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3308      	adds	r3, #8
 800b848:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b84c:	e853 3f00 	ldrex	r3, [r3]
 800b850:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b852:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b854:	4b6e      	ldr	r3, [pc, #440]	@ (800ba10 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b856:	4013      	ands	r3, r2
 800b858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	3308      	adds	r3, #8
 800b862:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b866:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b868:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b86c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b86e:	e841 2300 	strex	r3, r2, [r1]
 800b872:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1e3      	bne.n	800b842 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2220      	movs	r2, #32
 800b87e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a60      	ldr	r2, [pc, #384]	@ (800ba14 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d021      	beq.n	800b8dc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d01a      	beq.n	800b8dc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ae:	e853 3f00 	ldrex	r3, [r3]
 800b8b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b8c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8d0:	e841 2300 	strex	r3, r2, [r1]
 800b8d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1e4      	bne.n	800b8a6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d130      	bne.n	800b946 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8fa:	f023 0310 	bic.w	r3, r3, #16
 800b8fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b90c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b90e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b91a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e4      	bne.n	800b8ea <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	69db      	ldr	r3, [r3, #28]
 800b926:	f003 0310 	and.w	r3, r3, #16
 800b92a:	2b10      	cmp	r3, #16
 800b92c:	d103      	bne.n	800b936 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2210      	movs	r2, #16
 800b934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7f4 feae 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
 800b944:	e002      	b.n	800b94c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7fe f948 	bl	8009bdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b94c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b950:	2b00      	cmp	r3, #0
 800b952:	d006      	beq.n	800b962 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b958:	f003 0320 	and.w	r3, r3, #32
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f47f aecd 	bne.w	800b6fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b968:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b96c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b970:	2b00      	cmp	r3, #0
 800b972:	d049      	beq.n	800ba08 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b97a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b97e:	429a      	cmp	r2, r3
 800b980:	d242      	bcs.n	800ba08 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3308      	adds	r3, #8
 800b988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	e853 3f00 	ldrex	r3, [r3]
 800b990:	623b      	str	r3, [r7, #32]
   return(result);
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b9a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9ae:	e841 2300 	strex	r3, r2, [r1]
 800b9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1e3      	bne.n	800b982 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a16      	ldr	r2, [pc, #88]	@ (800ba18 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b9be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	e853 3f00 	ldrex	r3, [r3]
 800b9cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f043 0320 	orr.w	r3, r3, #32
 800b9d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9e2:	61fb      	str	r3, [r7, #28]
 800b9e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	69b9      	ldr	r1, [r7, #24]
 800b9e8:	69fa      	ldr	r2, [r7, #28]
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	617b      	str	r3, [r7, #20]
   return(result);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e4      	bne.n	800b9c0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9f6:	e007      	b.n	800ba08 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	699a      	ldr	r2, [r3, #24]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f042 0208 	orr.w	r2, r2, #8
 800ba06:	619a      	str	r2, [r3, #24]
}
 800ba08:	bf00      	nop
 800ba0a:	37b8      	adds	r7, #184	@ 0xb8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	effffffe 	.word	0xeffffffe
 800ba14:	58000c00 	.word	0x58000c00
 800ba18:	0800b19d 	.word	0x0800b19d

0800ba1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba24:	bf00      	nop
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d101      	bne.n	800ba6e <HAL_UARTEx_DisableFifoMode+0x16>
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e027      	b.n	800babe <HAL_UARTEx_DisableFifoMode+0x66>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2224      	movs	r2, #36	@ 0x24
 800ba7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f022 0201 	bic.w	r2, r2, #1
 800ba94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ba9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2220      	movs	r2, #32
 800bab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bada:	2b01      	cmp	r3, #1
 800badc:	d101      	bne.n	800bae2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bade:	2302      	movs	r3, #2
 800bae0:	e02d      	b.n	800bb3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2224      	movs	r2, #36	@ 0x24
 800baee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f022 0201 	bic.w	r2, r2, #1
 800bb08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	430a      	orrs	r2, r1
 800bb1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f8a0 	bl	800bc64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2220      	movs	r2, #32
 800bb30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d101      	bne.n	800bb5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	e02d      	b.n	800bbba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2224      	movs	r2, #36	@ 0x24
 800bb6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f022 0201 	bic.w	r2, r2, #1
 800bb84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	430a      	orrs	r2, r1
 800bb98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f862 	bl	800bc64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2220      	movs	r2, #32
 800bbac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b08c      	sub	sp, #48	@ 0x30
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	60f8      	str	r0, [r7, #12]
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bbdc:	2b20      	cmp	r3, #32
 800bbde:	d13b      	bne.n	800bc58 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800bbe6:	88fb      	ldrh	r3, [r7, #6]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e034      	b.n	800bc5a <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800bbfc:	88fb      	ldrh	r3, [r7, #6]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	68b9      	ldr	r1, [r7, #8]
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff f824 	bl	800ac50 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d11d      	bne.n	800bc4c <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2210      	movs	r2, #16
 800bc16:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	e853 3f00 	ldrex	r3, [r3]
 800bc24:	617b      	str	r3, [r7, #20]
   return(result);
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f043 0310 	orr.w	r3, r3, #16
 800bc2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc36:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc38:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3a:	6a39      	ldr	r1, [r7, #32]
 800bc3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc3e:	e841 2300 	strex	r3, r2, [r1]
 800bc42:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1e6      	bne.n	800bc18 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800bc4a:	e002      	b.n	800bc52 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800bc52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc56:	e000      	b.n	800bc5a <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800bc58:	2302      	movs	r3, #2
  }
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3730      	adds	r7, #48	@ 0x30
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d108      	bne.n	800bc86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc84:	e031      	b.n	800bcea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc86:	2310      	movs	r3, #16
 800bc88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc8a:	2310      	movs	r3, #16
 800bc8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	0e5b      	lsrs	r3, r3, #25
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	f003 0307 	and.w	r3, r3, #7
 800bc9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	0f5b      	lsrs	r3, r3, #29
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	f003 0307 	and.w	r3, r3, #7
 800bcac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	7b3a      	ldrb	r2, [r7, #12]
 800bcb2:	4911      	ldr	r1, [pc, #68]	@ (800bcf8 <UARTEx_SetNbDataToProcess+0x94>)
 800bcb4:	5c8a      	ldrb	r2, [r1, r2]
 800bcb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcba:	7b3a      	ldrb	r2, [r7, #12]
 800bcbc:	490f      	ldr	r1, [pc, #60]	@ (800bcfc <UARTEx_SetNbDataToProcess+0x98>)
 800bcbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	7b7a      	ldrb	r2, [r7, #13]
 800bcd0:	4909      	ldr	r1, [pc, #36]	@ (800bcf8 <UARTEx_SetNbDataToProcess+0x94>)
 800bcd2:	5c8a      	ldrb	r2, [r1, r2]
 800bcd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bcd8:	7b7a      	ldrb	r2, [r7, #13]
 800bcda:	4908      	ldr	r1, [pc, #32]	@ (800bcfc <UARTEx_SetNbDataToProcess+0x98>)
 800bcdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcde:	fb93 f3f2 	sdiv	r3, r3, r2
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bcea:	bf00      	nop
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	0800da74 	.word	0x0800da74
 800bcfc:	0800da7c 	.word	0x0800da7c

0800bd00 <atoi>:
 800bd00:	220a      	movs	r2, #10
 800bd02:	2100      	movs	r1, #0
 800bd04:	f000 b87a 	b.w	800bdfc <strtol>

0800bd08 <_strtol_l.constprop.0>:
 800bd08:	2b24      	cmp	r3, #36	@ 0x24
 800bd0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0e:	4686      	mov	lr, r0
 800bd10:	4690      	mov	r8, r2
 800bd12:	d801      	bhi.n	800bd18 <_strtol_l.constprop.0+0x10>
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d106      	bne.n	800bd26 <_strtol_l.constprop.0+0x1e>
 800bd18:	f000 fa2a 	bl	800c170 <__errno>
 800bd1c:	2316      	movs	r3, #22
 800bd1e:	6003      	str	r3, [r0, #0]
 800bd20:	2000      	movs	r0, #0
 800bd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd26:	4834      	ldr	r0, [pc, #208]	@ (800bdf8 <_strtol_l.constprop.0+0xf0>)
 800bd28:	460d      	mov	r5, r1
 800bd2a:	462a      	mov	r2, r5
 800bd2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd30:	5d06      	ldrb	r6, [r0, r4]
 800bd32:	f016 0608 	ands.w	r6, r6, #8
 800bd36:	d1f8      	bne.n	800bd2a <_strtol_l.constprop.0+0x22>
 800bd38:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd3a:	d12d      	bne.n	800bd98 <_strtol_l.constprop.0+0x90>
 800bd3c:	782c      	ldrb	r4, [r5, #0]
 800bd3e:	2601      	movs	r6, #1
 800bd40:	1c95      	adds	r5, r2, #2
 800bd42:	f033 0210 	bics.w	r2, r3, #16
 800bd46:	d109      	bne.n	800bd5c <_strtol_l.constprop.0+0x54>
 800bd48:	2c30      	cmp	r4, #48	@ 0x30
 800bd4a:	d12a      	bne.n	800bda2 <_strtol_l.constprop.0+0x9a>
 800bd4c:	782a      	ldrb	r2, [r5, #0]
 800bd4e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd52:	2a58      	cmp	r2, #88	@ 0x58
 800bd54:	d125      	bne.n	800bda2 <_strtol_l.constprop.0+0x9a>
 800bd56:	786c      	ldrb	r4, [r5, #1]
 800bd58:	2310      	movs	r3, #16
 800bd5a:	3502      	adds	r5, #2
 800bd5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bd60:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd64:	2200      	movs	r2, #0
 800bd66:	fbbc f9f3 	udiv	r9, ip, r3
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bd74:	2f09      	cmp	r7, #9
 800bd76:	d81b      	bhi.n	800bdb0 <_strtol_l.constprop.0+0xa8>
 800bd78:	463c      	mov	r4, r7
 800bd7a:	42a3      	cmp	r3, r4
 800bd7c:	dd27      	ble.n	800bdce <_strtol_l.constprop.0+0xc6>
 800bd7e:	1c57      	adds	r7, r2, #1
 800bd80:	d007      	beq.n	800bd92 <_strtol_l.constprop.0+0x8a>
 800bd82:	4581      	cmp	r9, r0
 800bd84:	d320      	bcc.n	800bdc8 <_strtol_l.constprop.0+0xc0>
 800bd86:	d101      	bne.n	800bd8c <_strtol_l.constprop.0+0x84>
 800bd88:	45a2      	cmp	sl, r4
 800bd8a:	db1d      	blt.n	800bdc8 <_strtol_l.constprop.0+0xc0>
 800bd8c:	fb00 4003 	mla	r0, r0, r3, r4
 800bd90:	2201      	movs	r2, #1
 800bd92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd96:	e7eb      	b.n	800bd70 <_strtol_l.constprop.0+0x68>
 800bd98:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd9a:	bf04      	itt	eq
 800bd9c:	782c      	ldrbeq	r4, [r5, #0]
 800bd9e:	1c95      	addeq	r5, r2, #2
 800bda0:	e7cf      	b.n	800bd42 <_strtol_l.constprop.0+0x3a>
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1da      	bne.n	800bd5c <_strtol_l.constprop.0+0x54>
 800bda6:	2c30      	cmp	r4, #48	@ 0x30
 800bda8:	bf0c      	ite	eq
 800bdaa:	2308      	moveq	r3, #8
 800bdac:	230a      	movne	r3, #10
 800bdae:	e7d5      	b.n	800bd5c <_strtol_l.constprop.0+0x54>
 800bdb0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bdb4:	2f19      	cmp	r7, #25
 800bdb6:	d801      	bhi.n	800bdbc <_strtol_l.constprop.0+0xb4>
 800bdb8:	3c37      	subs	r4, #55	@ 0x37
 800bdba:	e7de      	b.n	800bd7a <_strtol_l.constprop.0+0x72>
 800bdbc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bdc0:	2f19      	cmp	r7, #25
 800bdc2:	d804      	bhi.n	800bdce <_strtol_l.constprop.0+0xc6>
 800bdc4:	3c57      	subs	r4, #87	@ 0x57
 800bdc6:	e7d8      	b.n	800bd7a <_strtol_l.constprop.0+0x72>
 800bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdcc:	e7e1      	b.n	800bd92 <_strtol_l.constprop.0+0x8a>
 800bdce:	1c53      	adds	r3, r2, #1
 800bdd0:	d108      	bne.n	800bde4 <_strtol_l.constprop.0+0xdc>
 800bdd2:	2322      	movs	r3, #34	@ 0x22
 800bdd4:	f8ce 3000 	str.w	r3, [lr]
 800bdd8:	4660      	mov	r0, ip
 800bdda:	f1b8 0f00 	cmp.w	r8, #0
 800bdde:	d0a0      	beq.n	800bd22 <_strtol_l.constprop.0+0x1a>
 800bde0:	1e69      	subs	r1, r5, #1
 800bde2:	e006      	b.n	800bdf2 <_strtol_l.constprop.0+0xea>
 800bde4:	b106      	cbz	r6, 800bde8 <_strtol_l.constprop.0+0xe0>
 800bde6:	4240      	negs	r0, r0
 800bde8:	f1b8 0f00 	cmp.w	r8, #0
 800bdec:	d099      	beq.n	800bd22 <_strtol_l.constprop.0+0x1a>
 800bdee:	2a00      	cmp	r2, #0
 800bdf0:	d1f6      	bne.n	800bde0 <_strtol_l.constprop.0+0xd8>
 800bdf2:	f8c8 1000 	str.w	r1, [r8]
 800bdf6:	e794      	b.n	800bd22 <_strtol_l.constprop.0+0x1a>
 800bdf8:	0800da85 	.word	0x0800da85

0800bdfc <strtol>:
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	460a      	mov	r2, r1
 800be00:	4601      	mov	r1, r0
 800be02:	4802      	ldr	r0, [pc, #8]	@ (800be0c <strtol+0x10>)
 800be04:	6800      	ldr	r0, [r0, #0]
 800be06:	f7ff bf7f 	b.w	800bd08 <_strtol_l.constprop.0>
 800be0a:	bf00      	nop
 800be0c:	2400001c 	.word	0x2400001c

0800be10 <std>:
 800be10:	2300      	movs	r3, #0
 800be12:	b510      	push	{r4, lr}
 800be14:	4604      	mov	r4, r0
 800be16:	e9c0 3300 	strd	r3, r3, [r0]
 800be1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be1e:	6083      	str	r3, [r0, #8]
 800be20:	8181      	strh	r1, [r0, #12]
 800be22:	6643      	str	r3, [r0, #100]	@ 0x64
 800be24:	81c2      	strh	r2, [r0, #14]
 800be26:	6183      	str	r3, [r0, #24]
 800be28:	4619      	mov	r1, r3
 800be2a:	2208      	movs	r2, #8
 800be2c:	305c      	adds	r0, #92	@ 0x5c
 800be2e:	f000 f8f4 	bl	800c01a <memset>
 800be32:	4b0d      	ldr	r3, [pc, #52]	@ (800be68 <std+0x58>)
 800be34:	6263      	str	r3, [r4, #36]	@ 0x24
 800be36:	4b0d      	ldr	r3, [pc, #52]	@ (800be6c <std+0x5c>)
 800be38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be3a:	4b0d      	ldr	r3, [pc, #52]	@ (800be70 <std+0x60>)
 800be3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be3e:	4b0d      	ldr	r3, [pc, #52]	@ (800be74 <std+0x64>)
 800be40:	6323      	str	r3, [r4, #48]	@ 0x30
 800be42:	4b0d      	ldr	r3, [pc, #52]	@ (800be78 <std+0x68>)
 800be44:	6224      	str	r4, [r4, #32]
 800be46:	429c      	cmp	r4, r3
 800be48:	d006      	beq.n	800be58 <std+0x48>
 800be4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be4e:	4294      	cmp	r4, r2
 800be50:	d002      	beq.n	800be58 <std+0x48>
 800be52:	33d0      	adds	r3, #208	@ 0xd0
 800be54:	429c      	cmp	r4, r3
 800be56:	d105      	bne.n	800be64 <std+0x54>
 800be58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be60:	f000 b9b0 	b.w	800c1c4 <__retarget_lock_init_recursive>
 800be64:	bd10      	pop	{r4, pc}
 800be66:	bf00      	nop
 800be68:	0800bf95 	.word	0x0800bf95
 800be6c:	0800bfb7 	.word	0x0800bfb7
 800be70:	0800bfef 	.word	0x0800bfef
 800be74:	0800c013 	.word	0x0800c013
 800be78:	2400049c 	.word	0x2400049c

0800be7c <stdio_exit_handler>:
 800be7c:	4a02      	ldr	r2, [pc, #8]	@ (800be88 <stdio_exit_handler+0xc>)
 800be7e:	4903      	ldr	r1, [pc, #12]	@ (800be8c <stdio_exit_handler+0x10>)
 800be80:	4803      	ldr	r0, [pc, #12]	@ (800be90 <stdio_exit_handler+0x14>)
 800be82:	f000 b869 	b.w	800bf58 <_fwalk_sglue>
 800be86:	bf00      	nop
 800be88:	24000010 	.word	0x24000010
 800be8c:	0800c511 	.word	0x0800c511
 800be90:	24000020 	.word	0x24000020

0800be94 <cleanup_stdio>:
 800be94:	6841      	ldr	r1, [r0, #4]
 800be96:	4b0c      	ldr	r3, [pc, #48]	@ (800bec8 <cleanup_stdio+0x34>)
 800be98:	4299      	cmp	r1, r3
 800be9a:	b510      	push	{r4, lr}
 800be9c:	4604      	mov	r4, r0
 800be9e:	d001      	beq.n	800bea4 <cleanup_stdio+0x10>
 800bea0:	f000 fb36 	bl	800c510 <_fflush_r>
 800bea4:	68a1      	ldr	r1, [r4, #8]
 800bea6:	4b09      	ldr	r3, [pc, #36]	@ (800becc <cleanup_stdio+0x38>)
 800bea8:	4299      	cmp	r1, r3
 800beaa:	d002      	beq.n	800beb2 <cleanup_stdio+0x1e>
 800beac:	4620      	mov	r0, r4
 800beae:	f000 fb2f 	bl	800c510 <_fflush_r>
 800beb2:	68e1      	ldr	r1, [r4, #12]
 800beb4:	4b06      	ldr	r3, [pc, #24]	@ (800bed0 <cleanup_stdio+0x3c>)
 800beb6:	4299      	cmp	r1, r3
 800beb8:	d004      	beq.n	800bec4 <cleanup_stdio+0x30>
 800beba:	4620      	mov	r0, r4
 800bebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec0:	f000 bb26 	b.w	800c510 <_fflush_r>
 800bec4:	bd10      	pop	{r4, pc}
 800bec6:	bf00      	nop
 800bec8:	2400049c 	.word	0x2400049c
 800becc:	24000504 	.word	0x24000504
 800bed0:	2400056c 	.word	0x2400056c

0800bed4 <global_stdio_init.part.0>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	4b0b      	ldr	r3, [pc, #44]	@ (800bf04 <global_stdio_init.part.0+0x30>)
 800bed8:	4c0b      	ldr	r4, [pc, #44]	@ (800bf08 <global_stdio_init.part.0+0x34>)
 800beda:	4a0c      	ldr	r2, [pc, #48]	@ (800bf0c <global_stdio_init.part.0+0x38>)
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	4620      	mov	r0, r4
 800bee0:	2200      	movs	r2, #0
 800bee2:	2104      	movs	r1, #4
 800bee4:	f7ff ff94 	bl	800be10 <std>
 800bee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800beec:	2201      	movs	r2, #1
 800beee:	2109      	movs	r1, #9
 800bef0:	f7ff ff8e 	bl	800be10 <std>
 800bef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bef8:	2202      	movs	r2, #2
 800befa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befe:	2112      	movs	r1, #18
 800bf00:	f7ff bf86 	b.w	800be10 <std>
 800bf04:	240005d4 	.word	0x240005d4
 800bf08:	2400049c 	.word	0x2400049c
 800bf0c:	0800be7d 	.word	0x0800be7d

0800bf10 <__sfp_lock_acquire>:
 800bf10:	4801      	ldr	r0, [pc, #4]	@ (800bf18 <__sfp_lock_acquire+0x8>)
 800bf12:	f000 b958 	b.w	800c1c6 <__retarget_lock_acquire_recursive>
 800bf16:	bf00      	nop
 800bf18:	240005dd 	.word	0x240005dd

0800bf1c <__sfp_lock_release>:
 800bf1c:	4801      	ldr	r0, [pc, #4]	@ (800bf24 <__sfp_lock_release+0x8>)
 800bf1e:	f000 b953 	b.w	800c1c8 <__retarget_lock_release_recursive>
 800bf22:	bf00      	nop
 800bf24:	240005dd 	.word	0x240005dd

0800bf28 <__sinit>:
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	f7ff fff0 	bl	800bf10 <__sfp_lock_acquire>
 800bf30:	6a23      	ldr	r3, [r4, #32]
 800bf32:	b11b      	cbz	r3, 800bf3c <__sinit+0x14>
 800bf34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf38:	f7ff bff0 	b.w	800bf1c <__sfp_lock_release>
 800bf3c:	4b04      	ldr	r3, [pc, #16]	@ (800bf50 <__sinit+0x28>)
 800bf3e:	6223      	str	r3, [r4, #32]
 800bf40:	4b04      	ldr	r3, [pc, #16]	@ (800bf54 <__sinit+0x2c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1f5      	bne.n	800bf34 <__sinit+0xc>
 800bf48:	f7ff ffc4 	bl	800bed4 <global_stdio_init.part.0>
 800bf4c:	e7f2      	b.n	800bf34 <__sinit+0xc>
 800bf4e:	bf00      	nop
 800bf50:	0800be95 	.word	0x0800be95
 800bf54:	240005d4 	.word	0x240005d4

0800bf58 <_fwalk_sglue>:
 800bf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf5c:	4607      	mov	r7, r0
 800bf5e:	4688      	mov	r8, r1
 800bf60:	4614      	mov	r4, r2
 800bf62:	2600      	movs	r6, #0
 800bf64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf68:	f1b9 0901 	subs.w	r9, r9, #1
 800bf6c:	d505      	bpl.n	800bf7a <_fwalk_sglue+0x22>
 800bf6e:	6824      	ldr	r4, [r4, #0]
 800bf70:	2c00      	cmp	r4, #0
 800bf72:	d1f7      	bne.n	800bf64 <_fwalk_sglue+0xc>
 800bf74:	4630      	mov	r0, r6
 800bf76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf7a:	89ab      	ldrh	r3, [r5, #12]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d907      	bls.n	800bf90 <_fwalk_sglue+0x38>
 800bf80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf84:	3301      	adds	r3, #1
 800bf86:	d003      	beq.n	800bf90 <_fwalk_sglue+0x38>
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	47c0      	blx	r8
 800bf8e:	4306      	orrs	r6, r0
 800bf90:	3568      	adds	r5, #104	@ 0x68
 800bf92:	e7e9      	b.n	800bf68 <_fwalk_sglue+0x10>

0800bf94 <__sread>:
 800bf94:	b510      	push	{r4, lr}
 800bf96:	460c      	mov	r4, r1
 800bf98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf9c:	f000 f8c4 	bl	800c128 <_read_r>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	bfab      	itete	ge
 800bfa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bfa6:	89a3      	ldrhlt	r3, [r4, #12]
 800bfa8:	181b      	addge	r3, r3, r0
 800bfaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bfae:	bfac      	ite	ge
 800bfb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bfb2:	81a3      	strhlt	r3, [r4, #12]
 800bfb4:	bd10      	pop	{r4, pc}

0800bfb6 <__swrite>:
 800bfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfba:	461f      	mov	r7, r3
 800bfbc:	898b      	ldrh	r3, [r1, #12]
 800bfbe:	05db      	lsls	r3, r3, #23
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	4616      	mov	r6, r2
 800bfc6:	d505      	bpl.n	800bfd4 <__swrite+0x1e>
 800bfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfcc:	2302      	movs	r3, #2
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f000 f898 	bl	800c104 <_lseek_r>
 800bfd4:	89a3      	ldrh	r3, [r4, #12]
 800bfd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfde:	81a3      	strh	r3, [r4, #12]
 800bfe0:	4632      	mov	r2, r6
 800bfe2:	463b      	mov	r3, r7
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfea:	f000 b8af 	b.w	800c14c <_write_r>

0800bfee <__sseek>:
 800bfee:	b510      	push	{r4, lr}
 800bff0:	460c      	mov	r4, r1
 800bff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff6:	f000 f885 	bl	800c104 <_lseek_r>
 800bffa:	1c43      	adds	r3, r0, #1
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	bf15      	itete	ne
 800c000:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c00a:	81a3      	strheq	r3, [r4, #12]
 800c00c:	bf18      	it	ne
 800c00e:	81a3      	strhne	r3, [r4, #12]
 800c010:	bd10      	pop	{r4, pc}

0800c012 <__sclose>:
 800c012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c016:	f000 b865 	b.w	800c0e4 <_close_r>

0800c01a <memset>:
 800c01a:	4402      	add	r2, r0
 800c01c:	4603      	mov	r3, r0
 800c01e:	4293      	cmp	r3, r2
 800c020:	d100      	bne.n	800c024 <memset+0xa>
 800c022:	4770      	bx	lr
 800c024:	f803 1b01 	strb.w	r1, [r3], #1
 800c028:	e7f9      	b.n	800c01e <memset+0x4>
	...

0800c02c <strtok>:
 800c02c:	4b16      	ldr	r3, [pc, #88]	@ (800c088 <strtok+0x5c>)
 800c02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c032:	681f      	ldr	r7, [r3, #0]
 800c034:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c036:	4605      	mov	r5, r0
 800c038:	460e      	mov	r6, r1
 800c03a:	b9ec      	cbnz	r4, 800c078 <strtok+0x4c>
 800c03c:	2050      	movs	r0, #80	@ 0x50
 800c03e:	f000 f92d 	bl	800c29c <malloc>
 800c042:	4602      	mov	r2, r0
 800c044:	6478      	str	r0, [r7, #68]	@ 0x44
 800c046:	b920      	cbnz	r0, 800c052 <strtok+0x26>
 800c048:	4b10      	ldr	r3, [pc, #64]	@ (800c08c <strtok+0x60>)
 800c04a:	4811      	ldr	r0, [pc, #68]	@ (800c090 <strtok+0x64>)
 800c04c:	215b      	movs	r1, #91	@ 0x5b
 800c04e:	f000 f8bd 	bl	800c1cc <__assert_func>
 800c052:	e9c0 4400 	strd	r4, r4, [r0]
 800c056:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c05a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c05e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c062:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c066:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c06a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c06e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c072:	6184      	str	r4, [r0, #24]
 800c074:	7704      	strb	r4, [r0, #28]
 800c076:	6244      	str	r4, [r0, #36]	@ 0x24
 800c078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c07a:	4631      	mov	r1, r6
 800c07c:	4628      	mov	r0, r5
 800c07e:	2301      	movs	r3, #1
 800c080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c084:	f000 b806 	b.w	800c094 <__strtok_r>
 800c088:	2400001c 	.word	0x2400001c
 800c08c:	0800db85 	.word	0x0800db85
 800c090:	0800db9c 	.word	0x0800db9c

0800c094 <__strtok_r>:
 800c094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c096:	4604      	mov	r4, r0
 800c098:	b908      	cbnz	r0, 800c09e <__strtok_r+0xa>
 800c09a:	6814      	ldr	r4, [r2, #0]
 800c09c:	b144      	cbz	r4, 800c0b0 <__strtok_r+0x1c>
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c0a4:	460f      	mov	r7, r1
 800c0a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c0aa:	b91e      	cbnz	r6, 800c0b4 <__strtok_r+0x20>
 800c0ac:	b965      	cbnz	r5, 800c0c8 <__strtok_r+0x34>
 800c0ae:	6015      	str	r5, [r2, #0]
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	e005      	b.n	800c0c0 <__strtok_r+0x2c>
 800c0b4:	42b5      	cmp	r5, r6
 800c0b6:	d1f6      	bne.n	800c0a6 <__strtok_r+0x12>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f0      	bne.n	800c09e <__strtok_r+0xa>
 800c0bc:	6014      	str	r4, [r2, #0]
 800c0be:	7003      	strb	r3, [r0, #0]
 800c0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c2:	461c      	mov	r4, r3
 800c0c4:	e00c      	b.n	800c0e0 <__strtok_r+0x4c>
 800c0c6:	b915      	cbnz	r5, 800c0ce <__strtok_r+0x3a>
 800c0c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0cc:	460e      	mov	r6, r1
 800c0ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c0d2:	42ab      	cmp	r3, r5
 800c0d4:	d1f7      	bne.n	800c0c6 <__strtok_r+0x32>
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d0f3      	beq.n	800c0c2 <__strtok_r+0x2e>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c0e0:	6014      	str	r4, [r2, #0]
 800c0e2:	e7ed      	b.n	800c0c0 <__strtok_r+0x2c>

0800c0e4 <_close_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	4d06      	ldr	r5, [pc, #24]	@ (800c100 <_close_r+0x1c>)
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	4608      	mov	r0, r1
 800c0ee:	602b      	str	r3, [r5, #0]
 800c0f0:	f7f5 fa88 	bl	8001604 <_close>
 800c0f4:	1c43      	adds	r3, r0, #1
 800c0f6:	d102      	bne.n	800c0fe <_close_r+0x1a>
 800c0f8:	682b      	ldr	r3, [r5, #0]
 800c0fa:	b103      	cbz	r3, 800c0fe <_close_r+0x1a>
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	bd38      	pop	{r3, r4, r5, pc}
 800c100:	240005d8 	.word	0x240005d8

0800c104 <_lseek_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4d07      	ldr	r5, [pc, #28]	@ (800c124 <_lseek_r+0x20>)
 800c108:	4604      	mov	r4, r0
 800c10a:	4608      	mov	r0, r1
 800c10c:	4611      	mov	r1, r2
 800c10e:	2200      	movs	r2, #0
 800c110:	602a      	str	r2, [r5, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	f7f5 fa9d 	bl	8001652 <_lseek>
 800c118:	1c43      	adds	r3, r0, #1
 800c11a:	d102      	bne.n	800c122 <_lseek_r+0x1e>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	b103      	cbz	r3, 800c122 <_lseek_r+0x1e>
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	bd38      	pop	{r3, r4, r5, pc}
 800c124:	240005d8 	.word	0x240005d8

0800c128 <_read_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4d07      	ldr	r5, [pc, #28]	@ (800c148 <_read_r+0x20>)
 800c12c:	4604      	mov	r4, r0
 800c12e:	4608      	mov	r0, r1
 800c130:	4611      	mov	r1, r2
 800c132:	2200      	movs	r2, #0
 800c134:	602a      	str	r2, [r5, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	f7f5 fa2b 	bl	8001592 <_read>
 800c13c:	1c43      	adds	r3, r0, #1
 800c13e:	d102      	bne.n	800c146 <_read_r+0x1e>
 800c140:	682b      	ldr	r3, [r5, #0]
 800c142:	b103      	cbz	r3, 800c146 <_read_r+0x1e>
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	bd38      	pop	{r3, r4, r5, pc}
 800c148:	240005d8 	.word	0x240005d8

0800c14c <_write_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4d07      	ldr	r5, [pc, #28]	@ (800c16c <_write_r+0x20>)
 800c150:	4604      	mov	r4, r0
 800c152:	4608      	mov	r0, r1
 800c154:	4611      	mov	r1, r2
 800c156:	2200      	movs	r2, #0
 800c158:	602a      	str	r2, [r5, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	f7f5 fa36 	bl	80015cc <_write>
 800c160:	1c43      	adds	r3, r0, #1
 800c162:	d102      	bne.n	800c16a <_write_r+0x1e>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	b103      	cbz	r3, 800c16a <_write_r+0x1e>
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	bd38      	pop	{r3, r4, r5, pc}
 800c16c:	240005d8 	.word	0x240005d8

0800c170 <__errno>:
 800c170:	4b01      	ldr	r3, [pc, #4]	@ (800c178 <__errno+0x8>)
 800c172:	6818      	ldr	r0, [r3, #0]
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	2400001c 	.word	0x2400001c

0800c17c <__libc_init_array>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	4d0d      	ldr	r5, [pc, #52]	@ (800c1b4 <__libc_init_array+0x38>)
 800c180:	4c0d      	ldr	r4, [pc, #52]	@ (800c1b8 <__libc_init_array+0x3c>)
 800c182:	1b64      	subs	r4, r4, r5
 800c184:	10a4      	asrs	r4, r4, #2
 800c186:	2600      	movs	r6, #0
 800c188:	42a6      	cmp	r6, r4
 800c18a:	d109      	bne.n	800c1a0 <__libc_init_array+0x24>
 800c18c:	4d0b      	ldr	r5, [pc, #44]	@ (800c1bc <__libc_init_array+0x40>)
 800c18e:	4c0c      	ldr	r4, [pc, #48]	@ (800c1c0 <__libc_init_array+0x44>)
 800c190:	f001 fc4a 	bl	800da28 <_init>
 800c194:	1b64      	subs	r4, r4, r5
 800c196:	10a4      	asrs	r4, r4, #2
 800c198:	2600      	movs	r6, #0
 800c19a:	42a6      	cmp	r6, r4
 800c19c:	d105      	bne.n	800c1aa <__libc_init_array+0x2e>
 800c19e:	bd70      	pop	{r4, r5, r6, pc}
 800c1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1a4:	4798      	blx	r3
 800c1a6:	3601      	adds	r6, #1
 800c1a8:	e7ee      	b.n	800c188 <__libc_init_array+0xc>
 800c1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ae:	4798      	blx	r3
 800c1b0:	3601      	adds	r6, #1
 800c1b2:	e7f2      	b.n	800c19a <__libc_init_array+0x1e>
 800c1b4:	0800de48 	.word	0x0800de48
 800c1b8:	0800de48 	.word	0x0800de48
 800c1bc:	0800de48 	.word	0x0800de48
 800c1c0:	0800de4c 	.word	0x0800de4c

0800c1c4 <__retarget_lock_init_recursive>:
 800c1c4:	4770      	bx	lr

0800c1c6 <__retarget_lock_acquire_recursive>:
 800c1c6:	4770      	bx	lr

0800c1c8 <__retarget_lock_release_recursive>:
 800c1c8:	4770      	bx	lr
	...

0800c1cc <__assert_func>:
 800c1cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1ce:	4614      	mov	r4, r2
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	4b09      	ldr	r3, [pc, #36]	@ (800c1f8 <__assert_func+0x2c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	68d8      	ldr	r0, [r3, #12]
 800c1da:	b954      	cbnz	r4, 800c1f2 <__assert_func+0x26>
 800c1dc:	4b07      	ldr	r3, [pc, #28]	@ (800c1fc <__assert_func+0x30>)
 800c1de:	461c      	mov	r4, r3
 800c1e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1e4:	9100      	str	r1, [sp, #0]
 800c1e6:	462b      	mov	r3, r5
 800c1e8:	4905      	ldr	r1, [pc, #20]	@ (800c200 <__assert_func+0x34>)
 800c1ea:	f000 f9b9 	bl	800c560 <fiprintf>
 800c1ee:	f000 f9d9 	bl	800c5a4 <abort>
 800c1f2:	4b04      	ldr	r3, [pc, #16]	@ (800c204 <__assert_func+0x38>)
 800c1f4:	e7f4      	b.n	800c1e0 <__assert_func+0x14>
 800c1f6:	bf00      	nop
 800c1f8:	2400001c 	.word	0x2400001c
 800c1fc:	0800dc31 	.word	0x0800dc31
 800c200:	0800dc03 	.word	0x0800dc03
 800c204:	0800dbf6 	.word	0x0800dbf6

0800c208 <_free_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4605      	mov	r5, r0
 800c20c:	2900      	cmp	r1, #0
 800c20e:	d041      	beq.n	800c294 <_free_r+0x8c>
 800c210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c214:	1f0c      	subs	r4, r1, #4
 800c216:	2b00      	cmp	r3, #0
 800c218:	bfb8      	it	lt
 800c21a:	18e4      	addlt	r4, r4, r3
 800c21c:	f000 f8e8 	bl	800c3f0 <__malloc_lock>
 800c220:	4a1d      	ldr	r2, [pc, #116]	@ (800c298 <_free_r+0x90>)
 800c222:	6813      	ldr	r3, [r2, #0]
 800c224:	b933      	cbnz	r3, 800c234 <_free_r+0x2c>
 800c226:	6063      	str	r3, [r4, #4]
 800c228:	6014      	str	r4, [r2, #0]
 800c22a:	4628      	mov	r0, r5
 800c22c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c230:	f000 b8e4 	b.w	800c3fc <__malloc_unlock>
 800c234:	42a3      	cmp	r3, r4
 800c236:	d908      	bls.n	800c24a <_free_r+0x42>
 800c238:	6820      	ldr	r0, [r4, #0]
 800c23a:	1821      	adds	r1, r4, r0
 800c23c:	428b      	cmp	r3, r1
 800c23e:	bf01      	itttt	eq
 800c240:	6819      	ldreq	r1, [r3, #0]
 800c242:	685b      	ldreq	r3, [r3, #4]
 800c244:	1809      	addeq	r1, r1, r0
 800c246:	6021      	streq	r1, [r4, #0]
 800c248:	e7ed      	b.n	800c226 <_free_r+0x1e>
 800c24a:	461a      	mov	r2, r3
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	b10b      	cbz	r3, 800c254 <_free_r+0x4c>
 800c250:	42a3      	cmp	r3, r4
 800c252:	d9fa      	bls.n	800c24a <_free_r+0x42>
 800c254:	6811      	ldr	r1, [r2, #0]
 800c256:	1850      	adds	r0, r2, r1
 800c258:	42a0      	cmp	r0, r4
 800c25a:	d10b      	bne.n	800c274 <_free_r+0x6c>
 800c25c:	6820      	ldr	r0, [r4, #0]
 800c25e:	4401      	add	r1, r0
 800c260:	1850      	adds	r0, r2, r1
 800c262:	4283      	cmp	r3, r0
 800c264:	6011      	str	r1, [r2, #0]
 800c266:	d1e0      	bne.n	800c22a <_free_r+0x22>
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	6053      	str	r3, [r2, #4]
 800c26e:	4408      	add	r0, r1
 800c270:	6010      	str	r0, [r2, #0]
 800c272:	e7da      	b.n	800c22a <_free_r+0x22>
 800c274:	d902      	bls.n	800c27c <_free_r+0x74>
 800c276:	230c      	movs	r3, #12
 800c278:	602b      	str	r3, [r5, #0]
 800c27a:	e7d6      	b.n	800c22a <_free_r+0x22>
 800c27c:	6820      	ldr	r0, [r4, #0]
 800c27e:	1821      	adds	r1, r4, r0
 800c280:	428b      	cmp	r3, r1
 800c282:	bf04      	itt	eq
 800c284:	6819      	ldreq	r1, [r3, #0]
 800c286:	685b      	ldreq	r3, [r3, #4]
 800c288:	6063      	str	r3, [r4, #4]
 800c28a:	bf04      	itt	eq
 800c28c:	1809      	addeq	r1, r1, r0
 800c28e:	6021      	streq	r1, [r4, #0]
 800c290:	6054      	str	r4, [r2, #4]
 800c292:	e7ca      	b.n	800c22a <_free_r+0x22>
 800c294:	bd38      	pop	{r3, r4, r5, pc}
 800c296:	bf00      	nop
 800c298:	240005e4 	.word	0x240005e4

0800c29c <malloc>:
 800c29c:	4b02      	ldr	r3, [pc, #8]	@ (800c2a8 <malloc+0xc>)
 800c29e:	4601      	mov	r1, r0
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	f000 b825 	b.w	800c2f0 <_malloc_r>
 800c2a6:	bf00      	nop
 800c2a8:	2400001c 	.word	0x2400001c

0800c2ac <sbrk_aligned>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c2ec <sbrk_aligned+0x40>)
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	6831      	ldr	r1, [r6, #0]
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	b911      	cbnz	r1, 800c2be <sbrk_aligned+0x12>
 800c2b8:	f000 f964 	bl	800c584 <_sbrk_r>
 800c2bc:	6030      	str	r0, [r6, #0]
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f000 f95f 	bl	800c584 <_sbrk_r>
 800c2c6:	1c43      	adds	r3, r0, #1
 800c2c8:	d103      	bne.n	800c2d2 <sbrk_aligned+0x26>
 800c2ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	bd70      	pop	{r4, r5, r6, pc}
 800c2d2:	1cc4      	adds	r4, r0, #3
 800c2d4:	f024 0403 	bic.w	r4, r4, #3
 800c2d8:	42a0      	cmp	r0, r4
 800c2da:	d0f8      	beq.n	800c2ce <sbrk_aligned+0x22>
 800c2dc:	1a21      	subs	r1, r4, r0
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f000 f950 	bl	800c584 <_sbrk_r>
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	d1f2      	bne.n	800c2ce <sbrk_aligned+0x22>
 800c2e8:	e7ef      	b.n	800c2ca <sbrk_aligned+0x1e>
 800c2ea:	bf00      	nop
 800c2ec:	240005e0 	.word	0x240005e0

0800c2f0 <_malloc_r>:
 800c2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	1ccd      	adds	r5, r1, #3
 800c2f6:	f025 0503 	bic.w	r5, r5, #3
 800c2fa:	3508      	adds	r5, #8
 800c2fc:	2d0c      	cmp	r5, #12
 800c2fe:	bf38      	it	cc
 800c300:	250c      	movcc	r5, #12
 800c302:	2d00      	cmp	r5, #0
 800c304:	4606      	mov	r6, r0
 800c306:	db01      	blt.n	800c30c <_malloc_r+0x1c>
 800c308:	42a9      	cmp	r1, r5
 800c30a:	d904      	bls.n	800c316 <_malloc_r+0x26>
 800c30c:	230c      	movs	r3, #12
 800c30e:	6033      	str	r3, [r6, #0]
 800c310:	2000      	movs	r0, #0
 800c312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3ec <_malloc_r+0xfc>
 800c31a:	f000 f869 	bl	800c3f0 <__malloc_lock>
 800c31e:	f8d8 3000 	ldr.w	r3, [r8]
 800c322:	461c      	mov	r4, r3
 800c324:	bb44      	cbnz	r4, 800c378 <_malloc_r+0x88>
 800c326:	4629      	mov	r1, r5
 800c328:	4630      	mov	r0, r6
 800c32a:	f7ff ffbf 	bl	800c2ac <sbrk_aligned>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	4604      	mov	r4, r0
 800c332:	d158      	bne.n	800c3e6 <_malloc_r+0xf6>
 800c334:	f8d8 4000 	ldr.w	r4, [r8]
 800c338:	4627      	mov	r7, r4
 800c33a:	2f00      	cmp	r7, #0
 800c33c:	d143      	bne.n	800c3c6 <_malloc_r+0xd6>
 800c33e:	2c00      	cmp	r4, #0
 800c340:	d04b      	beq.n	800c3da <_malloc_r+0xea>
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	4639      	mov	r1, r7
 800c346:	4630      	mov	r0, r6
 800c348:	eb04 0903 	add.w	r9, r4, r3
 800c34c:	f000 f91a 	bl	800c584 <_sbrk_r>
 800c350:	4581      	cmp	r9, r0
 800c352:	d142      	bne.n	800c3da <_malloc_r+0xea>
 800c354:	6821      	ldr	r1, [r4, #0]
 800c356:	1a6d      	subs	r5, r5, r1
 800c358:	4629      	mov	r1, r5
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7ff ffa6 	bl	800c2ac <sbrk_aligned>
 800c360:	3001      	adds	r0, #1
 800c362:	d03a      	beq.n	800c3da <_malloc_r+0xea>
 800c364:	6823      	ldr	r3, [r4, #0]
 800c366:	442b      	add	r3, r5
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	f8d8 3000 	ldr.w	r3, [r8]
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	bb62      	cbnz	r2, 800c3cc <_malloc_r+0xdc>
 800c372:	f8c8 7000 	str.w	r7, [r8]
 800c376:	e00f      	b.n	800c398 <_malloc_r+0xa8>
 800c378:	6822      	ldr	r2, [r4, #0]
 800c37a:	1b52      	subs	r2, r2, r5
 800c37c:	d420      	bmi.n	800c3c0 <_malloc_r+0xd0>
 800c37e:	2a0b      	cmp	r2, #11
 800c380:	d917      	bls.n	800c3b2 <_malloc_r+0xc2>
 800c382:	1961      	adds	r1, r4, r5
 800c384:	42a3      	cmp	r3, r4
 800c386:	6025      	str	r5, [r4, #0]
 800c388:	bf18      	it	ne
 800c38a:	6059      	strne	r1, [r3, #4]
 800c38c:	6863      	ldr	r3, [r4, #4]
 800c38e:	bf08      	it	eq
 800c390:	f8c8 1000 	streq.w	r1, [r8]
 800c394:	5162      	str	r2, [r4, r5]
 800c396:	604b      	str	r3, [r1, #4]
 800c398:	4630      	mov	r0, r6
 800c39a:	f000 f82f 	bl	800c3fc <__malloc_unlock>
 800c39e:	f104 000b 	add.w	r0, r4, #11
 800c3a2:	1d23      	adds	r3, r4, #4
 800c3a4:	f020 0007 	bic.w	r0, r0, #7
 800c3a8:	1ac2      	subs	r2, r0, r3
 800c3aa:	bf1c      	itt	ne
 800c3ac:	1a1b      	subne	r3, r3, r0
 800c3ae:	50a3      	strne	r3, [r4, r2]
 800c3b0:	e7af      	b.n	800c312 <_malloc_r+0x22>
 800c3b2:	6862      	ldr	r2, [r4, #4]
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	bf0c      	ite	eq
 800c3b8:	f8c8 2000 	streq.w	r2, [r8]
 800c3bc:	605a      	strne	r2, [r3, #4]
 800c3be:	e7eb      	b.n	800c398 <_malloc_r+0xa8>
 800c3c0:	4623      	mov	r3, r4
 800c3c2:	6864      	ldr	r4, [r4, #4]
 800c3c4:	e7ae      	b.n	800c324 <_malloc_r+0x34>
 800c3c6:	463c      	mov	r4, r7
 800c3c8:	687f      	ldr	r7, [r7, #4]
 800c3ca:	e7b6      	b.n	800c33a <_malloc_r+0x4a>
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	42a3      	cmp	r3, r4
 800c3d2:	d1fb      	bne.n	800c3cc <_malloc_r+0xdc>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	6053      	str	r3, [r2, #4]
 800c3d8:	e7de      	b.n	800c398 <_malloc_r+0xa8>
 800c3da:	230c      	movs	r3, #12
 800c3dc:	6033      	str	r3, [r6, #0]
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f000 f80c 	bl	800c3fc <__malloc_unlock>
 800c3e4:	e794      	b.n	800c310 <_malloc_r+0x20>
 800c3e6:	6005      	str	r5, [r0, #0]
 800c3e8:	e7d6      	b.n	800c398 <_malloc_r+0xa8>
 800c3ea:	bf00      	nop
 800c3ec:	240005e4 	.word	0x240005e4

0800c3f0 <__malloc_lock>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	@ (800c3f8 <__malloc_lock+0x8>)
 800c3f2:	f7ff bee8 	b.w	800c1c6 <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	240005dc 	.word	0x240005dc

0800c3fc <__malloc_unlock>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	@ (800c404 <__malloc_unlock+0x8>)
 800c3fe:	f7ff bee3 	b.w	800c1c8 <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	240005dc 	.word	0x240005dc

0800c408 <__sflush_r>:
 800c408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c410:	0716      	lsls	r6, r2, #28
 800c412:	4605      	mov	r5, r0
 800c414:	460c      	mov	r4, r1
 800c416:	d454      	bmi.n	800c4c2 <__sflush_r+0xba>
 800c418:	684b      	ldr	r3, [r1, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	dc02      	bgt.n	800c424 <__sflush_r+0x1c>
 800c41e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c420:	2b00      	cmp	r3, #0
 800c422:	dd48      	ble.n	800c4b6 <__sflush_r+0xae>
 800c424:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c426:	2e00      	cmp	r6, #0
 800c428:	d045      	beq.n	800c4b6 <__sflush_r+0xae>
 800c42a:	2300      	movs	r3, #0
 800c42c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c430:	682f      	ldr	r7, [r5, #0]
 800c432:	6a21      	ldr	r1, [r4, #32]
 800c434:	602b      	str	r3, [r5, #0]
 800c436:	d030      	beq.n	800c49a <__sflush_r+0x92>
 800c438:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	0759      	lsls	r1, r3, #29
 800c43e:	d505      	bpl.n	800c44c <__sflush_r+0x44>
 800c440:	6863      	ldr	r3, [r4, #4]
 800c442:	1ad2      	subs	r2, r2, r3
 800c444:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c446:	b10b      	cbz	r3, 800c44c <__sflush_r+0x44>
 800c448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c44a:	1ad2      	subs	r2, r2, r3
 800c44c:	2300      	movs	r3, #0
 800c44e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c450:	6a21      	ldr	r1, [r4, #32]
 800c452:	4628      	mov	r0, r5
 800c454:	47b0      	blx	r6
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	d106      	bne.n	800c46a <__sflush_r+0x62>
 800c45c:	6829      	ldr	r1, [r5, #0]
 800c45e:	291d      	cmp	r1, #29
 800c460:	d82b      	bhi.n	800c4ba <__sflush_r+0xb2>
 800c462:	4a2a      	ldr	r2, [pc, #168]	@ (800c50c <__sflush_r+0x104>)
 800c464:	410a      	asrs	r2, r1
 800c466:	07d6      	lsls	r6, r2, #31
 800c468:	d427      	bmi.n	800c4ba <__sflush_r+0xb2>
 800c46a:	2200      	movs	r2, #0
 800c46c:	6062      	str	r2, [r4, #4]
 800c46e:	04d9      	lsls	r1, r3, #19
 800c470:	6922      	ldr	r2, [r4, #16]
 800c472:	6022      	str	r2, [r4, #0]
 800c474:	d504      	bpl.n	800c480 <__sflush_r+0x78>
 800c476:	1c42      	adds	r2, r0, #1
 800c478:	d101      	bne.n	800c47e <__sflush_r+0x76>
 800c47a:	682b      	ldr	r3, [r5, #0]
 800c47c:	b903      	cbnz	r3, 800c480 <__sflush_r+0x78>
 800c47e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c482:	602f      	str	r7, [r5, #0]
 800c484:	b1b9      	cbz	r1, 800c4b6 <__sflush_r+0xae>
 800c486:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c48a:	4299      	cmp	r1, r3
 800c48c:	d002      	beq.n	800c494 <__sflush_r+0x8c>
 800c48e:	4628      	mov	r0, r5
 800c490:	f7ff feba 	bl	800c208 <_free_r>
 800c494:	2300      	movs	r3, #0
 800c496:	6363      	str	r3, [r4, #52]	@ 0x34
 800c498:	e00d      	b.n	800c4b6 <__sflush_r+0xae>
 800c49a:	2301      	movs	r3, #1
 800c49c:	4628      	mov	r0, r5
 800c49e:	47b0      	blx	r6
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	1c50      	adds	r0, r2, #1
 800c4a4:	d1c9      	bne.n	800c43a <__sflush_r+0x32>
 800c4a6:	682b      	ldr	r3, [r5, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d0c6      	beq.n	800c43a <__sflush_r+0x32>
 800c4ac:	2b1d      	cmp	r3, #29
 800c4ae:	d001      	beq.n	800c4b4 <__sflush_r+0xac>
 800c4b0:	2b16      	cmp	r3, #22
 800c4b2:	d11e      	bne.n	800c4f2 <__sflush_r+0xea>
 800c4b4:	602f      	str	r7, [r5, #0]
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	e022      	b.n	800c500 <__sflush_r+0xf8>
 800c4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4be:	b21b      	sxth	r3, r3
 800c4c0:	e01b      	b.n	800c4fa <__sflush_r+0xf2>
 800c4c2:	690f      	ldr	r7, [r1, #16]
 800c4c4:	2f00      	cmp	r7, #0
 800c4c6:	d0f6      	beq.n	800c4b6 <__sflush_r+0xae>
 800c4c8:	0793      	lsls	r3, r2, #30
 800c4ca:	680e      	ldr	r6, [r1, #0]
 800c4cc:	bf08      	it	eq
 800c4ce:	694b      	ldreq	r3, [r1, #20]
 800c4d0:	600f      	str	r7, [r1, #0]
 800c4d2:	bf18      	it	ne
 800c4d4:	2300      	movne	r3, #0
 800c4d6:	eba6 0807 	sub.w	r8, r6, r7
 800c4da:	608b      	str	r3, [r1, #8]
 800c4dc:	f1b8 0f00 	cmp.w	r8, #0
 800c4e0:	dde9      	ble.n	800c4b6 <__sflush_r+0xae>
 800c4e2:	6a21      	ldr	r1, [r4, #32]
 800c4e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c4e6:	4643      	mov	r3, r8
 800c4e8:	463a      	mov	r2, r7
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	47b0      	blx	r6
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	dc08      	bgt.n	800c504 <__sflush_r+0xfc>
 800c4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4fa:	81a3      	strh	r3, [r4, #12]
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c504:	4407      	add	r7, r0
 800c506:	eba8 0800 	sub.w	r8, r8, r0
 800c50a:	e7e7      	b.n	800c4dc <__sflush_r+0xd4>
 800c50c:	dfbffffe 	.word	0xdfbffffe

0800c510 <_fflush_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	690b      	ldr	r3, [r1, #16]
 800c514:	4605      	mov	r5, r0
 800c516:	460c      	mov	r4, r1
 800c518:	b913      	cbnz	r3, 800c520 <_fflush_r+0x10>
 800c51a:	2500      	movs	r5, #0
 800c51c:	4628      	mov	r0, r5
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	b118      	cbz	r0, 800c52a <_fflush_r+0x1a>
 800c522:	6a03      	ldr	r3, [r0, #32]
 800c524:	b90b      	cbnz	r3, 800c52a <_fflush_r+0x1a>
 800c526:	f7ff fcff 	bl	800bf28 <__sinit>
 800c52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0f3      	beq.n	800c51a <_fflush_r+0xa>
 800c532:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c534:	07d0      	lsls	r0, r2, #31
 800c536:	d404      	bmi.n	800c542 <_fflush_r+0x32>
 800c538:	0599      	lsls	r1, r3, #22
 800c53a:	d402      	bmi.n	800c542 <_fflush_r+0x32>
 800c53c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c53e:	f7ff fe42 	bl	800c1c6 <__retarget_lock_acquire_recursive>
 800c542:	4628      	mov	r0, r5
 800c544:	4621      	mov	r1, r4
 800c546:	f7ff ff5f 	bl	800c408 <__sflush_r>
 800c54a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c54c:	07da      	lsls	r2, r3, #31
 800c54e:	4605      	mov	r5, r0
 800c550:	d4e4      	bmi.n	800c51c <_fflush_r+0xc>
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	059b      	lsls	r3, r3, #22
 800c556:	d4e1      	bmi.n	800c51c <_fflush_r+0xc>
 800c558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c55a:	f7ff fe35 	bl	800c1c8 <__retarget_lock_release_recursive>
 800c55e:	e7dd      	b.n	800c51c <_fflush_r+0xc>

0800c560 <fiprintf>:
 800c560:	b40e      	push	{r1, r2, r3}
 800c562:	b503      	push	{r0, r1, lr}
 800c564:	4601      	mov	r1, r0
 800c566:	ab03      	add	r3, sp, #12
 800c568:	4805      	ldr	r0, [pc, #20]	@ (800c580 <fiprintf+0x20>)
 800c56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c56e:	6800      	ldr	r0, [r0, #0]
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	f000 f847 	bl	800c604 <_vfiprintf_r>
 800c576:	b002      	add	sp, #8
 800c578:	f85d eb04 	ldr.w	lr, [sp], #4
 800c57c:	b003      	add	sp, #12
 800c57e:	4770      	bx	lr
 800c580:	2400001c 	.word	0x2400001c

0800c584 <_sbrk_r>:
 800c584:	b538      	push	{r3, r4, r5, lr}
 800c586:	4d06      	ldr	r5, [pc, #24]	@ (800c5a0 <_sbrk_r+0x1c>)
 800c588:	2300      	movs	r3, #0
 800c58a:	4604      	mov	r4, r0
 800c58c:	4608      	mov	r0, r1
 800c58e:	602b      	str	r3, [r5, #0]
 800c590:	f7f5 f86c 	bl	800166c <_sbrk>
 800c594:	1c43      	adds	r3, r0, #1
 800c596:	d102      	bne.n	800c59e <_sbrk_r+0x1a>
 800c598:	682b      	ldr	r3, [r5, #0]
 800c59a:	b103      	cbz	r3, 800c59e <_sbrk_r+0x1a>
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	bd38      	pop	{r3, r4, r5, pc}
 800c5a0:	240005d8 	.word	0x240005d8

0800c5a4 <abort>:
 800c5a4:	b508      	push	{r3, lr}
 800c5a6:	2006      	movs	r0, #6
 800c5a8:	f000 fb8e 	bl	800ccc8 <raise>
 800c5ac:	2001      	movs	r0, #1
 800c5ae:	f7f4 ffe5 	bl	800157c <_exit>

0800c5b2 <__sfputc_r>:
 800c5b2:	6893      	ldr	r3, [r2, #8]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	b410      	push	{r4}
 800c5ba:	6093      	str	r3, [r2, #8]
 800c5bc:	da08      	bge.n	800c5d0 <__sfputc_r+0x1e>
 800c5be:	6994      	ldr	r4, [r2, #24]
 800c5c0:	42a3      	cmp	r3, r4
 800c5c2:	db01      	blt.n	800c5c8 <__sfputc_r+0x16>
 800c5c4:	290a      	cmp	r1, #10
 800c5c6:	d103      	bne.n	800c5d0 <__sfputc_r+0x1e>
 800c5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5cc:	f000 bac0 	b.w	800cb50 <__swbuf_r>
 800c5d0:	6813      	ldr	r3, [r2, #0]
 800c5d2:	1c58      	adds	r0, r3, #1
 800c5d4:	6010      	str	r0, [r2, #0]
 800c5d6:	7019      	strb	r1, [r3, #0]
 800c5d8:	4608      	mov	r0, r1
 800c5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <__sfputs_r>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	4614      	mov	r4, r2
 800c5e8:	18d5      	adds	r5, r2, r3
 800c5ea:	42ac      	cmp	r4, r5
 800c5ec:	d101      	bne.n	800c5f2 <__sfputs_r+0x12>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	e007      	b.n	800c602 <__sfputs_r+0x22>
 800c5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f6:	463a      	mov	r2, r7
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7ff ffda 	bl	800c5b2 <__sfputc_r>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	d1f3      	bne.n	800c5ea <__sfputs_r+0xa>
 800c602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c604 <_vfiprintf_r>:
 800c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c608:	460d      	mov	r5, r1
 800c60a:	b09d      	sub	sp, #116	@ 0x74
 800c60c:	4614      	mov	r4, r2
 800c60e:	4698      	mov	r8, r3
 800c610:	4606      	mov	r6, r0
 800c612:	b118      	cbz	r0, 800c61c <_vfiprintf_r+0x18>
 800c614:	6a03      	ldr	r3, [r0, #32]
 800c616:	b90b      	cbnz	r3, 800c61c <_vfiprintf_r+0x18>
 800c618:	f7ff fc86 	bl	800bf28 <__sinit>
 800c61c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c61e:	07d9      	lsls	r1, r3, #31
 800c620:	d405      	bmi.n	800c62e <_vfiprintf_r+0x2a>
 800c622:	89ab      	ldrh	r3, [r5, #12]
 800c624:	059a      	lsls	r2, r3, #22
 800c626:	d402      	bmi.n	800c62e <_vfiprintf_r+0x2a>
 800c628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c62a:	f7ff fdcc 	bl	800c1c6 <__retarget_lock_acquire_recursive>
 800c62e:	89ab      	ldrh	r3, [r5, #12]
 800c630:	071b      	lsls	r3, r3, #28
 800c632:	d501      	bpl.n	800c638 <_vfiprintf_r+0x34>
 800c634:	692b      	ldr	r3, [r5, #16]
 800c636:	b99b      	cbnz	r3, 800c660 <_vfiprintf_r+0x5c>
 800c638:	4629      	mov	r1, r5
 800c63a:	4630      	mov	r0, r6
 800c63c:	f000 fac6 	bl	800cbcc <__swsetup_r>
 800c640:	b170      	cbz	r0, 800c660 <_vfiprintf_r+0x5c>
 800c642:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c644:	07dc      	lsls	r4, r3, #31
 800c646:	d504      	bpl.n	800c652 <_vfiprintf_r+0x4e>
 800c648:	f04f 30ff 	mov.w	r0, #4294967295
 800c64c:	b01d      	add	sp, #116	@ 0x74
 800c64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c652:	89ab      	ldrh	r3, [r5, #12]
 800c654:	0598      	lsls	r0, r3, #22
 800c656:	d4f7      	bmi.n	800c648 <_vfiprintf_r+0x44>
 800c658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c65a:	f7ff fdb5 	bl	800c1c8 <__retarget_lock_release_recursive>
 800c65e:	e7f3      	b.n	800c648 <_vfiprintf_r+0x44>
 800c660:	2300      	movs	r3, #0
 800c662:	9309      	str	r3, [sp, #36]	@ 0x24
 800c664:	2320      	movs	r3, #32
 800c666:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c66a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c66e:	2330      	movs	r3, #48	@ 0x30
 800c670:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c820 <_vfiprintf_r+0x21c>
 800c674:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c678:	f04f 0901 	mov.w	r9, #1
 800c67c:	4623      	mov	r3, r4
 800c67e:	469a      	mov	sl, r3
 800c680:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c684:	b10a      	cbz	r2, 800c68a <_vfiprintf_r+0x86>
 800c686:	2a25      	cmp	r2, #37	@ 0x25
 800c688:	d1f9      	bne.n	800c67e <_vfiprintf_r+0x7a>
 800c68a:	ebba 0b04 	subs.w	fp, sl, r4
 800c68e:	d00b      	beq.n	800c6a8 <_vfiprintf_r+0xa4>
 800c690:	465b      	mov	r3, fp
 800c692:	4622      	mov	r2, r4
 800c694:	4629      	mov	r1, r5
 800c696:	4630      	mov	r0, r6
 800c698:	f7ff ffa2 	bl	800c5e0 <__sfputs_r>
 800c69c:	3001      	adds	r0, #1
 800c69e:	f000 80a7 	beq.w	800c7f0 <_vfiprintf_r+0x1ec>
 800c6a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6a4:	445a      	add	r2, fp
 800c6a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 809f 	beq.w	800c7f0 <_vfiprintf_r+0x1ec>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6bc:	f10a 0a01 	add.w	sl, sl, #1
 800c6c0:	9304      	str	r3, [sp, #16]
 800c6c2:	9307      	str	r3, [sp, #28]
 800c6c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6ca:	4654      	mov	r4, sl
 800c6cc:	2205      	movs	r2, #5
 800c6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d2:	4853      	ldr	r0, [pc, #332]	@ (800c820 <_vfiprintf_r+0x21c>)
 800c6d4:	f7f3 fe1c 	bl	8000310 <memchr>
 800c6d8:	9a04      	ldr	r2, [sp, #16]
 800c6da:	b9d8      	cbnz	r0, 800c714 <_vfiprintf_r+0x110>
 800c6dc:	06d1      	lsls	r1, r2, #27
 800c6de:	bf44      	itt	mi
 800c6e0:	2320      	movmi	r3, #32
 800c6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6e6:	0713      	lsls	r3, r2, #28
 800c6e8:	bf44      	itt	mi
 800c6ea:	232b      	movmi	r3, #43	@ 0x2b
 800c6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6f6:	d015      	beq.n	800c724 <_vfiprintf_r+0x120>
 800c6f8:	9a07      	ldr	r2, [sp, #28]
 800c6fa:	4654      	mov	r4, sl
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f04f 0c0a 	mov.w	ip, #10
 800c702:	4621      	mov	r1, r4
 800c704:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c708:	3b30      	subs	r3, #48	@ 0x30
 800c70a:	2b09      	cmp	r3, #9
 800c70c:	d94b      	bls.n	800c7a6 <_vfiprintf_r+0x1a2>
 800c70e:	b1b0      	cbz	r0, 800c73e <_vfiprintf_r+0x13a>
 800c710:	9207      	str	r2, [sp, #28]
 800c712:	e014      	b.n	800c73e <_vfiprintf_r+0x13a>
 800c714:	eba0 0308 	sub.w	r3, r0, r8
 800c718:	fa09 f303 	lsl.w	r3, r9, r3
 800c71c:	4313      	orrs	r3, r2
 800c71e:	9304      	str	r3, [sp, #16]
 800c720:	46a2      	mov	sl, r4
 800c722:	e7d2      	b.n	800c6ca <_vfiprintf_r+0xc6>
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	1d19      	adds	r1, r3, #4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	9103      	str	r1, [sp, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	bfbb      	ittet	lt
 800c730:	425b      	neglt	r3, r3
 800c732:	f042 0202 	orrlt.w	r2, r2, #2
 800c736:	9307      	strge	r3, [sp, #28]
 800c738:	9307      	strlt	r3, [sp, #28]
 800c73a:	bfb8      	it	lt
 800c73c:	9204      	strlt	r2, [sp, #16]
 800c73e:	7823      	ldrb	r3, [r4, #0]
 800c740:	2b2e      	cmp	r3, #46	@ 0x2e
 800c742:	d10a      	bne.n	800c75a <_vfiprintf_r+0x156>
 800c744:	7863      	ldrb	r3, [r4, #1]
 800c746:	2b2a      	cmp	r3, #42	@ 0x2a
 800c748:	d132      	bne.n	800c7b0 <_vfiprintf_r+0x1ac>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	1d1a      	adds	r2, r3, #4
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	9203      	str	r2, [sp, #12]
 800c752:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c756:	3402      	adds	r4, #2
 800c758:	9305      	str	r3, [sp, #20]
 800c75a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c830 <_vfiprintf_r+0x22c>
 800c75e:	7821      	ldrb	r1, [r4, #0]
 800c760:	2203      	movs	r2, #3
 800c762:	4650      	mov	r0, sl
 800c764:	f7f3 fdd4 	bl	8000310 <memchr>
 800c768:	b138      	cbz	r0, 800c77a <_vfiprintf_r+0x176>
 800c76a:	9b04      	ldr	r3, [sp, #16]
 800c76c:	eba0 000a 	sub.w	r0, r0, sl
 800c770:	2240      	movs	r2, #64	@ 0x40
 800c772:	4082      	lsls	r2, r0
 800c774:	4313      	orrs	r3, r2
 800c776:	3401      	adds	r4, #1
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77e:	4829      	ldr	r0, [pc, #164]	@ (800c824 <_vfiprintf_r+0x220>)
 800c780:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c784:	2206      	movs	r2, #6
 800c786:	f7f3 fdc3 	bl	8000310 <memchr>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d03f      	beq.n	800c80e <_vfiprintf_r+0x20a>
 800c78e:	4b26      	ldr	r3, [pc, #152]	@ (800c828 <_vfiprintf_r+0x224>)
 800c790:	bb1b      	cbnz	r3, 800c7da <_vfiprintf_r+0x1d6>
 800c792:	9b03      	ldr	r3, [sp, #12]
 800c794:	3307      	adds	r3, #7
 800c796:	f023 0307 	bic.w	r3, r3, #7
 800c79a:	3308      	adds	r3, #8
 800c79c:	9303      	str	r3, [sp, #12]
 800c79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7a0:	443b      	add	r3, r7
 800c7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a4:	e76a      	b.n	800c67c <_vfiprintf_r+0x78>
 800c7a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	e7a8      	b.n	800c702 <_vfiprintf_r+0xfe>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	3401      	adds	r4, #1
 800c7b4:	9305      	str	r3, [sp, #20]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	f04f 0c0a 	mov.w	ip, #10
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7c2:	3a30      	subs	r2, #48	@ 0x30
 800c7c4:	2a09      	cmp	r2, #9
 800c7c6:	d903      	bls.n	800c7d0 <_vfiprintf_r+0x1cc>
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d0c6      	beq.n	800c75a <_vfiprintf_r+0x156>
 800c7cc:	9105      	str	r1, [sp, #20]
 800c7ce:	e7c4      	b.n	800c75a <_vfiprintf_r+0x156>
 800c7d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e7f0      	b.n	800c7bc <_vfiprintf_r+0x1b8>
 800c7da:	ab03      	add	r3, sp, #12
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	462a      	mov	r2, r5
 800c7e0:	4b12      	ldr	r3, [pc, #72]	@ (800c82c <_vfiprintf_r+0x228>)
 800c7e2:	a904      	add	r1, sp, #16
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	f3af 8000 	nop.w
 800c7ea:	4607      	mov	r7, r0
 800c7ec:	1c78      	adds	r0, r7, #1
 800c7ee:	d1d6      	bne.n	800c79e <_vfiprintf_r+0x19a>
 800c7f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7f2:	07d9      	lsls	r1, r3, #31
 800c7f4:	d405      	bmi.n	800c802 <_vfiprintf_r+0x1fe>
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	059a      	lsls	r2, r3, #22
 800c7fa:	d402      	bmi.n	800c802 <_vfiprintf_r+0x1fe>
 800c7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7fe:	f7ff fce3 	bl	800c1c8 <__retarget_lock_release_recursive>
 800c802:	89ab      	ldrh	r3, [r5, #12]
 800c804:	065b      	lsls	r3, r3, #25
 800c806:	f53f af1f 	bmi.w	800c648 <_vfiprintf_r+0x44>
 800c80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c80c:	e71e      	b.n	800c64c <_vfiprintf_r+0x48>
 800c80e:	ab03      	add	r3, sp, #12
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	462a      	mov	r2, r5
 800c814:	4b05      	ldr	r3, [pc, #20]	@ (800c82c <_vfiprintf_r+0x228>)
 800c816:	a904      	add	r1, sp, #16
 800c818:	4630      	mov	r0, r6
 800c81a:	f000 f879 	bl	800c910 <_printf_i>
 800c81e:	e7e4      	b.n	800c7ea <_vfiprintf_r+0x1e6>
 800c820:	0800dc32 	.word	0x0800dc32
 800c824:	0800dc3c 	.word	0x0800dc3c
 800c828:	00000000 	.word	0x00000000
 800c82c:	0800c5e1 	.word	0x0800c5e1
 800c830:	0800dc38 	.word	0x0800dc38

0800c834 <_printf_common>:
 800c834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c838:	4616      	mov	r6, r2
 800c83a:	4698      	mov	r8, r3
 800c83c:	688a      	ldr	r2, [r1, #8]
 800c83e:	690b      	ldr	r3, [r1, #16]
 800c840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c844:	4293      	cmp	r3, r2
 800c846:	bfb8      	it	lt
 800c848:	4613      	movlt	r3, r2
 800c84a:	6033      	str	r3, [r6, #0]
 800c84c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c850:	4607      	mov	r7, r0
 800c852:	460c      	mov	r4, r1
 800c854:	b10a      	cbz	r2, 800c85a <_printf_common+0x26>
 800c856:	3301      	adds	r3, #1
 800c858:	6033      	str	r3, [r6, #0]
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	0699      	lsls	r1, r3, #26
 800c85e:	bf42      	ittt	mi
 800c860:	6833      	ldrmi	r3, [r6, #0]
 800c862:	3302      	addmi	r3, #2
 800c864:	6033      	strmi	r3, [r6, #0]
 800c866:	6825      	ldr	r5, [r4, #0]
 800c868:	f015 0506 	ands.w	r5, r5, #6
 800c86c:	d106      	bne.n	800c87c <_printf_common+0x48>
 800c86e:	f104 0a19 	add.w	sl, r4, #25
 800c872:	68e3      	ldr	r3, [r4, #12]
 800c874:	6832      	ldr	r2, [r6, #0]
 800c876:	1a9b      	subs	r3, r3, r2
 800c878:	42ab      	cmp	r3, r5
 800c87a:	dc26      	bgt.n	800c8ca <_printf_common+0x96>
 800c87c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c880:	6822      	ldr	r2, [r4, #0]
 800c882:	3b00      	subs	r3, #0
 800c884:	bf18      	it	ne
 800c886:	2301      	movne	r3, #1
 800c888:	0692      	lsls	r2, r2, #26
 800c88a:	d42b      	bmi.n	800c8e4 <_printf_common+0xb0>
 800c88c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c890:	4641      	mov	r1, r8
 800c892:	4638      	mov	r0, r7
 800c894:	47c8      	blx	r9
 800c896:	3001      	adds	r0, #1
 800c898:	d01e      	beq.n	800c8d8 <_printf_common+0xa4>
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	6922      	ldr	r2, [r4, #16]
 800c89e:	f003 0306 	and.w	r3, r3, #6
 800c8a2:	2b04      	cmp	r3, #4
 800c8a4:	bf02      	ittt	eq
 800c8a6:	68e5      	ldreq	r5, [r4, #12]
 800c8a8:	6833      	ldreq	r3, [r6, #0]
 800c8aa:	1aed      	subeq	r5, r5, r3
 800c8ac:	68a3      	ldr	r3, [r4, #8]
 800c8ae:	bf0c      	ite	eq
 800c8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8b4:	2500      	movne	r5, #0
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	bfc4      	itt	gt
 800c8ba:	1a9b      	subgt	r3, r3, r2
 800c8bc:	18ed      	addgt	r5, r5, r3
 800c8be:	2600      	movs	r6, #0
 800c8c0:	341a      	adds	r4, #26
 800c8c2:	42b5      	cmp	r5, r6
 800c8c4:	d11a      	bne.n	800c8fc <_printf_common+0xc8>
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	e008      	b.n	800c8dc <_printf_common+0xa8>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	4652      	mov	r2, sl
 800c8ce:	4641      	mov	r1, r8
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	47c8      	blx	r9
 800c8d4:	3001      	adds	r0, #1
 800c8d6:	d103      	bne.n	800c8e0 <_printf_common+0xac>
 800c8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e0:	3501      	adds	r5, #1
 800c8e2:	e7c6      	b.n	800c872 <_printf_common+0x3e>
 800c8e4:	18e1      	adds	r1, r4, r3
 800c8e6:	1c5a      	adds	r2, r3, #1
 800c8e8:	2030      	movs	r0, #48	@ 0x30
 800c8ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c8ee:	4422      	add	r2, r4
 800c8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c8f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c8f8:	3302      	adds	r3, #2
 800c8fa:	e7c7      	b.n	800c88c <_printf_common+0x58>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	4622      	mov	r2, r4
 800c900:	4641      	mov	r1, r8
 800c902:	4638      	mov	r0, r7
 800c904:	47c8      	blx	r9
 800c906:	3001      	adds	r0, #1
 800c908:	d0e6      	beq.n	800c8d8 <_printf_common+0xa4>
 800c90a:	3601      	adds	r6, #1
 800c90c:	e7d9      	b.n	800c8c2 <_printf_common+0x8e>
	...

0800c910 <_printf_i>:
 800c910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c914:	7e0f      	ldrb	r7, [r1, #24]
 800c916:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c918:	2f78      	cmp	r7, #120	@ 0x78
 800c91a:	4691      	mov	r9, r2
 800c91c:	4680      	mov	r8, r0
 800c91e:	460c      	mov	r4, r1
 800c920:	469a      	mov	sl, r3
 800c922:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c926:	d807      	bhi.n	800c938 <_printf_i+0x28>
 800c928:	2f62      	cmp	r7, #98	@ 0x62
 800c92a:	d80a      	bhi.n	800c942 <_printf_i+0x32>
 800c92c:	2f00      	cmp	r7, #0
 800c92e:	f000 80d2 	beq.w	800cad6 <_printf_i+0x1c6>
 800c932:	2f58      	cmp	r7, #88	@ 0x58
 800c934:	f000 80b9 	beq.w	800caaa <_printf_i+0x19a>
 800c938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c93c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c940:	e03a      	b.n	800c9b8 <_printf_i+0xa8>
 800c942:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c946:	2b15      	cmp	r3, #21
 800c948:	d8f6      	bhi.n	800c938 <_printf_i+0x28>
 800c94a:	a101      	add	r1, pc, #4	@ (adr r1, 800c950 <_printf_i+0x40>)
 800c94c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c950:	0800c9a9 	.word	0x0800c9a9
 800c954:	0800c9bd 	.word	0x0800c9bd
 800c958:	0800c939 	.word	0x0800c939
 800c95c:	0800c939 	.word	0x0800c939
 800c960:	0800c939 	.word	0x0800c939
 800c964:	0800c939 	.word	0x0800c939
 800c968:	0800c9bd 	.word	0x0800c9bd
 800c96c:	0800c939 	.word	0x0800c939
 800c970:	0800c939 	.word	0x0800c939
 800c974:	0800c939 	.word	0x0800c939
 800c978:	0800c939 	.word	0x0800c939
 800c97c:	0800cabd 	.word	0x0800cabd
 800c980:	0800c9e7 	.word	0x0800c9e7
 800c984:	0800ca77 	.word	0x0800ca77
 800c988:	0800c939 	.word	0x0800c939
 800c98c:	0800c939 	.word	0x0800c939
 800c990:	0800cadf 	.word	0x0800cadf
 800c994:	0800c939 	.word	0x0800c939
 800c998:	0800c9e7 	.word	0x0800c9e7
 800c99c:	0800c939 	.word	0x0800c939
 800c9a0:	0800c939 	.word	0x0800c939
 800c9a4:	0800ca7f 	.word	0x0800ca7f
 800c9a8:	6833      	ldr	r3, [r6, #0]
 800c9aa:	1d1a      	adds	r2, r3, #4
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6032      	str	r2, [r6, #0]
 800c9b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e09d      	b.n	800caf8 <_printf_i+0x1e8>
 800c9bc:	6833      	ldr	r3, [r6, #0]
 800c9be:	6820      	ldr	r0, [r4, #0]
 800c9c0:	1d19      	adds	r1, r3, #4
 800c9c2:	6031      	str	r1, [r6, #0]
 800c9c4:	0606      	lsls	r6, r0, #24
 800c9c6:	d501      	bpl.n	800c9cc <_printf_i+0xbc>
 800c9c8:	681d      	ldr	r5, [r3, #0]
 800c9ca:	e003      	b.n	800c9d4 <_printf_i+0xc4>
 800c9cc:	0645      	lsls	r5, r0, #25
 800c9ce:	d5fb      	bpl.n	800c9c8 <_printf_i+0xb8>
 800c9d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c9d4:	2d00      	cmp	r5, #0
 800c9d6:	da03      	bge.n	800c9e0 <_printf_i+0xd0>
 800c9d8:	232d      	movs	r3, #45	@ 0x2d
 800c9da:	426d      	negs	r5, r5
 800c9dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9e0:	4859      	ldr	r0, [pc, #356]	@ (800cb48 <_printf_i+0x238>)
 800c9e2:	230a      	movs	r3, #10
 800c9e4:	e011      	b.n	800ca0a <_printf_i+0xfa>
 800c9e6:	6821      	ldr	r1, [r4, #0]
 800c9e8:	6833      	ldr	r3, [r6, #0]
 800c9ea:	0608      	lsls	r0, r1, #24
 800c9ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800c9f0:	d402      	bmi.n	800c9f8 <_printf_i+0xe8>
 800c9f2:	0649      	lsls	r1, r1, #25
 800c9f4:	bf48      	it	mi
 800c9f6:	b2ad      	uxthmi	r5, r5
 800c9f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c9fa:	4853      	ldr	r0, [pc, #332]	@ (800cb48 <_printf_i+0x238>)
 800c9fc:	6033      	str	r3, [r6, #0]
 800c9fe:	bf14      	ite	ne
 800ca00:	230a      	movne	r3, #10
 800ca02:	2308      	moveq	r3, #8
 800ca04:	2100      	movs	r1, #0
 800ca06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca0a:	6866      	ldr	r6, [r4, #4]
 800ca0c:	60a6      	str	r6, [r4, #8]
 800ca0e:	2e00      	cmp	r6, #0
 800ca10:	bfa2      	ittt	ge
 800ca12:	6821      	ldrge	r1, [r4, #0]
 800ca14:	f021 0104 	bicge.w	r1, r1, #4
 800ca18:	6021      	strge	r1, [r4, #0]
 800ca1a:	b90d      	cbnz	r5, 800ca20 <_printf_i+0x110>
 800ca1c:	2e00      	cmp	r6, #0
 800ca1e:	d04b      	beq.n	800cab8 <_printf_i+0x1a8>
 800ca20:	4616      	mov	r6, r2
 800ca22:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca26:	fb03 5711 	mls	r7, r3, r1, r5
 800ca2a:	5dc7      	ldrb	r7, [r0, r7]
 800ca2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca30:	462f      	mov	r7, r5
 800ca32:	42bb      	cmp	r3, r7
 800ca34:	460d      	mov	r5, r1
 800ca36:	d9f4      	bls.n	800ca22 <_printf_i+0x112>
 800ca38:	2b08      	cmp	r3, #8
 800ca3a:	d10b      	bne.n	800ca54 <_printf_i+0x144>
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	07df      	lsls	r7, r3, #31
 800ca40:	d508      	bpl.n	800ca54 <_printf_i+0x144>
 800ca42:	6923      	ldr	r3, [r4, #16]
 800ca44:	6861      	ldr	r1, [r4, #4]
 800ca46:	4299      	cmp	r1, r3
 800ca48:	bfde      	ittt	le
 800ca4a:	2330      	movle	r3, #48	@ 0x30
 800ca4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca50:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca54:	1b92      	subs	r2, r2, r6
 800ca56:	6122      	str	r2, [r4, #16]
 800ca58:	f8cd a000 	str.w	sl, [sp]
 800ca5c:	464b      	mov	r3, r9
 800ca5e:	aa03      	add	r2, sp, #12
 800ca60:	4621      	mov	r1, r4
 800ca62:	4640      	mov	r0, r8
 800ca64:	f7ff fee6 	bl	800c834 <_printf_common>
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d14a      	bne.n	800cb02 <_printf_i+0x1f2>
 800ca6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca70:	b004      	add	sp, #16
 800ca72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	f043 0320 	orr.w	r3, r3, #32
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	4833      	ldr	r0, [pc, #204]	@ (800cb4c <_printf_i+0x23c>)
 800ca80:	2778      	movs	r7, #120	@ 0x78
 800ca82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	6831      	ldr	r1, [r6, #0]
 800ca8a:	061f      	lsls	r7, r3, #24
 800ca8c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca90:	d402      	bmi.n	800ca98 <_printf_i+0x188>
 800ca92:	065f      	lsls	r7, r3, #25
 800ca94:	bf48      	it	mi
 800ca96:	b2ad      	uxthmi	r5, r5
 800ca98:	6031      	str	r1, [r6, #0]
 800ca9a:	07d9      	lsls	r1, r3, #31
 800ca9c:	bf44      	itt	mi
 800ca9e:	f043 0320 	orrmi.w	r3, r3, #32
 800caa2:	6023      	strmi	r3, [r4, #0]
 800caa4:	b11d      	cbz	r5, 800caae <_printf_i+0x19e>
 800caa6:	2310      	movs	r3, #16
 800caa8:	e7ac      	b.n	800ca04 <_printf_i+0xf4>
 800caaa:	4827      	ldr	r0, [pc, #156]	@ (800cb48 <_printf_i+0x238>)
 800caac:	e7e9      	b.n	800ca82 <_printf_i+0x172>
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	f023 0320 	bic.w	r3, r3, #32
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	e7f6      	b.n	800caa6 <_printf_i+0x196>
 800cab8:	4616      	mov	r6, r2
 800caba:	e7bd      	b.n	800ca38 <_printf_i+0x128>
 800cabc:	6833      	ldr	r3, [r6, #0]
 800cabe:	6825      	ldr	r5, [r4, #0]
 800cac0:	6961      	ldr	r1, [r4, #20]
 800cac2:	1d18      	adds	r0, r3, #4
 800cac4:	6030      	str	r0, [r6, #0]
 800cac6:	062e      	lsls	r6, r5, #24
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	d501      	bpl.n	800cad0 <_printf_i+0x1c0>
 800cacc:	6019      	str	r1, [r3, #0]
 800cace:	e002      	b.n	800cad6 <_printf_i+0x1c6>
 800cad0:	0668      	lsls	r0, r5, #25
 800cad2:	d5fb      	bpl.n	800cacc <_printf_i+0x1bc>
 800cad4:	8019      	strh	r1, [r3, #0]
 800cad6:	2300      	movs	r3, #0
 800cad8:	6123      	str	r3, [r4, #16]
 800cada:	4616      	mov	r6, r2
 800cadc:	e7bc      	b.n	800ca58 <_printf_i+0x148>
 800cade:	6833      	ldr	r3, [r6, #0]
 800cae0:	1d1a      	adds	r2, r3, #4
 800cae2:	6032      	str	r2, [r6, #0]
 800cae4:	681e      	ldr	r6, [r3, #0]
 800cae6:	6862      	ldr	r2, [r4, #4]
 800cae8:	2100      	movs	r1, #0
 800caea:	4630      	mov	r0, r6
 800caec:	f7f3 fc10 	bl	8000310 <memchr>
 800caf0:	b108      	cbz	r0, 800caf6 <_printf_i+0x1e6>
 800caf2:	1b80      	subs	r0, r0, r6
 800caf4:	6060      	str	r0, [r4, #4]
 800caf6:	6863      	ldr	r3, [r4, #4]
 800caf8:	6123      	str	r3, [r4, #16]
 800cafa:	2300      	movs	r3, #0
 800cafc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb00:	e7aa      	b.n	800ca58 <_printf_i+0x148>
 800cb02:	6923      	ldr	r3, [r4, #16]
 800cb04:	4632      	mov	r2, r6
 800cb06:	4649      	mov	r1, r9
 800cb08:	4640      	mov	r0, r8
 800cb0a:	47d0      	blx	sl
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d0ad      	beq.n	800ca6c <_printf_i+0x15c>
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	079b      	lsls	r3, r3, #30
 800cb14:	d413      	bmi.n	800cb3e <_printf_i+0x22e>
 800cb16:	68e0      	ldr	r0, [r4, #12]
 800cb18:	9b03      	ldr	r3, [sp, #12]
 800cb1a:	4298      	cmp	r0, r3
 800cb1c:	bfb8      	it	lt
 800cb1e:	4618      	movlt	r0, r3
 800cb20:	e7a6      	b.n	800ca70 <_printf_i+0x160>
 800cb22:	2301      	movs	r3, #1
 800cb24:	4632      	mov	r2, r6
 800cb26:	4649      	mov	r1, r9
 800cb28:	4640      	mov	r0, r8
 800cb2a:	47d0      	blx	sl
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	d09d      	beq.n	800ca6c <_printf_i+0x15c>
 800cb30:	3501      	adds	r5, #1
 800cb32:	68e3      	ldr	r3, [r4, #12]
 800cb34:	9903      	ldr	r1, [sp, #12]
 800cb36:	1a5b      	subs	r3, r3, r1
 800cb38:	42ab      	cmp	r3, r5
 800cb3a:	dcf2      	bgt.n	800cb22 <_printf_i+0x212>
 800cb3c:	e7eb      	b.n	800cb16 <_printf_i+0x206>
 800cb3e:	2500      	movs	r5, #0
 800cb40:	f104 0619 	add.w	r6, r4, #25
 800cb44:	e7f5      	b.n	800cb32 <_printf_i+0x222>
 800cb46:	bf00      	nop
 800cb48:	0800dc43 	.word	0x0800dc43
 800cb4c:	0800dc54 	.word	0x0800dc54

0800cb50 <__swbuf_r>:
 800cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb52:	460e      	mov	r6, r1
 800cb54:	4614      	mov	r4, r2
 800cb56:	4605      	mov	r5, r0
 800cb58:	b118      	cbz	r0, 800cb62 <__swbuf_r+0x12>
 800cb5a:	6a03      	ldr	r3, [r0, #32]
 800cb5c:	b90b      	cbnz	r3, 800cb62 <__swbuf_r+0x12>
 800cb5e:	f7ff f9e3 	bl	800bf28 <__sinit>
 800cb62:	69a3      	ldr	r3, [r4, #24]
 800cb64:	60a3      	str	r3, [r4, #8]
 800cb66:	89a3      	ldrh	r3, [r4, #12]
 800cb68:	071a      	lsls	r2, r3, #28
 800cb6a:	d501      	bpl.n	800cb70 <__swbuf_r+0x20>
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	b943      	cbnz	r3, 800cb82 <__swbuf_r+0x32>
 800cb70:	4621      	mov	r1, r4
 800cb72:	4628      	mov	r0, r5
 800cb74:	f000 f82a 	bl	800cbcc <__swsetup_r>
 800cb78:	b118      	cbz	r0, 800cb82 <__swbuf_r+0x32>
 800cb7a:	f04f 37ff 	mov.w	r7, #4294967295
 800cb7e:	4638      	mov	r0, r7
 800cb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	6922      	ldr	r2, [r4, #16]
 800cb86:	1a98      	subs	r0, r3, r2
 800cb88:	6963      	ldr	r3, [r4, #20]
 800cb8a:	b2f6      	uxtb	r6, r6
 800cb8c:	4283      	cmp	r3, r0
 800cb8e:	4637      	mov	r7, r6
 800cb90:	dc05      	bgt.n	800cb9e <__swbuf_r+0x4e>
 800cb92:	4621      	mov	r1, r4
 800cb94:	4628      	mov	r0, r5
 800cb96:	f7ff fcbb 	bl	800c510 <_fflush_r>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d1ed      	bne.n	800cb7a <__swbuf_r+0x2a>
 800cb9e:	68a3      	ldr	r3, [r4, #8]
 800cba0:	3b01      	subs	r3, #1
 800cba2:	60a3      	str	r3, [r4, #8]
 800cba4:	6823      	ldr	r3, [r4, #0]
 800cba6:	1c5a      	adds	r2, r3, #1
 800cba8:	6022      	str	r2, [r4, #0]
 800cbaa:	701e      	strb	r6, [r3, #0]
 800cbac:	6962      	ldr	r2, [r4, #20]
 800cbae:	1c43      	adds	r3, r0, #1
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d004      	beq.n	800cbbe <__swbuf_r+0x6e>
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	07db      	lsls	r3, r3, #31
 800cbb8:	d5e1      	bpl.n	800cb7e <__swbuf_r+0x2e>
 800cbba:	2e0a      	cmp	r6, #10
 800cbbc:	d1df      	bne.n	800cb7e <__swbuf_r+0x2e>
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f7ff fca5 	bl	800c510 <_fflush_r>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0d9      	beq.n	800cb7e <__swbuf_r+0x2e>
 800cbca:	e7d6      	b.n	800cb7a <__swbuf_r+0x2a>

0800cbcc <__swsetup_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4b29      	ldr	r3, [pc, #164]	@ (800cc74 <__swsetup_r+0xa8>)
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	6818      	ldr	r0, [r3, #0]
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	b118      	cbz	r0, 800cbe0 <__swsetup_r+0x14>
 800cbd8:	6a03      	ldr	r3, [r0, #32]
 800cbda:	b90b      	cbnz	r3, 800cbe0 <__swsetup_r+0x14>
 800cbdc:	f7ff f9a4 	bl	800bf28 <__sinit>
 800cbe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe4:	0719      	lsls	r1, r3, #28
 800cbe6:	d422      	bmi.n	800cc2e <__swsetup_r+0x62>
 800cbe8:	06da      	lsls	r2, r3, #27
 800cbea:	d407      	bmi.n	800cbfc <__swsetup_r+0x30>
 800cbec:	2209      	movs	r2, #9
 800cbee:	602a      	str	r2, [r5, #0]
 800cbf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfa:	e033      	b.n	800cc64 <__swsetup_r+0x98>
 800cbfc:	0758      	lsls	r0, r3, #29
 800cbfe:	d512      	bpl.n	800cc26 <__swsetup_r+0x5a>
 800cc00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc02:	b141      	cbz	r1, 800cc16 <__swsetup_r+0x4a>
 800cc04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc08:	4299      	cmp	r1, r3
 800cc0a:	d002      	beq.n	800cc12 <__swsetup_r+0x46>
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f7ff fafb 	bl	800c208 <_free_r>
 800cc12:	2300      	movs	r3, #0
 800cc14:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc16:	89a3      	ldrh	r3, [r4, #12]
 800cc18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc1c:	81a3      	strh	r3, [r4, #12]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	6063      	str	r3, [r4, #4]
 800cc22:	6923      	ldr	r3, [r4, #16]
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	f043 0308 	orr.w	r3, r3, #8
 800cc2c:	81a3      	strh	r3, [r4, #12]
 800cc2e:	6923      	ldr	r3, [r4, #16]
 800cc30:	b94b      	cbnz	r3, 800cc46 <__swsetup_r+0x7a>
 800cc32:	89a3      	ldrh	r3, [r4, #12]
 800cc34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc3c:	d003      	beq.n	800cc46 <__swsetup_r+0x7a>
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4628      	mov	r0, r5
 800cc42:	f000 f883 	bl	800cd4c <__smakebuf_r>
 800cc46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc4a:	f013 0201 	ands.w	r2, r3, #1
 800cc4e:	d00a      	beq.n	800cc66 <__swsetup_r+0x9a>
 800cc50:	2200      	movs	r2, #0
 800cc52:	60a2      	str	r2, [r4, #8]
 800cc54:	6962      	ldr	r2, [r4, #20]
 800cc56:	4252      	negs	r2, r2
 800cc58:	61a2      	str	r2, [r4, #24]
 800cc5a:	6922      	ldr	r2, [r4, #16]
 800cc5c:	b942      	cbnz	r2, 800cc70 <__swsetup_r+0xa4>
 800cc5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc62:	d1c5      	bne.n	800cbf0 <__swsetup_r+0x24>
 800cc64:	bd38      	pop	{r3, r4, r5, pc}
 800cc66:	0799      	lsls	r1, r3, #30
 800cc68:	bf58      	it	pl
 800cc6a:	6962      	ldrpl	r2, [r4, #20]
 800cc6c:	60a2      	str	r2, [r4, #8]
 800cc6e:	e7f4      	b.n	800cc5a <__swsetup_r+0x8e>
 800cc70:	2000      	movs	r0, #0
 800cc72:	e7f7      	b.n	800cc64 <__swsetup_r+0x98>
 800cc74:	2400001c 	.word	0x2400001c

0800cc78 <_raise_r>:
 800cc78:	291f      	cmp	r1, #31
 800cc7a:	b538      	push	{r3, r4, r5, lr}
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	460c      	mov	r4, r1
 800cc80:	d904      	bls.n	800cc8c <_raise_r+0x14>
 800cc82:	2316      	movs	r3, #22
 800cc84:	6003      	str	r3, [r0, #0]
 800cc86:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc8e:	b112      	cbz	r2, 800cc96 <_raise_r+0x1e>
 800cc90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc94:	b94b      	cbnz	r3, 800ccaa <_raise_r+0x32>
 800cc96:	4628      	mov	r0, r5
 800cc98:	f000 f830 	bl	800ccfc <_getpid_r>
 800cc9c:	4622      	mov	r2, r4
 800cc9e:	4601      	mov	r1, r0
 800cca0:	4628      	mov	r0, r5
 800cca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cca6:	f000 b817 	b.w	800ccd8 <_kill_r>
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d00a      	beq.n	800ccc4 <_raise_r+0x4c>
 800ccae:	1c59      	adds	r1, r3, #1
 800ccb0:	d103      	bne.n	800ccba <_raise_r+0x42>
 800ccb2:	2316      	movs	r3, #22
 800ccb4:	6003      	str	r3, [r0, #0]
 800ccb6:	2001      	movs	r0, #1
 800ccb8:	e7e7      	b.n	800cc8a <_raise_r+0x12>
 800ccba:	2100      	movs	r1, #0
 800ccbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	4798      	blx	r3
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	e7e0      	b.n	800cc8a <_raise_r+0x12>

0800ccc8 <raise>:
 800ccc8:	4b02      	ldr	r3, [pc, #8]	@ (800ccd4 <raise+0xc>)
 800ccca:	4601      	mov	r1, r0
 800cccc:	6818      	ldr	r0, [r3, #0]
 800ccce:	f7ff bfd3 	b.w	800cc78 <_raise_r>
 800ccd2:	bf00      	nop
 800ccd4:	2400001c 	.word	0x2400001c

0800ccd8 <_kill_r>:
 800ccd8:	b538      	push	{r3, r4, r5, lr}
 800ccda:	4d07      	ldr	r5, [pc, #28]	@ (800ccf8 <_kill_r+0x20>)
 800ccdc:	2300      	movs	r3, #0
 800ccde:	4604      	mov	r4, r0
 800cce0:	4608      	mov	r0, r1
 800cce2:	4611      	mov	r1, r2
 800cce4:	602b      	str	r3, [r5, #0]
 800cce6:	f7f4 fc39 	bl	800155c <_kill>
 800ccea:	1c43      	adds	r3, r0, #1
 800ccec:	d102      	bne.n	800ccf4 <_kill_r+0x1c>
 800ccee:	682b      	ldr	r3, [r5, #0]
 800ccf0:	b103      	cbz	r3, 800ccf4 <_kill_r+0x1c>
 800ccf2:	6023      	str	r3, [r4, #0]
 800ccf4:	bd38      	pop	{r3, r4, r5, pc}
 800ccf6:	bf00      	nop
 800ccf8:	240005d8 	.word	0x240005d8

0800ccfc <_getpid_r>:
 800ccfc:	f7f4 bc26 	b.w	800154c <_getpid>

0800cd00 <__swhatbuf_r>:
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	460c      	mov	r4, r1
 800cd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd08:	2900      	cmp	r1, #0
 800cd0a:	b096      	sub	sp, #88	@ 0x58
 800cd0c:	4615      	mov	r5, r2
 800cd0e:	461e      	mov	r6, r3
 800cd10:	da0d      	bge.n	800cd2e <__swhatbuf_r+0x2e>
 800cd12:	89a3      	ldrh	r3, [r4, #12]
 800cd14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd18:	f04f 0100 	mov.w	r1, #0
 800cd1c:	bf14      	ite	ne
 800cd1e:	2340      	movne	r3, #64	@ 0x40
 800cd20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd24:	2000      	movs	r0, #0
 800cd26:	6031      	str	r1, [r6, #0]
 800cd28:	602b      	str	r3, [r5, #0]
 800cd2a:	b016      	add	sp, #88	@ 0x58
 800cd2c:	bd70      	pop	{r4, r5, r6, pc}
 800cd2e:	466a      	mov	r2, sp
 800cd30:	f000 f848 	bl	800cdc4 <_fstat_r>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	dbec      	blt.n	800cd12 <__swhatbuf_r+0x12>
 800cd38:	9901      	ldr	r1, [sp, #4]
 800cd3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd42:	4259      	negs	r1, r3
 800cd44:	4159      	adcs	r1, r3
 800cd46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd4a:	e7eb      	b.n	800cd24 <__swhatbuf_r+0x24>

0800cd4c <__smakebuf_r>:
 800cd4c:	898b      	ldrh	r3, [r1, #12]
 800cd4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd50:	079d      	lsls	r5, r3, #30
 800cd52:	4606      	mov	r6, r0
 800cd54:	460c      	mov	r4, r1
 800cd56:	d507      	bpl.n	800cd68 <__smakebuf_r+0x1c>
 800cd58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	6123      	str	r3, [r4, #16]
 800cd60:	2301      	movs	r3, #1
 800cd62:	6163      	str	r3, [r4, #20]
 800cd64:	b003      	add	sp, #12
 800cd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd68:	ab01      	add	r3, sp, #4
 800cd6a:	466a      	mov	r2, sp
 800cd6c:	f7ff ffc8 	bl	800cd00 <__swhatbuf_r>
 800cd70:	9f00      	ldr	r7, [sp, #0]
 800cd72:	4605      	mov	r5, r0
 800cd74:	4639      	mov	r1, r7
 800cd76:	4630      	mov	r0, r6
 800cd78:	f7ff faba 	bl	800c2f0 <_malloc_r>
 800cd7c:	b948      	cbnz	r0, 800cd92 <__smakebuf_r+0x46>
 800cd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd82:	059a      	lsls	r2, r3, #22
 800cd84:	d4ee      	bmi.n	800cd64 <__smakebuf_r+0x18>
 800cd86:	f023 0303 	bic.w	r3, r3, #3
 800cd8a:	f043 0302 	orr.w	r3, r3, #2
 800cd8e:	81a3      	strh	r3, [r4, #12]
 800cd90:	e7e2      	b.n	800cd58 <__smakebuf_r+0xc>
 800cd92:	89a3      	ldrh	r3, [r4, #12]
 800cd94:	6020      	str	r0, [r4, #0]
 800cd96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	9b01      	ldr	r3, [sp, #4]
 800cd9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cda2:	b15b      	cbz	r3, 800cdbc <__smakebuf_r+0x70>
 800cda4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f000 f81d 	bl	800cde8 <_isatty_r>
 800cdae:	b128      	cbz	r0, 800cdbc <__smakebuf_r+0x70>
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	f023 0303 	bic.w	r3, r3, #3
 800cdb6:	f043 0301 	orr.w	r3, r3, #1
 800cdba:	81a3      	strh	r3, [r4, #12]
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	431d      	orrs	r5, r3
 800cdc0:	81a5      	strh	r5, [r4, #12]
 800cdc2:	e7cf      	b.n	800cd64 <__smakebuf_r+0x18>

0800cdc4 <_fstat_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4d07      	ldr	r5, [pc, #28]	@ (800cde4 <_fstat_r+0x20>)
 800cdc8:	2300      	movs	r3, #0
 800cdca:	4604      	mov	r4, r0
 800cdcc:	4608      	mov	r0, r1
 800cdce:	4611      	mov	r1, r2
 800cdd0:	602b      	str	r3, [r5, #0]
 800cdd2:	f7f4 fc23 	bl	800161c <_fstat>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	d102      	bne.n	800cde0 <_fstat_r+0x1c>
 800cdda:	682b      	ldr	r3, [r5, #0]
 800cddc:	b103      	cbz	r3, 800cde0 <_fstat_r+0x1c>
 800cdde:	6023      	str	r3, [r4, #0]
 800cde0:	bd38      	pop	{r3, r4, r5, pc}
 800cde2:	bf00      	nop
 800cde4:	240005d8 	.word	0x240005d8

0800cde8 <_isatty_r>:
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	4d06      	ldr	r5, [pc, #24]	@ (800ce04 <_isatty_r+0x1c>)
 800cdec:	2300      	movs	r3, #0
 800cdee:	4604      	mov	r4, r0
 800cdf0:	4608      	mov	r0, r1
 800cdf2:	602b      	str	r3, [r5, #0]
 800cdf4:	f7f4 fc22 	bl	800163c <_isatty>
 800cdf8:	1c43      	adds	r3, r0, #1
 800cdfa:	d102      	bne.n	800ce02 <_isatty_r+0x1a>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	b103      	cbz	r3, 800ce02 <_isatty_r+0x1a>
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	bd38      	pop	{r3, r4, r5, pc}
 800ce04:	240005d8 	.word	0x240005d8

0800ce08 <tan>:
 800ce08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce0a:	eeb0 7b40 	vmov.f64	d7, d0
 800ce0e:	ee17 3a90 	vmov	r3, s15
 800ce12:	4a15      	ldr	r2, [pc, #84]	@ (800ce68 <tan+0x60>)
 800ce14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d807      	bhi.n	800ce2c <tan+0x24>
 800ce1c:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 800ce60 <tan+0x58>
 800ce20:	2001      	movs	r0, #1
 800ce22:	b005      	add	sp, #20
 800ce24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce28:	f000 b822 	b.w	800ce70 <__kernel_tan>
 800ce2c:	4a0f      	ldr	r2, [pc, #60]	@ (800ce6c <tan+0x64>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d904      	bls.n	800ce3c <tan+0x34>
 800ce32:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ce36:	b005      	add	sp, #20
 800ce38:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce3c:	4668      	mov	r0, sp
 800ce3e:	f000 f933 	bl	800d0a8 <__ieee754_rem_pio2>
 800ce42:	0040      	lsls	r0, r0, #1
 800ce44:	f000 0002 	and.w	r0, r0, #2
 800ce48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce4c:	ed9d 0b00 	vldr	d0, [sp]
 800ce50:	f1c0 0001 	rsb	r0, r0, #1
 800ce54:	f000 f80c 	bl	800ce70 <__kernel_tan>
 800ce58:	e7ed      	b.n	800ce36 <tan+0x2e>
 800ce5a:	bf00      	nop
 800ce5c:	f3af 8000 	nop.w
	...
 800ce68:	3fe921fb 	.word	0x3fe921fb
 800ce6c:	7fefffff 	.word	0x7fefffff

0800ce70 <__kernel_tan>:
 800ce70:	eeb0 7b40 	vmov.f64	d7, d0
 800ce74:	ee17 3a90 	vmov	r3, s15
 800ce78:	4989      	ldr	r1, [pc, #548]	@ (800d0a0 <__kernel_tan+0x230>)
 800ce7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ce7e:	428a      	cmp	r2, r1
 800ce80:	b510      	push	{r4, lr}
 800ce82:	d833      	bhi.n	800ceec <__kernel_tan+0x7c>
 800ce84:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800ce88:	ee16 1a90 	vmov	r1, s13
 800ce8c:	2900      	cmp	r1, #0
 800ce8e:	d143      	bne.n	800cf18 <__kernel_tan+0xa8>
 800ce90:	ee10 4a10 	vmov	r4, s0
 800ce94:	1c43      	adds	r3, r0, #1
 800ce96:	4323      	orrs	r3, r4
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	d108      	bne.n	800ceae <__kernel_tan+0x3e>
 800ce9c:	f000 fa48 	bl	800d330 <fabs>
 800cea0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cea4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cea8:	eeb0 0b47 	vmov.f64	d0, d7
 800ceac:	bd10      	pop	{r4, pc}
 800ceae:	2801      	cmp	r0, #1
 800ceb0:	d0fa      	beq.n	800cea8 <__kernel_tan+0x38>
 800ceb2:	ee30 6b01 	vadd.f64	d6, d0, d1
 800ceb6:	eebf 7b00 	vmov.f64	d7, #240	@ 0xbf800000 -1.0
 800ceba:	ec53 2b16 	vmov	r2, r3, d6
 800cebe:	ee87 3b06 	vdiv.f64	d3, d7, d6
 800cec2:	460a      	mov	r2, r1
 800cec4:	ec43 2b15 	vmov	d5, r2, r3
 800cec8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cecc:	ec53 2b13 	vmov	r2, r3, d3
 800ced0:	ee35 4b40 	vsub.f64	d4, d5, d0
 800ced4:	460a      	mov	r2, r1
 800ced6:	ec43 2b17 	vmov	d7, r2, r3
 800ceda:	ee31 4b44 	vsub.f64	d4, d1, d4
 800cede:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cee2:	eea4 6b07 	vfma.f64	d6, d4, d7
 800cee6:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ceea:	e7dd      	b.n	800cea8 <__kernel_tan+0x38>
 800ceec:	496d      	ldr	r1, [pc, #436]	@ (800d0a4 <__kernel_tan+0x234>)
 800ceee:	428a      	cmp	r2, r1
 800cef0:	d912      	bls.n	800cf18 <__kernel_tan+0xa8>
 800cef2:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 800d020 <__kernel_tan+0x1b0>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	bfb8      	it	lt
 800cefa:	eeb1 7b40 	vneglt.f64	d7, d0
 800cefe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cf02:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 800d028 <__kernel_tan+0x1b8>
 800cf06:	bfb8      	it	lt
 800cf08:	eeb1 1b41 	vneglt.f64	d1, d1
 800cf0c:	ee37 7b41 	vsub.f64	d7, d7, d1
 800cf10:	ed9f 1b47 	vldr	d1, [pc, #284]	@ 800d030 <__kernel_tan+0x1c0>
 800cf14:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cf18:	ee27 5b07 	vmul.f64	d5, d7, d7
 800cf1c:	ed9f 3b46 	vldr	d3, [pc, #280]	@ 800d038 <__kernel_tan+0x1c8>
 800cf20:	ee25 6b05 	vmul.f64	d6, d5, d5
 800cf24:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 800d040 <__kernel_tan+0x1d0>
 800cf28:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cf2c:	ed9f 3b46 	vldr	d3, [pc, #280]	@ 800d048 <__kernel_tan+0x1d8>
 800cf30:	eea4 3b06 	vfma.f64	d3, d4, d6
 800cf34:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 800d050 <__kernel_tan+0x1e0>
 800cf38:	eea3 4b06 	vfma.f64	d4, d3, d6
 800cf3c:	ed9f 3b46 	vldr	d3, [pc, #280]	@ 800d058 <__kernel_tan+0x1e8>
 800cf40:	eea4 3b06 	vfma.f64	d3, d4, d6
 800cf44:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 800d060 <__kernel_tan+0x1f0>
 800cf48:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 800d068 <__kernel_tan+0x1f8>
 800cf4c:	eea3 4b06 	vfma.f64	d4, d3, d6
 800cf50:	ed9f 3b47 	vldr	d3, [pc, #284]	@ 800d070 <__kernel_tan+0x200>
 800cf54:	eea6 3b02 	vfma.f64	d3, d6, d2
 800cf58:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 800d078 <__kernel_tan+0x208>
 800cf5c:	eea3 2b06 	vfma.f64	d2, d3, d6
 800cf60:	ed9f 3b47 	vldr	d3, [pc, #284]	@ 800d080 <__kernel_tan+0x210>
 800cf64:	eea2 3b06 	vfma.f64	d3, d2, d6
 800cf68:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 800d088 <__kernel_tan+0x218>
 800cf6c:	eea3 2b06 	vfma.f64	d2, d3, d6
 800cf70:	ed9f 3b47 	vldr	d3, [pc, #284]	@ 800d090 <__kernel_tan+0x220>
 800cf74:	494b      	ldr	r1, [pc, #300]	@ (800d0a4 <__kernel_tan+0x234>)
 800cf76:	eea2 3b06 	vfma.f64	d3, d2, d6
 800cf7a:	ee27 2b05 	vmul.f64	d2, d7, d5
 800cf7e:	eeb0 6b44 	vmov.f64	d6, d4
 800cf82:	eeb0 4b41 	vmov.f64	d4, d1
 800cf86:	eea3 6b05 	vfma.f64	d6, d3, d5
 800cf8a:	eea6 4b02 	vfma.f64	d4, d6, d2
 800cf8e:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 800d098 <__kernel_tan+0x228>
 800cf92:	eea4 1b05 	vfma.f64	d1, d4, d5
 800cf96:	428a      	cmp	r2, r1
 800cf98:	eea2 1b06 	vfma.f64	d1, d2, d6
 800cf9c:	ee37 3b01 	vadd.f64	d3, d7, d1
 800cfa0:	d91d      	bls.n	800cfde <__kernel_tan+0x16e>
 800cfa2:	ee23 2b03 	vmul.f64	d2, d3, d3
 800cfa6:	179b      	asrs	r3, r3, #30
 800cfa8:	ee06 0a90 	vmov	s13, r0
 800cfac:	f003 0302 	and.w	r3, r3, #2
 800cfb0:	f1c3 0301 	rsb	r3, r3, #1
 800cfb4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800cfb8:	ee06 3a90 	vmov	s13, r3
 800cfbc:	ee33 3b05 	vadd.f64	d3, d3, d5
 800cfc0:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 800cfc4:	ee82 6b03 	vdiv.f64	d6, d2, d3
 800cfc8:	eeb0 3b00 	vmov.f64	d3, #0	@ 0x40000000  2.0
 800cfcc:	ee36 6b41 	vsub.f64	d6, d6, d1
 800cfd0:	ee37 6b46 	vsub.f64	d6, d7, d6
 800cfd4:	eea6 5b43 	vfms.f64	d5, d6, d3
 800cfd8:	ee24 7b05 	vmul.f64	d7, d4, d5
 800cfdc:	e764      	b.n	800cea8 <__kernel_tan+0x38>
 800cfde:	2801      	cmp	r0, #1
 800cfe0:	d01a      	beq.n	800d018 <__kernel_tan+0x1a8>
 800cfe2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cfe6:	ec51 0b13 	vmov	r0, r1, d3
 800cfea:	2000      	movs	r0, #0
 800cfec:	ec41 0b14 	vmov	d4, r0, r1
 800cff0:	ee34 7b47 	vsub.f64	d7, d4, d7
 800cff4:	ee31 1b47 	vsub.f64	d1, d1, d7
 800cff8:	eebf 7b00 	vmov.f64	d7, #240	@ 0xbf800000 -1.0
 800cffc:	ee87 5b03 	vdiv.f64	d5, d7, d3
 800d000:	ec53 2b15 	vmov	r2, r3, d5
 800d004:	4602      	mov	r2, r0
 800d006:	ec43 2b17 	vmov	d7, r2, r3
 800d00a:	eea4 6b07 	vfma.f64	d6, d4, d7
 800d00e:	eea1 6b07 	vfma.f64	d6, d1, d7
 800d012:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d016:	e747      	b.n	800cea8 <__kernel_tan+0x38>
 800d018:	eeb0 7b43 	vmov.f64	d7, d3
 800d01c:	e744      	b.n	800cea8 <__kernel_tan+0x38>
 800d01e:	bf00      	nop
 800d020:	54442d18 	.word	0x54442d18
 800d024:	3fe921fb 	.word	0x3fe921fb
 800d028:	33145c07 	.word	0x33145c07
 800d02c:	3c81a626 	.word	0x3c81a626
	...
 800d038:	db605373 	.word	0xdb605373
 800d03c:	bef375cb 	.word	0xbef375cb
 800d040:	a03792a6 	.word	0xa03792a6
 800d044:	3f147e88 	.word	0x3f147e88
 800d048:	f2f26501 	.word	0xf2f26501
 800d04c:	3f4344d8 	.word	0x3f4344d8
 800d050:	c9560328 	.word	0xc9560328
 800d054:	3f6d6d22 	.word	0x3f6d6d22
 800d058:	8406d637 	.word	0x8406d637
 800d05c:	3f9664f4 	.word	0x3f9664f4
 800d060:	1110fe7a 	.word	0x1110fe7a
 800d064:	3fc11111 	.word	0x3fc11111
 800d068:	74bf7ad4 	.word	0x74bf7ad4
 800d06c:	3efb2a70 	.word	0x3efb2a70
 800d070:	32f0a7e9 	.word	0x32f0a7e9
 800d074:	3f12b80f 	.word	0x3f12b80f
 800d078:	1a8d1068 	.word	0x1a8d1068
 800d07c:	3f3026f7 	.word	0x3f3026f7
 800d080:	fee08315 	.word	0xfee08315
 800d084:	3f57dbc8 	.word	0x3f57dbc8
 800d088:	e96e8493 	.word	0xe96e8493
 800d08c:	3f8226e3 	.word	0x3f8226e3
 800d090:	1bb341fe 	.word	0x1bb341fe
 800d094:	3faba1ba 	.word	0x3faba1ba
 800d098:	55555563 	.word	0x55555563
 800d09c:	3fd55555 	.word	0x3fd55555
 800d0a0:	3e2fffff 	.word	0x3e2fffff
 800d0a4:	3fe59427 	.word	0x3fe59427

0800d0a8 <__ieee754_rem_pio2>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	eeb0 7b40 	vmov.f64	d7, d0
 800d0ae:	ee17 5a90 	vmov	r5, s15
 800d0b2:	4b99      	ldr	r3, [pc, #612]	@ (800d318 <__ieee754_rem_pio2+0x270>)
 800d0b4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d0b8:	429e      	cmp	r6, r3
 800d0ba:	b088      	sub	sp, #32
 800d0bc:	4604      	mov	r4, r0
 800d0be:	d807      	bhi.n	800d0d0 <__ieee754_rem_pio2+0x28>
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	ed84 0b00 	vstr	d0, [r4]
 800d0c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e01b      	b.n	800d108 <__ieee754_rem_pio2+0x60>
 800d0d0:	4b92      	ldr	r3, [pc, #584]	@ (800d31c <__ieee754_rem_pio2+0x274>)
 800d0d2:	429e      	cmp	r6, r3
 800d0d4:	d83b      	bhi.n	800d14e <__ieee754_rem_pio2+0xa6>
 800d0d6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800d0da:	2d00      	cmp	r5, #0
 800d0dc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800d2d8 <__ieee754_rem_pio2+0x230>
 800d0e0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800d0e4:	dd19      	ble.n	800d11a <__ieee754_rem_pio2+0x72>
 800d0e6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d0ea:	429e      	cmp	r6, r3
 800d0ec:	d00e      	beq.n	800d10c <__ieee754_rem_pio2+0x64>
 800d0ee:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800d2e0 <__ieee754_rem_pio2+0x238>
 800d0f2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800d0f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d0fa:	ed84 6b00 	vstr	d6, [r4]
 800d0fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d102:	ed84 7b02 	vstr	d7, [r4, #8]
 800d106:	2001      	movs	r0, #1
 800d108:	b008      	add	sp, #32
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
 800d10c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800d2e8 <__ieee754_rem_pio2+0x240>
 800d110:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800d2f0 <__ieee754_rem_pio2+0x248>
 800d114:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d118:	e7eb      	b.n	800d0f2 <__ieee754_rem_pio2+0x4a>
 800d11a:	429e      	cmp	r6, r3
 800d11c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d120:	d00e      	beq.n	800d140 <__ieee754_rem_pio2+0x98>
 800d122:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800d2e0 <__ieee754_rem_pio2+0x238>
 800d126:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d12a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d12e:	ed84 6b00 	vstr	d6, [r4]
 800d132:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d136:	f04f 30ff 	mov.w	r0, #4294967295
 800d13a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d13e:	e7e3      	b.n	800d108 <__ieee754_rem_pio2+0x60>
 800d140:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800d2e8 <__ieee754_rem_pio2+0x240>
 800d144:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800d2f0 <__ieee754_rem_pio2+0x248>
 800d148:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d14c:	e7eb      	b.n	800d126 <__ieee754_rem_pio2+0x7e>
 800d14e:	4b74      	ldr	r3, [pc, #464]	@ (800d320 <__ieee754_rem_pio2+0x278>)
 800d150:	429e      	cmp	r6, r3
 800d152:	d870      	bhi.n	800d236 <__ieee754_rem_pio2+0x18e>
 800d154:	f000 f8ec 	bl	800d330 <fabs>
 800d158:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d15c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d2f8 <__ieee754_rem_pio2+0x250>
 800d160:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d164:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d168:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d16c:	ee17 0a90 	vmov	r0, s15
 800d170:	eeb1 4b45 	vneg.f64	d4, d5
 800d174:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800d2d8 <__ieee754_rem_pio2+0x230>
 800d178:	eea5 0b47 	vfms.f64	d0, d5, d7
 800d17c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800d2e0 <__ieee754_rem_pio2+0x238>
 800d180:	281f      	cmp	r0, #31
 800d182:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d186:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d18a:	dc05      	bgt.n	800d198 <__ieee754_rem_pio2+0xf0>
 800d18c:	4b65      	ldr	r3, [pc, #404]	@ (800d324 <__ieee754_rem_pio2+0x27c>)
 800d18e:	1e42      	subs	r2, r0, #1
 800d190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d194:	42b3      	cmp	r3, r6
 800d196:	d109      	bne.n	800d1ac <__ieee754_rem_pio2+0x104>
 800d198:	ee16 3a90 	vmov	r3, s13
 800d19c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d1a0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800d1a4:	2b10      	cmp	r3, #16
 800d1a6:	ea4f 5226 	mov.w	r2, r6, asr #20
 800d1aa:	dc02      	bgt.n	800d1b2 <__ieee754_rem_pio2+0x10a>
 800d1ac:	ed84 6b00 	vstr	d6, [r4]
 800d1b0:	e01a      	b.n	800d1e8 <__ieee754_rem_pio2+0x140>
 800d1b2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800d2e8 <__ieee754_rem_pio2+0x240>
 800d1b6:	eeb0 6b40 	vmov.f64	d6, d0
 800d1ba:	eea4 6b03 	vfma.f64	d6, d4, d3
 800d1be:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d1c2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800d1c6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800d2f0 <__ieee754_rem_pio2+0x248>
 800d1ca:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800d1ce:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d1d2:	ee13 3a90 	vmov	r3, s7
 800d1d6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	2b31      	cmp	r3, #49	@ 0x31
 800d1de:	dc17      	bgt.n	800d210 <__ieee754_rem_pio2+0x168>
 800d1e0:	eeb0 0b46 	vmov.f64	d0, d6
 800d1e4:	ed84 3b00 	vstr	d3, [r4]
 800d1e8:	ed94 6b00 	vldr	d6, [r4]
 800d1ec:	2d00      	cmp	r5, #0
 800d1ee:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d1f2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d1f6:	ed84 0b02 	vstr	d0, [r4, #8]
 800d1fa:	da85      	bge.n	800d108 <__ieee754_rem_pio2+0x60>
 800d1fc:	eeb1 6b46 	vneg.f64	d6, d6
 800d200:	eeb1 0b40 	vneg.f64	d0, d0
 800d204:	ed84 6b00 	vstr	d6, [r4]
 800d208:	ed84 0b02 	vstr	d0, [r4, #8]
 800d20c:	4240      	negs	r0, r0
 800d20e:	e77b      	b.n	800d108 <__ieee754_rem_pio2+0x60>
 800d210:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800d300 <__ieee754_rem_pio2+0x258>
 800d214:	eeb0 0b46 	vmov.f64	d0, d6
 800d218:	eea4 0b07 	vfma.f64	d0, d4, d7
 800d21c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800d220:	eea4 6b07 	vfma.f64	d6, d4, d7
 800d224:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800d308 <__ieee754_rem_pio2+0x260>
 800d228:	eeb0 7b46 	vmov.f64	d7, d6
 800d22c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800d230:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d234:	e7ba      	b.n	800d1ac <__ieee754_rem_pio2+0x104>
 800d236:	4b3c      	ldr	r3, [pc, #240]	@ (800d328 <__ieee754_rem_pio2+0x280>)
 800d238:	429e      	cmp	r6, r3
 800d23a:	d906      	bls.n	800d24a <__ieee754_rem_pio2+0x1a2>
 800d23c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d240:	ed80 7b02 	vstr	d7, [r0, #8]
 800d244:	ed80 7b00 	vstr	d7, [r0]
 800d248:	e740      	b.n	800d0cc <__ieee754_rem_pio2+0x24>
 800d24a:	ee10 3a10 	vmov	r3, s0
 800d24e:	1532      	asrs	r2, r6, #20
 800d250:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800d254:	4618      	mov	r0, r3
 800d256:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d25a:	ec41 0b17 	vmov	d7, r0, r1
 800d25e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d262:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800d310 <__ieee754_rem_pio2+0x268>
 800d266:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d26a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d26e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d272:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d276:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d27a:	a808      	add	r0, sp, #32
 800d27c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d280:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d284:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d288:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d28c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d290:	2103      	movs	r1, #3
 800d292:	ed30 7b02 	vldmdb	r0!, {d7}
 800d296:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d29e:	460b      	mov	r3, r1
 800d2a0:	f101 31ff 	add.w	r1, r1, #4294967295
 800d2a4:	d0f5      	beq.n	800d292 <__ieee754_rem_pio2+0x1ea>
 800d2a6:	4921      	ldr	r1, [pc, #132]	@ (800d32c <__ieee754_rem_pio2+0x284>)
 800d2a8:	9101      	str	r1, [sp, #4]
 800d2aa:	2102      	movs	r1, #2
 800d2ac:	9100      	str	r1, [sp, #0]
 800d2ae:	a802      	add	r0, sp, #8
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	f000 f845 	bl	800d340 <__kernel_rem_pio2>
 800d2b6:	2d00      	cmp	r5, #0
 800d2b8:	f6bf af26 	bge.w	800d108 <__ieee754_rem_pio2+0x60>
 800d2bc:	ed94 7b00 	vldr	d7, [r4]
 800d2c0:	eeb1 7b47 	vneg.f64	d7, d7
 800d2c4:	ed84 7b00 	vstr	d7, [r4]
 800d2c8:	ed94 7b02 	vldr	d7, [r4, #8]
 800d2cc:	eeb1 7b47 	vneg.f64	d7, d7
 800d2d0:	ed84 7b02 	vstr	d7, [r4, #8]
 800d2d4:	e79a      	b.n	800d20c <__ieee754_rem_pio2+0x164>
 800d2d6:	bf00      	nop
 800d2d8:	54400000 	.word	0x54400000
 800d2dc:	3ff921fb 	.word	0x3ff921fb
 800d2e0:	1a626331 	.word	0x1a626331
 800d2e4:	3dd0b461 	.word	0x3dd0b461
 800d2e8:	1a600000 	.word	0x1a600000
 800d2ec:	3dd0b461 	.word	0x3dd0b461
 800d2f0:	2e037073 	.word	0x2e037073
 800d2f4:	3ba3198a 	.word	0x3ba3198a
 800d2f8:	6dc9c883 	.word	0x6dc9c883
 800d2fc:	3fe45f30 	.word	0x3fe45f30
 800d300:	2e000000 	.word	0x2e000000
 800d304:	3ba3198a 	.word	0x3ba3198a
 800d308:	252049c1 	.word	0x252049c1
 800d30c:	397b839a 	.word	0x397b839a
 800d310:	00000000 	.word	0x00000000
 800d314:	41700000 	.word	0x41700000
 800d318:	3fe921fb 	.word	0x3fe921fb
 800d31c:	4002d97b 	.word	0x4002d97b
 800d320:	413921fb 	.word	0x413921fb
 800d324:	0800dc68 	.word	0x0800dc68
 800d328:	7fefffff 	.word	0x7fefffff
 800d32c:	0800dce8 	.word	0x0800dce8

0800d330 <fabs>:
 800d330:	ec51 0b10 	vmov	r0, r1, d0
 800d334:	4602      	mov	r2, r0
 800d336:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d33a:	ec43 2b10 	vmov	d0, r2, r3
 800d33e:	4770      	bx	lr

0800d340 <__kernel_rem_pio2>:
 800d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	ed2d 8b06 	vpush	{d8-d10}
 800d348:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800d34c:	469b      	mov	fp, r3
 800d34e:	9001      	str	r0, [sp, #4]
 800d350:	4bbb      	ldr	r3, [pc, #748]	@ (800d640 <__kernel_rem_pio2+0x300>)
 800d352:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800d354:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800d358:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800d35c:	f112 0f14 	cmn.w	r2, #20
 800d360:	bfa8      	it	ge
 800d362:	1ed3      	subge	r3, r2, #3
 800d364:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d368:	bfb8      	it	lt
 800d36a:	2300      	movlt	r3, #0
 800d36c:	f06f 0517 	mvn.w	r5, #23
 800d370:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800d628 <__kernel_rem_pio2+0x2e8>
 800d374:	bfa4      	itt	ge
 800d376:	2018      	movge	r0, #24
 800d378:	fb93 f3f0 	sdivge	r3, r3, r0
 800d37c:	fb03 5505 	mla	r5, r3, r5, r5
 800d380:	eba3 040a 	sub.w	r4, r3, sl
 800d384:	4415      	add	r5, r2
 800d386:	460f      	mov	r7, r1
 800d388:	eb09 060a 	add.w	r6, r9, sl
 800d38c:	a81a      	add	r0, sp, #104	@ 0x68
 800d38e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800d392:	2200      	movs	r2, #0
 800d394:	42b2      	cmp	r2, r6
 800d396:	dd0e      	ble.n	800d3b6 <__kernel_rem_pio2+0x76>
 800d398:	aa1a      	add	r2, sp, #104	@ 0x68
 800d39a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800d39e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800d3a2:	2600      	movs	r6, #0
 800d3a4:	454e      	cmp	r6, r9
 800d3a6:	dc25      	bgt.n	800d3f4 <__kernel_rem_pio2+0xb4>
 800d3a8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800d628 <__kernel_rem_pio2+0x2e8>
 800d3ac:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d3b0:	4614      	mov	r4, r2
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	e015      	b.n	800d3e2 <__kernel_rem_pio2+0xa2>
 800d3b6:	42d4      	cmn	r4, r2
 800d3b8:	d409      	bmi.n	800d3ce <__kernel_rem_pio2+0x8e>
 800d3ba:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800d3be:	ee07 1a90 	vmov	s15, r1
 800d3c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d3c6:	eca0 7b02 	vstmia	r0!, {d7}
 800d3ca:	3201      	adds	r2, #1
 800d3cc:	e7e2      	b.n	800d394 <__kernel_rem_pio2+0x54>
 800d3ce:	eeb0 7b46 	vmov.f64	d7, d6
 800d3d2:	e7f8      	b.n	800d3c6 <__kernel_rem_pio2+0x86>
 800d3d4:	ecbc 5b02 	vldmia	ip!, {d5}
 800d3d8:	ed94 6b00 	vldr	d6, [r4]
 800d3dc:	3001      	adds	r0, #1
 800d3de:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d3e2:	4550      	cmp	r0, sl
 800d3e4:	f1a4 0408 	sub.w	r4, r4, #8
 800d3e8:	ddf4      	ble.n	800d3d4 <__kernel_rem_pio2+0x94>
 800d3ea:	ecae 7b02 	vstmia	lr!, {d7}
 800d3ee:	3601      	adds	r6, #1
 800d3f0:	3208      	adds	r2, #8
 800d3f2:	e7d7      	b.n	800d3a4 <__kernel_rem_pio2+0x64>
 800d3f4:	aa06      	add	r2, sp, #24
 800d3f6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800d630 <__kernel_rem_pio2+0x2f0>
 800d3fa:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800d638 <__kernel_rem_pio2+0x2f8>
 800d3fe:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800d402:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800d406:	9203      	str	r2, [sp, #12]
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	464c      	mov	r4, r9
 800d40c:	00e3      	lsls	r3, r4, #3
 800d40e:	9304      	str	r3, [sp, #16]
 800d410:	ab92      	add	r3, sp, #584	@ 0x248
 800d412:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d416:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800d41a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800d41c:	ab06      	add	r3, sp, #24
 800d41e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d422:	461e      	mov	r6, r3
 800d424:	4620      	mov	r0, r4
 800d426:	2800      	cmp	r0, #0
 800d428:	f1a2 0208 	sub.w	r2, r2, #8
 800d42c:	dc4a      	bgt.n	800d4c4 <__kernel_rem_pio2+0x184>
 800d42e:	4628      	mov	r0, r5
 800d430:	9305      	str	r3, [sp, #20]
 800d432:	f000 fa01 	bl	800d838 <scalbn>
 800d436:	eeb0 8b40 	vmov.f64	d8, d0
 800d43a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800d43e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d442:	f000 fa79 	bl	800d938 <floor>
 800d446:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800d44a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d44e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d452:	2d00      	cmp	r5, #0
 800d454:	ee17 8a90 	vmov	r8, s15
 800d458:	9b05      	ldr	r3, [sp, #20]
 800d45a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d45e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d462:	dd41      	ble.n	800d4e8 <__kernel_rem_pio2+0x1a8>
 800d464:	1e60      	subs	r0, r4, #1
 800d466:	aa06      	add	r2, sp, #24
 800d468:	f1c5 0c18 	rsb	ip, r5, #24
 800d46c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800d470:	fa46 f20c 	asr.w	r2, r6, ip
 800d474:	4490      	add	r8, r2
 800d476:	fa02 f20c 	lsl.w	r2, r2, ip
 800d47a:	1ab6      	subs	r6, r6, r2
 800d47c:	aa06      	add	r2, sp, #24
 800d47e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800d482:	f1c5 0217 	rsb	r2, r5, #23
 800d486:	4116      	asrs	r6, r2
 800d488:	2e00      	cmp	r6, #0
 800d48a:	dd3c      	ble.n	800d506 <__kernel_rem_pio2+0x1c6>
 800d48c:	f04f 0c00 	mov.w	ip, #0
 800d490:	f108 0801 	add.w	r8, r8, #1
 800d494:	4660      	mov	r0, ip
 800d496:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800d49a:	4564      	cmp	r4, ip
 800d49c:	dc66      	bgt.n	800d56c <__kernel_rem_pio2+0x22c>
 800d49e:	2d00      	cmp	r5, #0
 800d4a0:	dd03      	ble.n	800d4aa <__kernel_rem_pio2+0x16a>
 800d4a2:	2d01      	cmp	r5, #1
 800d4a4:	d072      	beq.n	800d58c <__kernel_rem_pio2+0x24c>
 800d4a6:	2d02      	cmp	r5, #2
 800d4a8:	d07a      	beq.n	800d5a0 <__kernel_rem_pio2+0x260>
 800d4aa:	2e02      	cmp	r6, #2
 800d4ac:	d12b      	bne.n	800d506 <__kernel_rem_pio2+0x1c6>
 800d4ae:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d4b2:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d4b6:	b330      	cbz	r0, 800d506 <__kernel_rem_pio2+0x1c6>
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	f000 f9bd 	bl	800d838 <scalbn>
 800d4be:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d4c2:	e020      	b.n	800d506 <__kernel_rem_pio2+0x1c6>
 800d4c4:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d4c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d4cc:	3801      	subs	r0, #1
 800d4ce:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d4d2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d4d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d4da:	eca6 0a01 	vstmia	r6!, {s0}
 800d4de:	ed92 0b00 	vldr	d0, [r2]
 800d4e2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d4e6:	e79e      	b.n	800d426 <__kernel_rem_pio2+0xe6>
 800d4e8:	d105      	bne.n	800d4f6 <__kernel_rem_pio2+0x1b6>
 800d4ea:	1e62      	subs	r2, r4, #1
 800d4ec:	a906      	add	r1, sp, #24
 800d4ee:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800d4f2:	15f6      	asrs	r6, r6, #23
 800d4f4:	e7c8      	b.n	800d488 <__kernel_rem_pio2+0x148>
 800d4f6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d4fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d502:	da31      	bge.n	800d568 <__kernel_rem_pio2+0x228>
 800d504:	2600      	movs	r6, #0
 800d506:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50e:	f040 809b 	bne.w	800d648 <__kernel_rem_pio2+0x308>
 800d512:	1e62      	subs	r2, r4, #1
 800d514:	2000      	movs	r0, #0
 800d516:	454a      	cmp	r2, r9
 800d518:	da49      	bge.n	800d5ae <__kernel_rem_pio2+0x26e>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	d062      	beq.n	800d5e4 <__kernel_rem_pio2+0x2a4>
 800d51e:	3c01      	subs	r4, #1
 800d520:	ab06      	add	r3, sp, #24
 800d522:	3d18      	subs	r5, #24
 800d524:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d0f8      	beq.n	800d51e <__kernel_rem_pio2+0x1de>
 800d52c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d530:	4628      	mov	r0, r5
 800d532:	f000 f981 	bl	800d838 <scalbn>
 800d536:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800d630 <__kernel_rem_pio2+0x2f0>
 800d53a:	1c62      	adds	r2, r4, #1
 800d53c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800d53e:	00d3      	lsls	r3, r2, #3
 800d540:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d544:	4622      	mov	r2, r4
 800d546:	2a00      	cmp	r2, #0
 800d548:	f280 80a8 	bge.w	800d69c <__kernel_rem_pio2+0x35c>
 800d54c:	4622      	mov	r2, r4
 800d54e:	2a00      	cmp	r2, #0
 800d550:	f2c0 80c6 	blt.w	800d6e0 <__kernel_rem_pio2+0x3a0>
 800d554:	a96a      	add	r1, sp, #424	@ 0x1a8
 800d556:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d55a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800d628 <__kernel_rem_pio2+0x2e8>
 800d55e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800d644 <__kernel_rem_pio2+0x304>
 800d562:	2000      	movs	r0, #0
 800d564:	1aa1      	subs	r1, r4, r2
 800d566:	e0b0      	b.n	800d6ca <__kernel_rem_pio2+0x38a>
 800d568:	2602      	movs	r6, #2
 800d56a:	e78f      	b.n	800d48c <__kernel_rem_pio2+0x14c>
 800d56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d570:	b948      	cbnz	r0, 800d586 <__kernel_rem_pio2+0x246>
 800d572:	b122      	cbz	r2, 800d57e <__kernel_rem_pio2+0x23e>
 800d574:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800d578:	f843 2c04 	str.w	r2, [r3, #-4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f10c 0c01 	add.w	ip, ip, #1
 800d582:	4610      	mov	r0, r2
 800d584:	e789      	b.n	800d49a <__kernel_rem_pio2+0x15a>
 800d586:	ebae 0202 	sub.w	r2, lr, r2
 800d58a:	e7f5      	b.n	800d578 <__kernel_rem_pio2+0x238>
 800d58c:	1e62      	subs	r2, r4, #1
 800d58e:	ab06      	add	r3, sp, #24
 800d590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d594:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d598:	a906      	add	r1, sp, #24
 800d59a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d59e:	e784      	b.n	800d4aa <__kernel_rem_pio2+0x16a>
 800d5a0:	1e62      	subs	r2, r4, #1
 800d5a2:	ab06      	add	r3, sp, #24
 800d5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d5ac:	e7f4      	b.n	800d598 <__kernel_rem_pio2+0x258>
 800d5ae:	ab06      	add	r3, sp, #24
 800d5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b4:	3a01      	subs	r2, #1
 800d5b6:	4318      	orrs	r0, r3
 800d5b8:	e7ad      	b.n	800d516 <__kernel_rem_pio2+0x1d6>
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d0fa      	beq.n	800d5ba <__kernel_rem_pio2+0x27a>
 800d5c4:	9a04      	ldr	r2, [sp, #16]
 800d5c6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800d5ca:	446a      	add	r2, sp
 800d5cc:	eb04 000b 	add.w	r0, r4, fp
 800d5d0:	a91a      	add	r1, sp, #104	@ 0x68
 800d5d2:	1c66      	adds	r6, r4, #1
 800d5d4:	3a98      	subs	r2, #152	@ 0x98
 800d5d6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800d5da:	4423      	add	r3, r4
 800d5dc:	42b3      	cmp	r3, r6
 800d5de:	da04      	bge.n	800d5ea <__kernel_rem_pio2+0x2aa>
 800d5e0:	461c      	mov	r4, r3
 800d5e2:	e713      	b.n	800d40c <__kernel_rem_pio2+0xcc>
 800d5e4:	9a03      	ldr	r2, [sp, #12]
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e7e8      	b.n	800d5bc <__kernel_rem_pio2+0x27c>
 800d5ea:	9902      	ldr	r1, [sp, #8]
 800d5ec:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d5f0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800d5f4:	9104      	str	r1, [sp, #16]
 800d5f6:	ee07 1a90 	vmov	s15, r1
 800d5fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d5fe:	2400      	movs	r4, #0
 800d600:	eca0 7b02 	vstmia	r0!, {d7}
 800d604:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800d628 <__kernel_rem_pio2+0x2e8>
 800d608:	4686      	mov	lr, r0
 800d60a:	4554      	cmp	r4, sl
 800d60c:	dd03      	ble.n	800d616 <__kernel_rem_pio2+0x2d6>
 800d60e:	eca2 7b02 	vstmia	r2!, {d7}
 800d612:	3601      	adds	r6, #1
 800d614:	e7e2      	b.n	800d5dc <__kernel_rem_pio2+0x29c>
 800d616:	ecbc 5b02 	vldmia	ip!, {d5}
 800d61a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800d61e:	3401      	adds	r4, #1
 800d620:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d624:	e7f1      	b.n	800d60a <__kernel_rem_pio2+0x2ca>
 800d626:	bf00      	nop
	...
 800d634:	3e700000 	.word	0x3e700000
 800d638:	00000000 	.word	0x00000000
 800d63c:	41700000 	.word	0x41700000
 800d640:	0800de30 	.word	0x0800de30
 800d644:	0800ddf0 	.word	0x0800ddf0
 800d648:	4268      	negs	r0, r5
 800d64a:	eeb0 0b48 	vmov.f64	d0, d8
 800d64e:	f000 f8f3 	bl	800d838 <scalbn>
 800d652:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800d820 <__kernel_rem_pio2+0x4e0>
 800d656:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65e:	db17      	blt.n	800d690 <__kernel_rem_pio2+0x350>
 800d660:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800d828 <__kernel_rem_pio2+0x4e8>
 800d664:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d668:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d66c:	aa06      	add	r2, sp, #24
 800d66e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d672:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d676:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d67a:	3518      	adds	r5, #24
 800d67c:	ee10 3a10 	vmov	r3, s0
 800d680:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d684:	ee17 3a10 	vmov	r3, s14
 800d688:	3401      	adds	r4, #1
 800d68a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d68e:	e74d      	b.n	800d52c <__kernel_rem_pio2+0x1ec>
 800d690:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d694:	aa06      	add	r2, sp, #24
 800d696:	ee10 3a10 	vmov	r3, s0
 800d69a:	e7f6      	b.n	800d68a <__kernel_rem_pio2+0x34a>
 800d69c:	a806      	add	r0, sp, #24
 800d69e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800d6a2:	9001      	str	r0, [sp, #4]
 800d6a4:	ee07 0a90 	vmov	s15, r0
 800d6a8:	3a01      	subs	r2, #1
 800d6aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6ae:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d6b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d6b6:	ed21 7b02 	vstmdb	r1!, {d7}
 800d6ba:	e744      	b.n	800d546 <__kernel_rem_pio2+0x206>
 800d6bc:	ecbc 5b02 	vldmia	ip!, {d5}
 800d6c0:	ecb5 6b02 	vldmia	r5!, {d6}
 800d6c4:	3001      	adds	r0, #1
 800d6c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d6ca:	4548      	cmp	r0, r9
 800d6cc:	dc01      	bgt.n	800d6d2 <__kernel_rem_pio2+0x392>
 800d6ce:	4281      	cmp	r1, r0
 800d6d0:	daf4      	bge.n	800d6bc <__kernel_rem_pio2+0x37c>
 800d6d2:	a842      	add	r0, sp, #264	@ 0x108
 800d6d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d6d8:	ed81 7b00 	vstr	d7, [r1]
 800d6dc:	3a01      	subs	r2, #1
 800d6de:	e736      	b.n	800d54e <__kernel_rem_pio2+0x20e>
 800d6e0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800d6e2:	2a02      	cmp	r2, #2
 800d6e4:	dc0a      	bgt.n	800d6fc <__kernel_rem_pio2+0x3bc>
 800d6e6:	2a00      	cmp	r2, #0
 800d6e8:	dc2d      	bgt.n	800d746 <__kernel_rem_pio2+0x406>
 800d6ea:	d046      	beq.n	800d77a <__kernel_rem_pio2+0x43a>
 800d6ec:	f008 0007 	and.w	r0, r8, #7
 800d6f0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800d6f4:	ecbd 8b06 	vpop	{d8-d10}
 800d6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6fc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800d6fe:	2a03      	cmp	r2, #3
 800d700:	d1f4      	bne.n	800d6ec <__kernel_rem_pio2+0x3ac>
 800d702:	a942      	add	r1, sp, #264	@ 0x108
 800d704:	f1a3 0208 	sub.w	r2, r3, #8
 800d708:	440a      	add	r2, r1
 800d70a:	4611      	mov	r1, r2
 800d70c:	4620      	mov	r0, r4
 800d70e:	2800      	cmp	r0, #0
 800d710:	f1a1 0108 	sub.w	r1, r1, #8
 800d714:	dc52      	bgt.n	800d7bc <__kernel_rem_pio2+0x47c>
 800d716:	4621      	mov	r1, r4
 800d718:	2901      	cmp	r1, #1
 800d71a:	f1a2 0208 	sub.w	r2, r2, #8
 800d71e:	dc5d      	bgt.n	800d7dc <__kernel_rem_pio2+0x49c>
 800d720:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800d830 <__kernel_rem_pio2+0x4f0>
 800d724:	aa42      	add	r2, sp, #264	@ 0x108
 800d726:	4413      	add	r3, r2
 800d728:	2c01      	cmp	r4, #1
 800d72a:	dc67      	bgt.n	800d7fc <__kernel_rem_pio2+0x4bc>
 800d72c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800d730:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800d734:	2e00      	cmp	r6, #0
 800d736:	d167      	bne.n	800d808 <__kernel_rem_pio2+0x4c8>
 800d738:	ed87 5b00 	vstr	d5, [r7]
 800d73c:	ed87 6b02 	vstr	d6, [r7, #8]
 800d740:	ed87 7b04 	vstr	d7, [r7, #16]
 800d744:	e7d2      	b.n	800d6ec <__kernel_rem_pio2+0x3ac>
 800d746:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800d830 <__kernel_rem_pio2+0x4f0>
 800d74a:	aa42      	add	r2, sp, #264	@ 0x108
 800d74c:	4413      	add	r3, r2
 800d74e:	4622      	mov	r2, r4
 800d750:	2a00      	cmp	r2, #0
 800d752:	da24      	bge.n	800d79e <__kernel_rem_pio2+0x45e>
 800d754:	b34e      	cbz	r6, 800d7aa <__kernel_rem_pio2+0x46a>
 800d756:	eeb1 7b46 	vneg.f64	d7, d6
 800d75a:	ed87 7b00 	vstr	d7, [r7]
 800d75e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800d762:	aa44      	add	r2, sp, #272	@ 0x110
 800d764:	2301      	movs	r3, #1
 800d766:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d76a:	429c      	cmp	r4, r3
 800d76c:	da20      	bge.n	800d7b0 <__kernel_rem_pio2+0x470>
 800d76e:	b10e      	cbz	r6, 800d774 <__kernel_rem_pio2+0x434>
 800d770:	eeb1 7b47 	vneg.f64	d7, d7
 800d774:	ed87 7b02 	vstr	d7, [r7, #8]
 800d778:	e7b8      	b.n	800d6ec <__kernel_rem_pio2+0x3ac>
 800d77a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800d830 <__kernel_rem_pio2+0x4f0>
 800d77e:	aa42      	add	r2, sp, #264	@ 0x108
 800d780:	4413      	add	r3, r2
 800d782:	2c00      	cmp	r4, #0
 800d784:	da05      	bge.n	800d792 <__kernel_rem_pio2+0x452>
 800d786:	b10e      	cbz	r6, 800d78c <__kernel_rem_pio2+0x44c>
 800d788:	eeb1 7b47 	vneg.f64	d7, d7
 800d78c:	ed87 7b00 	vstr	d7, [r7]
 800d790:	e7ac      	b.n	800d6ec <__kernel_rem_pio2+0x3ac>
 800d792:	ed33 6b02 	vldmdb	r3!, {d6}
 800d796:	3c01      	subs	r4, #1
 800d798:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d79c:	e7f1      	b.n	800d782 <__kernel_rem_pio2+0x442>
 800d79e:	ed33 7b02 	vldmdb	r3!, {d7}
 800d7a2:	3a01      	subs	r2, #1
 800d7a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d7a8:	e7d2      	b.n	800d750 <__kernel_rem_pio2+0x410>
 800d7aa:	eeb0 7b46 	vmov.f64	d7, d6
 800d7ae:	e7d4      	b.n	800d75a <__kernel_rem_pio2+0x41a>
 800d7b0:	ecb2 6b02 	vldmia	r2!, {d6}
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d7ba:	e7d6      	b.n	800d76a <__kernel_rem_pio2+0x42a>
 800d7bc:	ed91 7b00 	vldr	d7, [r1]
 800d7c0:	ed91 5b02 	vldr	d5, [r1, #8]
 800d7c4:	3801      	subs	r0, #1
 800d7c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d7ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d7ce:	ed81 6b00 	vstr	d6, [r1]
 800d7d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d7d6:	ed81 7b02 	vstr	d7, [r1, #8]
 800d7da:	e798      	b.n	800d70e <__kernel_rem_pio2+0x3ce>
 800d7dc:	ed92 7b00 	vldr	d7, [r2]
 800d7e0:	ed92 5b02 	vldr	d5, [r2, #8]
 800d7e4:	3901      	subs	r1, #1
 800d7e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d7ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d7ee:	ed82 6b00 	vstr	d6, [r2]
 800d7f2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d7f6:	ed82 7b02 	vstr	d7, [r2, #8]
 800d7fa:	e78d      	b.n	800d718 <__kernel_rem_pio2+0x3d8>
 800d7fc:	ed33 6b02 	vldmdb	r3!, {d6}
 800d800:	3c01      	subs	r4, #1
 800d802:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d806:	e78f      	b.n	800d728 <__kernel_rem_pio2+0x3e8>
 800d808:	eeb1 5b45 	vneg.f64	d5, d5
 800d80c:	eeb1 6b46 	vneg.f64	d6, d6
 800d810:	ed87 5b00 	vstr	d5, [r7]
 800d814:	eeb1 7b47 	vneg.f64	d7, d7
 800d818:	ed87 6b02 	vstr	d6, [r7, #8]
 800d81c:	e790      	b.n	800d740 <__kernel_rem_pio2+0x400>
 800d81e:	bf00      	nop
 800d820:	00000000 	.word	0x00000000
 800d824:	41700000 	.word	0x41700000
 800d828:	00000000 	.word	0x00000000
 800d82c:	3e700000 	.word	0x3e700000
	...

0800d838 <scalbn>:
 800d838:	ee10 1a90 	vmov	r1, s1
 800d83c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d840:	b98b      	cbnz	r3, 800d866 <scalbn+0x2e>
 800d842:	ee10 3a10 	vmov	r3, s0
 800d846:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d84a:	4319      	orrs	r1, r3
 800d84c:	d00a      	beq.n	800d864 <scalbn+0x2c>
 800d84e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d900 <scalbn+0xc8>
 800d852:	4b37      	ldr	r3, [pc, #220]	@ (800d930 <scalbn+0xf8>)
 800d854:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d858:	4298      	cmp	r0, r3
 800d85a:	da0b      	bge.n	800d874 <scalbn+0x3c>
 800d85c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d908 <scalbn+0xd0>
 800d860:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d864:	4770      	bx	lr
 800d866:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d107      	bne.n	800d87e <scalbn+0x46>
 800d86e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d872:	4770      	bx	lr
 800d874:	ee10 1a90 	vmov	r1, s1
 800d878:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d87c:	3b36      	subs	r3, #54	@ 0x36
 800d87e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d882:	4290      	cmp	r0, r2
 800d884:	dd0d      	ble.n	800d8a2 <scalbn+0x6a>
 800d886:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800d910 <scalbn+0xd8>
 800d88a:	ee10 3a90 	vmov	r3, s1
 800d88e:	eeb0 6b47 	vmov.f64	d6, d7
 800d892:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800d918 <scalbn+0xe0>
 800d896:	2b00      	cmp	r3, #0
 800d898:	fe27 7b05 	vselge.f64	d7, d7, d5
 800d89c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800d8a0:	4770      	bx	lr
 800d8a2:	4418      	add	r0, r3
 800d8a4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800d8a8:	4298      	cmp	r0, r3
 800d8aa:	dcec      	bgt.n	800d886 <scalbn+0x4e>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	dd0a      	ble.n	800d8c6 <scalbn+0x8e>
 800d8b0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800d8b4:	ec53 2b10 	vmov	r2, r3, d0
 800d8b8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800d8bc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d8c0:	ec43 2b10 	vmov	d0, r2, r3
 800d8c4:	4770      	bx	lr
 800d8c6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800d8ca:	da09      	bge.n	800d8e0 <scalbn+0xa8>
 800d8cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800d908 <scalbn+0xd0>
 800d8d0:	ee10 3a90 	vmov	r3, s1
 800d8d4:	eeb0 6b47 	vmov.f64	d6, d7
 800d8d8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800d920 <scalbn+0xe8>
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	e7db      	b.n	800d898 <scalbn+0x60>
 800d8e0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800d8e4:	ec53 2b10 	vmov	r2, r3, d0
 800d8e8:	3036      	adds	r0, #54	@ 0x36
 800d8ea:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800d8ee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d8f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d928 <scalbn+0xf0>
 800d8f6:	ec43 2b10 	vmov	d0, r2, r3
 800d8fa:	e7b1      	b.n	800d860 <scalbn+0x28>
 800d8fc:	f3af 8000 	nop.w
 800d900:	00000000 	.word	0x00000000
 800d904:	43500000 	.word	0x43500000
 800d908:	c2f8f359 	.word	0xc2f8f359
 800d90c:	01a56e1f 	.word	0x01a56e1f
 800d910:	8800759c 	.word	0x8800759c
 800d914:	7e37e43c 	.word	0x7e37e43c
 800d918:	8800759c 	.word	0x8800759c
 800d91c:	fe37e43c 	.word	0xfe37e43c
 800d920:	c2f8f359 	.word	0xc2f8f359
 800d924:	81a56e1f 	.word	0x81a56e1f
 800d928:	00000000 	.word	0x00000000
 800d92c:	3c900000 	.word	0x3c900000
 800d930:	ffff3cb0 	.word	0xffff3cb0
 800d934:	00000000 	.word	0x00000000

0800d938 <floor>:
 800d938:	ee10 3a90 	vmov	r3, s1
 800d93c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800d940:	ee10 2a10 	vmov	r2, s0
 800d944:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800d948:	2913      	cmp	r1, #19
 800d94a:	b530      	push	{r4, r5, lr}
 800d94c:	4615      	mov	r5, r2
 800d94e:	dc33      	bgt.n	800d9b8 <floor+0x80>
 800d950:	2900      	cmp	r1, #0
 800d952:	da18      	bge.n	800d986 <floor+0x4e>
 800d954:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800da18 <floor+0xe0>
 800d958:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d95c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d964:	dd0a      	ble.n	800d97c <floor+0x44>
 800d966:	2b00      	cmp	r3, #0
 800d968:	da50      	bge.n	800da0c <floor+0xd4>
 800d96a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d96e:	4313      	orrs	r3, r2
 800d970:	2200      	movs	r2, #0
 800d972:	4293      	cmp	r3, r2
 800d974:	4b2a      	ldr	r3, [pc, #168]	@ (800da20 <floor+0xe8>)
 800d976:	bf08      	it	eq
 800d978:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d97c:	4619      	mov	r1, r3
 800d97e:	4610      	mov	r0, r2
 800d980:	ec41 0b10 	vmov	d0, r0, r1
 800d984:	e01f      	b.n	800d9c6 <floor+0x8e>
 800d986:	4827      	ldr	r0, [pc, #156]	@ (800da24 <floor+0xec>)
 800d988:	4108      	asrs	r0, r1
 800d98a:	ea03 0400 	and.w	r4, r3, r0
 800d98e:	4314      	orrs	r4, r2
 800d990:	d019      	beq.n	800d9c6 <floor+0x8e>
 800d992:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800da18 <floor+0xe0>
 800d996:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d99a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a2:	ddeb      	ble.n	800d97c <floor+0x44>
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	bfbe      	ittt	lt
 800d9a8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800d9ac:	410a      	asrlt	r2, r1
 800d9ae:	189b      	addlt	r3, r3, r2
 800d9b0:	ea23 0300 	bic.w	r3, r3, r0
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	e7e1      	b.n	800d97c <floor+0x44>
 800d9b8:	2933      	cmp	r1, #51	@ 0x33
 800d9ba:	dd05      	ble.n	800d9c8 <floor+0x90>
 800d9bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d9c0:	d101      	bne.n	800d9c6 <floor+0x8e>
 800d9c2:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d9c6:	bd30      	pop	{r4, r5, pc}
 800d9c8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800d9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d0:	40e0      	lsrs	r0, r4
 800d9d2:	4210      	tst	r0, r2
 800d9d4:	d0f7      	beq.n	800d9c6 <floor+0x8e>
 800d9d6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800da18 <floor+0xe0>
 800d9da:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d9de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e6:	ddc9      	ble.n	800d97c <floor+0x44>
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	da02      	bge.n	800d9f2 <floor+0xba>
 800d9ec:	2914      	cmp	r1, #20
 800d9ee:	d103      	bne.n	800d9f8 <floor+0xc0>
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	ea22 0200 	bic.w	r2, r2, r0
 800d9f6:	e7c1      	b.n	800d97c <floor+0x44>
 800d9f8:	2401      	movs	r4, #1
 800d9fa:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800d9fe:	fa04 f101 	lsl.w	r1, r4, r1
 800da02:	440a      	add	r2, r1
 800da04:	42aa      	cmp	r2, r5
 800da06:	bf38      	it	cc
 800da08:	191b      	addcc	r3, r3, r4
 800da0a:	e7f2      	b.n	800d9f2 <floor+0xba>
 800da0c:	2200      	movs	r2, #0
 800da0e:	4613      	mov	r3, r2
 800da10:	e7b4      	b.n	800d97c <floor+0x44>
 800da12:	bf00      	nop
 800da14:	f3af 8000 	nop.w
 800da18:	8800759c 	.word	0x8800759c
 800da1c:	7e37e43c 	.word	0x7e37e43c
 800da20:	bff00000 	.word	0xbff00000
 800da24:	000fffff 	.word	0x000fffff

0800da28 <_init>:
 800da28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2a:	bf00      	nop
 800da2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da2e:	bc08      	pop	{r3}
 800da30:	469e      	mov	lr, r3
 800da32:	4770      	bx	lr

0800da34 <_fini>:
 800da34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da36:	bf00      	nop
 800da38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da3a:	bc08      	pop	{r3}
 800da3c:	469e      	mov	lr, r3
 800da3e:	4770      	bx	lr
