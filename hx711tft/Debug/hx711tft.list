
hx711tft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006344  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000175c  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007d40  08007d40  00017d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08007d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000020c  24000074  08007dbc  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000280  08007dbc  00020280  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   000144cb  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003000  00000000  00000000  0003456d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f68  00000000  00000000  00037570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000de0  00000000  00000000  000384d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038ca8  00000000  00000000  000392b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016a45  00000000  00000000  00071f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015d825  00000000  00000000  000889a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e61ca  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004144  00000000  00000000  001e621c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080065cc 	.word	0x080065cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080065cc 	.word	0x080065cc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <AT24CXX_Init>:
#include "24cxx.h"
#include "delay.h"

//��ʼ��IIC�ӿ�
void AT24CXX_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	IIC_Init();//IIC��ʼ��
 8000394:	f001 fb7a 	bl	8001a8c <IIC_Init>
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <AT24CXX_ReadOneByte>:
//��AT24CXXָ����ַ����һ������
//ReadAddr:��ʼ�����ĵ�ַ
//����ֵ  :����������
u8 AT24CXX_ReadOneByte(u16 ReadAddr)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
	u8 temp=0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	73fb      	strb	r3, [r7, #15]
    IIC_Start();
 80003aa:	f001 fba1 	bl	8001af0 <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	   //����д����
 80003ae:	20a0      	movs	r0, #160	; 0xa0
 80003b0:	f001 fc8c 	bl	8001ccc <IIC_Send_Byte>
		IIC_Wait_Ack();
 80003b4:	f001 fbf4 	bl	8001ba0 <IIC_Wait_Ack>
		IIC_Send_Byte(ReadAddr>>8);//���͸ߵ�ַ
 80003b8:	88fb      	ldrh	r3, [r7, #6]
 80003ba:	0a1b      	lsrs	r3, r3, #8
 80003bc:	b29b      	uxth	r3, r3
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fc83 	bl	8001ccc <IIC_Send_Byte>
	}else IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //����������ַ0XA0,д����
	IIC_Wait_Ack();
 80003c6:	f001 fbeb 	bl	8001ba0 <IIC_Wait_Ack>
    IIC_Send_Byte(ReadAddr%256);   //���͵͵�ַ
 80003ca:	88fb      	ldrh	r3, [r7, #6]
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fc7c 	bl	8001ccc <IIC_Send_Byte>
	IIC_Wait_Ack();
 80003d4:	f001 fbe4 	bl	8001ba0 <IIC_Wait_Ack>
	IIC_Start();
 80003d8:	f001 fb8a 	bl	8001af0 <IIC_Start>
	IIC_Send_Byte(0XA1);           //�������ģʽ
 80003dc:	20a1      	movs	r0, #161	; 0xa1
 80003de:	f001 fc75 	bl	8001ccc <IIC_Send_Byte>
	IIC_Wait_Ack();
 80003e2:	f001 fbdd 	bl	8001ba0 <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);
 80003e6:	2000      	movs	r0, #0
 80003e8:	f001 fcbc 	bl	8001d64 <IIC_Read_Byte>
 80003ec:	4603      	mov	r3, r0
 80003ee:	73fb      	strb	r3, [r7, #15]
    IIC_Stop();//����һ��ֹͣ����
 80003f0:	f001 fbaa 	bl	8001b48 <IIC_Stop>
	return temp;
 80003f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <AT24CXX_WriteOneByte>:
//��AT24CXXָ����ַд��һ������
//WriteAddr  :д�����ݵ�Ŀ�ĵ�ַ
//DataToWrite:Ҫд�������
void AT24CXX_WriteOneByte(u16 WriteAddr,u8 DataToWrite)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	4603      	mov	r3, r0
 8000406:	460a      	mov	r2, r1
 8000408:	80fb      	strh	r3, [r7, #6]
 800040a:	4613      	mov	r3, r2
 800040c:	717b      	strb	r3, [r7, #5]
    IIC_Start();
 800040e:	f001 fb6f 	bl	8001af0 <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	    //����д����
 8000412:	20a0      	movs	r0, #160	; 0xa0
 8000414:	f001 fc5a 	bl	8001ccc <IIC_Send_Byte>
		IIC_Wait_Ack();
 8000418:	f001 fbc2 	bl	8001ba0 <IIC_Wait_Ack>
		IIC_Send_Byte(WriteAddr>>8);//���͸ߵ�ַ
 800041c:	88fb      	ldrh	r3, [r7, #6]
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	b29b      	uxth	r3, r3
 8000422:	b2db      	uxtb	r3, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f001 fc51 	bl	8001ccc <IIC_Send_Byte>
	}else IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //����������ַ0XA0,д����
	IIC_Wait_Ack();
 800042a:	f001 fbb9 	bl	8001ba0 <IIC_Wait_Ack>
    IIC_Send_Byte(WriteAddr%256);   //���͵͵�ַ
 800042e:	88fb      	ldrh	r3, [r7, #6]
 8000430:	b2db      	uxtb	r3, r3
 8000432:	4618      	mov	r0, r3
 8000434:	f001 fc4a 	bl	8001ccc <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000438:	f001 fbb2 	bl	8001ba0 <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);     //�����ֽ�
 800043c:	797b      	ldrb	r3, [r7, #5]
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fc44 	bl	8001ccc <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000444:	f001 fbac 	bl	8001ba0 <IIC_Wait_Ack>
    IIC_Stop();//����һ��ֹͣ����
 8000448:	f001 fb7e 	bl	8001b48 <IIC_Stop>
	delay_ms(10);
 800044c:	200a      	movs	r0, #10
 800044e:	f000 f875 	bl	800053c <delay_ms>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <AT24CXX_Check>:
//��������24XX�����һ����ַ(255)���洢��־��.
//���������24Cϵ��,�����ַҪ�޸�
//����1:���ʧ��
//����0:���ɹ�
u8 AT24CXX_Check(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
	u8 temp;
	temp=AT24CXX_ReadOneByte(255);//����ÿ�ο�����дAT24CXX
 8000460:	20ff      	movs	r0, #255	; 0xff
 8000462:	f7ff ff9b 	bl	800039c <AT24CXX_ReadOneByte>
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2b55      	cmp	r3, #85	; 0x55
 800046e:	d101      	bne.n	8000474 <AT24CXX_Check+0x1a>
 8000470:	2300      	movs	r3, #0
 8000472:	e00e      	b.n	8000492 <AT24CXX_Check+0x38>
	else//�ų���һ�γ�ʼ�������
	{
		AT24CXX_WriteOneByte(255,0X55);
 8000474:	2155      	movs	r1, #85	; 0x55
 8000476:	20ff      	movs	r0, #255	; 0xff
 8000478:	f7ff ffc1 	bl	80003fe <AT24CXX_WriteOneByte>
	    temp=AT24CXX_ReadOneByte(255);
 800047c:	20ff      	movs	r0, #255	; 0xff
 800047e:	f7ff ff8d 	bl	800039c <AT24CXX_ReadOneByte>
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b55      	cmp	r3, #85	; 0x55
 800048a:	d101      	bne.n	8000490 <AT24CXX_Check+0x36>
 800048c:	2300      	movs	r3, #0
 800048e:	e000      	b.n	8000492 <AT24CXX_Check+0x38>
	}
	return 1;
 8000490:	2301      	movs	r3, #1
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <delay_init>:
//��ʼ���ӳٺ���
//��ʹ��ucos��ʱ��,�˺������ʼ��ucos��ʱ�ӽ���
//SYSTICK��ʱ�ӹ̶�ΪAHBʱ�ӵ�1/8
//SYSCLK:ϵͳʱ��Ƶ��
void delay_init(u16 SYSCLK)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	80fb      	strh	r3, [r7, #6]
#if SYSTEM_SUPPORT_OS 						//�����Ҫ֧��OS.
	u32 reload;
#endif
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);//SysTickƵ��ΪHCLK
 80004a6:	2004      	movs	r0, #4
 80004a8:	f002 f9d6 	bl	8002858 <HAL_SYSTICK_CLKSourceConfig>
	fac_us=SYSCLK;						    //�����Ƿ�ʹ��OS,fac_us����Ҫʹ��
 80004ac:	88fb      	ldrh	r3, [r7, #6]
 80004ae:	4a03      	ldr	r2, [pc, #12]	; (80004bc <delay_init+0x20>)
 80004b0:	6013      	str	r3, [r2, #0]
	fac_ms=1000/delay_ostickspersec;		//����OS������ʱ�����ٵ�λ
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;//����SYSTICK�ж�
	SysTick->LOAD=reload; 					//ÿ1/OS_TICKS_PER_SEC���ж�һ��
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; //����SYSTICK
#endif
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	24000090 	.word	0x24000090

080004c0 <delay_us>:
	delay_us((u32)(nms*1000));				//��ͨ��ʽ��ʱ
}
#else

void delay_us(u32 nus)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	u32 ticks;
	u32 told,tnow,tcnt=0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
	u32 reload=SysTick->LOAD;				//LOAD��ֵ
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <delay_us+0x74>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	617b      	str	r3, [r7, #20]
	ticks=nus*fac_us; 						//��Ҫ�Ľ�����
 80004d2:	4b19      	ldr	r3, [pc, #100]	; (8000538 <delay_us+0x78>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	fb02 f303 	mul.w	r3, r2, r3
 80004dc:	613b      	str	r3, [r7, #16]
	told=SysTick->VAL;        				//�ս���ʱ�ļ�����ֵ
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <delay_us+0x74>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		tnow=SysTick->VAL;
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <delay_us+0x74>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	60fb      	str	r3, [r7, #12]
		if(tnow!=told)
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d0f8      	beq.n	80004e4 <delay_us+0x24>
		{
			if(tnow<told)tcnt+=told-tnow;	//����ע��һ��SYSTICK��һ���ݼ��ļ������Ϳ�����.
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	69fb      	ldr	r3, [r7, #28]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d206      	bcs.n	8000508 <delay_us+0x48>
 80004fa:	69fa      	ldr	r2, [r7, #28]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	69ba      	ldr	r2, [r7, #24]
 8000502:	4413      	add	r3, r2
 8000504:	61bb      	str	r3, [r7, #24]
 8000506:	e007      	b.n	8000518 <delay_us+0x58>
			else tcnt+=reload-tnow+told;
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	1ad2      	subs	r2, r2, r3
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	4413      	add	r3, r2
 8000512:	69ba      	ldr	r2, [r7, #24]
 8000514:	4413      	add	r3, r2
 8000516:	61bb      	str	r3, [r7, #24]
			told=tnow;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	61fb      	str	r3, [r7, #28]
			if(tcnt>=ticks)break;			//ʱ�䳬��/����Ҫ�ӳٵ�ʱ��,���˳�.
 800051c:	69ba      	ldr	r2, [r7, #24]
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	429a      	cmp	r2, r3
 8000522:	d200      	bcs.n	8000526 <delay_us+0x66>
		tnow=SysTick->VAL;
 8000524:	e7de      	b.n	80004e4 <delay_us+0x24>
			if(tcnt>=ticks)break;			//ʱ�䳬��/����Ҫ�ӳٵ�ʱ��,���˳�.
 8000526:	bf00      	nop
		}
	};
}
 8000528:	bf00      	nop
 800052a:	3724      	adds	r7, #36	; 0x24
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	e000e010 	.word	0xe000e010
 8000538:	24000090 	.word	0x24000090

0800053c <delay_ms>:

//��ʱnms
//nms:Ҫ��ʱ��ms��
void delay_ms(u16 nms)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
	u32 i;
	for(i=0;i<nms;i++) delay_us(1000);
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e006      	b.n	800055a <delay_ms+0x1e>
 800054c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000550:	f7ff ffb6 	bl	80004c0 <delay_us>
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	429a      	cmp	r2, r3
 8000560:	d3f4      	bcc.n	800054c <delay_ms+0x10>
}
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000582:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <MX_GPIO_Init+0x16c>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000588:	4a53      	ldr	r2, [pc, #332]	; (80006d8 <MX_GPIO_Init+0x16c>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000592:	4b51      	ldr	r3, [pc, #324]	; (80006d8 <MX_GPIO_Init+0x16c>)
 8000594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a0:	4b4d      	ldr	r3, [pc, #308]	; (80006d8 <MX_GPIO_Init+0x16c>)
 80005a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a6:	4a4c      	ldr	r2, [pc, #304]	; (80006d8 <MX_GPIO_Init+0x16c>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005b0:	4b49      	ldr	r3, [pc, #292]	; (80006d8 <MX_GPIO_Init+0x16c>)
 80005b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b46      	ldr	r3, [pc, #280]	; (80006d8 <MX_GPIO_Init+0x16c>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c4:	4a44      	ldr	r2, [pc, #272]	; (80006d8 <MX_GPIO_Init+0x16c>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ce:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <MX_GPIO_Init+0x16c>)
 80005d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b3e      	ldr	r3, [pc, #248]	; (80006d8 <MX_GPIO_Init+0x16c>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e2:	4a3d      	ldr	r2, [pc, #244]	; (80006d8 <MX_GPIO_Init+0x16c>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ec:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <MX_GPIO_Init+0x16c>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2110      	movs	r1, #16
 80005fe:	4837      	ldr	r0, [pc, #220]	; (80006dc <MX_GPIO_Init+0x170>)
 8000600:	f002 fb0e 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2103      	movs	r1, #3
 8000608:	4835      	ldr	r0, [pc, #212]	; (80006e0 <MX_GPIO_Init+0x174>)
 800060a:	f002 fb09 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8000614:	4833      	ldr	r0, [pc, #204]	; (80006e4 <MX_GPIO_Init+0x178>)
 8000616:	f002 fb03 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PA3 */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin|GPIO_PIN_3;
 800061a:	230f      	movs	r3, #15
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	482b      	ldr	r0, [pc, #172]	; (80006dc <MX_GPIO_Init+0x170>)
 800062e:	f002 f92f 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000632:	2310      	movs	r3, #16
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4824      	ldr	r0, [pc, #144]	; (80006dc <MX_GPIO_Init+0x170>)
 800064a:	f002 f921 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800064e:	2303      	movs	r3, #3
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000656:	2301      	movs	r3, #1
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065a:	2303      	movs	r3, #3
 800065c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	481e      	ldr	r0, [pc, #120]	; (80006e0 <MX_GPIO_Init+0x174>)
 8000666:	f002 f913 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin;
 800066a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000674:	2301      	movs	r3, #1
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4818      	ldr	r0, [pc, #96]	; (80006e4 <MX_GPIO_Init+0x178>)
 8000684:	f002 f904 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8000688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000694:	2301      	movs	r3, #1
 8000696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <MX_GPIO_Init+0x178>)
 80006a0:	f002 f8f6 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T_CS_Pin|T_DO_Pin;
 80006a4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_GPIO_Init+0x174>)
 80006ba:	f002 f8e9 	bl	8002890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2028      	movs	r0, #40	; 0x28
 80006c4:	f002 f893 	bl	80027ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c8:	2028      	movs	r0, #40	; 0x28
 80006ca:	f002 f8aa 	bl	8002822 <HAL_NVIC_EnableIRQ>

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	58024400 	.word	0x58024400
 80006dc:	58020000 	.word	0x58020000
 80006e0:	58020400 	.word	0x58020400
 80006e4:	58021000 	.word	0x58021000

080006e8 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4604      	mov	r4, r0
 80006f0:	4608      	mov	r0, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	4623      	mov	r3, r4
 80006f8:	80fb      	strh	r3, [r7, #6]
 80006fa:	4603      	mov	r3, r0
 80006fc:	80bb      	strh	r3, [r7, #4]
 80006fe:	460b      	mov	r3, r1
 8000700:	807b      	strh	r3, [r7, #2]
 8000702:	4613      	mov	r3, r2
 8000704:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;
 8000706:	4b62      	ldr	r3, [pc, #392]	; (8000890 <LCD_ShowChar+0x1a8>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	817b      	strh	r3, [r7, #10]

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 800070c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000710:	3b20      	subs	r3, #32
 8000712:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 8000716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800071a:	085b      	lsrs	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	b29a      	uxth	r2, r3
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	4413      	add	r3, r2
 8000724:	b29b      	uxth	r3, r3
 8000726:	3b01      	subs	r3, #1
 8000728:	b29c      	uxth	r4, r3
 800072a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800072e:	b29a      	uxth	r2, r3
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	b29b      	uxth	r3, r3
 8000736:	3b01      	subs	r3, #1
 8000738:	b29b      	uxth	r3, r3
 800073a:	88b9      	ldrh	r1, [r7, #4]
 800073c:	88f8      	ldrh	r0, [r7, #6]
 800073e:	4622      	mov	r2, r4
 8000740:	f000 fed6 	bl	80014f0 <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8000744:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000748:	2b00      	cmp	r3, #0
 800074a:	d143      	bne.n	80007d4 <LCD_ShowChar+0xec>
	{
		for(pos=0;pos<size;pos++)
 800074c:	2300      	movs	r3, #0
 800074e:	73bb      	strb	r3, [r7, #14]
 8000750:	e03a      	b.n	80007c8 <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8000752:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000756:	2b0c      	cmp	r3, #12
 8000758:	d10c      	bne.n	8000774 <LCD_ShowChar+0x8c>
 800075a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800075e:	7bb9      	ldrb	r1, [r7, #14]
 8000760:	484c      	ldr	r0, [pc, #304]	; (8000894 <LCD_ShowChar+0x1ac>)
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4403      	add	r3, r0
 800076c:	440b      	add	r3, r1
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	e008      	b.n	8000786 <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 8000774:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000778:	7bbb      	ldrb	r3, [r7, #14]
 800077a:	4947      	ldr	r1, [pc, #284]	; (8000898 <LCD_ShowChar+0x1b0>)
 800077c:	0112      	lsls	r2, r2, #4
 800077e:	440a      	add	r2, r1
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8000786:	2300      	movs	r3, #0
 8000788:	737b      	strb	r3, [r7, #13]
 800078a:	e013      	b.n	80007b4 <LCD_ShowChar+0xcc>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <LCD_ShowChar+0xb8>
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fcb5 	bl	8001108 <Lcd_WriteData_16Bit>
 800079e:	e003      	b.n	80007a8 <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc);
 80007a0:	883b      	ldrh	r3, [r7, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fcb0 	bl	8001108 <Lcd_WriteData_16Bit>
				temp>>=1;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80007ae:	7b7b      	ldrb	r3, [r7, #13]
 80007b0:	3301      	adds	r3, #1
 80007b2:	737b      	strb	r3, [r7, #13]
 80007b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	7b7a      	ldrb	r2, [r7, #13]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d3e4      	bcc.n	800078c <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 80007c2:	7bbb      	ldrb	r3, [r7, #14]
 80007c4:	3301      	adds	r3, #1
 80007c6:	73bb      	strb	r3, [r7, #14]
 80007c8:	7bba      	ldrb	r2, [r7, #14]
 80007ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d3bf      	bcc.n	8000752 <LCD_ShowChar+0x6a>
 80007d2:	e049      	b.n	8000868 <LCD_ShowChar+0x180>
		    }

		}
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	73bb      	strb	r3, [r7, #14]
 80007d8:	e041      	b.n	800085e <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 80007da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007de:	2b0c      	cmp	r3, #12
 80007e0:	d10c      	bne.n	80007fc <LCD_ShowChar+0x114>
 80007e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80007e6:	7bb9      	ldrb	r1, [r7, #14]
 80007e8:	482a      	ldr	r0, [pc, #168]	; (8000894 <LCD_ShowChar+0x1ac>)
 80007ea:	4613      	mov	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4413      	add	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4403      	add	r3, r0
 80007f4:	440b      	add	r3, r1
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e008      	b.n	800080e <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 80007fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	4925      	ldr	r1, [pc, #148]	; (8000898 <LCD_ShowChar+0x1b0>)
 8000804:	0112      	lsls	r2, r2, #4
 8000806:	440a      	add	r2, r1
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 800080e:	2300      	movs	r3, #0
 8000810:	737b      	strb	r3, [r7, #13]
 8000812:	e01a      	b.n	800084a <LCD_ShowChar+0x162>
		    {
				POINT_COLOR=fc;
 8000814:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <LCD_ShowChar+0x1a8>)
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00c      	beq.n	800083e <LCD_ShowChar+0x156>
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	b29a      	uxth	r2, r3
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	4413      	add	r3, r2
 800082c:	b298      	uxth	r0, r3
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	b29a      	uxth	r2, r3
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	b29b      	uxth	r3, r3
 8000838:	4619      	mov	r1, r3
 800083a:	f000 fc8f 	bl	800115c <LCD_DrawPoint>
		        temp>>=1;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8000844:	7b7b      	ldrb	r3, [r7, #13]
 8000846:	3301      	adds	r3, #1
 8000848:	737b      	strb	r3, [r7, #13]
 800084a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800084e:	085b      	lsrs	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	7b7a      	ldrb	r2, [r7, #13]
 8000854:	429a      	cmp	r2, r3
 8000856:	d3dd      	bcc.n	8000814 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8000858:	7bbb      	ldrb	r3, [r7, #14]
 800085a:	3301      	adds	r3, #1
 800085c:	73bb      	strb	r3, [r7, #14]
 800085e:	7bba      	ldrb	r2, [r7, #14]
 8000860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000864:	429a      	cmp	r2, r3
 8000866:	d3b8      	bcc.n	80007da <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;
 8000868:	4a09      	ldr	r2, [pc, #36]	; (8000890 <LCD_ShowChar+0x1a8>)
 800086a:	897b      	ldrh	r3, [r7, #10]
 800086c:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <LCD_ShowChar+0x1b4>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	b29a      	uxth	r2, r3
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <LCD_ShowChar+0x1b4>)
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	3b01      	subs	r3, #1
 800087c:	b29b      	uxth	r3, r3
 800087e:	2100      	movs	r1, #0
 8000880:	2000      	movs	r0, #0
 8000882:	f000 fe35 	bl	80014f0 <LCD_SetWindows>
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	bf00      	nop
 8000890:	240000f6 	.word	0x240000f6
 8000894:	08006608 	.word	0x08006608
 8000898:	08006a7c 	.word	0x08006a7c
 800089c:	240000e8 	.word	0x240000e8

080008a0 <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4623      	mov	r3, r4
 80008b0:	80fb      	strh	r3, [r7, #6]
 80008b2:	4603      	mov	r3, r0
 80008b4:	80bb      	strh	r3, [r7, #4]
 80008b6:	460b      	mov	r3, r1
 80008b8:	807b      	strh	r3, [r7, #2]
 80008ba:	4613      	mov	r3, r2
 80008bc:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//�Զ�ͳ�ƺ�����Ŀ
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	813b      	strh	r3, [r7, #8]


	for (k=0;k<HZnum;k++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	81bb      	strh	r3, [r7, #12]
 80008ca:	e083      	b.n	80009d4 <GUI_DrawFont16+0x134>
	{
	  if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 80008cc:	89ba      	ldrh	r2, [r7, #12]
 80008ce:	494c      	ldr	r1, [pc, #304]	; (8000a00 <GUI_DrawFont16+0x160>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	4413      	add	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	440b      	add	r3, r1
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d174      	bne.n	80009ce <GUI_DrawFont16+0x12e>
 80008e4:	89ba      	ldrh	r2, [r7, #12]
 80008e6:	4946      	ldr	r1, [pc, #280]	; (8000a00 <GUI_DrawFont16+0x160>)
 80008e8:	4613      	mov	r3, r2
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4413      	add	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	440b      	add	r3, r1
 80008f2:	3301      	adds	r3, #1
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	3301      	adds	r3, #1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d166      	bne.n	80009ce <GUI_DrawFont16+0x12e>
	  { 	LCD_SetWindows(x,y,x+16-1,y+16-1);
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	330f      	adds	r3, #15
 8000904:	b29a      	uxth	r2, r3
 8000906:	88bb      	ldrh	r3, [r7, #4]
 8000908:	330f      	adds	r3, #15
 800090a:	b29b      	uxth	r3, r3
 800090c:	88b9      	ldrh	r1, [r7, #4]
 800090e:	88f8      	ldrh	r0, [r7, #6]
 8000910:	f000 fdee 	bl	80014f0 <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e056      	b.n	80009c8 <GUI_DrawFont16+0x128>
		    {
				for(j=0;j<8;j++)
 800091a:	2300      	movs	r3, #0
 800091c:	73bb      	strb	r3, [r7, #14]
 800091e:	e04d      	b.n	80009bc <GUI_DrawFont16+0x11c>
		    	{
					if(!mode) //�ǵ��ӷ�ʽ
 8000920:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000924:	2b00      	cmp	r3, #0
 8000926:	d11c      	bne.n	8000962 <GUI_DrawFont16+0xc2>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8000928:	89ba      	ldrh	r2, [r7, #12]
 800092a:	7bf9      	ldrb	r1, [r7, #15]
 800092c:	4834      	ldr	r0, [pc, #208]	; (8000a00 <GUI_DrawFont16+0x160>)
 800092e:	4613      	mov	r3, r2
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	4413      	add	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4403      	add	r3, r0
 8000938:	440b      	add	r3, r1
 800093a:	3302      	adds	r3, #2
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	4619      	mov	r1, r3
 8000940:	7bbb      	ldrb	r3, [r7, #14]
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	fa42 f303 	asr.w	r3, r2, r3
 8000948:	400b      	ands	r3, r1
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <GUI_DrawFont16+0xb8>
 800094e:	887b      	ldrh	r3, [r7, #2]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fbd9 	bl	8001108 <Lcd_WriteData_16Bit>
 8000956:	e02e      	b.n	80009b6 <GUI_DrawFont16+0x116>
						else Lcd_WriteData_16Bit(bc);
 8000958:	883b      	ldrh	r3, [r7, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fbd4 	bl	8001108 <Lcd_WriteData_16Bit>
 8000960:	e029      	b.n	80009b6 <GUI_DrawFont16+0x116>
					}
					else
					{
						POINT_COLOR=fc;
 8000962:	4a28      	ldr	r2, [pc, #160]	; (8000a04 <GUI_DrawFont16+0x164>)
 8000964:	887b      	ldrh	r3, [r7, #2]
 8000966:	8013      	strh	r3, [r2, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8000968:	89ba      	ldrh	r2, [r7, #12]
 800096a:	7bf9      	ldrb	r1, [r7, #15]
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <GUI_DrawFont16+0x160>)
 800096e:	4613      	mov	r3, r2
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	4413      	add	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4403      	add	r3, r0
 8000978:	440b      	add	r3, r1
 800097a:	3302      	adds	r3, #2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4619      	mov	r1, r3
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	fa42 f303 	asr.w	r3, r2, r3
 8000988:	400b      	ands	r3, r1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <GUI_DrawFont16+0xfa>
 800098e:	88ba      	ldrh	r2, [r7, #4]
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fbe1 	bl	800115c <LCD_DrawPoint>
						x++;
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	3301      	adds	r3, #1
 800099e:	80fb      	strh	r3, [r7, #6]
						if((x-x0)==16)
 80009a0:	88fa      	ldrh	r2, [r7, #6]
 80009a2:	897b      	ldrh	r3, [r7, #10]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	2b10      	cmp	r3, #16
 80009a8:	d105      	bne.n	80009b6 <GUI_DrawFont16+0x116>
						{
							x=x0;
 80009aa:	897b      	ldrh	r3, [r7, #10]
 80009ac:	80fb      	strh	r3, [r7, #6]
							y++;
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	3301      	adds	r3, #1
 80009b2:	80bb      	strh	r3, [r7, #4]
							break;
 80009b4:	e005      	b.n	80009c2 <GUI_DrawFont16+0x122>
				for(j=0;j<8;j++)
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	3301      	adds	r3, #1
 80009ba:	73bb      	strb	r3, [r7, #14]
 80009bc:	7bbb      	ldrb	r3, [r7, #14]
 80009be:	2b07      	cmp	r3, #7
 80009c0:	d9ae      	bls.n	8000920 <GUI_DrawFont16+0x80>
		    for(i=0;i<16*2;i++)
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	3301      	adds	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b1f      	cmp	r3, #31
 80009cc:	d9a5      	bls.n	800091a <GUI_DrawFont16+0x7a>
	for (k=0;k<HZnum;k++)
 80009ce:	89bb      	ldrh	r3, [r7, #12]
 80009d0:	3301      	adds	r3, #1
 80009d2:	81bb      	strh	r3, [r7, #12]
 80009d4:	89ba      	ldrh	r2, [r7, #12]
 80009d6:	893b      	ldrh	r3, [r7, #8]
 80009d8:	429a      	cmp	r2, r3
 80009da:	f4ff af77 	bcc.w	80008cc <GUI_DrawFont16+0x2c>

		}
		continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <GUI_DrawFont16+0x168>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <GUI_DrawFont16+0x168>)
 80009e8:	885b      	ldrh	r3, [r3, #2]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fd7d 	bl	80014f0 <LCD_SetWindows>
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	bf00      	nop
 8000a00:	0800706c 	.word	0x0800706c
 8000a04:	240000f6 	.word	0x240000f6
 8000a08:	240000e8 	.word	0x240000e8

08000a0c <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4604      	mov	r4, r0
 8000a14:	4608      	mov	r0, r1
 8000a16:	4611      	mov	r1, r2
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4623      	mov	r3, r4
 8000a1c:	80fb      	strh	r3, [r7, #6]
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80bb      	strh	r3, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	807b      	strh	r3, [r7, #2]
 8000a26:	4613      	mov	r3, r2
 8000a28:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 8000a2e:	2307      	movs	r3, #7
 8000a30:	813b      	strh	r3, [r7, #8]

			for (k=0;k<HZnum;k++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	81bb      	strh	r3, [r7, #12]
 8000a36:	e07f      	b.n	8000b38 <GUI_DrawFont24+0x12c>
			{
			  if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 8000a38:	89bb      	ldrh	r3, [r7, #12]
 8000a3a:	4a4a      	ldr	r2, [pc, #296]	; (8000b64 <GUI_DrawFont24+0x158>)
 8000a3c:	214a      	movs	r1, #74	; 0x4a
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d171      	bne.n	8000b32 <GUI_DrawFont24+0x126>
 8000a4e:	89bb      	ldrh	r3, [r7, #12]
 8000a50:	4a44      	ldr	r2, [pc, #272]	; (8000b64 <GUI_DrawFont24+0x158>)
 8000a52:	214a      	movs	r1, #74	; 0x4a
 8000a54:	fb01 f303 	mul.w	r3, r1, r3
 8000a58:	4413      	add	r3, r2
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	3301      	adds	r3, #1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d164      	bne.n	8000b32 <GUI_DrawFont24+0x126>
			  { 	LCD_SetWindows(x,y,x+24-1,y+24-1);
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	3317      	adds	r3, #23
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	88bb      	ldrh	r3, [r7, #4]
 8000a70:	3317      	adds	r3, #23
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	88b9      	ldrh	r1, [r7, #4]
 8000a76:	88f8      	ldrh	r0, [r7, #6]
 8000a78:	f000 fd3a 	bl	80014f0 <LCD_SetWindows>
				    for(i=0;i<24*3;i++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e054      	b.n	8000b2c <GUI_DrawFont24+0x120>
				    {
							for(j=0;j<8;j++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	73bb      	strb	r3, [r7, #14]
 8000a86:	e04b      	b.n	8000b20 <GUI_DrawFont24+0x114>
							{
								if(!mode) //�ǵ��ӷ�ʽ
 8000a88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <GUI_DrawFont24+0xbc>
								{
									if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8000a90:	89ba      	ldrh	r2, [r7, #12]
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	4933      	ldr	r1, [pc, #204]	; (8000b64 <GUI_DrawFont24+0x158>)
 8000a96:	204a      	movs	r0, #74	; 0x4a
 8000a98:	fb00 f202 	mul.w	r2, r0, r2
 8000a9c:	440a      	add	r2, r1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	7bbb      	ldrb	r3, [r7, #14]
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	fa42 f303 	asr.w	r3, r2, r3
 8000aae:	400b      	ands	r3, r1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <GUI_DrawFont24+0xb2>
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fb26 	bl	8001108 <Lcd_WriteData_16Bit>
 8000abc:	e02d      	b.n	8000b1a <GUI_DrawFont24+0x10e>
									else Lcd_WriteData_16Bit(bc);
 8000abe:	883b      	ldrh	r3, [r7, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fb21 	bl	8001108 <Lcd_WriteData_16Bit>
 8000ac6:	e028      	b.n	8000b1a <GUI_DrawFont24+0x10e>
								}
							else
							{
								POINT_COLOR=fc;
 8000ac8:	4a27      	ldr	r2, [pc, #156]	; (8000b68 <GUI_DrawFont24+0x15c>)
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	8013      	strh	r3, [r2, #0]
								if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8000ace:	89ba      	ldrh	r2, [r7, #12]
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	4924      	ldr	r1, [pc, #144]	; (8000b64 <GUI_DrawFont24+0x158>)
 8000ad4:	204a      	movs	r0, #74	; 0x4a
 8000ad6:	fb00 f202 	mul.w	r2, r0, r2
 8000ada:	440a      	add	r2, r1
 8000adc:	4413      	add	r3, r2
 8000ade:	3302      	adds	r3, #2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	fa42 f303 	asr.w	r3, r2, r3
 8000aec:	400b      	ands	r3, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <GUI_DrawFont24+0xf2>
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fb2f 	bl	800115c <LCD_DrawPoint>
								x++;
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	3301      	adds	r3, #1
 8000b02:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==24)
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	897b      	ldrh	r3, [r7, #10]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b18      	cmp	r3, #24
 8000b0c:	d105      	bne.n	8000b1a <GUI_DrawFont24+0x10e>
								{
									x=x0;
 8000b0e:	897b      	ldrh	r3, [r7, #10]
 8000b10:	80fb      	strh	r3, [r7, #6]
									y++;
 8000b12:	88bb      	ldrh	r3, [r7, #4]
 8000b14:	3301      	adds	r3, #1
 8000b16:	80bb      	strh	r3, [r7, #4]
									break;
 8000b18:	e005      	b.n	8000b26 <GUI_DrawFont24+0x11a>
							for(j=0;j<8;j++)
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	73bb      	strb	r3, [r7, #14]
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	d9b0      	bls.n	8000a88 <GUI_DrawFont24+0x7c>
				    for(i=0;i<24*3;i++)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b47      	cmp	r3, #71	; 0x47
 8000b30:	d9a7      	bls.n	8000a82 <GUI_DrawFont24+0x76>
			for (k=0;k<HZnum;k++)
 8000b32:	89bb      	ldrh	r3, [r7, #12]
 8000b34:	3301      	adds	r3, #1
 8000b36:	81bb      	strh	r3, [r7, #12]
 8000b38:	89ba      	ldrh	r2, [r7, #12]
 8000b3a:	893b      	ldrh	r3, [r7, #8]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f4ff af7b 	bcc.w	8000a38 <GUI_DrawFont24+0x2c>

				}
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <GUI_DrawFont24+0x160>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <GUI_DrawFont24+0x160>)
 8000b4c:	885b      	ldrh	r3, [r3, #2]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 fccb 	bl	80014f0 <LCD_SetWindows>
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	080078ec 	.word	0x080078ec
 8000b68:	240000f6 	.word	0x240000f6
 8000b6c:	240000e8 	.word	0x240000e8

08000b70 <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4604      	mov	r4, r0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4623      	mov	r3, r4
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	4603      	mov	r3, r0
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//�Զ�ͳ�ƺ�����Ŀ
 8000b92:	2304      	movs	r3, #4
 8000b94:	813b      	strh	r3, [r7, #8]
	for (k=0;k<HZnum;k++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	81bb      	strh	r3, [r7, #12]
 8000b9a:	e084      	b.n	8000ca6 <GUI_DrawFont32+0x136>
			{
			  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8000b9c:	89ba      	ldrh	r2, [r7, #12]
 8000b9e:	494c      	ldr	r1, [pc, #304]	; (8000cd0 <GUI_DrawFont32+0x160>)
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	019b      	lsls	r3, r3, #6
 8000ba4:	4413      	add	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	440b      	add	r3, r1
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d175      	bne.n	8000ca0 <GUI_DrawFont32+0x130>
 8000bb4:	89ba      	ldrh	r2, [r7, #12]
 8000bb6:	4946      	ldr	r1, [pc, #280]	; (8000cd0 <GUI_DrawFont32+0x160>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	019b      	lsls	r3, r3, #6
 8000bbc:	4413      	add	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d167      	bne.n	8000ca0 <GUI_DrawFont32+0x130>
			  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	331f      	adds	r3, #31
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	331f      	adds	r3, #31
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	88b9      	ldrh	r1, [r7, #4]
 8000bde:	88f8      	ldrh	r0, [r7, #6]
 8000be0:	f000 fc86 	bl	80014f0 <LCD_SetWindows>
				    for(i=0;i<32*4;i++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e056      	b.n	8000c98 <GUI_DrawFont32+0x128>
				    {
						for(j=0;j<8;j++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	73bb      	strb	r3, [r7, #14]
 8000bee:	e04d      	b.n	8000c8c <GUI_DrawFont32+0x11c>
				    	{
							if(!mode) //�ǵ��ӷ�ʽ
 8000bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d11c      	bne.n	8000c32 <GUI_DrawFont32+0xc2>
							{
								if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8000bf8:	89ba      	ldrh	r2, [r7, #12]
 8000bfa:	7bf9      	ldrb	r1, [r7, #15]
 8000bfc:	4834      	ldr	r0, [pc, #208]	; (8000cd0 <GUI_DrawFont32+0x160>)
 8000bfe:	4613      	mov	r3, r2
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	4413      	add	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4403      	add	r3, r0
 8000c08:	440b      	add	r3, r1
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	7bbb      	ldrb	r3, [r7, #14]
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	fa42 f303 	asr.w	r3, r2, r3
 8000c18:	400b      	ands	r3, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d004      	beq.n	8000c28 <GUI_DrawFont32+0xb8>
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fa71 	bl	8001108 <Lcd_WriteData_16Bit>
 8000c26:	e02e      	b.n	8000c86 <GUI_DrawFont32+0x116>
								else Lcd_WriteData_16Bit(bc);
 8000c28:	883b      	ldrh	r3, [r7, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fa6c 	bl	8001108 <Lcd_WriteData_16Bit>
 8000c30:	e029      	b.n	8000c86 <GUI_DrawFont32+0x116>
							}
							else
							{
								POINT_COLOR=fc;
 8000c32:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <GUI_DrawFont32+0x164>)
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	8013      	strh	r3, [r2, #0]
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8000c38:	89ba      	ldrh	r2, [r7, #12]
 8000c3a:	7bf9      	ldrb	r1, [r7, #15]
 8000c3c:	4824      	ldr	r0, [pc, #144]	; (8000cd0 <GUI_DrawFont32+0x160>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	019b      	lsls	r3, r3, #6
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4403      	add	r3, r0
 8000c48:	440b      	add	r3, r1
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	fa42 f303 	asr.w	r3, r2, r3
 8000c58:	400b      	ands	r3, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d005      	beq.n	8000c6a <GUI_DrawFont32+0xfa>
 8000c5e:	88ba      	ldrh	r2, [r7, #4]
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fa79 	bl	800115c <LCD_DrawPoint>
								x++;
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==32)
 8000c70:	88fa      	ldrh	r2, [r7, #6]
 8000c72:	897b      	ldrh	r3, [r7, #10]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b20      	cmp	r3, #32
 8000c78:	d105      	bne.n	8000c86 <GUI_DrawFont32+0x116>
								{
									x=x0;
 8000c7a:	897b      	ldrh	r3, [r7, #10]
 8000c7c:	80fb      	strh	r3, [r7, #6]
									y++;
 8000c7e:	88bb      	ldrh	r3, [r7, #4]
 8000c80:	3301      	adds	r3, #1
 8000c82:	80bb      	strh	r3, [r7, #4]
									break;
 8000c84:	e005      	b.n	8000c92 <GUI_DrawFont32+0x122>
						for(j=0;j<8;j++)
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	73bb      	strb	r3, [r7, #14]
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	d9ae      	bls.n	8000bf0 <GUI_DrawFont32+0x80>
				    for(i=0;i<32*4;i++)
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	3301      	adds	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	daa4      	bge.n	8000bea <GUI_DrawFont32+0x7a>
	for (k=0;k<HZnum;k++)
 8000ca0:	89bb      	ldrh	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	81bb      	strh	r3, [r7, #12]
 8000ca6:	89ba      	ldrh	r2, [r7, #12]
 8000ca8:	893b      	ldrh	r3, [r7, #8]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f4ff af76 	bcc.w	8000b9c <GUI_DrawFont32+0x2c>

				}
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <GUI_DrawFont32+0x168>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <GUI_DrawFont32+0x168>)
 8000cba:	885b      	ldrh	r3, [r3, #2]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 fc14 	bl	80014f0 <LCD_SetWindows>
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	08007af4 	.word	0x08007af4
 8000cd4:	240000f6 	.word	0x240000f6
 8000cd8:	240000e8 	.word	0x240000e8

08000cdc <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8000cdc:	b5b0      	push	{r4, r5, r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af04      	add	r7, sp, #16
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4623      	mov	r3, r4
 8000cec:	80fb      	strh	r3, [r7, #6]
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80bb      	strh	r3, [r7, #4]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	807b      	strh	r3, [r7, #2]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	803b      	strh	r3, [r7, #0]
	u16 x0=x;
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ���������
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 8000d02:	e0af      	b.n	8000e64 <Show_Str+0x188>
    {
        if(!bHz)
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d161      	bne.n	8000dce <Show_Str+0xf2>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 8000d0a:	88fa      	ldrh	r2, [r7, #6]
 8000d0c:	4b5b      	ldr	r3, [pc, #364]	; (8000e7c <Show_Str+0x1a0>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d16:	085b      	lsrs	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	1acb      	subs	r3, r1, r3
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f300 80a7 	bgt.w	8000e70 <Show_Str+0x194>
 8000d22:	88ba      	ldrh	r2, [r7, #4]
 8000d24:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <Show_Str+0x1a0>)
 8000d26:	885b      	ldrh	r3, [r3, #2]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d2e:	1acb      	subs	r3, r1, r3
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f300 809d 	bgt.w	8000e70 <Show_Str+0x194>
			return;
	        if(*str>0x80)bHz=1;//����
 8000d36:	6a3b      	ldr	r3, [r7, #32]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b80      	cmp	r3, #128	; 0x80
 8000d3c:	d902      	bls.n	8000d44 <Show_Str+0x68>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e08f      	b.n	8000e64 <Show_Str+0x188>
	        else              //�ַ�
	        {
		        if(*str==0x0D)//���з���
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b0d      	cmp	r3, #13
 8000d4a:	d10b      	bne.n	8000d64 <Show_Str+0x88>
		        {
		            y+=size;
 8000d4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8000d58:	89bb      	ldrh	r3, [r7, #12]
 8000d5a:	80fb      	strh	r3, [r7, #6]
		            str++;
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
 8000d62:	e030      	b.n	8000dc6 <Show_Str+0xea>
		        }
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8000d64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d68:	2b10      	cmp	r3, #16
 8000d6a:	d913      	bls.n	8000d94 <Show_Str+0xb8>
					{
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	883d      	ldrh	r5, [r7, #0]
 8000d72:	887c      	ldrh	r4, [r7, #2]
 8000d74:	88b9      	ldrh	r1, [r7, #4]
 8000d76:	88f8      	ldrh	r0, [r7, #6]
 8000d78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000d7c:	9202      	str	r2, [sp, #8]
 8000d7e:	2210      	movs	r2, #16
 8000d80:	9201      	str	r2, [sp, #4]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	462b      	mov	r3, r5
 8000d86:	4622      	mov	r2, r4
 8000d88:	f7ff fcae 	bl	80006e8 <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ��
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	3308      	adds	r3, #8
 8000d90:	80fb      	strh	r3, [r7, #6]
 8000d92:	e018      	b.n	8000dc6 <Show_Str+0xea>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	883d      	ldrh	r5, [r7, #0]
 8000d9a:	887c      	ldrh	r4, [r7, #2]
 8000d9c:	88b9      	ldrh	r1, [r7, #4]
 8000d9e:	88f8      	ldrh	r0, [r7, #6]
 8000da0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000da4:	9202      	str	r2, [sp, #8]
 8000da6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000daa:	9201      	str	r2, [sp, #4]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	462b      	mov	r3, r5
 8000db0:	4622      	mov	r2, r4
 8000db2:	f7ff fc99 	bl	80006e8 <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ��
 8000db6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	80fb      	strh	r3, [r7, #6]
					}
				}
				str++;
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
 8000dcc:	e04a      	b.n	8000e64 <Show_Str+0x188>

	        }
        }else//����
        {
			if(x>(lcddev.width-size)||y>(lcddev.height-size))
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <Show_Str+0x1a0>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dda:	1acb      	subs	r3, r1, r3
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dc49      	bgt.n	8000e74 <Show_Str+0x198>
 8000de0:	88ba      	ldrh	r2, [r7, #4]
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <Show_Str+0x1a0>)
 8000de4:	885b      	ldrh	r3, [r3, #2]
 8000de6:	4619      	mov	r1, r3
 8000de8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	429a      	cmp	r2, r3
 8000df0:	dc40      	bgt.n	8000e74 <Show_Str+0x198>
			return;
            bHz=0;//�к��ֿ�
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
			if(size==32)
 8000df6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dfa:	2b20      	cmp	r3, #32
 8000dfc:	d10c      	bne.n	8000e18 <Show_Str+0x13c>
			GUI_DrawFont32(x,y,fc,bc,str,mode);
 8000dfe:	883c      	ldrh	r4, [r7, #0]
 8000e00:	887a      	ldrh	r2, [r7, #2]
 8000e02:	88b9      	ldrh	r1, [r7, #4]
 8000e04:	88f8      	ldrh	r0, [r7, #6]
 8000e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	4623      	mov	r3, r4
 8000e12:	f7ff fead 	bl	8000b70 <GUI_DrawFont32>
 8000e16:	e01c      	b.n	8000e52 <Show_Str+0x176>
			else if(size==24)
 8000e18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e1c:	2b18      	cmp	r3, #24
 8000e1e:	d10c      	bne.n	8000e3a <Show_Str+0x15e>
			GUI_DrawFont24(x,y,fc,bc,str,mode);
 8000e20:	883c      	ldrh	r4, [r7, #0]
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	88b9      	ldrh	r1, [r7, #4]
 8000e26:	88f8      	ldrh	r0, [r7, #6]
 8000e28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	6a3b      	ldr	r3, [r7, #32]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4623      	mov	r3, r4
 8000e34:	f7ff fdea 	bl	8000a0c <GUI_DrawFont24>
 8000e38:	e00b      	b.n	8000e52 <Show_Str+0x176>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 8000e3a:	883c      	ldrh	r4, [r7, #0]
 8000e3c:	887a      	ldrh	r2, [r7, #2]
 8000e3e:	88b9      	ldrh	r1, [r7, #4]
 8000e40:	88f8      	ldrh	r0, [r7, #6]
 8000e42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	4623      	mov	r3, r4
 8000e4e:	f7ff fd27 	bl	80008a0 <GUI_DrawFont16>

	        str+=2;
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	3302      	adds	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
	        x+=size;//��һ������ƫ��
 8000e58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	4413      	add	r3, r2
 8000e62:	80fb      	strh	r3, [r7, #6]
    while(*str!=0)//����δ����
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f47f af4b 	bne.w	8000d04 <Show_Str+0x28>
 8000e6e:	e002      	b.n	8000e76 <Show_Str+0x19a>
			return;
 8000e70:	bf00      	nop
 8000e72:	e000      	b.n	8000e76 <Show_Str+0x19a>
			return;
 8000e74:	bf00      	nop
        }
    }
}
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7c:	240000e8 	.word	0x240000e8

08000e80 <Gui_StrCenter>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Gui_StrCenter(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	4603      	mov	r3, r0
 8000e94:	80bb      	strh	r3, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	807b      	strh	r3, [r7, #2]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	803b      	strh	r3, [r7, #0]
	u16 len=strlen((const char *)str);
 8000e9e:	6a38      	ldr	r0, [r7, #32]
 8000ea0:	f7ff fa1e 	bl	80002e0 <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	81fb      	strh	r3, [r7, #14]
	u16 x1=(lcddev.width-len*8)/2;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <Gui_StrCenter+0x64>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	da00      	bge.n	8000eba <Gui_StrCenter+0x3a>
 8000eb8:	3301      	adds	r3, #1
 8000eba:	105b      	asrs	r3, r3, #1
 8000ebc:	81bb      	strh	r3, [r7, #12]
	Show_Str(x1,y,fc,bc,str,size,mode);
 8000ebe:	883c      	ldrh	r4, [r7, #0]
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	88b9      	ldrh	r1, [r7, #4]
 8000ec4:	89b8      	ldrh	r0, [r7, #12]
 8000ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	f7ff ff00 	bl	8000cdc <Show_Str>
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	240000e8 	.word	0x240000e8

08000ee8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_I2C1_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <MX_I2C1_Init+0x7c>)
 8000ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f24:	f001 feba 	bl	8002c9c <HAL_I2C_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f2e:	f000 fda7 	bl	8001a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f36:	f001 ff41 	bl	8002dbc <HAL_I2CEx_ConfigAnalogFilter>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f40:	f000 fd9e 	bl	8001a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f48:	f001 ff83 	bl	8002e52 <HAL_I2CEx_ConfigDigitalFilter>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f52:	f000 fd95 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	24000094 	.word	0x24000094
 8000f60:	40005400 	.word	0x40005400
 8000f64:	00602173 	.word	0x00602173

08000f68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0ba      	sub	sp, #232	; 0xe8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	22c0      	movs	r2, #192	; 0xc0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 fea9 	bl	8005ce0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a27      	ldr	r2, [pc, #156]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d146      	bne.n	8001026 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f98:	f04f 0208 	mov.w	r2, #8
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 ff5f 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000fbc:	f000 fd60 	bl	8001a80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_I2C_MspInit+0xcc>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_I2C_MspInit+0xcc>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_I2C_MspInit+0xcc>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fde:	23c0      	movs	r3, #192	; 0xc0
 8000fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe4:	2312      	movs	r3, #18
 8000fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001000:	4619      	mov	r1, r3
 8001002:	480d      	ldr	r0, [pc, #52]	; (8001038 <HAL_I2C_MspInit+0xd0>)
 8001004:	f001 fc44 	bl	8002890 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_I2C_MspInit+0xcc>)
 800100a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800100e:	4a09      	ldr	r2, [pc, #36]	; (8001034 <HAL_I2C_MspInit+0xcc>)
 8001010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001014:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_I2C_MspInit+0xcc>)
 800101a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800101e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001026:	bf00      	nop
 8001028:	37e8      	adds	r7, #232	; 0xe8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40005400 	.word	0x40005400
 8001034:	58024400 	.word	0x58024400
 8001038:	58020400 	.word	0x58020400

0800103c <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <LCD_WR_REG+0x40>)
 800104e:	f001 fde7 	bl	8002c20 <HAL_GPIO_WritePin>
	 LCD_RS_CLR;
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <LCD_WR_REG+0x40>)
 800105a:	f001 fde1 	bl	8002c20 <HAL_GPIO_WritePin>
   SPIv_WriteData(data);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f8bb 	bl	80021dc <SPIv_WriteData>
   LCD_CS_SET;
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <LCD_WR_REG+0x40>)
 800106e:	f001 fdd7 	bl	8002c20 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	58021000 	.word	0x58021000

08001080 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <LCD_WR_DATA+0x40>)
 8001092:	f001 fdc5 	bl	8002c20 <HAL_GPIO_WritePin>
	 LCD_RS_SET;
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <LCD_WR_DATA+0x40>)
 800109e:	f001 fdbf 	bl	8002c20 <HAL_GPIO_WritePin>
   SPIv_WriteData(data);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 f899 	bl	80021dc <SPIv_WriteData>
   LCD_CS_SET;
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <LCD_WR_DATA+0x40>)
 80010b2:	f001 fdb5 	bl	8002c20 <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	58021000 	.word	0x58021000

080010c4 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffb0 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffcd 	bl	8001080 <LCD_WR_DATA>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_WriteRAM_Prepare(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <LCD_WriteRAM_Prepare+0x14>)
 80010f6:	891b      	ldrh	r3, [r3, #8]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff9e 	bl	800103c <LCD_WR_REG>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	240000e8 	.word	0x240000e8

08001108 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/
void Lcd_WriteData_16Bit(u16 Data)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
   LCD_CS_CLR;
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001118:	480f      	ldr	r0, [pc, #60]	; (8001158 <Lcd_WriteData_16Bit+0x50>)
 800111a:	f001 fd81 	bl	8002c20 <HAL_GPIO_WritePin>
   LCD_RS_SET;
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <Lcd_WriteData_16Bit+0x50>)
 8001126:	f001 fd7b 	bl	8002c20 <HAL_GPIO_WritePin>
   SPIv_WriteData(Data>>8);
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f001 f852 	bl	80021dc <SPIv_WriteData>
	 SPIv_WriteData(Data);
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f001 f84d 	bl	80021dc <SPIv_WriteData>
   LCD_CS_SET;
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <Lcd_WriteData_16Bit+0x50>)
 800114a:	f001 fd69 	bl	8002c20 <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58021000 	.word	0x58021000

0800115c <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_DrawPoint(u16 x,u16 y)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	80fb      	strh	r3, [r7, #6]
 8001168:	4613      	mov	r3, r2
 800116a:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ��
 800116c:	88ba      	ldrh	r2, [r7, #4]
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fa10 	bl	8001598 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR);
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <LCD_DrawPoint+0x30>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ffc3 	bl	8001108 <Lcd_WriteData_16Bit>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	240000f6 	.word	0x240000f6

08001190 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/
void LCD_Clear(u16 Color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <LCD_Clear+0x98>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <LCD_Clear+0x98>)
 80011a4:	885b      	ldrh	r3, [r3, #2]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2100      	movs	r1, #0
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f99f 	bl	80014f0 <LCD_SetWindows>
	LCD_CS_CLR;
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b8:	481c      	ldr	r0, [pc, #112]	; (800122c <LCD_Clear+0x9c>)
 80011ba:	f001 fd31 	bl	8002c20 <HAL_GPIO_WritePin>
	LCD_RS_SET;
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c4:	4819      	ldr	r0, [pc, #100]	; (800122c <LCD_Clear+0x9c>)
 80011c6:	f001 fd2b 	bl	8002c20 <HAL_GPIO_WritePin>
	for(i=0;i<lcddev.height;i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	e01a      	b.n	8001206 <LCD_Clear+0x76>
	{
    for(m=0;m<lcddev.width;m++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	e00e      	b.n	80011f4 <LCD_Clear+0x64>
    {
		SPIv_WriteData(Color>>8);
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	b29b      	uxth	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fffc 	bl	80021dc <SPIv_WriteData>
	 	SPIv_WriteData(Color);
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fff7 	bl	80021dc <SPIv_WriteData>
    for(m=0;m<lcddev.width;m++)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3301      	adds	r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <LCD_Clear+0x98>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d3ea      	bcc.n	80011d6 <LCD_Clear+0x46>
	for(i=0;i<lcddev.height;i++)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <LCD_Clear+0x98>)
 8001208:	885b      	ldrh	r3, [r3, #2]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4293      	cmp	r3, r2
 8001210:	d3de      	bcc.n	80011d0 <LCD_Clear+0x40>
		}
	}
	 LCD_CS_SET;
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <LCD_Clear+0x9c>)
 800121a:	f001 fd01 	bl	8002c20 <HAL_GPIO_WritePin>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	240000e8 	.word	0x240000e8
 800122c:	58021000 	.word	0x58021000

08001230 <LCD_GPIOInit>:
 * @function   :Initialization LCD screen GPIO
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_GPIOInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
		    GPIO_InitTypeDef GPIO_Initure;

   // __HAL_RCC_GPIOD_CLK_ENABLE();           //ʹ��GPIODʱ��
   // __HAL_RCC_GPIOB_CLK_ENABLE();           //ʹ��GPIOBʱ��
    __HAL_RCC_GPIOE_CLK_ENABLE();           //ʹ��GPIOBʱ��
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <LCD_GPIOInit+0x7c>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <LCD_GPIOInit+0x7c>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <LCD_GPIOInit+0x7c>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]

    //PF6
    GPIO_Initure.Pin=  LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin;         //PF6
 8001254:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001258:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //�������
 800125a:	2301      	movs	r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 800125e:	2301      	movs	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_VERY_HIGH;     //����
 8001262:	2303      	movs	r3, #3
 8001264:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOD,&GPIO_Initure);     //��ʼ��
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4811      	ldr	r0, [pc, #68]	; (80012b0 <LCD_GPIOInit+0x80>)
 800126c:	f001 fb10 	bl	8002890 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <LCD_GPIOInit+0x84>)
 8001278:	f001 fcd2 	bl	8002c20 <HAL_GPIO_WritePin>

		GPIO_Initure.Pin=GPIO_PIN_12| GPIO_PIN_14;            //PF6
 800127c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001280:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //�������
 8001282:	2301      	movs	r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 8001286:	2301      	movs	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_VERY_HIGH;     //����
 800128a:	2303      	movs	r3, #3
 800128c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOE,&GPIO_Initure);     //��ʼ��
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <LCD_GPIOInit+0x84>)
 8001294:	f001 fafc 	bl	8002890 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12| GPIO_PIN_14,GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <LCD_GPIOInit+0x84>)
 80012a0:	f001 fcbe 	bl	8002c20 <HAL_GPIO_WritePin>

		//GPIO_Initure.Pin=GPIO_PIN_14;
		//GPIO_Initure.Mode=GPIO_MODE_INPUT;  //�������
		//HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //��ʼ��
		//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
}
 80012a4:	bf00      	nop
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020c00 	.word	0x58020c00
 80012b4:	58021000 	.word	0x58021000

080012b8 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_RESET(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <LCD_RESET+0x2c>)
 80012c4:	f001 fcac 	bl	8002c20 <HAL_GPIO_WritePin>
	delay_ms(100);
 80012c8:	2064      	movs	r0, #100	; 0x64
 80012ca:	f7ff f937 	bl	800053c <delay_ms>
	LCD_RST_SET;
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <LCD_RESET+0x2c>)
 80012d6:	f001 fca3 	bl	8002c20 <HAL_GPIO_WritePin>
	delay_ms(50);
 80012da:	2032      	movs	r0, #50	; 0x32
 80012dc:	f7ff f92e 	bl	800053c <delay_ms>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	58021000 	.word	0x58021000

080012e8 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	LCD_GPIOInit();//LCD GPIO��ʼ��
 80012ec:	f7ff ffa0 	bl	8001230 <LCD_GPIOInit>
 	LCD_RESET(); //LCD ��λ
 80012f0:	f7ff ffe2 	bl	80012b8 <LCD_RESET>
//************* ST7796S��ʼ��**********//
	LCD_WR_REG(0xF0);
 80012f4:	20f0      	movs	r0, #240	; 0xf0
 80012f6:	f7ff fea1 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0xC3);
 80012fa:	20c3      	movs	r0, #195	; 0xc3
 80012fc:	f7ff fec0 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xF0);
 8001300:	20f0      	movs	r0, #240	; 0xf0
 8001302:	f7ff fe9b 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x96);
 8001306:	2096      	movs	r0, #150	; 0x96
 8001308:	f7ff feba 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0x36);
 800130c:	2036      	movs	r0, #54	; 0x36
 800130e:	f7ff fe95 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x68);
 8001312:	2068      	movs	r0, #104	; 0x68
 8001314:	f7ff feb4 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001318:	203a      	movs	r0, #58	; 0x3a
 800131a:	f7ff fe8f 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x05);
 800131e:	2005      	movs	r0, #5
 8001320:	f7ff feae 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xB0);
 8001324:	20b0      	movs	r0, #176	; 0xb0
 8001326:	f7ff fe89 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x80);
 800132a:	2080      	movs	r0, #128	; 0x80
 800132c:	f7ff fea8 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);
 8001330:	20b6      	movs	r0, #182	; 0xb6
 8001332:	f7ff fe83 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff fea2 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fe9f 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xB5);
 8001342:	20b5      	movs	r0, #181	; 0xb5
 8001344:	f7ff fe7a 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x02);
 8001348:	2002      	movs	r0, #2
 800134a:	f7ff fe99 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800134e:	2003      	movs	r0, #3
 8001350:	f7ff fe96 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fe93 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 800135a:	2004      	movs	r0, #4
 800135c:	f7ff fe90 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001360:	20b1      	movs	r0, #177	; 0xb1
 8001362:	f7ff fe6b 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x80);
 8001366:	2080      	movs	r0, #128	; 0x80
 8001368:	f7ff fe8a 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800136c:	2010      	movs	r0, #16
 800136e:	f7ff fe87 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xB4);
 8001372:	20b4      	movs	r0, #180	; 0xb4
 8001374:	f7ff fe62 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fe81 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xB7);
 800137e:	20b7      	movs	r0, #183	; 0xb7
 8001380:	f7ff fe5c 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0xC6);
 8001384:	20c6      	movs	r0, #198	; 0xc6
 8001386:	f7ff fe7b 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);
 800138a:	20c5      	movs	r0, #197	; 0xc5
 800138c:	f7ff fe56 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x24);
 8001390:	2024      	movs	r0, #36	; 0x24
 8001392:	f7ff fe75 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xE4);
 8001396:	20e4      	movs	r0, #228	; 0xe4
 8001398:	f7ff fe50 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x31);
 800139c:	2031      	movs	r0, #49	; 0x31
 800139e:	f7ff fe6f 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80013a2:	20e8      	movs	r0, #232	; 0xe8
 80013a4:	f7ff fe4a 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x40);
 80013a8:	2040      	movs	r0, #64	; 0x40
 80013aa:	f7ff fe69 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x8A);
 80013ae:	208a      	movs	r0, #138	; 0x8a
 80013b0:	f7ff fe66 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff fe63 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fe60 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x29);
 80013c0:	2029      	movs	r0, #41	; 0x29
 80013c2:	f7ff fe5d 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x19);
 80013c6:	2019      	movs	r0, #25
 80013c8:	f7ff fe5a 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0xA5);
 80013cc:	20a5      	movs	r0, #165	; 0xa5
 80013ce:	f7ff fe57 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x33);
 80013d2:	2033      	movs	r0, #51	; 0x33
 80013d4:	f7ff fe54 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xC2);
 80013d8:	20c2      	movs	r0, #194	; 0xc2
 80013da:	f7ff fe2f 	bl	800103c <LCD_WR_REG>
	LCD_WR_REG(0xA7);
 80013de:	20a7      	movs	r0, #167	; 0xa7
 80013e0:	f7ff fe2c 	bl	800103c <LCD_WR_REG>

	LCD_WR_REG(0xE0);
 80013e4:	20e0      	movs	r0, #224	; 0xe0
 80013e6:	f7ff fe29 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0xF0);
 80013ea:	20f0      	movs	r0, #240	; 0xf0
 80013ec:	f7ff fe48 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 80013f0:	2009      	movs	r0, #9
 80013f2:	f7ff fe45 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x13);
 80013f6:	2013      	movs	r0, #19
 80013f8:	f7ff fe42 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 80013fc:	2012      	movs	r0, #18
 80013fe:	f7ff fe3f 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8001402:	2012      	movs	r0, #18
 8001404:	f7ff fe3c 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001408:	202b      	movs	r0, #43	; 0x2b
 800140a:	f7ff fe39 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800140e:	203c      	movs	r0, #60	; 0x3c
 8001410:	f7ff fe36 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x44);
 8001414:	2044      	movs	r0, #68	; 0x44
 8001416:	f7ff fe33 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x4B);
 800141a:	204b      	movs	r0, #75	; 0x4b
 800141c:	f7ff fe30 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x1B);
 8001420:	201b      	movs	r0, #27
 8001422:	f7ff fe2d 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 8001426:	2018      	movs	r0, #24
 8001428:	f7ff fe2a 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800142c:	2017      	movs	r0, #23
 800142e:	f7ff fe27 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D);
 8001432:	201d      	movs	r0, #29
 8001434:	f7ff fe24 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x21);
 8001438:	2021      	movs	r0, #33	; 0x21
 800143a:	f7ff fe21 	bl	8001080 <LCD_WR_DATA>

	LCD_WR_REG(0XE1);
 800143e:	20e1      	movs	r0, #225	; 0xe1
 8001440:	f7ff fdfc 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0xF0);
 8001444:	20f0      	movs	r0, #240	; 0xf0
 8001446:	f7ff fe1b 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 800144a:	2009      	movs	r0, #9
 800144c:	f7ff fe18 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x13);
 8001450:	2013      	movs	r0, #19
 8001452:	f7ff fe15 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8001456:	200c      	movs	r0, #12
 8001458:	f7ff fe12 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 800145c:	200d      	movs	r0, #13
 800145e:	f7ff fe0f 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x27);
 8001462:	2027      	movs	r0, #39	; 0x27
 8001464:	f7ff fe0c 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x3B);
 8001468:	203b      	movs	r0, #59	; 0x3b
 800146a:	f7ff fe09 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x44);
 800146e:	2044      	movs	r0, #68	; 0x44
 8001470:	f7ff fe06 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x4D);
 8001474:	204d      	movs	r0, #77	; 0x4d
 8001476:	f7ff fe03 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x0B);
 800147a:	200b      	movs	r0, #11
 800147c:	f7ff fe00 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001480:	2017      	movs	r0, #23
 8001482:	f7ff fdfd 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001486:	2017      	movs	r0, #23
 8001488:	f7ff fdfa 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D);
 800148c:	201d      	movs	r0, #29
 800148e:	f7ff fdf7 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x21);
 8001492:	2021      	movs	r0, #33	; 0x21
 8001494:	f7ff fdf4 	bl	8001080 <LCD_WR_DATA>

  LCD_WR_REG(0X36);
 8001498:	2036      	movs	r0, #54	; 0x36
 800149a:	f7ff fdcf 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0xEC);
 800149e:	20ec      	movs	r0, #236	; 0xec
 80014a0:	f7ff fdee 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xF0);
 80014a4:	20f0      	movs	r0, #240	; 0xf0
 80014a6:	f7ff fdc9 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0xC3);
 80014aa:	20c3      	movs	r0, #195	; 0xc3
 80014ac:	f7ff fde8 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0xF0);
 80014b0:	20f0      	movs	r0, #240	; 0xf0
 80014b2:	f7ff fdc3 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(0x69);
 80014b6:	2069      	movs	r0, #105	; 0x69
 80014b8:	f7ff fde2 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_REG(0X13);
 80014bc:	2013      	movs	r0, #19
 80014be:	f7ff fdbd 	bl	800103c <LCD_WR_REG>
	LCD_WR_REG(0X11);
 80014c2:	2011      	movs	r0, #17
 80014c4:	f7ff fdba 	bl	800103c <LCD_WR_REG>
	LCD_WR_REG(0X29);
 80014c8:	2029      	movs	r0, #41	; 0x29
 80014ca:	f7ff fdb7 	bl	800103c <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f874 	bl	80015bc <LCD_direction>
	LCD_LED(1);//��������
 80014d4:	2201      	movs	r2, #1
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <LCD_Init+0x204>)
 80014da:	f001 fba1 	bl	8002c20 <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);//��ȫ����ɫ
 80014de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014e2:	f7ff fe55 	bl	8001190 <LCD_Clear>
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	58020c00 	.word	0x58020c00

080014f0 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4623      	mov	r3, r4
 8001500:	80fb      	strh	r3, [r7, #6]
 8001502:	4603      	mov	r3, r0
 8001504:	80bb      	strh	r3, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	807b      	strh	r3, [r7, #2]
 800150a:	4613      	mov	r3, r2
 800150c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <LCD_SetWindows+0xa4>)
 8001510:	895b      	ldrh	r3, [r3, #10]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fd91 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	b29b      	uxth	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fdac 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fda7 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	b29b      	uxth	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fda0 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fd9b 	bl	8001080 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <LCD_SetWindows+0xa4>)
 800154c:	899b      	ldrh	r3, [r3, #12]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fd73 	bl	800103c <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8001556:	88bb      	ldrh	r3, [r7, #4]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fd8e 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fd89 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 800156e:	883b      	ldrh	r3, [r7, #0]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fd82 	bl	8001080 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 800157c:	883b      	ldrh	r3, [r7, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fd7d 	bl	8001080 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM
 8001586:	f7ff fdb3 	bl	80010f0 <LCD_WriteRAM_Prepare>
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	bf00      	nop
 8001594:	240000e8 	.word	0x240000e8

08001598 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	460a      	mov	r2, r1
 80015a2:	80fb      	strh	r3, [r7, #6]
 80015a4:	4613      	mov	r3, r2
 80015a6:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
 80015a8:	88bb      	ldrh	r3, [r7, #4]
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	88b9      	ldrh	r1, [r7, #4]
 80015ae:	88f8      	ldrh	r0, [r7, #6]
 80015b0:	f7ff ff9e 	bl	80014f0 <LCD_SetWindows>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/
void LCD_direction(u8 direction)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	lcddev.setxcmd=0x2A;
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <LCD_direction+0xac>)
 80015c8:	222a      	movs	r2, #42	; 0x2a
 80015ca:	815a      	strh	r2, [r3, #10]
	lcddev.setycmd=0x2B;
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <LCD_direction+0xac>)
 80015ce:	222b      	movs	r2, #43	; 0x2b
 80015d0:	819a      	strh	r2, [r3, #12]
	lcddev.wramcmd=0x2C;
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <LCD_direction+0xac>)
 80015d4:	222c      	movs	r2, #44	; 0x2c
 80015d6:	811a      	strh	r2, [r3, #8]
	switch(direction){
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d83e      	bhi.n	800165c <LCD_direction+0xa0>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <LCD_direction+0x28>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	0800160f 	.word	0x0800160f
 80015ec:	08001629 	.word	0x08001629
 80015f0:	08001643 	.word	0x08001643
		case 0:
			lcddev.width=LCD_W;
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <LCD_direction+0xac>)
 80015f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015fa:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <LCD_direction+0xac>)
 80015fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001602:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6));
 8001604:	2148      	movs	r1, #72	; 0x48
 8001606:	2036      	movs	r0, #54	; 0x36
 8001608:	f7ff fd5c 	bl	80010c4 <LCD_WriteReg>
		break;
 800160c:	e027      	b.n	800165e <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <LCD_direction+0xac>)
 8001610:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001614:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <LCD_direction+0xac>)
 8001618:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800161c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5));
 800161e:	2128      	movs	r1, #40	; 0x28
 8001620:	2036      	movs	r0, #54	; 0x36
 8001622:	f7ff fd4f 	bl	80010c4 <LCD_WriteReg>
		break;
 8001626:	e01a      	b.n	800165e <LCD_direction+0xa2>
		case 2:
			lcddev.width=LCD_W;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <LCD_direction+0xac>)
 800162a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800162e:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <LCD_direction+0xac>)
 8001632:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001636:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7));
 8001638:	2188      	movs	r1, #136	; 0x88
 800163a:	2036      	movs	r0, #54	; 0x36
 800163c:	f7ff fd42 	bl	80010c4 <LCD_WriteReg>
		break;
 8001640:	e00d      	b.n	800165e <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <LCD_direction+0xac>)
 8001644:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001648:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <LCD_direction+0xac>)
 800164c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001650:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<6)|(1<<5));
 8001652:	21e8      	movs	r1, #232	; 0xe8
 8001654:	2036      	movs	r0, #54	; 0x36
 8001656:	f7ff fd35 	bl	80010c4 <LCD_WriteReg>
		break;
 800165a:	e000      	b.n	800165e <LCD_direction+0xa2>
		default:break;
 800165c:	bf00      	nop
	}
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	240000e8 	.word	0x240000e8

0800166c <hx711_powerUp>:
__HAL_TIM_SET_COUNTER(&htim1,0);  // setting the delay counter to 0.
while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // while loop till the counter reaches the delay given (us).
}
*/
void hx711_powerUp(void) //Power up function
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //writing to the pin and setting it to 0.
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <hx711_powerUp+0x14>)
 8001676:	f001 fad3 	bl	8002c20 <HAL_GPIO_WritePin>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	58020000 	.word	0x58020000

08001684 <hx711_setGain>:
void hx711_setGain(uint8_t gain)  //the values should be 32, 64 or 128
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	if(gain < 64) GAIN = 2; //32, channel B
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b3f      	cmp	r3, #63	; 0x3f
 8001692:	d803      	bhi.n	800169c <hx711_setGain+0x18>
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <hx711_setGain+0x3c>)
 8001696:	2202      	movs	r2, #2
 8001698:	701a      	strb	r2, [r3, #0]
	else if(gain < 128) GAIN = 3; //64, channel A
	else GAIN = 1; //128, channel A
}
 800169a:	e00a      	b.n	80016b2 <hx711_setGain+0x2e>
	else if(gain < 128) GAIN = 3; //64, channel A
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db03      	blt.n	80016ac <hx711_setGain+0x28>
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <hx711_setGain+0x3c>)
 80016a6:	2203      	movs	r2, #3
 80016a8:	701a      	strb	r2, [r3, #0]
}
 80016aa:	e002      	b.n	80016b2 <hx711_setGain+0x2e>
	else GAIN = 1; //128, channel A
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <hx711_setGain+0x3c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	24000130 	.word	0x24000130

080016c4 <hx711_init>:


void hx711_init(void) //initializes the hx711 module by calling 2 functions.
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  hx711_setGain(128); //setting gain to 128, as this was our best result after trying with other gains.
 80016c8:	2080      	movs	r0, #128	; 0x80
 80016ca:	f7ff ffdb 	bl	8001684 <hx711_setGain>
	hx711_powerUp(); //power up the hx711 module.
 80016ce:	f7ff ffcd 	bl	800166c <hx711_powerUp>
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <hx711_get_value>:



int32_t hx711_get_value(void) //getting the weight from the module.
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
	uint32_t data = 0; //the data (weight) is firstly set to 0.
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
	uint8_t dout; // this is to show whether at this bit, if theres a number that should be recorded.
	int32_t filler; //to fill the rest of the 32 bits.
	int32_t ret_value; //final value to return after adding the filling and the data together.

	for (uint8_t i = 0; i < 24; i++) //read 24 bit data + set gain and start next conversion
 80016e2:	2300      	movs	r3, #0
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e021      	b.n	800172c <hx711_get_value+0x54>
	{

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //set the clock pin to 1.
 80016e8:	2201      	movs	r2, #1
 80016ea:	2110      	movs	r1, #16
 80016ec:	4829      	ldr	r0, [pc, #164]	; (8001794 <hx711_get_value+0xbc>)
 80016ee:	f001 fa97 	bl	8002c20 <HAL_GPIO_WritePin>
		delay_us(1); //delay
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7fe fee4 	bl	80004c0 <delay_us>
			dout = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3); //read from the dout pin in variable dout.
 80016f8:	2108      	movs	r1, #8
 80016fa:	4826      	ldr	r0, [pc, #152]	; (8001794 <hx711_get_value+0xbc>)
 80016fc:	f001 fa78 	bl	8002bf0 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	70fb      	strb	r3, [r7, #3]
			data = data << 1; //shift the data by 1 to make sure we are in correct position depending on the counter.
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	617b      	str	r3, [r7, #20]
			if (dout) //if this bit has an output (value of 1) .
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <hx711_get_value+0x3e>
			{
				data++; //it sets the data value at this position as 1 as well.
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
			}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //set clock pin to 0.
 8001716:	2200      	movs	r2, #0
 8001718:	2110      	movs	r1, #16
 800171a:	481e      	ldr	r0, [pc, #120]	; (8001794 <hx711_get_value+0xbc>)
 800171c:	f001 fa80 	bl	8002c20 <HAL_GPIO_WritePin>
		delay_us(1); //delay
 8001720:	2001      	movs	r0, #1
 8001722:	f7fe fecd 	bl	80004c0 <delay_us>
	for (uint8_t i = 0; i < 24; i++) //read 24 bit data + set gain and start next conversion
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	3301      	adds	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b17      	cmp	r3, #23
 8001730:	d9da      	bls.n	80016e8 <hx711_get_value+0x10>
	}

	for( int i = 0; i < GAIN; i ++ ) //this for loop is for the gain, to add more clock cycles based on the gain.
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	e012      	b.n	800175e <hx711_get_value+0x86>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //set clock pin to 1.
 8001738:	2201      	movs	r2, #1
 800173a:	2110      	movs	r1, #16
 800173c:	4815      	ldr	r0, [pc, #84]	; (8001794 <hx711_get_value+0xbc>)
 800173e:	f001 fa6f 	bl	8002c20 <HAL_GPIO_WritePin>
		delay_us(1); //delay
 8001742:	2001      	movs	r0, #1
 8001744:	f7fe febc 	bl	80004c0 <delay_us>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //set clock pin to 0.
 8001748:	2200      	movs	r2, #0
 800174a:	2110      	movs	r1, #16
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <hx711_get_value+0xbc>)
 800174e:	f001 fa67 	bl	8002c20 <HAL_GPIO_WritePin>
		delay_us(1); //delay, here we are making a clock cycle.
 8001752:	2001      	movs	r0, #1
 8001754:	f7fe feb4 	bl	80004c0 <delay_us>
	for( int i = 0; i < GAIN; i ++ ) //this for loop is for the gain, to add more clock cycles based on the gain.
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	3301      	adds	r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <hx711_get_value+0xc0>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4293      	cmp	r3, r2
 8001768:	dbe6      	blt.n	8001738 <hx711_get_value+0x60>
	}

	if( data & 0x800000 ) //here we are checking if theres values in the 24 bits by anding.
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <hx711_get_value+0xa4>
		filler = 0xFF000000; //if there are values we add 1's to the last 8 bits which are needed as this is a 32-bit adc.
 8001774:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	e001      	b.n	8001780 <hx711_get_value+0xa8>
	else
		filler = 0x00000000; //however, if nothing is in the data we just add 0's.
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]

	ret_value = filler + data; //the return value is the addition of the data with the filler to have the 32-bits.
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4413      	add	r3, r2
 8001786:	607b      	str	r3, [r7, #4]
	return ret_value; //returning the value to be printed.
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	58020000 	.word	0x58020000
 8001798:	24000130 	.word	0x24000130

0800179c <hx711_is_ready>:

uint8_t hx711_is_ready(void) //making sure that the HX711 module is ready
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET; //reading a value from it, the reseting it.
 80017a0:	2108      	movs	r1, #8
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <hx711_is_ready+0x1c>)
 80017a4:	f001 fa24 	bl	8002bf0 <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	58020000 	.word	0x58020000

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af04      	add	r7, sp, #16
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80017c2:	4b59      	ldr	r3, [pc, #356]	; (8001928 <main+0x16c>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d11b      	bne.n	8001806 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017ce:	f3bf 8f4f 	dsb	sy
}
 80017d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017d4:	f3bf 8f6f 	isb	sy
}
 80017d8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80017da:	4b53      	ldr	r3, [pc, #332]	; (8001928 <main+0x16c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80017e2:	f3bf 8f4f 	dsb	sy
}
 80017e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017e8:	f3bf 8f6f 	isb	sy
}
 80017ec:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80017ee:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <main+0x16c>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	4a4d      	ldr	r2, [pc, #308]	; (8001928 <main+0x16c>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017fa:	f3bf 8f4f 	dsb	sy
}
 80017fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001800:	f3bf 8f6f 	isb	sy
}
 8001804:	e000      	b.n	8001808 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001806:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001808:	4b47      	ldr	r3, [pc, #284]	; (8001928 <main+0x16c>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d138      	bne.n	8001886 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001814:	4b44      	ldr	r3, [pc, #272]	; (8001928 <main+0x16c>)
 8001816:	2200      	movs	r2, #0
 8001818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800181c:	f3bf 8f4f 	dsb	sy
}
 8001820:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001822:	4b41      	ldr	r3, [pc, #260]	; (8001928 <main+0x16c>)
 8001824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001828:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	0b5b      	lsrs	r3, r3, #13
 800182e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001832:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800183c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001846:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800184c:	4936      	ldr	r1, [pc, #216]	; (8001928 <main+0x16c>)
 800184e:	4313      	orrs	r3, r2
 8001850:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ef      	bne.n	800183e <main+0x82>
    } while(sets-- != 0U);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e5      	bne.n	8001834 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <main+0x16c>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <main+0x16c>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800187a:	f3bf 8f4f 	dsb	sy
}
 800187e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001880:	f3bf 8f6f 	isb	sy
}
 8001884:	e000      	b.n	8001888 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001886:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001888:	f000 fe14 	bl	80024b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188c:	f000 f858 	bl	8001940 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001890:	f000 f8d8 	bl	8001a44 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001894:	f7fe fe6a 	bl	800056c <MX_GPIO_Init>
  MX_SPI4_Init();
 8001898:	f000 fb90 	bl	8001fbc <MX_SPI4_Init>
  MX_SPI2_Init();
 800189c:	f000 fb36 	bl	8001f0c <MX_SPI2_Init>
  MX_I2C1_Init();
 80018a0:	f7ff fb22 	bl	8000ee8 <MX_I2C1_Init>
  MX_RTC_Init();
 80018a4:	f000 faa4 	bl	8001df0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	delay_init(400);
 80018a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80018ac:	f7fe fdf6 	bl	800049c <delay_init>
	 LCD_Init();
 80018b0:	f7ff fd1a 	bl	80012e8 <LCD_Init>
	 IIC_Start();
 80018b4:	f000 f91c 	bl	8001af0 <IIC_Start>
	 IIC_Init();
 80018b8:	f000 f8e8 	bl	8001a8c <IIC_Init>
	 AT24CXX_Init();
 80018bc:	f7fe fd68 	bl	8000390 <AT24CXX_Init>
	 AT24CXX_Check();
 80018c0:	f7fe fdcb 	bl	800045a <AT24CXX_Check>

	   hx711_init();
 80018c4:	f7ff fefe 	bl	80016c4 <hx711_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if( hx711_is_ready()) //if the HX711 module is ready.
 80018c8:	f7ff ff68 	bl	800179c <hx711_is_ready>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d015      	beq.n	80018fe <main+0x142>
	 	  {
	 		  hx711_value = hx711_get_value(); //we store the value coming from the get value function.
 80018d2:	f7ff ff01 	bl	80016d8 <hx711_get_value>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <main+0x170>)
 80018da:	6013      	str	r3, [r2, #0]

	 	      sprintf(counter_str, "Weight : %d kg \r\n",(((hx711_value)/12300)-15)*2);
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <main+0x170>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <main+0x174>)
 80018e2:	fb82 1203 	smull	r1, r2, r2, r3
 80018e6:	441a      	add	r2, r3
 80018e8:	1352      	asrs	r2, r2, #13
 80018ea:	17db      	asrs	r3, r3, #31
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	3b0f      	subs	r3, #15
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	461a      	mov	r2, r3
 80018f4:	490f      	ldr	r1, [pc, #60]	; (8001934 <main+0x178>)
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <main+0x17c>)
 80018f8:	f004 f9fa 	bl	8005cf0 <siprintf>
 80018fc:	e003      	b.n	8001906 <main+0x14a>
	 	    //CDC_Transmit_FS((uint8_t*)counter_str, strlen(counter_str));
	 	    //Gui_StrCenter(0, 30, RED, BLACK, counter_str, 16	, 1);
	 	  }
	 	  else{
	 		  	sprintf(counter_str,"Error: HX711 \n\r"); //However, if the HX711 module dosent read any value, this means there is a connection error.
 80018fe:	490f      	ldr	r1, [pc, #60]	; (800193c <main+0x180>)
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <main+0x17c>)
 8001902:	f004 f9f5 	bl	8005cf0 <siprintf>
	 	   // CDC_Transmit_FS((uint8_t*)counter_str, strlen(counter_str));
	 	  }

	  	//  main_test();
	    Gui_StrCenter(0, 50, RED, BLACK, counter_str, 16	, 1);
 8001906:	2301      	movs	r3, #1
 8001908:	9302      	str	r3, [sp, #8]
 800190a:	2310      	movs	r3, #16
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <main+0x17c>)
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001918:	2132      	movs	r1, #50	; 0x32
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fab0 	bl	8000e80 <Gui_StrCenter>
	 	    HAL_Delay(100); //creating a delay.
 8001920:	2064      	movs	r0, #100	; 0x64
 8001922:	f000 fe59 	bl	80025d8 <HAL_Delay>
	  if( hx711_is_ready()) //if the HX711 module is ready.
 8001926:	e7cf      	b.n	80018c8 <main+0x10c>
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	2400012c 	.word	0x2400012c
 8001930:	aa800aa9 	.word	0xaa800aa9
 8001934:	080065e4 	.word	0x080065e4
 8001938:	240000f8 	.word	0x240000f8
 800193c:	080065f8 	.word	0x080065f8

08001940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b09c      	sub	sp, #112	; 0x70
 8001944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194a:	224c      	movs	r2, #76	; 0x4c
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f004 f9c6 	bl	8005ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2220      	movs	r2, #32
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f004 f9c0 	bl	8005ce0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001960:	2002      	movs	r0, #2
 8001962:	f001 fac3 	bl	8002eec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001966:	2300      	movs	r3, #0
 8001968:	603b      	str	r3, [r7, #0]
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <SystemClock_Config+0xfc>)
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	4a33      	ldr	r2, [pc, #204]	; (8001a3c <SystemClock_Config+0xfc>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <SystemClock_Config+0xfc>)
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <SystemClock_Config+0x100>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001988:	4a2d      	ldr	r2, [pc, #180]	; (8001a40 <SystemClock_Config+0x100>)
 800198a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <SystemClock_Config+0x100>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800199c:	bf00      	nop
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <SystemClock_Config+0x100>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019aa:	d1f8      	bne.n	800199e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80019ac:	230b      	movs	r3, #11
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ba:	2340      	movs	r3, #64	; 0x40
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019be:	2301      	movs	r3, #1
 80019c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c2:	2302      	movs	r3, #2
 80019c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c6:	2302      	movs	r3, #2
 80019c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80019ca:	2305      	movs	r3, #5
 80019cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80019ce:	2360      	movs	r3, #96	; 0x60
 80019d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019d2:	2302      	movs	r3, #2
 80019d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019d6:	2302      	movs	r3, #2
 80019d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019da:	2302      	movs	r3, #2
 80019dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80019de:	2308      	movs	r3, #8
 80019e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fab6 	bl	8002f60 <HAL_RCC_OscConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80019fa:	f000 f841 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fe:	233f      	movs	r3, #63	; 0x3f
 8001a00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a02:	2303      	movs	r3, #3
 8001a04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2102      	movs	r1, #2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 fef5 	bl	8003814 <HAL_RCC_ClockConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001a30:	f000 f826 	bl	8001a80 <Error_Handler>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3770      	adds	r7, #112	; 0x70
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	58000400 	.word	0x58000400
 8001a40:	58024800 	.word	0x58024800

08001a44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0b0      	sub	sp, #192	; 0xc0
 8001a48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	22c0      	movs	r2, #192	; 0xc0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 f945 	bl	8005ce0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001a56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001a62:	2300      	movs	r3, #0
 8001a64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	463b      	mov	r3, r7
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fa03 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001a74:	f000 f804 	bl	8001a80 <Error_Handler>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	37c0      	adds	r7, #192	; 0xc0
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x8>
	...

08001a8c <IIC_Init>:
#include "delay.h"
#include "gpio.h"

//IIC��ʼ��
void IIC_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;

    __HAL_RCC_GPIOH_CLK_ENABLE();   //ʹ��GPIOHʱ��
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <IIC_Init+0x5c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <IIC_Init+0x5c>)
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <IIC_Init+0x5c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	683b      	ldr	r3, [r7, #0]

    //PH4,5��ʼ������
    GPIO_Initure.Pin=GPIO_PIN_6|GPIO_PIN_7;
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //�������
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 8001ab8:	2301      	movs	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_VERY_HIGH;    //����
 8001abc:	2303      	movs	r3, #3
 8001abe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <IIC_Init+0x60>)
 8001ac6:	f000 fee3 	bl	8002890 <HAL_GPIO_Init>

    IIC_SDA(1);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	4807      	ldr	r0, [pc, #28]	; (8001aec <IIC_Init+0x60>)
 8001ad0:	f001 f8a6 	bl	8002c20 <HAL_GPIO_WritePin>
    IIC_SCL(1);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <IIC_Init+0x60>)
 8001ada:	f001 f8a1 	bl	8002c20 <HAL_GPIO_WritePin>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	58024400 	.word	0x58024400
 8001aec:	58020400 	.word	0x58020400

08001af0 <IIC_Start>:

//����IIC��ʼ�ź�
void IIC_Start(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda�����
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <IIC_Start+0x54>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <IIC_Start+0x54>)
 8001afa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <IIC_Start+0x54>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <IIC_Start+0x54>)
 8001b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0a:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <IIC_Start+0x54>)
 8001b12:	f001 f885 	bl	8002c20 <HAL_GPIO_WritePin>
	IIC_SCL(1);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	480a      	ldr	r0, [pc, #40]	; (8001b44 <IIC_Start+0x54>)
 8001b1c:	f001 f880 	bl	8002c20 <HAL_GPIO_WritePin>
	delay_us(4);
 8001b20:	2004      	movs	r0, #4
 8001b22:	f7fe fccd 	bl	80004c0 <delay_us>
 	IIC_SDA(0);//START:when CLK is high,DATA change form high to low
 8001b26:	2200      	movs	r2, #0
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	4806      	ldr	r0, [pc, #24]	; (8001b44 <IIC_Start+0x54>)
 8001b2c:	f001 f878 	bl	8002c20 <HAL_GPIO_WritePin>
	delay_us(4);
 8001b30:	2004      	movs	r0, #4
 8001b32:	f7fe fcc5 	bl	80004c0 <delay_us>
	IIC_SCL(0);//ǯסI2C���ߣ�׼�����ͻ��������
 8001b36:	2200      	movs	r2, #0
 8001b38:	2140      	movs	r1, #64	; 0x40
 8001b3a:	4802      	ldr	r0, [pc, #8]	; (8001b44 <IIC_Start+0x54>)
 8001b3c:	f001 f870 	bl	8002c20 <HAL_GPIO_WritePin>
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	58020400 	.word	0x58020400

08001b48 <IIC_Stop>:
//����IICֹͣ�ź�
void IIC_Stop(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	SDA_OUT();//sda�����
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <IIC_Stop+0x54>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <IIC_Stop+0x54>)
 8001b52:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <IIC_Stop+0x54>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <IIC_Stop+0x54>)
 8001b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b62:	6013      	str	r3, [r2, #0]
	IIC_SCL(0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <IIC_Stop+0x54>)
 8001b6a:	f001 f859 	bl	8002c20 <HAL_GPIO_WritePin>
	IIC_SDA(0);//STOP:when CLK is high DATA change form low to high
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	480a      	ldr	r0, [pc, #40]	; (8001b9c <IIC_Stop+0x54>)
 8001b74:	f001 f854 	bl	8002c20 <HAL_GPIO_WritePin>
 	delay_us(4);
 8001b78:	2004      	movs	r0, #4
 8001b7a:	f7fe fca1 	bl	80004c0 <delay_us>
	IIC_SCL(1);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2140      	movs	r1, #64	; 0x40
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <IIC_Stop+0x54>)
 8001b84:	f001 f84c 	bl	8002c20 <HAL_GPIO_WritePin>
	IIC_SDA(1);//����I2C���߽����ź�
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <IIC_Stop+0x54>)
 8001b8e:	f001 f847 	bl	8002c20 <HAL_GPIO_WritePin>
	delay_us(4);
 8001b92:	2004      	movs	r0, #4
 8001b94:	f7fe fc94 	bl	80004c0 <delay_us>
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	58020400 	.word	0x58020400

08001ba0 <IIC_Wait_Ack>:
//�ȴ�Ӧ���źŵ���
//����ֵ��1������Ӧ��ʧ��
//        0������Ӧ��ɹ�
u8 IIC_Wait_Ack(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
	u8 ucErrTime=0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA����Ϊ����
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <IIC_Wait_Ack+0x78>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <IIC_Wait_Ack+0x78>)
 8001bb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <IIC_Wait_Ack+0x78>)
 8001bb8:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <IIC_Wait_Ack+0x78>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);delay_us(1);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	4815      	ldr	r0, [pc, #84]	; (8001c18 <IIC_Wait_Ack+0x78>)
 8001bc4:	f001 f82c 	bl	8002c20 <HAL_GPIO_WritePin>
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7fe fc79 	bl	80004c0 <delay_us>
	IIC_SCL(1);delay_us(1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	4811      	ldr	r0, [pc, #68]	; (8001c18 <IIC_Wait_Ack+0x78>)
 8001bd4:	f001 f824 	bl	8002c20 <HAL_GPIO_WritePin>
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7fe fc71 	bl	80004c0 <delay_us>
	while(READ_SDA)
 8001bde:	e009      	b.n	8001bf4 <IIC_Wait_Ack+0x54>
	{
		ucErrTime++;
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	3301      	adds	r3, #1
 8001be4:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2bfa      	cmp	r3, #250	; 0xfa
 8001bea:	d903      	bls.n	8001bf4 <IIC_Wait_Ack+0x54>
		{
			IIC_Stop();
 8001bec:	f7ff ffac 	bl	8001b48 <IIC_Stop>
			return 1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e00c      	b.n	8001c0e <IIC_Wait_Ack+0x6e>
	while(READ_SDA)
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <IIC_Wait_Ack+0x78>)
 8001bf8:	f000 fffa 	bl	8002bf0 <HAL_GPIO_ReadPin>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ee      	bne.n	8001be0 <IIC_Wait_Ack+0x40>
		}
	}
	IIC_SCL(0);//ʱ�����0
 8001c02:	2200      	movs	r2, #0
 8001c04:	2140      	movs	r1, #64	; 0x40
 8001c06:	4804      	ldr	r0, [pc, #16]	; (8001c18 <IIC_Wait_Ack+0x78>)
 8001c08:	f001 f80a 	bl	8002c20 <HAL_GPIO_WritePin>
	return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	58020400 	.word	0x58020400

08001c1c <IIC_Ack>:
//����ACKӦ��
void IIC_Ack(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2140      	movs	r1, #64	; 0x40
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <IIC_Ack+0x54>)
 8001c26:	f000 fffb 	bl	8002c20 <HAL_GPIO_WritePin>
	SDA_OUT();
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <IIC_Ack+0x54>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <IIC_Ack+0x54>)
 8001c30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <IIC_Ack+0x54>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <IIC_Ack+0x54>)
 8001c3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c40:	6013      	str	r3, [r2, #0]
	IIC_SDA(0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	480a      	ldr	r0, [pc, #40]	; (8001c70 <IIC_Ack+0x54>)
 8001c48:	f000 ffea 	bl	8002c20 <HAL_GPIO_WritePin>
	delay_us(2);
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f7fe fc37 	bl	80004c0 <delay_us>
	IIC_SCL(1);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2140      	movs	r1, #64	; 0x40
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <IIC_Ack+0x54>)
 8001c58:	f000 ffe2 	bl	8002c20 <HAL_GPIO_WritePin>
	delay_us(2);
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f7fe fc2f 	bl	80004c0 <delay_us>
	IIC_SCL(0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	4802      	ldr	r0, [pc, #8]	; (8001c70 <IIC_Ack+0x54>)
 8001c68:	f000 ffda 	bl	8002c20 <HAL_GPIO_WritePin>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	58020400 	.word	0x58020400

08001c74 <IIC_NAck>:
//������ACKӦ��
void IIC_NAck(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2140      	movs	r1, #64	; 0x40
 8001c7c:	4812      	ldr	r0, [pc, #72]	; (8001cc8 <IIC_NAck+0x54>)
 8001c7e:	f000 ffcf 	bl	8002c20 <HAL_GPIO_WritePin>
	SDA_OUT();
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <IIC_NAck+0x54>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <IIC_NAck+0x54>)
 8001c88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <IIC_NAck+0x54>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <IIC_NAck+0x54>)
 8001c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c98:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2180      	movs	r1, #128	; 0x80
 8001c9e:	480a      	ldr	r0, [pc, #40]	; (8001cc8 <IIC_NAck+0x54>)
 8001ca0:	f000 ffbe 	bl	8002c20 <HAL_GPIO_WritePin>
	delay_us(2);
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f7fe fc0b 	bl	80004c0 <delay_us>
	IIC_SCL(1);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2140      	movs	r1, #64	; 0x40
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <IIC_NAck+0x54>)
 8001cb0:	f000 ffb6 	bl	8002c20 <HAL_GPIO_WritePin>
	delay_us(2);
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f7fe fc03 	bl	80004c0 <delay_us>
	IIC_SCL(0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <IIC_NAck+0x54>)
 8001cc0:	f000 ffae 	bl	8002c20 <HAL_GPIO_WritePin>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	58020400 	.word	0x58020400

08001ccc <IIC_Send_Byte>:
//IIC����һ���ֽ�
//���شӻ�����Ӧ��
//1����Ӧ��
//0����Ӧ��
void IIC_Send_Byte(u8 txd)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
    u8 t;
	SDA_OUT();
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <IIC_Send_Byte+0x94>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <IIC_Send_Byte+0x94>)
 8001cdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <IIC_Send_Byte+0x94>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <IIC_Send_Byte+0x94>)
 8001ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cec:	6013      	str	r3, [r2, #0]
    IIC_SCL(0);//����ʱ�ӿ�ʼ���ݴ���
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2140      	movs	r1, #64	; 0x40
 8001cf2:	481b      	ldr	r0, [pc, #108]	; (8001d60 <IIC_Send_Byte+0x94>)
 8001cf4:	f000 ff94 	bl	8002c20 <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e027      	b.n	8001d4e <IIC_Send_Byte+0x82>
    {
        IIC_SDA((txd&0x80)>>7);
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da05      	bge.n	8001d12 <IIC_Send_Byte+0x46>
 8001d06:	2201      	movs	r2, #1
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	4815      	ldr	r0, [pc, #84]	; (8001d60 <IIC_Send_Byte+0x94>)
 8001d0c:	f000 ff88 	bl	8002c20 <HAL_GPIO_WritePin>
 8001d10:	e004      	b.n	8001d1c <IIC_Send_Byte+0x50>
 8001d12:	2200      	movs	r2, #0
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <IIC_Send_Byte+0x94>)
 8001d18:	f000 ff82 	bl	8002c20 <HAL_GPIO_WritePin>
        txd<<=1;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //��TEA5767��������ʱ���Ǳ����
 8001d22:	2002      	movs	r0, #2
 8001d24:	f7fe fbcc 	bl	80004c0 <delay_us>
		IIC_SCL(1);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <IIC_Send_Byte+0x94>)
 8001d2e:	f000 ff77 	bl	8002c20 <HAL_GPIO_WritePin>
		delay_us(2);
 8001d32:	2002      	movs	r0, #2
 8001d34:	f7fe fbc4 	bl	80004c0 <delay_us>
		IIC_SCL(0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2140      	movs	r1, #64	; 0x40
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <IIC_Send_Byte+0x94>)
 8001d3e:	f000 ff6f 	bl	8002c20 <HAL_GPIO_WritePin>
		delay_us(2);
 8001d42:	2002      	movs	r0, #2
 8001d44:	f7fe fbbc 	bl	80004c0 <delay_us>
    for(t=0;t<8;t++)
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b07      	cmp	r3, #7
 8001d52:	d9d4      	bls.n	8001cfe <IIC_Send_Byte+0x32>
    }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	58020400 	.word	0x58020400

08001d64 <IIC_Read_Byte>:
//��1���ֽڣ�ack=1ʱ������ACK��ack=0������nACK
u8 IIC_Read_Byte(unsigned char ack)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA����Ϊ����
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <IIC_Read_Byte+0x88>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <IIC_Read_Byte+0x88>)
 8001d78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <IIC_Read_Byte+0x88>)
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <IIC_Read_Byte+0x88>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6013      	str	r3, [r2, #0]
    for(i=0;i<8;i++ )
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
 8001d8a:	e01f      	b.n	8001dcc <IIC_Read_Byte+0x68>
	{
        IIC_SCL(0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	4816      	ldr	r0, [pc, #88]	; (8001dec <IIC_Read_Byte+0x88>)
 8001d92:	f000 ff45 	bl	8002c20 <HAL_GPIO_WritePin>
        delay_us(2);
 8001d96:	2002      	movs	r0, #2
 8001d98:	f7fe fb92 	bl	80004c0 <delay_us>
		IIC_SCL(1);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2140      	movs	r1, #64	; 0x40
 8001da0:	4812      	ldr	r0, [pc, #72]	; (8001dec <IIC_Read_Byte+0x88>)
 8001da2:	f000 ff3d 	bl	8002c20 <HAL_GPIO_WritePin>
        receive<<=1;
 8001da6:	7bbb      	ldrb	r3, [r7, #14]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	480f      	ldr	r0, [pc, #60]	; (8001dec <IIC_Read_Byte+0x88>)
 8001db0:	f000 ff1e 	bl	8002bf0 <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <IIC_Read_Byte+0x5c>
 8001dba:	7bbb      	ldrb	r3, [r7, #14]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f7fe fb7d 	bl	80004c0 <delay_us>
    for(i=0;i<8;i++ )
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b07      	cmp	r3, #7
 8001dd0:	d9dc      	bls.n	8001d8c <IIC_Read_Byte+0x28>
    }
    if (!ack)
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <IIC_Read_Byte+0x7a>
        IIC_NAck();//����nACK
 8001dd8:	f7ff ff4c 	bl	8001c74 <IIC_NAck>
 8001ddc:	e001      	b.n	8001de2 <IIC_Read_Byte+0x7e>
    else
        IIC_Ack(); //����ACK
 8001dde:	f7ff ff1d 	bl	8001c1c <IIC_Ack>
    return receive;
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	58020400 	.word	0x58020400

08001df0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e04:	2300      	movs	r3, #0
 8001e06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e0a:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <MX_RTC_Init+0xb4>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e16:	227f      	movs	r2, #127	; 0x7f
 8001e18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e1c:	22ff      	movs	r2, #255	; 0xff
 8001e1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e38:	4819      	ldr	r0, [pc, #100]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e3a:	f003 fb89 	bl	8005550 <HAL_RTC_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001e44:	f7ff fe1c 	bl	8001a80 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4619      	mov	r1, r3
 8001e62:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e64:	f003 fbf6 	bl	8005654 <HAL_RTC_SetTime>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001e6e:	f7ff fe07 	bl	8001a80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001e72:	2303      	movs	r3, #3
 8001e74:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001e76:	2307      	movs	r3, #7
 8001e78:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e82:	463b      	mov	r3, r7
 8001e84:	2201      	movs	r2, #1
 8001e86:	4619      	mov	r1, r3
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e8a:	f003 fc81 	bl	8005790 <HAL_RTC_SetDate>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001e94:	f7ff fdf4 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e98:	bf00      	nop
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	24000134 	.word	0x24000134
 8001ea4:	58004000 	.word	0x58004000

08001ea8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0b2      	sub	sp, #200	; 0xc8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	22c0      	movs	r2, #192	; 0xc0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 ff11 	bl	8005ce0 <memset>
  if(rtcHandle->Instance==RTC)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_RTC_MspInit+0x5c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d119      	bne.n	8001efc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ec8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 ffc7 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001eec:	f7ff fdc8 	bl	8001a80 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RTC_MspInit+0x60>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_RTC_MspInit+0x60>)
 8001ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efa:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001efc:	bf00      	nop
 8001efe:	37c8      	adds	r7, #200	; 0xc8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	58004000 	.word	0x58004000
 8001f08:	58024400 	.word	0x58024400

08001f0c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001f10:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f12:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <MX_SPI2_Init+0xac>)
 8001f14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f20:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001f24:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f28:	2203      	movs	r2, #3
 8001f2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f32:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f42:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001f46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001fa0:	f003 fd34 	bl	8005a0c <HAL_SPI_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001faa:	f7ff fd69 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	24000158 	.word	0x24000158
 8001fb8:	40003800 	.word	0x40003800

08001fbc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001fc2:	4a28      	ldr	r2, [pc, #160]	; (8002064 <MX_SPI4_Init+0xa8>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001fc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fcc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001fe8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MX_SPI4_Init+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <MX_SPI4_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <MX_SPI4_Init+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_SPI4_Init+0xa4>)
 8002010:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002014:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <MX_SPI4_Init+0xa4>)
 8002018:	2200      	movs	r2, #0
 800201a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <MX_SPI4_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <MX_SPI4_Init+0xa4>)
 8002024:	2200      	movs	r2, #0
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <MX_SPI4_Init+0xa4>)
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_SPI4_Init+0xa4>)
 8002030:	2200      	movs	r2, #0
 8002032:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <MX_SPI4_Init+0xa4>)
 8002036:	2200      	movs	r2, #0
 8002038:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_SPI4_Init+0xa4>)
 800203c:	2200      	movs	r2, #0
 800203e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <MX_SPI4_Init+0xa4>)
 8002042:	2200      	movs	r2, #0
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_SPI4_Init+0xa4>)
 8002048:	2200      	movs	r2, #0
 800204a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <MX_SPI4_Init+0xa4>)
 800204e:	f003 fcdd 	bl	8005a0c <HAL_SPI_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8002058:	f7ff fd12 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	240001e0 	.word	0x240001e0
 8002064:	40013400 	.word	0x40013400

08002068 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0bc      	sub	sp, #240	; 0xf0
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002080:	f107 0318 	add.w	r3, r7, #24
 8002084:	22c0      	movs	r2, #192	; 0xc0
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f003 fe29 	bl	8005ce0 <memset>
  if(spiHandle->Instance==SPI2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_SPI_MspInit+0x160>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d147      	bne.n	8002128 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80020a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020a8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020aa:	f107 0318 	add.w	r3, r7, #24
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 fee0 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80020ba:	f7ff fce1 	bl	8001a80 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020be:	4b43      	ldr	r3, [pc, #268]	; (80021cc <HAL_SPI_MspInit+0x164>)
 80020c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c4:	4a41      	ldr	r2, [pc, #260]	; (80021cc <HAL_SPI_MspInit+0x164>)
 80020c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020ce:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <HAL_SPI_MspInit+0x164>)
 80020d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020dc:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_SPI_MspInit+0x164>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e2:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <HAL_SPI_MspInit+0x164>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ec:	4b37      	ldr	r3, [pc, #220]	; (80021cc <HAL_SPI_MspInit+0x164>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80020fa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80020fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002114:	2305      	movs	r3, #5
 8002116:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800211e:	4619      	mov	r1, r3
 8002120:	482b      	ldr	r0, [pc, #172]	; (80021d0 <HAL_SPI_MspInit+0x168>)
 8002122:	f000 fbb5 	bl	8002890 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002126:	e04a      	b.n	80021be <HAL_SPI_MspInit+0x156>
  else if(spiHandle->Instance==SPI4)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_SPI_MspInit+0x16c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d145      	bne.n	80021be <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800213e:	2300      	movs	r3, #0
 8002140:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002142:	f107 0318 	add.w	r3, r7, #24
 8002146:	4618      	mov	r0, r3
 8002148:	f001 fe94 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8002152:	f7ff fc95 	bl	8001a80 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_SPI_MspInit+0x164>)
 8002158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800215c:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <HAL_SPI_MspInit+0x164>)
 800215e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002162:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_SPI_MspInit+0x164>)
 8002168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800216c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_SPI_MspInit+0x164>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_SPI_MspInit+0x164>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_SPI_MspInit+0x164>)
 8002186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_14;
 8002192:	f245 0320 	movw	r3, #20512	; 0x5020
 8002196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80021ac:	2305      	movs	r3, #5
 80021ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021b6:	4619      	mov	r1, r3
 80021b8:	4807      	ldr	r0, [pc, #28]	; (80021d8 <HAL_SPI_MspInit+0x170>)
 80021ba:	f000 fb69 	bl	8002890 <HAL_GPIO_Init>
}
 80021be:	bf00      	nop
 80021c0:	37f0      	adds	r7, #240	; 0xf0
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40003800 	.word	0x40003800
 80021cc:	58024400 	.word	0x58024400
 80021d0:	58020400 	.word	0x58020400
 80021d4:	40013400 	.word	0x40013400
 80021d8:	58021000 	.word	0x58021000

080021dc <SPIv_WriteData>:
  }
}

/* USER CODE BEGIN 1 */
void  SPIv_WriteData(u8 Data)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
	unsigned char i=0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
	for(i=8;i>0;i--)
 80021ea:	2308      	movs	r3, #8
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	e022      	b.n	8002236 <SPIv_WriteData+0x5a>
	{
	  if(Data&0x80)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da06      	bge.n	8002206 <SPIv_WriteData+0x2a>
	  SPI_MOSI_SET; //�������
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021fe:	4812      	ldr	r0, [pc, #72]	; (8002248 <SPIv_WriteData+0x6c>)
 8002200:	f000 fd0e 	bl	8002c20 <HAL_GPIO_WritePin>
 8002204:	e005      	b.n	8002212 <SPIv_WriteData+0x36>
      else SPI_MOSI_CLR;
 8002206:	2200      	movs	r2, #0
 8002208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800220c:	480e      	ldr	r0, [pc, #56]	; (8002248 <SPIv_WriteData+0x6c>)
 800220e:	f000 fd07 	bl	8002c20 <HAL_GPIO_WritePin>

      SPI_SCLK_CLR;
 8002212:	2200      	movs	r2, #0
 8002214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002218:	480b      	ldr	r0, [pc, #44]	; (8002248 <SPIv_WriteData+0x6c>)
 800221a:	f000 fd01 	bl	8002c20 <HAL_GPIO_WritePin>
      SPI_SCLK_SET;
 800221e:	2201      	movs	r2, #1
 8002220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002224:	4808      	ldr	r0, [pc, #32]	; (8002248 <SPIv_WriteData+0x6c>)
 8002226:	f000 fcfb 	bl	8002c20 <HAL_GPIO_WritePin>
      Data<<=1;
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	71fb      	strb	r3, [r7, #7]
	for(i=8;i>0;i--)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	3b01      	subs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1d9      	bne.n	80021f0 <SPIv_WriteData+0x14>
	}
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	58021000 	.word	0x58021000

0800224c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_MspInit+0x30>)
 8002254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002258:	4a08      	ldr	r2, [pc, #32]	; (800227c <HAL_MspInit+0x30>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_MspInit+0x30>)
 8002264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	58024400 	.word	0x58024400

08002280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <NMI_Handler+0x4>

08002286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <HardFault_Handler+0x4>

0800228c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <MemManage_Handler+0x4>

08002292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <BusFault_Handler+0x4>

08002298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <UsageFault_Handler+0x4>

0800229e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022cc:	f000 f964 	bl	8002598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 80022d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022dc:	f000 fcb9 	bl	8002c52 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <_sbrk+0x5c>)
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <_sbrk+0x60>)
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <_sbrk+0x64>)
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <_sbrk+0x68>)
 8002304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	429a      	cmp	r2, r3
 8002312:	d207      	bcs.n	8002324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002314:	f003 fcba 	bl	8005c8c <__errno>
 8002318:	4603      	mov	r3, r0
 800231a:	220c      	movs	r2, #12
 800231c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	e009      	b.n	8002338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <_sbrk+0x64>)
 8002334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	24080000 	.word	0x24080000
 8002344:	00000400 	.word	0x00000400
 8002348:	24000268 	.word	0x24000268
 800234c:	24000280 	.word	0x24000280

08002350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002354:	4b37      	ldr	r3, [pc, #220]	; (8002434 <SystemInit+0xe4>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	4a36      	ldr	r2, [pc, #216]	; (8002434 <SystemInit+0xe4>)
 800235c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <SystemInit+0xe8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	2b06      	cmp	r3, #6
 800236e:	d807      	bhi.n	8002380 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <SystemInit+0xe8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 030f 	bic.w	r3, r3, #15
 8002378:	4a2f      	ldr	r2, [pc, #188]	; (8002438 <SystemInit+0xe8>)
 800237a:	f043 0307 	orr.w	r3, r3, #7
 800237e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002380:	4b2e      	ldr	r3, [pc, #184]	; (800243c <SystemInit+0xec>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2d      	ldr	r2, [pc, #180]	; (800243c <SystemInit+0xec>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <SystemInit+0xec>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <SystemInit+0xec>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4929      	ldr	r1, [pc, #164]	; (800243c <SystemInit+0xec>)
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <SystemInit+0xf0>)
 800239a:	4013      	ands	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <SystemInit+0xe8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023aa:	4b23      	ldr	r3, [pc, #140]	; (8002438 <SystemInit+0xe8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 030f 	bic.w	r3, r3, #15
 80023b2:	4a21      	ldr	r2, [pc, #132]	; (8002438 <SystemInit+0xe8>)
 80023b4:	f043 0307 	orr.w	r3, r3, #7
 80023b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <SystemInit+0xec>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <SystemInit+0xec>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <SystemInit+0xec>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <SystemInit+0xec>)
 80023ce:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <SystemInit+0xf4>)
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <SystemInit+0xec>)
 80023d4:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <SystemInit+0xf8>)
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <SystemInit+0xec>)
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <SystemInit+0xfc>)
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <SystemInit+0xec>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <SystemInit+0xec>)
 80023e6:	4a19      	ldr	r2, [pc, #100]	; (800244c <SystemInit+0xfc>)
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <SystemInit+0xec>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <SystemInit+0xec>)
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <SystemInit+0xfc>)
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <SystemInit+0xec>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <SystemInit+0xec>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <SystemInit+0xec>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <SystemInit+0xec>)
 800240a:	2200      	movs	r2, #0
 800240c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <SystemInit+0x100>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <SystemInit+0x104>)
 8002414:	4013      	ands	r3, r2
 8002416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800241a:	d202      	bcs.n	8002422 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <SystemInit+0x108>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <SystemInit+0x10c>)
 8002424:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002428:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00
 8002438:	52002000 	.word	0x52002000
 800243c:	58024400 	.word	0x58024400
 8002440:	eaf6ed7f 	.word	0xeaf6ed7f
 8002444:	02020200 	.word	0x02020200
 8002448:	01ff0000 	.word	0x01ff0000
 800244c:	01010280 	.word	0x01010280
 8002450:	5c001000 	.word	0x5c001000
 8002454:	ffff0000 	.word	0xffff0000
 8002458:	51008108 	.word	0x51008108
 800245c:	52004000 	.word	0x52004000

08002460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002498 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002464:	f7ff ff74 	bl	8002350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002468:	480c      	ldr	r0, [pc, #48]	; (800249c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800246a:	490d      	ldr	r1, [pc, #52]	; (80024a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800246c:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002470:	e002      	b.n	8002478 <LoopCopyDataInit>

08002472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002476:	3304      	adds	r3, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800247c:	d3f9      	bcc.n	8002472 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002480:	4c0a      	ldr	r4, [pc, #40]	; (80024ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002484:	e001      	b.n	800248a <LoopFillZerobss>

08002486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002488:	3204      	adds	r2, #4

0800248a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800248c:	d3fb      	bcc.n	8002486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800248e:	f003 fc03 	bl	8005c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002492:	f7ff f993 	bl	80017bc <main>
  bx  lr
 8002496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800249c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024a0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80024a4:	08007d48 	.word	0x08007d48
  ldr r2, =_sbss
 80024a8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80024ac:	24000280 	.word	0x24000280

080024b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC3_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ba:	2003      	movs	r0, #3
 80024bc:	f000 f98c 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024c0:	f001 fb5e 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_Init+0x68>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	4913      	ldr	r1, [pc, #76]	; (8002520 <HAL_Init+0x6c>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_Init+0x68>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_Init+0x6c>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <HAL_Init+0x70>)
 80024f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024f8:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <HAL_Init+0x74>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024fe:	200f      	movs	r0, #15
 8002500:	f000 f814 	bl	800252c <HAL_InitTick>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e002      	b.n	8002514 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800250e:	f7ff fe9d 	bl	800224c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	58024400 	.word	0x58024400
 8002520:	08007cfc 	.word	0x08007cfc
 8002524:	24000004 	.word	0x24000004
 8002528:	24000000 	.word	0x24000000

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_InitTick+0x60>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e021      	b.n	8002584 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_InitTick+0x64>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_InitTick+0x60>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f971 	bl	800283e <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f000 f93b 	bl	80027ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <HAL_InitTick+0x68>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	2400000c 	.word	0x2400000c
 8002590:	24000000 	.word	0x24000000
 8002594:	24000008 	.word	0x24000008

08002598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_IncTick+0x20>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_IncTick+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_IncTick+0x24>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	2400000c 	.word	0x2400000c
 80025bc:	2400026c 	.word	0x2400026c

080025c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_GetTick+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	2400026c 	.word	0x2400026c

080025d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff ffee 	bl	80025c0 <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d005      	beq.n	80025fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_Delay+0x44>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025fe:	bf00      	nop
 8002600:	f7ff ffde 	bl	80025c0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d8f7      	bhi.n	8002600 <HAL_Delay+0x28>
  {
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2400000c 	.word	0x2400000c

08002620 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_GetREVID+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0c1b      	lsrs	r3, r3, #16
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	5c001000 	.word	0x5c001000

08002638 <__NVIC_SetPriorityGrouping>:
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <__NVIC_SetPriorityGrouping+0x40>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	4313      	orrs	r3, r2
 8002664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <__NVIC_SetPriorityGrouping+0x40>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00
 800267c:	05fa0000 	.word	0x05fa0000

08002680 <__NVIC_GetPriorityGrouping>:
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_EnableIRQ>:
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0b      	blt.n	80026c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <__NVIC_EnableIRQ+0x38>)
 80026b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a4:	d301      	bcc.n	80027aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00f      	b.n	80027ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <SysTick_Config+0x40>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b2:	210f      	movs	r1, #15
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f7ff ff8e 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <SysTick_Config+0x40>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <SysTick_Config+0x40>)
 80027c4:	2207      	movs	r2, #7
 80027c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	e000e010 	.word	0xe000e010

080027d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff29 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027fc:	f7ff ff40 	bl	8002680 <__NVIC_GetPriorityGrouping>
 8002800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f7ff ff90 	bl	800272c <NVIC_EncodePriority>
 800280c:	4602      	mov	r2, r0
 800280e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff5f 	bl	80026d8 <__NVIC_SetPriority>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff33 	bl	800269c <__NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffa4 	bl	8002794 <SysTick_Config>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d106      	bne.n	8002874 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002872:	e005      	b.n	8002880 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800289e:	4b89      	ldr	r3, [pc, #548]	; (8002ac4 <HAL_GPIO_Init+0x234>)
 80028a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028a2:	e194      	b.n	8002bce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8186 	beq.w	8002bc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d005      	beq.n	80028d4 <HAL_GPIO_Init+0x44>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d130      	bne.n	8002936 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800290a:	2201      	movs	r2, #1
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 0201 	and.w	r2, r3, #1
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b03      	cmp	r3, #3
 8002940:	d017      	beq.n	8002972 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2203      	movs	r2, #3
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d123      	bne.n	80029c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	220f      	movs	r2, #15
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	08da      	lsrs	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3208      	adds	r2, #8
 80029c0:	69b9      	ldr	r1, [r7, #24]
 80029c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0203 	and.w	r2, r3, #3
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80e0 	beq.w	8002bc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a08:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <HAL_GPIO_Init+0x238>)
 8002a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a0e:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_GPIO_Init+0x238>)
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_GPIO_Init+0x238>)
 8002a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a26:	4a29      	ldr	r2, [pc, #164]	; (8002acc <HAL_GPIO_Init+0x23c>)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_GPIO_Init+0x240>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d052      	beq.n	8002af8 <HAL_GPIO_Init+0x268>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <HAL_GPIO_Init+0x244>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d031      	beq.n	8002abe <HAL_GPIO_Init+0x22e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ad8 <HAL_GPIO_Init+0x248>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02b      	beq.n	8002aba <HAL_GPIO_Init+0x22a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <HAL_GPIO_Init+0x24c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d025      	beq.n	8002ab6 <HAL_GPIO_Init+0x226>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <HAL_GPIO_Init+0x250>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01f      	beq.n	8002ab2 <HAL_GPIO_Init+0x222>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_GPIO_Init+0x254>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d019      	beq.n	8002aae <HAL_GPIO_Init+0x21e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ae8 <HAL_GPIO_Init+0x258>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0x21a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <HAL_GPIO_Init+0x25c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00d      	beq.n	8002aa6 <HAL_GPIO_Init+0x216>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_GPIO_Init+0x260>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <HAL_GPIO_Init+0x212>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <HAL_GPIO_Init+0x264>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_GPIO_Init+0x20e>
 8002a9a:	2309      	movs	r3, #9
 8002a9c:	e02d      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	e02b      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	e029      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002aa6:	2307      	movs	r3, #7
 8002aa8:	e027      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002aaa:	2306      	movs	r3, #6
 8002aac:	e025      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002aae:	2305      	movs	r3, #5
 8002ab0:	e023      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	e021      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e01f      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e01d      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e01b      	b.n	8002afa <HAL_GPIO_Init+0x26a>
 8002ac2:	bf00      	nop
 8002ac4:	58000080 	.word	0x58000080
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	58000400 	.word	0x58000400
 8002ad0:	58020000 	.word	0x58020000
 8002ad4:	58020400 	.word	0x58020400
 8002ad8:	58020800 	.word	0x58020800
 8002adc:	58020c00 	.word	0x58020c00
 8002ae0:	58021000 	.word	0x58021000
 8002ae4:	58021400 	.word	0x58021400
 8002ae8:	58021800 	.word	0x58021800
 8002aec:	58021c00 	.word	0x58021c00
 8002af0:	58022000 	.word	0x58022000
 8002af4:	58022400 	.word	0x58022400
 8002af8:	2300      	movs	r3, #0
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	f002 0203 	and.w	r2, r2, #3
 8002b00:	0092      	lsls	r2, r2, #2
 8002b02:	4093      	lsls	r3, r2
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b0a:	4938      	ldr	r1, [pc, #224]	; (8002bec <HAL_GPIO_Init+0x35c>)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f47f ae63 	bne.w	80028a4 <HAL_GPIO_Init+0x14>
  }
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	3724      	adds	r7, #36	; 0x24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	58000400 	.word	0x58000400

08002bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e001      	b.n	8002c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c30:	787b      	ldrb	r3, [r7, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c3c:	e003      	b.n	8002c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	041a      	lsls	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	619a      	str	r2, [r3, #24]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f804 	bl	8002c86 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07f      	b.n	8002dae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe f950 	bl	8000f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	e006      	b.n	8002d24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d104      	bne.n	8002d36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_I2C_Init+0x11c>)
 8002d42:	430b      	orrs	r3, r1
 8002d44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69d9      	ldr	r1, [r3, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	02008000 	.word	0x02008000

08002dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d138      	bne.n	8002e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e032      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d139      	bne.n	8002edc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e033      	b.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2224      	movs	r2, #36	; 0x24
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ea4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e000      	b.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_PWREx_ConfigSupply+0x70>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d00a      	beq.n	8002f16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_PWREx_ConfigSupply+0x70>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d001      	beq.n	8002f12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e01f      	b.n	8002f52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e01d      	b.n	8002f52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_PWREx_ConfigSupply+0x70>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	490f      	ldr	r1, [pc, #60]	; (8002f5c <HAL_PWREx_ConfigSupply+0x70>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f26:	f7ff fb4b 	bl	80025c0 <HAL_GetTick>
 8002f2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f2c:	e009      	b.n	8002f42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f2e:	f7ff fb47 	bl	80025c0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f3c:	d901      	bls.n	8002f42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e007      	b.n	8002f52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_PWREx_ConfigSupply+0x70>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4e:	d1ee      	bne.n	8002f2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	58024800 	.word	0x58024800

08002f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08c      	sub	sp, #48	; 0x30
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f000 bc48 	b.w	8003804 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8088 	beq.w	8003092 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f82:	4b99      	ldr	r3, [pc, #612]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f8c:	4b96      	ldr	r3, [pc, #600]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d007      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x48>
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	2b18      	cmp	r3, #24
 8002f9c:	d111      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x62>
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	4b8f      	ldr	r3, [pc, #572]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d06d      	beq.n	8003090 <HAL_RCC_OscConfig+0x130>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d169      	bne.n	8003090 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f000 bc21 	b.w	8003804 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x7a>
 8002fcc:	4b86      	ldr	r3, [pc, #536]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a85      	ldr	r2, [pc, #532]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e02e      	b.n	8003038 <HAL_RCC_OscConfig+0xd8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x9c>
 8002fe2:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a80      	ldr	r2, [pc, #512]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b7e      	ldr	r3, [pc, #504]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a7d      	ldr	r2, [pc, #500]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8002ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e01d      	b.n	8003038 <HAL_RCC_OscConfig+0xd8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0xc0>
 8003006:	4b78      	ldr	r3, [pc, #480]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a77      	ldr	r2, [pc, #476]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b75      	ldr	r3, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a74      	ldr	r2, [pc, #464]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0xd8>
 8003020:	4b71      	ldr	r3, [pc, #452]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a70      	ldr	r2, [pc, #448]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b6e      	ldr	r3, [pc, #440]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6d      	ldr	r2, [pc, #436]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7ff fabe 	bl	80025c0 <HAL_GetTick>
 8003044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7ff faba 	bl	80025c0 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e3d4      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800305a:	4b63      	ldr	r3, [pc, #396]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0xe8>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7ff faaa 	bl	80025c0 <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7ff faa6 	bl	80025c0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e3c0      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003082:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x110>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80ca 	beq.w	8003234 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a0:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030aa:	4b4f      	ldr	r3, [pc, #316]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_RCC_OscConfig+0x166>
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2b18      	cmp	r3, #24
 80030ba:	d156      	bne.n	800316a <HAL_RCC_OscConfig+0x20a>
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d151      	bne.n	800316a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c6:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x17e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e392      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030de:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 0219 	bic.w	r2, r3, #25
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	493f      	ldr	r1, [pc, #252]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7ff fa66 	bl	80025c0 <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f8:	f7ff fa62 	bl	80025c0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e37c      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003116:	f7ff fa83 	bl	8002620 <HAL_GetREVID>
 800311a:	4603      	mov	r3, r0
 800311c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003120:	4293      	cmp	r3, r2
 8003122:	d817      	bhi.n	8003154 <HAL_RCC_OscConfig+0x1f4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d108      	bne.n	800313e <HAL_RCC_OscConfig+0x1de>
 800312c:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003134:	4a2c      	ldr	r2, [pc, #176]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800313c:	e07a      	b.n	8003234 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	031b      	lsls	r3, r3, #12
 800314c:	4926      	ldr	r1, [pc, #152]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003152:	e06f      	b.n	8003234 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	4921      	ldr	r1, [pc, #132]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003168:	e064      	b.n	8003234 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d047      	beq.n	8003202 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 0219 	bic.w	r2, r3, #25
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	491a      	ldr	r1, [pc, #104]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7ff fa1c 	bl	80025c0 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318c:	f7ff fa18 	bl	80025c0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e332      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	f7ff fa39 	bl	8002620 <HAL_GetREVID>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d819      	bhi.n	80031ec <HAL_RCC_OscConfig+0x28c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d108      	bne.n	80031d2 <HAL_RCC_OscConfig+0x272>
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031c8:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80031ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ce:	6053      	str	r3, [r2, #4]
 80031d0:	e030      	b.n	8003234 <HAL_RCC_OscConfig+0x2d4>
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	031b      	lsls	r3, r3, #12
 80031e0:	4901      	ldr	r1, [pc, #4]	; (80031e8 <HAL_RCC_OscConfig+0x288>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
 80031e6:	e025      	b.n	8003234 <HAL_RCC_OscConfig+0x2d4>
 80031e8:	58024400 	.word	0x58024400
 80031ec:	4b9a      	ldr	r3, [pc, #616]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	4997      	ldr	r1, [pc, #604]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
 8003200:	e018      	b.n	8003234 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b95      	ldr	r3, [pc, #596]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a94      	ldr	r2, [pc, #592]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7ff f9d7 	bl	80025c0 <HAL_GetTick>
 8003212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003216:	f7ff f9d3 	bl	80025c0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e2ed      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003228:	4b8b      	ldr	r3, [pc, #556]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80a9 	beq.w	8003394 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003242:	4b85      	ldr	r3, [pc, #532]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800324a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800324c:	4b82      	ldr	r3, [pc, #520]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d007      	beq.n	8003268 <HAL_RCC_OscConfig+0x308>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b18      	cmp	r3, #24
 800325c:	d13a      	bne.n	80032d4 <HAL_RCC_OscConfig+0x374>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d135      	bne.n	80032d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003268:	4b7b      	ldr	r3, [pc, #492]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_OscConfig+0x320>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	2b80      	cmp	r3, #128	; 0x80
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e2c1      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003280:	f7ff f9ce 	bl	8002620 <HAL_GetREVID>
 8003284:	4603      	mov	r3, r0
 8003286:	f241 0203 	movw	r2, #4099	; 0x1003
 800328a:	4293      	cmp	r3, r2
 800328c:	d817      	bhi.n	80032be <HAL_RCC_OscConfig+0x35e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	2b20      	cmp	r3, #32
 8003294:	d108      	bne.n	80032a8 <HAL_RCC_OscConfig+0x348>
 8003296:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800329e:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032a6:	e075      	b.n	8003394 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032a8:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	069b      	lsls	r3, r3, #26
 80032b6:	4968      	ldr	r1, [pc, #416]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032bc:	e06a      	b.n	8003394 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032be:	4b66      	ldr	r3, [pc, #408]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	061b      	lsls	r3, r3, #24
 80032cc:	4962      	ldr	r1, [pc, #392]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032d2:	e05f      	b.n	8003394 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d042      	beq.n	8003362 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032dc:	4b5e      	ldr	r3, [pc, #376]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80032e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7ff f96a 	bl	80025c0 <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032f0:	f7ff f966 	bl	80025c0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e280      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003302:	4b55      	ldr	r3, [pc, #340]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800330e:	f7ff f987 	bl	8002620 <HAL_GetREVID>
 8003312:	4603      	mov	r3, r0
 8003314:	f241 0203 	movw	r2, #4099	; 0x1003
 8003318:	4293      	cmp	r3, r2
 800331a:	d817      	bhi.n	800334c <HAL_RCC_OscConfig+0x3ec>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	2b20      	cmp	r3, #32
 8003322:	d108      	bne.n	8003336 <HAL_RCC_OscConfig+0x3d6>
 8003324:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800332c:	4a4a      	ldr	r2, [pc, #296]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 800332e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003332:	6053      	str	r3, [r2, #4]
 8003334:	e02e      	b.n	8003394 <HAL_RCC_OscConfig+0x434>
 8003336:	4b48      	ldr	r3, [pc, #288]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	069b      	lsls	r3, r3, #26
 8003344:	4944      	ldr	r1, [pc, #272]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
 800334a:	e023      	b.n	8003394 <HAL_RCC_OscConfig+0x434>
 800334c:	4b42      	ldr	r3, [pc, #264]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	493f      	ldr	r1, [pc, #252]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 800335c:	4313      	orrs	r3, r2
 800335e:	60cb      	str	r3, [r1, #12]
 8003360:	e018      	b.n	8003394 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a3c      	ldr	r2, [pc, #240]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7ff f927 	bl	80025c0 <HAL_GetTick>
 8003372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003376:	f7ff f923 	bl	80025c0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e23d      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003388:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d036      	beq.n	800340e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d019      	beq.n	80033dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80033aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ac:	4a2a      	ldr	r2, [pc, #168]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7ff f904 	bl	80025c0 <HAL_GetTick>
 80033b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033bc:	f7ff f900 	bl	80025c0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e21a      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x45c>
 80033da:	e018      	b.n	800340e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80033de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7ff f8ea 	bl	80025c0 <HAL_GetTick>
 80033ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7ff f8e6 	bl	80025c0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e200      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d039      	beq.n	800348e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01c      	beq.n	800345c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 8003428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800342c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800342e:	f7ff f8c7 	bl	80025c0 <HAL_GetTick>
 8003432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003436:	f7ff f8c3 	bl	80025c0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e1dd      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_RCC_OscConfig+0x4f8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x4d6>
 8003454:	e01b      	b.n	800348e <HAL_RCC_OscConfig+0x52e>
 8003456:	bf00      	nop
 8003458:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800345c:	4b9b      	ldr	r3, [pc, #620]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a9a      	ldr	r2, [pc, #616]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003466:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003468:	f7ff f8aa 	bl	80025c0 <HAL_GetTick>
 800346c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003470:	f7ff f8a6 	bl	80025c0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1c0      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003482:	4b92      	ldr	r3, [pc, #584]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8081 	beq.w	800359e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800349c:	4b8c      	ldr	r3, [pc, #560]	; (80036d0 <HAL_RCC_OscConfig+0x770>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a8b      	ldr	r2, [pc, #556]	; (80036d0 <HAL_RCC_OscConfig+0x770>)
 80034a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a8:	f7ff f88a 	bl	80025c0 <HAL_GetTick>
 80034ac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b0:	f7ff f886 	bl	80025c0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e1a0      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c2:	4b83      	ldr	r3, [pc, #524]	; (80036d0 <HAL_RCC_OscConfig+0x770>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d106      	bne.n	80034e4 <HAL_RCC_OscConfig+0x584>
 80034d6:	4b7d      	ldr	r3, [pc, #500]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a7c      	ldr	r2, [pc, #496]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	e02d      	b.n	8003540 <HAL_RCC_OscConfig+0x5e0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10c      	bne.n	8003506 <HAL_RCC_OscConfig+0x5a6>
 80034ec:	4b77      	ldr	r3, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4a76      	ldr	r2, [pc, #472]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
 80034f8:	4b74      	ldr	r3, [pc, #464]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a73      	ldr	r2, [pc, #460]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80034fe:	f023 0304 	bic.w	r3, r3, #4
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
 8003504:	e01c      	b.n	8003540 <HAL_RCC_OscConfig+0x5e0>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b05      	cmp	r3, #5
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x5c8>
 800350e:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
 800351a:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a6b      	ldr	r2, [pc, #428]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0x5e0>
 8003528:	4b68      	ldr	r3, [pc, #416]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a67      	ldr	r2, [pc, #412]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	4b65      	ldr	r3, [pc, #404]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a64      	ldr	r2, [pc, #400]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 800353a:	f023 0304 	bic.w	r3, r3, #4
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7ff f83a 	bl	80025c0 <HAL_GetTick>
 800354c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800354e:	e00a      	b.n	8003566 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7ff f836 	bl	80025c0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e14e      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003566:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0ee      	beq.n	8003550 <HAL_RCC_OscConfig+0x5f0>
 8003572:	e014      	b.n	800359e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7ff f824 	bl	80025c0 <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357c:	f7ff f820 	bl	80025c0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e138      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003592:	4b4e      	ldr	r3, [pc, #312]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ee      	bne.n	800357c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 812d 	beq.w	8003802 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035a8:	4b48      	ldr	r3, [pc, #288]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b0:	2b18      	cmp	r3, #24
 80035b2:	f000 80bd 	beq.w	8003730 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	f040 809e 	bne.w	80036fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c0:	4b42      	ldr	r3, [pc, #264]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a41      	ldr	r2, [pc, #260]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80035c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe fff8 	bl	80025c0 <HAL_GetTick>
 80035d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fe fff4 	bl	80025c0 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e10e      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035e6:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f2:	4b36      	ldr	r3, [pc, #216]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80035f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_OscConfig+0x774>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003602:	0112      	lsls	r2, r2, #4
 8003604:	430a      	orrs	r2, r1
 8003606:	4931      	ldr	r1, [pc, #196]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	628b      	str	r3, [r1, #40]	; 0x28
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	3b01      	subs	r3, #1
 8003612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	3b01      	subs	r3, #1
 800361c:	025b      	lsls	r3, r3, #9
 800361e:	b29b      	uxth	r3, r3
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	3b01      	subs	r3, #1
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	3b01      	subs	r3, #1
 8003636:	061b      	lsls	r3, r3, #24
 8003638:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800363c:	4923      	ldr	r1, [pc, #140]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003642:	4b22      	ldr	r3, [pc, #136]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	4a21      	ldr	r2, [pc, #132]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800364e:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_RCC_OscConfig+0x778>)
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800365a:	00d2      	lsls	r2, r2, #3
 800365c:	491b      	ldr	r1, [pc, #108]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 800365e:	4313      	orrs	r3, r2
 8003660:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f023 020c 	bic.w	r2, r3, #12
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4917      	ldr	r1, [pc, #92]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003670:	4313      	orrs	r3, r2
 8003672:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f023 0202 	bic.w	r2, r3, #2
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	4912      	ldr	r1, [pc, #72]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	4a10      	ldr	r2, [pc, #64]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003690:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003692:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 8003698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80036a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	4a07      	ldr	r2, [pc, #28]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a04      	ldr	r2, [pc, #16]	; (80036cc <HAL_RCC_OscConfig+0x76c>)
 80036bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fe ff7d 	bl	80025c0 <HAL_GetTick>
 80036c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036c8:	e011      	b.n	80036ee <HAL_RCC_OscConfig+0x78e>
 80036ca:	bf00      	nop
 80036cc:	58024400 	.word	0x58024400
 80036d0:	58024800 	.word	0x58024800
 80036d4:	fffffc0c 	.word	0xfffffc0c
 80036d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe ff70 	bl	80025c0 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e08a      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x77c>
 80036fa:	e082      	b.n	8003802 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fc:	4b43      	ldr	r3, [pc, #268]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a42      	ldr	r2, [pc, #264]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 8003702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe ff5a 	bl	80025c0 <HAL_GetTick>
 800370c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe ff56 	bl	80025c0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e070      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003722:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x7b0>
 800372e:	e068      	b.n	8003802 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003730:	4b36      	ldr	r3, [pc, #216]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003736:	4b35      	ldr	r3, [pc, #212]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	2b01      	cmp	r3, #1
 8003742:	d031      	beq.n	80037a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f003 0203 	and.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d12a      	bne.n	80037a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d122      	bne.n	80037a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d11a      	bne.n	80037a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	0a5b      	lsrs	r3, r3, #9
 8003776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d111      	bne.n	80037a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d108      	bne.n	80037a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	0e1b      	lsrs	r3, r3, #24
 800379a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e02b      	b.n	8003804 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	08db      	lsrs	r3, r3, #3
 80037b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d01f      	beq.n	8003802 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80037c2:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	4a11      	ldr	r2, [pc, #68]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037ce:	f7fe fef7 	bl	80025c0 <HAL_GetTick>
 80037d2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80037d4:	bf00      	nop
 80037d6:	f7fe fef3 	bl	80025c0 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	4293      	cmp	r3, r2
 80037e0:	d0f9      	beq.n	80037d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 80037e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <HAL_RCC_OscConfig+0x8b0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ee:	00d2      	lsls	r2, r2, #3
 80037f0:	4906      	ldr	r1, [pc, #24]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_RCC_OscConfig+0x8ac>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3730      	adds	r7, #48	; 0x30
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	58024400 	.word	0x58024400
 8003810:	ffff0007 	.word	0xffff0007

08003814 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e19c      	b.n	8003b62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b8a      	ldr	r3, [pc, #552]	; (8003a54 <HAL_RCC_ClockConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d910      	bls.n	8003858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b87      	ldr	r3, [pc, #540]	; (8003a54 <HAL_RCC_ClockConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 020f 	bic.w	r2, r3, #15
 800383e:	4985      	ldr	r1, [pc, #532]	; (8003a54 <HAL_RCC_ClockConfig+0x240>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b83      	ldr	r3, [pc, #524]	; (8003a54 <HAL_RCC_ClockConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e184      	b.n	8003b62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	4b7b      	ldr	r3, [pc, #492]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003870:	429a      	cmp	r2, r3
 8003872:	d908      	bls.n	8003886 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003874:	4b78      	ldr	r3, [pc, #480]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	4975      	ldr	r1, [pc, #468]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003882:	4313      	orrs	r3, r2
 8003884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	4b70      	ldr	r3, [pc, #448]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800389e:	429a      	cmp	r2, r3
 80038a0:	d908      	bls.n	80038b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038a2:	4b6d      	ldr	r3, [pc, #436]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	496a      	ldr	r1, [pc, #424]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	4b64      	ldr	r3, [pc, #400]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d908      	bls.n	80038e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038d0:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	495e      	ldr	r1, [pc, #376]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d908      	bls.n	8003910 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038fe:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4953      	ldr	r1, [pc, #332]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 800390c:	4313      	orrs	r3, r2
 800390e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d010      	beq.n	800393e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	429a      	cmp	r2, r3
 800392a:	d908      	bls.n	800393e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800392c:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f023 020f 	bic.w	r2, r3, #15
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4947      	ldr	r1, [pc, #284]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 800393a:	4313      	orrs	r3, r2
 800393c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d055      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800394a:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	4940      	ldr	r1, [pc, #256]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003958:	4313      	orrs	r3, r2
 800395a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d107      	bne.n	8003974 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003964:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d121      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0f6      	b.n	8003b62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d107      	bne.n	800398c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800397c:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d115      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0ea      	b.n	8003b62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003994:	4b30      	ldr	r3, [pc, #192]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0de      	b.n	8003b62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0d6      	b.n	8003b62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b4:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f023 0207 	bic.w	r2, r3, #7
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4925      	ldr	r1, [pc, #148]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c6:	f7fe fdfb 	bl	80025c0 <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ce:	f7fe fdf7 	bl	80025c0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0be      	b.n	8003b62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e4:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d1eb      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d208      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	490e      	ldr	r1, [pc, #56]	; (8003a58 <HAL_RCC_ClockConfig+0x244>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_ClockConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d214      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_RCC_ClockConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 020f 	bic.w	r2, r3, #15
 8003a3a:	4906      	ldr	r1, [pc, #24]	; (8003a54 <HAL_RCC_ClockConfig+0x240>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <HAL_RCC_ClockConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e086      	b.n	8003b62 <HAL_RCC_ClockConfig+0x34e>
 8003a54:	52002000 	.word	0x52002000
 8003a58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d010      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d208      	bcs.n	8003a8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a78:	4b3c      	ldr	r3, [pc, #240]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	4939      	ldr	r1, [pc, #228]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d010      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d208      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aa6:	4b31      	ldr	r3, [pc, #196]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	492e      	ldr	r1, [pc, #184]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d010      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d208      	bcs.n	8003ae6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	4922      	ldr	r1, [pc, #136]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d208      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b02:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4917      	ldr	r1, [pc, #92]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b14:	f000 f834 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	4912      	ldr	r1, [pc, #72]	; (8003b70 <HAL_RCC_ClockConfig+0x35c>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_RCC_ClockConfig+0x358>)
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <HAL_RCC_ClockConfig+0x35c>)
 8003b3c:	5cd3      	ldrb	r3, [r2, r3]
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
 8003b48:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <HAL_RCC_ClockConfig+0x360>)
 8003b4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <HAL_RCC_ClockConfig+0x364>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_RCC_ClockConfig+0x368>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe fce8 	bl	800252c <HAL_InitTick>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	58024400 	.word	0x58024400
 8003b70:	08007cfc 	.word	0x08007cfc
 8003b74:	24000004 	.word	0x24000004
 8003b78:	24000000 	.word	0x24000000
 8003b7c:	24000008 	.word	0x24000008

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b86:	4bb3      	ldr	r3, [pc, #716]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b8e:	2b18      	cmp	r3, #24
 8003b90:	f200 8155 	bhi.w	8003e3e <HAL_RCC_GetSysClockFreq+0x2be>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003c01 	.word	0x08003c01
 8003ba0:	08003e3f 	.word	0x08003e3f
 8003ba4:	08003e3f 	.word	0x08003e3f
 8003ba8:	08003e3f 	.word	0x08003e3f
 8003bac:	08003e3f 	.word	0x08003e3f
 8003bb0:	08003e3f 	.word	0x08003e3f
 8003bb4:	08003e3f 	.word	0x08003e3f
 8003bb8:	08003e3f 	.word	0x08003e3f
 8003bbc:	08003c27 	.word	0x08003c27
 8003bc0:	08003e3f 	.word	0x08003e3f
 8003bc4:	08003e3f 	.word	0x08003e3f
 8003bc8:	08003e3f 	.word	0x08003e3f
 8003bcc:	08003e3f 	.word	0x08003e3f
 8003bd0:	08003e3f 	.word	0x08003e3f
 8003bd4:	08003e3f 	.word	0x08003e3f
 8003bd8:	08003e3f 	.word	0x08003e3f
 8003bdc:	08003c2d 	.word	0x08003c2d
 8003be0:	08003e3f 	.word	0x08003e3f
 8003be4:	08003e3f 	.word	0x08003e3f
 8003be8:	08003e3f 	.word	0x08003e3f
 8003bec:	08003e3f 	.word	0x08003e3f
 8003bf0:	08003e3f 	.word	0x08003e3f
 8003bf4:	08003e3f 	.word	0x08003e3f
 8003bf8:	08003e3f 	.word	0x08003e3f
 8003bfc:	08003c33 	.word	0x08003c33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c00:	4b94      	ldr	r3, [pc, #592]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c0c:	4b91      	ldr	r3, [pc, #580]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	4a90      	ldr	r2, [pc, #576]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c1e:	e111      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c20:	4b8d      	ldr	r3, [pc, #564]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c22:	61bb      	str	r3, [r7, #24]
      break;
 8003c24:	e10e      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c26:	4b8d      	ldr	r3, [pc, #564]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c28:	61bb      	str	r3, [r7, #24]
      break;
 8003c2a:	e10b      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c2c:	4b8c      	ldr	r3, [pc, #560]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c2e:	61bb      	str	r3, [r7, #24]
      break;
 8003c30:	e108      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c32:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c3c:	4b85      	ldr	r3, [pc, #532]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c48:	4b82      	ldr	r3, [pc, #520]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c52:	4b80      	ldr	r3, [pc, #512]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c56:	08db      	lsrs	r3, r3, #3
 8003c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80e1 	beq.w	8003e38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	f000 8083 	beq.w	8003d84 <HAL_RCC_GetSysClockFreq+0x204>
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	f200 80a1 	bhi.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x248>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x114>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d056      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c92:	e099      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c94:	4b6f      	ldr	r3, [pc, #444]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d02d      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ca0:	4b6c      	ldr	r3, [pc, #432]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	08db      	lsrs	r3, r3, #3
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	4a6b      	ldr	r2, [pc, #428]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cca:	4b62      	ldr	r3, [pc, #392]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cde:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003cfa:	e087      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0e:	4b51      	ldr	r3, [pc, #324]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d3e:	e065      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d52:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d82:	e043      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d96:	4b2f      	ldr	r3, [pc, #188]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003daa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dc6:	e021      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dda:	4b1e      	ldr	r3, [pc, #120]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e0a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	0a5b      	lsrs	r3, r3, #9
 8003e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e16:	3301      	adds	r3, #1
 8003e18:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e30:	ee17 3a90 	vmov	r3, s15
 8003e34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e36:	e005      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
      break;
 8003e3c:	e002      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e40:	61bb      	str	r3, [r7, #24]
      break;
 8003e42:	bf00      	nop
  }

  return sysclockfreq;
 8003e44:	69bb      	ldr	r3, [r7, #24]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	58024400 	.word	0x58024400
 8003e58:	03d09000 	.word	0x03d09000
 8003e5c:	003d0900 	.word	0x003d0900
 8003e60:	017d7840 	.word	0x017d7840
 8003e64:	46000000 	.word	0x46000000
 8003e68:	4c742400 	.word	0x4c742400
 8003e6c:	4a742400 	.word	0x4a742400
 8003e70:	4bbebc20 	.word	0x4bbebc20

08003e74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e78:	b0ca      	sub	sp, #296	; 0x128
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003e98:	2500      	movs	r5, #0
 8003e9a:	ea54 0305 	orrs.w	r3, r4, r5
 8003e9e:	d049      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eaa:	d02f      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003eac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eb0:	d828      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eb6:	d01a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ebc:	d822      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec6:	d007      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ec8:	e01c      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eca:	4bb8      	ldr	r3, [pc, #736]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	4ab7      	ldr	r2, [pc, #732]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ed6:	e01a      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003edc:	3308      	adds	r3, #8
 8003ede:	2102      	movs	r1, #2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 f9d1 	bl	8005288 <RCCEx_PLL2_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003eec:	e00f      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef2:	3328      	adds	r3, #40	; 0x28
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fa78 	bl	80053ec <RCCEx_PLL3_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f02:	e004      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f0a:	e000      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f16:	4ba5      	ldr	r3, [pc, #660]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f24:	4aa1      	ldr	r2, [pc, #644]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	6513      	str	r3, [r2, #80]	; 0x50
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003f40:	f04f 0900 	mov.w	r9, #0
 8003f44:	ea58 0309 	orrs.w	r3, r8, r9
 8003f48:	d047      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d82a      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f71 	.word	0x08003f71
 8003f60:	08003f7f 	.word	0x08003f7f
 8003f64:	08003f95 	.word	0x08003f95
 8003f68:	08003fb3 	.word	0x08003fb3
 8003f6c:	08003fb3 	.word	0x08003fb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f70:	4b8e      	ldr	r3, [pc, #568]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	4a8d      	ldr	r2, [pc, #564]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f7c:	e01a      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f82:	3308      	adds	r3, #8
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 f97e 	bl	8005288 <RCCEx_PLL2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f92:	e00f      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f98:	3328      	adds	r3, #40	; 0x28
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fa25 	bl	80053ec <RCCEx_PLL3_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fa8:	e004      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fbc:	4b7b      	ldr	r3, [pc, #492]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	f023 0107 	bic.w	r1, r3, #7
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	4a78      	ldr	r2, [pc, #480]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6513      	str	r3, [r2, #80]	; 0x50
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003fe6:	f04f 0b00 	mov.w	fp, #0
 8003fea:	ea5a 030b 	orrs.w	r3, sl, fp
 8003fee:	d04c      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffa:	d030      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004000:	d829      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004002:	2bc0      	cmp	r3, #192	; 0xc0
 8004004:	d02d      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004006:	2bc0      	cmp	r3, #192	; 0xc0
 8004008:	d825      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d018      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800400e:	2b80      	cmp	r3, #128	; 0x80
 8004010:	d821      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d007      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800401a:	e01c      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401c:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a62      	ldr	r2, [pc, #392]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004028:	e01c      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402e:	3308      	adds	r3, #8
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f001 f928 	bl	8005288 <RCCEx_PLL2_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800403e:	e011      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004044:	3328      	adds	r3, #40	; 0x28
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f9cf 	bl	80053ec <RCCEx_PLL3_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800406c:	4b4f      	ldr	r3, [pc, #316]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004070:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	4a4c      	ldr	r2, [pc, #304]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800407c:	430b      	orrs	r3, r1
 800407e:	6513      	str	r3, [r2, #80]	; 0x50
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004096:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80040a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d053      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b6:	d035      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80040b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040bc:	d82e      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040c2:	d031      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80040c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040c8:	d828      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ce:	d01a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80040d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d4:	d822      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80040da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040de:	d007      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80040e0:	e01c      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e2:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	4a31      	ldr	r2, [pc, #196]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040ee:	e01c      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f4:	3308      	adds	r3, #8
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 f8c5 	bl	8005288 <RCCEx_PLL2_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004104:	e011      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410a:	3328      	adds	r3, #40	; 0x28
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f001 f96c 	bl	80053ec <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800411a:	e006      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004122:	e002      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004132:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004142:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004144:	430b      	orrs	r3, r1
 8004146:	6593      	str	r3, [r2, #88]	; 0x58
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800414e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800415e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004168:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d056      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800417a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800417e:	d038      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004184:	d831      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004186:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800418a:	d034      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800418c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004190:	d82b      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004196:	d01d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800419c:	d825      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80041a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041a8:	e01f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b0:	4ba2      	ldr	r3, [pc, #648]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	4aa1      	ldr	r2, [pc, #644]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041bc:	e01c      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c2:	3308      	adds	r3, #8
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 f85e 	bl	8005288 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80041d2:	e011      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d8:	3328      	adds	r3, #40	; 0x28
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f905 	bl	80053ec <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041e8:	e006      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041f0:	e002      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80041f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004200:	4b8e      	ldr	r3, [pc, #568]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800420c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004210:	4a8a      	ldr	r2, [pc, #552]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004212:	430b      	orrs	r3, r1
 8004214:	6593      	str	r3, [r2, #88]	; 0x58
 8004216:	e003      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800422c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004236:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800423a:	460b      	mov	r3, r1
 800423c:	4313      	orrs	r3, r2
 800423e:	d03a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004246:	2b30      	cmp	r3, #48	; 0x30
 8004248:	d01f      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800424a:	2b30      	cmp	r3, #48	; 0x30
 800424c:	d819      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800424e:	2b20      	cmp	r3, #32
 8004250:	d00c      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004252:	2b20      	cmp	r3, #32
 8004254:	d815      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d019      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800425a:	2b10      	cmp	r3, #16
 800425c:	d111      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425e:	4b77      	ldr	r3, [pc, #476]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	4a76      	ldr	r2, [pc, #472]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800426a:	e011      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004270:	3308      	adds	r3, #8
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f001 f807 	bl	8005288 <RCCEx_PLL2_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800428e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004298:	4b68      	ldr	r3, [pc, #416]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	4a65      	ldr	r2, [pc, #404]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80042c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80042cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d051      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e0:	d035      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80042e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e6:	d82e      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80042e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042ec:	d031      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80042ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042f2:	d828      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80042f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f8:	d01a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80042fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fe:	d822      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004308:	d007      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800430a:	e01c      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430c:	4b4b      	ldr	r3, [pc, #300]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	4a4a      	ldr	r2, [pc, #296]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004318:	e01c      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431e:	3308      	adds	r3, #8
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f000 ffb0 	bl	8005288 <RCCEx_PLL2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800432e:	e011      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004334:	3328      	adds	r3, #40	; 0x28
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f857 	bl	80053ec <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004344:	e006      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800434c:	e002      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800435c:	4b37      	ldr	r3, [pc, #220]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800435e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004360:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436a:	4a34      	ldr	r2, [pc, #208]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800436c:	430b      	orrs	r3, r1
 800436e:	6513      	str	r3, [r2, #80]	; 0x50
 8004370:	e003      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004390:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004394:	460b      	mov	r3, r1
 8004396:	4313      	orrs	r3, r2
 8004398:	d056      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a4:	d033      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80043a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043aa:	d82c      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043b0:	d02f      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80043b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043b6:	d826      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043bc:	d02b      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80043be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043c2:	d820      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c8:	d012      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80043ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ce:	d81a      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d022      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d8:	d115      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043de:	3308      	adds	r3, #8
 80043e0:	2101      	movs	r1, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 ff50 	bl	8005288 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80043ee:	e015      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f4:	3328      	adds	r3, #40	; 0x28
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fff7 	bl	80053ec <RCCEx_PLL3_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004404:	e00a      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800440e:	bf00      	nop
 8004410:	e004      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800441a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10d      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004432:	4a02      	ldr	r2, [pc, #8]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004434:	430b      	orrs	r3, r1
 8004436:	6513      	str	r3, [r2, #80]	; 0x50
 8004438:	e006      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800443a:	bf00      	nop
 800443c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800445e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d055      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004474:	d033      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800447a:	d82c      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d02f      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d826      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004488:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800448c:	d02b      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800448e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004492:	d820      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004498:	d012      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800449a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449e:	d81a      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d022      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80044a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a8:	d115      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ae:	3308      	adds	r3, #8
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fee8 	bl	8005288 <RCCEx_PLL2_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044be:	e015      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c4:	3328      	adds	r3, #40	; 0x28
 80044c6:	2101      	movs	r1, #1
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 ff8f 	bl	80053ec <RCCEx_PLL3_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044d4:	e00a      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044dc:	e006      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044de:	bf00      	nop
 80044e0:	e004      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80044ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044f4:	4ba3      	ldr	r3, [pc, #652]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004504:	4a9f      	ldr	r2, [pc, #636]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004506:	430b      	orrs	r3, r1
 8004508:	6593      	str	r3, [r2, #88]	; 0x58
 800450a:	e003      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800452a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	d037      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800453e:	d00e      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004544:	d816      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d018      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800454a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800454e:	d111      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004550:	4b8c      	ldr	r3, [pc, #560]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	4a8b      	ldr	r2, [pc, #556]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800455a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800455c:	e00f      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004562:	3308      	adds	r3, #8
 8004564:	2101      	movs	r1, #1
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fe8e 	bl	8005288 <RCCEx_PLL2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004572:	e004      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800457a:	e000      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800457c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004586:	4b7f      	ldr	r3, [pc, #508]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a7b      	ldr	r2, [pc, #492]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004596:	430b      	orrs	r3, r1
 8004598:	6513      	str	r3, [r2, #80]	; 0x50
 800459a:	e003      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80045b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	d039      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d81c      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	08004611 	.word	0x08004611
 80045d8:	080045e5 	.word	0x080045e5
 80045dc:	080045f3 	.word	0x080045f3
 80045e0:	08004611 	.word	0x08004611
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e4:	4b67      	ldr	r3, [pc, #412]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	4a66      	ldr	r2, [pc, #408]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80045f0:	e00f      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	3308      	adds	r3, #8
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fe44 	bl	8005288 <RCCEx_PLL2_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800461a:	4b5a      	ldr	r3, [pc, #360]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	f023 0103 	bic.w	r1, r3, #3
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004628:	4a56      	ldr	r2, [pc, #344]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800462a:	430b      	orrs	r3, r1
 800462c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800462e:	e003      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004634:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004644:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004648:	2300      	movs	r3, #0
 800464a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800464e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	f000 809f 	beq.w	8004798 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800465a:	4b4b      	ldr	r3, [pc, #300]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a4a      	ldr	r2, [pc, #296]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004666:	f7fd ffab 	bl	80025c0 <HAL_GetTick>
 800466a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800466e:	e00b      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004670:	f7fd ffa6 	bl	80025c0 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b64      	cmp	r3, #100	; 0x64
 800467e:	d903      	bls.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004686:	e005      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004688:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ed      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004698:	2b00      	cmp	r3, #0
 800469a:	d179      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800469c:	4b39      	ldr	r3, [pc, #228]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800469e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046a8:	4053      	eors	r3, r2
 80046aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d015      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b2:	4b34      	ldr	r3, [pc, #208]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046be:	4b31      	ldr	r3, [pc, #196]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a30      	ldr	r2, [pc, #192]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ca:	4b2e      	ldr	r3, [pc, #184]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	4a2d      	ldr	r2, [pc, #180]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046d6:	4a2b      	ldr	r2, [pc, #172]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ea:	d118      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd ff68 	bl	80025c0 <HAL_GetTick>
 80046f0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046f4:	e00d      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fd ff63 	bl	80025c0 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	f241 3388 	movw	r3, #5000	; 0x1388
 8004706:	429a      	cmp	r2, r3
 8004708:	d903      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004710:	e005      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0eb      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004722:	2b00      	cmp	r3, #0
 8004724:	d129      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800472e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004736:	d10e      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004738:	4b12      	ldr	r3, [pc, #72]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004744:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004748:	091a      	lsrs	r2, r3, #4
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800474c:	4013      	ands	r3, r2
 800474e:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004750:	430b      	orrs	r3, r1
 8004752:	6113      	str	r3, [r2, #16]
 8004754:	e005      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800475c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004760:	6113      	str	r3, [r2, #16]
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004764:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800476e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004772:	4a04      	ldr	r2, [pc, #16]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004774:	430b      	orrs	r3, r1
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
 8004778:	e00e      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800477a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800477e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004782:	e009      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004784:	58024400 	.word	0x58024400
 8004788:	58024800 	.word	0x58024800
 800478c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004794:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f002 0301 	and.w	r3, r2, #1
 80047a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f000 8089 	beq.w	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c0:	2b28      	cmp	r3, #40	; 0x28
 80047c2:	d86b      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080048a5 	.word	0x080048a5
 80047d0:	0800489d 	.word	0x0800489d
 80047d4:	0800489d 	.word	0x0800489d
 80047d8:	0800489d 	.word	0x0800489d
 80047dc:	0800489d 	.word	0x0800489d
 80047e0:	0800489d 	.word	0x0800489d
 80047e4:	0800489d 	.word	0x0800489d
 80047e8:	0800489d 	.word	0x0800489d
 80047ec:	08004871 	.word	0x08004871
 80047f0:	0800489d 	.word	0x0800489d
 80047f4:	0800489d 	.word	0x0800489d
 80047f8:	0800489d 	.word	0x0800489d
 80047fc:	0800489d 	.word	0x0800489d
 8004800:	0800489d 	.word	0x0800489d
 8004804:	0800489d 	.word	0x0800489d
 8004808:	0800489d 	.word	0x0800489d
 800480c:	08004887 	.word	0x08004887
 8004810:	0800489d 	.word	0x0800489d
 8004814:	0800489d 	.word	0x0800489d
 8004818:	0800489d 	.word	0x0800489d
 800481c:	0800489d 	.word	0x0800489d
 8004820:	0800489d 	.word	0x0800489d
 8004824:	0800489d 	.word	0x0800489d
 8004828:	0800489d 	.word	0x0800489d
 800482c:	080048a5 	.word	0x080048a5
 8004830:	0800489d 	.word	0x0800489d
 8004834:	0800489d 	.word	0x0800489d
 8004838:	0800489d 	.word	0x0800489d
 800483c:	0800489d 	.word	0x0800489d
 8004840:	0800489d 	.word	0x0800489d
 8004844:	0800489d 	.word	0x0800489d
 8004848:	0800489d 	.word	0x0800489d
 800484c:	080048a5 	.word	0x080048a5
 8004850:	0800489d 	.word	0x0800489d
 8004854:	0800489d 	.word	0x0800489d
 8004858:	0800489d 	.word	0x0800489d
 800485c:	0800489d 	.word	0x0800489d
 8004860:	0800489d 	.word	0x0800489d
 8004864:	0800489d 	.word	0x0800489d
 8004868:	0800489d 	.word	0x0800489d
 800486c:	080048a5 	.word	0x080048a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004874:	3308      	adds	r3, #8
 8004876:	2101      	movs	r1, #1
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fd05 	bl	8005288 <RCCEx_PLL2_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004884:	e00f      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488a:	3328      	adds	r3, #40	; 0x28
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fdac 	bl	80053ec <RCCEx_PLL3_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800489a:	e004      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048a2:	e000      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80048a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048ae:	4bbf      	ldr	r3, [pc, #764]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048bc:	4abb      	ldr	r2, [pc, #748]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048be:	430b      	orrs	r3, r1
 80048c0:	6553      	str	r3, [r2, #84]	; 0x54
 80048c2:	e003      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f002 0302 	and.w	r3, r2, #2
 80048d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048dc:	2300      	movs	r3, #0
 80048de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80048e6:	460b      	mov	r3, r1
 80048e8:	4313      	orrs	r3, r2
 80048ea:	d041      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d824      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004949 	.word	0x08004949
 8004900:	08004915 	.word	0x08004915
 8004904:	0800492b 	.word	0x0800492b
 8004908:	08004949 	.word	0x08004949
 800490c:	08004949 	.word	0x08004949
 8004910:	08004949 	.word	0x08004949
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004918:	3308      	adds	r3, #8
 800491a:	2101      	movs	r1, #1
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fcb3 	bl	8005288 <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004928:	e00f      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492e:	3328      	adds	r3, #40	; 0x28
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fd5a 	bl	80053ec <RCCEx_PLL3_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800493e:	e004      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004946:	e000      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004952:	4b96      	ldr	r3, [pc, #600]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f023 0107 	bic.w	r1, r3, #7
 800495a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004960:	4a92      	ldr	r2, [pc, #584]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004962:	430b      	orrs	r3, r1
 8004964:	6553      	str	r3, [r2, #84]	; 0x54
 8004966:	e003      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f002 0304 	and.w	r3, r2, #4
 800497c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004980:	2300      	movs	r3, #0
 8004982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004986:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800498a:	460b      	mov	r3, r1
 800498c:	4313      	orrs	r3, r2
 800498e:	d044      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004998:	2b05      	cmp	r3, #5
 800499a:	d825      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049f1 	.word	0x080049f1
 80049a8:	080049bd 	.word	0x080049bd
 80049ac:	080049d3 	.word	0x080049d3
 80049b0:	080049f1 	.word	0x080049f1
 80049b4:	080049f1 	.word	0x080049f1
 80049b8:	080049f1 	.word	0x080049f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c0:	3308      	adds	r3, #8
 80049c2:	2101      	movs	r1, #1
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fc5f 	bl	8005288 <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049d0:	e00f      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d6:	3328      	adds	r3, #40	; 0x28
 80049d8:	2101      	movs	r1, #1
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fd06 	bl	80053ec <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049e6:	e004      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049ee:	e000      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80049f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049fa:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fe:	f023 0107 	bic.w	r1, r3, #7
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0a:	4a68      	ldr	r2, [pc, #416]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a10:	e003      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f002 0320 	and.w	r3, r2, #32
 8004a26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d055      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a46:	d033      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a4c:	d82c      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d02f      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d826      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a5e:	d02b      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004a60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a64:	d820      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6a:	d012      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a70:	d81a      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d022      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7a:	d115      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a80:	3308      	adds	r3, #8
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fbff 	bl	8005288 <RCCEx_PLL2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a90:	e015      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a96:	3328      	adds	r3, #40	; 0x28
 8004a98:	2102      	movs	r1, #2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fca6 	bl	80053ec <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004aa6:	e00a      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aae:	e006      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ab0:	bf00      	nop
 8004ab2:	e004      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ab4:	bf00      	nop
 8004ab6:	e002      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ab8:	bf00      	nop
 8004aba:	e000      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ac6:	4b39      	ldr	r3, [pc, #228]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	4a35      	ldr	r2, [pc, #212]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6553      	str	r3, [r2, #84]	; 0x54
 8004adc:	e003      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004afc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4313      	orrs	r3, r2
 8004b04:	d058      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b12:	d033      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004b14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b18:	d82c      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1e:	d02f      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b24:	d826      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b2a:	d02b      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b30:	d820      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b36:	d012      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3c:	d81a      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d022      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b46:	d115      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fb99 	bl	8005288 <RCCEx_PLL2_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b5c:	e015      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b62:	3328      	adds	r3, #40	; 0x28
 8004b64:	2102      	movs	r1, #2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fc40 	bl	80053ec <RCCEx_PLL3_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b72:	e00a      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b7a:	e006      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b7c:	bf00      	nop
 8004b7e:	e004      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b80:	bf00      	nop
 8004b82:	e002      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10e      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b96:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ba2:	4a02      	ldr	r2, [pc, #8]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ba8:	e006      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	d055      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004be0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004be4:	d033      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004be6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bea:	d82c      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf0:	d02f      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d826      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004bf8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bfc:	d02b      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004bfe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c02:	d820      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c08:	d012      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c0e:	d81a      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d022      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c18:	d115      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1e:	3308      	adds	r3, #8
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fb30 	bl	8005288 <RCCEx_PLL2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c2e:	e015      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c34:	3328      	adds	r3, #40	; 0x28
 8004c36:	2102      	movs	r1, #2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fbd7 	bl	80053ec <RCCEx_PLL3_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c44:	e00a      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c4c:	e006      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c64:	4ba1      	ldr	r3, [pc, #644]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c74:	4a9d      	ldr	r2, [pc, #628]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
 8004c7a:	e003      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f002 0308 	and.w	r3, r2, #8
 8004c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c94:	2300      	movs	r3, #0
 8004c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	d01e      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb6:	3328      	adds	r3, #40	; 0x28
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fb96 	bl	80053ec <RCCEx_PLL3_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ccc:	4b87      	ldr	r3, [pc, #540]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cdc:	4a83      	ldr	r2, [pc, #524]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f002 0310 	and.w	r3, r2, #16
 8004cee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cf8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	d01e      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0e:	d10c      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d14:	3328      	adds	r3, #40	; 0x28
 8004d16:	2102      	movs	r1, #2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fb67 	bl	80053ec <RCCEx_PLL3_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d2a:	4b70      	ldr	r3, [pc, #448]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d3a:	4a6c      	ldr	r2, [pc, #432]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d03e      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d6c:	d022      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d72:	d81b      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7c:	d00b      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004d7e:	e015      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d84:	3308      	adds	r3, #8
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fa7d 	bl	8005288 <RCCEx_PLL2_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d94:	e00f      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9a:	3328      	adds	r3, #40	; 0x28
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fb24 	bl	80053ec <RCCEx_PLL3_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004daa:	e004      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004db2:	e000      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dbe:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004dce:	4a47      	ldr	r2, [pc, #284]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd4:	e003      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004dea:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dec:	2300      	movs	r3, #0
 8004dee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004df0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004df4:	460b      	mov	r3, r1
 8004df6:	4313      	orrs	r3, r2
 8004df8:	d03b      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e06:	d01f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004e08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e0c:	d818      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e12:	d003      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e18:	d007      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004e1a:	e011      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1c:	4b33      	ldr	r3, [pc, #204]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	4a32      	ldr	r2, [pc, #200]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e28:	e00f      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2e:	3328      	adds	r3, #40	; 0x28
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fada 	bl	80053ec <RCCEx_PLL3_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e3e:	e004      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e46:	e000      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e52:	4b26      	ldr	r3, [pc, #152]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	4a22      	ldr	r2, [pc, #136]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6553      	str	r3, [r2, #84]	; 0x54
 8004e68:	e003      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e80:	2300      	movs	r3, #0
 8004e82:	677b      	str	r3, [r7, #116]	; 0x74
 8004e84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	d034      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	d007      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004e9e:	e011      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4a11      	ldr	r2, [pc, #68]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004eac:	e00e      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f9e6 	bl	8005288 <RCCEx_PLL2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ec2:	e003      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee2:	4a02      	ldr	r2, [pc, #8]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ee8:	e006      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f06:	2300      	movs	r3, #0
 8004f08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	d00c      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f18:	3328      	adds	r3, #40	; 0x28
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fa65 	bl	80053ec <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	667b      	str	r3, [r7, #100]	; 0x64
 8004f40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004f44:	460b      	mov	r3, r1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	d038      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f56:	d018      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5c:	d811      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f62:	d014      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f68:	d80b      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d011      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f72:	d106      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f74:	4bc3      	ldr	r3, [pc, #780]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	4ac2      	ldr	r2, [pc, #776]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f88:	e004      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f8a:	bf00      	nop
 8004f8c:	e002      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f8e:	bf00      	nop
 8004f90:	e000      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f9c:	4bb9      	ldr	r3, [pc, #740]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fac:	4ab5      	ldr	r2, [pc, #724]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	6553      	str	r3, [r2, #84]	; 0x54
 8004fb2:	e003      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fca:	2300      	movs	r3, #0
 8004fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	d009      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fd8:	4baa      	ldr	r3, [pc, #680]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe6:	4aa7      	ldr	r2, [pc, #668]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004ff8:	653b      	str	r3, [r7, #80]	; 0x50
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	657b      	str	r3, [r7, #84]	; 0x54
 8004ffe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005002:	460b      	mov	r3, r1
 8005004:	4313      	orrs	r3, r2
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005008:	4b9e      	ldr	r3, [pc, #632]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005014:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005018:	4a9a      	ldr	r2, [pc, #616]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800501a:	430b      	orrs	r3, r1
 800501c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
 800502c:	2300      	movs	r3, #0
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005030:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005034:	460b      	mov	r3, r1
 8005036:	4313      	orrs	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800503a:	4b92      	ldr	r3, [pc, #584]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800503c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005048:	4a8e      	ldr	r2, [pc, #568]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800504a:	430b      	orrs	r3, r1
 800504c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800505a:	643b      	str	r3, [r7, #64]	; 0x40
 800505c:	2300      	movs	r3, #0
 800505e:	647b      	str	r3, [r7, #68]	; 0x44
 8005060:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005064:	460b      	mov	r3, r1
 8005066:	4313      	orrs	r3, r2
 8005068:	d00e      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800506a:	4b86      	ldr	r3, [pc, #536]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	4a85      	ldr	r2, [pc, #532]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005070:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005074:	6113      	str	r3, [r2, #16]
 8005076:	4b83      	ldr	r3, [pc, #524]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005078:	6919      	ldr	r1, [r3, #16]
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005082:	4a80      	ldr	r2, [pc, #512]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005084:	430b      	orrs	r3, r1
 8005086:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005094:	63bb      	str	r3, [r7, #56]	; 0x38
 8005096:	2300      	movs	r3, #0
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800509a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800509e:	460b      	mov	r3, r1
 80050a0:	4313      	orrs	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050a4:	4b77      	ldr	r3, [pc, #476]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	4a74      	ldr	r2, [pc, #464]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050b4:	430b      	orrs	r3, r1
 80050b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80050c4:	633b      	str	r3, [r7, #48]	; 0x30
 80050c6:	2300      	movs	r3, #0
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80050ce:	460b      	mov	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050d4:	4b6b      	ldr	r3, [pc, #428]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e4:	4a67      	ldr	r2, [pc, #412]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050e6:	430b      	orrs	r3, r1
 80050e8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	2100      	movs	r1, #0
 80050f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005100:	460b      	mov	r3, r1
 8005102:	4313      	orrs	r3, r2
 8005104:	d011      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510a:	3308      	adds	r3, #8
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f8ba 	bl	8005288 <RCCEx_PLL2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800511a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800512a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	2100      	movs	r1, #0
 8005134:	6239      	str	r1, [r7, #32]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
 800513c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005140:	460b      	mov	r3, r1
 8005142:	4313      	orrs	r3, r2
 8005144:	d011      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800514a:	3308      	adds	r3, #8
 800514c:	2101      	movs	r1, #1
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f89a 	bl	8005288 <RCCEx_PLL2_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800515a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005166:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	2100      	movs	r1, #0
 8005174:	61b9      	str	r1, [r7, #24]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005180:	460b      	mov	r3, r1
 8005182:	4313      	orrs	r3, r2
 8005184:	d011      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800518a:	3308      	adds	r3, #8
 800518c:	2102      	movs	r1, #2
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f87a 	bl	8005288 <RCCEx_PLL2_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800519a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80051aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	2100      	movs	r1, #0
 80051b4:	6139      	str	r1, [r7, #16]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80051c0:	460b      	mov	r3, r1
 80051c2:	4313      	orrs	r3, r2
 80051c4:	d011      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ca:	3328      	adds	r3, #40	; 0x28
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 f90c 	bl	80053ec <RCCEx_PLL3_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80051da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	2100      	movs	r1, #0
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005200:	460b      	mov	r3, r1
 8005202:	4313      	orrs	r3, r2
 8005204:	d011      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520a:	3328      	adds	r3, #40	; 0x28
 800520c:	2101      	movs	r1, #1
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f8ec 	bl	80053ec <RCCEx_PLL3_Config>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800521a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005226:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	2100      	movs	r1, #0
 8005234:	6039      	str	r1, [r7, #0]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	607b      	str	r3, [r7, #4]
 800523c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005240:	460b      	mov	r3, r1
 8005242:	4313      	orrs	r3, r2
 8005244:	d011      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800524a:	3328      	adds	r3, #40	; 0x28
 800524c:	2102      	movs	r1, #2
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f8cc 	bl	80053ec <RCCEx_PLL3_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800525a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800526a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
}
 8005278:	4618      	mov	r0, r3
 800527a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005284:	58024400 	.word	0x58024400

08005288 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005296:	4b53      	ldr	r3, [pc, #332]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d101      	bne.n	80052a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e099      	b.n	80053da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052a6:	4b4f      	ldr	r3, [pc, #316]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a4e      	ldr	r2, [pc, #312]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b2:	f7fd f985 	bl	80025c0 <HAL_GetTick>
 80052b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052b8:	e008      	b.n	80052cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052ba:	f7fd f981 	bl	80025c0 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e086      	b.n	80053da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052cc:	4b45      	ldr	r3, [pc, #276]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80052d8:	4b42      	ldr	r3, [pc, #264]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	493f      	ldr	r1, [pc, #252]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	628b      	str	r3, [r1, #40]	; 0x28
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	025b      	lsls	r3, r3, #9
 80052fe:	b29b      	uxth	r3, r3
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	3b01      	subs	r3, #1
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	3b01      	subs	r3, #1
 8005316:	061b      	lsls	r3, r3, #24
 8005318:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800531c:	4931      	ldr	r1, [pc, #196]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800531e:	4313      	orrs	r3, r2
 8005320:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005322:	4b30      	ldr	r3, [pc, #192]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	492d      	ldr	r1, [pc, #180]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005330:	4313      	orrs	r3, r2
 8005332:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005334:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	f023 0220 	bic.w	r2, r3, #32
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	4928      	ldr	r1, [pc, #160]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005342:	4313      	orrs	r3, r2
 8005344:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800534c:	f023 0310 	bic.w	r3, r3, #16
 8005350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005352:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005356:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <RCCEx_PLL2_Config+0x160>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	69d2      	ldr	r2, [r2, #28]
 800535e:	00d2      	lsls	r2, r2, #3
 8005360:	4920      	ldr	r1, [pc, #128]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005362:	4313      	orrs	r3, r2
 8005364:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005366:	4b1f      	ldr	r3, [pc, #124]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800536c:	f043 0310 	orr.w	r3, r3, #16
 8005370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005378:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800537e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005382:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005384:	e00f      	b.n	80053a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d106      	bne.n	800539a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800538c:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005396:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005398:	e005      	b.n	80053a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800539a:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80053a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a0e      	ldr	r2, [pc, #56]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80053ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b2:	f7fd f905 	bl	80025c0 <HAL_GetTick>
 80053b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053b8:	e008      	b.n	80053cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053ba:	f7fd f901 	bl	80025c0 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e006      	b.n	80053da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	58024400 	.word	0x58024400
 80053e8:	ffff0007 	.word	0xffff0007

080053ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053fa:	4b53      	ldr	r3, [pc, #332]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	2b03      	cmp	r3, #3
 8005404:	d101      	bne.n	800540a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e099      	b.n	800553e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800540a:	4b4f      	ldr	r3, [pc, #316]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a4e      	ldr	r2, [pc, #312]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005416:	f7fd f8d3 	bl	80025c0 <HAL_GetTick>
 800541a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800541c:	e008      	b.n	8005430 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800541e:	f7fd f8cf 	bl	80025c0 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e086      	b.n	800553e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005430:	4b45      	ldr	r3, [pc, #276]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800543c:	4b42      	ldr	r3, [pc, #264]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	051b      	lsls	r3, r3, #20
 800544a:	493f      	ldr	r1, [pc, #252]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 800544c:	4313      	orrs	r3, r2
 800544e:	628b      	str	r3, [r1, #40]	; 0x28
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	3b01      	subs	r3, #1
 8005456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	3b01      	subs	r3, #1
 8005460:	025b      	lsls	r3, r3, #9
 8005462:	b29b      	uxth	r3, r3
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	3b01      	subs	r3, #1
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	3b01      	subs	r3, #1
 800547a:	061b      	lsls	r3, r3, #24
 800547c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005480:	4931      	ldr	r1, [pc, #196]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005482:	4313      	orrs	r3, r2
 8005484:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005486:	4b30      	ldr	r3, [pc, #192]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	492d      	ldr	r1, [pc, #180]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005498:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	4928      	ldr	r1, [pc, #160]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054aa:	4b27      	ldr	r3, [pc, #156]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	4a26      	ldr	r2, [pc, #152]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054b6:	4b24      	ldr	r3, [pc, #144]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ba:	4b24      	ldr	r3, [pc, #144]	; (800554c <RCCEx_PLL3_Config+0x160>)
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	69d2      	ldr	r2, [r2, #28]
 80054c2:	00d2      	lsls	r2, r2, #3
 80054c4:	4920      	ldr	r1, [pc, #128]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054ca:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	4a19      	ldr	r2, [pc, #100]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054e8:	e00f      	b.n	800550a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d106      	bne.n	80054fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054f0:	4b15      	ldr	r3, [pc, #84]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	4a14      	ldr	r2, [pc, #80]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054fc:	e005      	b.n	800550a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	4a11      	ldr	r2, [pc, #68]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005508:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005516:	f7fd f853 	bl	80025c0 <HAL_GetTick>
 800551a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800551c:	e008      	b.n	8005530 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800551e:	f7fd f84f 	bl	80025c0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e006      	b.n	800553e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	58024400 	.word	0x58024400
 800554c:	ffff0007 	.word	0xffff0007

08005550 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d071      	beq.n	8005646 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc fc96 	bl	8001ea8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b10      	cmp	r3, #16
 8005590:	d050      	beq.n	8005634 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	22ca      	movs	r2, #202	; 0xca
 8005598:	625a      	str	r2, [r3, #36]	; 0x24
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2253      	movs	r2, #83	; 0x53
 80055a0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9a0 	bl	80058e8 <RTC_EnterInitMode>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d124      	bne.n	80055fc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6899      	ldr	r1, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RTC_Init+0x100>)
 80055be:	400b      	ands	r3, r1
 80055c0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6899      	ldr	r1, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	0419      	lsls	r1, r3, #16
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9ac 	bl	8005950 <RTC_ExitInitMode>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d113      	bne.n	800562a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0203 	bic.w	r2, r2, #3
 8005610:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	22ff      	movs	r2, #255	; 0xff
 8005630:	625a      	str	r2, [r3, #36]	; 0x24
 8005632:	e001      	b.n	8005638 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	ff8fffbf 	.word	0xff8fffbf

08005654 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005654:	b590      	push	{r4, r7, lr}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_RTC_SetTime+0x1a>
 800566a:	2302      	movs	r3, #2
 800566c:	e089      	b.n	8005782 <HAL_RTC_SetTime+0x12e>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	22ca      	movs	r2, #202	; 0xca
 8005684:	625a      	str	r2, [r3, #36]	; 0x24
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2253      	movs	r2, #83	; 0x53
 800568c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f92a 	bl	80058e8 <RTC_EnterInitMode>
 8005694:	4603      	mov	r3, r0
 8005696:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005698:	7cfb      	ldrb	r3, [r7, #19]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d161      	bne.n	8005762 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d126      	bne.n	80056f2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2200      	movs	r2, #0
 80056b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f985 	bl	80059cc <RTC_ByteToBcd2>
 80056c2:	4603      	mov	r3, r0
 80056c4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f97e 	bl	80059cc <RTC_ByteToBcd2>
 80056d0:	4603      	mov	r3, r0
 80056d2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056d4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	789b      	ldrb	r3, [r3, #2]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f976 	bl	80059cc <RTC_ByteToBcd2>
 80056e0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056e2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	78db      	ldrb	r3, [r3, #3]
 80056ea:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e018      	b.n	8005724 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005712:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005718:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	78db      	ldrb	r3, [r3, #3]
 800571e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	6979      	ldr	r1, [r7, #20]
 800572a:	4b18      	ldr	r3, [pc, #96]	; (800578c <HAL_RTC_SetTime+0x138>)
 800572c:	400b      	ands	r3, r1
 800572e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800573e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6899      	ldr	r1, [r3, #8]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	431a      	orrs	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f8f9 	bl	8005950 <RTC_ExitInitMode>
 800575e:	4603      	mov	r3, r0
 8005760:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	22ff      	movs	r2, #255	; 0xff
 8005768:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800576a:	7cfb      	ldrb	r3, [r7, #19]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005780:	7cfb      	ldrb	r3, [r7, #19]
}
 8005782:	4618      	mov	r0, r3
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	bd90      	pop	{r4, r7, pc}
 800578a:	bf00      	nop
 800578c:	007f7f7f 	.word	0x007f7f7f

08005790 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_RTC_SetDate+0x1a>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e073      	b.n	8005892 <HAL_RTC_SetDate+0x102>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2202      	movs	r2, #2
 80057b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10e      	bne.n	80057de <HAL_RTC_SetDate+0x4e>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	f023 0310 	bic.w	r3, r3, #16
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	330a      	adds	r3, #10
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d11c      	bne.n	800581e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	78db      	ldrb	r3, [r3, #3]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 f8ef 	bl	80059cc <RTC_ByteToBcd2>
 80057ee:	4603      	mov	r3, r0
 80057f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f8e8 	bl	80059cc <RTC_ByteToBcd2>
 80057fc:	4603      	mov	r3, r0
 80057fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005800:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	789b      	ldrb	r3, [r3, #2]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f8e0 	bl	80059cc <RTC_ByteToBcd2>
 800580c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800580e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e00e      	b.n	800583c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	78db      	ldrb	r3, [r3, #3]
 8005822:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800582a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005830:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	22ca      	movs	r2, #202	; 0xca
 8005842:	625a      	str	r2, [r3, #36]	; 0x24
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2253      	movs	r2, #83	; 0x53
 800584a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f84b 	bl	80058e8 <RTC_EnterInitMode>
 8005852:	4603      	mov	r3, r0
 8005854:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	6979      	ldr	r1, [r7, #20]
 8005862:	4b0e      	ldr	r3, [pc, #56]	; (800589c <HAL_RTC_SetDate+0x10c>)
 8005864:	400b      	ands	r3, r1
 8005866:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f871 	bl	8005950 <RTC_ExitInitMode>
 800586e:	4603      	mov	r3, r0
 8005870:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	22ff      	movs	r2, #255	; 0xff
 8005878:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800587a:	7cfb      	ldrb	r3, [r7, #19]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d103      	bne.n	8005888 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005890:	7cfb      	ldrb	r3, [r7, #19]


}
 8005892:	4618      	mov	r0, r3
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}
 800589a:	bf00      	nop
 800589c:	00ffff3f 	.word	0x00ffff3f

080058a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <HAL_RTC_WaitForSynchro+0x44>)
 80058ae:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80058b0:	f7fc fe86 	bl	80025c0 <HAL_GetTick>
 80058b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058b6:	e009      	b.n	80058cc <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058b8:	f7fc fe82 	bl	80025c0 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058c6:	d901      	bls.n	80058cc <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e007      	b.n	80058dc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0ee      	beq.n	80058b8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	0003ff5f 	.word	0x0003ff5f

080058e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d120      	bne.n	8005944 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f04f 32ff 	mov.w	r2, #4294967295
 800590a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800590c:	f7fc fe58 	bl	80025c0 <HAL_GetTick>
 8005910:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005912:	e00d      	b.n	8005930 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005914:	f7fc fe54 	bl	80025c0 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005922:	d905      	bls.n	8005930 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2203      	movs	r2, #3
 800592c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <RTC_EnterInitMode+0x5c>
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d1e7      	bne.n	8005914 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800595c:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <RTC_ExitInitMode+0x78>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <RTC_ExitInitMode+0x78>)
 8005962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005966:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005968:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <RTC_ExitInitMode+0x78>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10c      	bne.n	800598e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff ff93 	bl	80058a0 <HAL_RTC_WaitForSynchro>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01e      	beq.n	80059be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2203      	movs	r2, #3
 8005984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	73fb      	strb	r3, [r7, #15]
 800598c:	e017      	b.n	80059be <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800598e:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <RTC_ExitInitMode+0x78>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4a0d      	ldr	r2, [pc, #52]	; (80059c8 <RTC_ExitInitMode+0x78>)
 8005994:	f023 0320 	bic.w	r3, r3, #32
 8005998:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff ff80 	bl	80058a0 <HAL_RTC_WaitForSynchro>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2203      	movs	r2, #3
 80059aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <RTC_ExitInitMode+0x78>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <RTC_ExitInitMode+0x78>)
 80059b8:	f043 0320 	orr.w	r3, r3, #32
 80059bc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80059be:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	58004000 	.word	0x58004000

080059cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80059de:	e005      	b.n	80059ec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80059e6:	7afb      	ldrb	r3, [r7, #11]
 80059e8:	3b0a      	subs	r3, #10
 80059ea:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	2b09      	cmp	r3, #9
 80059f0:	d8f6      	bhi.n	80059e0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	7afb      	ldrb	r3, [r7, #11]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	b2db      	uxtb	r3, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e10f      	b.n	8005c3e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a87      	ldr	r2, [pc, #540]	; (8005c48 <HAL_SPI_Init+0x23c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00f      	beq.n	8005a4e <HAL_SPI_Init+0x42>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a86      	ldr	r2, [pc, #536]	; (8005c4c <HAL_SPI_Init+0x240>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00a      	beq.n	8005a4e <HAL_SPI_Init+0x42>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a84      	ldr	r2, [pc, #528]	; (8005c50 <HAL_SPI_Init+0x244>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d005      	beq.n	8005a4e <HAL_SPI_Init+0x42>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b0f      	cmp	r3, #15
 8005a48:	d901      	bls.n	8005a4e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e0f7      	b.n	8005c3e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f900 	bl	8005c54 <SPI_GetPacketSize>
 8005a54:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a7b      	ldr	r2, [pc, #492]	; (8005c48 <HAL_SPI_Init+0x23c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00c      	beq.n	8005a7a <HAL_SPI_Init+0x6e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a79      	ldr	r2, [pc, #484]	; (8005c4c <HAL_SPI_Init+0x240>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d007      	beq.n	8005a7a <HAL_SPI_Init+0x6e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a78      	ldr	r2, [pc, #480]	; (8005c50 <HAL_SPI_Init+0x244>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d002      	beq.n	8005a7a <HAL_SPI_Init+0x6e>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d811      	bhi.n	8005a9e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a7e:	4a72      	ldr	r2, [pc, #456]	; (8005c48 <HAL_SPI_Init+0x23c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d009      	beq.n	8005a98 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a70      	ldr	r2, [pc, #448]	; (8005c4c <HAL_SPI_Init+0x240>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <HAL_SPI_Init+0x8c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a6f      	ldr	r2, [pc, #444]	; (8005c50 <HAL_SPI_Init+0x244>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d104      	bne.n	8005aa2 <HAL_SPI_Init+0x96>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d901      	bls.n	8005aa2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e0cd      	b.n	8005c3e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fc fad6 	bl	8002068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005ade:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae8:	d119      	bne.n	8005b1e <HAL_SPI_Init+0x112>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af2:	d103      	bne.n	8005afc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10c      	bne.n	8005b1e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b0c:	d107      	bne.n	8005b1e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00f      	beq.n	8005b4a <HAL_SPI_Init+0x13e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b06      	cmp	r3, #6
 8005b30:	d90b      	bls.n	8005b4a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e007      	b.n	8005b5a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69da      	ldr	r2, [r3, #28]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6c:	ea42 0103 	orr.w	r1, r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bba:	ea42 0103 	orr.w	r1, r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d113      	bne.n	8005bfa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bf8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0201 	bic.w	r2, r2, #1
 8005c08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40013000 	.word	0x40013000
 8005c4c:	40003800 	.word	0x40003800
 8005c50:	40003c00 	.word	0x40003c00

08005c54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	3307      	adds	r3, #7
 8005c72:	08db      	lsrs	r3, r3, #3
 8005c74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <__errno>:
 8005c8c:	4b01      	ldr	r3, [pc, #4]	; (8005c94 <__errno+0x8>)
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	24000010 	.word	0x24000010

08005c98 <__libc_init_array>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4d0d      	ldr	r5, [pc, #52]	; (8005cd0 <__libc_init_array+0x38>)
 8005c9c:	4c0d      	ldr	r4, [pc, #52]	; (8005cd4 <__libc_init_array+0x3c>)
 8005c9e:	1b64      	subs	r4, r4, r5
 8005ca0:	10a4      	asrs	r4, r4, #2
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d109      	bne.n	8005cbc <__libc_init_array+0x24>
 8005ca8:	4d0b      	ldr	r5, [pc, #44]	; (8005cd8 <__libc_init_array+0x40>)
 8005caa:	4c0c      	ldr	r4, [pc, #48]	; (8005cdc <__libc_init_array+0x44>)
 8005cac:	f000 fc8e 	bl	80065cc <_init>
 8005cb0:	1b64      	subs	r4, r4, r5
 8005cb2:	10a4      	asrs	r4, r4, #2
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	42a6      	cmp	r6, r4
 8005cb8:	d105      	bne.n	8005cc6 <__libc_init_array+0x2e>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc0:	4798      	blx	r3
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7ee      	b.n	8005ca4 <__libc_init_array+0xc>
 8005cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cca:	4798      	blx	r3
 8005ccc:	3601      	adds	r6, #1
 8005cce:	e7f2      	b.n	8005cb6 <__libc_init_array+0x1e>
 8005cd0:	08007d40 	.word	0x08007d40
 8005cd4:	08007d40 	.word	0x08007d40
 8005cd8:	08007d40 	.word	0x08007d40
 8005cdc:	08007d44 	.word	0x08007d44

08005ce0 <memset>:
 8005ce0:	4402      	add	r2, r0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d100      	bne.n	8005cea <memset+0xa>
 8005ce8:	4770      	bx	lr
 8005cea:	f803 1b01 	strb.w	r1, [r3], #1
 8005cee:	e7f9      	b.n	8005ce4 <memset+0x4>

08005cf0 <siprintf>:
 8005cf0:	b40e      	push	{r1, r2, r3}
 8005cf2:	b500      	push	{lr}
 8005cf4:	b09c      	sub	sp, #112	; 0x70
 8005cf6:	ab1d      	add	r3, sp, #116	; 0x74
 8005cf8:	9002      	str	r0, [sp, #8]
 8005cfa:	9006      	str	r0, [sp, #24]
 8005cfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d00:	4809      	ldr	r0, [pc, #36]	; (8005d28 <siprintf+0x38>)
 8005d02:	9107      	str	r1, [sp, #28]
 8005d04:	9104      	str	r1, [sp, #16]
 8005d06:	4909      	ldr	r1, [pc, #36]	; (8005d2c <siprintf+0x3c>)
 8005d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0c:	9105      	str	r1, [sp, #20]
 8005d0e:	6800      	ldr	r0, [r0, #0]
 8005d10:	9301      	str	r3, [sp, #4]
 8005d12:	a902      	add	r1, sp, #8
 8005d14:	f000 f868 	bl	8005de8 <_svfiprintf_r>
 8005d18:	9b02      	ldr	r3, [sp, #8]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	b01c      	add	sp, #112	; 0x70
 8005d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d24:	b003      	add	sp, #12
 8005d26:	4770      	bx	lr
 8005d28:	24000010 	.word	0x24000010
 8005d2c:	ffff0208 	.word	0xffff0208

08005d30 <__ssputs_r>:
 8005d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d34:	688e      	ldr	r6, [r1, #8]
 8005d36:	429e      	cmp	r6, r3
 8005d38:	4682      	mov	sl, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	4690      	mov	r8, r2
 8005d3e:	461f      	mov	r7, r3
 8005d40:	d838      	bhi.n	8005db4 <__ssputs_r+0x84>
 8005d42:	898a      	ldrh	r2, [r1, #12]
 8005d44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d48:	d032      	beq.n	8005db0 <__ssputs_r+0x80>
 8005d4a:	6825      	ldr	r5, [r4, #0]
 8005d4c:	6909      	ldr	r1, [r1, #16]
 8005d4e:	eba5 0901 	sub.w	r9, r5, r1
 8005d52:	6965      	ldr	r5, [r4, #20]
 8005d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	444b      	add	r3, r9
 8005d60:	106d      	asrs	r5, r5, #1
 8005d62:	429d      	cmp	r5, r3
 8005d64:	bf38      	it	cc
 8005d66:	461d      	movcc	r5, r3
 8005d68:	0553      	lsls	r3, r2, #21
 8005d6a:	d531      	bpl.n	8005dd0 <__ssputs_r+0xa0>
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	f000 fb63 	bl	8006438 <_malloc_r>
 8005d72:	4606      	mov	r6, r0
 8005d74:	b950      	cbnz	r0, 8005d8c <__ssputs_r+0x5c>
 8005d76:	230c      	movs	r3, #12
 8005d78:	f8ca 3000 	str.w	r3, [sl]
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	6921      	ldr	r1, [r4, #16]
 8005d8e:	464a      	mov	r2, r9
 8005d90:	f000 fabe 	bl	8006310 <memcpy>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	6126      	str	r6, [r4, #16]
 8005da2:	6165      	str	r5, [r4, #20]
 8005da4:	444e      	add	r6, r9
 8005da6:	eba5 0509 	sub.w	r5, r5, r9
 8005daa:	6026      	str	r6, [r4, #0]
 8005dac:	60a5      	str	r5, [r4, #8]
 8005dae:	463e      	mov	r6, r7
 8005db0:	42be      	cmp	r6, r7
 8005db2:	d900      	bls.n	8005db6 <__ssputs_r+0x86>
 8005db4:	463e      	mov	r6, r7
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	4632      	mov	r2, r6
 8005dba:	4641      	mov	r1, r8
 8005dbc:	f000 fab6 	bl	800632c <memmove>
 8005dc0:	68a3      	ldr	r3, [r4, #8]
 8005dc2:	1b9b      	subs	r3, r3, r6
 8005dc4:	60a3      	str	r3, [r4, #8]
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	4433      	add	r3, r6
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e7db      	b.n	8005d88 <__ssputs_r+0x58>
 8005dd0:	462a      	mov	r2, r5
 8005dd2:	f000 fba5 	bl	8006520 <_realloc_r>
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d1e1      	bne.n	8005da0 <__ssputs_r+0x70>
 8005ddc:	6921      	ldr	r1, [r4, #16]
 8005dde:	4650      	mov	r0, sl
 8005de0:	f000 fabe 	bl	8006360 <_free_r>
 8005de4:	e7c7      	b.n	8005d76 <__ssputs_r+0x46>
	...

08005de8 <_svfiprintf_r>:
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	4698      	mov	r8, r3
 8005dee:	898b      	ldrh	r3, [r1, #12]
 8005df0:	061b      	lsls	r3, r3, #24
 8005df2:	b09d      	sub	sp, #116	; 0x74
 8005df4:	4607      	mov	r7, r0
 8005df6:	460d      	mov	r5, r1
 8005df8:	4614      	mov	r4, r2
 8005dfa:	d50e      	bpl.n	8005e1a <_svfiprintf_r+0x32>
 8005dfc:	690b      	ldr	r3, [r1, #16]
 8005dfe:	b963      	cbnz	r3, 8005e1a <_svfiprintf_r+0x32>
 8005e00:	2140      	movs	r1, #64	; 0x40
 8005e02:	f000 fb19 	bl	8006438 <_malloc_r>
 8005e06:	6028      	str	r0, [r5, #0]
 8005e08:	6128      	str	r0, [r5, #16]
 8005e0a:	b920      	cbnz	r0, 8005e16 <_svfiprintf_r+0x2e>
 8005e0c:	230c      	movs	r3, #12
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	e0d1      	b.n	8005fba <_svfiprintf_r+0x1d2>
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	616b      	str	r3, [r5, #20]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e1e:	2320      	movs	r3, #32
 8005e20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e28:	2330      	movs	r3, #48	; 0x30
 8005e2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fd4 <_svfiprintf_r+0x1ec>
 8005e2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e32:	f04f 0901 	mov.w	r9, #1
 8005e36:	4623      	mov	r3, r4
 8005e38:	469a      	mov	sl, r3
 8005e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e3e:	b10a      	cbz	r2, 8005e44 <_svfiprintf_r+0x5c>
 8005e40:	2a25      	cmp	r2, #37	; 0x25
 8005e42:	d1f9      	bne.n	8005e38 <_svfiprintf_r+0x50>
 8005e44:	ebba 0b04 	subs.w	fp, sl, r4
 8005e48:	d00b      	beq.n	8005e62 <_svfiprintf_r+0x7a>
 8005e4a:	465b      	mov	r3, fp
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff ff6d 	bl	8005d30 <__ssputs_r>
 8005e56:	3001      	adds	r0, #1
 8005e58:	f000 80aa 	beq.w	8005fb0 <_svfiprintf_r+0x1c8>
 8005e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e5e:	445a      	add	r2, fp
 8005e60:	9209      	str	r2, [sp, #36]	; 0x24
 8005e62:	f89a 3000 	ldrb.w	r3, [sl]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80a2 	beq.w	8005fb0 <_svfiprintf_r+0x1c8>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e76:	f10a 0a01 	add.w	sl, sl, #1
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	9307      	str	r3, [sp, #28]
 8005e7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e82:	931a      	str	r3, [sp, #104]	; 0x68
 8005e84:	4654      	mov	r4, sl
 8005e86:	2205      	movs	r2, #5
 8005e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e8c:	4851      	ldr	r0, [pc, #324]	; (8005fd4 <_svfiprintf_r+0x1ec>)
 8005e8e:	f7fa fa2f 	bl	80002f0 <memchr>
 8005e92:	9a04      	ldr	r2, [sp, #16]
 8005e94:	b9d8      	cbnz	r0, 8005ece <_svfiprintf_r+0xe6>
 8005e96:	06d0      	lsls	r0, r2, #27
 8005e98:	bf44      	itt	mi
 8005e9a:	2320      	movmi	r3, #32
 8005e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea0:	0711      	lsls	r1, r2, #28
 8005ea2:	bf44      	itt	mi
 8005ea4:	232b      	movmi	r3, #43	; 0x2b
 8005ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8005eae:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb0:	d015      	beq.n	8005ede <_svfiprintf_r+0xf6>
 8005eb2:	9a07      	ldr	r2, [sp, #28]
 8005eb4:	4654      	mov	r4, sl
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f04f 0c0a 	mov.w	ip, #10
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec2:	3b30      	subs	r3, #48	; 0x30
 8005ec4:	2b09      	cmp	r3, #9
 8005ec6:	d94e      	bls.n	8005f66 <_svfiprintf_r+0x17e>
 8005ec8:	b1b0      	cbz	r0, 8005ef8 <_svfiprintf_r+0x110>
 8005eca:	9207      	str	r2, [sp, #28]
 8005ecc:	e014      	b.n	8005ef8 <_svfiprintf_r+0x110>
 8005ece:	eba0 0308 	sub.w	r3, r0, r8
 8005ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	46a2      	mov	sl, r4
 8005edc:	e7d2      	b.n	8005e84 <_svfiprintf_r+0x9c>
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	1d19      	adds	r1, r3, #4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	9103      	str	r1, [sp, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfbb      	ittet	lt
 8005eea:	425b      	neglt	r3, r3
 8005eec:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef0:	9307      	strge	r3, [sp, #28]
 8005ef2:	9307      	strlt	r3, [sp, #28]
 8005ef4:	bfb8      	it	lt
 8005ef6:	9204      	strlt	r2, [sp, #16]
 8005ef8:	7823      	ldrb	r3, [r4, #0]
 8005efa:	2b2e      	cmp	r3, #46	; 0x2e
 8005efc:	d10c      	bne.n	8005f18 <_svfiprintf_r+0x130>
 8005efe:	7863      	ldrb	r3, [r4, #1]
 8005f00:	2b2a      	cmp	r3, #42	; 0x2a
 8005f02:	d135      	bne.n	8005f70 <_svfiprintf_r+0x188>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	1d1a      	adds	r2, r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	9203      	str	r2, [sp, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bfb8      	it	lt
 8005f10:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f14:	3402      	adds	r4, #2
 8005f16:	9305      	str	r3, [sp, #20]
 8005f18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fe4 <_svfiprintf_r+0x1fc>
 8005f1c:	7821      	ldrb	r1, [r4, #0]
 8005f1e:	2203      	movs	r2, #3
 8005f20:	4650      	mov	r0, sl
 8005f22:	f7fa f9e5 	bl	80002f0 <memchr>
 8005f26:	b140      	cbz	r0, 8005f3a <_svfiprintf_r+0x152>
 8005f28:	2340      	movs	r3, #64	; 0x40
 8005f2a:	eba0 000a 	sub.w	r0, r0, sl
 8005f2e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f32:	9b04      	ldr	r3, [sp, #16]
 8005f34:	4303      	orrs	r3, r0
 8005f36:	3401      	adds	r4, #1
 8005f38:	9304      	str	r3, [sp, #16]
 8005f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f3e:	4826      	ldr	r0, [pc, #152]	; (8005fd8 <_svfiprintf_r+0x1f0>)
 8005f40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f44:	2206      	movs	r2, #6
 8005f46:	f7fa f9d3 	bl	80002f0 <memchr>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d038      	beq.n	8005fc0 <_svfiprintf_r+0x1d8>
 8005f4e:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <_svfiprintf_r+0x1f4>)
 8005f50:	bb1b      	cbnz	r3, 8005f9a <_svfiprintf_r+0x1b2>
 8005f52:	9b03      	ldr	r3, [sp, #12]
 8005f54:	3307      	adds	r3, #7
 8005f56:	f023 0307 	bic.w	r3, r3, #7
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	9303      	str	r3, [sp, #12]
 8005f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f60:	4433      	add	r3, r6
 8005f62:	9309      	str	r3, [sp, #36]	; 0x24
 8005f64:	e767      	b.n	8005e36 <_svfiprintf_r+0x4e>
 8005f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	e7a5      	b.n	8005ebc <_svfiprintf_r+0xd4>
 8005f70:	2300      	movs	r3, #0
 8005f72:	3401      	adds	r4, #1
 8005f74:	9305      	str	r3, [sp, #20]
 8005f76:	4619      	mov	r1, r3
 8005f78:	f04f 0c0a 	mov.w	ip, #10
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f82:	3a30      	subs	r2, #48	; 0x30
 8005f84:	2a09      	cmp	r2, #9
 8005f86:	d903      	bls.n	8005f90 <_svfiprintf_r+0x1a8>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0c5      	beq.n	8005f18 <_svfiprintf_r+0x130>
 8005f8c:	9105      	str	r1, [sp, #20]
 8005f8e:	e7c3      	b.n	8005f18 <_svfiprintf_r+0x130>
 8005f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f94:	4604      	mov	r4, r0
 8005f96:	2301      	movs	r3, #1
 8005f98:	e7f0      	b.n	8005f7c <_svfiprintf_r+0x194>
 8005f9a:	ab03      	add	r3, sp, #12
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <_svfiprintf_r+0x1f8>)
 8005fa2:	a904      	add	r1, sp, #16
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f3af 8000 	nop.w
 8005faa:	1c42      	adds	r2, r0, #1
 8005fac:	4606      	mov	r6, r0
 8005fae:	d1d6      	bne.n	8005f5e <_svfiprintf_r+0x176>
 8005fb0:	89ab      	ldrh	r3, [r5, #12]
 8005fb2:	065b      	lsls	r3, r3, #25
 8005fb4:	f53f af2c 	bmi.w	8005e10 <_svfiprintf_r+0x28>
 8005fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fba:	b01d      	add	sp, #116	; 0x74
 8005fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc0:	ab03      	add	r3, sp, #12
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <_svfiprintf_r+0x1f8>)
 8005fc8:	a904      	add	r1, sp, #16
 8005fca:	4638      	mov	r0, r7
 8005fcc:	f000 f87a 	bl	80060c4 <_printf_i>
 8005fd0:	e7eb      	b.n	8005faa <_svfiprintf_r+0x1c2>
 8005fd2:	bf00      	nop
 8005fd4:	08007d0c 	.word	0x08007d0c
 8005fd8:	08007d16 	.word	0x08007d16
 8005fdc:	00000000 	.word	0x00000000
 8005fe0:	08005d31 	.word	0x08005d31
 8005fe4:	08007d12 	.word	0x08007d12

08005fe8 <_printf_common>:
 8005fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fec:	4616      	mov	r6, r2
 8005fee:	4699      	mov	r9, r3
 8005ff0:	688a      	ldr	r2, [r1, #8]
 8005ff2:	690b      	ldr	r3, [r1, #16]
 8005ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	bfb8      	it	lt
 8005ffc:	4613      	movlt	r3, r2
 8005ffe:	6033      	str	r3, [r6, #0]
 8006000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006004:	4607      	mov	r7, r0
 8006006:	460c      	mov	r4, r1
 8006008:	b10a      	cbz	r2, 800600e <_printf_common+0x26>
 800600a:	3301      	adds	r3, #1
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	0699      	lsls	r1, r3, #26
 8006012:	bf42      	ittt	mi
 8006014:	6833      	ldrmi	r3, [r6, #0]
 8006016:	3302      	addmi	r3, #2
 8006018:	6033      	strmi	r3, [r6, #0]
 800601a:	6825      	ldr	r5, [r4, #0]
 800601c:	f015 0506 	ands.w	r5, r5, #6
 8006020:	d106      	bne.n	8006030 <_printf_common+0x48>
 8006022:	f104 0a19 	add.w	sl, r4, #25
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	6832      	ldr	r2, [r6, #0]
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	42ab      	cmp	r3, r5
 800602e:	dc26      	bgt.n	800607e <_printf_common+0x96>
 8006030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006034:	1e13      	subs	r3, r2, #0
 8006036:	6822      	ldr	r2, [r4, #0]
 8006038:	bf18      	it	ne
 800603a:	2301      	movne	r3, #1
 800603c:	0692      	lsls	r2, r2, #26
 800603e:	d42b      	bmi.n	8006098 <_printf_common+0xb0>
 8006040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006044:	4649      	mov	r1, r9
 8006046:	4638      	mov	r0, r7
 8006048:	47c0      	blx	r8
 800604a:	3001      	adds	r0, #1
 800604c:	d01e      	beq.n	800608c <_printf_common+0xa4>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	68e5      	ldr	r5, [r4, #12]
 8006052:	6832      	ldr	r2, [r6, #0]
 8006054:	f003 0306 	and.w	r3, r3, #6
 8006058:	2b04      	cmp	r3, #4
 800605a:	bf08      	it	eq
 800605c:	1aad      	subeq	r5, r5, r2
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	bf0c      	ite	eq
 8006064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006068:	2500      	movne	r5, #0
 800606a:	4293      	cmp	r3, r2
 800606c:	bfc4      	itt	gt
 800606e:	1a9b      	subgt	r3, r3, r2
 8006070:	18ed      	addgt	r5, r5, r3
 8006072:	2600      	movs	r6, #0
 8006074:	341a      	adds	r4, #26
 8006076:	42b5      	cmp	r5, r6
 8006078:	d11a      	bne.n	80060b0 <_printf_common+0xc8>
 800607a:	2000      	movs	r0, #0
 800607c:	e008      	b.n	8006090 <_printf_common+0xa8>
 800607e:	2301      	movs	r3, #1
 8006080:	4652      	mov	r2, sl
 8006082:	4649      	mov	r1, r9
 8006084:	4638      	mov	r0, r7
 8006086:	47c0      	blx	r8
 8006088:	3001      	adds	r0, #1
 800608a:	d103      	bne.n	8006094 <_printf_common+0xac>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006094:	3501      	adds	r5, #1
 8006096:	e7c6      	b.n	8006026 <_printf_common+0x3e>
 8006098:	18e1      	adds	r1, r4, r3
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	2030      	movs	r0, #48	; 0x30
 800609e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060a2:	4422      	add	r2, r4
 80060a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060ac:	3302      	adds	r3, #2
 80060ae:	e7c7      	b.n	8006040 <_printf_common+0x58>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4622      	mov	r2, r4
 80060b4:	4649      	mov	r1, r9
 80060b6:	4638      	mov	r0, r7
 80060b8:	47c0      	blx	r8
 80060ba:	3001      	adds	r0, #1
 80060bc:	d0e6      	beq.n	800608c <_printf_common+0xa4>
 80060be:	3601      	adds	r6, #1
 80060c0:	e7d9      	b.n	8006076 <_printf_common+0x8e>
	...

080060c4 <_printf_i>:
 80060c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	7e0f      	ldrb	r7, [r1, #24]
 80060ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060cc:	2f78      	cmp	r7, #120	; 0x78
 80060ce:	4691      	mov	r9, r2
 80060d0:	4680      	mov	r8, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	469a      	mov	sl, r3
 80060d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060da:	d807      	bhi.n	80060ec <_printf_i+0x28>
 80060dc:	2f62      	cmp	r7, #98	; 0x62
 80060de:	d80a      	bhi.n	80060f6 <_printf_i+0x32>
 80060e0:	2f00      	cmp	r7, #0
 80060e2:	f000 80d8 	beq.w	8006296 <_printf_i+0x1d2>
 80060e6:	2f58      	cmp	r7, #88	; 0x58
 80060e8:	f000 80a3 	beq.w	8006232 <_printf_i+0x16e>
 80060ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f4:	e03a      	b.n	800616c <_printf_i+0xa8>
 80060f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060fa:	2b15      	cmp	r3, #21
 80060fc:	d8f6      	bhi.n	80060ec <_printf_i+0x28>
 80060fe:	a101      	add	r1, pc, #4	; (adr r1, 8006104 <_printf_i+0x40>)
 8006100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006104:	0800615d 	.word	0x0800615d
 8006108:	08006171 	.word	0x08006171
 800610c:	080060ed 	.word	0x080060ed
 8006110:	080060ed 	.word	0x080060ed
 8006114:	080060ed 	.word	0x080060ed
 8006118:	080060ed 	.word	0x080060ed
 800611c:	08006171 	.word	0x08006171
 8006120:	080060ed 	.word	0x080060ed
 8006124:	080060ed 	.word	0x080060ed
 8006128:	080060ed 	.word	0x080060ed
 800612c:	080060ed 	.word	0x080060ed
 8006130:	0800627d 	.word	0x0800627d
 8006134:	080061a1 	.word	0x080061a1
 8006138:	0800625f 	.word	0x0800625f
 800613c:	080060ed 	.word	0x080060ed
 8006140:	080060ed 	.word	0x080060ed
 8006144:	0800629f 	.word	0x0800629f
 8006148:	080060ed 	.word	0x080060ed
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080060ed 	.word	0x080060ed
 8006154:	080060ed 	.word	0x080060ed
 8006158:	08006267 	.word	0x08006267
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	1d1a      	adds	r2, r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	602a      	str	r2, [r5, #0]
 8006164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800616c:	2301      	movs	r3, #1
 800616e:	e0a3      	b.n	80062b8 <_printf_i+0x1f4>
 8006170:	6820      	ldr	r0, [r4, #0]
 8006172:	6829      	ldr	r1, [r5, #0]
 8006174:	0606      	lsls	r6, r0, #24
 8006176:	f101 0304 	add.w	r3, r1, #4
 800617a:	d50a      	bpl.n	8006192 <_printf_i+0xce>
 800617c:	680e      	ldr	r6, [r1, #0]
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	2e00      	cmp	r6, #0
 8006182:	da03      	bge.n	800618c <_printf_i+0xc8>
 8006184:	232d      	movs	r3, #45	; 0x2d
 8006186:	4276      	negs	r6, r6
 8006188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800618c:	485e      	ldr	r0, [pc, #376]	; (8006308 <_printf_i+0x244>)
 800618e:	230a      	movs	r3, #10
 8006190:	e019      	b.n	80061c6 <_printf_i+0x102>
 8006192:	680e      	ldr	r6, [r1, #0]
 8006194:	602b      	str	r3, [r5, #0]
 8006196:	f010 0f40 	tst.w	r0, #64	; 0x40
 800619a:	bf18      	it	ne
 800619c:	b236      	sxthne	r6, r6
 800619e:	e7ef      	b.n	8006180 <_printf_i+0xbc>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	6820      	ldr	r0, [r4, #0]
 80061a4:	1d19      	adds	r1, r3, #4
 80061a6:	6029      	str	r1, [r5, #0]
 80061a8:	0601      	lsls	r1, r0, #24
 80061aa:	d501      	bpl.n	80061b0 <_printf_i+0xec>
 80061ac:	681e      	ldr	r6, [r3, #0]
 80061ae:	e002      	b.n	80061b6 <_printf_i+0xf2>
 80061b0:	0646      	lsls	r6, r0, #25
 80061b2:	d5fb      	bpl.n	80061ac <_printf_i+0xe8>
 80061b4:	881e      	ldrh	r6, [r3, #0]
 80061b6:	4854      	ldr	r0, [pc, #336]	; (8006308 <_printf_i+0x244>)
 80061b8:	2f6f      	cmp	r7, #111	; 0x6f
 80061ba:	bf0c      	ite	eq
 80061bc:	2308      	moveq	r3, #8
 80061be:	230a      	movne	r3, #10
 80061c0:	2100      	movs	r1, #0
 80061c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c6:	6865      	ldr	r5, [r4, #4]
 80061c8:	60a5      	str	r5, [r4, #8]
 80061ca:	2d00      	cmp	r5, #0
 80061cc:	bfa2      	ittt	ge
 80061ce:	6821      	ldrge	r1, [r4, #0]
 80061d0:	f021 0104 	bicge.w	r1, r1, #4
 80061d4:	6021      	strge	r1, [r4, #0]
 80061d6:	b90e      	cbnz	r6, 80061dc <_printf_i+0x118>
 80061d8:	2d00      	cmp	r5, #0
 80061da:	d04d      	beq.n	8006278 <_printf_i+0x1b4>
 80061dc:	4615      	mov	r5, r2
 80061de:	fbb6 f1f3 	udiv	r1, r6, r3
 80061e2:	fb03 6711 	mls	r7, r3, r1, r6
 80061e6:	5dc7      	ldrb	r7, [r0, r7]
 80061e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061ec:	4637      	mov	r7, r6
 80061ee:	42bb      	cmp	r3, r7
 80061f0:	460e      	mov	r6, r1
 80061f2:	d9f4      	bls.n	80061de <_printf_i+0x11a>
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d10b      	bne.n	8006210 <_printf_i+0x14c>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	07de      	lsls	r6, r3, #31
 80061fc:	d508      	bpl.n	8006210 <_printf_i+0x14c>
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	6861      	ldr	r1, [r4, #4]
 8006202:	4299      	cmp	r1, r3
 8006204:	bfde      	ittt	le
 8006206:	2330      	movle	r3, #48	; 0x30
 8006208:	f805 3c01 	strble.w	r3, [r5, #-1]
 800620c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006210:	1b52      	subs	r2, r2, r5
 8006212:	6122      	str	r2, [r4, #16]
 8006214:	f8cd a000 	str.w	sl, [sp]
 8006218:	464b      	mov	r3, r9
 800621a:	aa03      	add	r2, sp, #12
 800621c:	4621      	mov	r1, r4
 800621e:	4640      	mov	r0, r8
 8006220:	f7ff fee2 	bl	8005fe8 <_printf_common>
 8006224:	3001      	adds	r0, #1
 8006226:	d14c      	bne.n	80062c2 <_printf_i+0x1fe>
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	b004      	add	sp, #16
 800622e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006232:	4835      	ldr	r0, [pc, #212]	; (8006308 <_printf_i+0x244>)
 8006234:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006238:	6829      	ldr	r1, [r5, #0]
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006240:	6029      	str	r1, [r5, #0]
 8006242:	061d      	lsls	r5, r3, #24
 8006244:	d514      	bpl.n	8006270 <_printf_i+0x1ac>
 8006246:	07df      	lsls	r7, r3, #31
 8006248:	bf44      	itt	mi
 800624a:	f043 0320 	orrmi.w	r3, r3, #32
 800624e:	6023      	strmi	r3, [r4, #0]
 8006250:	b91e      	cbnz	r6, 800625a <_printf_i+0x196>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	f023 0320 	bic.w	r3, r3, #32
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	2310      	movs	r3, #16
 800625c:	e7b0      	b.n	80061c0 <_printf_i+0xfc>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	f043 0320 	orr.w	r3, r3, #32
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	2378      	movs	r3, #120	; 0x78
 8006268:	4828      	ldr	r0, [pc, #160]	; (800630c <_printf_i+0x248>)
 800626a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800626e:	e7e3      	b.n	8006238 <_printf_i+0x174>
 8006270:	0659      	lsls	r1, r3, #25
 8006272:	bf48      	it	mi
 8006274:	b2b6      	uxthmi	r6, r6
 8006276:	e7e6      	b.n	8006246 <_printf_i+0x182>
 8006278:	4615      	mov	r5, r2
 800627a:	e7bb      	b.n	80061f4 <_printf_i+0x130>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	6826      	ldr	r6, [r4, #0]
 8006280:	6961      	ldr	r1, [r4, #20]
 8006282:	1d18      	adds	r0, r3, #4
 8006284:	6028      	str	r0, [r5, #0]
 8006286:	0635      	lsls	r5, r6, #24
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	d501      	bpl.n	8006290 <_printf_i+0x1cc>
 800628c:	6019      	str	r1, [r3, #0]
 800628e:	e002      	b.n	8006296 <_printf_i+0x1d2>
 8006290:	0670      	lsls	r0, r6, #25
 8006292:	d5fb      	bpl.n	800628c <_printf_i+0x1c8>
 8006294:	8019      	strh	r1, [r3, #0]
 8006296:	2300      	movs	r3, #0
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	4615      	mov	r5, r2
 800629c:	e7ba      	b.n	8006214 <_printf_i+0x150>
 800629e:	682b      	ldr	r3, [r5, #0]
 80062a0:	1d1a      	adds	r2, r3, #4
 80062a2:	602a      	str	r2, [r5, #0]
 80062a4:	681d      	ldr	r5, [r3, #0]
 80062a6:	6862      	ldr	r2, [r4, #4]
 80062a8:	2100      	movs	r1, #0
 80062aa:	4628      	mov	r0, r5
 80062ac:	f7fa f820 	bl	80002f0 <memchr>
 80062b0:	b108      	cbz	r0, 80062b6 <_printf_i+0x1f2>
 80062b2:	1b40      	subs	r0, r0, r5
 80062b4:	6060      	str	r0, [r4, #4]
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	6123      	str	r3, [r4, #16]
 80062ba:	2300      	movs	r3, #0
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c0:	e7a8      	b.n	8006214 <_printf_i+0x150>
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	462a      	mov	r2, r5
 80062c6:	4649      	mov	r1, r9
 80062c8:	4640      	mov	r0, r8
 80062ca:	47d0      	blx	sl
 80062cc:	3001      	adds	r0, #1
 80062ce:	d0ab      	beq.n	8006228 <_printf_i+0x164>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	079b      	lsls	r3, r3, #30
 80062d4:	d413      	bmi.n	80062fe <_printf_i+0x23a>
 80062d6:	68e0      	ldr	r0, [r4, #12]
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	4298      	cmp	r0, r3
 80062dc:	bfb8      	it	lt
 80062de:	4618      	movlt	r0, r3
 80062e0:	e7a4      	b.n	800622c <_printf_i+0x168>
 80062e2:	2301      	movs	r3, #1
 80062e4:	4632      	mov	r2, r6
 80062e6:	4649      	mov	r1, r9
 80062e8:	4640      	mov	r0, r8
 80062ea:	47d0      	blx	sl
 80062ec:	3001      	adds	r0, #1
 80062ee:	d09b      	beq.n	8006228 <_printf_i+0x164>
 80062f0:	3501      	adds	r5, #1
 80062f2:	68e3      	ldr	r3, [r4, #12]
 80062f4:	9903      	ldr	r1, [sp, #12]
 80062f6:	1a5b      	subs	r3, r3, r1
 80062f8:	42ab      	cmp	r3, r5
 80062fa:	dcf2      	bgt.n	80062e2 <_printf_i+0x21e>
 80062fc:	e7eb      	b.n	80062d6 <_printf_i+0x212>
 80062fe:	2500      	movs	r5, #0
 8006300:	f104 0619 	add.w	r6, r4, #25
 8006304:	e7f5      	b.n	80062f2 <_printf_i+0x22e>
 8006306:	bf00      	nop
 8006308:	08007d1d 	.word	0x08007d1d
 800630c:	08007d2e 	.word	0x08007d2e

08006310 <memcpy>:
 8006310:	440a      	add	r2, r1
 8006312:	4291      	cmp	r1, r2
 8006314:	f100 33ff 	add.w	r3, r0, #4294967295
 8006318:	d100      	bne.n	800631c <memcpy+0xc>
 800631a:	4770      	bx	lr
 800631c:	b510      	push	{r4, lr}
 800631e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006326:	4291      	cmp	r1, r2
 8006328:	d1f9      	bne.n	800631e <memcpy+0xe>
 800632a:	bd10      	pop	{r4, pc}

0800632c <memmove>:
 800632c:	4288      	cmp	r0, r1
 800632e:	b510      	push	{r4, lr}
 8006330:	eb01 0402 	add.w	r4, r1, r2
 8006334:	d902      	bls.n	800633c <memmove+0x10>
 8006336:	4284      	cmp	r4, r0
 8006338:	4623      	mov	r3, r4
 800633a:	d807      	bhi.n	800634c <memmove+0x20>
 800633c:	1e43      	subs	r3, r0, #1
 800633e:	42a1      	cmp	r1, r4
 8006340:	d008      	beq.n	8006354 <memmove+0x28>
 8006342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800634a:	e7f8      	b.n	800633e <memmove+0x12>
 800634c:	4402      	add	r2, r0
 800634e:	4601      	mov	r1, r0
 8006350:	428a      	cmp	r2, r1
 8006352:	d100      	bne.n	8006356 <memmove+0x2a>
 8006354:	bd10      	pop	{r4, pc}
 8006356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800635a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800635e:	e7f7      	b.n	8006350 <memmove+0x24>

08006360 <_free_r>:
 8006360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006362:	2900      	cmp	r1, #0
 8006364:	d044      	beq.n	80063f0 <_free_r+0x90>
 8006366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636a:	9001      	str	r0, [sp, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f1a1 0404 	sub.w	r4, r1, #4
 8006372:	bfb8      	it	lt
 8006374:	18e4      	addlt	r4, r4, r3
 8006376:	f000 f913 	bl	80065a0 <__malloc_lock>
 800637a:	4a1e      	ldr	r2, [pc, #120]	; (80063f4 <_free_r+0x94>)
 800637c:	9801      	ldr	r0, [sp, #4]
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	b933      	cbnz	r3, 8006390 <_free_r+0x30>
 8006382:	6063      	str	r3, [r4, #4]
 8006384:	6014      	str	r4, [r2, #0]
 8006386:	b003      	add	sp, #12
 8006388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800638c:	f000 b90e 	b.w	80065ac <__malloc_unlock>
 8006390:	42a3      	cmp	r3, r4
 8006392:	d908      	bls.n	80063a6 <_free_r+0x46>
 8006394:	6825      	ldr	r5, [r4, #0]
 8006396:	1961      	adds	r1, r4, r5
 8006398:	428b      	cmp	r3, r1
 800639a:	bf01      	itttt	eq
 800639c:	6819      	ldreq	r1, [r3, #0]
 800639e:	685b      	ldreq	r3, [r3, #4]
 80063a0:	1949      	addeq	r1, r1, r5
 80063a2:	6021      	streq	r1, [r4, #0]
 80063a4:	e7ed      	b.n	8006382 <_free_r+0x22>
 80063a6:	461a      	mov	r2, r3
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	b10b      	cbz	r3, 80063b0 <_free_r+0x50>
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	d9fa      	bls.n	80063a6 <_free_r+0x46>
 80063b0:	6811      	ldr	r1, [r2, #0]
 80063b2:	1855      	adds	r5, r2, r1
 80063b4:	42a5      	cmp	r5, r4
 80063b6:	d10b      	bne.n	80063d0 <_free_r+0x70>
 80063b8:	6824      	ldr	r4, [r4, #0]
 80063ba:	4421      	add	r1, r4
 80063bc:	1854      	adds	r4, r2, r1
 80063be:	42a3      	cmp	r3, r4
 80063c0:	6011      	str	r1, [r2, #0]
 80063c2:	d1e0      	bne.n	8006386 <_free_r+0x26>
 80063c4:	681c      	ldr	r4, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	6053      	str	r3, [r2, #4]
 80063ca:	4421      	add	r1, r4
 80063cc:	6011      	str	r1, [r2, #0]
 80063ce:	e7da      	b.n	8006386 <_free_r+0x26>
 80063d0:	d902      	bls.n	80063d8 <_free_r+0x78>
 80063d2:	230c      	movs	r3, #12
 80063d4:	6003      	str	r3, [r0, #0]
 80063d6:	e7d6      	b.n	8006386 <_free_r+0x26>
 80063d8:	6825      	ldr	r5, [r4, #0]
 80063da:	1961      	adds	r1, r4, r5
 80063dc:	428b      	cmp	r3, r1
 80063de:	bf04      	itt	eq
 80063e0:	6819      	ldreq	r1, [r3, #0]
 80063e2:	685b      	ldreq	r3, [r3, #4]
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	bf04      	itt	eq
 80063e8:	1949      	addeq	r1, r1, r5
 80063ea:	6021      	streq	r1, [r4, #0]
 80063ec:	6054      	str	r4, [r2, #4]
 80063ee:	e7ca      	b.n	8006386 <_free_r+0x26>
 80063f0:	b003      	add	sp, #12
 80063f2:	bd30      	pop	{r4, r5, pc}
 80063f4:	24000270 	.word	0x24000270

080063f8 <sbrk_aligned>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4e0e      	ldr	r6, [pc, #56]	; (8006434 <sbrk_aligned+0x3c>)
 80063fc:	460c      	mov	r4, r1
 80063fe:	6831      	ldr	r1, [r6, #0]
 8006400:	4605      	mov	r5, r0
 8006402:	b911      	cbnz	r1, 800640a <sbrk_aligned+0x12>
 8006404:	f000 f8bc 	bl	8006580 <_sbrk_r>
 8006408:	6030      	str	r0, [r6, #0]
 800640a:	4621      	mov	r1, r4
 800640c:	4628      	mov	r0, r5
 800640e:	f000 f8b7 	bl	8006580 <_sbrk_r>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d00a      	beq.n	800642c <sbrk_aligned+0x34>
 8006416:	1cc4      	adds	r4, r0, #3
 8006418:	f024 0403 	bic.w	r4, r4, #3
 800641c:	42a0      	cmp	r0, r4
 800641e:	d007      	beq.n	8006430 <sbrk_aligned+0x38>
 8006420:	1a21      	subs	r1, r4, r0
 8006422:	4628      	mov	r0, r5
 8006424:	f000 f8ac 	bl	8006580 <_sbrk_r>
 8006428:	3001      	adds	r0, #1
 800642a:	d101      	bne.n	8006430 <sbrk_aligned+0x38>
 800642c:	f04f 34ff 	mov.w	r4, #4294967295
 8006430:	4620      	mov	r0, r4
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	24000274 	.word	0x24000274

08006438 <_malloc_r>:
 8006438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643c:	1ccd      	adds	r5, r1, #3
 800643e:	f025 0503 	bic.w	r5, r5, #3
 8006442:	3508      	adds	r5, #8
 8006444:	2d0c      	cmp	r5, #12
 8006446:	bf38      	it	cc
 8006448:	250c      	movcc	r5, #12
 800644a:	2d00      	cmp	r5, #0
 800644c:	4607      	mov	r7, r0
 800644e:	db01      	blt.n	8006454 <_malloc_r+0x1c>
 8006450:	42a9      	cmp	r1, r5
 8006452:	d905      	bls.n	8006460 <_malloc_r+0x28>
 8006454:	230c      	movs	r3, #12
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	2600      	movs	r6, #0
 800645a:	4630      	mov	r0, r6
 800645c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006460:	4e2e      	ldr	r6, [pc, #184]	; (800651c <_malloc_r+0xe4>)
 8006462:	f000 f89d 	bl	80065a0 <__malloc_lock>
 8006466:	6833      	ldr	r3, [r6, #0]
 8006468:	461c      	mov	r4, r3
 800646a:	bb34      	cbnz	r4, 80064ba <_malloc_r+0x82>
 800646c:	4629      	mov	r1, r5
 800646e:	4638      	mov	r0, r7
 8006470:	f7ff ffc2 	bl	80063f8 <sbrk_aligned>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	4604      	mov	r4, r0
 8006478:	d14d      	bne.n	8006516 <_malloc_r+0xde>
 800647a:	6834      	ldr	r4, [r6, #0]
 800647c:	4626      	mov	r6, r4
 800647e:	2e00      	cmp	r6, #0
 8006480:	d140      	bne.n	8006504 <_malloc_r+0xcc>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	4631      	mov	r1, r6
 8006486:	4638      	mov	r0, r7
 8006488:	eb04 0803 	add.w	r8, r4, r3
 800648c:	f000 f878 	bl	8006580 <_sbrk_r>
 8006490:	4580      	cmp	r8, r0
 8006492:	d13a      	bne.n	800650a <_malloc_r+0xd2>
 8006494:	6821      	ldr	r1, [r4, #0]
 8006496:	3503      	adds	r5, #3
 8006498:	1a6d      	subs	r5, r5, r1
 800649a:	f025 0503 	bic.w	r5, r5, #3
 800649e:	3508      	adds	r5, #8
 80064a0:	2d0c      	cmp	r5, #12
 80064a2:	bf38      	it	cc
 80064a4:	250c      	movcc	r5, #12
 80064a6:	4629      	mov	r1, r5
 80064a8:	4638      	mov	r0, r7
 80064aa:	f7ff ffa5 	bl	80063f8 <sbrk_aligned>
 80064ae:	3001      	adds	r0, #1
 80064b0:	d02b      	beq.n	800650a <_malloc_r+0xd2>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	442b      	add	r3, r5
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	e00e      	b.n	80064d8 <_malloc_r+0xa0>
 80064ba:	6822      	ldr	r2, [r4, #0]
 80064bc:	1b52      	subs	r2, r2, r5
 80064be:	d41e      	bmi.n	80064fe <_malloc_r+0xc6>
 80064c0:	2a0b      	cmp	r2, #11
 80064c2:	d916      	bls.n	80064f2 <_malloc_r+0xba>
 80064c4:	1961      	adds	r1, r4, r5
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	6025      	str	r5, [r4, #0]
 80064ca:	bf18      	it	ne
 80064cc:	6059      	strne	r1, [r3, #4]
 80064ce:	6863      	ldr	r3, [r4, #4]
 80064d0:	bf08      	it	eq
 80064d2:	6031      	streq	r1, [r6, #0]
 80064d4:	5162      	str	r2, [r4, r5]
 80064d6:	604b      	str	r3, [r1, #4]
 80064d8:	4638      	mov	r0, r7
 80064da:	f104 060b 	add.w	r6, r4, #11
 80064de:	f000 f865 	bl	80065ac <__malloc_unlock>
 80064e2:	f026 0607 	bic.w	r6, r6, #7
 80064e6:	1d23      	adds	r3, r4, #4
 80064e8:	1af2      	subs	r2, r6, r3
 80064ea:	d0b6      	beq.n	800645a <_malloc_r+0x22>
 80064ec:	1b9b      	subs	r3, r3, r6
 80064ee:	50a3      	str	r3, [r4, r2]
 80064f0:	e7b3      	b.n	800645a <_malloc_r+0x22>
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	bf0c      	ite	eq
 80064f8:	6032      	streq	r2, [r6, #0]
 80064fa:	605a      	strne	r2, [r3, #4]
 80064fc:	e7ec      	b.n	80064d8 <_malloc_r+0xa0>
 80064fe:	4623      	mov	r3, r4
 8006500:	6864      	ldr	r4, [r4, #4]
 8006502:	e7b2      	b.n	800646a <_malloc_r+0x32>
 8006504:	4634      	mov	r4, r6
 8006506:	6876      	ldr	r6, [r6, #4]
 8006508:	e7b9      	b.n	800647e <_malloc_r+0x46>
 800650a:	230c      	movs	r3, #12
 800650c:	603b      	str	r3, [r7, #0]
 800650e:	4638      	mov	r0, r7
 8006510:	f000 f84c 	bl	80065ac <__malloc_unlock>
 8006514:	e7a1      	b.n	800645a <_malloc_r+0x22>
 8006516:	6025      	str	r5, [r4, #0]
 8006518:	e7de      	b.n	80064d8 <_malloc_r+0xa0>
 800651a:	bf00      	nop
 800651c:	24000270 	.word	0x24000270

08006520 <_realloc_r>:
 8006520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	4680      	mov	r8, r0
 8006526:	4614      	mov	r4, r2
 8006528:	460e      	mov	r6, r1
 800652a:	b921      	cbnz	r1, 8006536 <_realloc_r+0x16>
 800652c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006530:	4611      	mov	r1, r2
 8006532:	f7ff bf81 	b.w	8006438 <_malloc_r>
 8006536:	b92a      	cbnz	r2, 8006544 <_realloc_r+0x24>
 8006538:	f7ff ff12 	bl	8006360 <_free_r>
 800653c:	4625      	mov	r5, r4
 800653e:	4628      	mov	r0, r5
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	f000 f838 	bl	80065b8 <_malloc_usable_size_r>
 8006548:	4284      	cmp	r4, r0
 800654a:	4607      	mov	r7, r0
 800654c:	d802      	bhi.n	8006554 <_realloc_r+0x34>
 800654e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006552:	d812      	bhi.n	800657a <_realloc_r+0x5a>
 8006554:	4621      	mov	r1, r4
 8006556:	4640      	mov	r0, r8
 8006558:	f7ff ff6e 	bl	8006438 <_malloc_r>
 800655c:	4605      	mov	r5, r0
 800655e:	2800      	cmp	r0, #0
 8006560:	d0ed      	beq.n	800653e <_realloc_r+0x1e>
 8006562:	42bc      	cmp	r4, r7
 8006564:	4622      	mov	r2, r4
 8006566:	4631      	mov	r1, r6
 8006568:	bf28      	it	cs
 800656a:	463a      	movcs	r2, r7
 800656c:	f7ff fed0 	bl	8006310 <memcpy>
 8006570:	4631      	mov	r1, r6
 8006572:	4640      	mov	r0, r8
 8006574:	f7ff fef4 	bl	8006360 <_free_r>
 8006578:	e7e1      	b.n	800653e <_realloc_r+0x1e>
 800657a:	4635      	mov	r5, r6
 800657c:	e7df      	b.n	800653e <_realloc_r+0x1e>
	...

08006580 <_sbrk_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4d06      	ldr	r5, [pc, #24]	; (800659c <_sbrk_r+0x1c>)
 8006584:	2300      	movs	r3, #0
 8006586:	4604      	mov	r4, r0
 8006588:	4608      	mov	r0, r1
 800658a:	602b      	str	r3, [r5, #0]
 800658c:	f7fb feaa 	bl	80022e4 <_sbrk>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_sbrk_r+0x1a>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_sbrk_r+0x1a>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	24000278 	.word	0x24000278

080065a0 <__malloc_lock>:
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <__malloc_lock+0x8>)
 80065a2:	f000 b811 	b.w	80065c8 <__retarget_lock_acquire_recursive>
 80065a6:	bf00      	nop
 80065a8:	2400027c 	.word	0x2400027c

080065ac <__malloc_unlock>:
 80065ac:	4801      	ldr	r0, [pc, #4]	; (80065b4 <__malloc_unlock+0x8>)
 80065ae:	f000 b80c 	b.w	80065ca <__retarget_lock_release_recursive>
 80065b2:	bf00      	nop
 80065b4:	2400027c 	.word	0x2400027c

080065b8 <_malloc_usable_size_r>:
 80065b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065bc:	1f18      	subs	r0, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bfbc      	itt	lt
 80065c2:	580b      	ldrlt	r3, [r1, r0]
 80065c4:	18c0      	addlt	r0, r0, r3
 80065c6:	4770      	bx	lr

080065c8 <__retarget_lock_acquire_recursive>:
 80065c8:	4770      	bx	lr

080065ca <__retarget_lock_release_recursive>:
 80065ca:	4770      	bx	lr

080065cc <_init>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr

080065d8 <_fini>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	bf00      	nop
 80065dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065de:	bc08      	pop	{r3}
 80065e0:	469e      	mov	lr, r3
 80065e2:	4770      	bx	lr
