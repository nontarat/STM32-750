
hx711.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000910c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000175c  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ab08  0800ab08  0001ab08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ab0c  0800ab0c  0001ab0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  0800ab10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000648  24000074  0800ab84  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240006bc  0800ab84  000206bc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b699  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b9e  00000000  00000000  0003b73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001648  00000000  00000000  0003f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001490  00000000  00000000  00040928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a7a0  00000000  00000000  00041db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001ced8  00000000  00000000  0007c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00165b3c  00000000  00000000  00099430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001fef6c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006124  00000000  00000000  001fefbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009394 	.word	0x08009394

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08009394 	.word	0x08009394

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <delay_us>:
	delay_us((u32)(nms*1000));				//��ͨ��ʽ��ʱ
}
#else

void delay_us(u32 nus)
{
 8000390:	b480      	push	{r7}
 8000392:	b089      	sub	sp, #36	; 0x24
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	u32 ticks;
	u32 told,tnow,tcnt=0;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
	u32 reload=SysTick->LOAD;				//LOAD��ֵ
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <delay_us+0x74>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	617b      	str	r3, [r7, #20]
	ticks=nus*fac_us; 						//��Ҫ�Ľ�����
 80003a2:	4b19      	ldr	r3, [pc, #100]	; (8000408 <delay_us+0x78>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	fb02 f303 	mul.w	r3, r2, r3
 80003ac:	613b      	str	r3, [r7, #16]
	told=SysTick->VAL;        				//�ս���ʱ�ļ�����ֵ
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <delay_us+0x74>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		tnow=SysTick->VAL;
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <delay_us+0x74>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	60fb      	str	r3, [r7, #12]
		if(tnow!=told)
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d0f8      	beq.n	80003b4 <delay_us+0x24>
		{
			if(tnow<told)tcnt+=told-tnow;	//����ע��һ��SYSTICK��һ���ݼ��ļ������Ϳ�����.
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	69fb      	ldr	r3, [r7, #28]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d206      	bcs.n	80003d8 <delay_us+0x48>
 80003ca:	69fa      	ldr	r2, [r7, #28]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	69ba      	ldr	r2, [r7, #24]
 80003d2:	4413      	add	r3, r2
 80003d4:	61bb      	str	r3, [r7, #24]
 80003d6:	e007      	b.n	80003e8 <delay_us+0x58>
			else tcnt+=reload-tnow+told;
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	1ad2      	subs	r2, r2, r3
 80003de:	69fb      	ldr	r3, [r7, #28]
 80003e0:	4413      	add	r3, r2
 80003e2:	69ba      	ldr	r2, [r7, #24]
 80003e4:	4413      	add	r3, r2
 80003e6:	61bb      	str	r3, [r7, #24]
			told=tnow;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	61fb      	str	r3, [r7, #28]
			if(tcnt>=ticks)break;			//ʱ�䳬��/����Ҫ�ӳٵ�ʱ��,���˳�.
 80003ec:	69ba      	ldr	r2, [r7, #24]
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d200      	bcs.n	80003f6 <delay_us+0x66>
		tnow=SysTick->VAL;
 80003f4:	e7de      	b.n	80003b4 <delay_us+0x24>
			if(tcnt>=ticks)break;			//ʱ�䳬��/����Ҫ�ӳٵ�ʱ��,���˳�.
 80003f6:	bf00      	nop
		}
	};
}
 80003f8:	bf00      	nop
 80003fa:	3724      	adds	r7, #36	; 0x24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	e000e010 	.word	0xe000e010
 8000408:	24000090 	.word	0x24000090

0800040c <delay_ms>:

//��ʱnms
//nms:Ҫ��ʱ��ms��
void delay_ms(u16 nms)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	80fb      	strh	r3, [r7, #6]
	u32 i;
	for(i=0;i<nms;i++) delay_us(1000);
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	e006      	b.n	800042a <delay_ms+0x1e>
 800041c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000420:	f7ff ffb6 	bl	8000390 <delay_us>
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	3301      	adds	r3, #1
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	68fa      	ldr	r2, [r7, #12]
 800042e:	429a      	cmp	r2, r3
 8000430:	d3f4      	bcc.n	800041c <delay_ms+0x10>
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000452:	4b32      	ldr	r3, [pc, #200]	; (800051c <MX_GPIO_Init+0xe0>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	4a30      	ldr	r2, [pc, #192]	; (800051c <MX_GPIO_Init+0xe0>)
 800045a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800045e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000462:	4b2e      	ldr	r3, [pc, #184]	; (800051c <MX_GPIO_Init+0xe0>)
 8000464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b2a      	ldr	r3, [pc, #168]	; (800051c <MX_GPIO_Init+0xe0>)
 8000472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000476:	4a29      	ldr	r2, [pc, #164]	; (800051c <MX_GPIO_Init+0xe0>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000480:	4b26      	ldr	r3, [pc, #152]	; (800051c <MX_GPIO_Init+0xe0>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048e:	4b23      	ldr	r3, [pc, #140]	; (800051c <MX_GPIO_Init+0xe0>)
 8000490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000494:	4a21      	ldr	r2, [pc, #132]	; (800051c <MX_GPIO_Init+0xe0>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <MX_GPIO_Init+0xe0>)
 80004a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a4:	f003 0310 	and.w	r3, r3, #16
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2150      	movs	r1, #80	; 0x50
 80004b0:	481b      	ldr	r0, [pc, #108]	; (8000520 <MX_GPIO_Init+0xe4>)
 80004b2:	f001 ff39 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 80004bc:	4819      	ldr	r0, [pc, #100]	; (8000524 <MX_GPIO_Init+0xe8>)
 80004be:	f001 ff33 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80004c2:	2328      	movs	r3, #40	; 0x28
 80004c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	4812      	ldr	r0, [pc, #72]	; (8000520 <MX_GPIO_Init+0xe4>)
 80004d6:	f001 fd5f 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80004da:	2350      	movs	r3, #80	; 0x50
 80004dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	4619      	mov	r1, r3
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <MX_GPIO_Init+0xe4>)
 80004f2:	f001 fd51 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin;
 80004f6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80004fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000500:	2301      	movs	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000504:	2303      	movs	r3, #3
 8000506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	4619      	mov	r1, r3
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_GPIO_Init+0xe8>)
 8000510:	f001 fd42 	bl	8001f98 <HAL_GPIO_Init>

}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	58024400 	.word	0x58024400
 8000520:	58020000 	.word	0x58020000
 8000524:	58021000 	.word	0x58021000

08000528 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4604      	mov	r4, r0
 8000530:	4608      	mov	r0, r1
 8000532:	4611      	mov	r1, r2
 8000534:	461a      	mov	r2, r3
 8000536:	4623      	mov	r3, r4
 8000538:	80fb      	strh	r3, [r7, #6]
 800053a:	4603      	mov	r3, r0
 800053c:	80bb      	strh	r3, [r7, #4]
 800053e:	460b      	mov	r3, r1
 8000540:	807b      	strh	r3, [r7, #2]
 8000542:	4613      	mov	r3, r2
 8000544:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;
 8000546:	4b62      	ldr	r3, [pc, #392]	; (80006d0 <LCD_ShowChar+0x1a8>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	817b      	strh	r3, [r7, #10]

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 800054c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000550:	3b20      	subs	r3, #32
 8000552:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 8000556:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800055a:	085b      	lsrs	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	b29a      	uxth	r2, r3
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	4413      	add	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	3b01      	subs	r3, #1
 8000568:	b29c      	uxth	r4, r3
 800056a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800056e:	b29a      	uxth	r2, r3
 8000570:	88bb      	ldrh	r3, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	b29b      	uxth	r3, r3
 8000576:	3b01      	subs	r3, #1
 8000578:	b29b      	uxth	r3, r3
 800057a:	88b9      	ldrh	r1, [r7, #4]
 800057c:	88f8      	ldrh	r0, [r7, #6]
 800057e:	4622      	mov	r2, r4
 8000580:	f000 fe2c 	bl	80011dc <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8000584:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000588:	2b00      	cmp	r3, #0
 800058a:	d143      	bne.n	8000614 <LCD_ShowChar+0xec>
	{
		for(pos=0;pos<size;pos++)
 800058c:	2300      	movs	r3, #0
 800058e:	73bb      	strb	r3, [r7, #14]
 8000590:	e03a      	b.n	8000608 <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8000592:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000596:	2b0c      	cmp	r3, #12
 8000598:	d10c      	bne.n	80005b4 <LCD_ShowChar+0x8c>
 800059a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800059e:	7bb9      	ldrb	r1, [r7, #14]
 80005a0:	484c      	ldr	r0, [pc, #304]	; (80006d4 <LCD_ShowChar+0x1ac>)
 80005a2:	4613      	mov	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4403      	add	r3, r0
 80005ac:	440b      	add	r3, r1
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	e008      	b.n	80005c6 <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 80005b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80005b8:	7bbb      	ldrb	r3, [r7, #14]
 80005ba:	4947      	ldr	r1, [pc, #284]	; (80006d8 <LCD_ShowChar+0x1b0>)
 80005bc:	0112      	lsls	r2, r2, #4
 80005be:	440a      	add	r2, r1
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	737b      	strb	r3, [r7, #13]
 80005ca:	e013      	b.n	80005f4 <LCD_ShowChar+0xcc>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d004      	beq.n	80005e0 <LCD_ShowChar+0xb8>
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fc0b 	bl	8000df4 <Lcd_WriteData_16Bit>
 80005de:	e003      	b.n	80005e8 <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc);
 80005e0:	883b      	ldrh	r3, [r7, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fc06 	bl	8000df4 <Lcd_WriteData_16Bit>
				temp>>=1;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	085b      	lsrs	r3, r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80005ee:	7b7b      	ldrb	r3, [r7, #13]
 80005f0:	3301      	adds	r3, #1
 80005f2:	737b      	strb	r3, [r7, #13]
 80005f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005f8:	085b      	lsrs	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	7b7a      	ldrb	r2, [r7, #13]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d3e4      	bcc.n	80005cc <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	3301      	adds	r3, #1
 8000606:	73bb      	strb	r3, [r7, #14]
 8000608:	7bba      	ldrb	r2, [r7, #14]
 800060a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800060e:	429a      	cmp	r2, r3
 8000610:	d3bf      	bcc.n	8000592 <LCD_ShowChar+0x6a>
 8000612:	e049      	b.n	80006a8 <LCD_ShowChar+0x180>
		    }

		}
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 8000614:	2300      	movs	r3, #0
 8000616:	73bb      	strb	r3, [r7, #14]
 8000618:	e041      	b.n	800069e <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 800061a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800061e:	2b0c      	cmp	r3, #12
 8000620:	d10c      	bne.n	800063c <LCD_ShowChar+0x114>
 8000622:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000626:	7bb9      	ldrb	r1, [r7, #14]
 8000628:	482a      	ldr	r0, [pc, #168]	; (80006d4 <LCD_ShowChar+0x1ac>)
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4403      	add	r3, r0
 8000634:	440b      	add	r3, r1
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	e008      	b.n	800064e <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 800063c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000640:	7bbb      	ldrb	r3, [r7, #14]
 8000642:	4925      	ldr	r1, [pc, #148]	; (80006d8 <LCD_ShowChar+0x1b0>)
 8000644:	0112      	lsls	r2, r2, #4
 8000646:	440a      	add	r2, r1
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 800064e:	2300      	movs	r3, #0
 8000650:	737b      	strb	r3, [r7, #13]
 8000652:	e01a      	b.n	800068a <LCD_ShowChar+0x162>
		    {
				POINT_COLOR=fc;
 8000654:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <LCD_ShowChar+0x1a8>)
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00c      	beq.n	800067e <LCD_ShowChar+0x156>
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	b29a      	uxth	r2, r3
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	4413      	add	r3, r2
 800066c:	b298      	uxth	r0, r3
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	b29a      	uxth	r2, r3
 8000672:	88bb      	ldrh	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	b29b      	uxth	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	f000 fbe5 	bl	8000e48 <LCD_DrawPoint>
		        temp>>=1;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	085b      	lsrs	r3, r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8000684:	7b7b      	ldrb	r3, [r7, #13]
 8000686:	3301      	adds	r3, #1
 8000688:	737b      	strb	r3, [r7, #13]
 800068a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800068e:	085b      	lsrs	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	7b7a      	ldrb	r2, [r7, #13]
 8000694:	429a      	cmp	r2, r3
 8000696:	d3dd      	bcc.n	8000654 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	3301      	adds	r3, #1
 800069c:	73bb      	strb	r3, [r7, #14]
 800069e:	7bba      	ldrb	r2, [r7, #14]
 80006a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3b8      	bcc.n	800061a <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;
 80006a8:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <LCD_ShowChar+0x1a8>)
 80006aa:	897b      	ldrh	r3, [r7, #10]
 80006ac:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <LCD_ShowChar+0x1b4>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <LCD_ShowChar+0x1b4>)
 80006b8:	885b      	ldrh	r3, [r3, #2]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	b29b      	uxth	r3, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fd8b 	bl	80011dc <LCD_SetWindows>
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	bf00      	nop
 80006d0:	240000a2 	.word	0x240000a2
 80006d4:	080093d0 	.word	0x080093d0
 80006d8:	08009844 	.word	0x08009844
 80006dc:	24000094 	.word	0x24000094

080006e0 <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4604      	mov	r4, r0
 80006e8:	4608      	mov	r0, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	4623      	mov	r3, r4
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	4603      	mov	r3, r0
 80006f4:	80bb      	strh	r3, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	807b      	strh	r3, [r7, #2]
 80006fa:	4613      	mov	r3, r2
 80006fc:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//�Զ�ͳ�ƺ�����Ŀ
 8000702:	2340      	movs	r3, #64	; 0x40
 8000704:	813b      	strh	r3, [r7, #8]


	for (k=0;k<HZnum;k++)
 8000706:	2300      	movs	r3, #0
 8000708:	81bb      	strh	r3, [r7, #12]
 800070a:	e083      	b.n	8000814 <GUI_DrawFont16+0x134>
	{
	  if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 800070c:	89ba      	ldrh	r2, [r7, #12]
 800070e:	494c      	ldr	r1, [pc, #304]	; (8000840 <GUI_DrawFont16+0x160>)
 8000710:	4613      	mov	r3, r2
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	4413      	add	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	440b      	add	r3, r1
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	6a3b      	ldr	r3, [r7, #32]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d174      	bne.n	800080e <GUI_DrawFont16+0x12e>
 8000724:	89ba      	ldrh	r2, [r7, #12]
 8000726:	4946      	ldr	r1, [pc, #280]	; (8000840 <GUI_DrawFont16+0x160>)
 8000728:	4613      	mov	r3, r2
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	4413      	add	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	440b      	add	r3, r1
 8000732:	3301      	adds	r3, #1
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	6a3b      	ldr	r3, [r7, #32]
 8000738:	3301      	adds	r3, #1
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d166      	bne.n	800080e <GUI_DrawFont16+0x12e>
	  { 	LCD_SetWindows(x,y,x+16-1,y+16-1);
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	330f      	adds	r3, #15
 8000744:	b29a      	uxth	r2, r3
 8000746:	88bb      	ldrh	r3, [r7, #4]
 8000748:	330f      	adds	r3, #15
 800074a:	b29b      	uxth	r3, r3
 800074c:	88b9      	ldrh	r1, [r7, #4]
 800074e:	88f8      	ldrh	r0, [r7, #6]
 8000750:	f000 fd44 	bl	80011dc <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e056      	b.n	8000808 <GUI_DrawFont16+0x128>
		    {
				for(j=0;j<8;j++)
 800075a:	2300      	movs	r3, #0
 800075c:	73bb      	strb	r3, [r7, #14]
 800075e:	e04d      	b.n	80007fc <GUI_DrawFont16+0x11c>
		    	{
					if(!mode) //�ǵ��ӷ�ʽ
 8000760:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000764:	2b00      	cmp	r3, #0
 8000766:	d11c      	bne.n	80007a2 <GUI_DrawFont16+0xc2>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8000768:	89ba      	ldrh	r2, [r7, #12]
 800076a:	7bf9      	ldrb	r1, [r7, #15]
 800076c:	4834      	ldr	r0, [pc, #208]	; (8000840 <GUI_DrawFont16+0x160>)
 800076e:	4613      	mov	r3, r2
 8000770:	011b      	lsls	r3, r3, #4
 8000772:	4413      	add	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4403      	add	r3, r0
 8000778:	440b      	add	r3, r1
 800077a:	3302      	adds	r3, #2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	7bbb      	ldrb	r3, [r7, #14]
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	fa42 f303 	asr.w	r3, r2, r3
 8000788:	400b      	ands	r3, r1
 800078a:	2b00      	cmp	r3, #0
 800078c:	d004      	beq.n	8000798 <GUI_DrawFont16+0xb8>
 800078e:	887b      	ldrh	r3, [r7, #2]
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fb2f 	bl	8000df4 <Lcd_WriteData_16Bit>
 8000796:	e02e      	b.n	80007f6 <GUI_DrawFont16+0x116>
						else Lcd_WriteData_16Bit(bc);
 8000798:	883b      	ldrh	r3, [r7, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fb2a 	bl	8000df4 <Lcd_WriteData_16Bit>
 80007a0:	e029      	b.n	80007f6 <GUI_DrawFont16+0x116>
					}
					else
					{
						POINT_COLOR=fc;
 80007a2:	4a28      	ldr	r2, [pc, #160]	; (8000844 <GUI_DrawFont16+0x164>)
 80007a4:	887b      	ldrh	r3, [r7, #2]
 80007a6:	8013      	strh	r3, [r2, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 80007a8:	89ba      	ldrh	r2, [r7, #12]
 80007aa:	7bf9      	ldrb	r1, [r7, #15]
 80007ac:	4824      	ldr	r0, [pc, #144]	; (8000840 <GUI_DrawFont16+0x160>)
 80007ae:	4613      	mov	r3, r2
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	4413      	add	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4403      	add	r3, r0
 80007b8:	440b      	add	r3, r1
 80007ba:	3302      	adds	r3, #2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	fa42 f303 	asr.w	r3, r2, r3
 80007c8:	400b      	ands	r3, r1
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d005      	beq.n	80007da <GUI_DrawFont16+0xfa>
 80007ce:	88ba      	ldrh	r2, [r7, #4]
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fb37 	bl	8000e48 <LCD_DrawPoint>
						x++;
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	3301      	adds	r3, #1
 80007de:	80fb      	strh	r3, [r7, #6]
						if((x-x0)==16)
 80007e0:	88fa      	ldrh	r2, [r7, #6]
 80007e2:	897b      	ldrh	r3, [r7, #10]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	2b10      	cmp	r3, #16
 80007e8:	d105      	bne.n	80007f6 <GUI_DrawFont16+0x116>
						{
							x=x0;
 80007ea:	897b      	ldrh	r3, [r7, #10]
 80007ec:	80fb      	strh	r3, [r7, #6]
							y++;
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	3301      	adds	r3, #1
 80007f2:	80bb      	strh	r3, [r7, #4]
							break;
 80007f4:	e005      	b.n	8000802 <GUI_DrawFont16+0x122>
				for(j=0;j<8;j++)
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	3301      	adds	r3, #1
 80007fa:	73bb      	strb	r3, [r7, #14]
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	d9ae      	bls.n	8000760 <GUI_DrawFont16+0x80>
		    for(i=0;i<16*2;i++)
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	3301      	adds	r3, #1
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2b1f      	cmp	r3, #31
 800080c:	d9a5      	bls.n	800075a <GUI_DrawFont16+0x7a>
	for (k=0;k<HZnum;k++)
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	81bb      	strh	r3, [r7, #12]
 8000814:	89ba      	ldrh	r2, [r7, #12]
 8000816:	893b      	ldrh	r3, [r7, #8]
 8000818:	429a      	cmp	r2, r3
 800081a:	f4ff af77 	bcc.w	800070c <GUI_DrawFont16+0x2c>

		}
		continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <GUI_DrawFont16+0x168>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	3b01      	subs	r3, #1
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <GUI_DrawFont16+0x168>)
 8000828:	885b      	ldrh	r3, [r3, #2]
 800082a:	3b01      	subs	r3, #1
 800082c:	b29b      	uxth	r3, r3
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fcd3 	bl	80011dc <LCD_SetWindows>
}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	bf00      	nop
 8000840:	08009e34 	.word	0x08009e34
 8000844:	240000a2 	.word	0x240000a2
 8000848:	24000094 	.word	0x24000094

0800084c <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	4604      	mov	r4, r0
 8000854:	4608      	mov	r0, r1
 8000856:	4611      	mov	r1, r2
 8000858:	461a      	mov	r2, r3
 800085a:	4623      	mov	r3, r4
 800085c:	80fb      	strh	r3, [r7, #6]
 800085e:	4603      	mov	r3, r0
 8000860:	80bb      	strh	r3, [r7, #4]
 8000862:	460b      	mov	r3, r1
 8000864:	807b      	strh	r3, [r7, #2]
 8000866:	4613      	mov	r3, r2
 8000868:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 800086e:	2307      	movs	r3, #7
 8000870:	813b      	strh	r3, [r7, #8]

			for (k=0;k<HZnum;k++)
 8000872:	2300      	movs	r3, #0
 8000874:	81bb      	strh	r3, [r7, #12]
 8000876:	e07f      	b.n	8000978 <GUI_DrawFont24+0x12c>
			{
			  if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 8000878:	89bb      	ldrh	r3, [r7, #12]
 800087a:	4a4a      	ldr	r2, [pc, #296]	; (80009a4 <GUI_DrawFont24+0x158>)
 800087c:	214a      	movs	r1, #74	; 0x4a
 800087e:	fb01 f303 	mul.w	r3, r1, r3
 8000882:	4413      	add	r3, r2
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	429a      	cmp	r2, r3
 800088c:	d171      	bne.n	8000972 <GUI_DrawFont24+0x126>
 800088e:	89bb      	ldrh	r3, [r7, #12]
 8000890:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <GUI_DrawFont24+0x158>)
 8000892:	214a      	movs	r1, #74	; 0x4a
 8000894:	fb01 f303 	mul.w	r3, r1, r3
 8000898:	4413      	add	r3, r2
 800089a:	3301      	adds	r3, #1
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	3301      	adds	r3, #1
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d164      	bne.n	8000972 <GUI_DrawFont24+0x126>
			  { 	LCD_SetWindows(x,y,x+24-1,y+24-1);
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	3317      	adds	r3, #23
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	3317      	adds	r3, #23
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	88b9      	ldrh	r1, [r7, #4]
 80008b6:	88f8      	ldrh	r0, [r7, #6]
 80008b8:	f000 fc90 	bl	80011dc <LCD_SetWindows>
				    for(i=0;i<24*3;i++)
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e054      	b.n	800096c <GUI_DrawFont24+0x120>
				    {
							for(j=0;j<8;j++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	73bb      	strb	r3, [r7, #14]
 80008c6:	e04b      	b.n	8000960 <GUI_DrawFont24+0x114>
							{
								if(!mode) //�ǵ��ӷ�ʽ
 80008c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d11b      	bne.n	8000908 <GUI_DrawFont24+0xbc>
								{
									if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 80008d0:	89ba      	ldrh	r2, [r7, #12]
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	4933      	ldr	r1, [pc, #204]	; (80009a4 <GUI_DrawFont24+0x158>)
 80008d6:	204a      	movs	r0, #74	; 0x4a
 80008d8:	fb00 f202 	mul.w	r2, r0, r2
 80008dc:	440a      	add	r2, r1
 80008de:	4413      	add	r3, r2
 80008e0:	3302      	adds	r3, #2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	7bbb      	ldrb	r3, [r7, #14]
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	fa42 f303 	asr.w	r3, r2, r3
 80008ee:	400b      	ands	r3, r1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d004      	beq.n	80008fe <GUI_DrawFont24+0xb2>
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fa7c 	bl	8000df4 <Lcd_WriteData_16Bit>
 80008fc:	e02d      	b.n	800095a <GUI_DrawFont24+0x10e>
									else Lcd_WriteData_16Bit(bc);
 80008fe:	883b      	ldrh	r3, [r7, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fa77 	bl	8000df4 <Lcd_WriteData_16Bit>
 8000906:	e028      	b.n	800095a <GUI_DrawFont24+0x10e>
								}
							else
							{
								POINT_COLOR=fc;
 8000908:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <GUI_DrawFont24+0x15c>)
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	8013      	strh	r3, [r2, #0]
								if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 800090e:	89ba      	ldrh	r2, [r7, #12]
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	4924      	ldr	r1, [pc, #144]	; (80009a4 <GUI_DrawFont24+0x158>)
 8000914:	204a      	movs	r0, #74	; 0x4a
 8000916:	fb00 f202 	mul.w	r2, r0, r2
 800091a:	440a      	add	r2, r1
 800091c:	4413      	add	r3, r2
 800091e:	3302      	adds	r3, #2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4619      	mov	r1, r3
 8000924:	7bbb      	ldrb	r3, [r7, #14]
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	fa42 f303 	asr.w	r3, r2, r3
 800092c:	400b      	ands	r3, r1
 800092e:	2b00      	cmp	r3, #0
 8000930:	d005      	beq.n	800093e <GUI_DrawFont24+0xf2>
 8000932:	88ba      	ldrh	r2, [r7, #4]
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fa85 	bl	8000e48 <LCD_DrawPoint>
								x++;
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	3301      	adds	r3, #1
 8000942:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==24)
 8000944:	88fa      	ldrh	r2, [r7, #6]
 8000946:	897b      	ldrh	r3, [r7, #10]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	2b18      	cmp	r3, #24
 800094c:	d105      	bne.n	800095a <GUI_DrawFont24+0x10e>
								{
									x=x0;
 800094e:	897b      	ldrh	r3, [r7, #10]
 8000950:	80fb      	strh	r3, [r7, #6]
									y++;
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	3301      	adds	r3, #1
 8000956:	80bb      	strh	r3, [r7, #4]
									break;
 8000958:	e005      	b.n	8000966 <GUI_DrawFont24+0x11a>
							for(j=0;j<8;j++)
 800095a:	7bbb      	ldrb	r3, [r7, #14]
 800095c:	3301      	adds	r3, #1
 800095e:	73bb      	strb	r3, [r7, #14]
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	2b07      	cmp	r3, #7
 8000964:	d9b0      	bls.n	80008c8 <GUI_DrawFont24+0x7c>
				    for(i=0;i<24*3;i++)
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	3301      	adds	r3, #1
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	2b47      	cmp	r3, #71	; 0x47
 8000970:	d9a7      	bls.n	80008c2 <GUI_DrawFont24+0x76>
			for (k=0;k<HZnum;k++)
 8000972:	89bb      	ldrh	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	81bb      	strh	r3, [r7, #12]
 8000978:	89ba      	ldrh	r2, [r7, #12]
 800097a:	893b      	ldrh	r3, [r7, #8]
 800097c:	429a      	cmp	r2, r3
 800097e:	f4ff af7b 	bcc.w	8000878 <GUI_DrawFont24+0x2c>

				}
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <GUI_DrawFont24+0x160>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	3b01      	subs	r3, #1
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <GUI_DrawFont24+0x160>)
 800098c:	885b      	ldrh	r3, [r3, #2]
 800098e:	3b01      	subs	r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	2100      	movs	r1, #0
 8000994:	2000      	movs	r0, #0
 8000996:	f000 fc21 	bl	80011dc <LCD_SetWindows>
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	bf00      	nop
 80009a4:	0800a6b4 	.word	0x0800a6b4
 80009a8:	240000a2 	.word	0x240000a2
 80009ac:	24000094 	.word	0x24000094

080009b0 <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4604      	mov	r4, r0
 80009b8:	4608      	mov	r0, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4623      	mov	r3, r4
 80009c0:	80fb      	strh	r3, [r7, #6]
 80009c2:	4603      	mov	r3, r0
 80009c4:	80bb      	strh	r3, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	807b      	strh	r3, [r7, #2]
 80009ca:	4613      	mov	r3, r2
 80009cc:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//�Զ�ͳ�ƺ�����Ŀ
 80009d2:	2304      	movs	r3, #4
 80009d4:	813b      	strh	r3, [r7, #8]
	for (k=0;k<HZnum;k++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	81bb      	strh	r3, [r7, #12]
 80009da:	e084      	b.n	8000ae6 <GUI_DrawFont32+0x136>
			{
			  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 80009dc:	89ba      	ldrh	r2, [r7, #12]
 80009de:	494c      	ldr	r1, [pc, #304]	; (8000b10 <GUI_DrawFont32+0x160>)
 80009e0:	4613      	mov	r3, r2
 80009e2:	019b      	lsls	r3, r3, #6
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	440b      	add	r3, r1
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d175      	bne.n	8000ae0 <GUI_DrawFont32+0x130>
 80009f4:	89ba      	ldrh	r2, [r7, #12]
 80009f6:	4946      	ldr	r1, [pc, #280]	; (8000b10 <GUI_DrawFont32+0x160>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	019b      	lsls	r3, r3, #6
 80009fc:	4413      	add	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	440b      	add	r3, r1
 8000a02:	3301      	adds	r3, #1
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	6a3b      	ldr	r3, [r7, #32]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d167      	bne.n	8000ae0 <GUI_DrawFont32+0x130>
			  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	331f      	adds	r3, #31
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	331f      	adds	r3, #31
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	88b9      	ldrh	r1, [r7, #4]
 8000a1e:	88f8      	ldrh	r0, [r7, #6]
 8000a20:	f000 fbdc 	bl	80011dc <LCD_SetWindows>
				    for(i=0;i<32*4;i++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e056      	b.n	8000ad8 <GUI_DrawFont32+0x128>
				    {
						for(j=0;j<8;j++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73bb      	strb	r3, [r7, #14]
 8000a2e:	e04d      	b.n	8000acc <GUI_DrawFont32+0x11c>
				    	{
							if(!mode) //�ǵ��ӷ�ʽ
 8000a30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11c      	bne.n	8000a72 <GUI_DrawFont32+0xc2>
							{
								if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8000a38:	89ba      	ldrh	r2, [r7, #12]
 8000a3a:	7bf9      	ldrb	r1, [r7, #15]
 8000a3c:	4834      	ldr	r0, [pc, #208]	; (8000b10 <GUI_DrawFont32+0x160>)
 8000a3e:	4613      	mov	r3, r2
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	4413      	add	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4403      	add	r3, r0
 8000a48:	440b      	add	r3, r1
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	7bbb      	ldrb	r3, [r7, #14]
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	fa42 f303 	asr.w	r3, r2, r3
 8000a58:	400b      	ands	r3, r1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <GUI_DrawFont32+0xb8>
 8000a5e:	887b      	ldrh	r3, [r7, #2]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f9c7 	bl	8000df4 <Lcd_WriteData_16Bit>
 8000a66:	e02e      	b.n	8000ac6 <GUI_DrawFont32+0x116>
								else Lcd_WriteData_16Bit(bc);
 8000a68:	883b      	ldrh	r3, [r7, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f9c2 	bl	8000df4 <Lcd_WriteData_16Bit>
 8000a70:	e029      	b.n	8000ac6 <GUI_DrawFont32+0x116>
							}
							else
							{
								POINT_COLOR=fc;
 8000a72:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <GUI_DrawFont32+0x164>)
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	8013      	strh	r3, [r2, #0]
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8000a78:	89ba      	ldrh	r2, [r7, #12]
 8000a7a:	7bf9      	ldrb	r1, [r7, #15]
 8000a7c:	4824      	ldr	r0, [pc, #144]	; (8000b10 <GUI_DrawFont32+0x160>)
 8000a7e:	4613      	mov	r3, r2
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4403      	add	r3, r0
 8000a88:	440b      	add	r3, r1
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	fa42 f303 	asr.w	r3, r2, r3
 8000a98:	400b      	ands	r3, r1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d005      	beq.n	8000aaa <GUI_DrawFont32+0xfa>
 8000a9e:	88ba      	ldrh	r2, [r7, #4]
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f9cf 	bl	8000e48 <LCD_DrawPoint>
								x++;
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	3301      	adds	r3, #1
 8000aae:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==32)
 8000ab0:	88fa      	ldrh	r2, [r7, #6]
 8000ab2:	897b      	ldrh	r3, [r7, #10]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b20      	cmp	r3, #32
 8000ab8:	d105      	bne.n	8000ac6 <GUI_DrawFont32+0x116>
								{
									x=x0;
 8000aba:	897b      	ldrh	r3, [r7, #10]
 8000abc:	80fb      	strh	r3, [r7, #6]
									y++;
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	80bb      	strh	r3, [r7, #4]
									break;
 8000ac4:	e005      	b.n	8000ad2 <GUI_DrawFont32+0x122>
						for(j=0;j<8;j++)
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	73bb      	strb	r3, [r7, #14]
 8000acc:	7bbb      	ldrb	r3, [r7, #14]
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	d9ae      	bls.n	8000a30 <GUI_DrawFont32+0x80>
				    for(i=0;i<32*4;i++)
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	daa4      	bge.n	8000a2a <GUI_DrawFont32+0x7a>
	for (k=0;k<HZnum;k++)
 8000ae0:	89bb      	ldrh	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	81bb      	strh	r3, [r7, #12]
 8000ae6:	89ba      	ldrh	r2, [r7, #12]
 8000ae8:	893b      	ldrh	r3, [r7, #8]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	f4ff af76 	bcc.w	80009dc <GUI_DrawFont32+0x2c>

				}
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <GUI_DrawFont32+0x168>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <GUI_DrawFont32+0x168>)
 8000afa:	885b      	ldrh	r3, [r3, #2]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	2100      	movs	r1, #0
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 fb6a 	bl	80011dc <LCD_SetWindows>
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	0800a8bc 	.word	0x0800a8bc
 8000b14:	240000a2 	.word	0x240000a2
 8000b18:	24000094 	.word	0x24000094

08000b1c <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af04      	add	r7, sp, #16
 8000b22:	4604      	mov	r4, r0
 8000b24:	4608      	mov	r0, r1
 8000b26:	4611      	mov	r1, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	80fb      	strh	r3, [r7, #6]
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	807b      	strh	r3, [r7, #2]
 8000b36:	4613      	mov	r3, r2
 8000b38:	803b      	strh	r3, [r7, #0]
	u16 x0=x;
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ���������
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 8000b42:	e0af      	b.n	8000ca4 <Show_Str+0x188>
    {
        if(!bHz)
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d161      	bne.n	8000c0e <Show_Str+0xf2>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	4b5b      	ldr	r3, [pc, #364]	; (8000cbc <Show_Str+0x1a0>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b56:	085b      	lsrs	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	1acb      	subs	r3, r1, r3
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	f300 80a7 	bgt.w	8000cb0 <Show_Str+0x194>
 8000b62:	88ba      	ldrh	r2, [r7, #4]
 8000b64:	4b55      	ldr	r3, [pc, #340]	; (8000cbc <Show_Str+0x1a0>)
 8000b66:	885b      	ldrh	r3, [r3, #2]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b6e:	1acb      	subs	r3, r1, r3
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f300 809d 	bgt.w	8000cb0 <Show_Str+0x194>
			return;
	        if(*str>0x80)bHz=1;//����
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b80      	cmp	r3, #128	; 0x80
 8000b7c:	d902      	bls.n	8000b84 <Show_Str+0x68>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e08f      	b.n	8000ca4 <Show_Str+0x188>
	        else              //�ַ�
	        {
		        if(*str==0x0D)//���з���
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b0d      	cmp	r3, #13
 8000b8a:	d10b      	bne.n	8000ba4 <Show_Str+0x88>
		        {
		            y+=size;
 8000b8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8000b98:	89bb      	ldrh	r3, [r7, #12]
 8000b9a:	80fb      	strh	r3, [r7, #6]
		            str++;
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
 8000ba2:	e030      	b.n	8000c06 <Show_Str+0xea>
		        }
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8000ba4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ba8:	2b10      	cmp	r3, #16
 8000baa:	d913      	bls.n	8000bd4 <Show_Str+0xb8>
					{
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	883d      	ldrh	r5, [r7, #0]
 8000bb2:	887c      	ldrh	r4, [r7, #2]
 8000bb4:	88b9      	ldrh	r1, [r7, #4]
 8000bb6:	88f8      	ldrh	r0, [r7, #6]
 8000bb8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000bbc:	9202      	str	r2, [sp, #8]
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	9201      	str	r2, [sp, #4]
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	462b      	mov	r3, r5
 8000bc6:	4622      	mov	r2, r4
 8000bc8:	f7ff fcae 	bl	8000528 <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ��
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	3308      	adds	r3, #8
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	e018      	b.n	8000c06 <Show_Str+0xea>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	883d      	ldrh	r5, [r7, #0]
 8000bda:	887c      	ldrh	r4, [r7, #2]
 8000bdc:	88b9      	ldrh	r1, [r7, #4]
 8000bde:	88f8      	ldrh	r0, [r7, #6]
 8000be0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000be4:	9202      	str	r2, [sp, #8]
 8000be6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000bea:	9201      	str	r2, [sp, #4]
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	462b      	mov	r3, r5
 8000bf0:	4622      	mov	r2, r4
 8000bf2:	f7ff fc99 	bl	8000528 <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ��
 8000bf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bfa:	085b      	lsrs	r3, r3, #1
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	4413      	add	r3, r2
 8000c04:	80fb      	strh	r3, [r7, #6]
					}
				}
				str++;
 8000c06:	6a3b      	ldr	r3, [r7, #32]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
 8000c0c:	e04a      	b.n	8000ca4 <Show_Str+0x188>

	        }
        }else//����
        {
			if(x>(lcddev.width-size)||y>(lcddev.height-size))
 8000c0e:	88fa      	ldrh	r2, [r7, #6]
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <Show_Str+0x1a0>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c1a:	1acb      	subs	r3, r1, r3
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dc49      	bgt.n	8000cb4 <Show_Str+0x198>
 8000c20:	88ba      	ldrh	r2, [r7, #4]
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <Show_Str+0x1a0>)
 8000c24:	885b      	ldrh	r3, [r3, #2]
 8000c26:	4619      	mov	r1, r3
 8000c28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c2c:	1acb      	subs	r3, r1, r3
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	dc40      	bgt.n	8000cb4 <Show_Str+0x198>
			return;
            bHz=0;//�к��ֿ�
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
			if(size==32)
 8000c36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c3a:	2b20      	cmp	r3, #32
 8000c3c:	d10c      	bne.n	8000c58 <Show_Str+0x13c>
			GUI_DrawFont32(x,y,fc,bc,str,mode);
 8000c3e:	883c      	ldrh	r4, [r7, #0]
 8000c40:	887a      	ldrh	r2, [r7, #2]
 8000c42:	88b9      	ldrh	r1, [r7, #4]
 8000c44:	88f8      	ldrh	r0, [r7, #6]
 8000c46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	4623      	mov	r3, r4
 8000c52:	f7ff fead 	bl	80009b0 <GUI_DrawFont32>
 8000c56:	e01c      	b.n	8000c92 <Show_Str+0x176>
			else if(size==24)
 8000c58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c5c:	2b18      	cmp	r3, #24
 8000c5e:	d10c      	bne.n	8000c7a <Show_Str+0x15e>
			GUI_DrawFont24(x,y,fc,bc,str,mode);
 8000c60:	883c      	ldrh	r4, [r7, #0]
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	88b9      	ldrh	r1, [r7, #4]
 8000c66:	88f8      	ldrh	r0, [r7, #6]
 8000c68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	4623      	mov	r3, r4
 8000c74:	f7ff fdea 	bl	800084c <GUI_DrawFont24>
 8000c78:	e00b      	b.n	8000c92 <Show_Str+0x176>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 8000c7a:	883c      	ldrh	r4, [r7, #0]
 8000c7c:	887a      	ldrh	r2, [r7, #2]
 8000c7e:	88b9      	ldrh	r1, [r7, #4]
 8000c80:	88f8      	ldrh	r0, [r7, #6]
 8000c82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	4623      	mov	r3, r4
 8000c8e:	f7ff fd27 	bl	80006e0 <GUI_DrawFont16>

	        str+=2;
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	3302      	adds	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
	        x+=size;//��һ������ƫ��
 8000c98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	80fb      	strh	r3, [r7, #6]
    while(*str!=0)//����δ����
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f47f af4b 	bne.w	8000b44 <Show_Str+0x28>
 8000cae:	e002      	b.n	8000cb6 <Show_Str+0x19a>
			return;
 8000cb0:	bf00      	nop
 8000cb2:	e000      	b.n	8000cb6 <Show_Str+0x19a>
			return;
 8000cb4:	bf00      	nop
        }
    }
}
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bdb0      	pop	{r4, r5, r7, pc}
 8000cbc:	24000094 	.word	0x24000094

08000cc0 <Gui_StrCenter>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Gui_StrCenter(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4611      	mov	r1, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4623      	mov	r3, r4
 8000cd0:	80fb      	strh	r3, [r7, #6]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80bb      	strh	r3, [r7, #4]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	807b      	strh	r3, [r7, #2]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	803b      	strh	r3, [r7, #0]
	u16 len=strlen((const char *)str);
 8000cde:	6a38      	ldr	r0, [r7, #32]
 8000ce0:	f7ff fafe 	bl	80002e0 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	81fb      	strh	r3, [r7, #14]
	u16 x1=(lcddev.width-len*8)/2;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <Gui_StrCenter+0x64>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da00      	bge.n	8000cfa <Gui_StrCenter+0x3a>
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	105b      	asrs	r3, r3, #1
 8000cfc:	81bb      	strh	r3, [r7, #12]
	Show_Str(x1,y,fc,bc,str,size,mode);
 8000cfe:	883c      	ldrh	r4, [r7, #0]
 8000d00:	887a      	ldrh	r2, [r7, #2]
 8000d02:	88b9      	ldrh	r1, [r7, #4]
 8000d04:	89b8      	ldrh	r0, [r7, #12]
 8000d06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	4623      	mov	r3, r4
 8000d18:	f7ff ff00 	bl	8000b1c <Show_Str>
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	24000094 	.word	0x24000094

08000d28 <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <LCD_WR_REG+0x40>)
 8000d3a:	f001 faf5 	bl	8002328 <HAL_GPIO_WritePin>
	 LCD_RS_CLR;
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d44:	4808      	ldr	r0, [pc, #32]	; (8000d68 <LCD_WR_REG+0x40>)
 8000d46:	f001 faef 	bl	8002328 <HAL_GPIO_WritePin>
   SPIv_WriteData(data);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fdbd 	bl	80018cc <SPIv_WriteData>
   LCD_CS_SET;
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <LCD_WR_REG+0x40>)
 8000d5a:	f001 fae5 	bl	8002328 <HAL_GPIO_WritePin>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	58021000 	.word	0x58021000

08000d6c <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LCD_WR_DATA+0x40>)
 8000d7e:	f001 fad3 	bl	8002328 <HAL_GPIO_WritePin>
	 LCD_RS_SET;
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <LCD_WR_DATA+0x40>)
 8000d8a:	f001 facd 	bl	8002328 <HAL_GPIO_WritePin>
   SPIv_WriteData(data);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fd9b 	bl	80018cc <SPIv_WriteData>
   LCD_CS_SET;
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LCD_WR_DATA+0x40>)
 8000d9e:	f001 fac3 	bl	8002328 <HAL_GPIO_WritePin>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58021000 	.word	0x58021000

08000db0 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	460a      	mov	r2, r1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ffb0 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000dc8:	88bb      	ldrh	r3, [r7, #4]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ffcd 	bl	8000d6c <LCD_WR_DATA>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_WriteRAM_Prepare(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <LCD_WriteRAM_Prepare+0x14>)
 8000de2:	891b      	ldrh	r3, [r3, #8]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff9e 	bl	8000d28 <LCD_WR_REG>
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000094 	.word	0x24000094

08000df4 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/
void Lcd_WriteData_16Bit(u16 Data)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
   LCD_CS_CLR;
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e04:	480f      	ldr	r0, [pc, #60]	; (8000e44 <Lcd_WriteData_16Bit+0x50>)
 8000e06:	f001 fa8f 	bl	8002328 <HAL_GPIO_WritePin>
   LCD_RS_SET;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <Lcd_WriteData_16Bit+0x50>)
 8000e12:	f001 fa89 	bl	8002328 <HAL_GPIO_WritePin>
   SPIv_WriteData(Data>>8);
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fd54 	bl	80018cc <SPIv_WriteData>
	 SPIv_WriteData(Data);
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fd4f 	bl	80018cc <SPIv_WriteData>
   LCD_CS_SET;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <Lcd_WriteData_16Bit+0x50>)
 8000e36:	f001 fa77 	bl	8002328 <HAL_GPIO_WritePin>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	58021000 	.word	0x58021000

08000e48 <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_DrawPoint(u16 x,u16 y)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	80fb      	strh	r3, [r7, #6]
 8000e54:	4613      	mov	r3, r2
 8000e56:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ��
 8000e58:	88ba      	ldrh	r2, [r7, #4]
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fa10 	bl	8001284 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR);
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <LCD_DrawPoint+0x30>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffc3 	bl	8000df4 <Lcd_WriteData_16Bit>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	240000a2 	.word	0x240000a2

08000e7c <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/
void LCD_Clear(u16 Color)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <LCD_Clear+0x98>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <LCD_Clear+0x98>)
 8000e90:	885b      	ldrh	r3, [r3, #2]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f99f 	bl	80011dc <LCD_SetWindows>
	LCD_CS_CLR;
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea4:	481c      	ldr	r0, [pc, #112]	; (8000f18 <LCD_Clear+0x9c>)
 8000ea6:	f001 fa3f 	bl	8002328 <HAL_GPIO_WritePin>
	LCD_RS_SET;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb0:	4819      	ldr	r0, [pc, #100]	; (8000f18 <LCD_Clear+0x9c>)
 8000eb2:	f001 fa39 	bl	8002328 <HAL_GPIO_WritePin>
	for(i=0;i<lcddev.height;i++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	e01a      	b.n	8000ef2 <LCD_Clear+0x76>
	{
    for(m=0;m<lcddev.width;m++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	e00e      	b.n	8000ee0 <LCD_Clear+0x64>
    {
		SPIv_WriteData(Color>>8);
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fcfe 	bl	80018cc <SPIv_WriteData>
	 	SPIv_WriteData(Color);
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fcf9 	bl	80018cc <SPIv_WriteData>
    for(m=0;m<lcddev.width;m++)
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	3301      	adds	r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LCD_Clear+0x98>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d3ea      	bcc.n	8000ec2 <LCD_Clear+0x46>
	for(i=0;i<lcddev.height;i++)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <LCD_Clear+0x98>)
 8000ef4:	885b      	ldrh	r3, [r3, #2]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d3de      	bcc.n	8000ebc <LCD_Clear+0x40>
		}
	}
	 LCD_CS_SET;
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <LCD_Clear+0x9c>)
 8000f06:	f001 fa0f 	bl	8002328 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24000094 	.word	0x24000094
 8000f18:	58021000 	.word	0x58021000

08000f1c <LCD_GPIOInit>:
 * @function   :Initialization LCD screen GPIO
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_GPIOInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
		    GPIO_InitTypeDef GPIO_Initure;

   // __HAL_RCC_GPIOD_CLK_ENABLE();           //ʹ��GPIODʱ��
   // __HAL_RCC_GPIOB_CLK_ENABLE();           //ʹ��GPIOBʱ��
    __HAL_RCC_GPIOE_CLK_ENABLE();           //ʹ��GPIOBʱ��
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <LCD_GPIOInit+0x7c>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <LCD_GPIOInit+0x7c>)
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <LCD_GPIOInit+0x7c>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0310 	and.w	r3, r3, #16
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]

    //PF6
    GPIO_Initure.Pin=  LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin;         //PF6
 8000f40:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8000f44:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //�������
 8000f46:	2301      	movs	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_VERY_HIGH;     //����
 8000f4e:	2303      	movs	r3, #3
 8000f50:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOD,&GPIO_Initure);     //��ʼ��
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4811      	ldr	r0, [pc, #68]	; (8000f9c <LCD_GPIOInit+0x80>)
 8000f58:	f001 f81e 	bl	8001f98 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8000f62:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <LCD_GPIOInit+0x84>)
 8000f64:	f001 f9e0 	bl	8002328 <HAL_GPIO_WritePin>

		GPIO_Initure.Pin=GPIO_PIN_12| GPIO_PIN_14;            //PF6
 8000f68:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000f6c:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //�������
 8000f6e:	2301      	movs	r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 8000f72:	2301      	movs	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_VERY_HIGH;     //����
 8000f76:	2303      	movs	r3, #3
 8000f78:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOE,&GPIO_Initure);     //��ʼ��
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <LCD_GPIOInit+0x84>)
 8000f80:	f001 f80a 	bl	8001f98 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12| GPIO_PIN_14,GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <LCD_GPIOInit+0x84>)
 8000f8c:	f001 f9cc 	bl	8002328 <HAL_GPIO_WritePin>

		//GPIO_Initure.Pin=GPIO_PIN_14;
		//GPIO_Initure.Mode=GPIO_MODE_INPUT;  //�������
		//HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //��ʼ��
		//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020c00 	.word	0x58020c00
 8000fa0:	58021000 	.word	0x58021000

08000fa4 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_RESET(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <LCD_RESET+0x2c>)
 8000fb0:	f001 f9ba 	bl	8002328 <HAL_GPIO_WritePin>
	delay_ms(100);
 8000fb4:	2064      	movs	r0, #100	; 0x64
 8000fb6:	f7ff fa29 	bl	800040c <delay_ms>
	LCD_RST_SET;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <LCD_RESET+0x2c>)
 8000fc2:	f001 f9b1 	bl	8002328 <HAL_GPIO_WritePin>
	delay_ms(50);
 8000fc6:	2032      	movs	r0, #50	; 0x32
 8000fc8:	f7ff fa20 	bl	800040c <delay_ms>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	58021000 	.word	0x58021000

08000fd4 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	LCD_GPIOInit();//LCD GPIO��ʼ��
 8000fd8:	f7ff ffa0 	bl	8000f1c <LCD_GPIOInit>
 	LCD_RESET(); //LCD ��λ
 8000fdc:	f7ff ffe2 	bl	8000fa4 <LCD_RESET>
//************* ST7796S��ʼ��**********//
	LCD_WR_REG(0xF0);
 8000fe0:	20f0      	movs	r0, #240	; 0xf0
 8000fe2:	f7ff fea1 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0xC3);
 8000fe6:	20c3      	movs	r0, #195	; 0xc3
 8000fe8:	f7ff fec0 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xF0);
 8000fec:	20f0      	movs	r0, #240	; 0xf0
 8000fee:	f7ff fe9b 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x96);
 8000ff2:	2096      	movs	r0, #150	; 0x96
 8000ff4:	f7ff feba 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0x36);
 8000ff8:	2036      	movs	r0, #54	; 0x36
 8000ffa:	f7ff fe95 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x68);
 8000ffe:	2068      	movs	r0, #104	; 0x68
 8001000:	f7ff feb4 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001004:	203a      	movs	r0, #58	; 0x3a
 8001006:	f7ff fe8f 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x05);
 800100a:	2005      	movs	r0, #5
 800100c:	f7ff feae 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xB0);
 8001010:	20b0      	movs	r0, #176	; 0xb0
 8001012:	f7ff fe89 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x80);
 8001016:	2080      	movs	r0, #128	; 0x80
 8001018:	f7ff fea8 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);
 800101c:	20b6      	movs	r0, #182	; 0xb6
 800101e:	f7ff fe83 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff fea2 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001028:	2002      	movs	r0, #2
 800102a:	f7ff fe9f 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xB5);
 800102e:	20b5      	movs	r0, #181	; 0xb5
 8001030:	f7ff fe7a 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x02);
 8001034:	2002      	movs	r0, #2
 8001036:	f7ff fe99 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800103a:	2003      	movs	r0, #3
 800103c:	f7ff fe96 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fe93 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8001046:	2004      	movs	r0, #4
 8001048:	f7ff fe90 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800104c:	20b1      	movs	r0, #177	; 0xb1
 800104e:	f7ff fe6b 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x80);
 8001052:	2080      	movs	r0, #128	; 0x80
 8001054:	f7ff fe8a 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001058:	2010      	movs	r0, #16
 800105a:	f7ff fe87 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xB4);
 800105e:	20b4      	movs	r0, #180	; 0xb4
 8001060:	f7ff fe62 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fe81 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xB7);
 800106a:	20b7      	movs	r0, #183	; 0xb7
 800106c:	f7ff fe5c 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0xC6);
 8001070:	20c6      	movs	r0, #198	; 0xc6
 8001072:	f7ff fe7b 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);
 8001076:	20c5      	movs	r0, #197	; 0xc5
 8001078:	f7ff fe56 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x24);
 800107c:	2024      	movs	r0, #36	; 0x24
 800107e:	f7ff fe75 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xE4);
 8001082:	20e4      	movs	r0, #228	; 0xe4
 8001084:	f7ff fe50 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x31);
 8001088:	2031      	movs	r0, #49	; 0x31
 800108a:	f7ff fe6f 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800108e:	20e8      	movs	r0, #232	; 0xe8
 8001090:	f7ff fe4a 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x40);
 8001094:	2040      	movs	r0, #64	; 0x40
 8001096:	f7ff fe69 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x8A);
 800109a:	208a      	movs	r0, #138	; 0x8a
 800109c:	f7ff fe66 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fe63 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fe60 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x29);
 80010ac:	2029      	movs	r0, #41	; 0x29
 80010ae:	f7ff fe5d 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x19);
 80010b2:	2019      	movs	r0, #25
 80010b4:	f7ff fe5a 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0xA5);
 80010b8:	20a5      	movs	r0, #165	; 0xa5
 80010ba:	f7ff fe57 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x33);
 80010be:	2033      	movs	r0, #51	; 0x33
 80010c0:	f7ff fe54 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xC2);
 80010c4:	20c2      	movs	r0, #194	; 0xc2
 80010c6:	f7ff fe2f 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_REG(0xA7);
 80010ca:	20a7      	movs	r0, #167	; 0xa7
 80010cc:	f7ff fe2c 	bl	8000d28 <LCD_WR_REG>

	LCD_WR_REG(0xE0);
 80010d0:	20e0      	movs	r0, #224	; 0xe0
 80010d2:	f7ff fe29 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0xF0);
 80010d6:	20f0      	movs	r0, #240	; 0xf0
 80010d8:	f7ff fe48 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 80010dc:	2009      	movs	r0, #9
 80010de:	f7ff fe45 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x13);
 80010e2:	2013      	movs	r0, #19
 80010e4:	f7ff fe42 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 80010e8:	2012      	movs	r0, #18
 80010ea:	f7ff fe3f 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 80010ee:	2012      	movs	r0, #18
 80010f0:	f7ff fe3c 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80010f4:	202b      	movs	r0, #43	; 0x2b
 80010f6:	f7ff fe39 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80010fa:	203c      	movs	r0, #60	; 0x3c
 80010fc:	f7ff fe36 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x44);
 8001100:	2044      	movs	r0, #68	; 0x44
 8001102:	f7ff fe33 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x4B);
 8001106:	204b      	movs	r0, #75	; 0x4b
 8001108:	f7ff fe30 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x1B);
 800110c:	201b      	movs	r0, #27
 800110e:	f7ff fe2d 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 8001112:	2018      	movs	r0, #24
 8001114:	f7ff fe2a 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001118:	2017      	movs	r0, #23
 800111a:	f7ff fe27 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x1D);
 800111e:	201d      	movs	r0, #29
 8001120:	f7ff fe24 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x21);
 8001124:	2021      	movs	r0, #33	; 0x21
 8001126:	f7ff fe21 	bl	8000d6c <LCD_WR_DATA>

	LCD_WR_REG(0XE1);
 800112a:	20e1      	movs	r0, #225	; 0xe1
 800112c:	f7ff fdfc 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0xF0);
 8001130:	20f0      	movs	r0, #240	; 0xf0
 8001132:	f7ff fe1b 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8001136:	2009      	movs	r0, #9
 8001138:	f7ff fe18 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x13);
 800113c:	2013      	movs	r0, #19
 800113e:	f7ff fe15 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8001142:	200c      	movs	r0, #12
 8001144:	f7ff fe12 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 8001148:	200d      	movs	r0, #13
 800114a:	f7ff fe0f 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x27);
 800114e:	2027      	movs	r0, #39	; 0x27
 8001150:	f7ff fe0c 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x3B);
 8001154:	203b      	movs	r0, #59	; 0x3b
 8001156:	f7ff fe09 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x44);
 800115a:	2044      	movs	r0, #68	; 0x44
 800115c:	f7ff fe06 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x4D);
 8001160:	204d      	movs	r0, #77	; 0x4d
 8001162:	f7ff fe03 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x0B);
 8001166:	200b      	movs	r0, #11
 8001168:	f7ff fe00 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800116c:	2017      	movs	r0, #23
 800116e:	f7ff fdfd 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001172:	2017      	movs	r0, #23
 8001174:	f7ff fdfa 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x1D);
 8001178:	201d      	movs	r0, #29
 800117a:	f7ff fdf7 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x21);
 800117e:	2021      	movs	r0, #33	; 0x21
 8001180:	f7ff fdf4 	bl	8000d6c <LCD_WR_DATA>

  LCD_WR_REG(0X36);
 8001184:	2036      	movs	r0, #54	; 0x36
 8001186:	f7ff fdcf 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0xEC);
 800118a:	20ec      	movs	r0, #236	; 0xec
 800118c:	f7ff fdee 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xF0);
 8001190:	20f0      	movs	r0, #240	; 0xf0
 8001192:	f7ff fdc9 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0xC3);
 8001196:	20c3      	movs	r0, #195	; 0xc3
 8001198:	f7ff fde8 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0xF0);
 800119c:	20f0      	movs	r0, #240	; 0xf0
 800119e:	f7ff fdc3 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(0x69);
 80011a2:	2069      	movs	r0, #105	; 0x69
 80011a4:	f7ff fde2 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_REG(0X13);
 80011a8:	2013      	movs	r0, #19
 80011aa:	f7ff fdbd 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_REG(0X11);
 80011ae:	2011      	movs	r0, #17
 80011b0:	f7ff fdba 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_REG(0X29);
 80011b4:	2029      	movs	r0, #41	; 0x29
 80011b6:	f7ff fdb7 	bl	8000d28 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f874 	bl	80012a8 <LCD_direction>
	LCD_LED(1);//��������
 80011c0:	2201      	movs	r2, #1
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <LCD_Init+0x204>)
 80011c6:	f001 f8af 	bl	8002328 <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);//��ȫ����ɫ
 80011ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011ce:	f7ff fe55 	bl	8000e7c <LCD_Clear>
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	58020c00 	.word	0x58020c00

080011dc <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4604      	mov	r4, r0
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4623      	mov	r3, r4
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	4603      	mov	r3, r0
 80011f0:	80bb      	strh	r3, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]
 80011f6:	4613      	mov	r3, r2
 80011f8:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <LCD_SetWindows+0xa4>)
 80011fc:	895b      	ldrh	r3, [r3, #10]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fd91 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	b29b      	uxth	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fdac 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fda7 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fda0 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fd9b 	bl	8000d6c <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <LCD_SetWindows+0xa4>)
 8001238:	899b      	ldrh	r3, [r3, #12]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fd73 	bl	8000d28 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	b29b      	uxth	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd8e 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);
 8001250:	88bb      	ldrh	r3, [r7, #4]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fd89 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 800125a:	883b      	ldrh	r3, [r7, #0]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	b29b      	uxth	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fd82 	bl	8000d6c <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 8001268:	883b      	ldrh	r3, [r7, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fd7d 	bl	8000d6c <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM
 8001272:	f7ff fdb3 	bl	8000ddc <LCD_WriteRAM_Prepare>
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	bf00      	nop
 8001280:	24000094 	.word	0x24000094

08001284 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	80fb      	strh	r3, [r7, #6]
 8001290:	4613      	mov	r3, r2
 8001292:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	88fa      	ldrh	r2, [r7, #6]
 8001298:	88b9      	ldrh	r1, [r7, #4]
 800129a:	88f8      	ldrh	r0, [r7, #6]
 800129c:	f7ff ff9e 	bl	80011dc <LCD_SetWindows>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/
void LCD_direction(u8 direction)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	lcddev.setxcmd=0x2A;
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <LCD_direction+0xac>)
 80012b4:	222a      	movs	r2, #42	; 0x2a
 80012b6:	815a      	strh	r2, [r3, #10]
	lcddev.setycmd=0x2B;
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <LCD_direction+0xac>)
 80012ba:	222b      	movs	r2, #43	; 0x2b
 80012bc:	819a      	strh	r2, [r3, #12]
	lcddev.wramcmd=0x2C;
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <LCD_direction+0xac>)
 80012c0:	222c      	movs	r2, #44	; 0x2c
 80012c2:	811a      	strh	r2, [r3, #8]
	switch(direction){
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d83e      	bhi.n	8001348 <LCD_direction+0xa0>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <LCD_direction+0x28>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	080012fb 	.word	0x080012fb
 80012d8:	08001315 	.word	0x08001315
 80012dc:	0800132f 	.word	0x0800132f
		case 0:
			lcddev.width=LCD_W;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <LCD_direction+0xac>)
 80012e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012e6:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <LCD_direction+0xac>)
 80012ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012ee:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6));
 80012f0:	2148      	movs	r1, #72	; 0x48
 80012f2:	2036      	movs	r0, #54	; 0x36
 80012f4:	f7ff fd5c 	bl	8000db0 <LCD_WriteReg>
		break;
 80012f8:	e027      	b.n	800134a <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <LCD_direction+0xac>)
 80012fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001300:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <LCD_direction+0xac>)
 8001304:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001308:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5));
 800130a:	2128      	movs	r1, #40	; 0x28
 800130c:	2036      	movs	r0, #54	; 0x36
 800130e:	f7ff fd4f 	bl	8000db0 <LCD_WriteReg>
		break;
 8001312:	e01a      	b.n	800134a <LCD_direction+0xa2>
		case 2:
			lcddev.width=LCD_W;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <LCD_direction+0xac>)
 8001316:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800131a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <LCD_direction+0xac>)
 800131e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001322:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7));
 8001324:	2188      	movs	r1, #136	; 0x88
 8001326:	2036      	movs	r0, #54	; 0x36
 8001328:	f7ff fd42 	bl	8000db0 <LCD_WriteReg>
		break;
 800132c:	e00d      	b.n	800134a <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <LCD_direction+0xac>)
 8001330:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001334:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <LCD_direction+0xac>)
 8001338:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800133c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<6)|(1<<5));
 800133e:	21e8      	movs	r1, #232	; 0xe8
 8001340:	2036      	movs	r0, #54	; 0x36
 8001342:	f7ff fd35 	bl	8000db0 <LCD_WriteReg>
		break;
 8001346:	e000      	b.n	800134a <LCD_direction+0xa2>
		default:break;
 8001348:	bf00      	nop
	}
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	24000094 	.word	0x24000094

08001358 <delay_us1>:
/* USER CODE BEGIN 0 */

static uint8_t GAIN;	//Gain for clock cycles.

void delay_us1 (uint16_t us) //delay function
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
__HAL_TIM_SET_COUNTER(&htim1,0);  // setting the delay counter to 0.
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <delay_us1+0x30>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // while loop till the counter reaches the delay given (us).
 800136a:	bf00      	nop
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <delay_us1+0x30>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	429a      	cmp	r2, r3
 8001376:	d3f9      	bcc.n	800136c <delay_us1+0x14>
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	2400014c 	.word	0x2400014c

0800138c <hx711_powerUp>:

void hx711_powerUp(void) //Power up function
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //writing to the pin and setting it to 0.
 8001390:	2200      	movs	r2, #0
 8001392:	2110      	movs	r1, #16
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <hx711_powerUp+0x14>)
 8001396:	f000 ffc7 	bl	8002328 <HAL_GPIO_WritePin>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	58020000 	.word	0x58020000

080013a4 <hx711_setGain>:
void hx711_setGain(uint8_t gain)  //the values should be 32, 64 or 128
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	if(gain < 64) GAIN = 2; //32, channel B
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b3f      	cmp	r3, #63	; 0x3f
 80013b2:	d803      	bhi.n	80013bc <hx711_setGain+0x18>
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <hx711_setGain+0x3c>)
 80013b6:	2202      	movs	r2, #2
 80013b8:	701a      	strb	r2, [r3, #0]
	else if(gain < 128) GAIN = 3; //64, channel A
	else GAIN = 1; //128, channel A
}
 80013ba:	e00a      	b.n	80013d2 <hx711_setGain+0x2e>
	else if(gain < 128) GAIN = 3; //64, channel A
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db03      	blt.n	80013cc <hx711_setGain+0x28>
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <hx711_setGain+0x3c>)
 80013c6:	2203      	movs	r2, #3
 80013c8:	701a      	strb	r2, [r3, #0]
}
 80013ca:	e002      	b.n	80013d2 <hx711_setGain+0x2e>
	else GAIN = 1; //128, channel A
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <hx711_setGain+0x3c>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	240000bc 	.word	0x240000bc

080013e4 <hx711_init>:


void hx711_init(void) //initializes the hx711 module by calling 2 functions.
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  hx711_setGain(128); //setting gain to 128, as this was our best result after trying with other gains.
 80013e8:	2080      	movs	r0, #128	; 0x80
 80013ea:	f7ff ffdb 	bl	80013a4 <hx711_setGain>
	hx711_powerUp(); //power up the hx711 module.
 80013ee:	f7ff ffcd 	bl	800138c <hx711_powerUp>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <hx711_get_value>:



int32_t hx711_get_value(void) //getting the weight from the module.
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
	uint32_t data = 0; //the data (weight) is firstly set to 0.
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
	uint8_t dout; // this is to show whether at this bit, if theres a number that should be recorded.
	int32_t filler; //to fill the rest of the 32 bits.
	int32_t ret_value; //final value to return after adding the filling and the data together.

	for (uint8_t i = 0; i < 24; i++) //read 24 bit data + set gain and start next conversion
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e021      	b.n	800144c <hx711_get_value+0x54>
	{

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //set the clock pin to 1.
 8001408:	2201      	movs	r2, #1
 800140a:	2110      	movs	r1, #16
 800140c:	4829      	ldr	r0, [pc, #164]	; (80014b4 <hx711_get_value+0xbc>)
 800140e:	f000 ff8b 	bl	8002328 <HAL_GPIO_WritePin>
		delay_us1(1); //delay
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff ffa0 	bl	8001358 <delay_us1>
			dout = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3); //read from the dout pin in variable dout.
 8001418:	2108      	movs	r1, #8
 800141a:	4826      	ldr	r0, [pc, #152]	; (80014b4 <hx711_get_value+0xbc>)
 800141c:	f000 ff6c 	bl	80022f8 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	70fb      	strb	r3, [r7, #3]
			data = data << 1; //shift the data by 1 to make sure we are in correct position depending on the counter.
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	617b      	str	r3, [r7, #20]
			if (dout) //if this bit has an output (value of 1) .
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <hx711_get_value+0x3e>
			{
				data++; //it sets the data value at this position as 1 as well.
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
			}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //set clock pin to 0.
 8001436:	2200      	movs	r2, #0
 8001438:	2110      	movs	r1, #16
 800143a:	481e      	ldr	r0, [pc, #120]	; (80014b4 <hx711_get_value+0xbc>)
 800143c:	f000 ff74 	bl	8002328 <HAL_GPIO_WritePin>
		delay_us1(1); //delay
 8001440:	2001      	movs	r0, #1
 8001442:	f7ff ff89 	bl	8001358 <delay_us1>
	for (uint8_t i = 0; i < 24; i++) //read 24 bit data + set gain and start next conversion
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	3301      	adds	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b17      	cmp	r3, #23
 8001450:	d9da      	bls.n	8001408 <hx711_get_value+0x10>
	}

	for( int i = 0; i < GAIN; i ++ ) //this for loop is for the gain, to add more clock cycles based on the gain.
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	e012      	b.n	800147e <hx711_get_value+0x86>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //set clock pin to 1.
 8001458:	2201      	movs	r2, #1
 800145a:	2110      	movs	r1, #16
 800145c:	4815      	ldr	r0, [pc, #84]	; (80014b4 <hx711_get_value+0xbc>)
 800145e:	f000 ff63 	bl	8002328 <HAL_GPIO_WritePin>
		delay_us1(1); //delay
 8001462:	2001      	movs	r0, #1
 8001464:	f7ff ff78 	bl	8001358 <delay_us1>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //set clock pin to 0.
 8001468:	2200      	movs	r2, #0
 800146a:	2110      	movs	r1, #16
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <hx711_get_value+0xbc>)
 800146e:	f000 ff5b 	bl	8002328 <HAL_GPIO_WritePin>
		delay_us1(1); //delay, here we are making a clock cycle.
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff ff70 	bl	8001358 <delay_us1>
	for( int i = 0; i < GAIN; i ++ ) //this for loop is for the gain, to add more clock cycles based on the gain.
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3301      	adds	r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <hx711_get_value+0xc0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4293      	cmp	r3, r2
 8001488:	dbe6      	blt.n	8001458 <hx711_get_value+0x60>
	}

	if( data & 0x800000 ) //here we are checking if theres values in the 24 bits by anding.
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <hx711_get_value+0xa4>
		filler = 0xFF000000; //if there are values we add 1's to the last 8 bits which are needed as this is a 32-bit adc.
 8001494:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	e001      	b.n	80014a0 <hx711_get_value+0xa8>
	else
		filler = 0x00000000; //however, if nothing is in the data we just add 0's.
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]

	ret_value = filler + data; //the return value is the addition of the data with the filler to have the 32-bits.
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4413      	add	r3, r2
 80014a6:	607b      	str	r3, [r7, #4]
	return ret_value; //returning the value to be printed.
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	58020000 	.word	0x58020000
 80014b8:	240000bc 	.word	0x240000bc

080014bc <hx711_is_ready>:

uint8_t hx711_is_ready(void) //making sure that the HX711 module is ready
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET; //reading a value from it, the reseting it.
 80014c0:	2108      	movs	r1, #8
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <hx711_is_ready+0x1c>)
 80014c4:	f000 ff18 	bl	80022f8 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	58020000 	.word	0x58020000

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af04      	add	r7, sp, #16
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014e2:	4b50      	ldr	r3, [pc, #320]	; (8001624 <main+0x148>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11b      	bne.n	8001526 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014ee:	f3bf 8f4f 	dsb	sy
}
 80014f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f4:	f3bf 8f6f 	isb	sy
}
 80014f8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014fa:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <main+0x148>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001502:	f3bf 8f4f 	dsb	sy
}
 8001506:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001508:	f3bf 8f6f 	isb	sy
}
 800150c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800150e:	4b45      	ldr	r3, [pc, #276]	; (8001624 <main+0x148>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a44      	ldr	r2, [pc, #272]	; (8001624 <main+0x148>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800151a:	f3bf 8f4f 	dsb	sy
}
 800151e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001520:	f3bf 8f6f 	isb	sy
}
 8001524:	e000      	b.n	8001528 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001526:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001528:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <main+0x148>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d138      	bne.n	80015a6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <main+0x148>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <main+0x148>)
 8001544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001548:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	0b5b      	lsrs	r3, r3, #13
 800154e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001552:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	08db      	lsrs	r3, r3, #3
 8001558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	015a      	lsls	r2, r3, #5
 8001562:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001566:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800156c:	492d      	ldr	r1, [pc, #180]	; (8001624 <main+0x148>)
 800156e:	4313      	orrs	r3, r2
 8001570:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ef      	bne.n	800155e <main+0x82>
    } while(sets-- != 0U);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e5      	bne.n	8001554 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001588:	f3bf 8f4f 	dsb	sy
}
 800158c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <main+0x148>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a24      	ldr	r2, [pc, #144]	; (8001624 <main+0x148>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800159a:	f3bf 8f4f 	dsb	sy
}
 800159e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015a0:	f3bf 8f6f 	isb	sy
}
 80015a4:	e000      	b.n	80015a8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015a6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a8:	f000 fb74 	bl	8001c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ac:	f000 f846 	bl	800163c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b0:	f7fe ff44 	bl	800043c <MX_GPIO_Init>
  MX_TIM1_Init();
 80015b4:	f000 face 	bl	8001b54 <MX_TIM1_Init>
  MX_SPI4_Init();
 80015b8:	f000 f8c6 	bl	8001748 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
 // HAL_TIM_Base_Start(&htim1);

  hx711_init(); //calling the initialize function.
 80015bc:	f7ff ff12 	bl	80013e4 <hx711_init>
LCD_Init();
 80015c0:	f7ff fd08 	bl	8000fd4 <LCD_Init>
  {
    /* USER CODE END WHILE */
	 // Test_Color();
    /* USER CODE BEGIN 3 */

	  if( hx711_is_ready()) //if the HX711 module is ready.
 80015c4:	f7ff ff7a 	bl	80014bc <hx711_is_ready>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d014      	beq.n	80015f8 <main+0x11c>
	  {
		  hx711_value = hx711_get_value(); //we store the value coming from the get value function.
 80015ce:	f7ff ff13 	bl	80013f8 <hx711_get_value>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <main+0x14c>)
 80015d6:	6013      	str	r3, [r2, #0]

	  sprintf(counter_str, "Weight : %d g \r\n", (((hx711_value)/1000))+263);//+263
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <main+0x14c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a13      	ldr	r2, [pc, #76]	; (800162c <main+0x150>)
 80015de:	fb82 1203 	smull	r1, r2, r2, r3
 80015e2:	1192      	asrs	r2, r2, #6
 80015e4:	17db      	asrs	r3, r3, #31
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f203 1307 	addw	r3, r3, #263	; 0x107
 80015ec:	461a      	mov	r2, r3
 80015ee:	4910      	ldr	r1, [pc, #64]	; (8001630 <main+0x154>)
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <main+0x158>)
 80015f2:	f007 fa61 	bl	8008ab8 <siprintf>
 80015f6:	e003      	b.n	8001600 <main+0x124>
	    //CDC_Transmit_FS((uint8_t*)counter_str, strlen(counter_str));
	   // Gui_StrCenter(0, 30, RED, BLACK, counter_str, 16	, 1);
	  }
	  else
	  	sprintf(counter_str,"Error: HX711 \n\r"); //However, if the HX711 module dosent read any value, this means there is a connection error.
 80015f8:	490f      	ldr	r1, [pc, #60]	; (8001638 <main+0x15c>)
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <main+0x158>)
 80015fc:	f007 fa5c 	bl	8008ab8 <siprintf>
	   // CDC_Transmit_FS((uint8_t*)counter_str, strlen(counter_str));
	    Gui_StrCenter(0, 50, RED, BLACK, counter_str, 16	, 1);
 8001600:	2301      	movs	r3, #1
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	2310      	movs	r3, #16
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <main+0x158>)
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001612:	2132      	movs	r1, #50	; 0x32
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff fb53 	bl	8000cc0 <Gui_StrCenter>
delay_us(10);
 800161a:	200a      	movs	r0, #10
 800161c:	f7fe feb8 	bl	8000390 <delay_us>
	  if( hx711_is_ready()) //if the HX711 module is ready.
 8001620:	e7d0      	b.n	80015c4 <main+0xe8>
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	240000b8 	.word	0x240000b8
 800162c:	10624dd3 	.word	0x10624dd3
 8001630:	080093ac 	.word	0x080093ac
 8001634:	240000a4 	.word	0x240000a4
 8001638:	080093c0 	.word	0x080093c0

0800163c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b09c      	sub	sp, #112	; 0x70
 8001640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001646:	224c      	movs	r2, #76	; 0x4c
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f007 fa2c 	bl	8008aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2220      	movs	r2, #32
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f007 fa26 	bl	8008aa8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800165c:	2002      	movs	r0, #2
 800165e:	f001 feff 	bl	8003460 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <SystemClock_Config+0xf8>)
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	4a32      	ldr	r2, [pc, #200]	; (8001734 <SystemClock_Config+0xf8>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001672:	4b30      	ldr	r3, [pc, #192]	; (8001734 <SystemClock_Config+0xf8>)
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <SystemClock_Config+0xfc>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001684:	4a2c      	ldr	r2, [pc, #176]	; (8001738 <SystemClock_Config+0xfc>)
 8001686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <SystemClock_Config+0xfc>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001698:	bf00      	nop
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <SystemClock_Config+0xfc>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a6:	d1f8      	bne.n	800169a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016a8:	2303      	movs	r3, #3
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b6:	2340      	movs	r3, #64	; 0x40
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ba:	2302      	movs	r3, #2
 80016bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016be:	2302      	movs	r3, #2
 80016c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80016c2:	2305      	movs	r3, #5
 80016c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80016c6:	2360      	movs	r3, #96	; 0x60
 80016c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016d6:	2308      	movs	r3, #8
 80016d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016da:	2300      	movs	r3, #0
 80016dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4618      	mov	r0, r3
 80016e8:	f001 fef4 	bl	80034d4 <HAL_RCC_OscConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80016f2:	f000 f823 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f6:	233f      	movs	r3, #63	; 0x3f
 80016f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fa:	2303      	movs	r3, #3
 80016fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001702:	2308      	movs	r3, #8
 8001704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2102      	movs	r1, #2
 800171a:	4618      	mov	r0, r3
 800171c:	f002 fb34 	bl	8003d88 <HAL_RCC_ClockConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001726:	f000 f809 	bl	800173c <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	3770      	adds	r7, #112	; 0x70
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	58000400 	.word	0x58000400
 8001738:	58024800 	.word	0x58024800

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	e7fe      	b.n	8001744 <Error_Handler+0x8>
	...

08001748 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <MX_SPI4_Init+0xa8>)
 800174e:	4a29      	ldr	r2, [pc, #164]	; (80017f4 <MX_SPI4_Init+0xac>)
 8001750:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <MX_SPI4_Init+0xa8>)
 8001754:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001758:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_SPI4_Init+0xa8>)
 800175c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001760:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_SPI4_Init+0xa8>)
 8001764:	2207      	movs	r2, #7
 8001766:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_SPI4_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_SPI4_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_SPI4_Init+0xa8>)
 8001776:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800177a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_SPI4_Init+0xa8>)
 800177e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001782:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_SPI4_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_SPI4_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_SPI4_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_SPI4_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI4_Init+0xa8>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_SPI4_Init+0xa8>)
 80017dc:	f004 f9a2 	bl	8005b24 <HAL_SPI_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80017e6:	f7ff ffa9 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	240000c0 	.word	0x240000c0
 80017f4:	40013400 	.word	0x40013400

080017f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0ba      	sub	sp, #232	; 0xe8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	22c0      	movs	r2, #192	; 0xc0
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f007 f945 	bl	8008aa8 <memset>
  if(spiHandle->Instance==SPI4)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <HAL_SPI_MspInit+0xc8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d146      	bne.n	80018b6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8001834:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001838:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	4618      	mov	r0, r3
 8001840:	f002 fe02 	bl	8004448 <HAL_RCCEx_PeriphCLKConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800184a:	f7ff ff77 	bl	800173c <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_SPI_MspInit+0xcc>)
 8001850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <HAL_SPI_MspInit+0xcc>)
 8001856:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800185a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_SPI_MspInit+0xcc>)
 8001860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_SPI_MspInit+0xcc>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_SPI_MspInit+0xcc>)
 8001874:	f043 0310 	orr.w	r3, r3, #16
 8001878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_SPI_MspInit+0xcc>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800188a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800188e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001898:	2301      	movs	r3, #1
 800189a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80018a4:	2305      	movs	r3, #5
 80018a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_SPI_MspInit+0xd0>)
 80018b2:	f000 fb71 	bl	8001f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80018b6:	bf00      	nop
 80018b8:	37e8      	adds	r7, #232	; 0xe8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40013400 	.word	0x40013400
 80018c4:	58024400 	.word	0x58024400
 80018c8:	58021000 	.word	0x58021000

080018cc <SPIv_WriteData>:
  }
}

/* USER CODE BEGIN 1 */
void  SPIv_WriteData(u8 Data)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
	unsigned char i=0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
	for(i=8;i>0;i--)
 80018da:	2308      	movs	r3, #8
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e022      	b.n	8001926 <SPIv_WriteData+0x5a>
	{
	  if(Data&0x80)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da06      	bge.n	80018f6 <SPIv_WriteData+0x2a>
	  SPI_MOSI_SET; //�������
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ee:	4812      	ldr	r0, [pc, #72]	; (8001938 <SPIv_WriteData+0x6c>)
 80018f0:	f000 fd1a 	bl	8002328 <HAL_GPIO_WritePin>
 80018f4:	e005      	b.n	8001902 <SPIv_WriteData+0x36>
      else SPI_MOSI_CLR;
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fc:	480e      	ldr	r0, [pc, #56]	; (8001938 <SPIv_WriteData+0x6c>)
 80018fe:	f000 fd13 	bl	8002328 <HAL_GPIO_WritePin>

      SPI_SCLK_CLR;
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <SPIv_WriteData+0x6c>)
 800190a:	f000 fd0d 	bl	8002328 <HAL_GPIO_WritePin>
      SPI_SCLK_SET;
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <SPIv_WriteData+0x6c>)
 8001916:	f000 fd07 	bl	8002328 <HAL_GPIO_WritePin>
      Data<<=1;
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	71fb      	strb	r3, [r7, #7]
	for(i=8;i>0;i--)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	3b01      	subs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1d9      	bne.n	80018e0 <SPIv_WriteData+0x14>
	}
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	58021000 	.word	0x58021000

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_MspInit+0x30>)
 8001944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001948:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_MspInit+0x30>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_MspInit+0x30>)
 8001954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	58024400 	.word	0x58024400

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <MemManage_Handler+0x4>

08001982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler+0x4>

0800198e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019bc:	f000 f9dc 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <OTG_FS_IRQHandler+0x10>)
 80019ca:	f000 fcc6 	bl	800235a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	240001a0 	.word	0x240001a0

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f007 f824 	bl	8008a54 <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	24080000 	.word	0x24080000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	24000148 	.word	0x24000148
 8001a40:	240006c0 	.word	0x240006c0

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a48:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <SystemInit+0xe4>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <SystemInit+0xe4>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <SystemInit+0xe8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d807      	bhi.n	8001a74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a64:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <SystemInit+0xe8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 030f 	bic.w	r3, r3, #15
 8001a6c:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <SystemInit+0xe8>)
 8001a6e:	f043 0307 	orr.w	r3, r3, #7
 8001a72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <SystemInit+0xec>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <SystemInit+0xec>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <SystemInit+0xec>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <SystemInit+0xec>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4929      	ldr	r1, [pc, #164]	; (8001b30 <SystemInit+0xec>)
 8001a8c:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <SystemInit+0xf0>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <SystemInit+0xe8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <SystemInit+0xe8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 030f 	bic.w	r3, r3, #15
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <SystemInit+0xe8>)
 8001aa8:	f043 0307 	orr.w	r3, r3, #7
 8001aac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <SystemInit+0xec>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <SystemInit+0xec>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <SystemInit+0xec>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <SystemInit+0xec>)
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <SystemInit+0xf4>)
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <SystemInit+0xec>)
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <SystemInit+0xf8>)
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <SystemInit+0xec>)
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <SystemInit+0xfc>)
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <SystemInit+0xec>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <SystemInit+0xec>)
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <SystemInit+0xfc>)
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <SystemInit+0xec>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <SystemInit+0xec>)
 8001ae6:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <SystemInit+0xfc>)
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <SystemInit+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <SystemInit+0xec>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <SystemInit+0xec>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <SystemInit+0xec>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <SystemInit+0x100>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <SystemInit+0x104>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0e:	d202      	bcs.n	8001b16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <SystemInit+0x108>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <SystemInit+0x10c>)
 8001b18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00
 8001b2c:	52002000 	.word	0x52002000
 8001b30:	58024400 	.word	0x58024400
 8001b34:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b38:	02020200 	.word	0x02020200
 8001b3c:	01ff0000 	.word	0x01ff0000
 8001b40:	01010280 	.word	0x01010280
 8001b44:	5c001000 	.word	0x5c001000
 8001b48:	ffff0000 	.word	0xffff0000
 8001b4c:	51008108 	.word	0x51008108
 8001b50:	52004000 	.word	0x52004000

08001b54 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001b74:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <MX_TIM1_Init+0xa4>)
 8001b76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b9e:	4815      	ldr	r0, [pc, #84]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001ba0:	f004 f8ff 	bl	8005da2 <HAL_TIM_Base_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001baa:	f7ff fdc7 	bl	800173c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480e      	ldr	r0, [pc, #56]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001bbc:	f004 f948 	bl	8005e50 <HAL_TIM_ConfigClockSource>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001bc6:	f7ff fdb9 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_TIM1_Init+0xa0>)
 8001bdc:	f004 fb68 	bl	80062b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001be6:	f7ff fda9 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2400014c 	.word	0x2400014c
 8001bf8:	40010000 	.word	0x40010000

08001bfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_TIM_Base_MspInit+0x3c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_TIM_Base_MspInit+0x40>)
 8001c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c14:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_TIM_Base_MspInit+0x40>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_TIM_Base_MspInit+0x40>)
 8001c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	58024400 	.word	0x58024400

08001c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c44:	f7ff fefe 	bl	8001a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c4a:	490d      	ldr	r1, [pc, #52]	; (8001c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c50:	e002      	b.n	8001c58 <LoopCopyDataInit>

08001c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c56:	3304      	adds	r3, #4

08001c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c5c:	d3f9      	bcc.n	8001c52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c60:	4c0a      	ldr	r4, [pc, #40]	; (8001c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c64:	e001      	b.n	8001c6a <LoopFillZerobss>

08001c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c68:	3204      	adds	r2, #4

08001c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c6c:	d3fb      	bcc.n	8001c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f006 fef7 	bl	8008a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fc33 	bl	80014dc <main>
  bx  lr
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c80:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001c84:	0800ab10 	.word	0x0800ab10
  ldr r2, =_sbss
 8001c88:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001c8c:	240006bc 	.word	0x240006bc

08001c90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC3_IRQHandler>
	...

08001c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f000 f94a 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ca0:	f002 fa28 	bl	80040f4 <HAL_RCC_GetSysClockFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_Init+0x68>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	4913      	ldr	r1, [pc, #76]	; (8001d00 <HAL_Init+0x6c>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_Init+0x68>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <HAL_Init+0x6c>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_Init+0x70>)
 8001cd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <HAL_Init+0x74>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f000 f814 	bl	8001d0c <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e002      	b.n	8001cf4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cee:	f7ff fe25 	bl	800193c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	0800aac4 	.word	0x0800aac4
 8001d04:	24000004 	.word	0x24000004
 8001d08:	24000000 	.word	0x24000000

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_InitTick+0x60>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e021      	b.n	8001d64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_InitTick+0x64>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_InitTick+0x60>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f921 	bl	8001f7e <HAL_SYSTICK_Config>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00e      	b.n	8001d64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d80a      	bhi.n	8001d62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f000 f8f9 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <HAL_InitTick+0x68>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2400000c 	.word	0x2400000c
 8001d70:	24000000 	.word	0x24000000
 8001d74:	24000008 	.word	0x24000008

08001d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_IncTick+0x20>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x24>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_IncTick+0x24>)
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2400000c 	.word	0x2400000c
 8001d9c:	24000198 	.word	0x24000198

08001da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_GetTick+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	24000198 	.word	0x24000198

08001db8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_GetREVID+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	5c001000 	.word	0x5c001000

08001dd0 <__NVIC_SetPriorityGrouping>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <__NVIC_SetPriorityGrouping+0x40>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x40>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00
 8001e14:	05fa0000 	.word	0x05fa0000

08001e18 <__NVIC_GetPriorityGrouping>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_SetPriority>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff47 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff5e 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff90 	bl	8001e88 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5f 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffb2 	bl	8001ef0 <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fa6:	4b89      	ldr	r3, [pc, #548]	; (80021cc <HAL_GPIO_Init+0x234>)
 8001fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001faa:	e194      	b.n	80022d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8186 	beq.w	80022d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d005      	beq.n	8001fdc <HAL_GPIO_Init+0x44>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d130      	bne.n	800203e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002012:	2201      	movs	r2, #1
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 0201 	and.w	r2, r3, #1
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b03      	cmp	r3, #3
 8002048:	d017      	beq.n	800207a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d123      	bne.n	80020ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	69b9      	ldr	r1, [r7, #24]
 80020ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0203 	and.w	r2, r3, #3
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80e0 	beq.w	80022d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <HAL_GPIO_Init+0x238>)
 8002112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002116:	4a2e      	ldr	r2, [pc, #184]	; (80021d0 <HAL_GPIO_Init+0x238>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_GPIO_Init+0x238>)
 8002122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_GPIO_Init+0x23c>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <HAL_GPIO_Init+0x240>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d052      	beq.n	8002200 <HAL_GPIO_Init+0x268>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_GPIO_Init+0x244>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_GPIO_Init+0x22e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_GPIO_Init+0x248>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x22a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_GPIO_Init+0x24c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x226>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_GPIO_Init+0x250>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x222>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <HAL_GPIO_Init+0x254>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x21e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_GPIO_Init+0x258>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x21a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <HAL_GPIO_Init+0x25c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x216>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <HAL_GPIO_Init+0x260>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x212>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_GPIO_Init+0x264>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x20e>
 80021a2:	2309      	movs	r3, #9
 80021a4:	e02d      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021a6:	230a      	movs	r3, #10
 80021a8:	e02b      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e029      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e027      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e025      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e023      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e021      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021be:	2303      	movs	r3, #3
 80021c0:	e01f      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e01d      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e01b      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021ca:	bf00      	nop
 80021cc:	58000080 	.word	0x58000080
 80021d0:	58024400 	.word	0x58024400
 80021d4:	58000400 	.word	0x58000400
 80021d8:	58020000 	.word	0x58020000
 80021dc:	58020400 	.word	0x58020400
 80021e0:	58020800 	.word	0x58020800
 80021e4:	58020c00 	.word	0x58020c00
 80021e8:	58021000 	.word	0x58021000
 80021ec:	58021400 	.word	0x58021400
 80021f0:	58021800 	.word	0x58021800
 80021f4:	58021c00 	.word	0x58021c00
 80021f8:	58022000 	.word	0x58022000
 80021fc:	58022400 	.word	0x58022400
 8002200:	2300      	movs	r3, #0
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	f002 0203 	and.w	r2, r2, #3
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	4093      	lsls	r3, r2
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002212:	4938      	ldr	r1, [pc, #224]	; (80022f4 <HAL_GPIO_Init+0x35c>)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800224e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	3301      	adds	r3, #1
 80022d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f47f ae63 	bne.w	8001fac <HAL_GPIO_Init+0x14>
  }
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3724      	adds	r7, #36	; 0x24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	58000400 	.word	0x58000400

080022f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e001      	b.n	800231a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800235a:	b590      	push	{r4, r7, lr}
 800235c:	b08d      	sub	sp, #52	; 0x34
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f004 ff1c 	bl	80071ae <USB_GetMode>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	f040 84b7 	bne.w	8002cec <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f004 fe80 	bl	8007088 <USB_ReadInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 84ad 	beq.w	8002cea <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f004 fe6d 	bl	8007088 <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d107      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f002 0202 	and.w	r2, r2, #2
 80023c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f004 fe5b 	bl	8007088 <USB_ReadInterrupts>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d161      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0210 	bic.w	r2, r2, #16
 80023ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	0c5b      	lsrs	r3, r3, #17
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	2b02      	cmp	r3, #2
 8002416:	d124      	bne.n	8002462 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d035      	beq.n	8002490 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800242e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	6a38      	ldr	r0, [r7, #32]
 8002438:	f004 fcd4 	bl	8006de4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002448:	441a      	add	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245a:	441a      	add	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	615a      	str	r2, [r3, #20]
 8002460:	e016      	b.n	8002490 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	0c5b      	lsrs	r3, r3, #17
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	2b06      	cmp	r3, #6
 800246c:	d110      	bne.n	8002490 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002474:	2208      	movs	r2, #8
 8002476:	4619      	mov	r1, r3
 8002478:	6a38      	ldr	r0, [r7, #32]
 800247a:	f004 fcb3 	bl	8006de4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800248a:	441a      	add	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0210 	orr.w	r2, r2, #16
 800249e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f004 fdef 	bl	8007088 <USB_ReadInterrupts>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024b4:	f040 80a7 	bne.w	8002606 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 fdf4 	bl	80070ae <USB_ReadDevAllOutEpInterrupt>
 80024c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024c8:	e099      	b.n	80025fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 808e 	beq.w	80025f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fe18 	bl	8007116 <USB_ReadDevOutEPInterrupt>
 80024e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00c      	beq.n	800250c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fe:	461a      	mov	r2, r3
 8002500:	2301      	movs	r3, #1
 8002502:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fe70 	bl	80031ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00c      	beq.n	8002530 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	4413      	add	r3, r2
 800251e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002522:	461a      	mov	r2, r3
 8002524:	2308      	movs	r3, #8
 8002526:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 ff46 	bl	80033bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002546:	461a      	mov	r2, r3
 8002548:	2310      	movs	r3, #16
 800254a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d030      	beq.n	80025b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b80      	cmp	r3, #128	; 0x80
 8002560:	d109      	bne.n	8002576 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002574:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	3304      	adds	r3, #4
 800258a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	78db      	ldrb	r3, [r3, #3]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d108      	bne.n	80025a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2200      	movs	r2, #0
 8002598:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f006 f8f9 	bl	8008798 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b2:	461a      	mov	r2, r3
 80025b4:	2302      	movs	r3, #2
 80025b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ce:	461a      	mov	r2, r3
 80025d0:	2320      	movs	r3, #32
 80025d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ea:	461a      	mov	r2, r3
 80025ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	3301      	adds	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	f47f af62 	bne.w	80024ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f004 fd3c 	bl	8007088 <USB_ReadInterrupts>
 8002610:	4603      	mov	r3, r0
 8002612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800261a:	f040 80db 	bne.w	80027d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fd5d 	bl	80070e2 <USB_ReadDevAllInEpInterrupt>
 8002628:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800262e:	e0cd      	b.n	80027cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80c2 	beq.w	80027c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fd83 	bl	8007152 <USB_ReadDevInEPInterrupt>
 800264c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d057      	beq.n	8002708 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	2201      	movs	r2, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	69f9      	ldr	r1, [r7, #28]
 8002674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002678:	4013      	ands	r3, r2
 800267a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002688:	461a      	mov	r2, r3
 800268a:	2301      	movs	r3, #1
 800268c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d132      	bne.n	80026fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3348      	adds	r3, #72	; 0x48
 80026a6:	6819      	ldr	r1, [r3, #0]
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4403      	add	r3, r0
 80026b6:	3344      	adds	r3, #68	; 0x44
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4419      	add	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4403      	add	r3, r0
 80026ca:	3348      	adds	r3, #72	; 0x48
 80026cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d113      	bne.n	80026fc <HAL_PCD_IRQHandler+0x3a2>
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	334c      	adds	r3, #76	; 0x4c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d108      	bne.n	80026fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026f4:	461a      	mov	r2, r3
 80026f6:	2101      	movs	r1, #1
 80026f8:	f004 fd8c 	bl	8007214 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	4619      	mov	r1, r3
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f005 ffc4 	bl	8008690 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800271e:	461a      	mov	r2, r3
 8002720:	2308      	movs	r3, #8
 8002722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800273a:	461a      	mov	r2, r3
 800273c:	2310      	movs	r3, #16
 800273e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002756:	461a      	mov	r2, r3
 8002758:	2340      	movs	r3, #64	; 0x40
 800275a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d023      	beq.n	80027ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002768:	6a38      	ldr	r0, [r7, #32]
 800276a:	f003 fed1 	bl	8006510 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	3338      	adds	r3, #56	; 0x38
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	78db      	ldrb	r3, [r3, #3]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f006 f810 	bl	80087bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a8:	461a      	mov	r2, r3
 80027aa:	2302      	movs	r3, #2
 80027ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fc88 	bl	80030d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	3301      	adds	r3, #1
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f47f af2e 	bne.w	8002630 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fc55 	bl	8007088 <USB_ReadInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027e8:	d122      	bne.n	8002830 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002804:	2b01      	cmp	r3, #1
 8002806:	d108      	bne.n	800281a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002810:	2100      	movs	r1, #0
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fe18 	bl	8003448 <HAL_PCDEx_LPM_Callback>
 8002818:	e002      	b.n	8002820 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f005 ffae 	bl	800877c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800282e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f004 fc27 	bl	8007088 <USB_ReadInterrupts>
 800283a:	4603      	mov	r3, r0
 800283c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002844:	d112      	bne.n	800286c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f005 ff6a 	bl	8008730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800286a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f004 fc09 	bl	8007088 <USB_ReadInterrupts>
 8002876:	4603      	mov	r3, r0
 8002878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002880:	d121      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002890:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	f003 020f 	and.w	r2, r3, #15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80028b6:	2101      	movs	r1, #1
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fdc5 	bl	8003448 <HAL_PCDEx_LPM_Callback>
 80028be:	e002      	b.n	80028c6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f005 ff35 	bl	8008730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f004 fbdc 	bl	8007088 <USB_ReadInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	f040 80b7 	bne.w	8002a4c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2110      	movs	r1, #16
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 fe09 	bl	8006510 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002902:	e046      	b.n	8002992 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002910:	461a      	mov	r2, r3
 8002912:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002916:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	440a      	add	r2, r1
 800292e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002936:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002944:	461a      	mov	r2, r3
 8002946:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800294a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800295c:	0151      	lsls	r1, r2, #5
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	440a      	add	r2, r1
 8002962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800296a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800297c:	0151      	lsls	r1, r2, #5
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	440a      	add	r2, r1
 8002982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002986:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800298a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	3301      	adds	r3, #1
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002998:	429a      	cmp	r2, r3
 800299a:	d3b3      	bcc.n	8002904 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029aa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029ae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d016      	beq.n	80029e6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c8:	f043 030b 	orr.w	r3, r3, #11
 80029cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029de:	f043 030b 	orr.w	r3, r3, #11
 80029e2:	6453      	str	r3, [r2, #68]	; 0x44
 80029e4:	e015      	b.n	8002a12 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f4:	4619      	mov	r1, r3
 80029f6:	f242 032b 	movw	r3, #8235	; 0x202b
 80029fa:	4313      	orrs	r3, r2
 80029fc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a0c:	f043 030b 	orr.w	r3, r3, #11
 8002a10:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a24:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a36:	461a      	mov	r2, r3
 8002a38:	f004 fbec 	bl	8007214 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 fb19 	bl	8007088 <USB_ReadInterrupts>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a60:	d124      	bne.n	8002aac <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 fbb0 	bl	80071cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fd81 	bl	8006578 <USB_GetDevSpeed>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681c      	ldr	r4, [r3, #0]
 8002a82:	f001 fcb1 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8002a86:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4620      	mov	r0, r4
 8002a92:	f003 fc9b 	bl	80063cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f005 fe22 	bl	80086e0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f004 fae9 	bl	8007088 <USB_ReadInterrupts>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d10a      	bne.n	8002ad6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f005 fdff 	bl	80086c4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f002 0208 	and.w	r2, r2, #8
 8002ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 fad4 	bl	8007088 <USB_ReadInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	d122      	bne.n	8002b30 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af6:	2301      	movs	r3, #1
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e014      	b.n	8002b26 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 faa7 	bl	800306e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	3301      	adds	r3, #1
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d3e5      	bcc.n	8002afc <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 faa7 	bl	8007088 <USB_ReadInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b44:	d13b      	bne.n	8002bbe <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b46:	2301      	movs	r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4a:	e02b      	b.n	8002ba4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3340      	adds	r3, #64	; 0x40
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d115      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b72:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da12      	bge.n	8002b9e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	333f      	adds	r3, #63	; 0x3f
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fa68 	bl	800306e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d3ce      	bcc.n	8002b4c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fa60 	bl	8007088 <USB_ReadInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bd2:	d155      	bne.n	8002c80 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	e045      	b.n	8002c66 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d12e      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da2b      	bge.n	8002c60 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c14:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d121      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10a      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5c:	6053      	str	r3, [r2, #4]
            break;
 8002c5e:	e007      	b.n	8002c70 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	3301      	adds	r3, #1
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d3b4      	bcc.n	8002bda <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f004 f9ff 	bl	8007088 <USB_ReadInterrupts>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d10a      	bne.n	8002cac <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f005 fda2 	bl	80087e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f004 f9e9 	bl	8007088 <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d115      	bne.n	8002cec <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f005 fd92 	bl	80087fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	e000      	b.n	8002cec <HAL_PCD_IRQHandler+0x992>
      return;
 8002cea:	bf00      	nop
    }
  }
}
 8002cec:	3734      	adds	r7, #52	; 0x34
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd90      	pop	{r4, r7, pc}

08002cf2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_SetAddress+0x1a>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e013      	b.n	8002d34 <HAL_PCD_SetAddress+0x42>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 f989 	bl	800703c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	4608      	mov	r0, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	70fb      	strb	r3, [r7, #3]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	803b      	strh	r3, [r7, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da0f      	bge.n	8002d82 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	3338      	adds	r3, #56	; 0x38
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	3304      	adds	r3, #4
 8002d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	705a      	strb	r2, [r3, #1]
 8002d80:	e00f      	b.n	8002da2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	3304      	adds	r3, #4
 8002d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dae:	883a      	ldrh	r2, [r7, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	78ba      	ldrb	r2, [r7, #2]
 8002db8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dcc:	78bb      	ldrb	r3, [r7, #2]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d102      	bne.n	8002dd8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_PCD_EP_Open+0xaa>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e00e      	b.n	8002e04 <HAL_PCD_EP_Open+0xc8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68f9      	ldr	r1, [r7, #12]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fbe5 	bl	80065c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e02:	7afb      	ldrb	r3, [r7, #11]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e1c:	7afb      	ldrb	r3, [r7, #11]
 8002e1e:	f003 020f 	and.w	r2, r3, #15
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	f003 fc2d 	bl	80066d4 <USB_EPStartXfer>

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	460b      	mov	r3, r1
 8002e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	3338      	adds	r3, #56	; 0x38
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec4:	7afb      	ldrb	r3, [r7, #11]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6979      	ldr	r1, [r7, #20]
 8002eec:	f003 fbf2 	bl	80066d4 <USB_EPStartXfer>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	f003 020f 	and.w	r2, r3, #15
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d901      	bls.n	8002f18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e050      	b.n	8002fba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da0f      	bge.n	8002f40 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 020f 	and.w	r2, r3, #15
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	3338      	adds	r3, #56	; 0x38
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	705a      	strb	r2, [r3, #1]
 8002f3e:	e00d      	b.n	8002f5c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	3304      	adds	r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_PCD_EP_SetStall+0x82>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e01e      	b.n	8002fba <HAL_PCD_EP_SetStall+0xc0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68f9      	ldr	r1, [r7, #12]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 ff82 	bl	8006e94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	b2d9      	uxtb	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002faa:	461a      	mov	r2, r3
 8002fac:	f004 f932 	bl	8007214 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d901      	bls.n	8002fe0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e042      	b.n	8003066 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da0f      	bge.n	8003008 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	3338      	adds	r3, #56	; 0x38
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	705a      	strb	r2, [r3, #1]
 8003006:	e00f      	b.n	8003028 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	f003 020f 	and.w	r2, r3, #15
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	3304      	adds	r3, #4
 8003020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_PCD_EP_ClrStall+0x86>
 8003044:	2302      	movs	r3, #2
 8003046:	e00e      	b.n	8003066 <HAL_PCD_EP_ClrStall+0xa4>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68f9      	ldr	r1, [r7, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	f003 ff8a 	bl	8006f70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800307a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	da0c      	bge.n	800309c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 020f 	and.w	r2, r3, #15
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	3338      	adds	r3, #56	; 0x38
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	3304      	adds	r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	e00c      	b.n	80030b6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 020f 	and.w	r2, r3, #15
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68f9      	ldr	r1, [r7, #12]
 80030bc:	4618      	mov	r0, r3
 80030be:	f003 fda9 	bl	8006c14 <USB_EPStopXfer>
 80030c2:	4603      	mov	r3, r0
 80030c4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030c6:	7afb      	ldrb	r3, [r7, #11]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	3338      	adds	r3, #56	; 0x38
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d901      	bls.n	8003108 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e06c      	b.n	80031e2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	429a      	cmp	r2, r3
 800311c:	d902      	bls.n	8003124 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3303      	adds	r3, #3
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800312c:	e02b      	b.n	8003186 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	429a      	cmp	r2, r3
 8003142:	d902      	bls.n	800314a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3303      	adds	r3, #3
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003162:	b2db      	uxtb	r3, r3
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	4603      	mov	r3, r0
 8003168:	6978      	ldr	r0, [r7, #20]
 800316a:	f003 fdfd 	bl	8006d68 <USB_WritePacket>

    ep->xfer_buff  += len;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	441a      	add	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	441a      	add	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	b29b      	uxth	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	429a      	cmp	r2, r3
 800319a:	d809      	bhi.n	80031b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d203      	bcs.n	80031b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1be      	bne.n	800312e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d811      	bhi.n	80031e0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	2201      	movs	r2, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	6939      	ldr	r1, [r7, #16]
 80031d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031dc:	4013      	ands	r3, r2
 80031de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	333c      	adds	r3, #60	; 0x3c
 8003204:	3304      	adds	r3, #4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d17b      	bne.n	800331a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d015      	beq.n	8003258 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4a61      	ldr	r2, [pc, #388]	; (80033b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	f240 80b9 	bls.w	80033a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80b3 	beq.w	80033a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003254:	6093      	str	r3, [r2, #8]
 8003256:	e0a7      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	461a      	mov	r2, r3
 8003270:	2320      	movs	r3, #32
 8003272:	6093      	str	r3, [r2, #8]
 8003274:	e098      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	f040 8093 	bne.w	80033a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d90f      	bls.n	80032aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a0:	461a      	mov	r2, r3
 80032a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a6:	6093      	str	r3, [r2, #8]
 80032a8:	e07e      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	3304      	adds	r3, #4
 80032be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	0159      	lsls	r1, r3, #5
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	440b      	add	r3, r1
 80032cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d6:	1ad2      	subs	r2, r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d114      	bne.n	800330c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032f4:	461a      	mov	r2, r3
 80032f6:	2101      	movs	r1, #1
 80032f8:	f003 ff8c 	bl	8007214 <USB_EP0_OutStart>
 80032fc:	e006      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	441a      	add	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f005 f9a1 	bl	800865a <HAL_PCD_DataOutStageCallback>
 8003318:	e046      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d124      	bne.n	800336c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333e:	6093      	str	r3, [r2, #8]
 8003340:	e032      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	2320      	movs	r3, #32
 800335c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	4619      	mov	r1, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f005 f978 	bl	800865a <HAL_PCD_DataOutStageCallback>
 800336a:	e01d      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d114      	bne.n	800339c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d108      	bne.n	800339c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003394:	461a      	mov	r2, r3
 8003396:	2100      	movs	r1, #0
 8003398:	f003 ff3c 	bl	8007214 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f005 f959 	bl	800865a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	4f54300a 	.word	0x4f54300a
 80033b8:	4f54310a 	.word	0x4f54310a

080033bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	333c      	adds	r3, #60	; 0x3c
 80033d4:	3304      	adds	r3, #4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d90e      	bls.n	8003410 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003408:	461a      	mov	r2, r3
 800340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f005 f910 	bl	8008636 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <PCD_EP_OutSetupPacket_int+0x88>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d90c      	bls.n	8003438 <PCD_EP_OutSetupPacket_int+0x7c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d108      	bne.n	8003438 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003430:	461a      	mov	r2, r3
 8003432:	2101      	movs	r1, #1
 8003434:	f003 feee 	bl	8007214 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	4f54300a 	.word	0x4f54300a

08003448 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_PWREx_ConfigSupply+0x70>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d00a      	beq.n	800348a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e01f      	b.n	80034c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e01d      	b.n	80034c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_PWREx_ConfigSupply+0x70>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f023 0207 	bic.w	r2, r3, #7
 8003492:	490f      	ldr	r1, [pc, #60]	; (80034d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4313      	orrs	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800349a:	f7fe fc81 	bl	8001da0 <HAL_GetTick>
 800349e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034a0:	e009      	b.n	80034b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034a2:	f7fe fc7d 	bl	8001da0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b0:	d901      	bls.n	80034b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e007      	b.n	80034c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_PWREx_ConfigSupply+0x70>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c2:	d1ee      	bne.n	80034a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	58024800 	.word	0x58024800

080034d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f000 bc48 	b.w	8003d78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8088 	beq.w	8003606 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f6:	4b99      	ldr	r3, [pc, #612]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003500:	4b96      	ldr	r3, [pc, #600]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	2b10      	cmp	r3, #16
 800350a:	d007      	beq.n	800351c <HAL_RCC_OscConfig+0x48>
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	2b18      	cmp	r3, #24
 8003510:	d111      	bne.n	8003536 <HAL_RCC_OscConfig+0x62>
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d10c      	bne.n	8003536 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	4b8f      	ldr	r3, [pc, #572]	; (800375c <HAL_RCC_OscConfig+0x288>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d06d      	beq.n	8003604 <HAL_RCC_OscConfig+0x130>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d169      	bne.n	8003604 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f000 bc21 	b.w	8003d78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x7a>
 8003540:	4b86      	ldr	r3, [pc, #536]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a85      	ldr	r2, [pc, #532]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	e02e      	b.n	80035ac <HAL_RCC_OscConfig+0xd8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x9c>
 8003556:	4b81      	ldr	r3, [pc, #516]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a80      	ldr	r2, [pc, #512]	; (800375c <HAL_RCC_OscConfig+0x288>)
 800355c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b7e      	ldr	r3, [pc, #504]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7d      	ldr	r2, [pc, #500]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e01d      	b.n	80035ac <HAL_RCC_OscConfig+0xd8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0xc0>
 800357a:	4b78      	ldr	r3, [pc, #480]	; (800375c <HAL_RCC_OscConfig+0x288>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a77      	ldr	r2, [pc, #476]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b75      	ldr	r3, [pc, #468]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a74      	ldr	r2, [pc, #464]	; (800375c <HAL_RCC_OscConfig+0x288>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0xd8>
 8003594:	4b71      	ldr	r3, [pc, #452]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a70      	ldr	r2, [pc, #448]	; (800375c <HAL_RCC_OscConfig+0x288>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b6e      	ldr	r3, [pc, #440]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6d      	ldr	r2, [pc, #436]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fbf4 	bl	8001da0 <HAL_GetTick>
 80035b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fe fbf0 	bl	8001da0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e3d4      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ce:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0xe8>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe fbe0 	bl	8001da0 <HAL_GetTick>
 80035e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fe fbdc 	bl	8001da0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e3c0      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035f6:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x110>
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80ca 	beq.w	80037a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003614:	4b51      	ldr	r3, [pc, #324]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800361c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800361e:	4b4f      	ldr	r3, [pc, #316]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_RCC_OscConfig+0x166>
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	2b18      	cmp	r3, #24
 800362e:	d156      	bne.n	80036de <HAL_RCC_OscConfig+0x20a>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d151      	bne.n	80036de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363a:	4b48      	ldr	r3, [pc, #288]	; (800375c <HAL_RCC_OscConfig+0x288>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_RCC_OscConfig+0x17e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e392      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003652:	4b42      	ldr	r3, [pc, #264]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 0219 	bic.w	r2, r3, #25
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	493f      	ldr	r1, [pc, #252]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fb9c 	bl	8001da0 <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366c:	f7fe fb98 	bl	8001da0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e37c      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368a:	f7fe fb95 	bl	8001db8 <HAL_GetREVID>
 800368e:	4603      	mov	r3, r0
 8003690:	f241 0203 	movw	r2, #4099	; 0x1003
 8003694:	4293      	cmp	r3, r2
 8003696:	d817      	bhi.n	80036c8 <HAL_RCC_OscConfig+0x1f4>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d108      	bne.n	80036b2 <HAL_RCC_OscConfig+0x1de>
 80036a0:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036a8:	4a2c      	ldr	r2, [pc, #176]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b0:	e07a      	b.n	80037a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4b2a      	ldr	r3, [pc, #168]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	031b      	lsls	r3, r3, #12
 80036c0:	4926      	ldr	r1, [pc, #152]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c6:	e06f      	b.n	80037a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	4921      	ldr	r1, [pc, #132]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036dc:	e064      	b.n	80037a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d047      	beq.n	8003776 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036e6:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0219 	bic.w	r2, r3, #25
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	491a      	ldr	r1, [pc, #104]	; (800375c <HAL_RCC_OscConfig+0x288>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe fb52 	bl	8001da0 <HAL_GetTick>
 80036fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003700:	f7fe fb4e 	bl	8001da0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e332      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	f7fe fb4b 	bl	8001db8 <HAL_GetREVID>
 8003722:	4603      	mov	r3, r0
 8003724:	f241 0203 	movw	r2, #4099	; 0x1003
 8003728:	4293      	cmp	r3, r2
 800372a:	d819      	bhi.n	8003760 <HAL_RCC_OscConfig+0x28c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d108      	bne.n	8003746 <HAL_RCC_OscConfig+0x272>
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800373c:	4a07      	ldr	r2, [pc, #28]	; (800375c <HAL_RCC_OscConfig+0x288>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003742:	6053      	str	r3, [r2, #4]
 8003744:	e030      	b.n	80037a8 <HAL_RCC_OscConfig+0x2d4>
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	031b      	lsls	r3, r3, #12
 8003754:	4901      	ldr	r1, [pc, #4]	; (800375c <HAL_RCC_OscConfig+0x288>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
 800375a:	e025      	b.n	80037a8 <HAL_RCC_OscConfig+0x2d4>
 800375c:	58024400 	.word	0x58024400
 8003760:	4b9a      	ldr	r3, [pc, #616]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	4997      	ldr	r1, [pc, #604]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
 8003774:	e018      	b.n	80037a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003776:	4b95      	ldr	r3, [pc, #596]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a94      	ldr	r2, [pc, #592]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003782:	f7fe fb0d 	bl	8001da0 <HAL_GetTick>
 8003786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378a:	f7fe fb09 	bl	8001da0 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e2ed      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800379c:	4b8b      	ldr	r3, [pc, #556]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f0      	bne.n	800378a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a9 	beq.w	8003908 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b6:	4b85      	ldr	r3, [pc, #532]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037c0:	4b82      	ldr	r3, [pc, #520]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d007      	beq.n	80037dc <HAL_RCC_OscConfig+0x308>
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2b18      	cmp	r3, #24
 80037d0:	d13a      	bne.n	8003848 <HAL_RCC_OscConfig+0x374>
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d135      	bne.n	8003848 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037dc:	4b7b      	ldr	r3, [pc, #492]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_OscConfig+0x320>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b80      	cmp	r3, #128	; 0x80
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e2c1      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037f4:	f7fe fae0 	bl	8001db8 <HAL_GetREVID>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80037fe:	4293      	cmp	r3, r2
 8003800:	d817      	bhi.n	8003832 <HAL_RCC_OscConfig+0x35e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	2b20      	cmp	r3, #32
 8003808:	d108      	bne.n	800381c <HAL_RCC_OscConfig+0x348>
 800380a:	4b70      	ldr	r3, [pc, #448]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003812:	4a6e      	ldr	r2, [pc, #440]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003818:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800381a:	e075      	b.n	8003908 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800381c:	4b6b      	ldr	r3, [pc, #428]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	069b      	lsls	r3, r3, #26
 800382a:	4968      	ldr	r1, [pc, #416]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003830:	e06a      	b.n	8003908 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003832:	4b66      	ldr	r3, [pc, #408]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	061b      	lsls	r3, r3, #24
 8003840:	4962      	ldr	r1, [pc, #392]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003842:	4313      	orrs	r3, r2
 8003844:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003846:	e05f      	b.n	8003908 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d042      	beq.n	80038d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003850:	4b5e      	ldr	r3, [pc, #376]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a5d      	ldr	r2, [pc, #372]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe faa0 	bl	8001da0 <HAL_GetTick>
 8003860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003864:	f7fe fa9c 	bl	8001da0 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e280      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003876:	4b55      	ldr	r3, [pc, #340]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003882:	f7fe fa99 	bl	8001db8 <HAL_GetREVID>
 8003886:	4603      	mov	r3, r0
 8003888:	f241 0203 	movw	r2, #4099	; 0x1003
 800388c:	4293      	cmp	r3, r2
 800388e:	d817      	bhi.n	80038c0 <HAL_RCC_OscConfig+0x3ec>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	2b20      	cmp	r3, #32
 8003896:	d108      	bne.n	80038aa <HAL_RCC_OscConfig+0x3d6>
 8003898:	4b4c      	ldr	r3, [pc, #304]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038a0:	4a4a      	ldr	r2, [pc, #296]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80038a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038a6:	6053      	str	r3, [r2, #4]
 80038a8:	e02e      	b.n	8003908 <HAL_RCC_OscConfig+0x434>
 80038aa:	4b48      	ldr	r3, [pc, #288]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	069b      	lsls	r3, r3, #26
 80038b8:	4944      	ldr	r1, [pc, #272]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
 80038be:	e023      	b.n	8003908 <HAL_RCC_OscConfig+0x434>
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	493f      	ldr	r1, [pc, #252]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60cb      	str	r3, [r1, #12]
 80038d4:	e018      	b.n	8003908 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80038d6:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80038dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe fa5d 	bl	8001da0 <HAL_GetTick>
 80038e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038ea:	f7fe fa59 	bl	8001da0 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e23d      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038fc:	4b33      	ldr	r3, [pc, #204]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f0      	bne.n	80038ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d036      	beq.n	8003982 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d019      	beq.n	8003950 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391c:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 800391e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003920:	4a2a      	ldr	r2, [pc, #168]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003928:	f7fe fa3a 	bl	8001da0 <HAL_GetTick>
 800392c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003930:	f7fe fa36 	bl	8001da0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e21a      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x45c>
 800394e:	e018      	b.n	8003982 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003950:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fe fa20 	bl	8001da0 <HAL_GetTick>
 8003960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003964:	f7fe fa1c 	bl	8001da0 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e200      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d039      	beq.n	8003a02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01c      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 800399c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039a2:	f7fe f9fd 	bl	8001da0 <HAL_GetTick>
 80039a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039aa:	f7fe f9f9 	bl	8001da0 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e1dd      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCC_OscConfig+0x4f8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x4d6>
 80039c8:	e01b      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039d0:	4b9b      	ldr	r3, [pc, #620]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a9a      	ldr	r2, [pc, #616]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 80039d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039dc:	f7fe f9e0 	bl	8001da0 <HAL_GetTick>
 80039e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e4:	f7fe f9dc 	bl	8001da0 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1c0      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039f6:	4b92      	ldr	r3, [pc, #584]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8081 	beq.w	8003b12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a10:	4b8c      	ldr	r3, [pc, #560]	; (8003c44 <HAL_RCC_OscConfig+0x770>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a8b      	ldr	r2, [pc, #556]	; (8003c44 <HAL_RCC_OscConfig+0x770>)
 8003a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a1c:	f7fe f9c0 	bl	8001da0 <HAL_GetTick>
 8003a20:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a24:	f7fe f9bc 	bl	8001da0 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1a0      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a36:	4b83      	ldr	r3, [pc, #524]	; (8003c44 <HAL_RCC_OscConfig+0x770>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d106      	bne.n	8003a58 <HAL_RCC_OscConfig+0x584>
 8003a4a:	4b7d      	ldr	r3, [pc, #500]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a7c      	ldr	r2, [pc, #496]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
 8003a56:	e02d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x5e0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_OscConfig+0x5a6>
 8003a60:	4b77      	ldr	r3, [pc, #476]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	4a76      	ldr	r2, [pc, #472]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6c:	4b74      	ldr	r3, [pc, #464]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a73      	ldr	r2, [pc, #460]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a72:	f023 0304 	bic.w	r3, r3, #4
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	e01c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x5e0>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5c8>
 8003a82:	4b6f      	ldr	r3, [pc, #444]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a6e      	ldr	r2, [pc, #440]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a6b      	ldr	r2, [pc, #428]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0x5e0>
 8003a9c:	4b68      	ldr	r3, [pc, #416]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a67      	ldr	r2, [pc, #412]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	4b65      	ldr	r3, [pc, #404]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a64      	ldr	r2, [pc, #400]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003aae:	f023 0304 	bic.w	r3, r3, #4
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fe f970 	bl	8001da0 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fe f96c 	bl	8001da0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e14e      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ada:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ee      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x5f0>
 8003ae6:	e014      	b.n	8003b12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fe f95a 	bl	8001da0 <HAL_GetTick>
 8003aec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fe f956 	bl	8001da0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e138      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b06:	4b4e      	ldr	r3, [pc, #312]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1ee      	bne.n	8003af0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 812d 	beq.w	8003d76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b1c:	4b48      	ldr	r3, [pc, #288]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b24:	2b18      	cmp	r3, #24
 8003b26:	f000 80bd 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	f040 809e 	bne.w	8003c70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b34:	4b42      	ldr	r3, [pc, #264]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a41      	ldr	r2, [pc, #260]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe f92e 	bl	8001da0 <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe f92a 	bl	8001da0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e10e      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b5a:	4b39      	ldr	r3, [pc, #228]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b66:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6a:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <HAL_RCC_OscConfig+0x774>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	4931      	ldr	r1, [pc, #196]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	628b      	str	r3, [r1, #40]	; 0x28
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	3b01      	subs	r3, #1
 8003b86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	025b      	lsls	r3, r3, #9
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	061b      	lsls	r3, r3, #24
 8003bac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bb0:	4923      	ldr	r1, [pc, #140]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003bb6:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bc2:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc6:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <HAL_RCC_OscConfig+0x778>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bce:	00d2      	lsls	r2, r2, #3
 8003bd0:	491b      	ldr	r1, [pc, #108]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003bd6:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	f023 020c 	bic.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	4917      	ldr	r1, [pc, #92]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003be8:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f023 0202 	bic.w	r2, r3, #2
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	4912      	ldr	r1, [pc, #72]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_RCC_OscConfig+0x76c>)
 8003c30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fe f8b3 	bl	8001da0 <HAL_GetTick>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c3c:	e011      	b.n	8003c62 <HAL_RCC_OscConfig+0x78e>
 8003c3e:	bf00      	nop
 8003c40:	58024400 	.word	0x58024400
 8003c44:	58024800 	.word	0x58024800
 8003c48:	fffffc0c 	.word	0xfffffc0c
 8003c4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe f8a6 	bl	8001da0 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e08a      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x77c>
 8003c6e:	e082      	b.n	8003d76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a42      	ldr	r2, [pc, #264]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f890 	bl	8001da0 <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe f88c 	bl	8001da0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e070      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c96:	4b3a      	ldr	r3, [pc, #232]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x7b0>
 8003ca2:	e068      	b.n	8003d76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ca4:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003caa:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d031      	beq.n	8003d1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0203 	and.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d12a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d122      	bne.n	8003d1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d11a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	0a5b      	lsrs	r3, r3, #9
 8003cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d111      	bne.n	8003d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	0c1b      	lsrs	r3, r3, #16
 8003cfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d108      	bne.n	8003d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	0e1b      	lsrs	r3, r3, #24
 8003d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e02b      	b.n	8003d78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d20:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d01f      	beq.n	8003d76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d42:	f7fe f82d 	bl	8001da0 <HAL_GetTick>
 8003d46:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d48:	bf00      	nop
 8003d4a:	f7fe f829 	bl	8001da0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d0f9      	beq.n	8003d4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d56:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_RCC_OscConfig+0x8b0>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d62:	00d2      	lsls	r2, r2, #3
 8003d64:	4906      	ldr	r1, [pc, #24]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <HAL_RCC_OscConfig+0x8ac>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3730      	adds	r7, #48	; 0x30
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	58024400 	.word	0x58024400
 8003d84:	ffff0007 	.word	0xffff0007

08003d88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e19c      	b.n	80040d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b8a      	ldr	r3, [pc, #552]	; (8003fc8 <HAL_RCC_ClockConfig+0x240>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d910      	bls.n	8003dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b87      	ldr	r3, [pc, #540]	; (8003fc8 <HAL_RCC_ClockConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 020f 	bic.w	r2, r3, #15
 8003db2:	4985      	ldr	r1, [pc, #532]	; (8003fc8 <HAL_RCC_ClockConfig+0x240>)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b83      	ldr	r3, [pc, #524]	; (8003fc8 <HAL_RCC_ClockConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e184      	b.n	80040d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d010      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	4b7b      	ldr	r3, [pc, #492]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d908      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003de8:	4b78      	ldr	r3, [pc, #480]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	4975      	ldr	r1, [pc, #468]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d010      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	4b70      	ldr	r3, [pc, #448]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d908      	bls.n	8003e28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e16:	4b6d      	ldr	r3, [pc, #436]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	496a      	ldr	r1, [pc, #424]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	4b64      	ldr	r3, [pc, #400]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d908      	bls.n	8003e56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e44:	4b61      	ldr	r3, [pc, #388]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	495e      	ldr	r1, [pc, #376]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d010      	beq.n	8003e84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d908      	bls.n	8003e84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e72:	4b56      	ldr	r3, [pc, #344]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	4953      	ldr	r1, [pc, #332]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d010      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	4b4d      	ldr	r3, [pc, #308]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d908      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea0:	4b4a      	ldr	r3, [pc, #296]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f023 020f 	bic.w	r2, r3, #15
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4947      	ldr	r1, [pc, #284]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d055      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ebe:	4b43      	ldr	r3, [pc, #268]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4940      	ldr	r1, [pc, #256]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ed8:	4b3c      	ldr	r3, [pc, #240]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d121      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0f6      	b.n	80040d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ef0:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d115      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0ea      	b.n	80040d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f08:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0de      	b.n	80040d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f18:	4b2c      	ldr	r3, [pc, #176]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0d6      	b.n	80040d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f28:	4b28      	ldr	r3, [pc, #160]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f023 0207 	bic.w	r2, r3, #7
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4925      	ldr	r1, [pc, #148]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3a:	f7fd ff31 	bl	8001da0 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f42:	f7fd ff2d 	bl	8001da0 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e0be      	b.n	80040d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f58:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d1eb      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d208      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f023 020f 	bic.w	r2, r3, #15
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	490e      	ldr	r1, [pc, #56]	; (8003fcc <HAL_RCC_ClockConfig+0x244>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCC_ClockConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d214      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <HAL_RCC_ClockConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 020f 	bic.w	r2, r3, #15
 8003fae:	4906      	ldr	r1, [pc, #24]	; (8003fc8 <HAL_RCC_ClockConfig+0x240>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <HAL_RCC_ClockConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e086      	b.n	80040d6 <HAL_RCC_ClockConfig+0x34e>
 8003fc8:	52002000 	.word	0x52002000
 8003fcc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d208      	bcs.n	8003ffe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fec:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4939      	ldr	r1, [pc, #228]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d010      	beq.n	800402c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004016:	429a      	cmp	r2, r3
 8004018:	d208      	bcs.n	800402c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800401a:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	492e      	ldr	r1, [pc, #184]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 8004028:	4313      	orrs	r3, r2
 800402a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d010      	beq.n	800405a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004044:	429a      	cmp	r2, r3
 8004046:	d208      	bcs.n	800405a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004048:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4922      	ldr	r1, [pc, #136]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 8004056:	4313      	orrs	r3, r2
 8004058:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004072:	429a      	cmp	r2, r3
 8004074:	d208      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004076:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4917      	ldr	r1, [pc, #92]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 8004084:	4313      	orrs	r3, r2
 8004086:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004088:	f000 f834 	bl	80040f4 <HAL_RCC_GetSysClockFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	4912      	ldr	r1, [pc, #72]	; (80040e4 <HAL_RCC_ClockConfig+0x35c>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
 80040a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_RCC_ClockConfig+0x358>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	4a0d      	ldr	r2, [pc, #52]	; (80040e4 <HAL_RCC_ClockConfig+0x35c>)
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <HAL_RCC_ClockConfig+0x360>)
 80040be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040c0:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <HAL_RCC_ClockConfig+0x364>)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <HAL_RCC_ClockConfig+0x368>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd fe1e 	bl	8001d0c <HAL_InitTick>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	58024400 	.word	0x58024400
 80040e4:	0800aac4 	.word	0x0800aac4
 80040e8:	24000004 	.word	0x24000004
 80040ec:	24000000 	.word	0x24000000
 80040f0:	24000008 	.word	0x24000008

080040f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	; 0x24
 80040f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040fa:	4bb3      	ldr	r3, [pc, #716]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004102:	2b18      	cmp	r3, #24
 8004104:	f200 8155 	bhi.w	80043b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <HAL_RCC_GetSysClockFreq+0x1c>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004175 	.word	0x08004175
 8004114:	080043b3 	.word	0x080043b3
 8004118:	080043b3 	.word	0x080043b3
 800411c:	080043b3 	.word	0x080043b3
 8004120:	080043b3 	.word	0x080043b3
 8004124:	080043b3 	.word	0x080043b3
 8004128:	080043b3 	.word	0x080043b3
 800412c:	080043b3 	.word	0x080043b3
 8004130:	0800419b 	.word	0x0800419b
 8004134:	080043b3 	.word	0x080043b3
 8004138:	080043b3 	.word	0x080043b3
 800413c:	080043b3 	.word	0x080043b3
 8004140:	080043b3 	.word	0x080043b3
 8004144:	080043b3 	.word	0x080043b3
 8004148:	080043b3 	.word	0x080043b3
 800414c:	080043b3 	.word	0x080043b3
 8004150:	080041a1 	.word	0x080041a1
 8004154:	080043b3 	.word	0x080043b3
 8004158:	080043b3 	.word	0x080043b3
 800415c:	080043b3 	.word	0x080043b3
 8004160:	080043b3 	.word	0x080043b3
 8004164:	080043b3 	.word	0x080043b3
 8004168:	080043b3 	.word	0x080043b3
 800416c:	080043b3 	.word	0x080043b3
 8004170:	080041a7 	.word	0x080041a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004174:	4b94      	ldr	r3, [pc, #592]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004180:	4b91      	ldr	r3, [pc, #580]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	08db      	lsrs	r3, r3, #3
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	4a90      	ldr	r2, [pc, #576]	; (80043cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
 8004190:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004192:	e111      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004194:	4b8d      	ldr	r3, [pc, #564]	; (80043cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004196:	61bb      	str	r3, [r7, #24]
      break;
 8004198:	e10e      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800419a:	4b8d      	ldr	r3, [pc, #564]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800419c:	61bb      	str	r3, [r7, #24]
      break;
 800419e:	e10b      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80041a0:	4b8c      	ldr	r3, [pc, #560]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80041a2:	61bb      	str	r3, [r7, #24]
      break;
 80041a4:	e108      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041a6:	4b88      	ldr	r3, [pc, #544]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80041b0:	4b85      	ldr	r3, [pc, #532]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041bc:	4b82      	ldr	r3, [pc, #520]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80041c6:	4b80      	ldr	r3, [pc, #512]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	08db      	lsrs	r3, r3, #3
 80041cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80e1 	beq.w	80043ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	f000 8083 	beq.w	80042f8 <HAL_RCC_GetSysClockFreq+0x204>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	f200 80a1 	bhi.w	800433c <HAL_RCC_GetSysClockFreq+0x248>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x114>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d056      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004206:	e099      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004208:	4b6f      	ldr	r3, [pc, #444]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02d      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004214:	4b6c      	ldr	r3, [pc, #432]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	08db      	lsrs	r3, r3, #3
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	4a6b      	ldr	r2, [pc, #428]	; (80043cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
 8004224:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800423e:	4b62      	ldr	r3, [pc, #392]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800424e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004252:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800425e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800426e:	e087      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800427e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004282:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004292:	ed97 6a02 	vldr	s12, [r7, #8]
 8004296:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800429a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800429e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042b2:	e065      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c6:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042f6:	e043      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004302:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430a:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431a:	ed97 6a02 	vldr	s12, [r7, #8]
 800431e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800432e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800433a:	e021      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004346:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800434a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434e:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004362:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800437e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	0a5b      	lsrs	r3, r3, #9
 8004386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800438a:	3301      	adds	r3, #1
 800438c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	ee07 3a90 	vmov	s15, r3
 8004394:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004398:	edd7 6a07 	vldr	s13, [r7, #28]
 800439c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043a4:	ee17 3a90 	vmov	r3, s15
 80043a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80043aa:	e005      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
      break;
 80043b0:	e002      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043b4:	61bb      	str	r3, [r7, #24]
      break;
 80043b6:	bf00      	nop
  }

  return sysclockfreq;
 80043b8:	69bb      	ldr	r3, [r7, #24]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3724      	adds	r7, #36	; 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	58024400 	.word	0x58024400
 80043cc:	03d09000 	.word	0x03d09000
 80043d0:	003d0900 	.word	0x003d0900
 80043d4:	017d7840 	.word	0x017d7840
 80043d8:	46000000 	.word	0x46000000
 80043dc:	4c742400 	.word	0x4c742400
 80043e0:	4a742400 	.word	0x4a742400
 80043e4:	4bbebc20 	.word	0x4bbebc20

080043e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043ee:	f7ff fe81 	bl	80040f4 <HAL_RCC_GetSysClockFreq>
 80043f2:	4602      	mov	r2, r0
 80043f4:	4b10      	ldr	r3, [pc, #64]	; (8004438 <HAL_RCC_GetHCLKFreq+0x50>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	490f      	ldr	r1, [pc, #60]	; (800443c <HAL_RCC_GetHCLKFreq+0x54>)
 8004400:	5ccb      	ldrb	r3, [r1, r3]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <HAL_RCC_GetHCLKFreq+0x50>)
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	4a09      	ldr	r2, [pc, #36]	; (800443c <HAL_RCC_GetHCLKFreq+0x54>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	fa22 f303 	lsr.w	r3, r2, r3
 8004422:	4a07      	ldr	r2, [pc, #28]	; (8004440 <HAL_RCC_GetHCLKFreq+0x58>)
 8004424:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004426:	4a07      	ldr	r2, [pc, #28]	; (8004444 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <HAL_RCC_GetHCLKFreq+0x58>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	58024400 	.word	0x58024400
 800443c:	0800aac4 	.word	0x0800aac4
 8004440:	24000004 	.word	0x24000004
 8004444:	24000000 	.word	0x24000000

08004448 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800444c:	b0ca      	sub	sp, #296	; 0x128
 800444e:	af00      	add	r7, sp, #0
 8004450:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004454:	2300      	movs	r3, #0
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800445a:	2300      	movs	r3, #0
 800445c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800446c:	2500      	movs	r5, #0
 800446e:	ea54 0305 	orrs.w	r3, r4, r5
 8004472:	d049      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800447a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800447e:	d02f      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004480:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004484:	d828      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800448a:	d01a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800448c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004490:	d822      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449a:	d007      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800449c:	e01c      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449e:	4bb8      	ldr	r3, [pc, #736]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	4ab7      	ldr	r2, [pc, #732]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044aa:	e01a      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b0:	3308      	adds	r3, #8
 80044b2:	2102      	movs	r1, #2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 f9d1 	bl	800585c <RCCEx_PLL2_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044c0:	e00f      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c6:	3328      	adds	r3, #40	; 0x28
 80044c8:	2102      	movs	r1, #2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 fa78 	bl	80059c0 <RCCEx_PLL3_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044d6:	e004      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80044e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044ea:	4ba5      	ldr	r3, [pc, #660]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f8:	4aa1      	ldr	r2, [pc, #644]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044fa:	430b      	orrs	r3, r1
 80044fc:	6513      	str	r3, [r2, #80]	; 0x50
 80044fe:	e003      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004504:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004514:	f04f 0900 	mov.w	r9, #0
 8004518:	ea58 0309 	orrs.w	r3, r8, r9
 800451c:	d047      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	2b04      	cmp	r3, #4
 8004526:	d82a      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004528:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004545 	.word	0x08004545
 8004534:	08004553 	.word	0x08004553
 8004538:	08004569 	.word	0x08004569
 800453c:	08004587 	.word	0x08004587
 8004540:	08004587 	.word	0x08004587
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004544:	4b8e      	ldr	r3, [pc, #568]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	4a8d      	ldr	r2, [pc, #564]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800454a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004550:	e01a      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004556:	3308      	adds	r3, #8
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f001 f97e 	bl	800585c <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004566:	e00f      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456c:	3328      	adds	r3, #40	; 0x28
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f001 fa25 	bl	80059c0 <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800457c:	e004      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004584:	e000      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004590:	4b7b      	ldr	r3, [pc, #492]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004594:	f023 0107 	bic.w	r1, r3, #7
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	4a78      	ldr	r2, [pc, #480]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6513      	str	r3, [r2, #80]	; 0x50
 80045a4:	e003      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80045ba:	f04f 0b00 	mov.w	fp, #0
 80045be:	ea5a 030b 	orrs.w	r3, sl, fp
 80045c2:	d04c      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	d030      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d4:	d829      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80045d6:	2bc0      	cmp	r3, #192	; 0xc0
 80045d8:	d02d      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80045da:	2bc0      	cmp	r3, #192	; 0xc0
 80045dc:	d825      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80045de:	2b80      	cmp	r3, #128	; 0x80
 80045e0:	d018      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d821      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d007      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80045ee:	e01c      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f0:	4b63      	ldr	r3, [pc, #396]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	4a62      	ldr	r2, [pc, #392]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80045fc:	e01c      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004602:	3308      	adds	r3, #8
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f001 f928 	bl	800585c <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004612:	e011      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004618:	3328      	adds	r3, #40	; 0x28
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f001 f9cf 	bl	80059c0 <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004640:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464e:	4a4c      	ldr	r2, [pc, #304]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6513      	str	r3, [r2, #80]	; 0x50
 8004654:	e003      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800466a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800466e:	2300      	movs	r3, #0
 8004670:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004674:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004678:	460b      	mov	r3, r1
 800467a:	4313      	orrs	r3, r2
 800467c:	d053      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004686:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800468a:	d035      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800468c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004690:	d82e      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004692:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004696:	d031      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004698:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800469c:	d828      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800469e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a2:	d01a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80046a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a8:	d822      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80046ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046b2:	d007      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80046b4:	e01c      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b6:	4b32      	ldr	r3, [pc, #200]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	4a31      	ldr	r2, [pc, #196]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046c2:	e01c      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c8:	3308      	adds	r3, #8
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 f8c5 	bl	800585c <RCCEx_PLL2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046d8:	e011      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046de:	3328      	adds	r3, #40	; 0x28
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 f96c 	bl	80059c0 <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046ee:	e006      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046f6:	e002      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80046f8:	bf00      	nop
 80046fa:	e000      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80046fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004706:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004712:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004716:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004718:	430b      	orrs	r3, r1
 800471a:	6593      	str	r3, [r2, #88]	; 0x58
 800471c:	e003      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004722:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004732:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004736:	2300      	movs	r3, #0
 8004738:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800473c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004740:	460b      	mov	r3, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	d056      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800474e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004752:	d038      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004758:	d831      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800475a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800475e:	d034      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004760:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004764:	d82b      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800476a:	d01d      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800476c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004770:	d825      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004776:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800477c:	e01f      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800477e:	bf00      	nop
 8004780:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004784:	4ba2      	ldr	r3, [pc, #648]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	4aa1      	ldr	r2, [pc, #644]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800478a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004790:	e01c      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004796:	3308      	adds	r3, #8
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f001 f85e 	bl	800585c <RCCEx_PLL2_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047a6:	e011      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ac:	3328      	adds	r3, #40	; 0x28
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f905 	bl	80059c0 <RCCEx_PLL3_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047bc:	e006      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047c4:	e002      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80047ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047d4:	4b8e      	ldr	r3, [pc, #568]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047e4:	4a8a      	ldr	r2, [pc, #552]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e6:	430b      	orrs	r3, r1
 80047e8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ea:	e003      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004800:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004804:	2300      	movs	r3, #0
 8004806:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800480a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800480e:	460b      	mov	r3, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	d03a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	2b30      	cmp	r3, #48	; 0x30
 800481c:	d01f      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800481e:	2b30      	cmp	r3, #48	; 0x30
 8004820:	d819      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004822:	2b20      	cmp	r3, #32
 8004824:	d00c      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004826:	2b20      	cmp	r3, #32
 8004828:	d815      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d019      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800482e:	2b10      	cmp	r3, #16
 8004830:	d111      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004832:	4b77      	ldr	r3, [pc, #476]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	4a76      	ldr	r2, [pc, #472]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800483e:	e011      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004844:	3308      	adds	r3, #8
 8004846:	2102      	movs	r1, #2
 8004848:	4618      	mov	r0, r3
 800484a:	f001 f807 	bl	800585c <RCCEx_PLL2_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004854:	e006      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800485c:	e002      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800485e:	bf00      	nop
 8004860:	e000      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004864:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800486c:	4b68      	ldr	r3, [pc, #416]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800486e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004870:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487a:	4a65      	ldr	r2, [pc, #404]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800487c:	430b      	orrs	r3, r1
 800487e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004880:	e003      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004886:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004896:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800489a:	2300      	movs	r3, #0
 800489c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80048a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4313      	orrs	r3, r2
 80048a8:	d051      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b4:	d035      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80048b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ba:	d82e      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048c0:	d031      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80048c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048c6:	d828      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048cc:	d01a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80048ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d2:	d822      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048dc:	d007      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80048de:	e01c      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e0:	4b4b      	ldr	r3, [pc, #300]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4a4a      	ldr	r2, [pc, #296]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048ec:	e01c      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f2:	3308      	adds	r3, #8
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 ffb0 	bl	800585c <RCCEx_PLL2_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004902:	e011      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004908:	3328      	adds	r3, #40	; 0x28
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f001 f857 	bl	80059c0 <RCCEx_PLL3_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004918:	e006      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004920:	e002      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004922:	bf00      	nop
 8004924:	e000      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004930:	4b37      	ldr	r3, [pc, #220]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004934:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493e:	4a34      	ldr	r2, [pc, #208]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004940:	430b      	orrs	r3, r1
 8004942:	6513      	str	r3, [r2, #80]	; 0x50
 8004944:	e003      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800494a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800494e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800495a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800495e:	2300      	movs	r3, #0
 8004960:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004964:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004968:	460b      	mov	r3, r1
 800496a:	4313      	orrs	r3, r2
 800496c:	d056      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004978:	d033      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800497a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800497e:	d82c      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004984:	d02f      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800498a:	d826      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800498c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004990:	d02b      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004992:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004996:	d820      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800499c:	d012      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800499e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049a2:	d81a      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d022      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ac:	d115      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b2:	3308      	adds	r3, #8
 80049b4:	2101      	movs	r1, #1
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 ff50 	bl	800585c <RCCEx_PLL2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049c2:	e015      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c8:	3328      	adds	r3, #40	; 0x28
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fff7 	bl	80059c0 <RCCEx_PLL3_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049d8:	e00a      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049e0:	e006      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049e2:	bf00      	nop
 80049e4:	e004      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049e6:	bf00      	nop
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10d      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a06:	4a02      	ldr	r2, [pc, #8]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6513      	str	r3, [r2, #80]	; 0x50
 8004a0c:	e006      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004a0e:	bf00      	nop
 8004a10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	d055      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a48:	d033      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a4e:	d82c      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a54:	d02f      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5a:	d826      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a60:	d02b      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004a62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a66:	d820      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6c:	d012      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a72:	d81a      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d022      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7c:	d115      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a82:	3308      	adds	r3, #8
 8004a84:	2101      	movs	r1, #1
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fee8 	bl	800585c <RCCEx_PLL2_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a92:	e015      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a98:	3328      	adds	r3, #40	; 0x28
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 ff8f 	bl	80059c0 <RCCEx_PLL3_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ab0:	e006      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ab2:	bf00      	nop
 8004ab4:	e004      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ab6:	bf00      	nop
 8004ab8:	e002      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004aba:	bf00      	nop
 8004abc:	e000      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ac8:	4ba3      	ldr	r3, [pc, #652]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ad8:	4a9f      	ldr	r2, [pc, #636]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ada:	430b      	orrs	r3, r1
 8004adc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ade:	e003      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004af4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004af8:	2300      	movs	r3, #0
 8004afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004afe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b02:	460b      	mov	r3, r1
 8004b04:	4313      	orrs	r3, r2
 8004b06:	d037      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b12:	d00e      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b18:	d816      	bhi.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b22:	d111      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b24:	4b8c      	ldr	r3, [pc, #560]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	4a8b      	ldr	r2, [pc, #556]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b30:	e00f      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b36:	3308      	adds	r3, #8
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fe8e 	bl	800585c <RCCEx_PLL2_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b46:	e004      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b4e:	e000      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b5a:	4b7f      	ldr	r3, [pc, #508]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	4a7b      	ldr	r2, [pc, #492]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	6513      	str	r3, [r2, #80]	; 0x50
 8004b6e:	e003      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	d039      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d81c      	bhi.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004be5 	.word	0x08004be5
 8004bac:	08004bb9 	.word	0x08004bb9
 8004bb0:	08004bc7 	.word	0x08004bc7
 8004bb4:	08004be5 	.word	0x08004be5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb8:	4b67      	ldr	r3, [pc, #412]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	4a66      	ldr	r2, [pc, #408]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bc4:	e00f      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bca:	3308      	adds	r3, #8
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fe44 	bl	800585c <RCCEx_PLL2_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bda:	e004      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bee:	4b5a      	ldr	r3, [pc, #360]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	f023 0103 	bic.w	r1, r3, #3
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	4a56      	ldr	r2, [pc, #344]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c02:	e003      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004c18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f000 809f 	beq.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c2e:	4b4b      	ldr	r3, [pc, #300]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a4a      	ldr	r2, [pc, #296]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c3a:	f7fd f8b1 	bl	8001da0 <HAL_GetTick>
 8004c3e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c42:	e00b      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c44:	f7fd f8ac 	bl	8001da0 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b64      	cmp	r3, #100	; 0x64
 8004c52:	d903      	bls.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c5a:	e005      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c5c:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ed      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d179      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c70:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c7c:	4053      	eors	r3, r2
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d015      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c86:	4b34      	ldr	r3, [pc, #208]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c92:	4b31      	ldr	r3, [pc, #196]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	4a30      	ldr	r2, [pc, #192]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c9e:	4b2e      	ldr	r3, [pc, #184]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	4a2d      	ldr	r2, [pc, #180]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004caa:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbe:	d118      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fd f86e 	bl	8001da0 <HAL_GetTick>
 8004cc4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc8:	e00d      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fd f869 	bl	8001da0 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cd4:	1ad2      	subs	r2, r2, r3
 8004cd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d903      	bls.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004ce4:	e005      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0eb      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d129      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0a:	d10e      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004d0c:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d1c:	091a      	lsrs	r2, r3, #4
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	4a0d      	ldr	r2, [pc, #52]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6113      	str	r3, [r2, #16]
 8004d28:	e005      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d34:	6113      	str	r3, [r2, #16]
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d46:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4c:	e00e      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004d56:	e009      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	58024800 	.word	0x58024800
 8004d60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f002 0301 	and.w	r3, r2, #1
 8004d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f000 8089 	beq.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d94:	2b28      	cmp	r3, #40	; 0x28
 8004d96:	d86b      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004e79 	.word	0x08004e79
 8004da4:	08004e71 	.word	0x08004e71
 8004da8:	08004e71 	.word	0x08004e71
 8004dac:	08004e71 	.word	0x08004e71
 8004db0:	08004e71 	.word	0x08004e71
 8004db4:	08004e71 	.word	0x08004e71
 8004db8:	08004e71 	.word	0x08004e71
 8004dbc:	08004e71 	.word	0x08004e71
 8004dc0:	08004e45 	.word	0x08004e45
 8004dc4:	08004e71 	.word	0x08004e71
 8004dc8:	08004e71 	.word	0x08004e71
 8004dcc:	08004e71 	.word	0x08004e71
 8004dd0:	08004e71 	.word	0x08004e71
 8004dd4:	08004e71 	.word	0x08004e71
 8004dd8:	08004e71 	.word	0x08004e71
 8004ddc:	08004e71 	.word	0x08004e71
 8004de0:	08004e5b 	.word	0x08004e5b
 8004de4:	08004e71 	.word	0x08004e71
 8004de8:	08004e71 	.word	0x08004e71
 8004dec:	08004e71 	.word	0x08004e71
 8004df0:	08004e71 	.word	0x08004e71
 8004df4:	08004e71 	.word	0x08004e71
 8004df8:	08004e71 	.word	0x08004e71
 8004dfc:	08004e71 	.word	0x08004e71
 8004e00:	08004e79 	.word	0x08004e79
 8004e04:	08004e71 	.word	0x08004e71
 8004e08:	08004e71 	.word	0x08004e71
 8004e0c:	08004e71 	.word	0x08004e71
 8004e10:	08004e71 	.word	0x08004e71
 8004e14:	08004e71 	.word	0x08004e71
 8004e18:	08004e71 	.word	0x08004e71
 8004e1c:	08004e71 	.word	0x08004e71
 8004e20:	08004e79 	.word	0x08004e79
 8004e24:	08004e71 	.word	0x08004e71
 8004e28:	08004e71 	.word	0x08004e71
 8004e2c:	08004e71 	.word	0x08004e71
 8004e30:	08004e71 	.word	0x08004e71
 8004e34:	08004e71 	.word	0x08004e71
 8004e38:	08004e71 	.word	0x08004e71
 8004e3c:	08004e71 	.word	0x08004e71
 8004e40:	08004e79 	.word	0x08004e79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e48:	3308      	adds	r3, #8
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fd05 	bl	800585c <RCCEx_PLL2_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e58:	e00f      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5e:	3328      	adds	r3, #40	; 0x28
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fdac 	bl	80059c0 <RCCEx_PLL3_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e6e:	e004      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e76:	e000      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e82:	4bbf      	ldr	r3, [pc, #764]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e90:	4abb      	ldr	r2, [pc, #748]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e92:	430b      	orrs	r3, r1
 8004e94:	6553      	str	r3, [r2, #84]	; 0x54
 8004e96:	e003      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	f002 0302 	and.w	r3, r2, #2
 8004eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004eb6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	d041      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec6:	2b05      	cmp	r3, #5
 8004ec8:	d824      	bhi.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004f1d 	.word	0x08004f1d
 8004ed4:	08004ee9 	.word	0x08004ee9
 8004ed8:	08004eff 	.word	0x08004eff
 8004edc:	08004f1d 	.word	0x08004f1d
 8004ee0:	08004f1d 	.word	0x08004f1d
 8004ee4:	08004f1d 	.word	0x08004f1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eec:	3308      	adds	r3, #8
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fcb3 	bl	800585c <RCCEx_PLL2_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004efc:	e00f      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f02:	3328      	adds	r3, #40	; 0x28
 8004f04:	2101      	movs	r1, #1
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fd5a 	bl	80059c0 <RCCEx_PLL3_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f1a:	e000      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f26:	4b96      	ldr	r3, [pc, #600]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f023 0107 	bic.w	r1, r3, #7
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f34:	4a92      	ldr	r2, [pc, #584]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f36:	430b      	orrs	r3, r1
 8004f38:	6553      	str	r3, [r2, #84]	; 0x54
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f002 0304 	and.w	r3, r2, #4
 8004f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	d044      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6c:	2b05      	cmp	r3, #5
 8004f6e:	d825      	bhi.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004f70:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f76:	bf00      	nop
 8004f78:	08004fc5 	.word	0x08004fc5
 8004f7c:	08004f91 	.word	0x08004f91
 8004f80:	08004fa7 	.word	0x08004fa7
 8004f84:	08004fc5 	.word	0x08004fc5
 8004f88:	08004fc5 	.word	0x08004fc5
 8004f8c:	08004fc5 	.word	0x08004fc5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f94:	3308      	adds	r3, #8
 8004f96:	2101      	movs	r1, #1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fc5f 	bl	800585c <RCCEx_PLL2_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fa4:	e00f      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004faa:	3328      	adds	r3, #40	; 0x28
 8004fac:	2101      	movs	r1, #1
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fd06 	bl	80059c0 <RCCEx_PLL3_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fba:	e004      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fce:	4b6c      	ldr	r3, [pc, #432]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f023 0107 	bic.w	r1, r3, #7
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fde:	4a68      	ldr	r2, [pc, #416]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe4:	e003      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f002 0320 	and.w	r3, r2, #32
 8004ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ffe:	2300      	movs	r3, #0
 8005000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005008:	460b      	mov	r3, r1
 800500a:	4313      	orrs	r3, r2
 800500c:	d055      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800500e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800501a:	d033      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800501c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005020:	d82c      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005026:	d02f      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502c:	d826      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800502e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005032:	d02b      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005034:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005038:	d820      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800503a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800503e:	d012      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005044:	d81a      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d022      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800504a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800504e:	d115      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005054:	3308      	adds	r3, #8
 8005056:	2100      	movs	r1, #0
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fbff 	bl	800585c <RCCEx_PLL2_Config>
 800505e:	4603      	mov	r3, r0
 8005060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005064:	e015      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506a:	3328      	adds	r3, #40	; 0x28
 800506c:	2102      	movs	r1, #2
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fca6 	bl	80059c0 <RCCEx_PLL3_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800507a:	e00a      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005082:	e006      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005084:	bf00      	nop
 8005086:	e004      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005088:	bf00      	nop
 800508a:	e002      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800508c:	bf00      	nop
 800508e:	e000      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	4a35      	ldr	r2, [pc, #212]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6553      	str	r3, [r2, #84]	; 0x54
 80050b0:	e003      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80050c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050ca:	2300      	movs	r3, #0
 80050cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4313      	orrs	r3, r2
 80050d8:	d058      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050e6:	d033      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80050e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050ec:	d82c      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	d02f      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f8:	d826      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050fe:	d02b      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005104:	d820      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510a:	d012      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800510c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005110:	d81a      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d022      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511a:	d115      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005120:	3308      	adds	r3, #8
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fb99 	bl	800585c <RCCEx_PLL2_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005130:	e015      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005136:	3328      	adds	r3, #40	; 0x28
 8005138:	2102      	movs	r1, #2
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fc40 	bl	80059c0 <RCCEx_PLL3_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005146:	e00a      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800514e:	e006      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005150:	bf00      	nop
 8005152:	e004      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005154:	bf00      	nop
 8005156:	e002      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005158:	bf00      	nop
 800515a:	e000      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800515c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10e      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005176:	4a02      	ldr	r2, [pc, #8]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005178:	430b      	orrs	r3, r1
 800517a:	6593      	str	r3, [r2, #88]	; 0x58
 800517c:	e006      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800517e:	bf00      	nop
 8005180:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800519c:	2300      	movs	r3, #0
 800519e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80051a6:	460b      	mov	r3, r1
 80051a8:	4313      	orrs	r3, r2
 80051aa:	d055      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80051ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051b8:	d033      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80051ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051be:	d82c      	bhi.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c4:	d02f      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80051c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ca:	d826      	bhi.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051d0:	d02b      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80051d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051d6:	d820      	bhi.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051dc:	d012      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80051de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051e2:	d81a      	bhi.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d022      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ec:	d115      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f2:	3308      	adds	r3, #8
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fb30 	bl	800585c <RCCEx_PLL2_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005202:	e015      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005208:	3328      	adds	r3, #40	; 0x28
 800520a:	2102      	movs	r1, #2
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fbd7 	bl	80059c0 <RCCEx_PLL3_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005218:	e00a      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005222:	bf00      	nop
 8005224:	e004      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800522e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005238:	4ba1      	ldr	r3, [pc, #644]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005244:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005248:	4a9d      	ldr	r2, [pc, #628]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800524a:	430b      	orrs	r3, r1
 800524c:	6593      	str	r3, [r2, #88]	; 0x58
 800524e:	e003      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f002 0308 	and.w	r3, r2, #8
 8005264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005268:	2300      	movs	r3, #0
 800526a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800526e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005272:	460b      	mov	r3, r1
 8005274:	4313      	orrs	r3, r2
 8005276:	d01e      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005284:	d10c      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528a:	3328      	adds	r3, #40	; 0x28
 800528c:	2102      	movs	r1, #2
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fb96 	bl	80059c0 <RCCEx_PLL3_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052a0:	4b87      	ldr	r3, [pc, #540]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b0:	4a83      	ldr	r2, [pc, #524]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052b2:	430b      	orrs	r3, r1
 80052b4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	f002 0310 	and.w	r3, r2, #16
 80052c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052c6:	2300      	movs	r3, #0
 80052c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80052d0:	460b      	mov	r3, r1
 80052d2:	4313      	orrs	r3, r2
 80052d4:	d01e      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e2:	d10c      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e8:	3328      	adds	r3, #40	; 0x28
 80052ea:	2102      	movs	r1, #2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fb67 	bl	80059c0 <RCCEx_PLL3_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052fe:	4b70      	ldr	r3, [pc, #448]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005302:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800530e:	4a6c      	ldr	r2, [pc, #432]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005310:	430b      	orrs	r3, r1
 8005312:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800532a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	d03e      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005338:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800533c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005340:	d022      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005346:	d81b      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d00b      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005352:	e015      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005358:	3308      	adds	r3, #8
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fa7d 	bl	800585c <RCCEx_PLL2_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005368:	e00f      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536e:	3328      	adds	r3, #40	; 0x28
 8005370:	2102      	movs	r1, #2
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fb24 	bl	80059c0 <RCCEx_PLL3_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800537e:	e004      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005386:	e000      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10b      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005392:	4b4b      	ldr	r3, [pc, #300]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053a2:	4a47      	ldr	r2, [pc, #284]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053a4:	430b      	orrs	r3, r1
 80053a6:	6593      	str	r3, [r2, #88]	; 0x58
 80053a8:	e003      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80053be:	67bb      	str	r3, [r7, #120]	; 0x78
 80053c0:	2300      	movs	r3, #0
 80053c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80053c8:	460b      	mov	r3, r1
 80053ca:	4313      	orrs	r3, r2
 80053cc:	d03b      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053da:	d01f      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80053dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053e0:	d818      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80053e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e6:	d003      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80053e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ec:	d007      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80053ee:	e011      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f0:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	4a32      	ldr	r2, [pc, #200]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80053fc:	e00f      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005402:	3328      	adds	r3, #40	; 0x28
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fada 	bl	80059c0 <RCCEx_PLL3_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005412:	e004      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800541a:	e000      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800541c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005426:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800542e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	4a22      	ldr	r2, [pc, #136]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005438:	430b      	orrs	r3, r1
 800543a:	6553      	str	r3, [r2, #84]	; 0x54
 800543c:	e003      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005452:	673b      	str	r3, [r7, #112]	; 0x70
 8005454:	2300      	movs	r3, #0
 8005456:	677b      	str	r3, [r7, #116]	; 0x74
 8005458:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800545c:	460b      	mov	r3, r1
 800545e:	4313      	orrs	r3, r2
 8005460:	d034      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800546c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005470:	d007      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005472:	e011      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005474:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	4a11      	ldr	r2, [pc, #68]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800547a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005480:	e00e      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005486:	3308      	adds	r3, #8
 8005488:	2102      	movs	r1, #2
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f9e6 	bl	800585c <RCCEx_PLL2_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005496:	e003      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800549e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10d      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b6:	4a02      	ldr	r2, [pc, #8]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b8:	430b      	orrs	r3, r1
 80054ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054bc:	e006      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80054be:	bf00      	nop
 80054c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80054d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80054da:	2300      	movs	r3, #0
 80054dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80054e2:	460b      	mov	r3, r1
 80054e4:	4313      	orrs	r3, r2
 80054e6:	d00c      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ec:	3328      	adds	r3, #40	; 0x28
 80054ee:	2102      	movs	r1, #2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fa65 	bl	80059c0 <RCCEx_PLL3_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800550e:	663b      	str	r3, [r7, #96]	; 0x60
 8005510:	2300      	movs	r3, #0
 8005512:	667b      	str	r3, [r7, #100]	; 0x64
 8005514:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005518:	460b      	mov	r3, r1
 800551a:	4313      	orrs	r3, r2
 800551c:	d038      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800552a:	d018      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800552c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005530:	d811      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005536:	d014      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553c:	d80b      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d011      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d106      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005548:	4bc3      	ldr	r3, [pc, #780]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4ac2      	ldr	r2, [pc, #776]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800554e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005554:	e008      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800555c:	e004      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800555e:	bf00      	nop
 8005560:	e002      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005570:	4bb9      	ldr	r3, [pc, #740]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005580:	4ab5      	ldr	r2, [pc, #724]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005582:	430b      	orrs	r3, r1
 8005584:	6553      	str	r3, [r2, #84]	; 0x54
 8005586:	e003      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800558c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800559c:	65bb      	str	r3, [r7, #88]	; 0x58
 800559e:	2300      	movs	r3, #0
 80055a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80055a6:	460b      	mov	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055ac:	4baa      	ldr	r3, [pc, #680]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80055b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ba:	4aa7      	ldr	r2, [pc, #668]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055bc:	430b      	orrs	r3, r1
 80055be:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80055cc:	653b      	str	r3, [r7, #80]	; 0x50
 80055ce:	2300      	movs	r3, #0
 80055d0:	657b      	str	r3, [r7, #84]	; 0x54
 80055d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80055dc:	4b9e      	ldr	r3, [pc, #632]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80055ec:	4a9a      	ldr	r2, [pc, #616]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055ee:	430b      	orrs	r3, r1
 80055f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80055fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005600:	2300      	movs	r3, #0
 8005602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005604:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005608:	460b      	mov	r3, r1
 800560a:	4313      	orrs	r3, r2
 800560c:	d009      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800560e:	4b92      	ldr	r3, [pc, #584]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005612:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800561c:	4a8e      	ldr	r2, [pc, #568]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800561e:	430b      	orrs	r3, r1
 8005620:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800562e:	643b      	str	r3, [r7, #64]	; 0x40
 8005630:	2300      	movs	r3, #0
 8005632:	647b      	str	r3, [r7, #68]	; 0x44
 8005634:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005638:	460b      	mov	r3, r1
 800563a:	4313      	orrs	r3, r2
 800563c:	d00e      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800563e:	4b86      	ldr	r3, [pc, #536]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	4a85      	ldr	r2, [pc, #532]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005644:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005648:	6113      	str	r3, [r2, #16]
 800564a:	4b83      	ldr	r3, [pc, #524]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800564c:	6919      	ldr	r1, [r3, #16]
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005652:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005656:	4a80      	ldr	r2, [pc, #512]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005658:	430b      	orrs	r3, r1
 800565a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
 800566a:	2300      	movs	r3, #0
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800566e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005672:	460b      	mov	r3, r1
 8005674:	4313      	orrs	r3, r2
 8005676:	d009      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005678:	4b77      	ldr	r3, [pc, #476]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800567a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	4a74      	ldr	r2, [pc, #464]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005688:	430b      	orrs	r3, r1
 800568a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005698:	633b      	str	r3, [r7, #48]	; 0x30
 800569a:	2300      	movs	r3, #0
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
 800569e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80056a2:	460b      	mov	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056a8:	4b6b      	ldr	r3, [pc, #428]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ac:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b8:	4a67      	ldr	r2, [pc, #412]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ba:	430b      	orrs	r3, r1
 80056bc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	2100      	movs	r1, #0
 80056c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80056d4:	460b      	mov	r3, r1
 80056d6:	4313      	orrs	r3, r2
 80056d8:	d011      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056de:	3308      	adds	r3, #8
 80056e0:	2100      	movs	r1, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f8ba 	bl	800585c <RCCEx_PLL2_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80056ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	2100      	movs	r1, #0
 8005708:	6239      	str	r1, [r7, #32]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
 8005710:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005714:	460b      	mov	r3, r1
 8005716:	4313      	orrs	r3, r2
 8005718:	d011      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571e:	3308      	adds	r3, #8
 8005720:	2101      	movs	r1, #1
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f89a 	bl	800585c <RCCEx_PLL2_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800572e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800573a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	2100      	movs	r1, #0
 8005748:	61b9      	str	r1, [r7, #24]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005754:	460b      	mov	r3, r1
 8005756:	4313      	orrs	r3, r2
 8005758:	d011      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575e:	3308      	adds	r3, #8
 8005760:	2102      	movs	r1, #2
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f87a 	bl	800585c <RCCEx_PLL2_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800576e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800577a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	2100      	movs	r1, #0
 8005788:	6139      	str	r1, [r7, #16]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005794:	460b      	mov	r3, r1
 8005796:	4313      	orrs	r3, r2
 8005798:	d011      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579e:	3328      	adds	r3, #40	; 0x28
 80057a0:	2100      	movs	r1, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f90c 	bl	80059c0 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80057ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	2100      	movs	r1, #0
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057d4:	460b      	mov	r3, r1
 80057d6:	4313      	orrs	r3, r2
 80057d8:	d011      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057de:	3328      	adds	r3, #40	; 0x28
 80057e0:	2101      	movs	r1, #1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f8ec 	bl	80059c0 <RCCEx_PLL3_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	2100      	movs	r1, #0
 8005808:	6039      	str	r1, [r7, #0]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005814:	460b      	mov	r3, r1
 8005816:	4313      	orrs	r3, r2
 8005818:	d011      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581e:	3328      	adds	r3, #40	; 0x28
 8005820:	2102      	movs	r1, #2
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f8cc 	bl	80059c0 <RCCEx_PLL3_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800582e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800583a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800583e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
}
 800584c:	4618      	mov	r0, r3
 800584e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005852:	46bd      	mov	sp, r7
 8005854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005858:	58024400 	.word	0x58024400

0800585c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800586a:	4b53      	ldr	r3, [pc, #332]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d101      	bne.n	800587a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e099      	b.n	80059ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800587a:	4b4f      	ldr	r3, [pc, #316]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a4e      	ldr	r2, [pc, #312]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005880:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005886:	f7fc fa8b 	bl	8001da0 <HAL_GetTick>
 800588a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800588c:	e008      	b.n	80058a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800588e:	f7fc fa87 	bl	8001da0 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e086      	b.n	80059ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058a0:	4b45      	ldr	r3, [pc, #276]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f0      	bne.n	800588e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058ac:	4b42      	ldr	r3, [pc, #264]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	031b      	lsls	r3, r3, #12
 80058ba:	493f      	ldr	r1, [pc, #252]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	628b      	str	r3, [r1, #40]	; 0x28
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	025b      	lsls	r3, r3, #9
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	3b01      	subs	r3, #1
 80058dc:	041b      	lsls	r3, r3, #16
 80058de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	061b      	lsls	r3, r3, #24
 80058ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058f0:	4931      	ldr	r1, [pc, #196]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058f6:	4b30      	ldr	r3, [pc, #192]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	492d      	ldr	r1, [pc, #180]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005904:	4313      	orrs	r3, r2
 8005906:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005908:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	f023 0220 	bic.w	r2, r3, #32
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	4928      	ldr	r1, [pc, #160]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800591a:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005920:	f023 0310 	bic.w	r3, r3, #16
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592a:	4b24      	ldr	r3, [pc, #144]	; (80059bc <RCCEx_PLL2_Config+0x160>)
 800592c:	4013      	ands	r3, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	69d2      	ldr	r2, [r2, #28]
 8005932:	00d2      	lsls	r2, r2, #3
 8005934:	4920      	ldr	r1, [pc, #128]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005936:	4313      	orrs	r3, r2
 8005938:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800593a:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005940:	f043 0310 	orr.w	r3, r3, #16
 8005944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800594c:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005956:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005958:	e00f      	b.n	800597a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d106      	bne.n	800596e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005960:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800596a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800596c:	e005      	b.n	800597a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800596e:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	4a11      	ldr	r2, [pc, #68]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005978:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800597a:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a0e      	ldr	r2, [pc, #56]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 8005980:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005986:	f7fc fa0b 	bl	8001da0 <HAL_GetTick>
 800598a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800598c:	e008      	b.n	80059a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800598e:	f7fc fa07 	bl	8001da0 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e006      	b.n	80059ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <RCCEx_PLL2_Config+0x15c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	58024400 	.word	0x58024400
 80059bc:	ffff0007 	.word	0xffff0007

080059c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059ce:	4b53      	ldr	r3, [pc, #332]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d101      	bne.n	80059de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e099      	b.n	8005b12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059de:	4b4f      	ldr	r3, [pc, #316]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a4e      	ldr	r2, [pc, #312]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 80059e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ea:	f7fc f9d9 	bl	8001da0 <HAL_GetTick>
 80059ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059f0:	e008      	b.n	8005a04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059f2:	f7fc f9d5 	bl	8001da0 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e086      	b.n	8005b12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a04:	4b45      	ldr	r3, [pc, #276]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f0      	bne.n	80059f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a10:	4b42      	ldr	r3, [pc, #264]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	051b      	lsls	r3, r3, #20
 8005a1e:	493f      	ldr	r1, [pc, #252]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	628b      	str	r3, [r1, #40]	; 0x28
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	025b      	lsls	r3, r3, #9
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	041b      	lsls	r3, r3, #16
 8005a42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	061b      	lsls	r3, r3, #24
 8005a50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a54:	4931      	ldr	r1, [pc, #196]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a5a:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	492d      	ldr	r1, [pc, #180]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	4928      	ldr	r1, [pc, #160]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a7e:	4b27      	ldr	r3, [pc, #156]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a8a:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a8e:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <RCCEx_PLL3_Config+0x160>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	69d2      	ldr	r2, [r2, #28]
 8005a96:	00d2      	lsls	r2, r2, #3
 8005a98:	4920      	ldr	r1, [pc, #128]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a9e:	4b1f      	ldr	r3, [pc, #124]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	4a1e      	ldr	r2, [pc, #120]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d106      	bne.n	8005abe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ab0:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005ab6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005aba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005abc:	e00f      	b.n	8005ade <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d106      	bne.n	8005ad2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005aca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ace:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ad0:	e005      	b.n	8005ade <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ad2:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	4a11      	ldr	r2, [pc, #68]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005ad8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005adc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ade:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a0e      	ldr	r2, [pc, #56]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aea:	f7fc f959 	bl	8001da0 <HAL_GetTick>
 8005aee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005af0:	e008      	b.n	8005b04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005af2:	f7fc f955 	bl	8001da0 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e006      	b.n	8005b12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <RCCEx_PLL3_Config+0x15c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	ffff0007 	.word	0xffff0007

08005b24 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e10f      	b.n	8005d56 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a87      	ldr	r2, [pc, #540]	; (8005d60 <HAL_SPI_Init+0x23c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00f      	beq.n	8005b66 <HAL_SPI_Init+0x42>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a86      	ldr	r2, [pc, #536]	; (8005d64 <HAL_SPI_Init+0x240>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00a      	beq.n	8005b66 <HAL_SPI_Init+0x42>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a84      	ldr	r2, [pc, #528]	; (8005d68 <HAL_SPI_Init+0x244>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d005      	beq.n	8005b66 <HAL_SPI_Init+0x42>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	2b0f      	cmp	r3, #15
 8005b60:	d901      	bls.n	8005b66 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e0f7      	b.n	8005d56 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f900 	bl	8005d6c <SPI_GetPacketSize>
 8005b6c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a7b      	ldr	r2, [pc, #492]	; (8005d60 <HAL_SPI_Init+0x23c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00c      	beq.n	8005b92 <HAL_SPI_Init+0x6e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a79      	ldr	r2, [pc, #484]	; (8005d64 <HAL_SPI_Init+0x240>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <HAL_SPI_Init+0x6e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a78      	ldr	r2, [pc, #480]	; (8005d68 <HAL_SPI_Init+0x244>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d002      	beq.n	8005b92 <HAL_SPI_Init+0x6e>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d811      	bhi.n	8005bb6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005b96:	4a72      	ldr	r2, [pc, #456]	; (8005d60 <HAL_SPI_Init+0x23c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a70      	ldr	r2, [pc, #448]	; (8005d64 <HAL_SPI_Init+0x240>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_SPI_Init+0x8c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a6f      	ldr	r2, [pc, #444]	; (8005d68 <HAL_SPI_Init+0x244>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d104      	bne.n	8005bba <HAL_SPI_Init+0x96>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d901      	bls.n	8005bba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e0cd      	b.n	8005d56 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb fe12 	bl	80017f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005bf6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c00:	d119      	bne.n	8005c36 <HAL_SPI_Init+0x112>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c0a:	d103      	bne.n	8005c14 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10c      	bne.n	8005c36 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005c20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c24:	d107      	bne.n	8005c36 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00f      	beq.n	8005c62 <HAL_SPI_Init+0x13e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d90b      	bls.n	8005c62 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	e007      	b.n	8005c72 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69da      	ldr	r2, [r3, #28]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	ea42 0103 	orr.w	r1, r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd2:	ea42 0103 	orr.w	r1, r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d113      	bne.n	8005d12 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cfc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40013000 	.word	0x40013000
 8005d64:	40003800 	.word	0x40003800
 8005d68:	40003c00 	.word	0x40003c00

08005d6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3307      	adds	r3, #7
 8005d8a:	08db      	lsrs	r3, r3, #3
 8005d8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	fb02 f303 	mul.w	r3, r2, r3
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e049      	b.n	8005e48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fb ff17 	bl	8001bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	4619      	mov	r1, r3
 8005de0:	4610      	mov	r0, r2
 8005de2:	f000 f92d 	bl	8006040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e0dc      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x1d6>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	4b6a      	ldr	r3, [pc, #424]	; (8006030 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a64      	ldr	r2, [pc, #400]	; (8006034 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	f000 80a9 	beq.w	8005ffa <HAL_TIM_ConfigClockSource+0x1aa>
 8005ea8:	4a62      	ldr	r2, [pc, #392]	; (8006034 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	f200 80ae 	bhi.w	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005eb0:	4a61      	ldr	r2, [pc, #388]	; (8006038 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	f000 80a1 	beq.w	8005ffa <HAL_TIM_ConfigClockSource+0x1aa>
 8005eb8:	4a5f      	ldr	r2, [pc, #380]	; (8006038 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	f200 80a6 	bhi.w	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005ec0:	4a5e      	ldr	r2, [pc, #376]	; (800603c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	f000 8099 	beq.w	8005ffa <HAL_TIM_ConfigClockSource+0x1aa>
 8005ec8:	4a5c      	ldr	r2, [pc, #368]	; (800603c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	f200 809e 	bhi.w	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005ed0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ed4:	f000 8091 	beq.w	8005ffa <HAL_TIM_ConfigClockSource+0x1aa>
 8005ed8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005edc:	f200 8096 	bhi.w	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee4:	f000 8089 	beq.w	8005ffa <HAL_TIM_ConfigClockSource+0x1aa>
 8005ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eec:	f200 808e 	bhi.w	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef4:	d03e      	beq.n	8005f74 <HAL_TIM_ConfigClockSource+0x124>
 8005ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efa:	f200 8087 	bhi.w	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f02:	f000 8086 	beq.w	8006012 <HAL_TIM_ConfigClockSource+0x1c2>
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0a:	d87f      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f0c:	2b70      	cmp	r3, #112	; 0x70
 8005f0e:	d01a      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0xf6>
 8005f10:	2b70      	cmp	r3, #112	; 0x70
 8005f12:	d87b      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f14:	2b60      	cmp	r3, #96	; 0x60
 8005f16:	d050      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x16a>
 8005f18:	2b60      	cmp	r3, #96	; 0x60
 8005f1a:	d877      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f1c:	2b50      	cmp	r3, #80	; 0x50
 8005f1e:	d03c      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0x14a>
 8005f20:	2b50      	cmp	r3, #80	; 0x50
 8005f22:	d873      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d058      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x18a>
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d86f      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f2c:	2b30      	cmp	r3, #48	; 0x30
 8005f2e:	d064      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x1aa>
 8005f30:	2b30      	cmp	r3, #48	; 0x30
 8005f32:	d86b      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d060      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x1aa>
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d867      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d05c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x1aa>
 8005f40:	2b10      	cmp	r3, #16
 8005f42:	d05a      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x1aa>
 8005f44:	e062      	b.n	800600c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6899      	ldr	r1, [r3, #8]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f000 f98b 	bl	8006270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	609a      	str	r2, [r3, #8]
      break;
 8005f72:	e04f      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6899      	ldr	r1, [r3, #8]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f000 f974 	bl	8006270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f96:	609a      	str	r2, [r3, #8]
      break;
 8005f98:	e03c      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6859      	ldr	r1, [r3, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f000 f8e4 	bl	8006174 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2150      	movs	r1, #80	; 0x50
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 f93e 	bl	8006234 <TIM_ITRx_SetConfig>
      break;
 8005fb8:	e02c      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f000 f903 	bl	80061d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2160      	movs	r1, #96	; 0x60
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 f92e 	bl	8006234 <TIM_ITRx_SetConfig>
      break;
 8005fd8:	e01c      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f000 f8c4 	bl	8006174 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2140      	movs	r1, #64	; 0x40
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f91e 	bl	8006234 <TIM_ITRx_SetConfig>
      break;
 8005ff8:	e00c      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f000 f915 	bl	8006234 <TIM_ITRx_SetConfig>
      break;
 800600a:	e003      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
      break;
 8006010:	e000      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	ffceff88 	.word	0xffceff88
 8006034:	00100040 	.word	0x00100040
 8006038:	00100030 	.word	0x00100030
 800603c:	00100020 	.word	0x00100020

08006040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a40      	ldr	r2, [pc, #256]	; (8006154 <TIM_Base_SetConfig+0x114>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d013      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d00f      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a3d      	ldr	r2, [pc, #244]	; (8006158 <TIM_Base_SetConfig+0x118>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00b      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a3c      	ldr	r2, [pc, #240]	; (800615c <TIM_Base_SetConfig+0x11c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d007      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a3b      	ldr	r2, [pc, #236]	; (8006160 <TIM_Base_SetConfig+0x120>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a3a      	ldr	r2, [pc, #232]	; (8006164 <TIM_Base_SetConfig+0x124>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d108      	bne.n	8006092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a2f      	ldr	r2, [pc, #188]	; (8006154 <TIM_Base_SetConfig+0x114>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01f      	beq.n	80060da <TIM_Base_SetConfig+0x9a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a0:	d01b      	beq.n	80060da <TIM_Base_SetConfig+0x9a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a2c      	ldr	r2, [pc, #176]	; (8006158 <TIM_Base_SetConfig+0x118>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d017      	beq.n	80060da <TIM_Base_SetConfig+0x9a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a2b      	ldr	r2, [pc, #172]	; (800615c <TIM_Base_SetConfig+0x11c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <TIM_Base_SetConfig+0x9a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2a      	ldr	r2, [pc, #168]	; (8006160 <TIM_Base_SetConfig+0x120>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00f      	beq.n	80060da <TIM_Base_SetConfig+0x9a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a29      	ldr	r2, [pc, #164]	; (8006164 <TIM_Base_SetConfig+0x124>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00b      	beq.n	80060da <TIM_Base_SetConfig+0x9a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a28      	ldr	r2, [pc, #160]	; (8006168 <TIM_Base_SetConfig+0x128>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d007      	beq.n	80060da <TIM_Base_SetConfig+0x9a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a27      	ldr	r2, [pc, #156]	; (800616c <TIM_Base_SetConfig+0x12c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d003      	beq.n	80060da <TIM_Base_SetConfig+0x9a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a26      	ldr	r2, [pc, #152]	; (8006170 <TIM_Base_SetConfig+0x130>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d108      	bne.n	80060ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a10      	ldr	r2, [pc, #64]	; (8006154 <TIM_Base_SetConfig+0x114>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00f      	beq.n	8006138 <TIM_Base_SetConfig+0xf8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a12      	ldr	r2, [pc, #72]	; (8006164 <TIM_Base_SetConfig+0x124>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00b      	beq.n	8006138 <TIM_Base_SetConfig+0xf8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a11      	ldr	r2, [pc, #68]	; (8006168 <TIM_Base_SetConfig+0x128>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d007      	beq.n	8006138 <TIM_Base_SetConfig+0xf8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a10      	ldr	r2, [pc, #64]	; (800616c <TIM_Base_SetConfig+0x12c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_Base_SetConfig+0xf8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a0f      	ldr	r2, [pc, #60]	; (8006170 <TIM_Base_SetConfig+0x130>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d103      	bne.n	8006140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	615a      	str	r2, [r3, #20]
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40010000 	.word	0x40010000
 8006158:	40000400 	.word	0x40000400
 800615c:	40000800 	.word	0x40000800
 8006160:	40000c00 	.word	0x40000c00
 8006164:	40010400 	.word	0x40010400
 8006168:	40014000 	.word	0x40014000
 800616c:	40014400 	.word	0x40014400
 8006170:	40014800 	.word	0x40014800

08006174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f023 0201 	bic.w	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800619e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 030a 	bic.w	r3, r3, #10
 80061b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b087      	sub	sp, #28
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	f023 0210 	bic.w	r2, r3, #16
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	031b      	lsls	r3, r3, #12
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800620e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4b09      	ldr	r3, [pc, #36]	; (800626c <TIM_ITRx_SetConfig+0x38>)
 8006248:	4013      	ands	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4313      	orrs	r3, r2
 8006252:	f043 0307 	orr.w	r3, r3, #7
 8006256:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	609a      	str	r2, [r3, #8]
}
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	ffcfff8f 	.word	0xffcfff8f

08006270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800628a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	431a      	orrs	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4313      	orrs	r3, r2
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	609a      	str	r2, [r3, #8]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e06d      	b.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a30      	ldr	r2, [pc, #192]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2f      	ldr	r2, [pc, #188]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d108      	bne.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006302:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006314:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a20      	ldr	r2, [pc, #128]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d022      	beq.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633a:	d01d      	beq.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d018      	beq.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d013      	beq.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1a      	ldr	r2, [pc, #104]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00e      	beq.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d009      	beq.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a16      	ldr	r2, [pc, #88]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d10c      	bne.n	8006392 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800637e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	4313      	orrs	r3, r2
 8006388:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	40010000 	.word	0x40010000
 80063b4:	40010400 	.word	0x40010400
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40001800 	.word	0x40001800
 80063c8:	40014000 	.word	0x40014000

080063cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d165      	bne.n	80064ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4a41      	ldr	r2, [pc, #260]	; (80064e8 <USB_SetTurnaroundTime+0x11c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d906      	bls.n	80063f6 <USB_SetTurnaroundTime+0x2a>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4a40      	ldr	r2, [pc, #256]	; (80064ec <USB_SetTurnaroundTime+0x120>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d202      	bcs.n	80063f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063f0:	230f      	movs	r3, #15
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e062      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4a3c      	ldr	r2, [pc, #240]	; (80064ec <USB_SetTurnaroundTime+0x120>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d306      	bcc.n	800640c <USB_SetTurnaroundTime+0x40>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4a3b      	ldr	r2, [pc, #236]	; (80064f0 <USB_SetTurnaroundTime+0x124>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d202      	bcs.n	800640c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006406:	230e      	movs	r3, #14
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	e057      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4a38      	ldr	r2, [pc, #224]	; (80064f0 <USB_SetTurnaroundTime+0x124>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d306      	bcc.n	8006422 <USB_SetTurnaroundTime+0x56>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4a37      	ldr	r2, [pc, #220]	; (80064f4 <USB_SetTurnaroundTime+0x128>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d202      	bcs.n	8006422 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800641c:	230d      	movs	r3, #13
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e04c      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4a33      	ldr	r2, [pc, #204]	; (80064f4 <USB_SetTurnaroundTime+0x128>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d306      	bcc.n	8006438 <USB_SetTurnaroundTime+0x6c>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4a32      	ldr	r2, [pc, #200]	; (80064f8 <USB_SetTurnaroundTime+0x12c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d802      	bhi.n	8006438 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006432:	230c      	movs	r3, #12
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	e041      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4a2f      	ldr	r2, [pc, #188]	; (80064f8 <USB_SetTurnaroundTime+0x12c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d906      	bls.n	800644e <USB_SetTurnaroundTime+0x82>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <USB_SetTurnaroundTime+0x130>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d802      	bhi.n	800644e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006448:	230b      	movs	r3, #11
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	e036      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4a2a      	ldr	r2, [pc, #168]	; (80064fc <USB_SetTurnaroundTime+0x130>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d906      	bls.n	8006464 <USB_SetTurnaroundTime+0x98>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4a29      	ldr	r2, [pc, #164]	; (8006500 <USB_SetTurnaroundTime+0x134>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d802      	bhi.n	8006464 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800645e:	230a      	movs	r3, #10
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	e02b      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4a26      	ldr	r2, [pc, #152]	; (8006500 <USB_SetTurnaroundTime+0x134>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d906      	bls.n	800647a <USB_SetTurnaroundTime+0xae>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4a25      	ldr	r2, [pc, #148]	; (8006504 <USB_SetTurnaroundTime+0x138>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d202      	bcs.n	800647a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006474:	2309      	movs	r3, #9
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e020      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4a21      	ldr	r2, [pc, #132]	; (8006504 <USB_SetTurnaroundTime+0x138>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d306      	bcc.n	8006490 <USB_SetTurnaroundTime+0xc4>
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	4a20      	ldr	r2, [pc, #128]	; (8006508 <USB_SetTurnaroundTime+0x13c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d802      	bhi.n	8006490 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800648a:	2308      	movs	r3, #8
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e015      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <USB_SetTurnaroundTime+0x13c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d906      	bls.n	80064a6 <USB_SetTurnaroundTime+0xda>
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4a1c      	ldr	r2, [pc, #112]	; (800650c <USB_SetTurnaroundTime+0x140>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d202      	bcs.n	80064a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064a0:	2307      	movs	r3, #7
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	e00a      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064a6:	2306      	movs	r3, #6
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	e007      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d102      	bne.n	80064b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064b2:	2309      	movs	r3, #9
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e001      	b.n	80064bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064b8:	2309      	movs	r3, #9
 80064ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	029b      	lsls	r3, r3, #10
 80064d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80064d4:	431a      	orrs	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	00d8acbf 	.word	0x00d8acbf
 80064ec:	00e4e1c0 	.word	0x00e4e1c0
 80064f0:	00f42400 	.word	0x00f42400
 80064f4:	01067380 	.word	0x01067380
 80064f8:	011a499f 	.word	0x011a499f
 80064fc:	01312cff 	.word	0x01312cff
 8006500:	014ca43f 	.word	0x014ca43f
 8006504:	016e3600 	.word	0x016e3600
 8006508:	01a6ab1f 	.word	0x01a6ab1f
 800650c:	01e84800 	.word	0x01e84800

08006510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3301      	adds	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4a13      	ldr	r2, [pc, #76]	; (8006574 <USB_FlushTxFifo+0x64>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d901      	bls.n	8006530 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e01b      	b.n	8006568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	daf2      	bge.n	800651e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	019b      	lsls	r3, r3, #6
 8006540:	f043 0220 	orr.w	r2, r3, #32
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a08      	ldr	r2, [pc, #32]	; (8006574 <USB_FlushTxFifo+0x64>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e006      	b.n	8006568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b20      	cmp	r3, #32
 8006564:	d0f0      	beq.n	8006548 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	00030d40 	.word	0x00030d40

08006578 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 0306 	and.w	r3, r3, #6
 8006590:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006598:	2300      	movs	r3, #0
 800659a:	75fb      	strb	r3, [r7, #23]
 800659c:	e00a      	b.n	80065b4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d002      	beq.n	80065aa <USB_GetDevSpeed+0x32>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b06      	cmp	r3, #6
 80065a8:	d102      	bne.n	80065b0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065aa:	2302      	movs	r3, #2
 80065ac:	75fb      	strb	r3, [r7, #23]
 80065ae:	e001      	b.n	80065b4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065b0:	230f      	movs	r3, #15
 80065b2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d139      	bne.n	8006654 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	2101      	movs	r1, #1
 80065f2:	fa01 f303 	lsl.w	r3, r1, r3
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	68f9      	ldr	r1, [r7, #12]
 80065fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065fe:	4313      	orrs	r3, r2
 8006600:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d153      	bne.n	80066c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	791b      	ldrb	r3, [r3, #4]
 8006632:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006634:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	059b      	lsls	r3, r3, #22
 800663a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800663c:	431a      	orrs	r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	0159      	lsls	r1, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	440b      	add	r3, r1
 8006646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664a:	4619      	mov	r1, r3
 800664c:	4b20      	ldr	r3, [pc, #128]	; (80066d0 <USB_ActivateEndpoint+0x10c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]
 8006652:	e035      	b.n	80066c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	2101      	movs	r1, #1
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	68f9      	ldr	r1, [r7, #12]
 800666e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006672:	4313      	orrs	r3, r2
 8006674:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d119      	bne.n	80066c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	791b      	ldrb	r3, [r3, #4]
 80066a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066a8:	430b      	orrs	r3, r1
 80066aa:	431a      	orrs	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	0159      	lsls	r1, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	440b      	add	r3, r1
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	4619      	mov	r1, r3
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <USB_ActivateEndpoint+0x10c>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	10008000 	.word	0x10008000

080066d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	f040 8181 	bne.w	80069f8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d132      	bne.n	8006764 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	0159      	lsls	r1, r3, #5
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	440b      	add	r3, r1
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	4619      	mov	r1, r3
 800671a:	4ba5      	ldr	r3, [pc, #660]	; (80069b0 <USB_EPStartXfer+0x2dc>)
 800671c:	4013      	ands	r3, r2
 800671e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800673e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	0159      	lsls	r1, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	440b      	add	r3, r1
 8006756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675a:	4619      	mov	r1, r3
 800675c:	4b95      	ldr	r3, [pc, #596]	; (80069b4 <USB_EPStartXfer+0x2e0>)
 800675e:	4013      	ands	r3, r2
 8006760:	610b      	str	r3, [r1, #16]
 8006762:	e092      	b.n	800688a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	0159      	lsls	r1, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	440b      	add	r3, r1
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	4619      	mov	r1, r3
 8006780:	4b8c      	ldr	r3, [pc, #560]	; (80069b4 <USB_EPStartXfer+0x2e0>)
 8006782:	4013      	ands	r3, r2
 8006784:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	0159      	lsls	r1, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	440b      	add	r3, r1
 800679c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a0:	4619      	mov	r1, r3
 80067a2:	4b83      	ldr	r3, [pc, #524]	; (80069b0 <USB_EPStartXfer+0x2dc>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d11a      	bne.n	80067e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d903      	bls.n	80067c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067e0:	6113      	str	r3, [r2, #16]
 80067e2:	e01b      	b.n	800681c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6919      	ldr	r1, [r3, #16]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	440b      	add	r3, r1
 80067fc:	1e59      	subs	r1, r3, #1
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	fbb1 f3f3 	udiv	r3, r1, r3
 8006806:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006808:	4b6b      	ldr	r3, [pc, #428]	; (80069b8 <USB_EPStartXfer+0x2e4>)
 800680a:	400b      	ands	r3, r1
 800680c:	69b9      	ldr	r1, [r7, #24]
 800680e:	0148      	lsls	r0, r1, #5
 8006810:	69f9      	ldr	r1, [r7, #28]
 8006812:	4401      	add	r1, r0
 8006814:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006818:	4313      	orrs	r3, r2
 800681a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006832:	69b9      	ldr	r1, [r7, #24]
 8006834:	0148      	lsls	r0, r1, #5
 8006836:	69f9      	ldr	r1, [r7, #28]
 8006838:	4401      	add	r1, r0
 800683a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800683e:	4313      	orrs	r3, r2
 8006840:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	791b      	ldrb	r3, [r3, #4]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d11f      	bne.n	800688a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006864:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006868:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	440a      	add	r2, r1
 8006880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006884:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006888:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d14b      	bne.n	8006928 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	461a      	mov	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	791b      	ldrb	r3, [r3, #4]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d128      	bne.n	8006906 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d110      	bne.n	80068e6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e00f      	b.n	8006906 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006904:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	0151      	lsls	r1, r2, #5
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	440a      	add	r2, r1
 800691c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006920:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e16a      	b.n	8006bfe <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006946:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	791b      	ldrb	r3, [r3, #4]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d015      	beq.n	800697c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8152 	beq.w	8006bfe <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	2101      	movs	r1, #1
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	69f9      	ldr	r1, [r7, #28]
 8006972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006976:	4313      	orrs	r3, r2
 8006978:	634b      	str	r3, [r1, #52]	; 0x34
 800697a:	e140      	b.n	8006bfe <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d117      	bne.n	80069bc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e016      	b.n	80069dc <USB_EPStartXfer+0x308>
 80069ae:	bf00      	nop
 80069b0:	e007ffff 	.word	0xe007ffff
 80069b4:	fff80000 	.word	0xfff80000
 80069b8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	68d9      	ldr	r1, [r3, #12]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	b298      	uxth	r0, r3
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	4603      	mov	r3, r0
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f9b9 	bl	8006d68 <USB_WritePacket>
 80069f6:	e102      	b.n	8006bfe <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	0159      	lsls	r1, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	440b      	add	r3, r1
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a12:	4619      	mov	r1, r3
 8006a14:	4b7c      	ldr	r3, [pc, #496]	; (8006c08 <USB_EPStartXfer+0x534>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	0159      	lsls	r1, r3, #5
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	440b      	add	r3, r1
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	4619      	mov	r1, r3
 8006a36:	4b75      	ldr	r3, [pc, #468]	; (8006c0c <USB_EPStartXfer+0x538>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d12f      	bne.n	8006aa2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a70:	69b9      	ldr	r1, [r7, #24]
 8006a72:	0148      	lsls	r0, r1, #5
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	4401      	add	r1, r0
 8006a78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a9e:	6113      	str	r3, [r2, #16]
 8006aa0:	e05f      	b.n	8006b62 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d123      	bne.n	8006af2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ac0:	69b9      	ldr	r1, [r7, #24]
 8006ac2:	0148      	lsls	r0, r1, #5
 8006ac4:	69f9      	ldr	r1, [r7, #28]
 8006ac6:	4401      	add	r1, r0
 8006ac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006acc:	4313      	orrs	r3, r2
 8006ace:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aee:	6113      	str	r3, [r2, #16]
 8006af0:	e037      	b.n	8006b62 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	4413      	add	r3, r2
 8006afc:	1e5a      	subs	r2, r3, #1
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b06:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	8afa      	ldrh	r2, [r7, #22]
 8006b0e:	fb03 f202 	mul.w	r2, r3, r2
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	8afb      	ldrh	r3, [r7, #22]
 8006b26:	04d9      	lsls	r1, r3, #19
 8006b28:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <USB_EPStartXfer+0x53c>)
 8006b2a:	400b      	ands	r3, r1
 8006b2c:	69b9      	ldr	r1, [r7, #24]
 8006b2e:	0148      	lsls	r0, r1, #5
 8006b30:	69f9      	ldr	r1, [r7, #28]
 8006b32:	4401      	add	r1, r0
 8006b34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b52:	69b9      	ldr	r1, [r7, #24]
 8006b54:	0148      	lsls	r0, r1, #5
 8006b56:	69f9      	ldr	r1, [r7, #28]
 8006b58:	4401      	add	r1, r0
 8006b5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d10d      	bne.n	8006b84 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	68d9      	ldr	r1, [r3, #12]
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	460a      	mov	r2, r1
 8006b82:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	791b      	ldrb	r3, [r3, #4]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d128      	bne.n	8006bde <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d110      	bne.n	8006bbe <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	e00f      	b.n	8006bde <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	0151      	lsls	r1, r2, #5
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bdc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	fff80000 	.word	0xfff80000
 8006c0c:	e007ffff 	.word	0xe007ffff
 8006c10:	1ff80000 	.word	0x1ff80000

08006c14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d14a      	bne.n	8006cc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4a:	f040 8086 	bne.w	8006d5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	7812      	ldrb	r2, [r2, #0]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d902      	bls.n	8006cac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8006caa:	e056      	b.n	8006d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc4:	d0e7      	beq.n	8006c96 <USB_EPStopXfer+0x82>
 8006cc6:	e048      	b.n	8006d5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce0:	d13b      	bne.n	8006d5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	7812      	ldrb	r2, [r2, #0]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d902      	bls.n	8006d40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d3e:	e00c      	b.n	8006d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d58:	d0e7      	beq.n	8006d2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	; 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	460b      	mov	r3, r1
 8006d78:	71fb      	strb	r3, [r7, #7]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d123      	bne.n	8006dd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d8e:	88bb      	ldrh	r3, [r7, #4]
 8006d90:	3303      	adds	r3, #3
 8006d92:	089b      	lsrs	r3, r3, #2
 8006d94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e018      	b.n	8006dce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	031a      	lsls	r2, r3, #12
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da8:	461a      	mov	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	3301      	adds	r3, #1
 8006dba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d3e2      	bcc.n	8006d9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3724      	adds	r7, #36	; 0x24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b08b      	sub	sp, #44	; 0x2c
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	e014      	b.n	8006e3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	3301      	adds	r3, #1
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	3301      	adds	r3, #1
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	3301      	adds	r3, #1
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	3301      	adds	r3, #1
 8006e38:	623b      	str	r3, [r7, #32]
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d3e6      	bcc.n	8006e10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e42:	8bfb      	ldrh	r3, [r7, #30]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01e      	beq.n	8006e86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e52:	461a      	mov	r2, r3
 8006e54:	f107 0310 	add.w	r3, r7, #16
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	701a      	strb	r2, [r3, #0]
      i++;
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	3301      	adds	r3, #1
 8006e72:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	3301      	adds	r3, #1
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e7a:	8bfb      	ldrh	r3, [r7, #30]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e80:	8bfb      	ldrh	r3, [r7, #30]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1ea      	bne.n	8006e5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	372c      	adds	r7, #44	; 0x2c
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	785b      	ldrb	r3, [r3, #1]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d12c      	bne.n	8006f0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	db12      	blt.n	8006ee8 <USB_EPSetStall+0x54>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00f      	beq.n	8006ee8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ee6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e02b      	b.n	8006f62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	db12      	blt.n	8006f42 <USB_EPSetStall+0xae>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00f      	beq.n	8006f42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d128      	bne.n	8006fde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	791b      	ldrb	r3, [r3, #4]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d003      	beq.n	8006fbc <USB_EPClearStall+0x4c>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	791b      	ldrb	r3, [r3, #4]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d138      	bne.n	800702e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	e027      	b.n	800702e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	791b      	ldrb	r3, [r3, #4]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d003      	beq.n	800700e <USB_EPClearStall+0x9e>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	791b      	ldrb	r3, [r3, #4]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d10f      	bne.n	800702e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800705a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800705e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007070:	68f9      	ldr	r1, [r7, #12]
 8007072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007076:	4313      	orrs	r3, r2
 8007078:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4013      	ands	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070a0:	68fb      	ldr	r3, [r7, #12]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	4013      	ands	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	0c1b      	lsrs	r3, r3, #16
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	4013      	ands	r3, r2
 8007104:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	b29b      	uxth	r3, r3
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007144:	68bb      	ldr	r3, [r7, #8]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007152:	b480      	push	{r7}
 8007154:	b087      	sub	sp, #28
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007174:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	fa22 f303 	lsr.w	r3, r2, r3
 8007182:	01db      	lsls	r3, r3, #7
 8007184:	b2db      	uxtb	r3, r3
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4013      	ands	r3, r2
 800719e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071a0:	68bb      	ldr	r3, [r7, #8]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f003 0301 	and.w	r3, r3, #1
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
	...

080071cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e6:	4619      	mov	r1, r3
 80071e8:	4b09      	ldr	r3, [pc, #36]	; (8007210 <USB_ActivateSetup+0x44>)
 80071ea:	4013      	ands	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007200:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	fffff800 	.word	0xfffff800

08007214 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	460b      	mov	r3, r1
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	333c      	adds	r3, #60	; 0x3c
 800722a:	3304      	adds	r3, #4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	4a26      	ldr	r2, [pc, #152]	; (80072cc <USB_EP0_OutStart+0xb8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d90a      	bls.n	800724e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007248:	d101      	bne.n	800724e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	e037      	b.n	80072be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	461a      	mov	r2, r3
 8007256:	2300      	movs	r3, #0
 8007258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800726c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800727c:	f043 0318 	orr.w	r3, r3, #24
 8007280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007290:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007294:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d10f      	bne.n	80072bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	4f54300a 	.word	0x4f54300a

080072d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d009      	beq.n	8007314 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	4611      	mov	r1, r2
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
 8007310:	4603      	mov	r3, r0
 8007312:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007344:	2303      	movs	r3, #3
 8007346:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f001 f8b8 	bl	80084da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007378:	461a      	mov	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	2b02      	cmp	r3, #2
 800738c:	d01a      	beq.n	80073c4 <USBD_LL_SetupStage+0x72>
 800738e:	2b02      	cmp	r3, #2
 8007390:	d822      	bhi.n	80073d8 <USBD_LL_SetupStage+0x86>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <USBD_LL_SetupStage+0x4a>
 8007396:	2b01      	cmp	r3, #1
 8007398:	d00a      	beq.n	80073b0 <USBD_LL_SetupStage+0x5e>
 800739a:	e01d      	b.n	80073d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fb0f 	bl	80079c8 <USBD_StdDevReq>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
      break;
 80073ae:	e020      	b.n	80073f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fb77 	bl	8007aac <USBD_StdItfReq>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]
      break;
 80073c2:	e016      	b.n	80073f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fbd9 	bl	8007b84 <USBD_StdEPReq>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]
      break;
 80073d6:	e00c      	b.n	80073f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fa3c 	bl	8008864 <USBD_LL_StallEP>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]
      break;
 80073f0:	bf00      	nop
  }

  return ret;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	460b      	mov	r3, r1
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d16e      	bne.n	80074f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800741a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007422:	2b03      	cmp	r3, #3
 8007424:	f040 8098 	bne.w	8007558 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	429a      	cmp	r2, r3
 8007432:	d913      	bls.n	800745c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	1ad2      	subs	r2, r2, r3
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	4293      	cmp	r3, r2
 800744c:	bf28      	it	cs
 800744e:	4613      	movcs	r3, r2
 8007450:	461a      	mov	r2, r3
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f001 f8b7 	bl	80085c8 <USBD_CtlContinueRx>
 800745a:	e07d      	b.n	8007558 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007462:	f003 031f 	and.w	r3, r3, #31
 8007466:	2b02      	cmp	r3, #2
 8007468:	d014      	beq.n	8007494 <USBD_LL_DataOutStage+0x98>
 800746a:	2b02      	cmp	r3, #2
 800746c:	d81d      	bhi.n	80074aa <USBD_LL_DataOutStage+0xae>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <USBD_LL_DataOutStage+0x7c>
 8007472:	2b01      	cmp	r3, #1
 8007474:	d003      	beq.n	800747e <USBD_LL_DataOutStage+0x82>
 8007476:	e018      	b.n	80074aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	75bb      	strb	r3, [r7, #22]
            break;
 800747c:	e018      	b.n	80074b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007484:	b2db      	uxtb	r3, r3
 8007486:	4619      	mov	r1, r3
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fa64 	bl	8007956 <USBD_CoreFindIF>
 800748e:	4603      	mov	r3, r0
 8007490:	75bb      	strb	r3, [r7, #22]
            break;
 8007492:	e00d      	b.n	80074b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800749a:	b2db      	uxtb	r3, r3
 800749c:	4619      	mov	r1, r3
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fa66 	bl	8007970 <USBD_CoreFindEP>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75bb      	strb	r3, [r7, #22]
            break;
 80074a8:	e002      	b.n	80074b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75bb      	strb	r3, [r7, #22]
            break;
 80074ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80074b0:	7dbb      	ldrb	r3, [r7, #22]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d119      	bne.n	80074ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d113      	bne.n	80074ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80074c2:	7dba      	ldrb	r2, [r7, #22]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	32ae      	adds	r2, #174	; 0xae
 80074c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80074d2:	7dba      	ldrb	r2, [r7, #22]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074da:	7dba      	ldrb	r2, [r7, #22]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	32ae      	adds	r2, #174	; 0xae
 80074e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f001 f87d 	bl	80085ea <USBD_CtlSendStatus>
 80074f0:	e032      	b.n	8007558 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80074f2:	7afb      	ldrb	r3, [r7, #11]
 80074f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	4619      	mov	r1, r3
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fa37 	bl	8007970 <USBD_CoreFindEP>
 8007502:	4603      	mov	r3, r0
 8007504:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007506:	7dbb      	ldrb	r3, [r7, #22]
 8007508:	2bff      	cmp	r3, #255	; 0xff
 800750a:	d025      	beq.n	8007558 <USBD_LL_DataOutStage+0x15c>
 800750c:	7dbb      	ldrb	r3, [r7, #22]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d122      	bne.n	8007558 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b03      	cmp	r3, #3
 800751c:	d117      	bne.n	800754e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800751e:	7dba      	ldrb	r2, [r7, #22]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	32ae      	adds	r2, #174	; 0xae
 8007524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00f      	beq.n	800754e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800752e:	7dba      	ldrb	r2, [r7, #22]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007536:	7dba      	ldrb	r2, [r7, #22]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	32ae      	adds	r2, #174	; 0xae
 800753c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	7afa      	ldrb	r2, [r7, #11]
 8007544:	4611      	mov	r1, r2
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	4798      	blx	r3
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	e000      	b.n	800755a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	460b      	mov	r3, r1
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d16f      	bne.n	8007656 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3314      	adds	r3, #20
 800757a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007582:	2b02      	cmp	r3, #2
 8007584:	d15a      	bne.n	800763c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	429a      	cmp	r2, r3
 8007590:	d914      	bls.n	80075bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	1ad2      	subs	r2, r2, r3
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fffc 	bl	80085a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075ae:	2300      	movs	r3, #0
 80075b0:	2200      	movs	r2, #0
 80075b2:	2100      	movs	r1, #0
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f001 f9ff 	bl	80089b8 <USBD_LL_PrepareReceive>
 80075ba:	e03f      	b.n	800763c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d11c      	bne.n	8007602 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d316      	bcc.n	8007602 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075de:	429a      	cmp	r2, r3
 80075e0:	d20f      	bcs.n	8007602 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075e2:	2200      	movs	r2, #0
 80075e4:	2100      	movs	r1, #0
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 ffdd 	bl	80085a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075f4:	2300      	movs	r3, #0
 80075f6:	2200      	movs	r2, #0
 80075f8:	2100      	movs	r1, #0
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f001 f9dc 	bl	80089b8 <USBD_LL_PrepareReceive>
 8007600:	e01c      	b.n	800763c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b03      	cmp	r3, #3
 800760c:	d10f      	bne.n	800762e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800762e:	2180      	movs	r1, #128	; 0x80
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f001 f917 	bl	8008864 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 ffea 	bl	8008610 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d03a      	beq.n	80076bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fe42 	bl	80072d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007654:	e032      	b.n	80076bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800765c:	b2db      	uxtb	r3, r3
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f985 	bl	8007970 <USBD_CoreFindEP>
 8007666:	4603      	mov	r3, r0
 8007668:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	2bff      	cmp	r3, #255	; 0xff
 800766e:	d025      	beq.n	80076bc <USBD_LL_DataInStage+0x15a>
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d122      	bne.n	80076bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b03      	cmp	r3, #3
 8007680:	d11c      	bne.n	80076bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007682:	7dfa      	ldrb	r2, [r7, #23]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	32ae      	adds	r2, #174	; 0xae
 8007688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d014      	beq.n	80076bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007692:	7dfa      	ldrb	r2, [r7, #23]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800769a:	7dfa      	ldrb	r2, [r7, #23]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	32ae      	adds	r2, #174	; 0xae
 80076a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	7afa      	ldrb	r2, [r7, #11]
 80076a8:	4611      	mov	r1, r2
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	4798      	blx	r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80076b2:	7dbb      	ldrb	r3, [r7, #22]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80076b8:	7dbb      	ldrb	r3, [r7, #22]
 80076ba:	e000      	b.n	80076be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d014      	beq.n	800772c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6852      	ldr	r2, [r2, #4]
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	4611      	mov	r1, r2
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	4798      	blx	r3
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007728:	2303      	movs	r3, #3
 800772a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800772c:	2340      	movs	r3, #64	; 0x40
 800772e:	2200      	movs	r2, #0
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 f870 	bl	8008818 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2240      	movs	r2, #64	; 0x40
 8007744:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007748:	2340      	movs	r3, #64	; 0x40
 800774a:	2200      	movs	r2, #0
 800774c:	2180      	movs	r1, #128	; 0x80
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 f862 	bl	8008818 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2240      	movs	r2, #64	; 0x40
 800775e:	621a      	str	r2, [r3, #32]

  return ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b04      	cmp	r3, #4
 800779c:	d006      	beq.n	80077ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2204      	movs	r2, #4
 80077b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d106      	bne.n	80077e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b03      	cmp	r3, #3
 8007804:	d110      	bne.n	8007828 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	32ae      	adds	r2, #174	; 0xae
 8007848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	e01c      	b.n	800788e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b03      	cmp	r3, #3
 800785e:	d115      	bne.n	800788c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	32ae      	adds	r2, #174	; 0xae
 800786a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32ae      	adds	r2, #174	; 0xae
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	6a1b      	ldr	r3, [r3, #32]
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	4611      	mov	r1, r2
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	460b      	mov	r3, r1
 80078a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	32ae      	adds	r2, #174	; 0xae
 80078ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e01c      	b.n	80078f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d115      	bne.n	80078f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32ae      	adds	r2, #174	; 0xae
 80078ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	32ae      	adds	r2, #174	; 0xae
 80078e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	4611      	mov	r1, r2
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00e      	beq.n	800794c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6852      	ldr	r2, [r2, #4]
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	4611      	mov	r1, r2
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007948:	2303      	movs	r3, #3
 800794a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	460b      	mov	r3, r1
 8007960:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007962:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800797c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800798a:	b480      	push	{r7}
 800798c:	b087      	sub	sp, #28
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	3301      	adds	r3, #1
 80079a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079a8:	8a3b      	ldrh	r3, [r7, #16]
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	b21a      	sxth	r2, r3
 80079ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	b21b      	sxth	r3, r3
 80079b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079b8:	89fb      	ldrh	r3, [r7, #14]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d005      	beq.n	80079ee <USBD_StdDevReq+0x26>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d857      	bhi.n	8007a96 <USBD_StdDevReq+0xce>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00f      	beq.n	8007a0a <USBD_StdDevReq+0x42>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d153      	bne.n	8007a96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	32ae      	adds	r2, #174	; 0xae
 80079f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]
      break;
 8007a08:	e04a      	b.n	8007aa0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b09      	cmp	r3, #9
 8007a10:	d83b      	bhi.n	8007a8a <USBD_StdDevReq+0xc2>
 8007a12:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBD_StdDevReq+0x50>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a6d 	.word	0x08007a6d
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007a8b 	.word	0x08007a8b
 8007a24:	08007a77 	.word	0x08007a77
 8007a28:	08007a8b 	.word	0x08007a8b
 8007a2c:	08007a4b 	.word	0x08007a4b
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007a8b 	.word	0x08007a8b
 8007a38:	08007a63 	.word	0x08007a63
 8007a3c:	08007a55 	.word	0x08007a55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa3c 	bl	8007ec0 <USBD_GetDescriptor>
          break;
 8007a48:	e024      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fba1 	bl	8008194 <USBD_SetAddress>
          break;
 8007a52:	e01f      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fbe0 	bl	800821c <USBD_SetConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
          break;
 8007a60:	e018      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fc83 	bl	8008370 <USBD_GetConfig>
          break;
 8007a6a:	e013      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fcb4 	bl	80083dc <USBD_GetStatus>
          break;
 8007a74:	e00e      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fce3 	bl	8008444 <USBD_SetFeature>
          break;
 8007a7e:	e009      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fd07 	bl	8008496 <USBD_ClrFeature>
          break;
 8007a88:	e004      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fd5e 	bl	800854e <USBD_CtlError>
          break;
 8007a92:	bf00      	nop
      }
      break;
 8007a94:	e004      	b.n	8007aa0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fd58 	bl	800854e <USBD_CtlError>
      break;
 8007a9e:	bf00      	nop
  }

  return ret;
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop

08007aac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d005      	beq.n	8007ad2 <USBD_StdItfReq+0x26>
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d852      	bhi.n	8007b70 <USBD_StdItfReq+0xc4>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <USBD_StdItfReq+0x26>
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d14e      	bne.n	8007b70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d840      	bhi.n	8007b62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	889b      	ldrh	r3, [r3, #4]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d836      	bhi.n	8007b58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	889b      	ldrh	r3, [r3, #4]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff ff2f 	bl	8007956 <USBD_CoreFindIF>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2bff      	cmp	r3, #255	; 0xff
 8007b00:	d01d      	beq.n	8007b3e <USBD_StdItfReq+0x92>
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d11a      	bne.n	8007b3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b08:	7bba      	ldrb	r2, [r7, #14]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	32ae      	adds	r2, #174	; 0xae
 8007b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00f      	beq.n	8007b38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b18:	7bba      	ldrb	r2, [r7, #14]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b20:	7bba      	ldrb	r2, [r7, #14]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	32ae      	adds	r2, #174	; 0xae
 8007b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b36:	e004      	b.n	8007b42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b3c:	e001      	b.n	8007b42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	88db      	ldrh	r3, [r3, #6]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d110      	bne.n	8007b6c <USBD_StdItfReq+0xc0>
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10d      	bne.n	8007b6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fd4a 	bl	80085ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b56:	e009      	b.n	8007b6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fcf7 	bl	800854e <USBD_CtlError>
          break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fcf2 	bl	800854e <USBD_CtlError>
          break;
 8007b6a:	e000      	b.n	8007b6e <USBD_StdItfReq+0xc2>
          break;
 8007b6c:	bf00      	nop
      }
      break;
 8007b6e:	e004      	b.n	8007b7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fceb 	bl	800854e <USBD_CtlError>
      break;
 8007b78:	bf00      	nop
  }

  return ret;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	889b      	ldrh	r3, [r3, #4]
 8007b96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ba0:	2b40      	cmp	r3, #64	; 0x40
 8007ba2:	d007      	beq.n	8007bb4 <USBD_StdEPReq+0x30>
 8007ba4:	2b40      	cmp	r3, #64	; 0x40
 8007ba6:	f200 817f 	bhi.w	8007ea8 <USBD_StdEPReq+0x324>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d02a      	beq.n	8007c04 <USBD_StdEPReq+0x80>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	f040 817a 	bne.w	8007ea8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff fed9 	bl	8007970 <USBD_CoreFindEP>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bc2:	7b7b      	ldrb	r3, [r7, #13]
 8007bc4:	2bff      	cmp	r3, #255	; 0xff
 8007bc6:	f000 8174 	beq.w	8007eb2 <USBD_StdEPReq+0x32e>
 8007bca:	7b7b      	ldrb	r3, [r7, #13]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f040 8170 	bne.w	8007eb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007bd2:	7b7a      	ldrb	r2, [r7, #13]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007bda:	7b7a      	ldrb	r2, [r7, #13]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	32ae      	adds	r2, #174	; 0xae
 8007be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8163 	beq.w	8007eb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007bec:	7b7a      	ldrb	r2, [r7, #13]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	32ae      	adds	r2, #174	; 0xae
 8007bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c02:	e156      	b.n	8007eb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	785b      	ldrb	r3, [r3, #1]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d008      	beq.n	8007c1e <USBD_StdEPReq+0x9a>
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	f300 8145 	bgt.w	8007e9c <USBD_StdEPReq+0x318>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 809b 	beq.w	8007d4e <USBD_StdEPReq+0x1ca>
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d03c      	beq.n	8007c96 <USBD_StdEPReq+0x112>
 8007c1c:	e13e      	b.n	8007e9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d002      	beq.n	8007c30 <USBD_StdEPReq+0xac>
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d016      	beq.n	8007c5c <USBD_StdEPReq+0xd8>
 8007c2e:	e02c      	b.n	8007c8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00d      	beq.n	8007c52 <USBD_StdEPReq+0xce>
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b80      	cmp	r3, #128	; 0x80
 8007c3a:	d00a      	beq.n	8007c52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fe0f 	bl	8008864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c46:	2180      	movs	r1, #128	; 0x80
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fe0b 	bl	8008864 <USBD_LL_StallEP>
 8007c4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c50:	e020      	b.n	8007c94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fc7a 	bl	800854e <USBD_CtlError>
              break;
 8007c5a:	e01b      	b.n	8007c94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10e      	bne.n	8007c82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00b      	beq.n	8007c82 <USBD_StdEPReq+0xfe>
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b80      	cmp	r3, #128	; 0x80
 8007c6e:	d008      	beq.n	8007c82 <USBD_StdEPReq+0xfe>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	88db      	ldrh	r3, [r3, #6]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fdf1 	bl	8008864 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fcb1 	bl	80085ea <USBD_CtlSendStatus>

              break;
 8007c88:	e004      	b.n	8007c94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fc5e 	bl	800854e <USBD_CtlError>
              break;
 8007c92:	bf00      	nop
          }
          break;
 8007c94:	e107      	b.n	8007ea6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d002      	beq.n	8007ca8 <USBD_StdEPReq+0x124>
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d016      	beq.n	8007cd4 <USBD_StdEPReq+0x150>
 8007ca6:	e04b      	b.n	8007d40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <USBD_StdEPReq+0x146>
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b80      	cmp	r3, #128	; 0x80
 8007cb2:	d00a      	beq.n	8007cca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fdd3 	bl	8008864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cbe:	2180      	movs	r1, #128	; 0x80
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fdcf 	bl	8008864 <USBD_LL_StallEP>
 8007cc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc8:	e040      	b.n	8007d4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc3e 	bl	800854e <USBD_CtlError>
              break;
 8007cd2:	e03b      	b.n	8007d4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	885b      	ldrh	r3, [r3, #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d136      	bne.n	8007d4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d004      	beq.n	8007cf0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fdd9 	bl	80088a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fc7a 	bl	80085ea <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fe38 	bl	8007970 <USBD_CoreFindEP>
 8007d00:	4603      	mov	r3, r0
 8007d02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d04:	7b7b      	ldrb	r3, [r7, #13]
 8007d06:	2bff      	cmp	r3, #255	; 0xff
 8007d08:	d01f      	beq.n	8007d4a <USBD_StdEPReq+0x1c6>
 8007d0a:	7b7b      	ldrb	r3, [r7, #13]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d11c      	bne.n	8007d4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d10:	7b7a      	ldrb	r2, [r7, #13]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d18:	7b7a      	ldrb	r2, [r7, #13]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	32ae      	adds	r2, #174	; 0xae
 8007d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d010      	beq.n	8007d4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d28:	7b7a      	ldrb	r2, [r7, #13]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	32ae      	adds	r2, #174	; 0xae
 8007d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d3e:	e004      	b.n	8007d4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fc03 	bl	800854e <USBD_CtlError>
              break;
 8007d48:	e000      	b.n	8007d4c <USBD_StdEPReq+0x1c8>
              break;
 8007d4a:	bf00      	nop
          }
          break;
 8007d4c:	e0ab      	b.n	8007ea6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d002      	beq.n	8007d60 <USBD_StdEPReq+0x1dc>
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d032      	beq.n	8007dc4 <USBD_StdEPReq+0x240>
 8007d5e:	e097      	b.n	8007e90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <USBD_StdEPReq+0x1f2>
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b80      	cmp	r3, #128	; 0x80
 8007d6a:	d004      	beq.n	8007d76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fbed 	bl	800854e <USBD_CtlError>
                break;
 8007d74:	e091      	b.n	8007e9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	da0b      	bge.n	8007d96 <USBD_StdEPReq+0x212>
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4413      	add	r3, r2
 8007d92:	3304      	adds	r3, #4
 8007d94:	e00b      	b.n	8007dae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	3304      	adds	r3, #4
 8007dae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2202      	movs	r2, #2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fbd7 	bl	8008570 <USBD_CtlSendData>
              break;
 8007dc2:	e06a      	b.n	8007e9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	da11      	bge.n	8007df0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	f003 020f 	and.w	r2, r3, #15
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	3324      	adds	r3, #36	; 0x24
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d117      	bne.n	8007e16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fbb0 	bl	800854e <USBD_CtlError>
                  break;
 8007dee:	e054      	b.n	8007e9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	f003 020f 	and.w	r2, r3, #15
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb9d 	bl	800854e <USBD_CtlError>
                  break;
 8007e14:	e041      	b.n	8007e9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da0b      	bge.n	8007e36 <USBD_StdEPReq+0x2b2>
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	3310      	adds	r3, #16
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4413      	add	r3, r2
 8007e32:	3304      	adds	r3, #4
 8007e34:	e00b      	b.n	8007e4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <USBD_StdEPReq+0x2d8>
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b80      	cmp	r3, #128	; 0x80
 8007e5a:	d103      	bne.n	8007e64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	e00e      	b.n	8007e82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fd39 	bl	80088e0 <USBD_LL_IsStallEP>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e002      	b.n	8007e82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2202      	movs	r2, #2
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fb71 	bl	8008570 <USBD_CtlSendData>
              break;
 8007e8e:	e004      	b.n	8007e9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fb5b 	bl	800854e <USBD_CtlError>
              break;
 8007e98:	bf00      	nop
          }
          break;
 8007e9a:	e004      	b.n	8007ea6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fb55 	bl	800854e <USBD_CtlError>
          break;
 8007ea4:	bf00      	nop
      }
      break;
 8007ea6:	e005      	b.n	8007eb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb4f 	bl	800854e <USBD_CtlError>
      break;
 8007eb0:	e000      	b.n	8007eb4 <USBD_StdEPReq+0x330>
      break;
 8007eb2:	bf00      	nop
  }

  return ret;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	2b06      	cmp	r3, #6
 8007ee2:	f200 8128 	bhi.w	8008136 <USBD_GetDescriptor+0x276>
 8007ee6:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <USBD_GetDescriptor+0x2c>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f09 	.word	0x08007f09
 8007ef0:	08007f21 	.word	0x08007f21
 8007ef4:	08007f61 	.word	0x08007f61
 8007ef8:	08008137 	.word	0x08008137
 8007efc:	08008137 	.word	0x08008137
 8007f00:	080080d7 	.word	0x080080d7
 8007f04:	08008103 	.word	0x08008103
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	7c12      	ldrb	r2, [r2, #16]
 8007f14:	f107 0108 	add.w	r1, r7, #8
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4798      	blx	r3
 8007f1c:	60f8      	str	r0, [r7, #12]
      break;
 8007f1e:	e112      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7c1b      	ldrb	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10d      	bne.n	8007f44 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	f107 0208 	add.w	r2, r7, #8
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	2202      	movs	r2, #2
 8007f40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f42:	e100      	b.n	8008146 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	f107 0208 	add.w	r2, r7, #8
 8007f50:	4610      	mov	r0, r2
 8007f52:	4798      	blx	r3
 8007f54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	701a      	strb	r2, [r3, #0]
      break;
 8007f5e:	e0f2      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	885b      	ldrh	r3, [r3, #2]
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	f200 80ac 	bhi.w	80080c4 <USBD_GetDescriptor+0x204>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <USBD_GetDescriptor+0xb4>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007f8d 	.word	0x08007f8d
 8007f78:	08007fc1 	.word	0x08007fc1
 8007f7c:	08007ff5 	.word	0x08007ff5
 8007f80:	08008029 	.word	0x08008029
 8007f84:	0800805d 	.word	0x0800805d
 8007f88:	08008091 	.word	0x08008091
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	7c12      	ldrb	r2, [r2, #16]
 8007fa4:	f107 0108 	add.w	r1, r7, #8
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fae:	e091      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 facb 	bl	800854e <USBD_CtlError>
            err++;
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fbe:	e089      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	7c12      	ldrb	r2, [r2, #16]
 8007fd8:	f107 0108 	add.w	r1, r7, #8
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4798      	blx	r3
 8007fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fe2:	e077      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fab1 	bl	800854e <USBD_CtlError>
            err++;
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ff2:	e06f      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00b      	beq.n	8008018 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	7c12      	ldrb	r2, [r2, #16]
 800800c:	f107 0108 	add.w	r1, r7, #8
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
 8008014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008016:	e05d      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa97 	bl	800854e <USBD_CtlError>
            err++;
 8008020:	7afb      	ldrb	r3, [r7, #11]
 8008022:	3301      	adds	r3, #1
 8008024:	72fb      	strb	r3, [r7, #11]
          break;
 8008026:	e055      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	7c12      	ldrb	r2, [r2, #16]
 8008040:	f107 0108 	add.w	r1, r7, #8
 8008044:	4610      	mov	r0, r2
 8008046:	4798      	blx	r3
 8008048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800804a:	e043      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa7d 	bl	800854e <USBD_CtlError>
            err++;
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	3301      	adds	r3, #1
 8008058:	72fb      	strb	r3, [r7, #11]
          break;
 800805a:	e03b      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	7c12      	ldrb	r2, [r2, #16]
 8008074:	f107 0108 	add.w	r1, r7, #8
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800807e:	e029      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa63 	bl	800854e <USBD_CtlError>
            err++;
 8008088:	7afb      	ldrb	r3, [r7, #11]
 800808a:	3301      	adds	r3, #1
 800808c:	72fb      	strb	r3, [r7, #11]
          break;
 800808e:	e021      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00b      	beq.n	80080b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	7c12      	ldrb	r2, [r2, #16]
 80080a8:	f107 0108 	add.w	r1, r7, #8
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
 80080b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080b2:	e00f      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa49 	bl	800854e <USBD_CtlError>
            err++;
 80080bc:	7afb      	ldrb	r3, [r7, #11]
 80080be:	3301      	adds	r3, #1
 80080c0:	72fb      	strb	r3, [r7, #11]
          break;
 80080c2:	e007      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fa41 	bl	800854e <USBD_CtlError>
          err++;
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	3301      	adds	r3, #1
 80080d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80080d2:	bf00      	nop
      }
      break;
 80080d4:	e037      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7c1b      	ldrb	r3, [r3, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d109      	bne.n	80080f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e6:	f107 0208 	add.w	r2, r7, #8
 80080ea:	4610      	mov	r0, r2
 80080ec:	4798      	blx	r3
 80080ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080f0:	e029      	b.n	8008146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fa2a 	bl	800854e <USBD_CtlError>
        err++;
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	3301      	adds	r3, #1
 80080fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008100:	e021      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	7c1b      	ldrb	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10d      	bne.n	8008126 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f107 0208 	add.w	r2, r7, #8
 8008116:	4610      	mov	r0, r2
 8008118:	4798      	blx	r3
 800811a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	2207      	movs	r2, #7
 8008122:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008124:	e00f      	b.n	8008146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa10 	bl	800854e <USBD_CtlError>
        err++;
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	3301      	adds	r3, #1
 8008132:	72fb      	strb	r3, [r7, #11]
      break;
 8008134:	e007      	b.n	8008146 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa08 	bl	800854e <USBD_CtlError>
      err++;
 800813e:	7afb      	ldrb	r3, [r7, #11]
 8008140:	3301      	adds	r3, #1
 8008142:	72fb      	strb	r3, [r7, #11]
      break;
 8008144:	bf00      	nop
  }

  if (err != 0U)
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d11e      	bne.n	800818a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	88db      	ldrh	r3, [r3, #6]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d016      	beq.n	8008182 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008154:	893b      	ldrh	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00e      	beq.n	8008178 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	88da      	ldrh	r2, [r3, #6]
 800815e:	893b      	ldrh	r3, [r7, #8]
 8008160:	4293      	cmp	r3, r2
 8008162:	bf28      	it	cs
 8008164:	4613      	movcs	r3, r2
 8008166:	b29b      	uxth	r3, r3
 8008168:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800816a:	893b      	ldrh	r3, [r7, #8]
 800816c:	461a      	mov	r2, r3
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f9fd 	bl	8008570 <USBD_CtlSendData>
 8008176:	e009      	b.n	800818c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9e7 	bl	800854e <USBD_CtlError>
 8008180:	e004      	b.n	800818c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa31 	bl	80085ea <USBD_CtlSendStatus>
 8008188:	e000      	b.n	800818c <USBD_GetDescriptor+0x2cc>
    return;
 800818a:	bf00      	nop
  }
}
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop

08008194 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	889b      	ldrh	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d131      	bne.n	800820a <USBD_SetAddress+0x76>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88db      	ldrh	r3, [r3, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d12d      	bne.n	800820a <USBD_SetAddress+0x76>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	885b      	ldrh	r3, [r3, #2]
 80081b2:	2b7f      	cmp	r3, #127	; 0x7f
 80081b4:	d829      	bhi.n	800820a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d104      	bne.n	80081d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f9bc 	bl	800854e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d6:	e01d      	b.n	8008214 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	7bfa      	ldrb	r2, [r7, #15]
 80081dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fba7 	bl	8008938 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f9fd 	bl	80085ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fe:	e009      	b.n	8008214 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008208:	e004      	b.n	8008214 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f99e 	bl	800854e <USBD_CtlError>
  }
}
 8008212:	bf00      	nop
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	b2da      	uxtb	r2, r3
 8008230:	4b4e      	ldr	r3, [pc, #312]	; (800836c <USBD_SetConfig+0x150>)
 8008232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008234:	4b4d      	ldr	r3, [pc, #308]	; (800836c <USBD_SetConfig+0x150>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d905      	bls.n	8008248 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f985 	bl	800854e <USBD_CtlError>
    return USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	e08c      	b.n	8008362 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d002      	beq.n	800825a <USBD_SetConfig+0x3e>
 8008254:	2b03      	cmp	r3, #3
 8008256:	d029      	beq.n	80082ac <USBD_SetConfig+0x90>
 8008258:	e075      	b.n	8008346 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800825a:	4b44      	ldr	r3, [pc, #272]	; (800836c <USBD_SetConfig+0x150>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d020      	beq.n	80082a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008262:	4b42      	ldr	r3, [pc, #264]	; (800836c <USBD_SetConfig+0x150>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800826c:	4b3f      	ldr	r3, [pc, #252]	; (800836c <USBD_SetConfig+0x150>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff f837 	bl	80072e6 <USBD_SetClassConfig>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d008      	beq.n	8008294 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f962 	bl	800854e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008292:	e065      	b.n	8008360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f9a8 	bl	80085ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2203      	movs	r2, #3
 800829e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082a2:	e05d      	b.n	8008360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f9a0 	bl	80085ea <USBD_CtlSendStatus>
      break;
 80082aa:	e059      	b.n	8008360 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082ac:	4b2f      	ldr	r3, [pc, #188]	; (800836c <USBD_SetConfig+0x150>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d112      	bne.n	80082da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80082bc:	4b2b      	ldr	r3, [pc, #172]	; (800836c <USBD_SetConfig+0x150>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082c6:	4b29      	ldr	r3, [pc, #164]	; (800836c <USBD_SetConfig+0x150>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff f826 	bl	800731e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f989 	bl	80085ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082d8:	e042      	b.n	8008360 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80082da:	4b24      	ldr	r3, [pc, #144]	; (800836c <USBD_SetConfig+0x150>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d02a      	beq.n	800833e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff f814 	bl	800731e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80082f6:	4b1d      	ldr	r3, [pc, #116]	; (800836c <USBD_SetConfig+0x150>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008300:	4b1a      	ldr	r3, [pc, #104]	; (800836c <USBD_SetConfig+0x150>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fe ffed 	bl	80072e6 <USBD_SetClassConfig>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00f      	beq.n	8008336 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f918 	bl	800854e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7fe fff9 	bl	800731e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008334:	e014      	b.n	8008360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f957 	bl	80085ea <USBD_CtlSendStatus>
      break;
 800833c:	e010      	b.n	8008360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f953 	bl	80085ea <USBD_CtlSendStatus>
      break;
 8008344:	e00c      	b.n	8008360 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f900 	bl	800854e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <USBD_SetConfig+0x150>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7fe ffe2 	bl	800731e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800835a:	2303      	movs	r3, #3
 800835c:	73fb      	strb	r3, [r7, #15]
      break;
 800835e:	bf00      	nop
  }

  return ret;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	2400019c 	.word	0x2400019c

08008370 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	88db      	ldrh	r3, [r3, #6]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d004      	beq.n	800838c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f8e2 	bl	800854e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800838a:	e023      	b.n	80083d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	dc02      	bgt.n	800839e <USBD_GetConfig+0x2e>
 8008398:	2b00      	cmp	r3, #0
 800839a:	dc03      	bgt.n	80083a4 <USBD_GetConfig+0x34>
 800839c:	e015      	b.n	80083ca <USBD_GetConfig+0x5a>
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d00b      	beq.n	80083ba <USBD_GetConfig+0x4a>
 80083a2:	e012      	b.n	80083ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3308      	adds	r3, #8
 80083ae:	2201      	movs	r2, #1
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8dc 	bl	8008570 <USBD_CtlSendData>
        break;
 80083b8:	e00c      	b.n	80083d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	2201      	movs	r2, #1
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f8d4 	bl	8008570 <USBD_CtlSendData>
        break;
 80083c8:	e004      	b.n	80083d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f8be 	bl	800854e <USBD_CtlError>
        break;
 80083d2:	bf00      	nop
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d81e      	bhi.n	8008432 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	88db      	ldrh	r3, [r3, #6]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d004      	beq.n	8008406 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f8a5 	bl	800854e <USBD_CtlError>
        break;
 8008404:	e01a      	b.n	800843c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f043 0202 	orr.w	r2, r3, #2
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	330c      	adds	r3, #12
 8008426:	2202      	movs	r2, #2
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f8a0 	bl	8008570 <USBD_CtlSendData>
      break;
 8008430:	e004      	b.n	800843c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f88a 	bl	800854e <USBD_CtlError>
      break;
 800843a:	bf00      	nop
  }
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	885b      	ldrh	r3, [r3, #2]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d107      	bne.n	8008466 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f8c3 	bl	80085ea <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008464:	e013      	b.n	800848e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d10b      	bne.n	8008486 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	889b      	ldrh	r3, [r3, #4]
 8008472:	0a1b      	lsrs	r3, r3, #8
 8008474:	b29b      	uxth	r3, r3
 8008476:	b2da      	uxtb	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f8b3 	bl	80085ea <USBD_CtlSendStatus>
}
 8008484:	e003      	b.n	800848e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f860 	bl	800854e <USBD_CtlError>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d80b      	bhi.n	80084c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	885b      	ldrh	r3, [r3, #2]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d10c      	bne.n	80084d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f893 	bl	80085ea <USBD_CtlSendStatus>
      }
      break;
 80084c4:	e004      	b.n	80084d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f840 	bl	800854e <USBD_CtlError>
      break;
 80084ce:	e000      	b.n	80084d2 <USBD_ClrFeature+0x3c>
      break;
 80084d0:	bf00      	nop
  }
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	781a      	ldrb	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7ff fa40 	bl	800798a <SWAPBYTE>
 800850a:	4603      	mov	r3, r0
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3301      	adds	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
 800851c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f7ff fa33 	bl	800798a <SWAPBYTE>
 8008524:	4603      	mov	r3, r0
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff fa26 	bl	800798a <SWAPBYTE>
 800853e:	4603      	mov	r3, r0
 8008540:	461a      	mov	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	80da      	strh	r2, [r3, #6]
}
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008558:	2180      	movs	r1, #128	; 0x80
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f982 	bl	8008864 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008560:	2100      	movs	r1, #0
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f97e 	bl	8008864 <USBD_LL_StallEP>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2202      	movs	r2, #2
 8008580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	2100      	movs	r1, #0
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 f9ed 	bl	8008976 <USBD_LL_Transmit>

  return USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	2100      	movs	r1, #0
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 f9dc 	bl	8008976 <USBD_LL_Transmit>

  return USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	2100      	movs	r1, #0
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f9ec 	bl	80089b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2204      	movs	r2, #4
 80085f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085fa:	2300      	movs	r3, #0
 80085fc:	2200      	movs	r2, #0
 80085fe:	2100      	movs	r1, #0
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f9b8 	bl	8008976 <USBD_LL_Transmit>

  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2205      	movs	r2, #5
 800861c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008620:	2300      	movs	r3, #0
 8008622:	2200      	movs	r2, #0
 8008624:	2100      	movs	r1, #0
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f9c6 	bl	80089b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f7fe fe80 	bl	8007352 <USBD_LL_SetupStage>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	4619      	mov	r1, r3
 8008684:	f7fe feba 	bl	80073fc <USBD_LL_DataOutStage>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	3348      	adds	r3, #72	; 0x48
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	4619      	mov	r1, r3
 80086b8:	f7fe ff53 	bl	8007562 <USBD_LL_DataInStage>
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff f88d 	bl	80077f2 <USBD_LL_SOF>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086e8:	2301      	movs	r3, #1
 80086ea:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d102      	bne.n	80086fa <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
 80086f8:	e008      	b.n	800870c <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d102      	bne.n	8008708 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008702:	2301      	movs	r3, #1
 8008704:	73fb      	strb	r3, [r7, #15]
 8008706:	e001      	b.n	800870c <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008708:	f7f9 f818 	bl	800173c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008712:	7bfa      	ldrb	r2, [r7, #15]
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff f827 	bl	800776a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe ffcf 	bl	80076c6 <USBD_LL_Reset>
}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800873e:	4618      	mov	r0, r3
 8008740:	f7ff f823 	bl	800778a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008756:	f043 0301 	orr.w	r3, r3, #1
 800875a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008764:	4b04      	ldr	r3, [pc, #16]	; (8008778 <HAL_PCD_SuspendCallback+0x48>)
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	4a03      	ldr	r2, [pc, #12]	; (8008778 <HAL_PCD_SuspendCallback+0x48>)
 800876a:	f043 0306 	orr.w	r3, r3, #6
 800876e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	e000ed00 	.word	0xe000ed00

0800877c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff f819 	bl	80077c2 <USBD_LL_Resume>
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087aa:	78fa      	ldrb	r2, [r7, #3]
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff f871 	bl	8007896 <USBD_LL_IsoOUTIncomplete>
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff f82d 	bl	8007832 <USBD_LL_IsoINIncomplete>
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff f883 	bl	80078fa <USBD_LL_DevConnected>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff f880 	bl	8007910 <USBD_LL_DevDisconnected>
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	461a      	mov	r2, r3
 8008826:	4603      	mov	r3, r0
 8008828:	70fb      	strb	r3, [r7, #3]
 800882a:	460b      	mov	r3, r1
 800882c:	70bb      	strb	r3, [r7, #2]
 800882e:	4613      	mov	r3, r2
 8008830:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008840:	78bb      	ldrb	r3, [r7, #2]
 8008842:	883a      	ldrh	r2, [r7, #0]
 8008844:	78f9      	ldrb	r1, [r7, #3]
 8008846:	f7fa fa79 	bl	8002d3c <HAL_PCD_EP_Open>
 800884a:	4603      	mov	r3, r0
 800884c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 f8d3 	bl	80089fc <USBD_Get_USB_Status>
 8008856:	4603      	mov	r3, r0
 8008858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885a:	7bbb      	ldrb	r3, [r7, #14]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	4611      	mov	r1, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f7fa fb39 	bl	8002efa <HAL_PCD_EP_SetStall>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	4618      	mov	r0, r3
 8008890:	f000 f8b4 	bl	80089fc <USBD_Get_USB_Status>
 8008894:	4603      	mov	r3, r0
 8008896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008898:	7bbb      	ldrb	r3, [r7, #14]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fa fb7e 	bl	8002fc2 <HAL_PCD_EP_ClrStall>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 f895 	bl	80089fc <USBD_Get_USB_Status>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da0b      	bge.n	8008914 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008902:	68f9      	ldr	r1, [r7, #12]
 8008904:	4613      	mov	r3, r2
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	333e      	adds	r3, #62	; 0x3e
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	e00b      	b.n	800892c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800891a:	68f9      	ldr	r1, [r7, #12]
 800891c:	4613      	mov	r3, r2
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800892a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7fa f9cb 	bl	8002cf2 <HAL_PCD_SetAddress>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f84a 	bl	80089fc <USBD_Get_USB_Status>
 8008968:	4603      	mov	r3, r0
 800896a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896c:	7bbb      	ldrb	r3, [r7, #14]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b086      	sub	sp, #24
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
 8008982:	460b      	mov	r3, r1
 8008984:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008994:	7af9      	ldrb	r1, [r7, #11]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	f7fa fa73 	bl	8002e84 <HAL_PCD_EP_Transmit>
 800899e:	4603      	mov	r3, r0
 80089a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f829 	bl	80089fc <USBD_Get_USB_Status>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	607a      	str	r2, [r7, #4]
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	460b      	mov	r3, r1
 80089c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089d6:	7af9      	ldrb	r1, [r7, #11]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	f7fa fa16 	bl	8002e0c <HAL_PCD_EP_Receive>
 80089e0:	4603      	mov	r3, r0
 80089e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f808 	bl	80089fc <USBD_Get_USB_Status>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d817      	bhi.n	8008a40 <USBD_Get_USB_Status+0x44>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <USBD_Get_USB_Status+0x1c>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a29 	.word	0x08008a29
 8008a1c:	08008a2f 	.word	0x08008a2f
 8008a20:	08008a35 	.word	0x08008a35
 8008a24:	08008a3b 	.word	0x08008a3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2c:	e00b      	b.n	8008a46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	73fb      	strb	r3, [r7, #15]
    break;
 8008a32:	e008      	b.n	8008a46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a34:	2301      	movs	r3, #1
 8008a36:	73fb      	strb	r3, [r7, #15]
    break;
 8008a38:	e005      	b.n	8008a46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a3e:	e002      	b.n	8008a46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a40:	2303      	movs	r3, #3
 8008a42:	73fb      	strb	r3, [r7, #15]
    break;
 8008a44:	bf00      	nop
  }
  return usb_status;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <__errno>:
 8008a54:	4b01      	ldr	r3, [pc, #4]	; (8008a5c <__errno+0x8>)
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	24000010 	.word	0x24000010

08008a60 <__libc_init_array>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	4d0d      	ldr	r5, [pc, #52]	; (8008a98 <__libc_init_array+0x38>)
 8008a64:	4c0d      	ldr	r4, [pc, #52]	; (8008a9c <__libc_init_array+0x3c>)
 8008a66:	1b64      	subs	r4, r4, r5
 8008a68:	10a4      	asrs	r4, r4, #2
 8008a6a:	2600      	movs	r6, #0
 8008a6c:	42a6      	cmp	r6, r4
 8008a6e:	d109      	bne.n	8008a84 <__libc_init_array+0x24>
 8008a70:	4d0b      	ldr	r5, [pc, #44]	; (8008aa0 <__libc_init_array+0x40>)
 8008a72:	4c0c      	ldr	r4, [pc, #48]	; (8008aa4 <__libc_init_array+0x44>)
 8008a74:	f000 fc8e 	bl	8009394 <_init>
 8008a78:	1b64      	subs	r4, r4, r5
 8008a7a:	10a4      	asrs	r4, r4, #2
 8008a7c:	2600      	movs	r6, #0
 8008a7e:	42a6      	cmp	r6, r4
 8008a80:	d105      	bne.n	8008a8e <__libc_init_array+0x2e>
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a88:	4798      	blx	r3
 8008a8a:	3601      	adds	r6, #1
 8008a8c:	e7ee      	b.n	8008a6c <__libc_init_array+0xc>
 8008a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a92:	4798      	blx	r3
 8008a94:	3601      	adds	r6, #1
 8008a96:	e7f2      	b.n	8008a7e <__libc_init_array+0x1e>
 8008a98:	0800ab08 	.word	0x0800ab08
 8008a9c:	0800ab08 	.word	0x0800ab08
 8008aa0:	0800ab08 	.word	0x0800ab08
 8008aa4:	0800ab0c 	.word	0x0800ab0c

08008aa8 <memset>:
 8008aa8:	4402      	add	r2, r0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d100      	bne.n	8008ab2 <memset+0xa>
 8008ab0:	4770      	bx	lr
 8008ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ab6:	e7f9      	b.n	8008aac <memset+0x4>

08008ab8 <siprintf>:
 8008ab8:	b40e      	push	{r1, r2, r3}
 8008aba:	b500      	push	{lr}
 8008abc:	b09c      	sub	sp, #112	; 0x70
 8008abe:	ab1d      	add	r3, sp, #116	; 0x74
 8008ac0:	9002      	str	r0, [sp, #8]
 8008ac2:	9006      	str	r0, [sp, #24]
 8008ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ac8:	4809      	ldr	r0, [pc, #36]	; (8008af0 <siprintf+0x38>)
 8008aca:	9107      	str	r1, [sp, #28]
 8008acc:	9104      	str	r1, [sp, #16]
 8008ace:	4909      	ldr	r1, [pc, #36]	; (8008af4 <siprintf+0x3c>)
 8008ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad4:	9105      	str	r1, [sp, #20]
 8008ad6:	6800      	ldr	r0, [r0, #0]
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	a902      	add	r1, sp, #8
 8008adc:	f000 f868 	bl	8008bb0 <_svfiprintf_r>
 8008ae0:	9b02      	ldr	r3, [sp, #8]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	b01c      	add	sp, #112	; 0x70
 8008ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aec:	b003      	add	sp, #12
 8008aee:	4770      	bx	lr
 8008af0:	24000010 	.word	0x24000010
 8008af4:	ffff0208 	.word	0xffff0208

08008af8 <__ssputs_r>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	688e      	ldr	r6, [r1, #8]
 8008afe:	429e      	cmp	r6, r3
 8008b00:	4682      	mov	sl, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	4690      	mov	r8, r2
 8008b06:	461f      	mov	r7, r3
 8008b08:	d838      	bhi.n	8008b7c <__ssputs_r+0x84>
 8008b0a:	898a      	ldrh	r2, [r1, #12]
 8008b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b10:	d032      	beq.n	8008b78 <__ssputs_r+0x80>
 8008b12:	6825      	ldr	r5, [r4, #0]
 8008b14:	6909      	ldr	r1, [r1, #16]
 8008b16:	eba5 0901 	sub.w	r9, r5, r1
 8008b1a:	6965      	ldr	r5, [r4, #20]
 8008b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b24:	3301      	adds	r3, #1
 8008b26:	444b      	add	r3, r9
 8008b28:	106d      	asrs	r5, r5, #1
 8008b2a:	429d      	cmp	r5, r3
 8008b2c:	bf38      	it	cc
 8008b2e:	461d      	movcc	r5, r3
 8008b30:	0553      	lsls	r3, r2, #21
 8008b32:	d531      	bpl.n	8008b98 <__ssputs_r+0xa0>
 8008b34:	4629      	mov	r1, r5
 8008b36:	f000 fb63 	bl	8009200 <_malloc_r>
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	b950      	cbnz	r0, 8008b54 <__ssputs_r+0x5c>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	f8ca 3000 	str.w	r3, [sl]
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b54:	6921      	ldr	r1, [r4, #16]
 8008b56:	464a      	mov	r2, r9
 8008b58:	f000 fabe 	bl	80090d8 <memcpy>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	6126      	str	r6, [r4, #16]
 8008b6a:	6165      	str	r5, [r4, #20]
 8008b6c:	444e      	add	r6, r9
 8008b6e:	eba5 0509 	sub.w	r5, r5, r9
 8008b72:	6026      	str	r6, [r4, #0]
 8008b74:	60a5      	str	r5, [r4, #8]
 8008b76:	463e      	mov	r6, r7
 8008b78:	42be      	cmp	r6, r7
 8008b7a:	d900      	bls.n	8008b7e <__ssputs_r+0x86>
 8008b7c:	463e      	mov	r6, r7
 8008b7e:	6820      	ldr	r0, [r4, #0]
 8008b80:	4632      	mov	r2, r6
 8008b82:	4641      	mov	r1, r8
 8008b84:	f000 fab6 	bl	80090f4 <memmove>
 8008b88:	68a3      	ldr	r3, [r4, #8]
 8008b8a:	1b9b      	subs	r3, r3, r6
 8008b8c:	60a3      	str	r3, [r4, #8]
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	4433      	add	r3, r6
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	2000      	movs	r0, #0
 8008b96:	e7db      	b.n	8008b50 <__ssputs_r+0x58>
 8008b98:	462a      	mov	r2, r5
 8008b9a:	f000 fba5 	bl	80092e8 <_realloc_r>
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d1e1      	bne.n	8008b68 <__ssputs_r+0x70>
 8008ba4:	6921      	ldr	r1, [r4, #16]
 8008ba6:	4650      	mov	r0, sl
 8008ba8:	f000 fabe 	bl	8009128 <_free_r>
 8008bac:	e7c7      	b.n	8008b3e <__ssputs_r+0x46>
	...

08008bb0 <_svfiprintf_r>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	4698      	mov	r8, r3
 8008bb6:	898b      	ldrh	r3, [r1, #12]
 8008bb8:	061b      	lsls	r3, r3, #24
 8008bba:	b09d      	sub	sp, #116	; 0x74
 8008bbc:	4607      	mov	r7, r0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	d50e      	bpl.n	8008be2 <_svfiprintf_r+0x32>
 8008bc4:	690b      	ldr	r3, [r1, #16]
 8008bc6:	b963      	cbnz	r3, 8008be2 <_svfiprintf_r+0x32>
 8008bc8:	2140      	movs	r1, #64	; 0x40
 8008bca:	f000 fb19 	bl	8009200 <_malloc_r>
 8008bce:	6028      	str	r0, [r5, #0]
 8008bd0:	6128      	str	r0, [r5, #16]
 8008bd2:	b920      	cbnz	r0, 8008bde <_svfiprintf_r+0x2e>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	e0d1      	b.n	8008d82 <_svfiprintf_r+0x1d2>
 8008bde:	2340      	movs	r3, #64	; 0x40
 8008be0:	616b      	str	r3, [r5, #20]
 8008be2:	2300      	movs	r3, #0
 8008be4:	9309      	str	r3, [sp, #36]	; 0x24
 8008be6:	2320      	movs	r3, #32
 8008be8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf0:	2330      	movs	r3, #48	; 0x30
 8008bf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d9c <_svfiprintf_r+0x1ec>
 8008bf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bfa:	f04f 0901 	mov.w	r9, #1
 8008bfe:	4623      	mov	r3, r4
 8008c00:	469a      	mov	sl, r3
 8008c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c06:	b10a      	cbz	r2, 8008c0c <_svfiprintf_r+0x5c>
 8008c08:	2a25      	cmp	r2, #37	; 0x25
 8008c0a:	d1f9      	bne.n	8008c00 <_svfiprintf_r+0x50>
 8008c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c10:	d00b      	beq.n	8008c2a <_svfiprintf_r+0x7a>
 8008c12:	465b      	mov	r3, fp
 8008c14:	4622      	mov	r2, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	4638      	mov	r0, r7
 8008c1a:	f7ff ff6d 	bl	8008af8 <__ssputs_r>
 8008c1e:	3001      	adds	r0, #1
 8008c20:	f000 80aa 	beq.w	8008d78 <_svfiprintf_r+0x1c8>
 8008c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c26:	445a      	add	r2, fp
 8008c28:	9209      	str	r2, [sp, #36]	; 0x24
 8008c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 80a2 	beq.w	8008d78 <_svfiprintf_r+0x1c8>
 8008c34:	2300      	movs	r3, #0
 8008c36:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c3e:	f10a 0a01 	add.w	sl, sl, #1
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	9307      	str	r3, [sp, #28]
 8008c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c4c:	4654      	mov	r4, sl
 8008c4e:	2205      	movs	r2, #5
 8008c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c54:	4851      	ldr	r0, [pc, #324]	; (8008d9c <_svfiprintf_r+0x1ec>)
 8008c56:	f7f7 fb4b 	bl	80002f0 <memchr>
 8008c5a:	9a04      	ldr	r2, [sp, #16]
 8008c5c:	b9d8      	cbnz	r0, 8008c96 <_svfiprintf_r+0xe6>
 8008c5e:	06d0      	lsls	r0, r2, #27
 8008c60:	bf44      	itt	mi
 8008c62:	2320      	movmi	r3, #32
 8008c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c68:	0711      	lsls	r1, r2, #28
 8008c6a:	bf44      	itt	mi
 8008c6c:	232b      	movmi	r3, #43	; 0x2b
 8008c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c72:	f89a 3000 	ldrb.w	r3, [sl]
 8008c76:	2b2a      	cmp	r3, #42	; 0x2a
 8008c78:	d015      	beq.n	8008ca6 <_svfiprintf_r+0xf6>
 8008c7a:	9a07      	ldr	r2, [sp, #28]
 8008c7c:	4654      	mov	r4, sl
 8008c7e:	2000      	movs	r0, #0
 8008c80:	f04f 0c0a 	mov.w	ip, #10
 8008c84:	4621      	mov	r1, r4
 8008c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c8a:	3b30      	subs	r3, #48	; 0x30
 8008c8c:	2b09      	cmp	r3, #9
 8008c8e:	d94e      	bls.n	8008d2e <_svfiprintf_r+0x17e>
 8008c90:	b1b0      	cbz	r0, 8008cc0 <_svfiprintf_r+0x110>
 8008c92:	9207      	str	r2, [sp, #28]
 8008c94:	e014      	b.n	8008cc0 <_svfiprintf_r+0x110>
 8008c96:	eba0 0308 	sub.w	r3, r0, r8
 8008c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	46a2      	mov	sl, r4
 8008ca4:	e7d2      	b.n	8008c4c <_svfiprintf_r+0x9c>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	1d19      	adds	r1, r3, #4
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	9103      	str	r1, [sp, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bfbb      	ittet	lt
 8008cb2:	425b      	neglt	r3, r3
 8008cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8008cb8:	9307      	strge	r3, [sp, #28]
 8008cba:	9307      	strlt	r3, [sp, #28]
 8008cbc:	bfb8      	it	lt
 8008cbe:	9204      	strlt	r2, [sp, #16]
 8008cc0:	7823      	ldrb	r3, [r4, #0]
 8008cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8008cc4:	d10c      	bne.n	8008ce0 <_svfiprintf_r+0x130>
 8008cc6:	7863      	ldrb	r3, [r4, #1]
 8008cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cca:	d135      	bne.n	8008d38 <_svfiprintf_r+0x188>
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	9203      	str	r2, [sp, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bfb8      	it	lt
 8008cd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cdc:	3402      	adds	r4, #2
 8008cde:	9305      	str	r3, [sp, #20]
 8008ce0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008dac <_svfiprintf_r+0x1fc>
 8008ce4:	7821      	ldrb	r1, [r4, #0]
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	4650      	mov	r0, sl
 8008cea:	f7f7 fb01 	bl	80002f0 <memchr>
 8008cee:	b140      	cbz	r0, 8008d02 <_svfiprintf_r+0x152>
 8008cf0:	2340      	movs	r3, #64	; 0x40
 8008cf2:	eba0 000a 	sub.w	r0, r0, sl
 8008cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8008cfa:	9b04      	ldr	r3, [sp, #16]
 8008cfc:	4303      	orrs	r3, r0
 8008cfe:	3401      	adds	r4, #1
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d06:	4826      	ldr	r0, [pc, #152]	; (8008da0 <_svfiprintf_r+0x1f0>)
 8008d08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d0c:	2206      	movs	r2, #6
 8008d0e:	f7f7 faef 	bl	80002f0 <memchr>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d038      	beq.n	8008d88 <_svfiprintf_r+0x1d8>
 8008d16:	4b23      	ldr	r3, [pc, #140]	; (8008da4 <_svfiprintf_r+0x1f4>)
 8008d18:	bb1b      	cbnz	r3, 8008d62 <_svfiprintf_r+0x1b2>
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	3307      	adds	r3, #7
 8008d1e:	f023 0307 	bic.w	r3, r3, #7
 8008d22:	3308      	adds	r3, #8
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d28:	4433      	add	r3, r6
 8008d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2c:	e767      	b.n	8008bfe <_svfiprintf_r+0x4e>
 8008d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d32:	460c      	mov	r4, r1
 8008d34:	2001      	movs	r0, #1
 8008d36:	e7a5      	b.n	8008c84 <_svfiprintf_r+0xd4>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f04f 0c0a 	mov.w	ip, #10
 8008d44:	4620      	mov	r0, r4
 8008d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d4a:	3a30      	subs	r2, #48	; 0x30
 8008d4c:	2a09      	cmp	r2, #9
 8008d4e:	d903      	bls.n	8008d58 <_svfiprintf_r+0x1a8>
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0c5      	beq.n	8008ce0 <_svfiprintf_r+0x130>
 8008d54:	9105      	str	r1, [sp, #20]
 8008d56:	e7c3      	b.n	8008ce0 <_svfiprintf_r+0x130>
 8008d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e7f0      	b.n	8008d44 <_svfiprintf_r+0x194>
 8008d62:	ab03      	add	r3, sp, #12
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	462a      	mov	r2, r5
 8008d68:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <_svfiprintf_r+0x1f8>)
 8008d6a:	a904      	add	r1, sp, #16
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f3af 8000 	nop.w
 8008d72:	1c42      	adds	r2, r0, #1
 8008d74:	4606      	mov	r6, r0
 8008d76:	d1d6      	bne.n	8008d26 <_svfiprintf_r+0x176>
 8008d78:	89ab      	ldrh	r3, [r5, #12]
 8008d7a:	065b      	lsls	r3, r3, #25
 8008d7c:	f53f af2c 	bmi.w	8008bd8 <_svfiprintf_r+0x28>
 8008d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d82:	b01d      	add	sp, #116	; 0x74
 8008d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d88:	ab03      	add	r3, sp, #12
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	462a      	mov	r2, r5
 8008d8e:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <_svfiprintf_r+0x1f8>)
 8008d90:	a904      	add	r1, sp, #16
 8008d92:	4638      	mov	r0, r7
 8008d94:	f000 f87a 	bl	8008e8c <_printf_i>
 8008d98:	e7eb      	b.n	8008d72 <_svfiprintf_r+0x1c2>
 8008d9a:	bf00      	nop
 8008d9c:	0800aad4 	.word	0x0800aad4
 8008da0:	0800aade 	.word	0x0800aade
 8008da4:	00000000 	.word	0x00000000
 8008da8:	08008af9 	.word	0x08008af9
 8008dac:	0800aada 	.word	0x0800aada

08008db0 <_printf_common>:
 8008db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db4:	4616      	mov	r6, r2
 8008db6:	4699      	mov	r9, r3
 8008db8:	688a      	ldr	r2, [r1, #8]
 8008dba:	690b      	ldr	r3, [r1, #16]
 8008dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	bfb8      	it	lt
 8008dc4:	4613      	movlt	r3, r2
 8008dc6:	6033      	str	r3, [r6, #0]
 8008dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dcc:	4607      	mov	r7, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	b10a      	cbz	r2, 8008dd6 <_printf_common+0x26>
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	6033      	str	r3, [r6, #0]
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	0699      	lsls	r1, r3, #26
 8008dda:	bf42      	ittt	mi
 8008ddc:	6833      	ldrmi	r3, [r6, #0]
 8008dde:	3302      	addmi	r3, #2
 8008de0:	6033      	strmi	r3, [r6, #0]
 8008de2:	6825      	ldr	r5, [r4, #0]
 8008de4:	f015 0506 	ands.w	r5, r5, #6
 8008de8:	d106      	bne.n	8008df8 <_printf_common+0x48>
 8008dea:	f104 0a19 	add.w	sl, r4, #25
 8008dee:	68e3      	ldr	r3, [r4, #12]
 8008df0:	6832      	ldr	r2, [r6, #0]
 8008df2:	1a9b      	subs	r3, r3, r2
 8008df4:	42ab      	cmp	r3, r5
 8008df6:	dc26      	bgt.n	8008e46 <_printf_common+0x96>
 8008df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dfc:	1e13      	subs	r3, r2, #0
 8008dfe:	6822      	ldr	r2, [r4, #0]
 8008e00:	bf18      	it	ne
 8008e02:	2301      	movne	r3, #1
 8008e04:	0692      	lsls	r2, r2, #26
 8008e06:	d42b      	bmi.n	8008e60 <_printf_common+0xb0>
 8008e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	4638      	mov	r0, r7
 8008e10:	47c0      	blx	r8
 8008e12:	3001      	adds	r0, #1
 8008e14:	d01e      	beq.n	8008e54 <_printf_common+0xa4>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	68e5      	ldr	r5, [r4, #12]
 8008e1a:	6832      	ldr	r2, [r6, #0]
 8008e1c:	f003 0306 	and.w	r3, r3, #6
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	bf08      	it	eq
 8008e24:	1aad      	subeq	r5, r5, r2
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	6922      	ldr	r2, [r4, #16]
 8008e2a:	bf0c      	ite	eq
 8008e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e30:	2500      	movne	r5, #0
 8008e32:	4293      	cmp	r3, r2
 8008e34:	bfc4      	itt	gt
 8008e36:	1a9b      	subgt	r3, r3, r2
 8008e38:	18ed      	addgt	r5, r5, r3
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	341a      	adds	r4, #26
 8008e3e:	42b5      	cmp	r5, r6
 8008e40:	d11a      	bne.n	8008e78 <_printf_common+0xc8>
 8008e42:	2000      	movs	r0, #0
 8008e44:	e008      	b.n	8008e58 <_printf_common+0xa8>
 8008e46:	2301      	movs	r3, #1
 8008e48:	4652      	mov	r2, sl
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	47c0      	blx	r8
 8008e50:	3001      	adds	r0, #1
 8008e52:	d103      	bne.n	8008e5c <_printf_common+0xac>
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295
 8008e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	e7c6      	b.n	8008dee <_printf_common+0x3e>
 8008e60:	18e1      	adds	r1, r4, r3
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	2030      	movs	r0, #48	; 0x30
 8008e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e6a:	4422      	add	r2, r4
 8008e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e74:	3302      	adds	r3, #2
 8008e76:	e7c7      	b.n	8008e08 <_printf_common+0x58>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	4638      	mov	r0, r7
 8008e80:	47c0      	blx	r8
 8008e82:	3001      	adds	r0, #1
 8008e84:	d0e6      	beq.n	8008e54 <_printf_common+0xa4>
 8008e86:	3601      	adds	r6, #1
 8008e88:	e7d9      	b.n	8008e3e <_printf_common+0x8e>
	...

08008e8c <_printf_i>:
 8008e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	7e0f      	ldrb	r7, [r1, #24]
 8008e92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e94:	2f78      	cmp	r7, #120	; 0x78
 8008e96:	4691      	mov	r9, r2
 8008e98:	4680      	mov	r8, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	469a      	mov	sl, r3
 8008e9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ea2:	d807      	bhi.n	8008eb4 <_printf_i+0x28>
 8008ea4:	2f62      	cmp	r7, #98	; 0x62
 8008ea6:	d80a      	bhi.n	8008ebe <_printf_i+0x32>
 8008ea8:	2f00      	cmp	r7, #0
 8008eaa:	f000 80d8 	beq.w	800905e <_printf_i+0x1d2>
 8008eae:	2f58      	cmp	r7, #88	; 0x58
 8008eb0:	f000 80a3 	beq.w	8008ffa <_printf_i+0x16e>
 8008eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ebc:	e03a      	b.n	8008f34 <_printf_i+0xa8>
 8008ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ec2:	2b15      	cmp	r3, #21
 8008ec4:	d8f6      	bhi.n	8008eb4 <_printf_i+0x28>
 8008ec6:	a101      	add	r1, pc, #4	; (adr r1, 8008ecc <_printf_i+0x40>)
 8008ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ecc:	08008f25 	.word	0x08008f25
 8008ed0:	08008f39 	.word	0x08008f39
 8008ed4:	08008eb5 	.word	0x08008eb5
 8008ed8:	08008eb5 	.word	0x08008eb5
 8008edc:	08008eb5 	.word	0x08008eb5
 8008ee0:	08008eb5 	.word	0x08008eb5
 8008ee4:	08008f39 	.word	0x08008f39
 8008ee8:	08008eb5 	.word	0x08008eb5
 8008eec:	08008eb5 	.word	0x08008eb5
 8008ef0:	08008eb5 	.word	0x08008eb5
 8008ef4:	08008eb5 	.word	0x08008eb5
 8008ef8:	08009045 	.word	0x08009045
 8008efc:	08008f69 	.word	0x08008f69
 8008f00:	08009027 	.word	0x08009027
 8008f04:	08008eb5 	.word	0x08008eb5
 8008f08:	08008eb5 	.word	0x08008eb5
 8008f0c:	08009067 	.word	0x08009067
 8008f10:	08008eb5 	.word	0x08008eb5
 8008f14:	08008f69 	.word	0x08008f69
 8008f18:	08008eb5 	.word	0x08008eb5
 8008f1c:	08008eb5 	.word	0x08008eb5
 8008f20:	0800902f 	.word	0x0800902f
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	1d1a      	adds	r2, r3, #4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	602a      	str	r2, [r5, #0]
 8008f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f34:	2301      	movs	r3, #1
 8008f36:	e0a3      	b.n	8009080 <_printf_i+0x1f4>
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	6829      	ldr	r1, [r5, #0]
 8008f3c:	0606      	lsls	r6, r0, #24
 8008f3e:	f101 0304 	add.w	r3, r1, #4
 8008f42:	d50a      	bpl.n	8008f5a <_printf_i+0xce>
 8008f44:	680e      	ldr	r6, [r1, #0]
 8008f46:	602b      	str	r3, [r5, #0]
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	da03      	bge.n	8008f54 <_printf_i+0xc8>
 8008f4c:	232d      	movs	r3, #45	; 0x2d
 8008f4e:	4276      	negs	r6, r6
 8008f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f54:	485e      	ldr	r0, [pc, #376]	; (80090d0 <_printf_i+0x244>)
 8008f56:	230a      	movs	r3, #10
 8008f58:	e019      	b.n	8008f8e <_printf_i+0x102>
 8008f5a:	680e      	ldr	r6, [r1, #0]
 8008f5c:	602b      	str	r3, [r5, #0]
 8008f5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f62:	bf18      	it	ne
 8008f64:	b236      	sxthne	r6, r6
 8008f66:	e7ef      	b.n	8008f48 <_printf_i+0xbc>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	6820      	ldr	r0, [r4, #0]
 8008f6c:	1d19      	adds	r1, r3, #4
 8008f6e:	6029      	str	r1, [r5, #0]
 8008f70:	0601      	lsls	r1, r0, #24
 8008f72:	d501      	bpl.n	8008f78 <_printf_i+0xec>
 8008f74:	681e      	ldr	r6, [r3, #0]
 8008f76:	e002      	b.n	8008f7e <_printf_i+0xf2>
 8008f78:	0646      	lsls	r6, r0, #25
 8008f7a:	d5fb      	bpl.n	8008f74 <_printf_i+0xe8>
 8008f7c:	881e      	ldrh	r6, [r3, #0]
 8008f7e:	4854      	ldr	r0, [pc, #336]	; (80090d0 <_printf_i+0x244>)
 8008f80:	2f6f      	cmp	r7, #111	; 0x6f
 8008f82:	bf0c      	ite	eq
 8008f84:	2308      	moveq	r3, #8
 8008f86:	230a      	movne	r3, #10
 8008f88:	2100      	movs	r1, #0
 8008f8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f8e:	6865      	ldr	r5, [r4, #4]
 8008f90:	60a5      	str	r5, [r4, #8]
 8008f92:	2d00      	cmp	r5, #0
 8008f94:	bfa2      	ittt	ge
 8008f96:	6821      	ldrge	r1, [r4, #0]
 8008f98:	f021 0104 	bicge.w	r1, r1, #4
 8008f9c:	6021      	strge	r1, [r4, #0]
 8008f9e:	b90e      	cbnz	r6, 8008fa4 <_printf_i+0x118>
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	d04d      	beq.n	8009040 <_printf_i+0x1b4>
 8008fa4:	4615      	mov	r5, r2
 8008fa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008faa:	fb03 6711 	mls	r7, r3, r1, r6
 8008fae:	5dc7      	ldrb	r7, [r0, r7]
 8008fb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fb4:	4637      	mov	r7, r6
 8008fb6:	42bb      	cmp	r3, r7
 8008fb8:	460e      	mov	r6, r1
 8008fba:	d9f4      	bls.n	8008fa6 <_printf_i+0x11a>
 8008fbc:	2b08      	cmp	r3, #8
 8008fbe:	d10b      	bne.n	8008fd8 <_printf_i+0x14c>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	07de      	lsls	r6, r3, #31
 8008fc4:	d508      	bpl.n	8008fd8 <_printf_i+0x14c>
 8008fc6:	6923      	ldr	r3, [r4, #16]
 8008fc8:	6861      	ldr	r1, [r4, #4]
 8008fca:	4299      	cmp	r1, r3
 8008fcc:	bfde      	ittt	le
 8008fce:	2330      	movle	r3, #48	; 0x30
 8008fd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fd8:	1b52      	subs	r2, r2, r5
 8008fda:	6122      	str	r2, [r4, #16]
 8008fdc:	f8cd a000 	str.w	sl, [sp]
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	aa03      	add	r2, sp, #12
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	f7ff fee2 	bl	8008db0 <_printf_common>
 8008fec:	3001      	adds	r0, #1
 8008fee:	d14c      	bne.n	800908a <_printf_i+0x1fe>
 8008ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff4:	b004      	add	sp, #16
 8008ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffa:	4835      	ldr	r0, [pc, #212]	; (80090d0 <_printf_i+0x244>)
 8008ffc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009000:	6829      	ldr	r1, [r5, #0]
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	f851 6b04 	ldr.w	r6, [r1], #4
 8009008:	6029      	str	r1, [r5, #0]
 800900a:	061d      	lsls	r5, r3, #24
 800900c:	d514      	bpl.n	8009038 <_printf_i+0x1ac>
 800900e:	07df      	lsls	r7, r3, #31
 8009010:	bf44      	itt	mi
 8009012:	f043 0320 	orrmi.w	r3, r3, #32
 8009016:	6023      	strmi	r3, [r4, #0]
 8009018:	b91e      	cbnz	r6, 8009022 <_printf_i+0x196>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	f023 0320 	bic.w	r3, r3, #32
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	2310      	movs	r3, #16
 8009024:	e7b0      	b.n	8008f88 <_printf_i+0xfc>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	f043 0320 	orr.w	r3, r3, #32
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	2378      	movs	r3, #120	; 0x78
 8009030:	4828      	ldr	r0, [pc, #160]	; (80090d4 <_printf_i+0x248>)
 8009032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009036:	e7e3      	b.n	8009000 <_printf_i+0x174>
 8009038:	0659      	lsls	r1, r3, #25
 800903a:	bf48      	it	mi
 800903c:	b2b6      	uxthmi	r6, r6
 800903e:	e7e6      	b.n	800900e <_printf_i+0x182>
 8009040:	4615      	mov	r5, r2
 8009042:	e7bb      	b.n	8008fbc <_printf_i+0x130>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	6826      	ldr	r6, [r4, #0]
 8009048:	6961      	ldr	r1, [r4, #20]
 800904a:	1d18      	adds	r0, r3, #4
 800904c:	6028      	str	r0, [r5, #0]
 800904e:	0635      	lsls	r5, r6, #24
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	d501      	bpl.n	8009058 <_printf_i+0x1cc>
 8009054:	6019      	str	r1, [r3, #0]
 8009056:	e002      	b.n	800905e <_printf_i+0x1d2>
 8009058:	0670      	lsls	r0, r6, #25
 800905a:	d5fb      	bpl.n	8009054 <_printf_i+0x1c8>
 800905c:	8019      	strh	r1, [r3, #0]
 800905e:	2300      	movs	r3, #0
 8009060:	6123      	str	r3, [r4, #16]
 8009062:	4615      	mov	r5, r2
 8009064:	e7ba      	b.n	8008fdc <_printf_i+0x150>
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	1d1a      	adds	r2, r3, #4
 800906a:	602a      	str	r2, [r5, #0]
 800906c:	681d      	ldr	r5, [r3, #0]
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	2100      	movs	r1, #0
 8009072:	4628      	mov	r0, r5
 8009074:	f7f7 f93c 	bl	80002f0 <memchr>
 8009078:	b108      	cbz	r0, 800907e <_printf_i+0x1f2>
 800907a:	1b40      	subs	r0, r0, r5
 800907c:	6060      	str	r0, [r4, #4]
 800907e:	6863      	ldr	r3, [r4, #4]
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	2300      	movs	r3, #0
 8009084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009088:	e7a8      	b.n	8008fdc <_printf_i+0x150>
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	462a      	mov	r2, r5
 800908e:	4649      	mov	r1, r9
 8009090:	4640      	mov	r0, r8
 8009092:	47d0      	blx	sl
 8009094:	3001      	adds	r0, #1
 8009096:	d0ab      	beq.n	8008ff0 <_printf_i+0x164>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	079b      	lsls	r3, r3, #30
 800909c:	d413      	bmi.n	80090c6 <_printf_i+0x23a>
 800909e:	68e0      	ldr	r0, [r4, #12]
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	4298      	cmp	r0, r3
 80090a4:	bfb8      	it	lt
 80090a6:	4618      	movlt	r0, r3
 80090a8:	e7a4      	b.n	8008ff4 <_printf_i+0x168>
 80090aa:	2301      	movs	r3, #1
 80090ac:	4632      	mov	r2, r6
 80090ae:	4649      	mov	r1, r9
 80090b0:	4640      	mov	r0, r8
 80090b2:	47d0      	blx	sl
 80090b4:	3001      	adds	r0, #1
 80090b6:	d09b      	beq.n	8008ff0 <_printf_i+0x164>
 80090b8:	3501      	adds	r5, #1
 80090ba:	68e3      	ldr	r3, [r4, #12]
 80090bc:	9903      	ldr	r1, [sp, #12]
 80090be:	1a5b      	subs	r3, r3, r1
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	dcf2      	bgt.n	80090aa <_printf_i+0x21e>
 80090c4:	e7eb      	b.n	800909e <_printf_i+0x212>
 80090c6:	2500      	movs	r5, #0
 80090c8:	f104 0619 	add.w	r6, r4, #25
 80090cc:	e7f5      	b.n	80090ba <_printf_i+0x22e>
 80090ce:	bf00      	nop
 80090d0:	0800aae5 	.word	0x0800aae5
 80090d4:	0800aaf6 	.word	0x0800aaf6

080090d8 <memcpy>:
 80090d8:	440a      	add	r2, r1
 80090da:	4291      	cmp	r1, r2
 80090dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80090e0:	d100      	bne.n	80090e4 <memcpy+0xc>
 80090e2:	4770      	bx	lr
 80090e4:	b510      	push	{r4, lr}
 80090e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090ee:	4291      	cmp	r1, r2
 80090f0:	d1f9      	bne.n	80090e6 <memcpy+0xe>
 80090f2:	bd10      	pop	{r4, pc}

080090f4 <memmove>:
 80090f4:	4288      	cmp	r0, r1
 80090f6:	b510      	push	{r4, lr}
 80090f8:	eb01 0402 	add.w	r4, r1, r2
 80090fc:	d902      	bls.n	8009104 <memmove+0x10>
 80090fe:	4284      	cmp	r4, r0
 8009100:	4623      	mov	r3, r4
 8009102:	d807      	bhi.n	8009114 <memmove+0x20>
 8009104:	1e43      	subs	r3, r0, #1
 8009106:	42a1      	cmp	r1, r4
 8009108:	d008      	beq.n	800911c <memmove+0x28>
 800910a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800910e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009112:	e7f8      	b.n	8009106 <memmove+0x12>
 8009114:	4402      	add	r2, r0
 8009116:	4601      	mov	r1, r0
 8009118:	428a      	cmp	r2, r1
 800911a:	d100      	bne.n	800911e <memmove+0x2a>
 800911c:	bd10      	pop	{r4, pc}
 800911e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009126:	e7f7      	b.n	8009118 <memmove+0x24>

08009128 <_free_r>:
 8009128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800912a:	2900      	cmp	r1, #0
 800912c:	d044      	beq.n	80091b8 <_free_r+0x90>
 800912e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009132:	9001      	str	r0, [sp, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f1a1 0404 	sub.w	r4, r1, #4
 800913a:	bfb8      	it	lt
 800913c:	18e4      	addlt	r4, r4, r3
 800913e:	f000 f913 	bl	8009368 <__malloc_lock>
 8009142:	4a1e      	ldr	r2, [pc, #120]	; (80091bc <_free_r+0x94>)
 8009144:	9801      	ldr	r0, [sp, #4]
 8009146:	6813      	ldr	r3, [r2, #0]
 8009148:	b933      	cbnz	r3, 8009158 <_free_r+0x30>
 800914a:	6063      	str	r3, [r4, #4]
 800914c:	6014      	str	r4, [r2, #0]
 800914e:	b003      	add	sp, #12
 8009150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009154:	f000 b90e 	b.w	8009374 <__malloc_unlock>
 8009158:	42a3      	cmp	r3, r4
 800915a:	d908      	bls.n	800916e <_free_r+0x46>
 800915c:	6825      	ldr	r5, [r4, #0]
 800915e:	1961      	adds	r1, r4, r5
 8009160:	428b      	cmp	r3, r1
 8009162:	bf01      	itttt	eq
 8009164:	6819      	ldreq	r1, [r3, #0]
 8009166:	685b      	ldreq	r3, [r3, #4]
 8009168:	1949      	addeq	r1, r1, r5
 800916a:	6021      	streq	r1, [r4, #0]
 800916c:	e7ed      	b.n	800914a <_free_r+0x22>
 800916e:	461a      	mov	r2, r3
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	b10b      	cbz	r3, 8009178 <_free_r+0x50>
 8009174:	42a3      	cmp	r3, r4
 8009176:	d9fa      	bls.n	800916e <_free_r+0x46>
 8009178:	6811      	ldr	r1, [r2, #0]
 800917a:	1855      	adds	r5, r2, r1
 800917c:	42a5      	cmp	r5, r4
 800917e:	d10b      	bne.n	8009198 <_free_r+0x70>
 8009180:	6824      	ldr	r4, [r4, #0]
 8009182:	4421      	add	r1, r4
 8009184:	1854      	adds	r4, r2, r1
 8009186:	42a3      	cmp	r3, r4
 8009188:	6011      	str	r1, [r2, #0]
 800918a:	d1e0      	bne.n	800914e <_free_r+0x26>
 800918c:	681c      	ldr	r4, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	6053      	str	r3, [r2, #4]
 8009192:	4421      	add	r1, r4
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	e7da      	b.n	800914e <_free_r+0x26>
 8009198:	d902      	bls.n	80091a0 <_free_r+0x78>
 800919a:	230c      	movs	r3, #12
 800919c:	6003      	str	r3, [r0, #0]
 800919e:	e7d6      	b.n	800914e <_free_r+0x26>
 80091a0:	6825      	ldr	r5, [r4, #0]
 80091a2:	1961      	adds	r1, r4, r5
 80091a4:	428b      	cmp	r3, r1
 80091a6:	bf04      	itt	eq
 80091a8:	6819      	ldreq	r1, [r3, #0]
 80091aa:	685b      	ldreq	r3, [r3, #4]
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	bf04      	itt	eq
 80091b0:	1949      	addeq	r1, r1, r5
 80091b2:	6021      	streq	r1, [r4, #0]
 80091b4:	6054      	str	r4, [r2, #4]
 80091b6:	e7ca      	b.n	800914e <_free_r+0x26>
 80091b8:	b003      	add	sp, #12
 80091ba:	bd30      	pop	{r4, r5, pc}
 80091bc:	240006ac 	.word	0x240006ac

080091c0 <sbrk_aligned>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	4e0e      	ldr	r6, [pc, #56]	; (80091fc <sbrk_aligned+0x3c>)
 80091c4:	460c      	mov	r4, r1
 80091c6:	6831      	ldr	r1, [r6, #0]
 80091c8:	4605      	mov	r5, r0
 80091ca:	b911      	cbnz	r1, 80091d2 <sbrk_aligned+0x12>
 80091cc:	f000 f8bc 	bl	8009348 <_sbrk_r>
 80091d0:	6030      	str	r0, [r6, #0]
 80091d2:	4621      	mov	r1, r4
 80091d4:	4628      	mov	r0, r5
 80091d6:	f000 f8b7 	bl	8009348 <_sbrk_r>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d00a      	beq.n	80091f4 <sbrk_aligned+0x34>
 80091de:	1cc4      	adds	r4, r0, #3
 80091e0:	f024 0403 	bic.w	r4, r4, #3
 80091e4:	42a0      	cmp	r0, r4
 80091e6:	d007      	beq.n	80091f8 <sbrk_aligned+0x38>
 80091e8:	1a21      	subs	r1, r4, r0
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 f8ac 	bl	8009348 <_sbrk_r>
 80091f0:	3001      	adds	r0, #1
 80091f2:	d101      	bne.n	80091f8 <sbrk_aligned+0x38>
 80091f4:	f04f 34ff 	mov.w	r4, #4294967295
 80091f8:	4620      	mov	r0, r4
 80091fa:	bd70      	pop	{r4, r5, r6, pc}
 80091fc:	240006b0 	.word	0x240006b0

08009200 <_malloc_r>:
 8009200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009204:	1ccd      	adds	r5, r1, #3
 8009206:	f025 0503 	bic.w	r5, r5, #3
 800920a:	3508      	adds	r5, #8
 800920c:	2d0c      	cmp	r5, #12
 800920e:	bf38      	it	cc
 8009210:	250c      	movcc	r5, #12
 8009212:	2d00      	cmp	r5, #0
 8009214:	4607      	mov	r7, r0
 8009216:	db01      	blt.n	800921c <_malloc_r+0x1c>
 8009218:	42a9      	cmp	r1, r5
 800921a:	d905      	bls.n	8009228 <_malloc_r+0x28>
 800921c:	230c      	movs	r3, #12
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	2600      	movs	r6, #0
 8009222:	4630      	mov	r0, r6
 8009224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009228:	4e2e      	ldr	r6, [pc, #184]	; (80092e4 <_malloc_r+0xe4>)
 800922a:	f000 f89d 	bl	8009368 <__malloc_lock>
 800922e:	6833      	ldr	r3, [r6, #0]
 8009230:	461c      	mov	r4, r3
 8009232:	bb34      	cbnz	r4, 8009282 <_malloc_r+0x82>
 8009234:	4629      	mov	r1, r5
 8009236:	4638      	mov	r0, r7
 8009238:	f7ff ffc2 	bl	80091c0 <sbrk_aligned>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	4604      	mov	r4, r0
 8009240:	d14d      	bne.n	80092de <_malloc_r+0xde>
 8009242:	6834      	ldr	r4, [r6, #0]
 8009244:	4626      	mov	r6, r4
 8009246:	2e00      	cmp	r6, #0
 8009248:	d140      	bne.n	80092cc <_malloc_r+0xcc>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	4631      	mov	r1, r6
 800924e:	4638      	mov	r0, r7
 8009250:	eb04 0803 	add.w	r8, r4, r3
 8009254:	f000 f878 	bl	8009348 <_sbrk_r>
 8009258:	4580      	cmp	r8, r0
 800925a:	d13a      	bne.n	80092d2 <_malloc_r+0xd2>
 800925c:	6821      	ldr	r1, [r4, #0]
 800925e:	3503      	adds	r5, #3
 8009260:	1a6d      	subs	r5, r5, r1
 8009262:	f025 0503 	bic.w	r5, r5, #3
 8009266:	3508      	adds	r5, #8
 8009268:	2d0c      	cmp	r5, #12
 800926a:	bf38      	it	cc
 800926c:	250c      	movcc	r5, #12
 800926e:	4629      	mov	r1, r5
 8009270:	4638      	mov	r0, r7
 8009272:	f7ff ffa5 	bl	80091c0 <sbrk_aligned>
 8009276:	3001      	adds	r0, #1
 8009278:	d02b      	beq.n	80092d2 <_malloc_r+0xd2>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	442b      	add	r3, r5
 800927e:	6023      	str	r3, [r4, #0]
 8009280:	e00e      	b.n	80092a0 <_malloc_r+0xa0>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	1b52      	subs	r2, r2, r5
 8009286:	d41e      	bmi.n	80092c6 <_malloc_r+0xc6>
 8009288:	2a0b      	cmp	r2, #11
 800928a:	d916      	bls.n	80092ba <_malloc_r+0xba>
 800928c:	1961      	adds	r1, r4, r5
 800928e:	42a3      	cmp	r3, r4
 8009290:	6025      	str	r5, [r4, #0]
 8009292:	bf18      	it	ne
 8009294:	6059      	strne	r1, [r3, #4]
 8009296:	6863      	ldr	r3, [r4, #4]
 8009298:	bf08      	it	eq
 800929a:	6031      	streq	r1, [r6, #0]
 800929c:	5162      	str	r2, [r4, r5]
 800929e:	604b      	str	r3, [r1, #4]
 80092a0:	4638      	mov	r0, r7
 80092a2:	f104 060b 	add.w	r6, r4, #11
 80092a6:	f000 f865 	bl	8009374 <__malloc_unlock>
 80092aa:	f026 0607 	bic.w	r6, r6, #7
 80092ae:	1d23      	adds	r3, r4, #4
 80092b0:	1af2      	subs	r2, r6, r3
 80092b2:	d0b6      	beq.n	8009222 <_malloc_r+0x22>
 80092b4:	1b9b      	subs	r3, r3, r6
 80092b6:	50a3      	str	r3, [r4, r2]
 80092b8:	e7b3      	b.n	8009222 <_malloc_r+0x22>
 80092ba:	6862      	ldr	r2, [r4, #4]
 80092bc:	42a3      	cmp	r3, r4
 80092be:	bf0c      	ite	eq
 80092c0:	6032      	streq	r2, [r6, #0]
 80092c2:	605a      	strne	r2, [r3, #4]
 80092c4:	e7ec      	b.n	80092a0 <_malloc_r+0xa0>
 80092c6:	4623      	mov	r3, r4
 80092c8:	6864      	ldr	r4, [r4, #4]
 80092ca:	e7b2      	b.n	8009232 <_malloc_r+0x32>
 80092cc:	4634      	mov	r4, r6
 80092ce:	6876      	ldr	r6, [r6, #4]
 80092d0:	e7b9      	b.n	8009246 <_malloc_r+0x46>
 80092d2:	230c      	movs	r3, #12
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	4638      	mov	r0, r7
 80092d8:	f000 f84c 	bl	8009374 <__malloc_unlock>
 80092dc:	e7a1      	b.n	8009222 <_malloc_r+0x22>
 80092de:	6025      	str	r5, [r4, #0]
 80092e0:	e7de      	b.n	80092a0 <_malloc_r+0xa0>
 80092e2:	bf00      	nop
 80092e4:	240006ac 	.word	0x240006ac

080092e8 <_realloc_r>:
 80092e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ec:	4680      	mov	r8, r0
 80092ee:	4614      	mov	r4, r2
 80092f0:	460e      	mov	r6, r1
 80092f2:	b921      	cbnz	r1, 80092fe <_realloc_r+0x16>
 80092f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	4611      	mov	r1, r2
 80092fa:	f7ff bf81 	b.w	8009200 <_malloc_r>
 80092fe:	b92a      	cbnz	r2, 800930c <_realloc_r+0x24>
 8009300:	f7ff ff12 	bl	8009128 <_free_r>
 8009304:	4625      	mov	r5, r4
 8009306:	4628      	mov	r0, r5
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930c:	f000 f838 	bl	8009380 <_malloc_usable_size_r>
 8009310:	4284      	cmp	r4, r0
 8009312:	4607      	mov	r7, r0
 8009314:	d802      	bhi.n	800931c <_realloc_r+0x34>
 8009316:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800931a:	d812      	bhi.n	8009342 <_realloc_r+0x5a>
 800931c:	4621      	mov	r1, r4
 800931e:	4640      	mov	r0, r8
 8009320:	f7ff ff6e 	bl	8009200 <_malloc_r>
 8009324:	4605      	mov	r5, r0
 8009326:	2800      	cmp	r0, #0
 8009328:	d0ed      	beq.n	8009306 <_realloc_r+0x1e>
 800932a:	42bc      	cmp	r4, r7
 800932c:	4622      	mov	r2, r4
 800932e:	4631      	mov	r1, r6
 8009330:	bf28      	it	cs
 8009332:	463a      	movcs	r2, r7
 8009334:	f7ff fed0 	bl	80090d8 <memcpy>
 8009338:	4631      	mov	r1, r6
 800933a:	4640      	mov	r0, r8
 800933c:	f7ff fef4 	bl	8009128 <_free_r>
 8009340:	e7e1      	b.n	8009306 <_realloc_r+0x1e>
 8009342:	4635      	mov	r5, r6
 8009344:	e7df      	b.n	8009306 <_realloc_r+0x1e>
	...

08009348 <_sbrk_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4d06      	ldr	r5, [pc, #24]	; (8009364 <_sbrk_r+0x1c>)
 800934c:	2300      	movs	r3, #0
 800934e:	4604      	mov	r4, r0
 8009350:	4608      	mov	r0, r1
 8009352:	602b      	str	r3, [r5, #0]
 8009354:	f7f8 fb40 	bl	80019d8 <_sbrk>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	d102      	bne.n	8009362 <_sbrk_r+0x1a>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	b103      	cbz	r3, 8009362 <_sbrk_r+0x1a>
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	240006b4 	.word	0x240006b4

08009368 <__malloc_lock>:
 8009368:	4801      	ldr	r0, [pc, #4]	; (8009370 <__malloc_lock+0x8>)
 800936a:	f000 b811 	b.w	8009390 <__retarget_lock_acquire_recursive>
 800936e:	bf00      	nop
 8009370:	240006b8 	.word	0x240006b8

08009374 <__malloc_unlock>:
 8009374:	4801      	ldr	r0, [pc, #4]	; (800937c <__malloc_unlock+0x8>)
 8009376:	f000 b80c 	b.w	8009392 <__retarget_lock_release_recursive>
 800937a:	bf00      	nop
 800937c:	240006b8 	.word	0x240006b8

08009380 <_malloc_usable_size_r>:
 8009380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009384:	1f18      	subs	r0, r3, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	bfbc      	itt	lt
 800938a:	580b      	ldrlt	r3, [r1, r0]
 800938c:	18c0      	addlt	r0, r0, r3
 800938e:	4770      	bx	lr

08009390 <__retarget_lock_acquire_recursive>:
 8009390:	4770      	bx	lr

08009392 <__retarget_lock_release_recursive>:
 8009392:	4770      	bx	lr

08009394 <_init>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	bf00      	nop
 8009398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939a:	bc08      	pop	{r3}
 800939c:	469e      	mov	lr, r3
 800939e:	4770      	bx	lr

080093a0 <_fini>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	bf00      	nop
 80093a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a6:	bc08      	pop	{r3}
 80093a8:	469e      	mov	lr, r3
 80093aa:	4770      	bx	lr
